{
    "1.18.0": {
        "numpy._distributor_init": {},
        "numpy.__config__": {
            "get_info": [
                "name"
            ],
            "show": []
        },
        "numpy": {},
        "numpy.add_newdocs": {},
        "numpy.ctypeslib": {
            "_num_fromflags": [
                "flaglist"
            ],
            "_flags_fromnum": [
                "num"
            ],
            "ndpointer": [
                "dtype",
                "ndim",
                "shape",
                "flags"
            ],
            "_ndptr": {
                "from_param": [
                    "cls",
                    "obj"
                ]
            },
            "_concrete_ndptr": {
                "_check_retval_": [
                    "self"
                ],
                "contents": [
                    "self"
                ]
            }
        },
        "numpy.setup": {
            "configuration": [
                "parent_package",
                "top_path"
            ]
        },
        "numpy.dual": {
            "register_func": [
                "name",
                "func"
            ],
            "restore_func": [
                "name"
            ],
            "restore_all": []
        },
        "numpy._import_tools": {
            "PackageLoader": {
                "__init__": [
                    "self",
                    "verbose",
                    "infunc"
                ],
                "_get_info_files": [
                    "self",
                    "package_dir",
                    "parent_path",
                    "parent_package"
                ],
                "_init_info_modules": [
                    "self",
                    "packages"
                ],
                "_get_sorted_names": [
                    "self"
                ],
                "__call__": [
                    "self"
                ],
                "_execcmd": [
                    "self",
                    "cmdstr"
                ],
                "_obj2repr": [
                    "self",
                    "obj"
                ],
                "log": [
                    "self",
                    "mess"
                ],
                "warn": [
                    "self",
                    "mess"
                ],
                "error": [
                    "self",
                    "mess"
                ],
                "_get_doc_title": [
                    "self",
                    "info_module"
                ],
                "_format_titles": [
                    "self",
                    "titles",
                    "colsep"
                ],
                "get_pkgdocs": [
                    "self"
                ]
            },
            "PackageLoaderDebug": {
                "_execcmd": [
                    "self",
                    "cmdstr"
                ]
            }
        },
        "numpy.version": {},
        "numpy._globals": {
            "ModuleDeprecationWarning": {},
            "VisibleDeprecationWarning": {},
            "_NoValueType": {
                "__new__": [
                    "cls"
                ],
                "__reduce__": [
                    "self"
                ],
                "__repr__": [
                    "self"
                ]
            }
        },
        "numpy.conftest": {
            "pytest_configure": [
                "config"
            ],
            "pytest_addoption": [
                "parser"
            ],
            "pytest_sessionstart": [
                "session"
            ],
            "pytest_itemcollected": [
                "item"
            ],
            "check_fpu_mode": [
                "request"
            ],
            "add_np": [
                "doctest_namespace"
            ]
        },
        "numpy._pytesttester": {
            "_show_numpy_info": [],
            "PytestTester": {
                "__init__": [
                    "self",
                    "module_name"
                ],
                "__call__": [
                    "self",
                    "label",
                    "verbose",
                    "extra_argv",
                    "doctests",
                    "coverage",
                    "durations",
                    "tests"
                ]
            }
        },
        "numpy.matlib": {
            "empty": [
                "shape",
                "dtype",
                "order"
            ],
            "ones": [
                "shape",
                "dtype",
                "order"
            ],
            "zeros": [
                "shape",
                "dtype",
                "order"
            ],
            "identity": [
                "n",
                "dtype"
            ],
            "eye": [
                "n",
                "M",
                "k",
                "dtype",
                "order"
            ],
            "rand": [],
            "randn": [],
            "repmat": [
                "a",
                "m",
                "n"
            ]
        },
        "numpy.distutils.msvc9compiler": {
            "_merge": [
                "old",
                "new"
            ],
            "MSVCCompiler": {
                "__init__": [
                    "self",
                    "verbose",
                    "dry_run",
                    "force"
                ],
                "initialize": [
                    "self",
                    "plat_name"
                ],
                "manifest_setup_ldargs": [
                    "self",
                    "output_filename",
                    "build_temp",
                    "ld_args"
                ]
            }
        },
        "numpy.distutils.environment": {
            "EnvironmentConfig": {
                "__init__": [
                    "self",
                    "distutils_section"
                ],
                "dump_variable": [
                    "self",
                    "name"
                ],
                "dump_variables": [
                    "self"
                ],
                "__getattr__": [
                    "self",
                    "name"
                ],
                "get": [
                    "self",
                    "name",
                    "default"
                ],
                "_get_var": [
                    "self",
                    "name",
                    "conf_desc"
                ],
                "clone": [
                    "self",
                    "hook_handler"
                ],
                "use_distribution": [
                    "self",
                    "dist"
                ]
            }
        },
        "numpy.distutils._shell_utils": {
            "CommandLineParser": {
                "join": [
                    "argv"
                ],
                "split": [
                    "cmd"
                ]
            },
            "WindowsParser": {
                "join": [
                    "argv"
                ],
                "split": [
                    "cmd"
                ]
            },
            "PosixParser": {
                "join": [
                    "argv"
                ],
                "split": [
                    "cmd"
                ]
            }
        },
        "numpy.distutils.__config__": {
            "get_info": [
                "name"
            ],
            "show": []
        },
        "numpy.distutils": {
            "customized_fcompiler": [
                "plat",
                "compiler"
            ],
            "customized_ccompiler": [
                "plat",
                "compiler",
                "verbose"
            ]
        },
        "numpy.distutils.info": {},
        "numpy.distutils.npy_pkg_config": {
            "parse_flags": [
                "line"
            ],
            "_escape_backslash": [
                "val"
            ],
            "parse_meta": [
                "config"
            ],
            "parse_variables": [
                "config"
            ],
            "parse_sections": [
                "config"
            ],
            "pkg_to_filename": [
                "pkg_name"
            ],
            "parse_config": [
                "filename",
                "dirs"
            ],
            "_read_config_imp": [
                "filenames",
                "dirs"
            ],
            "read_config": [
                "pkgname",
                "dirs"
            ],
            "FormatError": {
                "__init__": [
                    "self",
                    "msg"
                ],
                "__str__": [
                    "self"
                ]
            },
            "PkgNotFound": {
                "__init__": [
                    "self",
                    "msg"
                ],
                "__str__": [
                    "self"
                ]
            },
            "LibraryInfo": {
                "__init__": [
                    "self",
                    "name",
                    "description",
                    "version",
                    "sections",
                    "vars",
                    "requires"
                ],
                "sections": [
                    "self"
                ],
                "cflags": [
                    "self",
                    "section"
                ],
                "libs": [
                    "self",
                    "section"
                ],
                "__str__": [
                    "self"
                ]
            },
            "VariableSet": {
                "__init__": [
                    "self",
                    "d"
                ],
                "_init_parse": [
                    "self"
                ],
                "_init_parse_var": [
                    "self",
                    "name",
                    "value"
                ],
                "interpolate": [
                    "self",
                    "value"
                ],
                "variables": [
                    "self"
                ],
                "__getitem__": [
                    "self",
                    "name"
                ],
                "__setitem__": [
                    "self",
                    "name",
                    "value"
                ]
            }
        },
        "numpy.distutils.intelccompiler": {
            "IntelCCompiler": {
                "__init__": [
                    "self",
                    "verbose",
                    "dry_run",
                    "force"
                ]
            },
            "IntelItaniumCCompiler": {},
            "IntelEM64TCCompiler": {
                "__init__": [
                    "self",
                    "verbose",
                    "dry_run",
                    "force"
                ]
            }
        },
        "numpy.distutils.cpuinfo": {
            "getoutput": [
                "cmd",
                "successful_status",
                "stacklevel"
            ],
            "command_info": [
                "successful_status",
                "stacklevel"
            ],
            "command_by_line": [
                "cmd",
                "successful_status",
                "stacklevel"
            ],
            "key_value_from_command": [
                "cmd",
                "sep",
                "successful_status",
                "stacklevel"
            ],
            "CPUInfoBase": {
                "_try_call": [
                    "self",
                    "func"
                ],
                "__getattr__": [
                    "self",
                    "name"
                ],
                "_getNCPUs": [
                    "self"
                ],
                "__get_nbits": [
                    "self"
                ],
                "_is_32bit": [
                    "self"
                ],
                "_is_64bit": [
                    "self"
                ]
            },
            "LinuxCPUInfo": {
                "__init__": [
                    "self"
                ],
                "_not_impl": [
                    "self"
                ],
                "_is_AMD": [
                    "self"
                ],
                "_is_AthlonK6_2": [
                    "self"
                ],
                "_is_AthlonK6_3": [
                    "self"
                ],
                "_is_AthlonK6": [
                    "self"
                ],
                "_is_AthlonK7": [
                    "self"
                ],
                "_is_AthlonMP": [
                    "self"
                ],
                "_is_AMD64": [
                    "self"
                ],
                "_is_Athlon64": [
                    "self"
                ],
                "_is_AthlonHX": [
                    "self"
                ],
                "_is_Opteron": [
                    "self"
                ],
                "_is_Hammer": [
                    "self"
                ],
                "_is_Alpha": [
                    "self"
                ],
                "_is_EV4": [
                    "self"
                ],
                "_is_EV5": [
                    "self"
                ],
                "_is_EV56": [
                    "self"
                ],
                "_is_PCA56": [
                    "self"
                ],
                "_is_Intel": [
                    "self"
                ],
                "_is_i486": [
                    "self"
                ],
                "_is_i586": [
                    "self"
                ],
                "_is_i686": [
                    "self"
                ],
                "_is_Celeron": [
                    "self"
                ],
                "_is_Pentium": [
                    "self"
                ],
                "_is_PentiumII": [
                    "self"
                ],
                "_is_PentiumPro": [
                    "self"
                ],
                "_is_PentiumMMX": [
                    "self"
                ],
                "_is_PentiumIII": [
                    "self"
                ],
                "_is_PentiumIV": [
                    "self"
                ],
                "_is_PentiumM": [
                    "self"
                ],
                "_is_Prescott": [
                    "self"
                ],
                "_is_Nocona": [
                    "self"
                ],
                "_is_Core2": [
                    "self"
                ],
                "_is_Itanium": [
                    "self"
                ],
                "_is_XEON": [
                    "self"
                ],
                "_is_singleCPU": [
                    "self"
                ],
                "_getNCPUs": [
                    "self"
                ],
                "_has_fdiv_bug": [
                    "self"
                ],
                "_has_f00f_bug": [
                    "self"
                ],
                "_has_mmx": [
                    "self"
                ],
                "_has_sse": [
                    "self"
                ],
                "_has_sse2": [
                    "self"
                ],
                "_has_sse3": [
                    "self"
                ],
                "_has_ssse3": [
                    "self"
                ],
                "_has_3dnow": [
                    "self"
                ],
                "_has_3dnowext": [
                    "self"
                ]
            },
            "IRIXCPUInfo": {
                "__init__": [
                    "self"
                ],
                "_not_impl": [
                    "self"
                ],
                "_is_singleCPU": [
                    "self"
                ],
                "_getNCPUs": [
                    "self"
                ],
                "__cputype": [
                    "self",
                    "n"
                ],
                "_is_r2000": [
                    "self"
                ],
                "_is_r3000": [
                    "self"
                ],
                "_is_r3900": [
                    "self"
                ],
                "_is_r4000": [
                    "self"
                ],
                "_is_r4100": [
                    "self"
                ],
                "_is_r4300": [
                    "self"
                ],
                "_is_r4400": [
                    "self"
                ],
                "_is_r4600": [
                    "self"
                ],
                "_is_r4650": [
                    "self"
                ],
                "_is_r5000": [
                    "self"
                ],
                "_is_r6000": [
                    "self"
                ],
                "_is_r8000": [
                    "self"
                ],
                "_is_r10000": [
                    "self"
                ],
                "_is_r12000": [
                    "self"
                ],
                "_is_rorion": [
                    "self"
                ],
                "get_ip": [
                    "self"
                ],
                "__machine": [
                    "self",
                    "n"
                ],
                "_is_IP19": [
                    "self"
                ],
                "_is_IP20": [
                    "self"
                ],
                "_is_IP21": [
                    "self"
                ],
                "_is_IP22": [
                    "self"
                ],
                "_is_IP22_4k": [
                    "self"
                ],
                "_is_IP22_5k": [
                    "self"
                ],
                "_is_IP24": [
                    "self"
                ],
                "_is_IP25": [
                    "self"
                ],
                "_is_IP26": [
                    "self"
                ],
                "_is_IP27": [
                    "self"
                ],
                "_is_IP28": [
                    "self"
                ],
                "_is_IP30": [
                    "self"
                ],
                "_is_IP32": [
                    "self"
                ],
                "_is_IP32_5k": [
                    "self"
                ],
                "_is_IP32_10k": [
                    "self"
                ]
            },
            "DarwinCPUInfo": {
                "__init__": [
                    "self"
                ],
                "_not_impl": [
                    "self"
                ],
                "_getNCPUs": [
                    "self"
                ],
                "_is_Power_Macintosh": [
                    "self"
                ],
                "_is_i386": [
                    "self"
                ],
                "_is_ppc": [
                    "self"
                ],
                "__machine": [
                    "self",
                    "n"
                ],
                "_is_ppc601": [
                    "self"
                ],
                "_is_ppc602": [
                    "self"
                ],
                "_is_ppc603": [
                    "self"
                ],
                "_is_ppc603e": [
                    "self"
                ],
                "_is_ppc604": [
                    "self"
                ],
                "_is_ppc604e": [
                    "self"
                ],
                "_is_ppc620": [
                    "self"
                ],
                "_is_ppc630": [
                    "self"
                ],
                "_is_ppc740": [
                    "self"
                ],
                "_is_ppc7400": [
                    "self"
                ],
                "_is_ppc7450": [
                    "self"
                ],
                "_is_ppc750": [
                    "self"
                ],
                "_is_ppc403": [
                    "self"
                ],
                "_is_ppc505": [
                    "self"
                ],
                "_is_ppc801": [
                    "self"
                ],
                "_is_ppc821": [
                    "self"
                ],
                "_is_ppc823": [
                    "self"
                ],
                "_is_ppc860": [
                    "self"
                ]
            },
            "SunOSCPUInfo": {
                "__init__": [
                    "self"
                ],
                "_not_impl": [
                    "self"
                ],
                "_is_i386": [
                    "self"
                ],
                "_is_sparc": [
                    "self"
                ],
                "_is_sparcv9": [
                    "self"
                ],
                "_getNCPUs": [
                    "self"
                ],
                "_is_sun4": [
                    "self"
                ],
                "_is_SUNW": [
                    "self"
                ],
                "_is_sparcstation5": [
                    "self"
                ],
                "_is_ultra1": [
                    "self"
                ],
                "_is_ultra250": [
                    "self"
                ],
                "_is_ultra2": [
                    "self"
                ],
                "_is_ultra30": [
                    "self"
                ],
                "_is_ultra4": [
                    "self"
                ],
                "_is_ultra5_10": [
                    "self"
                ],
                "_is_ultra5": [
                    "self"
                ],
                "_is_ultra60": [
                    "self"
                ],
                "_is_ultra80": [
                    "self"
                ],
                "_is_ultraenterprice": [
                    "self"
                ],
                "_is_ultraenterprice10k": [
                    "self"
                ],
                "_is_sunfire": [
                    "self"
                ],
                "_is_ultra": [
                    "self"
                ],
                "_is_cpusparcv7": [
                    "self"
                ],
                "_is_cpusparcv8": [
                    "self"
                ],
                "_is_cpusparcv9": [
                    "self"
                ]
            },
            "Win32CPUInfo": {
                "__init__": [
                    "self"
                ],
                "_not_impl": [
                    "self"
                ],
                "_is_AMD": [
                    "self"
                ],
                "_is_Am486": [
                    "self"
                ],
                "_is_Am5x86": [
                    "self"
                ],
                "_is_AMDK5": [
                    "self"
                ],
                "_is_AMDK6": [
                    "self"
                ],
                "_is_AMDK6_2": [
                    "self"
                ],
                "_is_AMDK6_3": [
                    "self"
                ],
                "_is_AMDK7": [
                    "self"
                ],
                "_is_AMD64": [
                    "self"
                ],
                "_is_Intel": [
                    "self"
                ],
                "_is_i386": [
                    "self"
                ],
                "_is_i486": [
                    "self"
                ],
                "_is_i586": [
                    "self"
                ],
                "_is_i686": [
                    "self"
                ],
                "_is_Pentium": [
                    "self"
                ],
                "_is_PentiumMMX": [
                    "self"
                ],
                "_is_PentiumPro": [
                    "self"
                ],
                "_is_PentiumII": [
                    "self"
                ],
                "_is_PentiumIII": [
                    "self"
                ],
                "_is_PentiumIV": [
                    "self"
                ],
                "_is_PentiumM": [
                    "self"
                ],
                "_is_Core2": [
                    "self"
                ],
                "_is_singleCPU": [
                    "self"
                ],
                "_getNCPUs": [
                    "self"
                ],
                "_has_mmx": [
                    "self"
                ],
                "_has_sse": [
                    "self"
                ],
                "_has_sse2": [
                    "self"
                ],
                "_has_3dnow": [
                    "self"
                ],
                "_has_3dnowext": [
                    "self"
                ]
            }
        },
        "numpy.distutils.conv_template": {
            "parse_structure": [
                "astr",
                "level"
            ],
            "paren_repl": [
                "obj"
            ],
            "parse_values": [
                "astr"
            ],
            "parse_loop_header": [
                "loophead"
            ],
            "parse_string": [
                "astr",
                "env",
                "level",
                "line"
            ],
            "process_str": [
                "astr"
            ],
            "resolve_includes": [
                "source"
            ],
            "process_file": [
                "source"
            ],
            "unique_key": [
                "adict"
            ],
            "main": []
        },
        "numpy.distutils.setup": {
            "configuration": [
                "parent_package",
                "top_path"
            ]
        },
        "numpy.distutils.mingw32ccompiler": {
            "get_msvcr_replacement": [],
            "find_python_dll": [],
            "dump_table": [
                "dll"
            ],
            "generate_def": [
                "dll",
                "dfile"
            ],
            "find_dll": [
                "dll_name"
            ],
            "build_msvcr_library": [
                "debug"
            ],
            "build_import_library": [],
            "_check_for_import_lib": [],
            "_build_import_library_amd64": [],
            "_build_import_library_x86": [],
            "msvc_manifest_xml": [
                "maj",
                "min"
            ],
            "manifest_rc": [
                "name",
                "type"
            ],
            "check_embedded_msvcr_match_linked": [
                "msver"
            ],
            "configtest_name": [
                "config"
            ],
            "manifest_name": [
                "config"
            ],
            "rc_name": [
                "config"
            ],
            "generate_manifest": [
                "config"
            ],
            "Mingw32CCompiler": {
                "__init__": [
                    "self",
                    "verbose",
                    "dry_run",
                    "force"
                ],
                "link": [
                    "self",
                    "target_desc",
                    "objects",
                    "output_filename",
                    "output_dir",
                    "libraries",
                    "library_dirs",
                    "runtime_library_dirs",
                    "export_symbols",
                    "debug",
                    "extra_preargs",
                    "extra_postargs",
                    "build_temp",
                    "target_lang"
                ],
                "object_filenames": [
                    "self",
                    "source_filenames",
                    "strip_dir",
                    "output_dir"
                ]
            }
        },
        "numpy.distutils.compat": {
            "get_exception": []
        },
        "numpy.distutils.ccompiler": {
            "_needs_build": [
                "obj",
                "cc_args",
                "extra_postargs",
                "pp_opts"
            ],
            "replace_method": [
                "klass",
                "method_name",
                "func"
            ],
            "CCompiler_find_executables": [
                "self"
            ],
            "CCompiler_spawn": [
                "self",
                "cmd",
                "display"
            ],
            "CCompiler_object_filenames": [
                "self",
                "source_filenames",
                "strip_dir",
                "output_dir"
            ],
            "CCompiler_compile": [
                "self",
                "sources",
                "output_dir",
                "macros",
                "include_dirs",
                "debug",
                "extra_preargs",
                "extra_postargs",
                "depends"
            ],
            "CCompiler_customize_cmd": [
                "self",
                "cmd",
                "ignore"
            ],
            "_compiler_to_string": [
                "compiler"
            ],
            "CCompiler_show_customization": [
                "self"
            ],
            "CCompiler_customize": [
                "self",
                "dist",
                "need_cxx"
            ],
            "simple_version_match": [
                "pat",
                "ignore",
                "start"
            ],
            "CCompiler_get_version": [
                "self",
                "force",
                "ok_status"
            ],
            "CCompiler_cxx_compiler": [
                "self"
            ],
            "new_compiler": [
                "plat",
                "compiler",
                "verbose",
                "dry_run",
                "force"
            ],
            "gen_lib_options": [
                "compiler",
                "library_dirs",
                "runtime_library_dirs",
                "libraries"
            ]
        },
        "numpy.distutils.core": {
            "_dict_append": [
                "d"
            ],
            "_command_line_ok": [
                "_cache"
            ],
            "get_distribution": [
                "always"
            ],
            "setup": [],
            "_check_append_library": [
                "libraries",
                "item"
            ],
            "_check_append_ext_library": [
                "libraries",
                "lib_name",
                "build_info"
            ]
        },
        "numpy.distutils.unixccompiler": {
            "UnixCCompiler__compile": [
                "self",
                "obj",
                "src",
                "ext",
                "cc_args",
                "extra_postargs",
                "pp_opts"
            ],
            "UnixCCompiler_create_static_lib": [
                "self",
                "objects",
                "output_libname",
                "output_dir",
                "debug",
                "target_lang"
            ]
        },
        "numpy.distutils.log": {
            "_fix_args": [
                "args",
                "flag"
            ],
            "set_threshold": [
                "level",
                "force"
            ],
            "get_threshold": [],
            "set_verbosity": [
                "v",
                "force"
            ],
            "Log": {
                "_log": [
                    "self",
                    "level",
                    "msg",
                    "args"
                ],
                "good": [
                    "self",
                    "msg"
                ]
            }
        },
        "numpy.distutils.msvccompiler": {
            "_merge": [
                "old",
                "new"
            ],
            "MSVCCompiler": {
                "__init__": [
                    "self",
                    "verbose",
                    "dry_run",
                    "force"
                ],
                "initialize": [
                    "self"
                ]
            }
        },
        "numpy.distutils.exec_command": {
            "filepath_from_subprocess_output": [
                "output"
            ],
            "forward_bytes_to_stdout": [
                "val"
            ],
            "temp_file_name": [],
            "get_pythonexe": [],
            "find_executable": [
                "exe",
                "path",
                "_cache"
            ],
            "_preserve_environment": [
                "names"
            ],
            "_update_environment": [],
            "exec_command": [
                "command",
                "execute_in",
                "use_shell",
                "use_tee",
                "_with_python"
            ],
            "_exec_command": [
                "command",
                "use_shell",
                "use_tee"
            ],
            "_quote_arg": [
                "arg"
            ]
        },
        "numpy.distutils.lib2def": {
            "parse_cmd": [],
            "getnm": [
                "nm_cmd"
            ],
            "parse_nm": [
                "nm_output"
            ],
            "output_def": [
                "dlist",
                "flist",
                "header",
                "file"
            ]
        },
        "numpy.distutils.pathccompiler": {
            "PathScaleCCompiler": {
                "__init__": [
                    "self",
                    "verbose",
                    "dry_run",
                    "force"
                ]
            }
        },
        "numpy.distutils.misc_util": {
            "clean_up_temporary_directory": [],
            "get_num_build_jobs": [],
            "quote_args": [
                "args"
            ],
            "allpath": [
                "name"
            ],
            "rel_path": [
                "path",
                "parent_path"
            ],
            "get_path_from_frame": [
                "frame",
                "parent_path"
            ],
            "njoin": [],
            "get_mathlibs": [
                "path"
            ],
            "minrelpath": [
                "path"
            ],
            "sorted_glob": [
                "fileglob"
            ],
            "_fix_paths": [
                "paths",
                "local_path",
                "include_non_existing"
            ],
            "gpaths": [
                "paths",
                "local_path",
                "include_non_existing"
            ],
            "make_temp_file": [
                "suffix",
                "prefix",
                "text"
            ],
            "terminal_has_colors": [],
            "default_text": [
                "s"
            ],
            "red_text": [
                "s"
            ],
            "green_text": [
                "s"
            ],
            "yellow_text": [
                "s"
            ],
            "cyan_text": [
                "s"
            ],
            "blue_text": [
                "s"
            ],
            "cyg2win32": [
                "path"
            ],
            "mingw32": [],
            "msvc_runtime_version": [],
            "msvc_runtime_library": [],
            "msvc_runtime_major": [],
            "_get_f90_modules": [
                "source"
            ],
            "is_string": [
                "s"
            ],
            "all_strings": [
                "lst"
            ],
            "is_sequence": [
                "seq"
            ],
            "is_glob_pattern": [
                "s"
            ],
            "as_list": [
                "seq"
            ],
            "get_language": [
                "sources"
            ],
            "has_f_sources": [
                "sources"
            ],
            "has_cxx_sources": [
                "sources"
            ],
            "filter_sources": [
                "sources"
            ],
            "_get_headers": [
                "directory_list"
            ],
            "_get_directories": [
                "list_of_sources"
            ],
            "_commandline_dep_string": [
                "cc_args",
                "extra_postargs",
                "pp_opts"
            ],
            "get_dependencies": [
                "sources"
            ],
            "is_local_src_dir": [
                "directory"
            ],
            "general_source_files": [
                "top_path"
            ],
            "general_source_directories_files": [
                "top_path"
            ],
            "get_ext_source_files": [
                "ext"
            ],
            "get_script_files": [
                "scripts"
            ],
            "get_lib_source_files": [
                "lib"
            ],
            "get_shared_lib_extension": [
                "is_python_ext"
            ],
            "get_data_files": [
                "data"
            ],
            "dot_join": [],
            "get_frame": [
                "level"
            ],
            "get_cmd": [
                "cmdname",
                "_cache"
            ],
            "get_numpy_include_dirs": [],
            "get_npy_pkg_dir": [],
            "get_pkg_info": [
                "pkgname",
                "dirs"
            ],
            "get_info": [
                "pkgname",
                "dirs"
            ],
            "is_bootstrapping": [],
            "default_config_dict": [
                "name",
                "parent_name",
                "local_path"
            ],
            "dict_append": [
                "d"
            ],
            "appendpath": [
                "prefix",
                "path"
            ],
            "generate_config_py": [
                "target"
            ],
            "msvc_version": [
                "compiler"
            ],
            "get_build_architecture": [],
            "InstallableLib": {
                "__init__": [
                    "self",
                    "name",
                    "build_info",
                    "target_dir"
                ]
            },
            "Configuration": {
                "__init__": [
                    "self",
                    "package_name",
                    "parent_name",
                    "top_path",
                    "package_path",
                    "caller_level",
                    "setup_name"
                ],
                "todict": [
                    "self"
                ],
                "info": [
                    "self",
                    "message"
                ],
                "warn": [
                    "self",
                    "message"
                ],
                "set_options": [
                    "self"
                ],
                "get_distribution": [
                    "self"
                ],
                "_wildcard_get_subpackage": [
                    "self",
                    "subpackage_name",
                    "parent_name",
                    "caller_level"
                ],
                "_get_configuration_from_setup_py": [
                    "self",
                    "setup_py",
                    "subpackage_name",
                    "subpackage_path",
                    "parent_name",
                    "caller_level"
                ],
                "get_subpackage": [
                    "self",
                    "subpackage_name",
                    "subpackage_path",
                    "parent_name",
                    "caller_level"
                ],
                "add_subpackage": [
                    "self",
                    "subpackage_name",
                    "subpackage_path",
                    "standalone"
                ],
                "add_data_dir": [
                    "self",
                    "data_path"
                ],
                "_optimize_data_files": [
                    "self"
                ],
                "add_data_files": [
                    "self"
                ],
                "add_define_macros": [
                    "self",
                    "macros"
                ],
                "add_include_dirs": [
                    "self"
                ],
                "add_headers": [
                    "self"
                ],
                "paths": [
                    "self"
                ],
                "_fix_paths_dict": [
                    "self",
                    "kw"
                ],
                "add_extension": [
                    "self",
                    "name",
                    "sources"
                ],
                "add_library": [
                    "self",
                    "name",
                    "sources"
                ],
                "_add_library": [
                    "self",
                    "name",
                    "sources",
                    "install_dir",
                    "build_info"
                ],
                "add_installed_library": [
                    "self",
                    "name",
                    "sources",
                    "install_dir",
                    "build_info"
                ],
                "add_npy_pkg_config": [
                    "self",
                    "template",
                    "install_dir",
                    "subst_dict"
                ],
                "add_scripts": [
                    "self"
                ],
                "dict_append": [
                    "self"
                ],
                "__str__": [
                    "self"
                ],
                "get_config_cmd": [
                    "self"
                ],
                "get_build_temp_dir": [
                    "self"
                ],
                "have_f77c": [
                    "self"
                ],
                "have_f90c": [
                    "self"
                ],
                "append_to": [
                    "self",
                    "extlib"
                ],
                "_get_svn_revision": [
                    "self",
                    "path"
                ],
                "_get_hg_revision": [
                    "self",
                    "path"
                ],
                "get_version": [
                    "self",
                    "version_file",
                    "version_variable"
                ],
                "make_svn_version_py": [
                    "self",
                    "delete"
                ],
                "make_hg_version_py": [
                    "self",
                    "delete"
                ],
                "make_config_py": [
                    "self",
                    "name"
                ],
                "get_info": [
                    "self"
                ]
            }
        },
        "numpy.distutils.__version__": {},
        "numpy.distutils.system_info": {
            "customized_ccompiler": [],
            "_c_string_literal": [
                "s"
            ],
            "libpaths": [
                "paths",
                "bits"
            ],
            "get_standard_file": [
                "fname"
            ],
            "get_info": [
                "name",
                "notfound_action"
            ],
            "get_atlas_version": [],
            "combine_paths": [],
            "dict_append": [
                "d"
            ],
            "parseCmdLine": [
                "argv"
            ],
            "show_all": [
                "argv"
            ],
            "NotFoundError": {},
            "AliasedOptionError": {},
            "AtlasNotFoundError": {},
            "FlameNotFoundError": {},
            "LapackNotFoundError": {},
            "LapackSrcNotFoundError": {},
            "LapackILP64NotFoundError": {},
            "BlasOptNotFoundError": {},
            "BlasNotFoundError": {},
            "BlasILP64NotFoundError": {},
            "BlasSrcNotFoundError": {},
            "FFTWNotFoundError": {},
            "DJBFFTNotFoundError": {},
            "NumericNotFoundError": {},
            "X11NotFoundError": {},
            "UmfpackNotFoundError": {},
            "system_info": {
                "__init__": [
                    "self",
                    "default_lib_dirs",
                    "default_include_dirs"
                ],
                "parse_config_files": [
                    "self"
                ],
                "calc_libraries_info": [
                    "self"
                ],
                "set_info": [
                    "self"
                ],
                "get_option_single": [
                    "self"
                ],
                "has_info": [
                    "self"
                ],
                "calc_extra_info": [
                    "self"
                ],
                "get_info": [
                    "self",
                    "notfound_action"
                ],
                "get_paths": [
                    "self",
                    "section",
                    "key"
                ],
                "get_lib_dirs": [
                    "self",
                    "key"
                ],
                "get_runtime_lib_dirs": [
                    "self",
                    "key"
                ],
                "get_include_dirs": [
                    "self",
                    "key"
                ],
                "get_src_dirs": [
                    "self",
                    "key"
                ],
                "get_libs": [
                    "self",
                    "key",
                    "default"
                ],
                "get_libraries": [
                    "self",
                    "key"
                ],
                "library_extensions": [
                    "self"
                ],
                "check_libs": [
                    "self",
                    "lib_dirs",
                    "libs",
                    "opt_libs"
                ],
                "check_libs2": [
                    "self",
                    "lib_dirs",
                    "libs",
                    "opt_libs"
                ],
                "_find_lib": [
                    "self",
                    "lib_dir",
                    "lib",
                    "exts"
                ],
                "_find_libs": [
                    "self",
                    "lib_dirs",
                    "libs",
                    "exts"
                ],
                "_check_libs": [
                    "self",
                    "lib_dirs",
                    "libs",
                    "opt_libs",
                    "exts"
                ],
                "combine_paths": [
                    "self"
                ]
            },
            "fft_opt_info": {
                "calc_info": [
                    "self"
                ]
            },
            "fftw_info": {
                "calc_ver_info": [
                    "self",
                    "ver_param"
                ],
                "calc_info": [
                    "self"
                ]
            },
            "fftw2_info": {},
            "fftw3_info": {},
            "dfftw_info": {},
            "sfftw_info": {},
            "fftw_threads_info": {},
            "dfftw_threads_info": {},
            "sfftw_threads_info": {},
            "djbfft_info": {
                "get_paths": [
                    "self",
                    "section",
                    "key"
                ],
                "calc_info": [
                    "self"
                ]
            },
            "mkl_info": {
                "get_mkl_rootdir": [
                    "self"
                ],
                "__init__": [
                    "self"
                ],
                "calc_info": [
                    "self"
                ]
            },
            "lapack_mkl_info": {},
            "blas_mkl_info": {},
            "atlas_info": {
                "get_paths": [
                    "self",
                    "section",
                    "key"
                ],
                "calc_info": [
                    "self"
                ]
            },
            "atlas_blas_info": {
                "calc_info": [
                    "self"
                ]
            },
            "atlas_threads_info": {},
            "atlas_blas_threads_info": {},
            "lapack_atlas_info": {},
            "lapack_atlas_threads_info": {},
            "atlas_3_10_info": {},
            "atlas_3_10_blas_info": {
                "calc_info": [
                    "self"
                ]
            },
            "atlas_3_10_threads_info": {},
            "atlas_3_10_blas_threads_info": {},
            "lapack_atlas_3_10_info": {},
            "lapack_atlas_3_10_threads_info": {},
            "lapack_info": {
                "calc_info": [
                    "self"
                ]
            },
            "lapack_src_info": {
                "get_paths": [
                    "self",
                    "section",
                    "key"
                ],
                "calc_info": [
                    "self"
                ]
            },
            "lapack_opt_info": {
                "_calc_info_mkl": [
                    "self"
                ],
                "_calc_info_openblas": [
                    "self"
                ],
                "_calc_info_flame": [
                    "self"
                ],
                "_calc_info_atlas": [
                    "self"
                ],
                "_calc_info_accelerate": [
                    "self"
                ],
                "_get_info_blas": [
                    "self"
                ],
                "_get_info_lapack": [
                    "self"
                ],
                "_calc_info_lapack": [
                    "self"
                ],
                "_calc_info": [
                    "self",
                    "name"
                ],
                "calc_info": [
                    "self"
                ]
            },
            "_ilp64_opt_info_mixin": {
                "_check_info": [
                    "self",
                    "info"
                ]
            },
            "lapack_ilp64_opt_info": {
                "_calc_info": [
                    "self",
                    "name"
                ]
            },
            "lapack_ilp64_plain_opt_info": {},
            "lapack64__opt_info": {},
            "blas_opt_info": {
                "_calc_info_mkl": [
                    "self"
                ],
                "_calc_info_blis": [
                    "self"
                ],
                "_calc_info_openblas": [
                    "self"
                ],
                "_calc_info_atlas": [
                    "self"
                ],
                "_calc_info_accelerate": [
                    "self"
                ],
                "_calc_info_blas": [
                    "self"
                ],
                "_calc_info": [
                    "self",
                    "name"
                ],
                "calc_info": [
                    "self"
                ]
            },
            "blas_ilp64_opt_info": {
                "_calc_info": [
                    "self",
                    "name"
                ]
            },
            "blas_ilp64_plain_opt_info": {},
            "blas64__opt_info": {},
            "blas_info": {
                "calc_info": [
                    "self"
                ],
                "get_cblas_libs": [
                    "self",
                    "info"
                ]
            },
            "openblas_info": {
                "symbol_prefix": [
                    "self"
                ],
                "symbol_suffix": [
                    "self"
                ],
                "_calc_info": [
                    "self"
                ],
                "calc_info": [
                    "self"
                ],
                "check_msvc_gfortran_libs": [
                    "self",
                    "library_dirs",
                    "libraries"
                ],
                "check_symbols": [
                    "self",
                    "info"
                ]
            },
            "openblas_lapack_info": {},
            "openblas_clapack_info": {},
            "openblas_ilp64_info": {
                "_calc_info": [
                    "self"
                ]
            },
            "openblas_ilp64_lapack_info": {
                "_calc_info": [
                    "self"
                ]
            },
            "openblas64__info": {},
            "openblas64__lapack_info": {},
            "blis_info": {
                "calc_info": [
                    "self"
                ]
            },
            "flame_info": {
                "check_embedded_lapack": [
                    "self",
                    "info"
                ],
                "calc_info": [
                    "self"
                ]
            },
            "accelerate_info": {
                "calc_info": [
                    "self"
                ]
            },
            "blas_src_info": {
                "get_paths": [
                    "self",
                    "section",
                    "key"
                ],
                "calc_info": [
                    "self"
                ]
            },
            "x11_info": {
                "__init__": [
                    "self"
                ],
                "calc_info": [
                    "self"
                ]
            },
            "_numpy_info": {
                "__init__": [
                    "self"
                ],
                "calc_info": [
                    "self"
                ]
            },
            "numarray_info": {},
            "Numeric_info": {},
            "numpy_info": {},
            "numerix_info": {
                "calc_info": [
                    "self"
                ]
            },
            "f2py_info": {
                "calc_info": [
                    "self"
                ]
            },
            "boost_python_info": {
                "get_paths": [
                    "self",
                    "section",
                    "key"
                ],
                "calc_info": [
                    "self"
                ]
            },
            "agg2_info": {
                "get_paths": [
                    "self",
                    "section",
                    "key"
                ],
                "calc_info": [
                    "self"
                ]
            },
            "_pkg_config_info": {
                "get_config_exe": [
                    "self"
                ],
                "get_config_output": [
                    "self",
                    "config_exe",
                    "option"
                ],
                "calc_info": [
                    "self"
                ]
            },
            "wx_info": {},
            "gdk_pixbuf_xlib_2_info": {},
            "gdk_pixbuf_2_info": {},
            "gdk_x11_2_info": {},
            "gdk_2_info": {},
            "gdk_info": {},
            "gtkp_x11_2_info": {},
            "gtkp_2_info": {},
            "xft_info": {},
            "freetype2_info": {},
            "amd_info": {
                "calc_info": [
                    "self"
                ]
            },
            "umfpack_info": {
                "calc_info": [
                    "self"
                ]
            }
        },
        "numpy.distutils.from_template": {
            "parse_structure": [
                "astr"
            ],
            "find_repl_patterns": [
                "astr"
            ],
            "find_and_remove_repl_patterns": [
                "astr"
            ],
            "conv": [
                "astr"
            ],
            "unique_key": [
                "adict"
            ],
            "expand_sub": [
                "substr",
                "names"
            ],
            "process_str": [
                "allstr"
            ],
            "resolve_includes": [
                "source"
            ],
            "process_file": [
                "source"
            ],
            "main": []
        },
        "numpy.distutils.numpy_distribution": {
            "NumpyDistribution": {
                "__init__": [
                    "self",
                    "attrs"
                ],
                "has_scons_scripts": [
                    "self"
                ]
            }
        },
        "numpy.distutils.extension": {
            "Extension": {
                "__init__": [
                    "self",
                    "name",
                    "sources",
                    "include_dirs",
                    "define_macros",
                    "undef_macros",
                    "library_dirs",
                    "libraries",
                    "runtime_library_dirs",
                    "extra_objects",
                    "extra_compile_args",
                    "extra_link_args",
                    "export_symbols",
                    "swig_opts",
                    "depends",
                    "language",
                    "f2py_options",
                    "module_dirs",
                    "extra_f77_compile_args",
                    "extra_f90_compile_args"
                ],
                "has_cxx_sources": [
                    "self"
                ],
                "has_f2py_sources": [
                    "self"
                ]
            }
        },
        "numpy.distutils.line_endings": {
            "dos2unix": [
                "file"
            ],
            "dos2unix_one_dir": [
                "modified_files",
                "dir_name",
                "file_names"
            ],
            "dos2unix_dir": [
                "dir_name"
            ],
            "unix2dos": [
                "file"
            ],
            "unix2dos_one_dir": [
                "modified_files",
                "dir_name",
                "file_names"
            ],
            "unix2dos_dir": [
                "dir_name"
            ]
        },
        "numpy.distutils.fcompiler.lahey": {
            "LaheyFCompiler": {
                "get_flags_opt": [
                    "self"
                ],
                "get_flags_debug": [
                    "self"
                ],
                "get_library_dirs": [
                    "self"
                ],
                "get_libraries": [
                    "self"
                ]
            }
        },
        "numpy.distutils.fcompiler.environment": {
            "EnvironmentConfig": {
                "__init__": [
                    "self",
                    "distutils_section"
                ],
                "dump_variable": [
                    "self",
                    "name"
                ],
                "dump_variables": [
                    "self"
                ],
                "__getattr__": [
                    "self",
                    "name"
                ],
                "get": [
                    "self",
                    "name",
                    "default"
                ],
                "_get_var": [
                    "self",
                    "name",
                    "conf_desc"
                ],
                "clone": [
                    "self",
                    "hook_handler"
                ],
                "use_distribution": [
                    "self",
                    "dist"
                ]
            }
        },
        "numpy.distutils.fcompiler.compaq": {
            "CompaqFCompiler": {
                "get_flags": [
                    "self"
                ],
                "get_flags_debug": [
                    "self"
                ],
                "get_flags_opt": [
                    "self"
                ],
                "get_flags_arch": [
                    "self"
                ],
                "get_flags_linker_so": [
                    "self"
                ]
            },
            "CompaqVisualFCompiler": {
                "get_flags": [
                    "self"
                ],
                "get_flags_opt": [
                    "self"
                ],
                "get_flags_arch": [
                    "self"
                ],
                "get_flags_debug": [
                    "self"
                ]
            }
        },
        "numpy.distutils.fcompiler.pg": {
            "PGroupFCompiler": {
                "get_flags": [
                    "self"
                ],
                "get_flags_opt": [
                    "self"
                ],
                "get_flags_debug": [
                    "self"
                ],
                "runtime_library_dir_option": [
                    "self",
                    "dir"
                ]
            }
        },
        "numpy.distutils.fcompiler": {
            "flaglist": [
                "s"
            ],
            "str2bool": [
                "s"
            ],
            "is_sequence_of_strings": [
                "seq"
            ],
            "load_all_fcompiler_classes": [],
            "_find_existing_fcompiler": [
                "compiler_types",
                "osname",
                "platform",
                "requiref90",
                "c_compiler"
            ],
            "available_fcompilers_for_platform": [
                "osname",
                "platform"
            ],
            "get_default_fcompiler": [
                "osname",
                "platform",
                "requiref90",
                "c_compiler"
            ],
            "new_fcompiler": [
                "plat",
                "compiler",
                "verbose",
                "dry_run",
                "force",
                "requiref90",
                "c_compiler"
            ],
            "show_fcompilers": [
                "dist"
            ],
            "dummy_fortran_file": [],
            "is_free_format": [
                "file"
            ],
            "has_f90_header": [
                "src"
            ],
            "get_f77flags": [
                "src"
            ],
            "CompilerNotFound": {},
            "FCompiler": {
                "__init__": [
                    "self"
                ],
                "__copy__": [
                    "self"
                ],
                "copy": [
                    "self"
                ],
                "_command_property": [
                    "key"
                ],
                "set_executable": [
                    "self",
                    "key",
                    "value"
                ],
                "set_commands": [
                    "self"
                ],
                "set_command": [
                    "self",
                    "key",
                    "value"
                ],
                "find_executables": [
                    "self"
                ],
                "update_executables": [
                    "self"
                ],
                "get_flags": [
                    "self"
                ],
                "_get_command_flags": [
                    "self",
                    "key"
                ],
                "get_flags_f77": [
                    "self"
                ],
                "get_flags_f90": [
                    "self"
                ],
                "get_flags_free": [
                    "self"
                ],
                "get_flags_fix": [
                    "self"
                ],
                "get_flags_linker_so": [
                    "self"
                ],
                "get_flags_linker_exe": [
                    "self"
                ],
                "get_flags_ar": [
                    "self"
                ],
                "get_flags_opt": [
                    "self"
                ],
                "get_flags_arch": [
                    "self"
                ],
                "get_flags_debug": [
                    "self"
                ],
                "get_libraries": [
                    "self"
                ],
                "get_library_dirs": [
                    "self"
                ],
                "get_version": [
                    "self",
                    "force",
                    "ok_status"
                ],
                "customize": [
                    "self",
                    "dist"
                ],
                "dump_properties": [
                    "self"
                ],
                "_compile": [
                    "self",
                    "obj",
                    "src",
                    "ext",
                    "cc_args",
                    "extra_postargs",
                    "pp_opts"
                ],
                "module_options": [
                    "self",
                    "module_dirs",
                    "module_build_dir"
                ],
                "library_option": [
                    "self",
                    "lib"
                ],
                "library_dir_option": [
                    "self",
                    "dir"
                ],
                "link": [
                    "self",
                    "target_desc",
                    "objects",
                    "output_filename",
                    "output_dir",
                    "libraries",
                    "library_dirs",
                    "runtime_library_dirs",
                    "export_symbols",
                    "debug",
                    "extra_preargs",
                    "extra_postargs",
                    "build_temp",
                    "target_lang"
                ],
                "_environment_hook": [
                    "self",
                    "name",
                    "hook_name"
                ],
                "can_ccompiler_link": [
                    "self",
                    "ccompiler"
                ],
                "wrap_unlinkable_objects": [
                    "self",
                    "objects",
                    "output_dir",
                    "extra_dll_dir"
                ]
            }
        },
        "numpy.distutils.fcompiler.mips": {
            "MIPSFCompiler": {
                "get_flags": [
                    "self"
                ],
                "get_flags_opt": [
                    "self"
                ],
                "get_flags_arch": [
                    "self"
                ],
                "get_flags_arch_f77": [
                    "self"
                ],
                "get_flags_arch_f90": [
                    "self"
                ]
            }
        },
        "numpy.distutils.fcompiler.sun": {
            "SunFCompiler": {
                "get_flags_f77": [
                    "self"
                ],
                "get_opt": [
                    "self"
                ],
                "get_arch": [
                    "self"
                ],
                "get_libraries": [
                    "self"
                ],
                "runtime_library_dir_option": [
                    "self",
                    "dir"
                ]
            }
        },
        "numpy.distutils.fcompiler.pathf95": {
            "PathScaleFCompiler": {
                "get_flags_opt": [
                    "self"
                ],
                "get_flags_debug": [
                    "self"
                ]
            }
        },
        "numpy.distutils.fcompiler.ibm": {
            "IBMFCompiler": {
                "get_version": [
                    "self"
                ],
                "get_flags": [
                    "self"
                ],
                "get_flags_debug": [
                    "self"
                ],
                "get_flags_linker_so": [
                    "self"
                ],
                "get_flags_opt": [
                    "self"
                ]
            }
        },
        "numpy.distutils.fcompiler.absoft": {
            "AbsoftFCompiler": {
                "update_executables": [
                    "self"
                ],
                "get_flags_linker_so": [
                    "self"
                ],
                "library_dir_option": [
                    "self",
                    "dir"
                ],
                "library_option": [
                    "self",
                    "lib"
                ],
                "get_library_dirs": [
                    "self"
                ],
                "get_libraries": [
                    "self"
                ],
                "get_flags": [
                    "self"
                ],
                "get_flags_f77": [
                    "self"
                ],
                "get_flags_f90": [
                    "self"
                ],
                "get_flags_fix": [
                    "self"
                ],
                "get_flags_opt": [
                    "self"
                ]
            }
        },
        "numpy.distutils.fcompiler.hpux": {
            "HPUXFCompiler": {
                "get_flags": [
                    "self"
                ],
                "get_flags_opt": [
                    "self"
                ],
                "get_libraries": [
                    "self"
                ],
                "get_library_dirs": [
                    "self"
                ],
                "get_version": [
                    "self",
                    "force",
                    "ok_status"
                ]
            }
        },
        "numpy.distutils.fcompiler.intel": {
            "intel_version_match": [
                "type"
            ],
            "BaseIntelFCompiler": {
                "update_executables": [
                    "self"
                ],
                "runtime_library_dir_option": [
                    "self",
                    "dir"
                ]
            },
            "IntelFCompiler": {
                "get_flags_free": [
                    "self"
                ],
                "get_flags": [
                    "self"
                ],
                "get_flags_opt": [
                    "self"
                ],
                "get_flags_arch": [
                    "self"
                ],
                "get_flags_linker_so": [
                    "self"
                ]
            },
            "IntelItaniumFCompiler": {},
            "IntelEM64TFCompiler": {
                "get_flags": [
                    "self"
                ],
                "get_flags_opt": [
                    "self"
                ],
                "get_flags_arch": [
                    "self"
                ]
            },
            "IntelVisualFCompiler": {
                "update_executables": [
                    "self"
                ],
                "get_flags": [
                    "self"
                ],
                "get_flags_free": [
                    "self"
                ],
                "get_flags_debug": [
                    "self"
                ],
                "get_flags_opt": [
                    "self"
                ],
                "get_flags_arch": [
                    "self"
                ],
                "runtime_library_dir_option": [
                    "self",
                    "dir"
                ]
            },
            "IntelItaniumVisualFCompiler": {},
            "IntelEM64VisualFCompiler": {
                "get_flags_arch": [
                    "self"
                ]
            }
        },
        "numpy.distutils.fcompiler.g95": {
            "G95FCompiler": {
                "get_flags": [
                    "self"
                ],
                "get_flags_opt": [
                    "self"
                ],
                "get_flags_debug": [
                    "self"
                ]
            }
        },
        "numpy.distutils.fcompiler.nag": {
            "BaseNAGFCompiler": {
                "version_match": [
                    "self",
                    "version_string"
                ],
                "get_flags_linker_so": [
                    "self"
                ],
                "get_flags_opt": [
                    "self"
                ],
                "get_flags_arch": [
                    "self"
                ]
            },
            "NAGFCompiler": {
                "get_flags_linker_so": [
                    "self"
                ],
                "get_flags_arch": [
                    "self"
                ],
                "get_flags_debug": [
                    "self"
                ]
            },
            "NAGFORCompiler": {
                "get_flags_debug": [
                    "self"
                ]
            }
        },
        "numpy.distutils.fcompiler.gnu": {
            "is_win64": [],
            "_can_target": [
                "cmd",
                "arch"
            ],
            "GnuFCompiler": {
                "gnu_version_match": [
                    "self",
                    "version_string"
                ],
                "version_match": [
                    "self",
                    "version_string"
                ],
                "get_flags_linker_so": [
                    "self"
                ],
                "get_libgcc_dir": [
                    "self"
                ],
                "get_libgfortran_dir": [
                    "self"
                ],
                "get_library_dirs": [
                    "self"
                ],
                "get_libraries": [
                    "self"
                ],
                "get_flags_debug": [
                    "self"
                ],
                "get_flags_opt": [
                    "self"
                ],
                "_c_arch_flags": [
                    "self"
                ],
                "get_flags_arch": [
                    "self"
                ],
                "runtime_library_dir_option": [
                    "self",
                    "dir"
                ]
            },
            "Gnu95FCompiler": {
                "version_match": [
                    "self",
                    "version_string"
                ],
                "_universal_flags": [
                    "self",
                    "cmd"
                ],
                "get_flags": [
                    "self"
                ],
                "get_flags_linker_so": [
                    "self"
                ],
                "get_library_dirs": [
                    "self"
                ],
                "get_libraries": [
                    "self"
                ],
                "get_target": [
                    "self"
                ],
                "_hash_files": [
                    "self",
                    "filenames"
                ],
                "_link_wrapper_lib": [
                    "self",
                    "objects",
                    "output_dir",
                    "extra_dll_dir",
                    "chained_dlls",
                    "is_archive"
                ],
                "can_ccompiler_link": [
                    "self",
                    "compiler"
                ],
                "wrap_unlinkable_objects": [
                    "self",
                    "objects",
                    "output_dir",
                    "extra_dll_dir"
                ]
            }
        },
        "numpy.distutils.fcompiler.vast": {
            "VastFCompiler": {
                "find_executables": [
                    "self"
                ],
                "get_version_cmd": [
                    "self"
                ],
                "get_flags_arch": [
                    "self"
                ]
            }
        },
        "numpy.distutils.fcompiler.none": {
            "NoneFCompiler": {
                "find_executables": [
                    "self"
                ]
            }
        },
        "numpy.distutils.command.build_src": {
            "subst_vars": [
                "target",
                "source",
                "d"
            ],
            "get_swig_target": [
                "source"
            ],
            "get_swig_modulename": [
                "source"
            ],
            "_find_swig_target": [
                "target_dir",
                "name"
            ],
            "get_f2py_modulename": [
                "source"
            ],
            "build_src": {
                "initialize_options": [
                    "self"
                ],
                "finalize_options": [
                    "self"
                ],
                "run": [
                    "self"
                ],
                "build_sources": [
                    "self"
                ],
                "build_data_files_sources": [
                    "self"
                ],
                "_build_npy_pkg_config": [
                    "self",
                    "info",
                    "gd"
                ],
                "build_npy_pkg_config": [
                    "self"
                ],
                "build_py_modules_sources": [
                    "self"
                ],
                "build_library_sources": [
                    "self",
                    "lib_name",
                    "build_info"
                ],
                "build_extension_sources": [
                    "self",
                    "ext"
                ],
                "generate_sources": [
                    "self",
                    "sources",
                    "extension"
                ],
                "filter_py_files": [
                    "self",
                    "sources"
                ],
                "filter_h_files": [
                    "self",
                    "sources"
                ],
                "filter_files": [
                    "self",
                    "sources",
                    "exts"
                ],
                "template_sources": [
                    "self",
                    "sources",
                    "extension"
                ],
                "pyrex_sources": [
                    "self",
                    "sources",
                    "extension"
                ],
                "generate_a_pyrex_source": [
                    "self",
                    "base",
                    "ext_name",
                    "source",
                    "extension"
                ],
                "f2py_sources": [
                    "self",
                    "sources",
                    "extension"
                ],
                "swig_sources": [
                    "self",
                    "sources",
                    "extension"
                ]
            }
        },
        "numpy.distutils.command.config_compiler": {
            "show_fortran_compilers": [
                "_cache"
            ],
            "config_fc": {
                "initialize_options": [
                    "self"
                ],
                "finalize_options": [
                    "self"
                ],
                "run": [
                    "self"
                ]
            },
            "config_cc": {
                "initialize_options": [
                    "self"
                ],
                "finalize_options": [
                    "self"
                ],
                "run": [
                    "self"
                ]
            }
        },
        "numpy.distutils.command.build_clib": {
            "build_clib": {
                "initialize_options": [
                    "self"
                ],
                "finalize_options": [
                    "self"
                ],
                "have_f_sources": [
                    "self"
                ],
                "have_cxx_sources": [
                    "self"
                ],
                "run": [
                    "self"
                ],
                "get_source_files": [
                    "self"
                ],
                "build_libraries": [
                    "self",
                    "libraries"
                ],
                "build_a_library": [
                    "self",
                    "build_info",
                    "lib_name",
                    "libraries"
                ]
            }
        },
        "numpy.distutils.command.develop": {
            "develop": {
                "install_for_development": [
                    "self"
                ]
            }
        },
        "numpy.distutils.command": {
            "test_na_writable_attributes_deletion": []
        },
        "numpy.distutils.command.bdist_rpm": {
            "bdist_rpm": {
                "_make_spec_file": [
                    "self"
                ]
            }
        },
        "numpy.distutils.command.build_scripts": {
            "build_scripts": {
                "generate_scripts": [
                    "self",
                    "scripts"
                ],
                "run": [
                    "self"
                ],
                "get_source_files": [
                    "self"
                ]
            }
        },
        "numpy.distutils.command.sdist": {
            "sdist": {
                "add_defaults": [
                    "self"
                ]
            }
        },
        "numpy.distutils.command.build": {
            "build": {
                "initialize_options": [
                    "self"
                ],
                "finalize_options": [
                    "self"
                ],
                "run": [
                    "self"
                ]
            }
        },
        "numpy.distutils.command.build_py": {
            "build_py": {
                "run": [
                    "self"
                ],
                "find_package_modules": [
                    "self",
                    "package",
                    "package_dir"
                ],
                "find_modules": [
                    "self"
                ]
            }
        },
        "numpy.distutils.command.install_clib": {
            "install_clib": {
                "initialize_options": [
                    "self"
                ],
                "finalize_options": [
                    "self"
                ],
                "run": [
                    "self"
                ],
                "get_outputs": [
                    "self"
                ]
            }
        },
        "numpy.distutils.command.install_data": {
            "install_data": {
                "run": [
                    "self"
                ],
                "finalize_options": [
                    "self"
                ]
            }
        },
        "numpy.distutils.command.install_headers": {
            "install_headers": {
                "run": [
                    "self"
                ]
            }
        },
        "numpy.distutils.command.egg_info": {
            "egg_info": {
                "run": [
                    "self"
                ]
            }
        },
        "numpy.distutils.command.autodist": {
            "check_inline": [
                "cmd"
            ],
            "check_restrict": [
                "cmd"
            ],
            "check_compiler_gcc4": [
                "cmd"
            ],
            "check_gcc_function_attribute": [
                "cmd",
                "attribute",
                "name"
            ],
            "check_gcc_function_attribute_with_intrinsics": [
                "cmd",
                "attribute",
                "name",
                "code",
                "include"
            ],
            "check_gcc_variable_attribute": [
                "cmd",
                "attribute"
            ]
        },
        "numpy.distutils.command.build_ext": {
            "build_ext": {
                "initialize_options": [
                    "self"
                ],
                "finalize_options": [
                    "self"
                ],
                "run": [
                    "self"
                ],
                "swig_sources": [
                    "self",
                    "sources",
                    "extensions"
                ],
                "build_extension": [
                    "self",
                    "ext"
                ],
                "_add_dummy_mingwex_sym": [
                    "self",
                    "c_sources"
                ],
                "_process_unlinkable_fobjects": [
                    "self",
                    "objects",
                    "libraries",
                    "fcompiler",
                    "library_dirs",
                    "unlinkable_fobjects"
                ],
                "_libs_with_msvc_and_fortran": [
                    "self",
                    "fcompiler",
                    "c_libraries",
                    "c_library_dirs"
                ],
                "get_source_files": [
                    "self"
                ],
                "get_outputs": [
                    "self"
                ]
            }
        },
        "numpy.distutils.command.config": {
            "config": {
                "initialize_options": [
                    "self"
                ],
                "_check_compiler": [
                    "self"
                ],
                "_wrap_method": [
                    "self",
                    "mth",
                    "lang",
                    "args"
                ],
                "_compile": [
                    "self",
                    "body",
                    "headers",
                    "include_dirs",
                    "lang"
                ],
                "_link": [
                    "self",
                    "body",
                    "headers",
                    "include_dirs",
                    "libraries",
                    "library_dirs",
                    "lang"
                ],
                "check_header": [
                    "self",
                    "header",
                    "include_dirs",
                    "library_dirs",
                    "lang"
                ],
                "check_decl": [
                    "self",
                    "symbol",
                    "headers",
                    "include_dirs"
                ],
                "check_macro_true": [
                    "self",
                    "symbol",
                    "headers",
                    "include_dirs"
                ],
                "check_type": [
                    "self",
                    "type_name",
                    "headers",
                    "include_dirs",
                    "library_dirs"
                ],
                "check_type_size": [
                    "self",
                    "type_name",
                    "headers",
                    "include_dirs",
                    "library_dirs",
                    "expected"
                ],
                "check_func": [
                    "self",
                    "func",
                    "headers",
                    "include_dirs",
                    "libraries",
                    "library_dirs",
                    "decl",
                    "call",
                    "call_args"
                ],
                "check_funcs_once": [
                    "self",
                    "funcs",
                    "headers",
                    "include_dirs",
                    "libraries",
                    "library_dirs",
                    "decl",
                    "call",
                    "call_args"
                ],
                "check_inline": [
                    "self"
                ],
                "check_restrict": [
                    "self"
                ],
                "check_compiler_gcc4": [
                    "self"
                ],
                "check_gcc_function_attribute": [
                    "self",
                    "attribute",
                    "name"
                ],
                "check_gcc_function_attribute_with_intrinsics": [
                    "self",
                    "attribute",
                    "name",
                    "code",
                    "include"
                ],
                "check_gcc_variable_attribute": [
                    "self",
                    "attribute"
                ],
                "get_output": [
                    "self",
                    "body",
                    "headers",
                    "include_dirs",
                    "libraries",
                    "library_dirs",
                    "lang",
                    "use_tee"
                ]
            },
            "GrabStdout": {
                "__init__": [
                    "self"
                ],
                "write": [
                    "self",
                    "data"
                ],
                "flush": [
                    "self"
                ],
                "restore": [
                    "self"
                ]
            }
        },
        "numpy.distutils.command.install": {
            "install": {
                "finalize_options": [
                    "self"
                ],
                "setuptools_run": [
                    "self"
                ],
                "run": [
                    "self"
                ]
            }
        },
        "numpy.distutils.tests.test_fcompiler_intel": {
            "TestIntelFCompilerVersions": {
                "test_32bit_version": [
                    "self"
                ]
            },
            "TestIntelEM64TFCompilerVersions": {
                "test_64bit_version": [
                    "self"
                ]
            }
        },
        "numpy.distutils.tests.test_fcompiler_gnu": {
            "TestG77Versions": {
                "test_g77_version": [
                    "self"
                ],
                "test_not_g77": [
                    "self"
                ]
            },
            "TestGFortranVersions": {
                "test_gfortran_version": [
                    "self"
                ],
                "test_not_gfortran": [
                    "self"
                ]
            }
        },
        "numpy.distutils.tests.test_shell_utils": {
            "Parser": [
                "request"
            ],
            "runner": [
                "Parser"
            ],
            "test_join_matches_subprocess": [
                "Parser",
                "runner",
                "argv"
            ],
            "test_roundtrip": [
                "Parser",
                "argv"
            ]
        },
        "numpy.distutils.tests": {},
        "numpy.distutils.tests.test_fcompiler_nagfor": {
            "TestNagFCompilerVersions": {
                "test_version_match": [
                    "self"
                ]
            }
        },
        "numpy.distutils.tests.test_npy_pkg_config": {
            "TestLibraryInfo": {
                "test_simple": [
                    "self"
                ],
                "test_simple_variable": [
                    "self"
                ]
            },
            "TestParseFlags": {
                "test_simple_cflags": [
                    "self"
                ],
                "test_simple_lflags": [
                    "self"
                ]
            }
        },
        "numpy.distutils.tests.test_exec_command": {
            "test_exec_command_stdout": [],
            "test_exec_command_stderr": [],
            "redirect_stdout": {
                "__init__": [
                    "self",
                    "stdout"
                ],
                "__enter__": [
                    "self"
                ],
                "__exit__": [
                    "self",
                    "exc_type",
                    "exc_value",
                    "traceback"
                ]
            },
            "redirect_stderr": {
                "__init__": [
                    "self",
                    "stderr"
                ],
                "__enter__": [
                    "self"
                ],
                "__exit__": [
                    "self",
                    "exc_type",
                    "exc_value",
                    "traceback"
                ]
            },
            "emulate_nonposix": {
                "__init__": [
                    "self",
                    "osname"
                ],
                "__enter__": [
                    "self"
                ],
                "__exit__": [
                    "self",
                    "exc_type",
                    "exc_value",
                    "traceback"
                ]
            },
            "TestExecCommand": {
                "setup": [
                    "self"
                ],
                "check_nt": [
                    "self"
                ],
                "check_posix": [
                    "self"
                ],
                "check_basic": [
                    "self"
                ],
                "check_execute_in": [
                    "self"
                ],
                "test_basic": [
                    "self"
                ]
            }
        },
        "numpy.distutils.tests.test_fcompiler": {
            "test_fcompiler_flags": [
                "monkeypatch"
            ]
        },
        "numpy.distutils.tests.test_misc_util": {
            "test_installed_npymath_ini": [],
            "TestAppendpath": {
                "test_1": [
                    "self"
                ],
                "test_2": [
                    "self"
                ],
                "test_3": [
                    "self"
                ]
            },
            "TestMinrelpath": {
                "test_1": [
                    "self"
                ]
            },
            "TestGpaths": {
                "test_gpaths": [
                    "self"
                ]
            },
            "TestSharedExtension": {
                "test_get_shared_lib_extension": [
                    "self"
                ]
            }
        },
        "numpy.distutils.tests.test_from_template": {
            "normalize_whitespace": [
                "s"
            ],
            "test_from_template": []
        },
        "numpy.distutils.tests.test_system_info": {
            "get_class": [
                "name",
                "notfound_action"
            ],
            "have_compiler": [],
            "_system_info": {
                "__init__": [
                    "self",
                    "default_lib_dirs",
                    "default_include_dirs",
                    "verbosity"
                ],
                "_check_libs": [
                    "self",
                    "lib_dirs",
                    "libs",
                    "opt_libs",
                    "exts"
                ]
            },
            "Temp1Info": {},
            "Temp2Info": {},
            "DuplicateOptionInfo": {},
            "TestSystemInfoReading": {
                "setup": [
                    "self"
                ],
                "teardown": [
                    "self"
                ],
                "test_all": [
                    "self"
                ],
                "test_temp1": [
                    "self"
                ],
                "test_temp2": [
                    "self"
                ],
                "test_duplicate_options": [
                    "self"
                ],
                "test_compile1": [
                    "self"
                ],
                "test_compile2": [
                    "self"
                ]
            }
        },
        "numpy.polynomial": {},
        "numpy.polynomial.hermite_e": {
            "poly2herme": [
                "pol"
            ],
            "herme2poly": [
                "c"
            ],
            "hermeline": [
                "off",
                "scl"
            ],
            "hermefromroots": [
                "roots"
            ],
            "hermeadd": [
                "c1",
                "c2"
            ],
            "hermesub": [
                "c1",
                "c2"
            ],
            "hermemulx": [
                "c"
            ],
            "hermemul": [
                "c1",
                "c2"
            ],
            "hermediv": [
                "c1",
                "c2"
            ],
            "hermepow": [
                "c",
                "pow",
                "maxpower"
            ],
            "hermeder": [
                "c",
                "m",
                "scl",
                "axis"
            ],
            "hermeint": [
                "c",
                "m",
                "k",
                "lbnd",
                "scl",
                "axis"
            ],
            "hermeval": [
                "x",
                "c",
                "tensor"
            ],
            "hermeval2d": [
                "x",
                "y",
                "c"
            ],
            "hermegrid2d": [
                "x",
                "y",
                "c"
            ],
            "hermeval3d": [
                "x",
                "y",
                "z",
                "c"
            ],
            "hermegrid3d": [
                "x",
                "y",
                "z",
                "c"
            ],
            "hermevander": [
                "x",
                "deg"
            ],
            "hermevander2d": [
                "x",
                "y",
                "deg"
            ],
            "hermevander3d": [
                "x",
                "y",
                "z",
                "deg"
            ],
            "hermefit": [
                "x",
                "y",
                "deg",
                "rcond",
                "full",
                "w"
            ],
            "hermecompanion": [
                "c"
            ],
            "hermeroots": [
                "c"
            ],
            "_normed_hermite_e_n": [
                "x",
                "n"
            ],
            "hermegauss": [
                "deg"
            ],
            "hermeweight": [
                "x"
            ],
            "HermiteE": {}
        },
        "numpy.polynomial.polynomial": {
            "polyline": [
                "off",
                "scl"
            ],
            "polyfromroots": [
                "roots"
            ],
            "polyadd": [
                "c1",
                "c2"
            ],
            "polysub": [
                "c1",
                "c2"
            ],
            "polymulx": [
                "c"
            ],
            "polymul": [
                "c1",
                "c2"
            ],
            "polydiv": [
                "c1",
                "c2"
            ],
            "polypow": [
                "c",
                "pow",
                "maxpower"
            ],
            "polyder": [
                "c",
                "m",
                "scl",
                "axis"
            ],
            "polyint": [
                "c",
                "m",
                "k",
                "lbnd",
                "scl",
                "axis"
            ],
            "polyval": [
                "x",
                "c",
                "tensor"
            ],
            "polyvalfromroots": [
                "x",
                "r",
                "tensor"
            ],
            "polyval2d": [
                "x",
                "y",
                "c"
            ],
            "polygrid2d": [
                "x",
                "y",
                "c"
            ],
            "polyval3d": [
                "x",
                "y",
                "z",
                "c"
            ],
            "polygrid3d": [
                "x",
                "y",
                "z",
                "c"
            ],
            "polyvander": [
                "x",
                "deg"
            ],
            "polyvander2d": [
                "x",
                "y",
                "deg"
            ],
            "polyvander3d": [
                "x",
                "y",
                "z",
                "deg"
            ],
            "polyfit": [
                "x",
                "y",
                "deg",
                "rcond",
                "full",
                "w"
            ],
            "polycompanion": [
                "c"
            ],
            "polyroots": [
                "c"
            ],
            "Polynomial": {
                "_repr_latex_term": [
                    "i",
                    "arg_str",
                    "needs_parens"
                ]
            }
        },
        "numpy.polynomial.laguerre": {
            "poly2lag": [
                "pol"
            ],
            "lag2poly": [
                "c"
            ],
            "lagline": [
                "off",
                "scl"
            ],
            "lagfromroots": [
                "roots"
            ],
            "lagadd": [
                "c1",
                "c2"
            ],
            "lagsub": [
                "c1",
                "c2"
            ],
            "lagmulx": [
                "c"
            ],
            "lagmul": [
                "c1",
                "c2"
            ],
            "lagdiv": [
                "c1",
                "c2"
            ],
            "lagpow": [
                "c",
                "pow",
                "maxpower"
            ],
            "lagder": [
                "c",
                "m",
                "scl",
                "axis"
            ],
            "lagint": [
                "c",
                "m",
                "k",
                "lbnd",
                "scl",
                "axis"
            ],
            "lagval": [
                "x",
                "c",
                "tensor"
            ],
            "lagval2d": [
                "x",
                "y",
                "c"
            ],
            "laggrid2d": [
                "x",
                "y",
                "c"
            ],
            "lagval3d": [
                "x",
                "y",
                "z",
                "c"
            ],
            "laggrid3d": [
                "x",
                "y",
                "z",
                "c"
            ],
            "lagvander": [
                "x",
                "deg"
            ],
            "lagvander2d": [
                "x",
                "y",
                "deg"
            ],
            "lagvander3d": [
                "x",
                "y",
                "z",
                "deg"
            ],
            "lagfit": [
                "x",
                "y",
                "deg",
                "rcond",
                "full",
                "w"
            ],
            "lagcompanion": [
                "c"
            ],
            "lagroots": [
                "c"
            ],
            "laggauss": [
                "deg"
            ],
            "lagweight": [
                "x"
            ],
            "Laguerre": {}
        },
        "numpy.polynomial.setup": {
            "configuration": [
                "parent_package",
                "top_path"
            ]
        },
        "numpy.polynomial.legendre": {
            "poly2leg": [
                "pol"
            ],
            "leg2poly": [
                "c"
            ],
            "legline": [
                "off",
                "scl"
            ],
            "legfromroots": [
                "roots"
            ],
            "legadd": [
                "c1",
                "c2"
            ],
            "legsub": [
                "c1",
                "c2"
            ],
            "legmulx": [
                "c"
            ],
            "legmul": [
                "c1",
                "c2"
            ],
            "legdiv": [
                "c1",
                "c2"
            ],
            "legpow": [
                "c",
                "pow",
                "maxpower"
            ],
            "legder": [
                "c",
                "m",
                "scl",
                "axis"
            ],
            "legint": [
                "c",
                "m",
                "k",
                "lbnd",
                "scl",
                "axis"
            ],
            "legval": [
                "x",
                "c",
                "tensor"
            ],
            "legval2d": [
                "x",
                "y",
                "c"
            ],
            "leggrid2d": [
                "x",
                "y",
                "c"
            ],
            "legval3d": [
                "x",
                "y",
                "z",
                "c"
            ],
            "leggrid3d": [
                "x",
                "y",
                "z",
                "c"
            ],
            "legvander": [
                "x",
                "deg"
            ],
            "legvander2d": [
                "x",
                "y",
                "deg"
            ],
            "legvander3d": [
                "x",
                "y",
                "z",
                "deg"
            ],
            "legfit": [
                "x",
                "y",
                "deg",
                "rcond",
                "full",
                "w"
            ],
            "legcompanion": [
                "c"
            ],
            "legroots": [
                "c"
            ],
            "leggauss": [
                "deg"
            ],
            "legweight": [
                "x"
            ],
            "Legendre": {}
        },
        "numpy.polynomial._polybase": {
            "ABCPolyBase": {
                "domain": [
                    "self"
                ],
                "window": [
                    "self"
                ],
                "nickname": [
                    "self"
                ],
                "basis_name": [
                    "self"
                ],
                "_add": [
                    "c1",
                    "c2"
                ],
                "_sub": [
                    "c1",
                    "c2"
                ],
                "_mul": [
                    "c1",
                    "c2"
                ],
                "_div": [
                    "c1",
                    "c2"
                ],
                "_pow": [
                    "c",
                    "pow",
                    "maxpower"
                ],
                "_val": [
                    "x",
                    "c"
                ],
                "_int": [
                    "c",
                    "m",
                    "k",
                    "lbnd",
                    "scl"
                ],
                "_der": [
                    "c",
                    "m",
                    "scl"
                ],
                "_fit": [
                    "x",
                    "y",
                    "deg",
                    "rcond",
                    "full"
                ],
                "_line": [
                    "off",
                    "scl"
                ],
                "_roots": [
                    "c"
                ],
                "_fromroots": [
                    "r"
                ],
                "has_samecoef": [
                    "self",
                    "other"
                ],
                "has_samedomain": [
                    "self",
                    "other"
                ],
                "has_samewindow": [
                    "self",
                    "other"
                ],
                "has_sametype": [
                    "self",
                    "other"
                ],
                "_get_coefficients": [
                    "self",
                    "other"
                ],
                "__init__": [
                    "self",
                    "coef",
                    "domain",
                    "window"
                ],
                "__repr__": [
                    "self"
                ],
                "__str__": [
                    "self"
                ],
                "_repr_latex_term": [
                    "cls",
                    "i",
                    "arg_str",
                    "needs_parens"
                ],
                "_repr_latex_scalar": [
                    "x"
                ],
                "_repr_latex_": [
                    "self"
                ],
                "__getstate__": [
                    "self"
                ],
                "__setstate__": [
                    "self",
                    "dict"
                ],
                "__call__": [
                    "self",
                    "arg"
                ],
                "__iter__": [
                    "self"
                ],
                "__len__": [
                    "self"
                ],
                "__neg__": [
                    "self"
                ],
                "__pos__": [
                    "self"
                ],
                "__add__": [
                    "self",
                    "other"
                ],
                "__sub__": [
                    "self",
                    "other"
                ],
                "__mul__": [
                    "self",
                    "other"
                ],
                "__div__": [
                    "self",
                    "other"
                ],
                "__truediv__": [
                    "self",
                    "other"
                ],
                "__floordiv__": [
                    "self",
                    "other"
                ],
                "__mod__": [
                    "self",
                    "other"
                ],
                "__divmod__": [
                    "self",
                    "other"
                ],
                "__pow__": [
                    "self",
                    "other"
                ],
                "__radd__": [
                    "self",
                    "other"
                ],
                "__rsub__": [
                    "self",
                    "other"
                ],
                "__rmul__": [
                    "self",
                    "other"
                ],
                "__rdiv__": [
                    "self",
                    "other"
                ],
                "__rtruediv__": [
                    "self",
                    "other"
                ],
                "__rfloordiv__": [
                    "self",
                    "other"
                ],
                "__rmod__": [
                    "self",
                    "other"
                ],
                "__rdivmod__": [
                    "self",
                    "other"
                ],
                "__eq__": [
                    "self",
                    "other"
                ],
                "__ne__": [
                    "self",
                    "other"
                ],
                "copy": [
                    "self"
                ],
                "degree": [
                    "self"
                ],
                "cutdeg": [
                    "self",
                    "deg"
                ],
                "trim": [
                    "self",
                    "tol"
                ],
                "truncate": [
                    "self",
                    "size"
                ],
                "convert": [
                    "self",
                    "domain",
                    "kind",
                    "window"
                ],
                "mapparms": [
                    "self"
                ],
                "integ": [
                    "self",
                    "m",
                    "k",
                    "lbnd"
                ],
                "deriv": [
                    "self",
                    "m"
                ],
                "roots": [
                    "self"
                ],
                "linspace": [
                    "self",
                    "n",
                    "domain"
                ],
                "fit": [
                    "cls",
                    "x",
                    "y",
                    "deg",
                    "domain",
                    "rcond",
                    "full",
                    "w",
                    "window"
                ],
                "fromroots": [
                    "cls",
                    "roots",
                    "domain",
                    "window"
                ],
                "identity": [
                    "cls",
                    "domain",
                    "window"
                ],
                "basis": [
                    "cls",
                    "deg",
                    "domain",
                    "window"
                ],
                "cast": [
                    "cls",
                    "series",
                    "domain",
                    "window"
                ]
            }
        },
        "numpy.polynomial.chebyshev": {
            "_cseries_to_zseries": [
                "c"
            ],
            "_zseries_to_cseries": [
                "zs"
            ],
            "_zseries_mul": [
                "z1",
                "z2"
            ],
            "_zseries_div": [
                "z1",
                "z2"
            ],
            "_zseries_der": [
                "zs"
            ],
            "_zseries_int": [
                "zs"
            ],
            "poly2cheb": [
                "pol"
            ],
            "cheb2poly": [
                "c"
            ],
            "chebline": [
                "off",
                "scl"
            ],
            "chebfromroots": [
                "roots"
            ],
            "chebadd": [
                "c1",
                "c2"
            ],
            "chebsub": [
                "c1",
                "c2"
            ],
            "chebmulx": [
                "c"
            ],
            "chebmul": [
                "c1",
                "c2"
            ],
            "chebdiv": [
                "c1",
                "c2"
            ],
            "chebpow": [
                "c",
                "pow",
                "maxpower"
            ],
            "chebder": [
                "c",
                "m",
                "scl",
                "axis"
            ],
            "chebint": [
                "c",
                "m",
                "k",
                "lbnd",
                "scl",
                "axis"
            ],
            "chebval": [
                "x",
                "c",
                "tensor"
            ],
            "chebval2d": [
                "x",
                "y",
                "c"
            ],
            "chebgrid2d": [
                "x",
                "y",
                "c"
            ],
            "chebval3d": [
                "x",
                "y",
                "z",
                "c"
            ],
            "chebgrid3d": [
                "x",
                "y",
                "z",
                "c"
            ],
            "chebvander": [
                "x",
                "deg"
            ],
            "chebvander2d": [
                "x",
                "y",
                "deg"
            ],
            "chebvander3d": [
                "x",
                "y",
                "z",
                "deg"
            ],
            "chebfit": [
                "x",
                "y",
                "deg",
                "rcond",
                "full",
                "w"
            ],
            "chebcompanion": [
                "c"
            ],
            "chebroots": [
                "c"
            ],
            "chebinterpolate": [
                "func",
                "deg",
                "args"
            ],
            "chebgauss": [
                "deg"
            ],
            "chebweight": [
                "x"
            ],
            "chebpts1": [
                "npts"
            ],
            "chebpts2": [
                "npts"
            ],
            "Chebyshev": {
                "interpolate": [
                    "cls",
                    "func",
                    "deg",
                    "domain",
                    "args"
                ]
            }
        },
        "numpy.polynomial.hermite": {
            "poly2herm": [
                "pol"
            ],
            "herm2poly": [
                "c"
            ],
            "hermline": [
                "off",
                "scl"
            ],
            "hermfromroots": [
                "roots"
            ],
            "hermadd": [
                "c1",
                "c2"
            ],
            "hermsub": [
                "c1",
                "c2"
            ],
            "hermmulx": [
                "c"
            ],
            "hermmul": [
                "c1",
                "c2"
            ],
            "hermdiv": [
                "c1",
                "c2"
            ],
            "hermpow": [
                "c",
                "pow",
                "maxpower"
            ],
            "hermder": [
                "c",
                "m",
                "scl",
                "axis"
            ],
            "hermint": [
                "c",
                "m",
                "k",
                "lbnd",
                "scl",
                "axis"
            ],
            "hermval": [
                "x",
                "c",
                "tensor"
            ],
            "hermval2d": [
                "x",
                "y",
                "c"
            ],
            "hermgrid2d": [
                "x",
                "y",
                "c"
            ],
            "hermval3d": [
                "x",
                "y",
                "z",
                "c"
            ],
            "hermgrid3d": [
                "x",
                "y",
                "z",
                "c"
            ],
            "hermvander": [
                "x",
                "deg"
            ],
            "hermvander2d": [
                "x",
                "y",
                "deg"
            ],
            "hermvander3d": [
                "x",
                "y",
                "z",
                "deg"
            ],
            "hermfit": [
                "x",
                "y",
                "deg",
                "rcond",
                "full",
                "w"
            ],
            "hermcompanion": [
                "c"
            ],
            "hermroots": [
                "c"
            ],
            "_normed_hermite_n": [
                "x",
                "n"
            ],
            "hermgauss": [
                "deg"
            ],
            "hermweight": [
                "x"
            ],
            "Hermite": {}
        },
        "numpy.polynomial.polyutils": {
            "trimseq": [
                "seq"
            ],
            "as_series": [
                "alist",
                "trim"
            ],
            "trimcoef": [
                "c",
                "tol"
            ],
            "getdomain": [
                "x"
            ],
            "mapparms": [
                "old",
                "new"
            ],
            "mapdomain": [
                "x",
                "old",
                "new"
            ],
            "_nth_slice": [
                "i",
                "ndim"
            ],
            "_vander_nd": [
                "vander_fs",
                "points",
                "degrees"
            ],
            "_vander_nd_flat": [
                "vander_fs",
                "points",
                "degrees"
            ],
            "_fromroots": [
                "line_f",
                "mul_f",
                "roots"
            ],
            "_valnd": [
                "val_f",
                "c"
            ],
            "_gridnd": [
                "val_f",
                "c"
            ],
            "_div": [
                "mul_f",
                "c1",
                "c2"
            ],
            "_add": [
                "c1",
                "c2"
            ],
            "_sub": [
                "c1",
                "c2"
            ],
            "_fit": [
                "vander_f",
                "x",
                "y",
                "deg",
                "rcond",
                "full",
                "w"
            ],
            "_pow": [
                "mul_f",
                "c",
                "pow",
                "maxpower"
            ],
            "_deprecate_as_int": [
                "x",
                "desc"
            ],
            "RankWarning": {},
            "PolyError": {},
            "PolyDomainError": {},
            "PolyBase": {}
        },
        "numpy.polynomial.tests.test_chebyshev": {
            "trim": [
                "x"
            ],
            "TestPrivate": {
                "test__cseries_to_zseries": [
                    "self"
                ],
                "test__zseries_to_cseries": [
                    "self"
                ]
            },
            "TestConstants": {
                "test_chebdomain": [
                    "self"
                ],
                "test_chebzero": [
                    "self"
                ],
                "test_chebone": [
                    "self"
                ],
                "test_chebx": [
                    "self"
                ]
            },
            "TestArithmetic": {
                "test_chebadd": [
                    "self"
                ],
                "test_chebsub": [
                    "self"
                ],
                "test_chebmulx": [
                    "self"
                ],
                "test_chebmul": [
                    "self"
                ],
                "test_chebdiv": [
                    "self"
                ],
                "test_chebpow": [
                    "self"
                ]
            },
            "TestEvaluation": {
                "test_chebval": [
                    "self"
                ],
                "test_chebval2d": [
                    "self"
                ],
                "test_chebval3d": [
                    "self"
                ],
                "test_chebgrid2d": [
                    "self"
                ],
                "test_chebgrid3d": [
                    "self"
                ]
            },
            "TestIntegral": {
                "test_chebint": [
                    "self"
                ],
                "test_chebint_axis": [
                    "self"
                ]
            },
            "TestDerivative": {
                "test_chebder": [
                    "self"
                ],
                "test_chebder_axis": [
                    "self"
                ]
            },
            "TestVander": {
                "test_chebvander": [
                    "self"
                ],
                "test_chebvander2d": [
                    "self"
                ],
                "test_chebvander3d": [
                    "self"
                ]
            },
            "TestFitting": {
                "test_chebfit": [
                    "self"
                ]
            },
            "TestInterpolate": {
                "f": [
                    "self",
                    "x"
                ],
                "test_raises": [
                    "self"
                ],
                "test_dimensions": [
                    "self"
                ],
                "test_approximation": [
                    "self"
                ]
            },
            "TestCompanion": {
                "test_raises": [
                    "self"
                ],
                "test_dimensions": [
                    "self"
                ],
                "test_linear_root": [
                    "self"
                ]
            },
            "TestGauss": {
                "test_100": [
                    "self"
                ]
            },
            "TestMisc": {
                "test_chebfromroots": [
                    "self"
                ],
                "test_chebroots": [
                    "self"
                ],
                "test_chebtrim": [
                    "self"
                ],
                "test_chebline": [
                    "self"
                ],
                "test_cheb2poly": [
                    "self"
                ],
                "test_poly2cheb": [
                    "self"
                ],
                "test_weight": [
                    "self"
                ],
                "test_chebpts1": [
                    "self"
                ],
                "test_chebpts2": [
                    "self"
                ]
            }
        },
        "numpy.polynomial.tests": {},
        "numpy.polynomial.tests.test_hermite": {
            "trim": [
                "x"
            ],
            "TestConstants": {
                "test_hermdomain": [
                    "self"
                ],
                "test_hermzero": [
                    "self"
                ],
                "test_hermone": [
                    "self"
                ],
                "test_hermx": [
                    "self"
                ]
            },
            "TestArithmetic": {
                "test_hermadd": [
                    "self"
                ],
                "test_hermsub": [
                    "self"
                ],
                "test_hermmulx": [
                    "self"
                ],
                "test_hermmul": [
                    "self"
                ],
                "test_hermdiv": [
                    "self"
                ],
                "test_hermpow": [
                    "self"
                ]
            },
            "TestEvaluation": {
                "test_hermval": [
                    "self"
                ],
                "test_hermval2d": [
                    "self"
                ],
                "test_hermval3d": [
                    "self"
                ],
                "test_hermgrid2d": [
                    "self"
                ],
                "test_hermgrid3d": [
                    "self"
                ]
            },
            "TestIntegral": {
                "test_hermint": [
                    "self"
                ],
                "test_hermint_axis": [
                    "self"
                ]
            },
            "TestDerivative": {
                "test_hermder": [
                    "self"
                ],
                "test_hermder_axis": [
                    "self"
                ]
            },
            "TestVander": {
                "test_hermvander": [
                    "self"
                ],
                "test_hermvander2d": [
                    "self"
                ],
                "test_hermvander3d": [
                    "self"
                ]
            },
            "TestFitting": {
                "test_hermfit": [
                    "self"
                ]
            },
            "TestCompanion": {
                "test_raises": [
                    "self"
                ],
                "test_dimensions": [
                    "self"
                ],
                "test_linear_root": [
                    "self"
                ]
            },
            "TestGauss": {
                "test_100": [
                    "self"
                ]
            },
            "TestMisc": {
                "test_hermfromroots": [
                    "self"
                ],
                "test_hermroots": [
                    "self"
                ],
                "test_hermtrim": [
                    "self"
                ],
                "test_hermline": [
                    "self"
                ],
                "test_herm2poly": [
                    "self"
                ],
                "test_poly2herm": [
                    "self"
                ],
                "test_weight": [
                    "self"
                ]
            }
        },
        "numpy.polynomial.tests.test_hermite_e": {
            "trim": [
                "x"
            ],
            "TestConstants": {
                "test_hermedomain": [
                    "self"
                ],
                "test_hermezero": [
                    "self"
                ],
                "test_hermeone": [
                    "self"
                ],
                "test_hermex": [
                    "self"
                ]
            },
            "TestArithmetic": {
                "test_hermeadd": [
                    "self"
                ],
                "test_hermesub": [
                    "self"
                ],
                "test_hermemulx": [
                    "self"
                ],
                "test_hermemul": [
                    "self"
                ],
                "test_hermediv": [
                    "self"
                ],
                "test_hermepow": [
                    "self"
                ]
            },
            "TestEvaluation": {
                "test_hermeval": [
                    "self"
                ],
                "test_hermeval2d": [
                    "self"
                ],
                "test_hermeval3d": [
                    "self"
                ],
                "test_hermegrid2d": [
                    "self"
                ],
                "test_hermegrid3d": [
                    "self"
                ]
            },
            "TestIntegral": {
                "test_hermeint": [
                    "self"
                ],
                "test_hermeint_axis": [
                    "self"
                ]
            },
            "TestDerivative": {
                "test_hermeder": [
                    "self"
                ],
                "test_hermeder_axis": [
                    "self"
                ]
            },
            "TestVander": {
                "test_hermevander": [
                    "self"
                ],
                "test_hermevander2d": [
                    "self"
                ],
                "test_hermevander3d": [
                    "self"
                ]
            },
            "TestFitting": {
                "test_hermefit": [
                    "self"
                ]
            },
            "TestCompanion": {
                "test_raises": [
                    "self"
                ],
                "test_dimensions": [
                    "self"
                ],
                "test_linear_root": [
                    "self"
                ]
            },
            "TestGauss": {
                "test_100": [
                    "self"
                ]
            },
            "TestMisc": {
                "test_hermefromroots": [
                    "self"
                ],
                "test_hermeroots": [
                    "self"
                ],
                "test_hermetrim": [
                    "self"
                ],
                "test_hermeline": [
                    "self"
                ],
                "test_herme2poly": [
                    "self"
                ],
                "test_poly2herme": [
                    "self"
                ],
                "test_weight": [
                    "self"
                ]
            }
        },
        "numpy.polynomial.tests.test_polynomial": {
            "trim": [
                "x"
            ],
            "TestConstants": {
                "test_polydomain": [
                    "self"
                ],
                "test_polyzero": [
                    "self"
                ],
                "test_polyone": [
                    "self"
                ],
                "test_polyx": [
                    "self"
                ]
            },
            "TestArithmetic": {
                "test_polyadd": [
                    "self"
                ],
                "test_polysub": [
                    "self"
                ],
                "test_polymulx": [
                    "self"
                ],
                "test_polymul": [
                    "self"
                ],
                "test_polydiv": [
                    "self"
                ],
                "test_polypow": [
                    "self"
                ]
            },
            "TestEvaluation": {
                "test_polyval": [
                    "self"
                ],
                "test_polyvalfromroots": [
                    "self"
                ],
                "test_polyval2d": [
                    "self"
                ],
                "test_polyval3d": [
                    "self"
                ],
                "test_polygrid2d": [
                    "self"
                ],
                "test_polygrid3d": [
                    "self"
                ]
            },
            "TestIntegral": {
                "test_polyint": [
                    "self"
                ],
                "test_polyint_axis": [
                    "self"
                ]
            },
            "TestDerivative": {
                "test_polyder": [
                    "self"
                ],
                "test_polyder_axis": [
                    "self"
                ]
            },
            "TestVander": {
                "test_polyvander": [
                    "self"
                ],
                "test_polyvander2d": [
                    "self"
                ],
                "test_polyvander3d": [
                    "self"
                ]
            },
            "TestCompanion": {
                "test_raises": [
                    "self"
                ],
                "test_dimensions": [
                    "self"
                ],
                "test_linear_root": [
                    "self"
                ]
            },
            "TestMisc": {
                "test_polyfromroots": [
                    "self"
                ],
                "test_polyroots": [
                    "self"
                ],
                "test_polyfit": [
                    "self"
                ],
                "test_polytrim": [
                    "self"
                ],
                "test_polyline": [
                    "self"
                ]
            }
        },
        "numpy.polynomial.tests.test_legendre": {
            "trim": [
                "x"
            ],
            "TestConstants": {
                "test_legdomain": [
                    "self"
                ],
                "test_legzero": [
                    "self"
                ],
                "test_legone": [
                    "self"
                ],
                "test_legx": [
                    "self"
                ]
            },
            "TestArithmetic": {
                "test_legadd": [
                    "self"
                ],
                "test_legsub": [
                    "self"
                ],
                "test_legmulx": [
                    "self"
                ],
                "test_legmul": [
                    "self"
                ],
                "test_legdiv": [
                    "self"
                ],
                "test_legpow": [
                    "self"
                ]
            },
            "TestEvaluation": {
                "test_legval": [
                    "self"
                ],
                "test_legval2d": [
                    "self"
                ],
                "test_legval3d": [
                    "self"
                ],
                "test_leggrid2d": [
                    "self"
                ],
                "test_leggrid3d": [
                    "self"
                ]
            },
            "TestIntegral": {
                "test_legint": [
                    "self"
                ],
                "test_legint_axis": [
                    "self"
                ]
            },
            "TestDerivative": {
                "test_legder": [
                    "self"
                ],
                "test_legder_axis": [
                    "self"
                ]
            },
            "TestVander": {
                "test_legvander": [
                    "self"
                ],
                "test_legvander2d": [
                    "self"
                ],
                "test_legvander3d": [
                    "self"
                ]
            },
            "TestFitting": {
                "test_legfit": [
                    "self"
                ]
            },
            "TestCompanion": {
                "test_raises": [
                    "self"
                ],
                "test_dimensions": [
                    "self"
                ],
                "test_linear_root": [
                    "self"
                ]
            },
            "TestGauss": {
                "test_100": [
                    "self"
                ]
            },
            "TestMisc": {
                "test_legfromroots": [
                    "self"
                ],
                "test_legroots": [
                    "self"
                ],
                "test_legtrim": [
                    "self"
                ],
                "test_legline": [
                    "self"
                ],
                "test_leg2poly": [
                    "self"
                ],
                "test_poly2leg": [
                    "self"
                ],
                "test_weight": [
                    "self"
                ]
            }
        },
        "numpy.polynomial.tests.test_laguerre": {
            "trim": [
                "x"
            ],
            "TestConstants": {
                "test_lagdomain": [
                    "self"
                ],
                "test_lagzero": [
                    "self"
                ],
                "test_lagone": [
                    "self"
                ],
                "test_lagx": [
                    "self"
                ]
            },
            "TestArithmetic": {
                "test_lagadd": [
                    "self"
                ],
                "test_lagsub": [
                    "self"
                ],
                "test_lagmulx": [
                    "self"
                ],
                "test_lagmul": [
                    "self"
                ],
                "test_lagdiv": [
                    "self"
                ],
                "test_lagpow": [
                    "self"
                ]
            },
            "TestEvaluation": {
                "test_lagval": [
                    "self"
                ],
                "test_lagval2d": [
                    "self"
                ],
                "test_lagval3d": [
                    "self"
                ],
                "test_laggrid2d": [
                    "self"
                ],
                "test_laggrid3d": [
                    "self"
                ]
            },
            "TestIntegral": {
                "test_lagint": [
                    "self"
                ],
                "test_lagint_axis": [
                    "self"
                ]
            },
            "TestDerivative": {
                "test_lagder": [
                    "self"
                ],
                "test_lagder_axis": [
                    "self"
                ]
            },
            "TestVander": {
                "test_lagvander": [
                    "self"
                ],
                "test_lagvander2d": [
                    "self"
                ],
                "test_lagvander3d": [
                    "self"
                ]
            },
            "TestFitting": {
                "test_lagfit": [
                    "self"
                ]
            },
            "TestCompanion": {
                "test_raises": [
                    "self"
                ],
                "test_dimensions": [
                    "self"
                ],
                "test_linear_root": [
                    "self"
                ]
            },
            "TestGauss": {
                "test_100": [
                    "self"
                ]
            },
            "TestMisc": {
                "test_lagfromroots": [
                    "self"
                ],
                "test_lagroots": [
                    "self"
                ],
                "test_lagtrim": [
                    "self"
                ],
                "test_lagline": [
                    "self"
                ],
                "test_lag2poly": [
                    "self"
                ],
                "test_poly2lag": [
                    "self"
                ],
                "test_weight": [
                    "self"
                ]
            }
        },
        "numpy.polynomial.tests.test_classes": {
            "Poly": [
                "request"
            ],
            "assert_poly_almost_equal": [
                "p1",
                "p2",
                "msg"
            ],
            "test_conversion": [
                "Poly1",
                "Poly2"
            ],
            "test_cast": [
                "Poly1",
                "Poly2"
            ],
            "test_identity": [
                "Poly"
            ],
            "test_basis": [
                "Poly"
            ],
            "test_fromroots": [
                "Poly"
            ],
            "test_bad_conditioned_fit": [
                "Poly"
            ],
            "test_fit": [
                "Poly"
            ],
            "test_equal": [
                "Poly"
            ],
            "test_not_equal": [
                "Poly"
            ],
            "test_add": [
                "Poly"
            ],
            "test_sub": [
                "Poly"
            ],
            "test_mul": [
                "Poly"
            ],
            "test_floordiv": [
                "Poly"
            ],
            "test_truediv": [
                "Poly"
            ],
            "test_mod": [
                "Poly"
            ],
            "test_divmod": [
                "Poly"
            ],
            "test_roots": [
                "Poly"
            ],
            "test_degree": [
                "Poly"
            ],
            "test_copy": [
                "Poly"
            ],
            "test_integ": [
                "Poly"
            ],
            "test_deriv": [
                "Poly"
            ],
            "test_linspace": [
                "Poly"
            ],
            "test_pow": [
                "Poly"
            ],
            "test_call": [
                "Poly"
            ],
            "test_cutdeg": [
                "Poly"
            ],
            "test_truncate": [
                "Poly"
            ],
            "test_trim": [
                "Poly"
            ],
            "test_mapparms": [
                "Poly"
            ],
            "test_ufunc_override": [
                "Poly"
            ],
            "TestLatexRepr": {
                "as_latex": [
                    "self",
                    "obj"
                ],
                "test_simple_polynomial": [
                    "self"
                ],
                "test_basis_func": [
                    "self"
                ],
                "test_multichar_basis_func": [
                    "self"
                ]
            },
            "TestInterpolate": {
                "f": [
                    "self",
                    "x"
                ],
                "test_raises": [
                    "self"
                ],
                "test_dimensions": [
                    "self"
                ],
                "test_approximation": [
                    "self"
                ]
            }
        },
        "numpy.polynomial.tests.test_polyutils": {
            "TestMisc": {
                "test_trimseq": [
                    "self"
                ],
                "test_as_series": [
                    "self"
                ],
                "test_trimcoef": [
                    "self"
                ]
            },
            "TestDomain": {
                "test_getdomain": [
                    "self"
                ],
                "test_mapdomain": [
                    "self"
                ],
                "test_mapparms": [
                    "self"
                ]
            }
        },
        "numpy.polynomial.tests.test_printing": {
            "TestStr": {
                "test_polynomial_str": [
                    "self"
                ],
                "test_chebyshev_str": [
                    "self"
                ],
                "test_legendre_str": [
                    "self"
                ],
                "test_hermite_str": [
                    "self"
                ],
                "test_hermiteE_str": [
                    "self"
                ],
                "test_laguerre_str": [
                    "self"
                ]
            },
            "TestRepr": {
                "test_polynomial_str": [
                    "self"
                ],
                "test_chebyshev_str": [
                    "self"
                ],
                "test_legendre_repr": [
                    "self"
                ],
                "test_hermite_repr": [
                    "self"
                ],
                "test_hermiteE_repr": [
                    "self"
                ],
                "test_laguerre_repr": [
                    "self"
                ]
            }
        },
        "numpy.random": {
            "__RandomState_ctor": []
        },
        "numpy.random.info": {},
        "numpy.random._pickle": {
            "__generator_ctor": [
                "bit_generator_name"
            ],
            "__bit_generator_ctor": [
                "bit_generator_name"
            ],
            "__randomstate_ctor": [
                "bit_generator_name"
            ]
        },
        "numpy.random.setup": {
            "configuration": [
                "parent_package",
                "top_path"
            ]
        },
        "numpy.random.tests.test_seed_sequence": {
            "test_reference_data": []
        },
        "numpy.random.tests.test_randomstate_regression": {
            "TestRegression": {
                "test_VonMises_range": [
                    "self"
                ],
                "test_hypergeometric_range": [
                    "self"
                ],
                "test_logseries_convergence": [
                    "self"
                ],
                "test_permutation_longs": [
                    "self"
                ],
                "test_shuffle_mixed_dimension": [
                    "self"
                ],
                "test_call_within_randomstate": [
                    "self"
                ],
                "test_multivariate_normal_size_types": [
                    "self"
                ],
                "test_beta_small_parameters": [
                    "self"
                ],
                "test_choice_sum_of_probs_tolerance": [
                    "self"
                ],
                "test_shuffle_of_array_of_different_length_strings": [
                    "self"
                ],
                "test_shuffle_of_array_of_objects": [
                    "self"
                ],
                "test_permutation_subclass": [
                    "self"
                ],
                "test_warns_byteorder": [
                    "self"
                ],
                "test_named_argument_initialization": [
                    "self"
                ],
                "test_choice_retun_dtype": [
                    "self"
                ],
                "test_randint_117": [
                    "self"
                ],
                "test_p_zero_stream": [
                    "self"
                ],
                "test_n_zero_stream": [
                    "self"
                ]
            }
        },
        "numpy.random.tests.test_smoke": {
            "dtype": [
                "request"
            ],
            "params_0": [
                "f"
            ],
            "params_1": [
                "f",
                "bounded"
            ],
            "comp_state": [
                "state1",
                "state2"
            ],
            "warmup": [
                "rg",
                "n"
            ],
            "RNG": {
                "setup_class": [
                    "cls"
                ],
                "_extra_setup": [
                    "cls"
                ],
                "_reset_state": [
                    "self"
                ],
                "test_init": [
                    "self"
                ],
                "test_advance": [
                    "self"
                ],
                "test_jump": [
                    "self"
                ],
                "test_uniform": [
                    "self"
                ],
                "test_uniform_array": [
                    "self"
                ],
                "test_random": [
                    "self"
                ],
                "test_standard_normal_zig": [
                    "self"
                ],
                "test_standard_normal": [
                    "self"
                ],
                "test_standard_gamma": [
                    "self"
                ],
                "test_standard_exponential": [
                    "self"
                ],
                "test_standard_exponential_float": [
                    "self"
                ],
                "test_standard_exponential_float_log": [
                    "self"
                ],
                "test_standard_cauchy": [
                    "self"
                ],
                "test_standard_t": [
                    "self"
                ],
                "test_binomial": [
                    "self"
                ],
                "test_reset_state": [
                    "self"
                ],
                "test_entropy_init": [
                    "self"
                ],
                "test_seed": [
                    "self"
                ],
                "test_reset_state_gauss": [
                    "self"
                ],
                "test_reset_state_uint32": [
                    "self"
                ],
                "test_reset_state_float": [
                    "self"
                ],
                "test_shuffle": [
                    "self"
                ],
                "test_permutation": [
                    "self"
                ],
                "test_beta": [
                    "self"
                ],
                "test_bytes": [
                    "self"
                ],
                "test_chisquare": [
                    "self"
                ],
                "test_exponential": [
                    "self"
                ],
                "test_f": [
                    "self"
                ],
                "test_gamma": [
                    "self"
                ],
                "test_geometric": [
                    "self"
                ],
                "test_gumbel": [
                    "self"
                ],
                "test_laplace": [
                    "self"
                ],
                "test_logitic": [
                    "self"
                ],
                "test_logseries": [
                    "self"
                ],
                "test_negative_binomial": [
                    "self"
                ],
                "test_noncentral_chisquare": [
                    "self"
                ],
                "test_noncentral_f": [
                    "self"
                ],
                "test_normal": [
                    "self"
                ],
                "test_pareto": [
                    "self"
                ],
                "test_poisson": [
                    "self"
                ],
                "test_power": [
                    "self"
                ],
                "test_integers": [
                    "self"
                ],
                "test_rayleigh": [
                    "self"
                ],
                "test_vonmises": [
                    "self"
                ],
                "test_wald": [
                    "self"
                ],
                "test_weibull": [
                    "self"
                ],
                "test_zipf": [
                    "self"
                ],
                "test_hypergeometric": [
                    "self"
                ],
                "test_triangular": [
                    "self"
                ],
                "test_multivariate_normal": [
                    "self"
                ],
                "test_multinomial": [
                    "self"
                ],
                "test_dirichlet": [
                    "self"
                ],
                "test_pickle": [
                    "self"
                ],
                "test_seed_array": [
                    "self"
                ],
                "test_uniform_float": [
                    "self"
                ],
                "test_gamma_floats": [
                    "self"
                ],
                "test_normal_floats": [
                    "self"
                ],
                "test_normal_zig_floats": [
                    "self"
                ],
                "test_output_fill": [
                    "self"
                ],
                "test_output_filling_uniform": [
                    "self"
                ],
                "test_output_filling_exponential": [
                    "self"
                ],
                "test_output_filling_gamma": [
                    "self"
                ],
                "test_output_filling_gamma_broadcast": [
                    "self"
                ],
                "test_output_fill_error": [
                    "self"
                ],
                "test_integers_broadcast": [
                    "self",
                    "dtype"
                ],
                "test_integers_numpy": [
                    "self",
                    "dtype"
                ],
                "test_integers_broadcast_errors": [
                    "self",
                    "dtype"
                ]
            },
            "TestMT19937": {
                "setup_class": [
                    "cls"
                ],
                "test_numpy_state": [
                    "self"
                ]
            },
            "TestPhilox": {
                "setup_class": [
                    "cls"
                ]
            },
            "TestSFC64": {
                "setup_class": [
                    "cls"
                ]
            },
            "TestPCG64": {
                "setup_class": [
                    "cls"
                ]
            },
            "TestDefaultRNG": {
                "setup_class": [
                    "cls"
                ],
                "test_default_is_pcg64": [
                    "self"
                ],
                "test_seed": [
                    "self"
                ]
            }
        },
        "numpy.random.tests.test_regression": {
            "TestRegression": {
                "test_VonMises_range": [
                    "self"
                ],
                "test_hypergeometric_range": [
                    "self"
                ],
                "test_logseries_convergence": [
                    "self"
                ],
                "test_permutation_longs": [
                    "self"
                ],
                "test_shuffle_mixed_dimension": [
                    "self"
                ],
                "test_call_within_randomstate": [
                    "self"
                ],
                "test_multivariate_normal_size_types": [
                    "self"
                ],
                "test_beta_small_parameters": [
                    "self"
                ],
                "test_choice_sum_of_probs_tolerance": [
                    "self"
                ],
                "test_shuffle_of_array_of_different_length_strings": [
                    "self"
                ],
                "test_shuffle_of_array_of_objects": [
                    "self"
                ],
                "test_permutation_subclass": [
                    "self"
                ]
            }
        },
        "numpy.random.tests": {},
        "numpy.random.tests.test_generator_mt19937": {
            "endpoint": [
                "request"
            ],
            "TestSeed": {
                "test_scalar": [
                    "self"
                ],
                "test_array": [
                    "self"
                ],
                "test_seedsequence": [
                    "self"
                ],
                "test_invalid_scalar": [
                    "self"
                ],
                "test_invalid_array": [
                    "self"
                ],
                "test_noninstantized_bitgen": [
                    "self"
                ]
            },
            "TestBinomial": {
                "test_n_zero": [
                    "self"
                ],
                "test_p_is_nan": [
                    "self"
                ]
            },
            "TestMultinomial": {
                "test_basic": [
                    "self"
                ],
                "test_zero_probability": [
                    "self"
                ],
                "test_int_negative_interval": [
                    "self"
                ],
                "test_size": [
                    "self"
                ],
                "test_invalid_prob": [
                    "self"
                ],
                "test_invalid_n": [
                    "self"
                ],
                "test_p_non_contiguous": [
                    "self"
                ]
            },
            "TestMultivariateHypergeometric": {
                "setup": [
                    "self"
                ],
                "test_argument_validation": [
                    "self"
                ],
                "test_edge_cases": [
                    "self",
                    "method"
                ],
                "test_typical_cases": [
                    "self",
                    "nsample",
                    "method",
                    "size"
                ],
                "test_repeatability1": [
                    "self"
                ],
                "test_repeatability2": [
                    "self"
                ],
                "test_repeatability3": [
                    "self"
                ]
            },
            "TestSetState": {
                "setup": [
                    "self"
                ],
                "test_gaussian_reset": [
                    "self"
                ],
                "test_gaussian_reset_in_media_res": [
                    "self"
                ],
                "test_negative_binomial": [
                    "self"
                ]
            },
            "TestIntegers": {
                "test_unsupported_type": [
                    "self",
                    "endpoint"
                ],
                "test_bounds_checking": [
                    "self",
                    "endpoint"
                ],
                "test_bounds_checking_array": [
                    "self",
                    "endpoint"
                ],
                "test_rng_zero_and_extremes": [
                    "self",
                    "endpoint"
                ],
                "test_rng_zero_and_extremes_array": [
                    "self",
                    "endpoint"
                ],
                "test_full_range": [
                    "self",
                    "endpoint"
                ],
                "test_full_range_array": [
                    "self",
                    "endpoint"
                ],
                "test_in_bounds_fuzz": [
                    "self",
                    "endpoint"
                ],
                "test_scalar_array_equiv": [
                    "self",
                    "endpoint"
                ],
                "test_repeatability": [
                    "self",
                    "endpoint"
                ],
                "test_repeatability_broadcasting": [
                    "self",
                    "endpoint"
                ],
                "test_int64_uint64_broadcast_exceptions": [
                    "self",
                    "endpoint"
                ],
                "test_int64_uint64_corner_case": [
                    "self",
                    "endpoint"
                ],
                "test_respect_dtype_singleton": [
                    "self",
                    "endpoint"
                ],
                "test_respect_dtype_array": [
                    "self",
                    "endpoint"
                ],
                "test_zero_size": [
                    "self",
                    "endpoint"
                ],
                "test_error_byteorder": [
                    "self"
                ],
                "test_integers_small_dtype_chisquared": [
                    "self",
                    "sample_size",
                    "high",
                    "dtype",
                    "chi2max"
                ]
            },
            "TestRandomDist": {
                "setup": [
                    "self"
                ],
                "test_integers": [
                    "self"
                ],
                "test_integers_masked": [
                    "self"
                ],
                "test_integers_closed": [
                    "self"
                ],
                "test_integers_max_int": [
                    "self"
                ],
                "test_random": [
                    "self"
                ],
                "test_random_float": [
                    "self"
                ],
                "test_random_float_scalar": [
                    "self"
                ],
                "test_random_unsupported_type": [
                    "self"
                ],
                "test_choice_uniform_replace": [
                    "self"
                ],
                "test_choice_nonuniform_replace": [
                    "self"
                ],
                "test_choice_uniform_noreplace": [
                    "self"
                ],
                "test_choice_nonuniform_noreplace": [
                    "self"
                ],
                "test_choice_noninteger": [
                    "self"
                ],
                "test_choice_multidimensional_default_axis": [
                    "self"
                ],
                "test_choice_multidimensional_custom_axis": [
                    "self"
                ],
                "test_choice_exceptions": [
                    "self"
                ],
                "test_choice_return_shape": [
                    "self"
                ],
                "test_choice_nan_probabilities": [
                    "self"
                ],
                "test_choice_p_non_contiguous": [
                    "self"
                ],
                "test_choice_return_type": [
                    "self"
                ],
                "test_choice_large_sample": [
                    "self"
                ],
                "test_bytes": [
                    "self"
                ],
                "test_shuffle": [
                    "self"
                ],
                "test_shuffle_custom_axis": [
                    "self"
                ],
                "test_shuffle_axis_nonsquare": [
                    "self"
                ],
                "test_shuffle_masked": [
                    "self"
                ],
                "test_shuffle_exceptions": [
                    "self"
                ],
                "test_permutation": [
                    "self"
                ],
                "test_permutation_custom_axis": [
                    "self"
                ],
                "test_permutation_exceptions": [
                    "self"
                ],
                "test_beta": [
                    "self"
                ],
                "test_binomial": [
                    "self"
                ],
                "test_chisquare": [
                    "self"
                ],
                "test_dirichlet": [
                    "self"
                ],
                "test_dirichlet_size": [
                    "self"
                ],
                "test_dirichlet_bad_alpha": [
                    "self"
                ],
                "test_dirichlet_alpha_non_contiguous": [
                    "self"
                ],
                "test_exponential": [
                    "self"
                ],
                "test_exponential_0": [
                    "self"
                ],
                "test_f": [
                    "self"
                ],
                "test_gamma": [
                    "self"
                ],
                "test_gamma_0": [
                    "self"
                ],
                "test_geometric": [
                    "self"
                ],
                "test_geometric_exceptions": [
                    "self"
                ],
                "test_gumbel": [
                    "self"
                ],
                "test_gumbel_0": [
                    "self"
                ],
                "test_hypergeometric": [
                    "self"
                ],
                "test_laplace": [
                    "self"
                ],
                "test_laplace_0": [
                    "self"
                ],
                "test_logistic": [
                    "self"
                ],
                "test_lognormal": [
                    "self"
                ],
                "test_lognormal_0": [
                    "self"
                ],
                "test_logseries": [
                    "self"
                ],
                "test_logseries_exceptions": [
                    "self"
                ],
                "test_multinomial": [
                    "self"
                ],
                "test_multivariate_normal": [
                    "self",
                    "method"
                ],
                "test_negative_binomial": [
                    "self"
                ],
                "test_negative_binomial_exceptions": [
                    "self"
                ],
                "test_noncentral_chisquare": [
                    "self"
                ],
                "test_noncentral_f": [
                    "self"
                ],
                "test_noncentral_f_nan": [
                    "self"
                ],
                "test_normal": [
                    "self"
                ],
                "test_normal_0": [
                    "self"
                ],
                "test_pareto": [
                    "self"
                ],
                "test_poisson": [
                    "self"
                ],
                "test_poisson_exceptions": [
                    "self"
                ],
                "test_power": [
                    "self"
                ],
                "test_rayleigh": [
                    "self"
                ],
                "test_rayleigh_0": [
                    "self"
                ],
                "test_standard_cauchy": [
                    "self"
                ],
                "test_standard_exponential": [
                    "self"
                ],
                "test_standard_expoential_type_error": [
                    "self"
                ],
                "test_standard_gamma": [
                    "self"
                ],
                "test_standard_gammma_scalar_float": [
                    "self"
                ],
                "test_standard_gamma_float": [
                    "self"
                ],
                "test_standard_gammma_float_out": [
                    "self"
                ],
                "test_standard_gamma_unknown_type": [
                    "self"
                ],
                "test_out_size_mismatch": [
                    "self"
                ],
                "test_standard_gamma_0": [
                    "self"
                ],
                "test_standard_normal": [
                    "self"
                ],
                "test_standard_normal_unsupported_type": [
                    "self"
                ],
                "test_standard_t": [
                    "self"
                ],
                "test_triangular": [
                    "self"
                ],
                "test_uniform": [
                    "self"
                ],
                "test_uniform_range_bounds": [
                    "self"
                ],
                "test_scalar_exception_propagation": [
                    "self"
                ],
                "test_vonmises": [
                    "self"
                ],
                "test_vonmises_small": [
                    "self"
                ],
                "test_vonmises_nan": [
                    "self"
                ],
                "test_wald": [
                    "self"
                ],
                "test_weibull": [
                    "self"
                ],
                "test_weibull_0": [
                    "self"
                ],
                "test_zipf": [
                    "self"
                ]
            },
            "TestBroadcast": {
                "setup": [
                    "self"
                ],
                "test_uniform": [
                    "self"
                ],
                "test_normal": [
                    "self"
                ],
                "test_beta": [
                    "self"
                ],
                "test_exponential": [
                    "self"
                ],
                "test_standard_gamma": [
                    "self"
                ],
                "test_gamma": [
                    "self"
                ],
                "test_f": [
                    "self"
                ],
                "test_noncentral_f": [
                    "self"
                ],
                "test_noncentral_f_small_df": [
                    "self"
                ],
                "test_chisquare": [
                    "self"
                ],
                "test_noncentral_chisquare": [
                    "self"
                ],
                "test_standard_t": [
                    "self"
                ],
                "test_vonmises": [
                    "self"
                ],
                "test_pareto": [
                    "self"
                ],
                "test_weibull": [
                    "self"
                ],
                "test_power": [
                    "self"
                ],
                "test_laplace": [
                    "self"
                ],
                "test_gumbel": [
                    "self"
                ],
                "test_logistic": [
                    "self"
                ],
                "test_lognormal": [
                    "self"
                ],
                "test_rayleigh": [
                    "self"
                ],
                "test_wald": [
                    "self"
                ],
                "test_triangular": [
                    "self"
                ],
                "test_binomial": [
                    "self"
                ],
                "test_negative_binomial": [
                    "self"
                ],
                "test_poisson": [
                    "self"
                ],
                "test_zipf": [
                    "self"
                ],
                "test_geometric": [
                    "self"
                ],
                "test_hypergeometric": [
                    "self"
                ],
                "test_logseries": [
                    "self"
                ],
                "test_multinomial": [
                    "self"
                ]
            },
            "TestThread": {
                "setup": [
                    "self"
                ],
                "check_function": [
                    "self",
                    "function",
                    "sz"
                ],
                "test_normal": [
                    "self"
                ],
                "test_exp": [
                    "self"
                ],
                "test_multinomial": [
                    "self"
                ]
            },
            "TestSingleEltArrayInput": {
                "setup": [
                    "self"
                ],
                "test_one_arg_funcs": [
                    "self"
                ],
                "test_two_arg_funcs": [
                    "self"
                ],
                "test_integers": [
                    "self",
                    "endpoint"
                ],
                "test_three_arg_funcs": [
                    "self"
                ]
            }
        },
        "numpy.random.tests.test_random": {
            "TestSeed": {
                "test_scalar": [
                    "self"
                ],
                "test_array": [
                    "self"
                ],
                "test_invalid_scalar": [
                    "self"
                ],
                "test_invalid_array": [
                    "self"
                ],
                "test_invalid_array_shape": [
                    "self"
                ]
            },
            "TestBinomial": {
                "test_n_zero": [
                    "self"
                ],
                "test_p_is_nan": [
                    "self"
                ]
            },
            "TestMultinomial": {
                "test_basic": [
                    "self"
                ],
                "test_zero_probability": [
                    "self"
                ],
                "test_int_negative_interval": [
                    "self"
                ],
                "test_size": [
                    "self"
                ]
            },
            "TestSetState": {
                "setup": [
                    "self"
                ],
                "test_basic": [
                    "self"
                ],
                "test_gaussian_reset": [
                    "self"
                ],
                "test_gaussian_reset_in_media_res": [
                    "self"
                ],
                "test_backwards_compatibility": [
                    "self"
                ],
                "test_negative_binomial": [
                    "self"
                ]
            },
            "TestRandint": {
                "test_unsupported_type": [
                    "self"
                ],
                "test_bounds_checking": [
                    "self"
                ],
                "test_rng_zero_and_extremes": [
                    "self"
                ],
                "test_full_range": [
                    "self"
                ],
                "test_in_bounds_fuzz": [
                    "self"
                ],
                "test_repeatability": [
                    "self"
                ],
                "test_int64_uint64_corner_case": [
                    "self"
                ],
                "test_respect_dtype_singleton": [
                    "self"
                ]
            },
            "TestRandomDist": {
                "setup": [
                    "self"
                ],
                "test_rand": [
                    "self"
                ],
                "test_randn": [
                    "self"
                ],
                "test_randint": [
                    "self"
                ],
                "test_random_integers": [
                    "self"
                ],
                "test_random_integers_max_int": [
                    "self"
                ],
                "test_random_integers_deprecated": [
                    "self"
                ],
                "test_random": [
                    "self"
                ],
                "test_choice_uniform_replace": [
                    "self"
                ],
                "test_choice_nonuniform_replace": [
                    "self"
                ],
                "test_choice_uniform_noreplace": [
                    "self"
                ],
                "test_choice_nonuniform_noreplace": [
                    "self"
                ],
                "test_choice_noninteger": [
                    "self"
                ],
                "test_choice_exceptions": [
                    "self"
                ],
                "test_choice_return_shape": [
                    "self"
                ],
                "test_choice_nan_probabilities": [
                    "self"
                ],
                "test_bytes": [
                    "self"
                ],
                "test_shuffle": [
                    "self"
                ],
                "test_shuffle_masked": [
                    "self"
                ],
                "test_beta": [
                    "self"
                ],
                "test_binomial": [
                    "self"
                ],
                "test_chisquare": [
                    "self"
                ],
                "test_dirichlet": [
                    "self"
                ],
                "test_dirichlet_size": [
                    "self"
                ],
                "test_dirichlet_bad_alpha": [
                    "self"
                ],
                "test_exponential": [
                    "self"
                ],
                "test_exponential_0": [
                    "self"
                ],
                "test_f": [
                    "self"
                ],
                "test_gamma": [
                    "self"
                ],
                "test_gamma_0": [
                    "self"
                ],
                "test_geometric": [
                    "self"
                ],
                "test_gumbel": [
                    "self"
                ],
                "test_gumbel_0": [
                    "self"
                ],
                "test_hypergeometric": [
                    "self"
                ],
                "test_laplace": [
                    "self"
                ],
                "test_laplace_0": [
                    "self"
                ],
                "test_logistic": [
                    "self"
                ],
                "test_lognormal": [
                    "self"
                ],
                "test_lognormal_0": [
                    "self"
                ],
                "test_logseries": [
                    "self"
                ],
                "test_multinomial": [
                    "self"
                ],
                "test_multivariate_normal": [
                    "self"
                ],
                "test_negative_binomial": [
                    "self"
                ],
                "test_noncentral_chisquare": [
                    "self"
                ],
                "test_noncentral_f": [
                    "self"
                ],
                "test_normal": [
                    "self"
                ],
                "test_normal_0": [
                    "self"
                ],
                "test_pareto": [
                    "self"
                ],
                "test_poisson": [
                    "self"
                ],
                "test_poisson_exceptions": [
                    "self"
                ],
                "test_power": [
                    "self"
                ],
                "test_rayleigh": [
                    "self"
                ],
                "test_rayleigh_0": [
                    "self"
                ],
                "test_standard_cauchy": [
                    "self"
                ],
                "test_standard_exponential": [
                    "self"
                ],
                "test_standard_gamma": [
                    "self"
                ],
                "test_standard_gamma_0": [
                    "self"
                ],
                "test_standard_normal": [
                    "self"
                ],
                "test_standard_t": [
                    "self"
                ],
                "test_triangular": [
                    "self"
                ],
                "test_uniform": [
                    "self"
                ],
                "test_uniform_range_bounds": [
                    "self"
                ],
                "test_scalar_exception_propagation": [
                    "self"
                ],
                "test_vonmises": [
                    "self"
                ],
                "test_vonmises_small": [
                    "self"
                ],
                "test_wald": [
                    "self"
                ],
                "test_weibull": [
                    "self"
                ],
                "test_weibull_0": [
                    "self"
                ],
                "test_zipf": [
                    "self"
                ]
            },
            "TestBroadcast": {
                "setup": [
                    "self"
                ],
                "setSeed": [
                    "self"
                ],
                "test_uniform": [
                    "self"
                ],
                "test_normal": [
                    "self"
                ],
                "test_beta": [
                    "self"
                ],
                "test_exponential": [
                    "self"
                ],
                "test_standard_gamma": [
                    "self"
                ],
                "test_gamma": [
                    "self"
                ],
                "test_f": [
                    "self"
                ],
                "test_noncentral_f": [
                    "self"
                ],
                "test_noncentral_f_small_df": [
                    "self"
                ],
                "test_chisquare": [
                    "self"
                ],
                "test_noncentral_chisquare": [
                    "self"
                ],
                "test_standard_t": [
                    "self"
                ],
                "test_vonmises": [
                    "self"
                ],
                "test_pareto": [
                    "self"
                ],
                "test_weibull": [
                    "self"
                ],
                "test_power": [
                    "self"
                ],
                "test_laplace": [
                    "self"
                ],
                "test_gumbel": [
                    "self"
                ],
                "test_logistic": [
                    "self"
                ],
                "test_lognormal": [
                    "self"
                ],
                "test_rayleigh": [
                    "self"
                ],
                "test_wald": [
                    "self"
                ],
                "test_triangular": [
                    "self"
                ],
                "test_binomial": [
                    "self"
                ],
                "test_negative_binomial": [
                    "self"
                ],
                "test_poisson": [
                    "self"
                ],
                "test_zipf": [
                    "self"
                ],
                "test_geometric": [
                    "self"
                ],
                "test_hypergeometric": [
                    "self"
                ],
                "test_logseries": [
                    "self"
                ]
            },
            "TestThread": {
                "setup": [
                    "self"
                ],
                "check_function": [
                    "self",
                    "function",
                    "sz"
                ],
                "test_normal": [
                    "self"
                ],
                "test_exp": [
                    "self"
                ],
                "test_multinomial": [
                    "self"
                ]
            },
            "TestSingleEltArrayInput": {
                "setup": [
                    "self"
                ],
                "test_one_arg_funcs": [
                    "self"
                ],
                "test_two_arg_funcs": [
                    "self"
                ],
                "test_three_arg_funcs": [
                    "self"
                ]
            }
        },
        "numpy.random.tests.test_direct": {
            "assert_state_equal": [
                "actual",
                "target"
            ],
            "uniform32_from_uint64": [
                "x"
            ],
            "uniform32_from_uint53": [
                "x"
            ],
            "uniform32_from_uint32": [
                "x"
            ],
            "uniform32_from_uint": [
                "x",
                "bits"
            ],
            "uniform_from_uint": [
                "x",
                "bits"
            ],
            "uniform_from_uint64": [
                "x"
            ],
            "uniform_from_uint32": [
                "x"
            ],
            "uniform_from_dsfmt": [
                "x"
            ],
            "gauss_from_uint": [
                "x",
                "n",
                "bits"
            ],
            "test_seedsequence": [],
            "Base": {
                "setup_class": [
                    "cls"
                ],
                "_read_csv": [
                    "cls",
                    "filename"
                ],
                "test_raw": [
                    "self"
                ],
                "test_random_raw": [
                    "self"
                ],
                "test_gauss_inv": [
                    "self"
                ],
                "test_uniform_double": [
                    "self"
                ],
                "test_uniform_float": [
                    "self"
                ],
                "test_repr": [
                    "self"
                ],
                "test_str": [
                    "self"
                ],
                "test_pickle": [
                    "self"
                ],
                "test_invalid_state_type": [
                    "self"
                ],
                "test_invalid_state_value": [
                    "self"
                ],
                "test_invalid_init_type": [
                    "self"
                ],
                "test_invalid_init_values": [
                    "self"
                ],
                "test_benchmark": [
                    "self"
                ],
                "test_cffi": [
                    "self"
                ],
                "test_ctypes": [
                    "self"
                ],
                "test_getstate": [
                    "self"
                ]
            },
            "TestPhilox": {
                "setup_class": [
                    "cls"
                ],
                "test_set_key": [
                    "self"
                ]
            },
            "TestPCG64": {
                "setup_class": [
                    "cls"
                ],
                "test_advance_symmetry": [
                    "self"
                ]
            },
            "TestMT19937": {
                "setup_class": [
                    "cls"
                ],
                "test_seed_float_array": [
                    "self"
                ],
                "test_state_tuple": [
                    "self"
                ]
            },
            "TestSFC64": {
                "setup_class": [
                    "cls"
                ]
            },
            "TestDefaultRNG": {
                "test_seed": [
                    "self"
                ],
                "test_passthrough": [
                    "self"
                ]
            }
        },
        "numpy.random.tests.test_extending": {
            "test_cython": [],
            "test_numba": [],
            "test_cffi": []
        },
        "numpy.random.tests.test_generator_mt19937_regressions": {
            "TestRegression": {
                "test_VonMises_range": [
                    "self"
                ],
                "test_hypergeometric_range": [
                    "self"
                ],
                "test_logseries_convergence": [
                    "self"
                ],
                "test_permutation_longs": [
                    "self"
                ],
                "test_shuffle_mixed_dimension": [
                    "self"
                ],
                "test_call_within_randomstate": [
                    "self"
                ],
                "test_multivariate_normal_size_types": [
                    "self"
                ],
                "test_beta_small_parameters": [
                    "self"
                ],
                "test_choice_sum_of_probs_tolerance": [
                    "self"
                ],
                "test_shuffle_of_array_of_different_length_strings": [
                    "self"
                ],
                "test_shuffle_of_array_of_objects": [
                    "self"
                ],
                "test_permutation_subclass": [
                    "self"
                ],
                "test_gamma_0": [
                    "self"
                ]
            }
        },
        "numpy.random.tests.test_randomstate": {
            "int_func": [
                "request"
            ],
            "assert_mt19937_state_equal": [
                "a",
                "b"
            ],
            "test_integer_dtype": [
                "int_func"
            ],
            "test_integer_repeat": [
                "int_func"
            ],
            "TestSeed": {
                "test_scalar": [
                    "self"
                ],
                "test_array": [
                    "self"
                ],
                "test_invalid_scalar": [
                    "self"
                ],
                "test_invalid_array": [
                    "self"
                ],
                "test_invalid_array_shape": [
                    "self"
                ],
                "test_cannot_seed": [
                    "self"
                ],
                "test_invalid_initialization": [
                    "self"
                ]
            },
            "TestBinomial": {
                "test_n_zero": [
                    "self"
                ],
                "test_p_is_nan": [
                    "self"
                ]
            },
            "TestMultinomial": {
                "test_basic": [
                    "self"
                ],
                "test_zero_probability": [
                    "self"
                ],
                "test_int_negative_interval": [
                    "self"
                ],
                "test_size": [
                    "self"
                ],
                "test_invalid_prob": [
                    "self"
                ],
                "test_invalid_n": [
                    "self"
                ],
                "test_p_non_contiguous": [
                    "self"
                ]
            },
            "TestSetState": {
                "setup": [
                    "self"
                ],
                "test_basic": [
                    "self"
                ],
                "test_gaussian_reset": [
                    "self"
                ],
                "test_gaussian_reset_in_media_res": [
                    "self"
                ],
                "test_backwards_compatibility": [
                    "self"
                ],
                "test_negative_binomial": [
                    "self"
                ],
                "test_get_state_warning": [
                    "self"
                ],
                "test_invalid_legacy_state_setting": [
                    "self"
                ],
                "test_pickle": [
                    "self"
                ],
                "test_state_setting": [
                    "self"
                ],
                "test_repr": [
                    "self"
                ]
            },
            "TestRandint": {
                "test_unsupported_type": [
                    "self"
                ],
                "test_bounds_checking": [
                    "self"
                ],
                "test_rng_zero_and_extremes": [
                    "self"
                ],
                "test_full_range": [
                    "self"
                ],
                "test_in_bounds_fuzz": [
                    "self"
                ],
                "test_repeatability": [
                    "self"
                ],
                "test_int64_uint64_corner_case": [
                    "self"
                ],
                "test_respect_dtype_singleton": [
                    "self"
                ]
            },
            "TestRandomDist": {
                "setup": [
                    "self"
                ],
                "test_rand": [
                    "self"
                ],
                "test_rand_singleton": [
                    "self"
                ],
                "test_randn": [
                    "self"
                ],
                "test_randint": [
                    "self"
                ],
                "test_random_integers": [
                    "self"
                ],
                "test_tomaxint": [
                    "self"
                ],
                "test_random_integers_max_int": [
                    "self"
                ],
                "test_random_integers_deprecated": [
                    "self"
                ],
                "test_random_sample": [
                    "self"
                ],
                "test_choice_uniform_replace": [
                    "self"
                ],
                "test_choice_nonuniform_replace": [
                    "self"
                ],
                "test_choice_uniform_noreplace": [
                    "self"
                ],
                "test_choice_nonuniform_noreplace": [
                    "self"
                ],
                "test_choice_noninteger": [
                    "self"
                ],
                "test_choice_exceptions": [
                    "self"
                ],
                "test_choice_return_shape": [
                    "self"
                ],
                "test_choice_nan_probabilities": [
                    "self"
                ],
                "test_choice_p_non_contiguous": [
                    "self"
                ],
                "test_bytes": [
                    "self"
                ],
                "test_shuffle": [
                    "self"
                ],
                "test_shuffle_masked": [
                    "self"
                ],
                "test_permutation": [
                    "self"
                ],
                "test_beta": [
                    "self"
                ],
                "test_binomial": [
                    "self"
                ],
                "test_chisquare": [
                    "self"
                ],
                "test_dirichlet": [
                    "self"
                ],
                "test_dirichlet_size": [
                    "self"
                ],
                "test_dirichlet_bad_alpha": [
                    "self"
                ],
                "test_dirichlet_alpha_non_contiguous": [
                    "self"
                ],
                "test_exponential": [
                    "self"
                ],
                "test_exponential_0": [
                    "self"
                ],
                "test_f": [
                    "self"
                ],
                "test_gamma": [
                    "self"
                ],
                "test_gamma_0": [
                    "self"
                ],
                "test_geometric": [
                    "self"
                ],
                "test_geometric_exceptions": [
                    "self"
                ],
                "test_gumbel": [
                    "self"
                ],
                "test_gumbel_0": [
                    "self"
                ],
                "test_hypergeometric": [
                    "self"
                ],
                "test_laplace": [
                    "self"
                ],
                "test_laplace_0": [
                    "self"
                ],
                "test_logistic": [
                    "self"
                ],
                "test_lognormal": [
                    "self"
                ],
                "test_lognormal_0": [
                    "self"
                ],
                "test_logseries": [
                    "self"
                ],
                "test_logseries_exceptions": [
                    "self"
                ],
                "test_multinomial": [
                    "self"
                ],
                "test_multivariate_normal": [
                    "self"
                ],
                "test_negative_binomial": [
                    "self"
                ],
                "test_negative_binomial_exceptions": [
                    "self"
                ],
                "test_noncentral_chisquare": [
                    "self"
                ],
                "test_noncentral_f": [
                    "self"
                ],
                "test_noncentral_f_nan": [
                    "self"
                ],
                "test_normal": [
                    "self"
                ],
                "test_normal_0": [
                    "self"
                ],
                "test_pareto": [
                    "self"
                ],
                "test_poisson": [
                    "self"
                ],
                "test_poisson_exceptions": [
                    "self"
                ],
                "test_power": [
                    "self"
                ],
                "test_rayleigh": [
                    "self"
                ],
                "test_rayleigh_0": [
                    "self"
                ],
                "test_standard_cauchy": [
                    "self"
                ],
                "test_standard_exponential": [
                    "self"
                ],
                "test_standard_gamma": [
                    "self"
                ],
                "test_standard_gamma_0": [
                    "self"
                ],
                "test_standard_normal": [
                    "self"
                ],
                "test_randn_singleton": [
                    "self"
                ],
                "test_standard_t": [
                    "self"
                ],
                "test_triangular": [
                    "self"
                ],
                "test_uniform": [
                    "self"
                ],
                "test_uniform_range_bounds": [
                    "self"
                ],
                "test_scalar_exception_propagation": [
                    "self"
                ],
                "test_vonmises": [
                    "self"
                ],
                "test_vonmises_small": [
                    "self"
                ],
                "test_vonmises_nan": [
                    "self"
                ],
                "test_wald": [
                    "self"
                ],
                "test_weibull": [
                    "self"
                ],
                "test_weibull_0": [
                    "self"
                ],
                "test_zipf": [
                    "self"
                ]
            },
            "TestBroadcast": {
                "setup": [
                    "self"
                ],
                "set_seed": [
                    "self"
                ],
                "test_uniform": [
                    "self"
                ],
                "test_normal": [
                    "self"
                ],
                "test_beta": [
                    "self"
                ],
                "test_exponential": [
                    "self"
                ],
                "test_standard_gamma": [
                    "self"
                ],
                "test_gamma": [
                    "self"
                ],
                "test_f": [
                    "self"
                ],
                "test_noncentral_f": [
                    "self"
                ],
                "test_noncentral_f_small_df": [
                    "self"
                ],
                "test_chisquare": [
                    "self"
                ],
                "test_noncentral_chisquare": [
                    "self"
                ],
                "test_standard_t": [
                    "self"
                ],
                "test_vonmises": [
                    "self"
                ],
                "test_pareto": [
                    "self"
                ],
                "test_weibull": [
                    "self"
                ],
                "test_power": [
                    "self"
                ],
                "test_laplace": [
                    "self"
                ],
                "test_gumbel": [
                    "self"
                ],
                "test_logistic": [
                    "self"
                ],
                "test_lognormal": [
                    "self"
                ],
                "test_rayleigh": [
                    "self"
                ],
                "test_wald": [
                    "self"
                ],
                "test_triangular": [
                    "self"
                ],
                "test_binomial": [
                    "self"
                ],
                "test_negative_binomial": [
                    "self"
                ],
                "test_poisson": [
                    "self"
                ],
                "test_zipf": [
                    "self"
                ],
                "test_geometric": [
                    "self"
                ],
                "test_hypergeometric": [
                    "self"
                ],
                "test_logseries": [
                    "self"
                ]
            },
            "TestThread": {
                "setup": [
                    "self"
                ],
                "check_function": [
                    "self",
                    "function",
                    "sz"
                ],
                "test_normal": [
                    "self"
                ],
                "test_exp": [
                    "self"
                ],
                "test_multinomial": [
                    "self"
                ]
            },
            "TestSingleEltArrayInput": {
                "setup": [
                    "self"
                ],
                "test_one_arg_funcs": [
                    "self"
                ],
                "test_two_arg_funcs": [
                    "self"
                ],
                "test_three_arg_funcs": [
                    "self"
                ]
            }
        },
        "numpy.random.tests.data": {},
        "numpy.f2py.diagnose": {
            "run_command": [
                "cmd"
            ],
            "run": []
        },
        "numpy.f2py.cfuncs": {
            "buildcfuncs": [],
            "append_needs": [
                "need",
                "flag"
            ],
            "get_needs": []
        },
        "numpy.f2py": {
            "compile": [
                "source",
                "modulename",
                "extra_args",
                "verbose",
                "source_fn",
                "extension"
            ]
        },
        "numpy.f2py.crackfortran": {
            "reset_global_f2py_vars": [],
            "outmess": [
                "line",
                "flag"
            ],
            "rmbadname1": [
                "name"
            ],
            "rmbadname": [
                "names"
            ],
            "undo_rmbadname1": [
                "name"
            ],
            "undo_rmbadname": [
                "names"
            ],
            "getextension": [
                "name"
            ],
            "is_free_format": [
                "file"
            ],
            "readfortrancode": [
                "ffile",
                "dowithline",
                "istop"
            ],
            "split_by_unquoted": [
                "line",
                "characters"
            ],
            "_simplifyargs": [
                "argsline"
            ],
            "crackline": [
                "line",
                "reset"
            ],
            "markouterparen": [
                "line"
            ],
            "markoutercomma": [
                "line",
                "comma"
            ],
            "unmarkouterparen": [
                "line"
            ],
            "appenddecl": [
                "decl",
                "decl2",
                "force"
            ],
            "_is_intent_callback": [
                "vdecl"
            ],
            "_resolvenameargspattern": [
                "line"
            ],
            "analyzeline": [
                "m",
                "case",
                "line"
            ],
            "appendmultiline": [
                "group",
                "context_name",
                "ml"
            ],
            "cracktypespec0": [
                "typespec",
                "ll"
            ],
            "removespaces": [
                "expr"
            ],
            "markinnerspaces": [
                "line"
            ],
            "updatevars": [
                "typespec",
                "selector",
                "attrspec",
                "entitydecl"
            ],
            "cracktypespec": [
                "typespec",
                "selector"
            ],
            "setattrspec": [
                "decl",
                "attr",
                "force"
            ],
            "setkindselector": [
                "decl",
                "sel",
                "force"
            ],
            "setcharselector": [
                "decl",
                "sel",
                "force"
            ],
            "getblockname": [
                "block",
                "unknown"
            ],
            "setmesstext": [
                "block"
            ],
            "get_usedict": [
                "block"
            ],
            "get_useparameters": [
                "block",
                "param_map"
            ],
            "postcrack2": [
                "block",
                "tab",
                "param_map"
            ],
            "postcrack": [
                "block",
                "args",
                "tab"
            ],
            "sortvarnames": [
                "vars"
            ],
            "analyzecommon": [
                "block"
            ],
            "analyzebody": [
                "block",
                "args",
                "tab"
            ],
            "buildimplicitrules": [
                "block"
            ],
            "myeval": [
                "e",
                "g",
                "l"
            ],
            "getlincoef": [
                "e",
                "xset"
            ],
            "getarrlen": [
                "dl",
                "args",
                "star"
            ],
            "_get_depend_dict": [
                "name",
                "vars",
                "deps"
            ],
            "_calc_depend_dict": [
                "vars"
            ],
            "get_sorted_names": [
                "vars"
            ],
            "_kind_func": [
                "string"
            ],
            "_selected_int_kind_func": [
                "r"
            ],
            "_selected_real_kind_func": [
                "p",
                "r",
                "radix"
            ],
            "get_parameters": [
                "vars",
                "global_params"
            ],
            "_eval_length": [
                "length",
                "params"
            ],
            "_eval_scalar": [
                "value",
                "params"
            ],
            "analyzevars": [
                "block"
            ],
            "expr2name": [
                "a",
                "block",
                "args"
            ],
            "analyzeargs": [
                "block"
            ],
            "_ensure_exprdict": [
                "r"
            ],
            "determineexprtype": [
                "expr",
                "vars",
                "rules"
            ],
            "crack2fortrangen": [
                "block",
                "tab",
                "as_interface"
            ],
            "common2fortran": [
                "common",
                "tab"
            ],
            "use2fortran": [
                "use",
                "tab"
            ],
            "true_intent_list": [
                "var"
            ],
            "vars2fortran": [
                "block",
                "vars",
                "args",
                "tab",
                "as_interface"
            ],
            "crackfortran": [
                "files"
            ],
            "crack2fortran": [
                "block"
            ]
        },
        "numpy.f2py.info": {},
        "numpy.f2py.cb_rules": {
            "buildcallbacks": [
                "m"
            ],
            "buildcallback": [
                "rout",
                "um"
            ]
        },
        "numpy.f2py.capi_maps": {
            "load_f2cmap_file": [
                "f2cmap_file"
            ],
            "getctype": [
                "var"
            ],
            "getstrlength": [
                "var"
            ],
            "getarrdims": [
                "a",
                "var",
                "verbose"
            ],
            "getpydocsign": [
                "a",
                "var"
            ],
            "getarrdocsign": [
                "a",
                "var"
            ],
            "getinit": [
                "a",
                "var"
            ],
            "sign2map": [
                "a",
                "var"
            ],
            "routsign2map": [
                "rout"
            ],
            "modsign2map": [
                "m"
            ],
            "cb_sign2map": [
                "a",
                "var",
                "index"
            ],
            "cb_routsign2map": [
                "rout",
                "um"
            ],
            "common_sign2map": [
                "a",
                "var"
            ]
        },
        "numpy.f2py.f90mod_rules": {
            "findf90modules": [
                "m"
            ],
            "buildhooks": [
                "pymod"
            ]
        },
        "numpy.f2py.f2py_testing": {
            "cmdline": [],
            "run": [
                "runtest",
                "test_functions",
                "repeat"
            ]
        },
        "numpy.f2py.setup": {
            "configuration": [
                "parent_package",
                "top_path"
            ]
        },
        "numpy.f2py.f2py2e": {
            "scaninputline": [
                "inputline"
            ],
            "callcrackfortran": [
                "files",
                "options"
            ],
            "buildmodules": [
                "lst"
            ],
            "dict_append": [
                "d_out",
                "d_in"
            ],
            "run_main": [
                "comline_list"
            ],
            "filter_files": [
                "prefix",
                "suffix",
                "files",
                "remove_prefix"
            ],
            "get_prefix": [
                "module"
            ],
            "run_compile": [],
            "main": []
        },
        "numpy.f2py.use_rules": {
            "buildusevars": [
                "m",
                "r"
            ],
            "buildusevar": [
                "name",
                "realname",
                "vars",
                "usemodulename"
            ]
        },
        "numpy.f2py.func2subr": {
            "var2fixfortran": [
                "vars",
                "a",
                "fa",
                "f90mode"
            ],
            "createfuncwrapper": [
                "rout",
                "signature"
            ],
            "createsubrwrapper": [
                "rout",
                "signature"
            ],
            "assubr": [
                "rout"
            ]
        },
        "numpy.f2py.auxfuncs": {
            "outmess": [
                "t"
            ],
            "debugcapi": [
                "var"
            ],
            "_isstring": [
                "var"
            ],
            "isstring": [
                "var"
            ],
            "ischaracter": [
                "var"
            ],
            "isstringarray": [
                "var"
            ],
            "isarrayofstrings": [
                "var"
            ],
            "isarray": [
                "var"
            ],
            "isscalar": [
                "var"
            ],
            "iscomplex": [
                "var"
            ],
            "islogical": [
                "var"
            ],
            "isinteger": [
                "var"
            ],
            "isreal": [
                "var"
            ],
            "get_kind": [
                "var"
            ],
            "islong_long": [
                "var"
            ],
            "isunsigned_char": [
                "var"
            ],
            "isunsigned_short": [
                "var"
            ],
            "isunsigned": [
                "var"
            ],
            "isunsigned_long_long": [
                "var"
            ],
            "isdouble": [
                "var"
            ],
            "islong_double": [
                "var"
            ],
            "islong_complex": [
                "var"
            ],
            "iscomplexarray": [
                "var"
            ],
            "isint1array": [
                "var"
            ],
            "isunsigned_chararray": [
                "var"
            ],
            "isunsigned_shortarray": [
                "var"
            ],
            "isunsignedarray": [
                "var"
            ],
            "isunsigned_long_longarray": [
                "var"
            ],
            "issigned_chararray": [
                "var"
            ],
            "issigned_shortarray": [
                "var"
            ],
            "issigned_array": [
                "var"
            ],
            "issigned_long_longarray": [
                "var"
            ],
            "isallocatable": [
                "var"
            ],
            "ismutable": [
                "var"
            ],
            "ismoduleroutine": [
                "rout"
            ],
            "ismodule": [
                "rout"
            ],
            "isfunction": [
                "rout"
            ],
            "isfunction_wrap": [
                "rout"
            ],
            "issubroutine": [
                "rout"
            ],
            "issubroutine_wrap": [
                "rout"
            ],
            "hasassumedshape": [
                "rout"
            ],
            "isroutine": [
                "rout"
            ],
            "islogicalfunction": [
                "rout"
            ],
            "islong_longfunction": [
                "rout"
            ],
            "islong_doublefunction": [
                "rout"
            ],
            "iscomplexfunction": [
                "rout"
            ],
            "iscomplexfunction_warn": [
                "rout"
            ],
            "isstringfunction": [
                "rout"
            ],
            "hasexternals": [
                "rout"
            ],
            "isthreadsafe": [
                "rout"
            ],
            "hasvariables": [
                "rout"
            ],
            "isoptional": [
                "var"
            ],
            "isexternal": [
                "var"
            ],
            "isrequired": [
                "var"
            ],
            "isintent_in": [
                "var"
            ],
            "isintent_inout": [
                "var"
            ],
            "isintent_out": [
                "var"
            ],
            "isintent_hide": [
                "var"
            ],
            "isintent_nothide": [
                "var"
            ],
            "isintent_c": [
                "var"
            ],
            "isintent_cache": [
                "var"
            ],
            "isintent_copy": [
                "var"
            ],
            "isintent_overwrite": [
                "var"
            ],
            "isintent_callback": [
                "var"
            ],
            "isintent_inplace": [
                "var"
            ],
            "isintent_aux": [
                "var"
            ],
            "isintent_aligned4": [
                "var"
            ],
            "isintent_aligned8": [
                "var"
            ],
            "isintent_aligned16": [
                "var"
            ],
            "isprivate": [
                "var"
            ],
            "hasinitvalue": [
                "var"
            ],
            "hasinitvalueasstring": [
                "var"
            ],
            "hasnote": [
                "var"
            ],
            "hasresultnote": [
                "rout"
            ],
            "hascommon": [
                "rout"
            ],
            "containscommon": [
                "rout"
            ],
            "containsmodule": [
                "block"
            ],
            "hasbody": [
                "rout"
            ],
            "hascallstatement": [
                "rout"
            ],
            "istrue": [
                "var"
            ],
            "isfalse": [
                "var"
            ],
            "l_and": [],
            "l_or": [],
            "l_not": [
                "f"
            ],
            "isdummyroutine": [
                "rout"
            ],
            "getfortranname": [
                "rout"
            ],
            "getmultilineblock": [
                "rout",
                "blockname",
                "comment",
                "counter"
            ],
            "getcallstatement": [
                "rout"
            ],
            "getcallprotoargument": [
                "rout",
                "cb_map"
            ],
            "getusercode": [
                "rout"
            ],
            "getusercode1": [
                "rout"
            ],
            "getpymethoddef": [
                "rout"
            ],
            "getargs": [
                "rout"
            ],
            "getargs2": [
                "rout"
            ],
            "getrestdoc": [
                "rout"
            ],
            "gentitle": [
                "name"
            ],
            "flatlist": [
                "l"
            ],
            "stripcomma": [
                "s"
            ],
            "replace": [
                "str",
                "d",
                "defaultsep"
            ],
            "dictappend": [
                "rd",
                "ar"
            ],
            "applyrules": [
                "rules",
                "d",
                "var"
            ],
            "F2PYError": {},
            "throw_error": {
                "__init__": [
                    "self",
                    "mess"
                ],
                "__call__": [
                    "self",
                    "var"
                ]
            }
        },
        "numpy.f2py.__main__": {},
        "numpy.f2py.common_rules": {
            "findcommonblocks": [
                "block",
                "top"
            ],
            "buildhooks": [
                "m"
            ]
        },
        "numpy.f2py.__version__": {},
        "numpy.f2py.rules": {
            "buildmodule": [
                "m",
                "um"
            ],
            "buildapi": [
                "rout"
            ]
        },
        "numpy.f2py.tests.test_mixed": {
            "_path": [],
            "TestMixed": {
                "test_all": [
                    "self"
                ],
                "test_docstring": [
                    "self"
                ]
            }
        },
        "numpy.f2py.tests.test_string": {
            "_path": [],
            "TestString": {
                "test_char": [
                    "self"
                ]
            }
        },
        "numpy.f2py.tests.test_return_integer": {
            "TestReturnInteger": {
                "check_function": [
                    "self",
                    "t"
                ]
            },
            "TestF77ReturnInteger": {
                "test_all": [
                    "self",
                    "name"
                ]
            },
            "TestF90ReturnInteger": {
                "test_all": [
                    "self",
                    "name"
                ]
            }
        },
        "numpy.f2py.tests.test_regression": {
            "_path": [],
            "TestIntentInOut": {
                "test_inout": [
                    "self"
                ]
            }
        },
        "numpy.f2py.tests.test_size": {
            "_path": [],
            "TestSizeSumExample": {
                "test_all": [
                    "self"
                ],
                "test_transpose": [
                    "self"
                ],
                "test_flatten": [
                    "self"
                ]
            }
        },
        "numpy.f2py.tests": {},
        "numpy.f2py.tests.test_assumed_shape": {
            "_path": [],
            "TestAssumedShapeSumExample": {
                "test_all": [
                    "self"
                ]
            },
            "TestF2cmapOption": {
                "setup": [
                    "self"
                ],
                "teardown": [
                    "self"
                ]
            }
        },
        "numpy.f2py.tests.util": {
            "_cleanup": [],
            "get_module_dir": [],
            "get_temp_module_name": [],
            "_memoize": [
                "func"
            ],
            "build_module": [
                "source_files",
                "options",
                "skip",
                "only",
                "module_name"
            ],
            "build_code": [
                "source_code",
                "options",
                "skip",
                "only",
                "suffix",
                "module_name"
            ],
            "_get_compiler_status": [],
            "has_c_compiler": [],
            "has_f77_compiler": [],
            "has_f90_compiler": [],
            "build_module_distutils": [
                "source_files",
                "config_code",
                "module_name"
            ],
            "F2PyTest": {
                "setup": [
                    "self"
                ]
            }
        },
        "numpy.f2py.tests.test_array_from_pyobj": {
            "setup_module": [],
            "flags_info": [
                "arr"
            ],
            "flags2names": [
                "flags"
            ],
            "Intent": {
                "__init__": [
                    "self",
                    "intent_list"
                ],
                "__getattr__": [
                    "self",
                    "name"
                ],
                "__str__": [
                    "self"
                ],
                "__repr__": [
                    "self"
                ],
                "is_intent": [
                    "self"
                ],
                "is_intent_exact": [
                    "self"
                ]
            },
            "Type": {
                "__new__": [
                    "cls",
                    "name"
                ],
                "_init": [
                    "self",
                    "name"
                ],
                "cast_types": [
                    "self"
                ],
                "all_types": [
                    "self"
                ],
                "smaller_types": [
                    "self"
                ],
                "equal_types": [
                    "self"
                ],
                "larger_types": [
                    "self"
                ]
            },
            "Array": {
                "__init__": [
                    "self",
                    "typ",
                    "dims",
                    "intent",
                    "obj"
                ],
                "arr_equal": [
                    "self",
                    "arr1",
                    "arr2"
                ],
                "__str__": [
                    "self"
                ],
                "has_shared_memory": [
                    "self"
                ]
            },
            "TestIntent": {
                "test_in_out": [
                    "self"
                ]
            },
            "TestSharedMemory": {
                "setup_type": [
                    "self",
                    "request"
                ],
                "test_in_from_2seq": [
                    "self"
                ],
                "test_in_from_2casttype": [
                    "self"
                ],
                "test_inout_2seq": [
                    "self"
                ],
                "test_f_inout_23seq": [
                    "self"
                ],
                "test_c_inout_23seq": [
                    "self"
                ],
                "test_in_copy_from_2casttype": [
                    "self"
                ],
                "test_c_in_from_23seq": [
                    "self"
                ],
                "test_in_from_23casttype": [
                    "self"
                ],
                "test_f_in_from_23casttype": [
                    "self"
                ],
                "test_c_in_from_23casttype": [
                    "self"
                ],
                "test_f_copy_in_from_23casttype": [
                    "self"
                ],
                "test_c_copy_in_from_23casttype": [
                    "self"
                ],
                "test_in_cache_from_2casttype": [
                    "self"
                ],
                "test_in_cache_from_2casttype_failure": [
                    "self"
                ],
                "test_cache_hidden": [
                    "self"
                ],
                "test_hidden": [
                    "self"
                ],
                "test_optional_none": [
                    "self"
                ],
                "test_optional_from_2seq": [
                    "self"
                ],
                "test_optional_from_23seq": [
                    "self"
                ],
                "test_inplace": [
                    "self"
                ],
                "test_inplace_from_casttype": [
                    "self"
                ]
            }
        },
        "numpy.f2py.tests.test_callback": {
            "TestF77Callback": {
                "test_all": [
                    "self",
                    "name"
                ],
                "test_docstring": [
                    "self"
                ],
                "check_function": [
                    "self",
                    "name"
                ],
                "test_string_callback": [
                    "self"
                ],
                "test_string_callback_array": [
                    "self"
                ]
            }
        },
        "numpy.f2py.tests.test_block_docstring": {
            "TestBlockDocString": {
                "test_block_docstring": [
                    "self"
                ]
            }
        },
        "numpy.f2py.tests.test_compile_function": {
            "setup_module": [],
            "test_f2py_init_compile": [
                "extra_args"
            ],
            "test_f2py_init_compile_failure": [],
            "test_f2py_init_compile_bad_cmd": [],
            "test_compile_from_strings": [
                "tmpdir",
                "fsource"
            ]
        },
        "numpy.f2py.tests.test_return_logical": {
            "TestReturnLogical": {
                "check_function": [
                    "self",
                    "t"
                ]
            },
            "TestF77ReturnLogical": {
                "test_all": [
                    "self",
                    "name"
                ]
            },
            "TestF90ReturnLogical": {
                "test_all": [
                    "self",
                    "name"
                ]
            }
        },
        "numpy.f2py.tests.test_parameter": {
            "_path": [],
            "TestParameters": {
                "test_constant_real_single": [
                    "self"
                ],
                "test_constant_real_double": [
                    "self"
                ],
                "test_constant_compound_int": [
                    "self"
                ],
                "test_constant_non_compound_int": [
                    "self"
                ],
                "test_constant_integer_int": [
                    "self"
                ],
                "test_constant_integer_long": [
                    "self"
                ],
                "test_constant_both": [
                    "self"
                ],
                "test_constant_no": [
                    "self"
                ],
                "test_constant_sum": [
                    "self"
                ]
            }
        },
        "numpy.f2py.tests.test_semicolon_split": {
            "TestMultiline": {
                "test_multiline": [
                    "self"
                ]
            },
            "TestCallstatement": {
                "test_callstatement": [
                    "self"
                ]
            }
        },
        "numpy.f2py.tests.test_return_real": {
            "TestReturnReal": {
                "check_function": [
                    "self",
                    "t"
                ]
            },
            "TestCReturnReal": {
                "test_all": [
                    "self",
                    "name"
                ]
            },
            "TestF77ReturnReal": {
                "test_all": [
                    "self",
                    "name"
                ]
            },
            "TestF90ReturnReal": {
                "test_all": [
                    "self",
                    "name"
                ]
            }
        },
        "numpy.f2py.tests.test_kind": {
            "_path": [],
            "TestKind": {
                "test_all": [
                    "self"
                ]
            }
        },
        "numpy.f2py.tests.test_common": {
            "_path": [],
            "TestCommonBlock": {
                "test_common_block": [
                    "self"
                ]
            }
        },
        "numpy.f2py.tests.test_quoted_character": {
            "TestQuotedCharacter": {
                "test_quoted_character": [
                    "self"
                ]
            }
        },
        "numpy.f2py.tests.test_return_complex": {
            "TestReturnComplex": {
                "check_function": [
                    "self",
                    "t"
                ]
            },
            "TestF77ReturnComplex": {
                "test_all": [
                    "self",
                    "name"
                ]
            },
            "TestF90ReturnComplex": {
                "test_all": [
                    "self",
                    "name"
                ]
            }
        },
        "numpy.f2py.tests.test_return_character": {
            "TestReturnCharacter": {
                "check_function": [
                    "self",
                    "t"
                ]
            },
            "TestF77ReturnCharacter": {
                "test_all": [
                    "self",
                    "name"
                ]
            },
            "TestF90ReturnCharacter": {
                "test_all": [
                    "self",
                    "name"
                ]
            }
        },
        "numpy.linalg": {},
        "numpy.linalg.info": {},
        "numpy.linalg.setup": {
            "configuration": [
                "parent_package",
                "top_path"
            ]
        },
        "numpy.linalg.linalg": {
            "_determine_error_states": [],
            "_raise_linalgerror_singular": [
                "err",
                "flag"
            ],
            "_raise_linalgerror_nonposdef": [
                "err",
                "flag"
            ],
            "_raise_linalgerror_eigenvalues_nonconvergence": [
                "err",
                "flag"
            ],
            "_raise_linalgerror_svd_nonconvergence": [
                "err",
                "flag"
            ],
            "_raise_linalgerror_lstsq": [
                "err",
                "flag"
            ],
            "get_linalg_error_extobj": [
                "callback"
            ],
            "_makearray": [
                "a"
            ],
            "isComplexType": [
                "t"
            ],
            "_realType": [
                "t",
                "default"
            ],
            "_complexType": [
                "t",
                "default"
            ],
            "_linalgRealType": [
                "t"
            ],
            "_commonType": [],
            "_to_native_byte_order": [],
            "_fastCopyAndTranspose": [
                "type"
            ],
            "_assert_2d": [],
            "_assert_stacked_2d": [],
            "_assert_stacked_square": [],
            "_assert_finite": [],
            "_is_empty_2d": [
                "arr"
            ],
            "transpose": [
                "a"
            ],
            "_tensorsolve_dispatcher": [
                "a",
                "b",
                "axes"
            ],
            "tensorsolve": [
                "a",
                "b",
                "axes"
            ],
            "_solve_dispatcher": [
                "a",
                "b"
            ],
            "solve": [
                "a",
                "b"
            ],
            "_tensorinv_dispatcher": [
                "a",
                "ind"
            ],
            "tensorinv": [
                "a",
                "ind"
            ],
            "_unary_dispatcher": [
                "a"
            ],
            "inv": [
                "a"
            ],
            "_matrix_power_dispatcher": [
                "a",
                "n"
            ],
            "matrix_power": [
                "a",
                "n"
            ],
            "cholesky": [
                "a"
            ],
            "_qr_dispatcher": [
                "a",
                "mode"
            ],
            "qr": [
                "a",
                "mode"
            ],
            "eigvals": [
                "a"
            ],
            "_eigvalsh_dispatcher": [
                "a",
                "UPLO"
            ],
            "eigvalsh": [
                "a",
                "UPLO"
            ],
            "_convertarray": [
                "a"
            ],
            "eig": [
                "a"
            ],
            "eigh": [
                "a",
                "UPLO"
            ],
            "_svd_dispatcher": [
                "a",
                "full_matrices",
                "compute_uv",
                "hermitian"
            ],
            "svd": [
                "a",
                "full_matrices",
                "compute_uv",
                "hermitian"
            ],
            "_cond_dispatcher": [
                "x",
                "p"
            ],
            "cond": [
                "x",
                "p"
            ],
            "_matrix_rank_dispatcher": [
                "M",
                "tol",
                "hermitian"
            ],
            "matrix_rank": [
                "M",
                "tol",
                "hermitian"
            ],
            "_pinv_dispatcher": [
                "a",
                "rcond",
                "hermitian"
            ],
            "pinv": [
                "a",
                "rcond",
                "hermitian"
            ],
            "slogdet": [
                "a"
            ],
            "det": [
                "a"
            ],
            "_lstsq_dispatcher": [
                "a",
                "b",
                "rcond"
            ],
            "lstsq": [
                "a",
                "b",
                "rcond"
            ],
            "_multi_svd_norm": [
                "x",
                "row_axis",
                "col_axis",
                "op"
            ],
            "_norm_dispatcher": [
                "x",
                "ord",
                "axis",
                "keepdims"
            ],
            "norm": [
                "x",
                "ord",
                "axis",
                "keepdims"
            ],
            "_multidot_dispatcher": [
                "arrays"
            ],
            "multi_dot": [
                "arrays"
            ],
            "_multi_dot_three": [
                "A",
                "B",
                "C"
            ],
            "_multi_dot_matrix_chain_order": [
                "arrays",
                "return_costs"
            ],
            "_multi_dot": [
                "arrays",
                "order",
                "i",
                "j"
            ],
            "LinAlgError": {}
        },
        "numpy.linalg.tests.test_linalg": {
            "consistent_subclass": [
                "out",
                "in_"
            ],
            "assert_almost_equal": [
                "a",
                "b",
                "single_decimal",
                "double_decimal"
            ],
            "get_real_dtype": [
                "dtype"
            ],
            "get_complex_dtype": [
                "dtype"
            ],
            "get_rtol": [
                "dtype"
            ],
            "apply_tag": [
                "tag",
                "cases"
            ],
            "_make_generalized_cases": [],
            "_stride_comb_iter": [
                "x"
            ],
            "_make_strided_cases": [],
            "dot_generalized": [
                "a",
                "b"
            ],
            "identity_like_generalized": [
                "a"
            ],
            "test_reduced_rank": [],
            "test_byteorder_check": [],
            "test_generalized_raise_multiloop": [],
            "test_xerbla_override": [],
            "test_sdot_bug_8577": [],
            "test_unsupported_commontype": [],
            "test_blas64_dot": [],
            "LinalgCase": {
                "__init__": [
                    "self",
                    "name",
                    "a",
                    "b",
                    "tags"
                ],
                "check": [
                    "self",
                    "do"
                ],
                "__repr__": [
                    "self"
                ]
            },
            "LinalgTestCase": {
                "check_cases": [
                    "self",
                    "require",
                    "exclude"
                ]
            },
            "LinalgSquareTestCase": {
                "test_sq_cases": [
                    "self"
                ],
                "test_empty_sq_cases": [
                    "self"
                ]
            },
            "LinalgNonsquareTestCase": {
                "test_nonsq_cases": [
                    "self"
                ],
                "test_empty_nonsq_cases": [
                    "self"
                ]
            },
            "HermitianTestCase": {
                "test_herm_cases": [
                    "self"
                ],
                "test_empty_herm_cases": [
                    "self"
                ]
            },
            "LinalgGeneralizedSquareTestCase": {
                "test_generalized_sq_cases": [
                    "self"
                ],
                "test_generalized_empty_sq_cases": [
                    "self"
                ]
            },
            "LinalgGeneralizedNonsquareTestCase": {
                "test_generalized_nonsq_cases": [
                    "self"
                ],
                "test_generalized_empty_nonsq_cases": [
                    "self"
                ]
            },
            "HermitianGeneralizedTestCase": {
                "test_generalized_herm_cases": [
                    "self"
                ],
                "test_generalized_empty_herm_cases": [
                    "self"
                ]
            },
            "SolveCases": {
                "do": [
                    "self",
                    "a",
                    "b",
                    "tags"
                ]
            },
            "TestSolve": {
                "test_types": [
                    "self",
                    "dtype"
                ],
                "test_0_size": [
                    "self"
                ],
                "test_0_size_k": [
                    "self"
                ]
            },
            "InvCases": {
                "do": [
                    "self",
                    "a",
                    "b",
                    "tags"
                ]
            },
            "TestInv": {
                "test_types": [
                    "self",
                    "dtype"
                ],
                "test_0_size": [
                    "self"
                ]
            },
            "EigvalsCases": {
                "do": [
                    "self",
                    "a",
                    "b",
                    "tags"
                ]
            },
            "TestEigvals": {
                "test_types": [
                    "self",
                    "dtype"
                ],
                "test_0_size": [
                    "self"
                ]
            },
            "EigCases": {
                "do": [
                    "self",
                    "a",
                    "b",
                    "tags"
                ]
            },
            "TestEig": {
                "test_types": [
                    "self",
                    "dtype"
                ],
                "test_0_size": [
                    "self"
                ]
            },
            "SVDBaseTests": {
                "test_types": [
                    "self",
                    "dtype"
                ]
            },
            "SVDCases": {
                "do": [
                    "self",
                    "a",
                    "b",
                    "tags"
                ]
            },
            "TestSVD": {
                "test_empty_identity": [
                    "self"
                ]
            },
            "SVDHermitianCases": {
                "do": [
                    "self",
                    "a",
                    "b",
                    "tags"
                ]
            },
            "TestSVDHermitian": {},
            "CondCases": {
                "do": [
                    "self",
                    "a",
                    "b",
                    "tags"
                ]
            },
            "TestCond": {
                "test_basic_nonsvd": [
                    "self"
                ],
                "test_singular": [
                    "self"
                ],
                "test_nan": [
                    "self"
                ],
                "test_stacked_singular": [
                    "self"
                ]
            },
            "PinvCases": {
                "do": [
                    "self",
                    "a",
                    "b",
                    "tags"
                ]
            },
            "TestPinv": {},
            "PinvHermitianCases": {
                "do": [
                    "self",
                    "a",
                    "b",
                    "tags"
                ]
            },
            "TestPinvHermitian": {},
            "DetCases": {
                "do": [
                    "self",
                    "a",
                    "b",
                    "tags"
                ]
            },
            "TestDet": {
                "test_zero": [
                    "self"
                ],
                "test_types": [
                    "self",
                    "dtype"
                ],
                "test_0_size": [
                    "self"
                ]
            },
            "LstsqCases": {
                "do": [
                    "self",
                    "a",
                    "b",
                    "tags"
                ]
            },
            "TestLstsq": {
                "test_future_rcond": [
                    "self"
                ],
                "test_empty_a_b": [
                    "self",
                    "m",
                    "n",
                    "n_rhs"
                ],
                "test_incompatible_dims": [
                    "self"
                ]
            },
            "TestMatrixPower": {
                "test_large_power": [
                    "self",
                    "dt"
                ],
                "test_power_is_zero": [
                    "self",
                    "dt"
                ],
                "test_power_is_one": [
                    "self",
                    "dt"
                ],
                "test_power_is_two": [
                    "self",
                    "dt"
                ],
                "test_power_is_minus_one": [
                    "self",
                    "dt"
                ],
                "test_exceptions_bad_power": [
                    "self",
                    "dt"
                ],
                "test_exceptions_non_square": [
                    "self",
                    "dt"
                ],
                "test_exceptions_not_invertible": [
                    "self",
                    "dt"
                ]
            },
            "TestEigvalshCases": {
                "do": [
                    "self",
                    "a",
                    "b",
                    "tags"
                ]
            },
            "TestEigvalsh": {
                "test_types": [
                    "self",
                    "dtype"
                ],
                "test_invalid": [
                    "self"
                ],
                "test_UPLO": [
                    "self"
                ],
                "test_0_size": [
                    "self"
                ]
            },
            "TestEighCases": {
                "do": [
                    "self",
                    "a",
                    "b",
                    "tags"
                ]
            },
            "TestEigh": {
                "test_types": [
                    "self",
                    "dtype"
                ],
                "test_invalid": [
                    "self"
                ],
                "test_UPLO": [
                    "self"
                ],
                "test_0_size": [
                    "self"
                ]
            },
            "_TestNormBase": {},
            "_TestNormGeneral": {
                "test_empty": [
                    "self"
                ],
                "test_vector_return_type": [
                    "self"
                ],
                "test_vector": [
                    "self"
                ],
                "test_axis": [
                    "self"
                ],
                "test_keepdims": [
                    "self"
                ]
            },
            "_TestNorm2D": {
                "test_matrix_empty": [
                    "self"
                ],
                "test_matrix_return_type": [
                    "self"
                ],
                "test_matrix_2x2": [
                    "self"
                ],
                "test_matrix_3x3": [
                    "self"
                ],
                "test_bad_args": [
                    "self"
                ]
            },
            "_TestNorm": {},
            "TestNorm_NonSystematic": {
                "test_longdouble_norm": [
                    "self"
                ],
                "test_intmin": [
                    "self"
                ],
                "test_complex_high_ord": [
                    "self"
                ]
            },
            "_TestNormDoubleBase": {},
            "_TestNormSingleBase": {},
            "_TestNormInt64Base": {},
            "TestNormDouble": {},
            "TestNormSingle": {},
            "TestNormInt64": {},
            "TestMatrixRank": {
                "test_matrix_rank": [
                    "self"
                ],
                "test_symmetric_rank": [
                    "self"
                ]
            },
            "TestQR": {
                "check_qr": [
                    "self",
                    "a"
                ],
                "test_qr_empty": [
                    "self",
                    "m",
                    "n"
                ],
                "test_mode_raw": [
                    "self"
                ],
                "test_mode_all_but_economic": [
                    "self"
                ]
            },
            "TestCholesky": {
                "test_basic_property": [
                    "self"
                ],
                "test_0_size": [
                    "self"
                ]
            },
            "TestMultiDot": {
                "test_basic_function_with_three_arguments": [
                    "self"
                ],
                "test_basic_function_with_two_arguments": [
                    "self"
                ],
                "test_basic_function_with_dynamic_programing_optimization": [
                    "self"
                ],
                "test_vector_as_first_argument": [
                    "self"
                ],
                "test_vector_as_last_argument": [
                    "self"
                ],
                "test_vector_as_first_and_last_argument": [
                    "self"
                ],
                "test_dynamic_programming_logic": [
                    "self"
                ],
                "test_too_few_input_arrays": [
                    "self"
                ]
            },
            "TestTensorinv": {
                "test_non_square_handling": [
                    "self",
                    "arr",
                    "ind"
                ],
                "test_tensorinv_shape": [
                    "self",
                    "shape",
                    "ind"
                ],
                "test_tensorinv_ind_limit": [
                    "self",
                    "ind"
                ],
                "test_tensorinv_result": [
                    "self"
                ]
            }
        },
        "numpy.linalg.tests.test_regression": {
            "TestRegression": {
                "test_eig_build": [
                    "self"
                ],
                "test_eigh_build": [
                    "self"
                ],
                "test_svd_build": [
                    "self"
                ],
                "test_norm_vector_badarg": [
                    "self"
                ],
                "test_lapack_endian": [
                    "self"
                ],
                "test_large_svd_32bit": [
                    "self"
                ],
                "test_svd_no_uv": [
                    "self"
                ],
                "test_norm_object_array": [
                    "self"
                ],
                "test_lstsq_complex_larger_rhs": [
                    "self"
                ]
            }
        },
        "numpy.linalg.tests.test_build": {
            "FindDependenciesLdd": {
                "__init__": [
                    "self"
                ],
                "get_dependencies": [
                    "self",
                    "lfile"
                ],
                "grep_dependencies": [
                    "self",
                    "lfile",
                    "deps"
                ]
            },
            "TestF77Mismatch": {
                "test_lapack": [
                    "self"
                ]
            }
        },
        "numpy.linalg.tests": {},
        "numpy.linalg.tests.test_deprecations": {
            "test_qr_mode_full_future_warning": []
        },
        "numpy._build_utils.common": {
            "pyod": [
                "filename"
            ],
            "long_double_representation": [
                "lines"
            ]
        },
        "numpy._build_utils": {},
        "numpy._build_utils.apple_accelerate": {
            "uses_accelerate_framework": [
                "info"
            ],
            "get_sgemv_fix": []
        },
        "numpy.lib.twodim_base": {
            "_min_int": [
                "low",
                "high"
            ],
            "_flip_dispatcher": [
                "m"
            ],
            "fliplr": [
                "m"
            ],
            "flipud": [
                "m"
            ],
            "eye": [
                "N",
                "M",
                "k",
                "dtype",
                "order"
            ],
            "_diag_dispatcher": [
                "v",
                "k"
            ],
            "diag": [
                "v",
                "k"
            ],
            "diagflat": [
                "v",
                "k"
            ],
            "tri": [
                "N",
                "M",
                "k",
                "dtype"
            ],
            "_trilu_dispatcher": [
                "m",
                "k"
            ],
            "tril": [
                "m",
                "k"
            ],
            "triu": [
                "m",
                "k"
            ],
            "_vander_dispatcher": [
                "x",
                "N",
                "increasing"
            ],
            "vander": [
                "x",
                "N",
                "increasing"
            ],
            "_histogram2d_dispatcher": [
                "x",
                "y",
                "bins",
                "range",
                "normed",
                "weights",
                "density"
            ],
            "histogram2d": [
                "x",
                "y",
                "bins",
                "range",
                "normed",
                "weights",
                "density"
            ],
            "mask_indices": [
                "n",
                "mask_func",
                "k"
            ],
            "tril_indices": [
                "n",
                "k",
                "m"
            ],
            "_trilu_indices_form_dispatcher": [
                "arr",
                "k"
            ],
            "tril_indices_from": [
                "arr",
                "k"
            ],
            "triu_indices": [
                "n",
                "k",
                "m"
            ],
            "triu_indices_from": [
                "arr",
                "k"
            ]
        },
        "numpy.lib.arraysetops": {
            "_ediff1d_dispatcher": [
                "ary",
                "to_end",
                "to_begin"
            ],
            "ediff1d": [
                "ary",
                "to_end",
                "to_begin"
            ],
            "_unpack_tuple": [
                "x"
            ],
            "_unique_dispatcher": [
                "ar",
                "return_index",
                "return_inverse",
                "return_counts",
                "axis"
            ],
            "unique": [
                "ar",
                "return_index",
                "return_inverse",
                "return_counts",
                "axis"
            ],
            "_unique1d": [
                "ar",
                "return_index",
                "return_inverse",
                "return_counts"
            ],
            "_intersect1d_dispatcher": [
                "ar1",
                "ar2",
                "assume_unique",
                "return_indices"
            ],
            "intersect1d": [
                "ar1",
                "ar2",
                "assume_unique",
                "return_indices"
            ],
            "_setxor1d_dispatcher": [
                "ar1",
                "ar2",
                "assume_unique"
            ],
            "setxor1d": [
                "ar1",
                "ar2",
                "assume_unique"
            ],
            "_in1d_dispatcher": [
                "ar1",
                "ar2",
                "assume_unique",
                "invert"
            ],
            "in1d": [
                "ar1",
                "ar2",
                "assume_unique",
                "invert"
            ],
            "_isin_dispatcher": [
                "element",
                "test_elements",
                "assume_unique",
                "invert"
            ],
            "isin": [
                "element",
                "test_elements",
                "assume_unique",
                "invert"
            ],
            "_union1d_dispatcher": [
                "ar1",
                "ar2"
            ],
            "union1d": [
                "ar1",
                "ar2"
            ],
            "_setdiff1d_dispatcher": [
                "ar1",
                "ar2",
                "assume_unique"
            ],
            "setdiff1d": [
                "ar1",
                "ar2",
                "assume_unique"
            ]
        },
        "numpy.lib.stride_tricks": {
            "_maybe_view_as_subclass": [
                "original_array",
                "new_array"
            ],
            "as_strided": [
                "x",
                "shape",
                "strides",
                "subok",
                "writeable"
            ],
            "_broadcast_to": [
                "array",
                "shape",
                "subok",
                "readonly"
            ],
            "_broadcast_to_dispatcher": [
                "array",
                "shape",
                "subok"
            ],
            "broadcast_to": [
                "array",
                "shape",
                "subok"
            ],
            "_broadcast_shape": [],
            "_broadcast_arrays_dispatcher": [],
            "broadcast_arrays": [],
            "DummyArray": {
                "__init__": [
                    "self",
                    "interface",
                    "base"
                ]
            }
        },
        "numpy.lib": {},
        "numpy.lib.mixins": {
            "_disables_array_ufunc": [
                "obj"
            ],
            "_binary_method": [
                "ufunc",
                "name"
            ],
            "_reflected_binary_method": [
                "ufunc",
                "name"
            ],
            "_inplace_binary_method": [
                "ufunc",
                "name"
            ],
            "_numeric_methods": [
                "ufunc",
                "name"
            ],
            "_unary_method": [
                "ufunc",
                "name"
            ],
            "NDArrayOperatorsMixin": {}
        },
        "numpy.lib.info": {},
        "numpy.lib.arrayterator": {
            "Arrayterator": {
                "__init__": [
                    "self",
                    "var",
                    "buf_size"
                ],
                "__getattr__": [
                    "self",
                    "attr"
                ],
                "__getitem__": [
                    "self",
                    "index"
                ],
                "__array__": [
                    "self"
                ],
                "flat": [
                    "self"
                ],
                "shape": [
                    "self"
                ],
                "__iter__": [
                    "self"
                ]
            }
        },
        "numpy.lib.polynomial": {
            "_poly_dispatcher": [
                "seq_of_zeros"
            ],
            "poly": [
                "seq_of_zeros"
            ],
            "_roots_dispatcher": [
                "p"
            ],
            "roots": [
                "p"
            ],
            "_polyint_dispatcher": [
                "p",
                "m",
                "k"
            ],
            "polyint": [
                "p",
                "m",
                "k"
            ],
            "_polyder_dispatcher": [
                "p",
                "m"
            ],
            "polyder": [
                "p",
                "m"
            ],
            "_polyfit_dispatcher": [
                "x",
                "y",
                "deg",
                "rcond",
                "full",
                "w",
                "cov"
            ],
            "polyfit": [
                "x",
                "y",
                "deg",
                "rcond",
                "full",
                "w",
                "cov"
            ],
            "_polyval_dispatcher": [
                "p",
                "x"
            ],
            "polyval": [
                "p",
                "x"
            ],
            "_binary_op_dispatcher": [
                "a1",
                "a2"
            ],
            "polyadd": [
                "a1",
                "a2"
            ],
            "polysub": [
                "a1",
                "a2"
            ],
            "polymul": [
                "a1",
                "a2"
            ],
            "_polydiv_dispatcher": [
                "u",
                "v"
            ],
            "polydiv": [
                "u",
                "v"
            ],
            "_raise_power": [
                "astr",
                "wrap"
            ],
            "RankWarning": {},
            "poly1d": {
                "coeffs": [
                    "self",
                    "value"
                ],
                "variable": [
                    "self"
                ],
                "order": [
                    "self"
                ],
                "roots": [
                    "self"
                ],
                "_coeffs": [
                    "self",
                    "coeffs"
                ],
                "__init__": [
                    "self",
                    "c_or_r",
                    "r",
                    "variable"
                ],
                "__array__": [
                    "self",
                    "t"
                ],
                "__repr__": [
                    "self"
                ],
                "__len__": [
                    "self"
                ],
                "__str__": [
                    "self"
                ],
                "__call__": [
                    "self",
                    "val"
                ],
                "__neg__": [
                    "self"
                ],
                "__pos__": [
                    "self"
                ],
                "__mul__": [
                    "self",
                    "other"
                ],
                "__rmul__": [
                    "self",
                    "other"
                ],
                "__add__": [
                    "self",
                    "other"
                ],
                "__radd__": [
                    "self",
                    "other"
                ],
                "__pow__": [
                    "self",
                    "val"
                ],
                "__sub__": [
                    "self",
                    "other"
                ],
                "__rsub__": [
                    "self",
                    "other"
                ],
                "__div__": [
                    "self",
                    "other"
                ],
                "__rdiv__": [
                    "self",
                    "other"
                ],
                "__eq__": [
                    "self",
                    "other"
                ],
                "__ne__": [
                    "self",
                    "other"
                ],
                "__getitem__": [
                    "self",
                    "val"
                ],
                "__setitem__": [
                    "self",
                    "key",
                    "val"
                ],
                "__iter__": [
                    "self"
                ],
                "integ": [
                    "self",
                    "m",
                    "k"
                ],
                "deriv": [
                    "self",
                    "m"
                ]
            }
        },
        "numpy.lib.type_check": {
            "mintypecode": [
                "typechars",
                "typeset",
                "default"
            ],
            "_asfarray_dispatcher": [
                "a",
                "dtype"
            ],
            "asfarray": [
                "a",
                "dtype"
            ],
            "_real_dispatcher": [
                "val"
            ],
            "real": [
                "val"
            ],
            "_imag_dispatcher": [
                "val"
            ],
            "imag": [
                "val"
            ],
            "_is_type_dispatcher": [
                "x"
            ],
            "iscomplex": [
                "x"
            ],
            "isreal": [
                "x"
            ],
            "iscomplexobj": [
                "x"
            ],
            "isrealobj": [
                "x"
            ],
            "_getmaxmin": [
                "t"
            ],
            "_nan_to_num_dispatcher": [
                "x",
                "copy",
                "nan",
                "posinf",
                "neginf"
            ],
            "nan_to_num": [
                "x",
                "copy",
                "nan",
                "posinf",
                "neginf"
            ],
            "_real_if_close_dispatcher": [
                "a",
                "tol"
            ],
            "real_if_close": [
                "a",
                "tol"
            ],
            "_asscalar_dispatcher": [
                "a"
            ],
            "asscalar": [
                "a"
            ],
            "typename": [
                "char"
            ],
            "_common_type_dispatcher": [],
            "common_type": []
        },
        "numpy.lib.histograms": {
            "_ptp": [
                "x"
            ],
            "_hist_bin_sqrt": [
                "x",
                "range"
            ],
            "_hist_bin_sturges": [
                "x",
                "range"
            ],
            "_hist_bin_rice": [
                "x",
                "range"
            ],
            "_hist_bin_scott": [
                "x",
                "range"
            ],
            "_hist_bin_stone": [
                "x",
                "range"
            ],
            "_hist_bin_doane": [
                "x",
                "range"
            ],
            "_hist_bin_fd": [
                "x",
                "range"
            ],
            "_hist_bin_auto": [
                "x",
                "range"
            ],
            "_ravel_and_check_weights": [
                "a",
                "weights"
            ],
            "_get_outer_edges": [
                "a",
                "range"
            ],
            "_unsigned_subtract": [
                "a",
                "b"
            ],
            "_get_bin_edges": [
                "a",
                "bins",
                "range",
                "weights"
            ],
            "_search_sorted_inclusive": [
                "a",
                "v"
            ],
            "_histogram_bin_edges_dispatcher": [
                "a",
                "bins",
                "range",
                "weights"
            ],
            "histogram_bin_edges": [
                "a",
                "bins",
                "range",
                "weights"
            ],
            "_histogram_dispatcher": [
                "a",
                "bins",
                "range",
                "normed",
                "weights",
                "density"
            ],
            "histogram": [
                "a",
                "bins",
                "range",
                "normed",
                "weights",
                "density"
            ],
            "_histogramdd_dispatcher": [
                "sample",
                "bins",
                "range",
                "normed",
                "weights",
                "density"
            ],
            "histogramdd": [
                "sample",
                "bins",
                "range",
                "normed",
                "weights",
                "density"
            ]
        },
        "numpy.lib.user_array": {
            "container": {
                "__init__": [
                    "self",
                    "data",
                    "dtype",
                    "copy"
                ],
                "__repr__": [
                    "self"
                ],
                "__array__": [
                    "self",
                    "t"
                ],
                "__len__": [
                    "self"
                ],
                "__getitem__": [
                    "self",
                    "index"
                ],
                "__setitem__": [
                    "self",
                    "index",
                    "value"
                ],
                "__abs__": [
                    "self"
                ],
                "__neg__": [
                    "self"
                ],
                "__add__": [
                    "self",
                    "other"
                ],
                "__iadd__": [
                    "self",
                    "other"
                ],
                "__sub__": [
                    "self",
                    "other"
                ],
                "__rsub__": [
                    "self",
                    "other"
                ],
                "__isub__": [
                    "self",
                    "other"
                ],
                "__mul__": [
                    "self",
                    "other"
                ],
                "__imul__": [
                    "self",
                    "other"
                ],
                "__div__": [
                    "self",
                    "other"
                ],
                "__rdiv__": [
                    "self",
                    "other"
                ],
                "__idiv__": [
                    "self",
                    "other"
                ],
                "__mod__": [
                    "self",
                    "other"
                ],
                "__rmod__": [
                    "self",
                    "other"
                ],
                "__imod__": [
                    "self",
                    "other"
                ],
                "__divmod__": [
                    "self",
                    "other"
                ],
                "__rdivmod__": [
                    "self",
                    "other"
                ],
                "__pow__": [
                    "self",
                    "other"
                ],
                "__rpow__": [
                    "self",
                    "other"
                ],
                "__ipow__": [
                    "self",
                    "other"
                ],
                "__lshift__": [
                    "self",
                    "other"
                ],
                "__rshift__": [
                    "self",
                    "other"
                ],
                "__rlshift__": [
                    "self",
                    "other"
                ],
                "__rrshift__": [
                    "self",
                    "other"
                ],
                "__ilshift__": [
                    "self",
                    "other"
                ],
                "__irshift__": [
                    "self",
                    "other"
                ],
                "__and__": [
                    "self",
                    "other"
                ],
                "__rand__": [
                    "self",
                    "other"
                ],
                "__iand__": [
                    "self",
                    "other"
                ],
                "__xor__": [
                    "self",
                    "other"
                ],
                "__rxor__": [
                    "self",
                    "other"
                ],
                "__ixor__": [
                    "self",
                    "other"
                ],
                "__or__": [
                    "self",
                    "other"
                ],
                "__ror__": [
                    "self",
                    "other"
                ],
                "__ior__": [
                    "self",
                    "other"
                ],
                "__pos__": [
                    "self"
                ],
                "__invert__": [
                    "self"
                ],
                "_scalarfunc": [
                    "self",
                    "func"
                ],
                "__complex__": [
                    "self"
                ],
                "__float__": [
                    "self"
                ],
                "__int__": [
                    "self"
                ],
                "__long__": [
                    "self"
                ],
                "__hex__": [
                    "self"
                ],
                "__oct__": [
                    "self"
                ],
                "__lt__": [
                    "self",
                    "other"
                ],
                "__le__": [
                    "self",
                    "other"
                ],
                "__eq__": [
                    "self",
                    "other"
                ],
                "__ne__": [
                    "self",
                    "other"
                ],
                "__gt__": [
                    "self",
                    "other"
                ],
                "__ge__": [
                    "self",
                    "other"
                ],
                "copy": [
                    "self"
                ],
                "tostring": [
                    "self"
                ],
                "byteswap": [
                    "self"
                ],
                "astype": [
                    "self",
                    "typecode"
                ],
                "_rc": [
                    "self",
                    "a"
                ],
                "__array_wrap__": [
                    "self"
                ],
                "__setattr__": [
                    "self",
                    "attr",
                    "value"
                ],
                "__getattr__": [
                    "self",
                    "attr"
                ]
            }
        },
        "numpy.lib.setup": {
            "configuration": [
                "parent_package",
                "top_path"
            ]
        },
        "numpy.lib.financial": {
            "_convert_when": [
                "when"
            ],
            "_fv_dispatcher": [
                "rate",
                "nper",
                "pmt",
                "pv",
                "when"
            ],
            "fv": [
                "rate",
                "nper",
                "pmt",
                "pv",
                "when"
            ],
            "_pmt_dispatcher": [
                "rate",
                "nper",
                "pv",
                "fv",
                "when"
            ],
            "pmt": [
                "rate",
                "nper",
                "pv",
                "fv",
                "when"
            ],
            "_nper_dispatcher": [
                "rate",
                "pmt",
                "pv",
                "fv",
                "when"
            ],
            "nper": [
                "rate",
                "pmt",
                "pv",
                "fv",
                "when"
            ],
            "_ipmt_dispatcher": [
                "rate",
                "per",
                "nper",
                "pv",
                "fv",
                "when"
            ],
            "ipmt": [
                "rate",
                "per",
                "nper",
                "pv",
                "fv",
                "when"
            ],
            "_rbl": [
                "rate",
                "per",
                "pmt",
                "pv",
                "when"
            ],
            "_ppmt_dispatcher": [
                "rate",
                "per",
                "nper",
                "pv",
                "fv",
                "when"
            ],
            "ppmt": [
                "rate",
                "per",
                "nper",
                "pv",
                "fv",
                "when"
            ],
            "_pv_dispatcher": [
                "rate",
                "nper",
                "pmt",
                "fv",
                "when"
            ],
            "pv": [
                "rate",
                "nper",
                "pmt",
                "fv",
                "when"
            ],
            "_g_div_gp": [
                "r",
                "n",
                "p",
                "x",
                "y",
                "w"
            ],
            "_rate_dispatcher": [
                "nper",
                "pmt",
                "pv",
                "fv",
                "when",
                "guess",
                "tol",
                "maxiter"
            ],
            "rate": [
                "nper",
                "pmt",
                "pv",
                "fv",
                "when",
                "guess",
                "tol",
                "maxiter"
            ],
            "_irr_dispatcher": [
                "values"
            ],
            "irr": [
                "values"
            ],
            "_npv_dispatcher": [
                "rate",
                "values"
            ],
            "npv": [
                "rate",
                "values"
            ],
            "_mirr_dispatcher": [
                "values",
                "finance_rate",
                "reinvest_rate"
            ],
            "mirr": [
                "values",
                "finance_rate",
                "reinvest_rate"
            ]
        },
        "numpy.lib.utils": {
            "get_include": [],
            "_set_function_name": [
                "func",
                "name"
            ],
            "_get_indent": [
                "lines"
            ],
            "deprecate": [],
            "byte_bounds": [
                "a"
            ],
            "who": [
                "vardict"
            ],
            "_split_line": [
                "name",
                "arguments",
                "width"
            ],
            "_makenamedict": [
                "module"
            ],
            "_info": [
                "obj",
                "output"
            ],
            "info": [
                "object",
                "maxwidth",
                "output",
                "toplevel"
            ],
            "source": [
                "object",
                "output"
            ],
            "lookfor": [
                "what",
                "module",
                "import_modules",
                "regenerate",
                "output"
            ],
            "_lookfor_generate_cache": [
                "module",
                "import_modules",
                "regenerate"
            ],
            "_getmembers": [
                "item"
            ],
            "safe_eval": [
                "source"
            ],
            "_median_nancheck": [
                "data",
                "result",
                "axis",
                "out"
            ],
            "_Deprecate": {
                "__init__": [
                    "self",
                    "old_name",
                    "new_name",
                    "message"
                ],
                "__call__": [
                    "self",
                    "func"
                ]
            }
        },
        "numpy.lib._iotools": {
            "_decode_line": [
                "line",
                "encoding"
            ],
            "_is_string_like": [
                "obj"
            ],
            "_is_bytes_like": [
                "obj"
            ],
            "_to_filehandle": [
                "fname",
                "flag",
                "return_opened"
            ],
            "has_nested_fields": [
                "ndtype"
            ],
            "flatten_dtype": [
                "ndtype",
                "flatten_base"
            ],
            "str2bool": [
                "value"
            ],
            "easy_dtype": [
                "ndtype",
                "names",
                "defaultfmt"
            ],
            "LineSplitter": {
                "autostrip": [
                    "self",
                    "method"
                ],
                "__init__": [
                    "self",
                    "delimiter",
                    "comments",
                    "autostrip",
                    "encoding"
                ],
                "_delimited_splitter": [
                    "self",
                    "line"
                ],
                "_fixedwidth_splitter": [
                    "self",
                    "line"
                ],
                "_variablewidth_splitter": [
                    "self",
                    "line"
                ],
                "__call__": [
                    "self",
                    "line"
                ]
            },
            "NameValidator": {
                "__init__": [
                    "self",
                    "excludelist",
                    "deletechars",
                    "case_sensitive",
                    "replace_space"
                ],
                "validate": [
                    "self",
                    "names",
                    "defaultfmt",
                    "nbfields"
                ],
                "__call__": [
                    "self",
                    "names",
                    "defaultfmt",
                    "nbfields"
                ]
            },
            "ConverterError": {},
            "ConverterLockError": {},
            "ConversionWarning": {},
            "StringConverter": {
                "_getdtype": [
                    "cls",
                    "val"
                ],
                "_getsubdtype": [
                    "cls",
                    "val"
                ],
                "_dtypeortype": [
                    "cls",
                    "dtype"
                ],
                "upgrade_mapper": [
                    "cls",
                    "func",
                    "default"
                ],
                "__init__": [
                    "self",
                    "dtype_or_func",
                    "default",
                    "missing_values",
                    "locked"
                ],
                "_loose_call": [
                    "self",
                    "value"
                ],
                "_strict_call": [
                    "self",
                    "value"
                ],
                "__call__": [
                    "self",
                    "value"
                ],
                "upgrade": [
                    "self",
                    "value"
                ],
                "iterupgrade": [
                    "self",
                    "value"
                ],
                "update": [
                    "self",
                    "func",
                    "default",
                    "testing_value",
                    "missing_values",
                    "locked"
                ]
            }
        },
        "numpy.lib.npyio": {
            "loads": [],
            "zipfile_factory": [
                "file"
            ],
            "load": [
                "file",
                "mmap_mode",
                "allow_pickle",
                "fix_imports",
                "encoding"
            ],
            "_save_dispatcher": [
                "file",
                "arr",
                "allow_pickle",
                "fix_imports"
            ],
            "save": [
                "file",
                "arr",
                "allow_pickle",
                "fix_imports"
            ],
            "_savez_dispatcher": [
                "file"
            ],
            "savez": [
                "file"
            ],
            "_savez_compressed_dispatcher": [
                "file"
            ],
            "savez_compressed": [
                "file"
            ],
            "_savez": [
                "file",
                "args",
                "kwds",
                "compress",
                "allow_pickle",
                "pickle_kwargs"
            ],
            "_getconv": [
                "dtype"
            ],
            "loadtxt": [
                "fname",
                "dtype",
                "comments",
                "delimiter",
                "converters",
                "skiprows",
                "usecols",
                "unpack",
                "ndmin",
                "encoding",
                "max_rows"
            ],
            "_savetxt_dispatcher": [
                "fname",
                "X",
                "fmt",
                "delimiter",
                "newline",
                "header",
                "footer",
                "comments",
                "encoding"
            ],
            "savetxt": [
                "fname",
                "X",
                "fmt",
                "delimiter",
                "newline",
                "header",
                "footer",
                "comments",
                "encoding"
            ],
            "fromregex": [
                "file",
                "regexp",
                "dtype",
                "encoding"
            ],
            "genfromtxt": [
                "fname",
                "dtype",
                "comments",
                "delimiter",
                "skip_header",
                "skip_footer",
                "converters",
                "missing_values",
                "filling_values",
                "usecols",
                "names",
                "excludelist",
                "deletechars",
                "replace_space",
                "autostrip",
                "case_sensitive",
                "defaultfmt",
                "unpack",
                "usemask",
                "loose",
                "invalid_raise",
                "max_rows",
                "encoding"
            ],
            "ndfromtxt": [
                "fname"
            ],
            "mafromtxt": [
                "fname"
            ],
            "recfromtxt": [
                "fname"
            ],
            "recfromcsv": [
                "fname"
            ],
            "BagObj": {
                "__init__": [
                    "self",
                    "obj"
                ],
                "__getattribute__": [
                    "self",
                    "key"
                ],
                "__dir__": [
                    "self"
                ]
            },
            "NpzFile": {
                "__init__": [
                    "self",
                    "fid",
                    "own_fid",
                    "allow_pickle",
                    "pickle_kwargs"
                ],
                "__enter__": [
                    "self"
                ],
                "__exit__": [
                    "self",
                    "exc_type",
                    "exc_value",
                    "traceback"
                ],
                "close": [
                    "self"
                ],
                "__del__": [
                    "self"
                ],
                "__iter__": [
                    "self"
                ],
                "__len__": [
                    "self"
                ],
                "__getitem__": [
                    "self",
                    "key"
                ]
            }
        },
        "numpy.lib.ufunclike": {
            "_deprecate_out_named_y": [
                "f"
            ],
            "_fix_out_named_y": [
                "f"
            ],
            "_fix_and_maybe_deprecate_out_named_y": [
                "f"
            ],
            "_dispatcher": [
                "x",
                "out"
            ],
            "fix": [
                "x",
                "out"
            ],
            "isposinf": [
                "x",
                "out"
            ],
            "isneginf": [
                "x",
                "out"
            ]
        },
        "numpy.lib.scimath": {
            "_tocomplex": [
                "arr"
            ],
            "_fix_real_lt_zero": [
                "x"
            ],
            "_fix_int_lt_zero": [
                "x"
            ],
            "_fix_real_abs_gt_1": [
                "x"
            ],
            "_unary_dispatcher": [
                "x"
            ],
            "sqrt": [
                "x"
            ],
            "log": [
                "x"
            ],
            "log10": [
                "x"
            ],
            "_logn_dispatcher": [
                "n",
                "x"
            ],
            "logn": [
                "n",
                "x"
            ],
            "log2": [
                "x"
            ],
            "_power_dispatcher": [
                "x",
                "p"
            ],
            "power": [
                "x",
                "p"
            ],
            "arccos": [
                "x"
            ],
            "arcsin": [
                "x"
            ],
            "arctanh": [
                "x"
            ]
        },
        "numpy.lib.recfunctions": {
            "_recursive_fill_fields_dispatcher": [
                "input",
                "output"
            ],
            "recursive_fill_fields": [
                "input",
                "output"
            ],
            "_get_fieldspec": [
                "dtype"
            ],
            "get_names": [
                "adtype"
            ],
            "get_names_flat": [
                "adtype"
            ],
            "flatten_descr": [
                "ndtype"
            ],
            "_zip_dtype": [
                "seqarrays",
                "flatten"
            ],
            "_zip_descr": [
                "seqarrays",
                "flatten"
            ],
            "get_fieldstructure": [
                "adtype",
                "lastname",
                "parents"
            ],
            "_izip_fields_flat": [
                "iterable"
            ],
            "_izip_fields": [
                "iterable"
            ],
            "_izip_records": [
                "seqarrays",
                "fill_value",
                "flatten"
            ],
            "_fix_output": [
                "output",
                "usemask",
                "asrecarray"
            ],
            "_fix_defaults": [
                "output",
                "defaults"
            ],
            "_merge_arrays_dispatcher": [
                "seqarrays",
                "fill_value",
                "flatten",
                "usemask",
                "asrecarray"
            ],
            "merge_arrays": [
                "seqarrays",
                "fill_value",
                "flatten",
                "usemask",
                "asrecarray"
            ],
            "_drop_fields_dispatcher": [
                "base",
                "drop_names",
                "usemask",
                "asrecarray"
            ],
            "drop_fields": [
                "base",
                "drop_names",
                "usemask",
                "asrecarray"
            ],
            "_keep_fields": [
                "base",
                "keep_names",
                "usemask",
                "asrecarray"
            ],
            "_rec_drop_fields_dispatcher": [
                "base",
                "drop_names"
            ],
            "rec_drop_fields": [
                "base",
                "drop_names"
            ],
            "_rename_fields_dispatcher": [
                "base",
                "namemapper"
            ],
            "rename_fields": [
                "base",
                "namemapper"
            ],
            "_append_fields_dispatcher": [
                "base",
                "names",
                "data",
                "dtypes",
                "fill_value",
                "usemask",
                "asrecarray"
            ],
            "append_fields": [
                "base",
                "names",
                "data",
                "dtypes",
                "fill_value",
                "usemask",
                "asrecarray"
            ],
            "_rec_append_fields_dispatcher": [
                "base",
                "names",
                "data",
                "dtypes"
            ],
            "rec_append_fields": [
                "base",
                "names",
                "data",
                "dtypes"
            ],
            "_repack_fields_dispatcher": [
                "a",
                "align",
                "recurse"
            ],
            "repack_fields": [
                "a",
                "align",
                "recurse"
            ],
            "_get_fields_and_offsets": [
                "dt",
                "offset"
            ],
            "_structured_to_unstructured_dispatcher": [
                "arr",
                "dtype",
                "copy",
                "casting"
            ],
            "structured_to_unstructured": [
                "arr",
                "dtype",
                "copy",
                "casting"
            ],
            "_unstructured_to_structured_dispatcher": [
                "arr",
                "dtype",
                "names",
                "align",
                "copy",
                "casting"
            ],
            "unstructured_to_structured": [
                "arr",
                "dtype",
                "names",
                "align",
                "copy",
                "casting"
            ],
            "_apply_along_fields_dispatcher": [
                "func",
                "arr"
            ],
            "apply_along_fields": [
                "func",
                "arr"
            ],
            "_assign_fields_by_name_dispatcher": [
                "dst",
                "src",
                "zero_unassigned"
            ],
            "assign_fields_by_name": [
                "dst",
                "src",
                "zero_unassigned"
            ],
            "_require_fields_dispatcher": [
                "array",
                "required_dtype"
            ],
            "require_fields": [
                "array",
                "required_dtype"
            ],
            "_stack_arrays_dispatcher": [
                "arrays",
                "defaults",
                "usemask",
                "asrecarray",
                "autoconvert"
            ],
            "stack_arrays": [
                "arrays",
                "defaults",
                "usemask",
                "asrecarray",
                "autoconvert"
            ],
            "_find_duplicates_dispatcher": [
                "a",
                "key",
                "ignoremask",
                "return_index"
            ],
            "find_duplicates": [
                "a",
                "key",
                "ignoremask",
                "return_index"
            ],
            "_join_by_dispatcher": [
                "key",
                "r1",
                "r2",
                "jointype",
                "r1postfix",
                "r2postfix",
                "defaults",
                "usemask",
                "asrecarray"
            ],
            "join_by": [
                "key",
                "r1",
                "r2",
                "jointype",
                "r1postfix",
                "r2postfix",
                "defaults",
                "usemask",
                "asrecarray"
            ],
            "_rec_join_dispatcher": [
                "key",
                "r1",
                "r2",
                "jointype",
                "r1postfix",
                "r2postfix",
                "defaults"
            ],
            "rec_join": [
                "key",
                "r1",
                "r2",
                "jointype",
                "r1postfix",
                "r2postfix",
                "defaults"
            ]
        },
        "numpy.lib._datasource": {
            "_check_mode": [
                "mode",
                "encoding",
                "newline"
            ],
            "_python2_bz2open": [
                "fn",
                "mode",
                "encoding",
                "newline"
            ],
            "_python2_gzipopen": [
                "fn",
                "mode",
                "encoding",
                "newline"
            ],
            "open": [
                "path",
                "mode",
                "destpath",
                "encoding",
                "newline"
            ],
            "_FileOpeners": {
                "__init__": [
                    "self"
                ],
                "_load": [
                    "self"
                ],
                "keys": [
                    "self"
                ],
                "__getitem__": [
                    "self",
                    "key"
                ]
            },
            "DataSource": {
                "__init__": [
                    "self",
                    "destpath"
                ],
                "__del__": [
                    "self"
                ],
                "_iszip": [
                    "self",
                    "filename"
                ],
                "_iswritemode": [
                    "self",
                    "mode"
                ],
                "_splitzipext": [
                    "self",
                    "filename"
                ],
                "_possible_names": [
                    "self",
                    "filename"
                ],
                "_isurl": [
                    "self",
                    "path"
                ],
                "_cache": [
                    "self",
                    "path"
                ],
                "_findfile": [
                    "self",
                    "path"
                ],
                "abspath": [
                    "self",
                    "path"
                ],
                "_sanitize_relative_path": [
                    "self",
                    "path"
                ],
                "exists": [
                    "self",
                    "path"
                ],
                "open": [
                    "self",
                    "path",
                    "mode",
                    "encoding",
                    "newline"
                ]
            },
            "Repository": {
                "__init__": [
                    "self",
                    "baseurl",
                    "destpath"
                ],
                "__del__": [
                    "self"
                ],
                "_fullpath": [
                    "self",
                    "path"
                ],
                "_findfile": [
                    "self",
                    "path"
                ],
                "abspath": [
                    "self",
                    "path"
                ],
                "exists": [
                    "self",
                    "path"
                ],
                "open": [
                    "self",
                    "path",
                    "mode",
                    "encoding",
                    "newline"
                ],
                "listdir": [
                    "self"
                ]
            }
        },
        "numpy.lib.shape_base": {
            "_make_along_axis_idx": [
                "arr_shape",
                "indices",
                "axis"
            ],
            "_take_along_axis_dispatcher": [
                "arr",
                "indices",
                "axis"
            ],
            "take_along_axis": [
                "arr",
                "indices",
                "axis"
            ],
            "_put_along_axis_dispatcher": [
                "arr",
                "indices",
                "values",
                "axis"
            ],
            "put_along_axis": [
                "arr",
                "indices",
                "values",
                "axis"
            ],
            "_apply_along_axis_dispatcher": [
                "func1d",
                "axis",
                "arr"
            ],
            "apply_along_axis": [
                "func1d",
                "axis",
                "arr"
            ],
            "_apply_over_axes_dispatcher": [
                "func",
                "a",
                "axes"
            ],
            "apply_over_axes": [
                "func",
                "a",
                "axes"
            ],
            "_expand_dims_dispatcher": [
                "a",
                "axis"
            ],
            "expand_dims": [
                "a",
                "axis"
            ],
            "_column_stack_dispatcher": [
                "tup"
            ],
            "column_stack": [
                "tup"
            ],
            "_dstack_dispatcher": [
                "tup"
            ],
            "dstack": [
                "tup"
            ],
            "_replace_zero_by_x_arrays": [
                "sub_arys"
            ],
            "_array_split_dispatcher": [
                "ary",
                "indices_or_sections",
                "axis"
            ],
            "array_split": [
                "ary",
                "indices_or_sections",
                "axis"
            ],
            "_split_dispatcher": [
                "ary",
                "indices_or_sections",
                "axis"
            ],
            "split": [
                "ary",
                "indices_or_sections",
                "axis"
            ],
            "_hvdsplit_dispatcher": [
                "ary",
                "indices_or_sections"
            ],
            "hsplit": [
                "ary",
                "indices_or_sections"
            ],
            "vsplit": [
                "ary",
                "indices_or_sections"
            ],
            "dsplit": [
                "ary",
                "indices_or_sections"
            ],
            "get_array_prepare": [],
            "get_array_wrap": [],
            "_kron_dispatcher": [
                "a",
                "b"
            ],
            "kron": [
                "a",
                "b"
            ],
            "_tile_dispatcher": [
                "A",
                "reps"
            ],
            "tile": [
                "A",
                "reps"
            ]
        },
        "numpy.lib.format": {
            "_check_version": [
                "version"
            ],
            "magic": [
                "major",
                "minor"
            ],
            "read_magic": [
                "fp"
            ],
            "_has_metadata": [
                "dt"
            ],
            "dtype_to_descr": [
                "dtype"
            ],
            "descr_to_dtype": [
                "descr"
            ],
            "header_data_from_array_1_0": [
                "array"
            ],
            "_wrap_header": [
                "header",
                "version"
            ],
            "_wrap_header_guess_version": [
                "header"
            ],
            "_write_array_header": [
                "fp",
                "d",
                "version"
            ],
            "write_array_header_1_0": [
                "fp",
                "d"
            ],
            "write_array_header_2_0": [
                "fp",
                "d"
            ],
            "read_array_header_1_0": [
                "fp"
            ],
            "read_array_header_2_0": [
                "fp"
            ],
            "_filter_header": [
                "s"
            ],
            "_read_array_header": [
                "fp",
                "version"
            ],
            "write_array": [
                "fp",
                "array",
                "version",
                "allow_pickle",
                "pickle_kwargs"
            ],
            "read_array": [
                "fp",
                "allow_pickle",
                "pickle_kwargs"
            ],
            "open_memmap": [
                "filename",
                "mode",
                "dtype",
                "shape",
                "fortran_order",
                "version"
            ],
            "_read_bytes": [
                "fp",
                "size",
                "error_template"
            ]
        },
        "numpy.lib._version": {
            "NumpyVersion": {
                "__init__": [
                    "self",
                    "vstring"
                ],
                "_compare_version": [
                    "self",
                    "other"
                ],
                "_compare_pre_release": [
                    "self",
                    "other"
                ],
                "_compare": [
                    "self",
                    "other"
                ],
                "__lt__": [
                    "self",
                    "other"
                ],
                "__le__": [
                    "self",
                    "other"
                ],
                "__eq__": [
                    "self",
                    "other"
                ],
                "__ne__": [
                    "self",
                    "other"
                ],
                "__gt__": [
                    "self",
                    "other"
                ],
                "__ge__": [
                    "self",
                    "other"
                ],
                "__repr": [
                    "self"
                ]
            }
        },
        "numpy.lib.index_tricks": {
            "_ix__dispatcher": [],
            "ix_": [],
            "_fill_diagonal_dispatcher": [
                "a",
                "val",
                "wrap"
            ],
            "fill_diagonal": [
                "a",
                "val",
                "wrap"
            ],
            "diag_indices": [
                "n",
                "ndim"
            ],
            "_diag_indices_from": [
                "arr"
            ],
            "diag_indices_from": [
                "arr"
            ],
            "nd_grid": {
                "__init__": [
                    "self",
                    "sparse"
                ],
                "__getitem__": [
                    "self",
                    "key"
                ]
            },
            "MGridClass": {
                "__init__": [
                    "self"
                ]
            },
            "OGridClass": {
                "__init__": [
                    "self"
                ]
            },
            "AxisConcatenator": {
                "__init__": [
                    "self",
                    "axis",
                    "matrix",
                    "ndmin",
                    "trans1d"
                ],
                "__getitem__": [
                    "self",
                    "key"
                ],
                "__len__": [
                    "self"
                ]
            },
            "RClass": {
                "__init__": [
                    "self"
                ]
            },
            "CClass": {
                "__init__": [
                    "self"
                ]
            },
            "ndenumerate": {
                "__init__": [
                    "self",
                    "arr"
                ],
                "__next__": [
                    "self"
                ],
                "__iter__": [
                    "self"
                ]
            },
            "ndindex": {
                "__init__": [
                    "self"
                ],
                "__iter__": [
                    "self"
                ],
                "ndincr": [
                    "self"
                ],
                "__next__": [
                    "self"
                ]
            },
            "IndexExpression": {
                "__init__": [
                    "self",
                    "maketuple"
                ],
                "__getitem__": [
                    "self",
                    "item"
                ]
            }
        },
        "numpy.lib.nanfunctions": {
            "_nan_mask": [
                "a",
                "out"
            ],
            "_replace_nan": [
                "a",
                "val"
            ],
            "_copyto": [
                "a",
                "val",
                "mask"
            ],
            "_remove_nan_1d": [
                "arr1d",
                "overwrite_input"
            ],
            "_divide_by_count": [
                "a",
                "b",
                "out"
            ],
            "_nanmin_dispatcher": [
                "a",
                "axis",
                "out",
                "keepdims"
            ],
            "nanmin": [
                "a",
                "axis",
                "out",
                "keepdims"
            ],
            "_nanmax_dispatcher": [
                "a",
                "axis",
                "out",
                "keepdims"
            ],
            "nanmax": [
                "a",
                "axis",
                "out",
                "keepdims"
            ],
            "_nanargmin_dispatcher": [
                "a",
                "axis"
            ],
            "nanargmin": [
                "a",
                "axis"
            ],
            "_nanargmax_dispatcher": [
                "a",
                "axis"
            ],
            "nanargmax": [
                "a",
                "axis"
            ],
            "_nansum_dispatcher": [
                "a",
                "axis",
                "dtype",
                "out",
                "keepdims"
            ],
            "nansum": [
                "a",
                "axis",
                "dtype",
                "out",
                "keepdims"
            ],
            "_nanprod_dispatcher": [
                "a",
                "axis",
                "dtype",
                "out",
                "keepdims"
            ],
            "nanprod": [
                "a",
                "axis",
                "dtype",
                "out",
                "keepdims"
            ],
            "_nancumsum_dispatcher": [
                "a",
                "axis",
                "dtype",
                "out"
            ],
            "nancumsum": [
                "a",
                "axis",
                "dtype",
                "out"
            ],
            "_nancumprod_dispatcher": [
                "a",
                "axis",
                "dtype",
                "out"
            ],
            "nancumprod": [
                "a",
                "axis",
                "dtype",
                "out"
            ],
            "_nanmean_dispatcher": [
                "a",
                "axis",
                "dtype",
                "out",
                "keepdims"
            ],
            "nanmean": [
                "a",
                "axis",
                "dtype",
                "out",
                "keepdims"
            ],
            "_nanmedian1d": [
                "arr1d",
                "overwrite_input"
            ],
            "_nanmedian": [
                "a",
                "axis",
                "out",
                "overwrite_input"
            ],
            "_nanmedian_small": [
                "a",
                "axis",
                "out",
                "overwrite_input"
            ],
            "_nanmedian_dispatcher": [
                "a",
                "axis",
                "out",
                "overwrite_input",
                "keepdims"
            ],
            "nanmedian": [
                "a",
                "axis",
                "out",
                "overwrite_input",
                "keepdims"
            ],
            "_nanpercentile_dispatcher": [
                "a",
                "q",
                "axis",
                "out",
                "overwrite_input",
                "interpolation",
                "keepdims"
            ],
            "nanpercentile": [
                "a",
                "q",
                "axis",
                "out",
                "overwrite_input",
                "interpolation",
                "keepdims"
            ],
            "_nanquantile_dispatcher": [
                "a",
                "q",
                "axis",
                "out",
                "overwrite_input",
                "interpolation",
                "keepdims"
            ],
            "nanquantile": [
                "a",
                "q",
                "axis",
                "out",
                "overwrite_input",
                "interpolation",
                "keepdims"
            ],
            "_nanquantile_unchecked": [
                "a",
                "q",
                "axis",
                "out",
                "overwrite_input",
                "interpolation",
                "keepdims"
            ],
            "_nanquantile_ureduce_func": [
                "a",
                "q",
                "axis",
                "out",
                "overwrite_input",
                "interpolation"
            ],
            "_nanquantile_1d": [
                "arr1d",
                "q",
                "overwrite_input",
                "interpolation"
            ],
            "_nanvar_dispatcher": [
                "a",
                "axis",
                "dtype",
                "out",
                "ddof",
                "keepdims"
            ],
            "nanvar": [
                "a",
                "axis",
                "dtype",
                "out",
                "ddof",
                "keepdims"
            ],
            "_nanstd_dispatcher": [
                "a",
                "axis",
                "dtype",
                "out",
                "ddof",
                "keepdims"
            ],
            "nanstd": [
                "a",
                "axis",
                "dtype",
                "out",
                "ddof",
                "keepdims"
            ]
        },
        "numpy.lib.arraypad": {
            "_round_if_needed": [
                "arr",
                "dtype"
            ],
            "_slice_at_axis": [
                "sl",
                "axis"
            ],
            "_view_roi": [
                "array",
                "original_area_slice",
                "axis"
            ],
            "_pad_simple": [
                "array",
                "pad_width",
                "fill_value"
            ],
            "_set_pad_area": [
                "padded",
                "axis",
                "width_pair",
                "value_pair"
            ],
            "_get_edges": [
                "padded",
                "axis",
                "width_pair"
            ],
            "_get_linear_ramps": [
                "padded",
                "axis",
                "width_pair",
                "end_value_pair"
            ],
            "_get_stats": [
                "padded",
                "axis",
                "width_pair",
                "length_pair",
                "stat_func"
            ],
            "_set_reflect_both": [
                "padded",
                "axis",
                "width_pair",
                "method",
                "include_edge"
            ],
            "_set_wrap_both": [
                "padded",
                "axis",
                "width_pair"
            ],
            "_as_pairs": [
                "x",
                "ndim",
                "as_index"
            ],
            "_pad_dispatcher": [
                "array",
                "pad_width",
                "mode"
            ],
            "pad": [
                "array",
                "pad_width",
                "mode"
            ]
        },
        "numpy.lib.function_base": {
            "_rot90_dispatcher": [
                "m",
                "k",
                "axes"
            ],
            "rot90": [
                "m",
                "k",
                "axes"
            ],
            "_flip_dispatcher": [
                "m",
                "axis"
            ],
            "flip": [
                "m",
                "axis"
            ],
            "iterable": [
                "y"
            ],
            "_average_dispatcher": [
                "a",
                "axis",
                "weights",
                "returned"
            ],
            "average": [
                "a",
                "axis",
                "weights",
                "returned"
            ],
            "asarray_chkfinite": [
                "a",
                "dtype",
                "order"
            ],
            "_piecewise_dispatcher": [
                "x",
                "condlist",
                "funclist"
            ],
            "piecewise": [
                "x",
                "condlist",
                "funclist"
            ],
            "_select_dispatcher": [
                "condlist",
                "choicelist",
                "default"
            ],
            "select": [
                "condlist",
                "choicelist",
                "default"
            ],
            "_copy_dispatcher": [
                "a",
                "order"
            ],
            "copy": [
                "a",
                "order"
            ],
            "_gradient_dispatcher": [
                "f"
            ],
            "gradient": [
                "f"
            ],
            "_diff_dispatcher": [
                "a",
                "n",
                "axis",
                "prepend",
                "append"
            ],
            "diff": [
                "a",
                "n",
                "axis",
                "prepend",
                "append"
            ],
            "_interp_dispatcher": [
                "x",
                "xp",
                "fp",
                "left",
                "right",
                "period"
            ],
            "interp": [
                "x",
                "xp",
                "fp",
                "left",
                "right",
                "period"
            ],
            "_angle_dispatcher": [
                "z",
                "deg"
            ],
            "angle": [
                "z",
                "deg"
            ],
            "_unwrap_dispatcher": [
                "p",
                "discont",
                "axis"
            ],
            "unwrap": [
                "p",
                "discont",
                "axis"
            ],
            "_sort_complex": [
                "a"
            ],
            "sort_complex": [
                "a"
            ],
            "_trim_zeros": [
                "filt",
                "trim"
            ],
            "trim_zeros": [
                "filt",
                "trim"
            ],
            "_extract_dispatcher": [
                "condition",
                "arr"
            ],
            "extract": [
                "condition",
                "arr"
            ],
            "_place_dispatcher": [
                "arr",
                "mask",
                "vals"
            ],
            "place": [
                "arr",
                "mask",
                "vals"
            ],
            "disp": [
                "mesg",
                "device",
                "linefeed"
            ],
            "_parse_gufunc_signature": [
                "signature"
            ],
            "_update_dim_sizes": [
                "dim_sizes",
                "arg",
                "core_dims"
            ],
            "_parse_input_dimensions": [
                "args",
                "input_core_dims"
            ],
            "_calculate_shapes": [
                "broadcast_shape",
                "dim_sizes",
                "list_of_core_dims"
            ],
            "_create_arrays": [
                "broadcast_shape",
                "dim_sizes",
                "list_of_core_dims",
                "dtypes"
            ],
            "_cov_dispatcher": [
                "m",
                "y",
                "rowvar",
                "bias",
                "ddof",
                "fweights",
                "aweights"
            ],
            "cov": [
                "m",
                "y",
                "rowvar",
                "bias",
                "ddof",
                "fweights",
                "aweights"
            ],
            "_corrcoef_dispatcher": [
                "x",
                "y",
                "rowvar",
                "bias",
                "ddof"
            ],
            "corrcoef": [
                "x",
                "y",
                "rowvar",
                "bias",
                "ddof"
            ],
            "blackman": [
                "M"
            ],
            "bartlett": [
                "M"
            ],
            "hanning": [
                "M"
            ],
            "hamming": [
                "M"
            ],
            "_chbevl": [
                "x",
                "vals"
            ],
            "_i0_1": [
                "x"
            ],
            "_i0_2": [
                "x"
            ],
            "_i0_dispatcher": [
                "x"
            ],
            "i0": [
                "x"
            ],
            "kaiser": [
                "M",
                "beta"
            ],
            "_sinc_dispatcher": [
                "x"
            ],
            "sinc": [
                "x"
            ],
            "_msort_dispatcher": [
                "a"
            ],
            "msort": [
                "a"
            ],
            "_ureduce": [
                "a",
                "func"
            ],
            "_median_dispatcher": [
                "a",
                "axis",
                "out",
                "overwrite_input",
                "keepdims"
            ],
            "median": [
                "a",
                "axis",
                "out",
                "overwrite_input",
                "keepdims"
            ],
            "_median": [
                "a",
                "axis",
                "out",
                "overwrite_input"
            ],
            "_percentile_dispatcher": [
                "a",
                "q",
                "axis",
                "out",
                "overwrite_input",
                "interpolation",
                "keepdims"
            ],
            "percentile": [
                "a",
                "q",
                "axis",
                "out",
                "overwrite_input",
                "interpolation",
                "keepdims"
            ],
            "_quantile_dispatcher": [
                "a",
                "q",
                "axis",
                "out",
                "overwrite_input",
                "interpolation",
                "keepdims"
            ],
            "quantile": [
                "a",
                "q",
                "axis",
                "out",
                "overwrite_input",
                "interpolation",
                "keepdims"
            ],
            "_quantile_unchecked": [
                "a",
                "q",
                "axis",
                "out",
                "overwrite_input",
                "interpolation",
                "keepdims"
            ],
            "_quantile_is_valid": [
                "q"
            ],
            "_quantile_ureduce_func": [
                "a",
                "q",
                "axis",
                "out",
                "overwrite_input",
                "interpolation",
                "keepdims"
            ],
            "_trapz_dispatcher": [
                "y",
                "x",
                "dx",
                "axis"
            ],
            "trapz": [
                "y",
                "x",
                "dx",
                "axis"
            ],
            "_meshgrid_dispatcher": [],
            "meshgrid": [],
            "_delete_dispatcher": [
                "arr",
                "obj",
                "axis"
            ],
            "delete": [
                "arr",
                "obj",
                "axis"
            ],
            "_insert_dispatcher": [
                "arr",
                "obj",
                "values",
                "axis"
            ],
            "insert": [
                "arr",
                "obj",
                "values",
                "axis"
            ],
            "_append_dispatcher": [
                "arr",
                "values",
                "axis"
            ],
            "append": [
                "arr",
                "values",
                "axis"
            ],
            "_digitize_dispatcher": [
                "x",
                "bins",
                "right"
            ],
            "digitize": [
                "x",
                "bins",
                "right"
            ],
            "vectorize": {
                "__init__": [
                    "self",
                    "pyfunc",
                    "otypes",
                    "doc",
                    "excluded",
                    "cache",
                    "signature"
                ],
                "__call__": [
                    "self"
                ],
                "_get_ufunc_and_otypes": [
                    "self",
                    "func",
                    "args"
                ],
                "_vectorize_call": [
                    "self",
                    "func",
                    "args"
                ],
                "_vectorize_call_with_signature": [
                    "self",
                    "func",
                    "args"
                ]
            }
        },
        "numpy.lib.tests.test_utils": {
            "test_lookfor": [],
            "old_func": [
                "self",
                "x"
            ],
            "old_func2": [
                "self",
                "x"
            ],
            "old_func3": [
                "self",
                "x"
            ],
            "old_func4": [
                "self",
                "x"
            ],
            "old_func5": [
                "self",
                "x"
            ],
            "old_func6": [
                "self",
                "x"
            ],
            "test_deprecate_decorator": [],
            "test_deprecate_decorator_message": [],
            "test_deprecate_fn": [],
            "test_deprecate_help_indentation": [],
            "_compare_docs": [
                "old_func",
                "new_func"
            ],
            "test_deprecate_preserve_whitespace": [],
            "test_safe_eval_nameconstant": [],
            "test_assert_raises_regex_context_manager": [],
            "TestByteBounds": {
                "test_byte_bounds": [
                    "self"
                ],
                "test_unusual_order_positive_stride": [
                    "self"
                ],
                "test_unusual_order_negative_stride": [
                    "self"
                ],
                "test_strided": [
                    "self"
                ]
            }
        },
        "numpy.lib.tests.test_io": {
            "strptime": [
                "s",
                "fmt"
            ],
            "test_gzip_load": [],
            "test_ducktyping": [],
            "test_gzip_loadtxt": [],
            "test_gzip_loadtxt_from_string": [],
            "test_npzfile_dict": [],
            "test_load_refcount": [],
            "TextIO": {
                "__init__": [
                    "self",
                    "s"
                ],
                "write": [
                    "self",
                    "s"
                ],
                "writelines": [
                    "self",
                    "lines"
                ]
            },
            "RoundtripTest": {
                "roundtrip": [
                    "self",
                    "save_func"
                ],
                "check_roundtrips": [
                    "self",
                    "a"
                ],
                "test_array": [
                    "self"
                ],
                "test_array_object": [
                    "self"
                ],
                "test_1D": [
                    "self"
                ],
                "test_mmap": [
                    "self"
                ],
                "test_record": [
                    "self"
                ],
                "test_format_2_0": [
                    "self"
                ]
            },
            "TestSaveLoad": {
                "roundtrip": [
                    "self"
                ]
            },
            "TestSavezLoad": {
                "roundtrip": [
                    "self"
                ],
                "test_big_arrays": [
                    "self"
                ],
                "test_multiple_arrays": [
                    "self"
                ],
                "test_named_arrays": [
                    "self"
                ],
                "test_BagObj": [
                    "self"
                ],
                "test_savez_filename_clashes": [
                    "self"
                ],
                "test_not_closing_opened_fid": [
                    "self"
                ],
                "test_closing_fid": [
                    "self"
                ],
                "test_closing_zipfile_after_load": [
                    "self"
                ]
            },
            "TestSaveTxt": {
                "test_array": [
                    "self"
                ],
                "test_1D": [
                    "self"
                ],
                "test_0D_3D": [
                    "self"
                ],
                "test_structured": [
                    "self"
                ],
                "test_structured_padded": [
                    "self"
                ],
                "test_multifield_view": [
                    "self"
                ],
                "test_delimiter": [
                    "self"
                ],
                "test_format": [
                    "self"
                ],
                "test_header_footer": [
                    "self"
                ],
                "test_file_roundtrip": [
                    "self"
                ],
                "test_complex_arrays": [
                    "self"
                ],
                "test_complex_negative_exponent": [
                    "self"
                ],
                "test_custom_writer": [
                    "self"
                ],
                "test_unicode": [
                    "self"
                ],
                "test_unicode_roundtrip": [
                    "self"
                ],
                "test_unicode_bytestream": [
                    "self"
                ],
                "test_unicode_stringstream": [
                    "self"
                ],
                "test_unicode_and_bytes_fmt": [
                    "self",
                    "fmt",
                    "iotype"
                ],
                "test_large_zip": [
                    "self"
                ]
            },
            "LoadTxtBase": {
                "check_compressed": [
                    "self",
                    "fopen",
                    "suffixes"
                ],
                "test_compressed_gzip": [
                    "self"
                ],
                "test_compressed_bz2": [
                    "self"
                ],
                "test_compressed_lzma": [
                    "self"
                ],
                "test_encoding": [
                    "self"
                ],
                "test_stringload": [
                    "self"
                ],
                "test_binary_decode": [
                    "self"
                ],
                "test_converters_decode": [
                    "self"
                ],
                "test_converters_nodecode": [
                    "self"
                ]
            },
            "TestLoadTxt": {
                "setup": [
                    "self"
                ],
                "teardown": [
                    "self"
                ],
                "test_record": [
                    "self"
                ],
                "test_array": [
                    "self"
                ],
                "test_1D": [
                    "self"
                ],
                "test_missing": [
                    "self"
                ],
                "test_converters_with_usecols": [
                    "self"
                ],
                "test_comments_unicode": [
                    "self"
                ],
                "test_comments_byte": [
                    "self"
                ],
                "test_comments_multiple": [
                    "self"
                ],
                "test_comments_multi_chars": [
                    "self"
                ],
                "test_skiprows": [
                    "self"
                ],
                "test_usecols": [
                    "self"
                ],
                "test_fancy_dtype": [
                    "self"
                ],
                "test_shaped_dtype": [
                    "self"
                ],
                "test_3d_shaped_dtype": [
                    "self"
                ],
                "test_str_dtype": [
                    "self"
                ],
                "test_empty_file": [
                    "self"
                ],
                "test_unused_converter": [
                    "self"
                ],
                "test_dtype_with_object": [
                    "self"
                ],
                "test_uint64_type": [
                    "self"
                ],
                "test_int64_type": [
                    "self"
                ],
                "test_from_float_hex": [
                    "self"
                ],
                "test_from_complex": [
                    "self"
                ],
                "test_complex_misformatted": [
                    "self"
                ],
                "test_universal_newline": [
                    "self"
                ],
                "test_empty_field_after_tab": [
                    "self"
                ],
                "test_structure_unpack": [
                    "self"
                ],
                "test_ndmin_keyword": [
                    "self"
                ],
                "test_generator_source": [
                    "self"
                ],
                "test_bad_line": [
                    "self"
                ],
                "test_none_as_string": [
                    "self"
                ],
                "test_binary_load": [
                    "self"
                ],
                "test_max_rows": [
                    "self"
                ],
                "test_max_rows_with_skiprows": [
                    "self"
                ],
                "test_max_rows_with_read_continuation": [
                    "self"
                ],
                "test_max_rows_larger": [
                    "self"
                ]
            },
            "Testfromregex": {
                "test_record": [
                    "self"
                ],
                "test_record_2": [
                    "self"
                ],
                "test_record_3": [
                    "self"
                ],
                "test_record_unicode": [
                    "self"
                ],
                "test_compiled_bytes": [
                    "self"
                ]
            },
            "TestFromTxt": {
                "test_record": [
                    "self"
                ],
                "test_array": [
                    "self"
                ],
                "test_1D": [
                    "self"
                ],
                "test_comments": [
                    "self"
                ],
                "test_skiprows": [
                    "self"
                ],
                "test_skip_footer": [
                    "self"
                ],
                "test_skip_footer_with_invalid": [
                    "self"
                ],
                "test_header": [
                    "self"
                ],
                "test_auto_dtype": [
                    "self"
                ],
                "test_auto_dtype_uniform": [
                    "self"
                ],
                "test_fancy_dtype": [
                    "self"
                ],
                "test_names_overwrite": [
                    "self"
                ],
                "test_commented_header": [
                    "self"
                ],
                "test_names_and_comments_none": [
                    "self"
                ],
                "test_file_is_closed_on_error": [
                    "self"
                ],
                "test_autonames_and_usecols": [
                    "self"
                ],
                "test_converters_with_usecols": [
                    "self"
                ],
                "test_converters_with_usecols_and_names": [
                    "self"
                ],
                "test_converters_cornercases": [
                    "self"
                ],
                "test_converters_cornercases2": [
                    "self"
                ],
                "test_unused_converter": [
                    "self"
                ],
                "test_invalid_converter": [
                    "self"
                ],
                "test_tricky_converter_bug1666": [
                    "self"
                ],
                "test_dtype_with_converters": [
                    "self"
                ],
                "test_dtype_with_converters_and_usecols": [
                    "self"
                ],
                "test_dtype_with_object": [
                    "self"
                ],
                "test_userconverters_with_explicit_dtype": [
                    "self"
                ],
                "test_utf8_userconverters_with_explicit_dtype": [
                    "self"
                ],
                "test_spacedelimiter": [
                    "self"
                ],
                "test_integer_delimiter": [
                    "self"
                ],
                "test_missing": [
                    "self"
                ],
                "test_missing_with_tabs": [
                    "self"
                ],
                "test_usecols": [
                    "self"
                ],
                "test_usecols_as_css": [
                    "self"
                ],
                "test_usecols_with_structured_dtype": [
                    "self"
                ],
                "test_usecols_with_integer": [
                    "self"
                ],
                "test_usecols_with_named_columns": [
                    "self"
                ],
                "test_empty_file": [
                    "self"
                ],
                "test_fancy_dtype_alt": [
                    "self"
                ],
                "test_shaped_dtype": [
                    "self"
                ],
                "test_withmissing": [
                    "self"
                ],
                "test_user_missing_values": [
                    "self"
                ],
                "test_user_filling_values": [
                    "self"
                ],
                "test_withmissing_float": [
                    "self"
                ],
                "test_with_masked_column_uniform": [
                    "self"
                ],
                "test_with_masked_column_various": [
                    "self"
                ],
                "test_invalid_raise": [
                    "self"
                ],
                "test_invalid_raise_with_usecols": [
                    "self"
                ],
                "test_inconsistent_dtype": [
                    "self"
                ],
                "test_default_field_format": [
                    "self"
                ],
                "test_single_dtype_wo_names": [
                    "self"
                ],
                "test_single_dtype_w_explicit_names": [
                    "self"
                ],
                "test_single_dtype_w_implicit_names": [
                    "self"
                ],
                "test_easy_structured_dtype": [
                    "self"
                ],
                "test_autostrip": [
                    "self"
                ],
                "test_replace_space": [
                    "self"
                ],
                "test_replace_space_known_dtype": [
                    "self"
                ],
                "test_incomplete_names": [
                    "self"
                ],
                "test_names_auto_completion": [
                    "self"
                ],
                "test_names_with_usecols_bug1636": [
                    "self"
                ],
                "test_fixed_width_names": [
                    "self"
                ],
                "test_filling_values": [
                    "self"
                ],
                "test_comments_is_none": [
                    "self"
                ],
                "test_latin1": [
                    "self"
                ],
                "test_binary_decode_autodtype": [
                    "self"
                ],
                "test_utf8_byte_encoding": [
                    "self"
                ],
                "test_utf8_file": [
                    "self"
                ],
                "test_utf8_file_nodtype_unicode": [
                    "self"
                ],
                "test_recfromtxt": [
                    "self"
                ],
                "test_recfromcsv": [
                    "self"
                ],
                "test_max_rows": [
                    "self"
                ],
                "test_gft_using_filename": [
                    "self"
                ],
                "test_gft_from_gzip": [
                    "self"
                ],
                "test_gft_using_generator": [
                    "self"
                ],
                "test_auto_dtype_largeint": [
                    "self"
                ]
            },
            "TestPathUsage": {
                "test_loadtxt": [
                    "self"
                ],
                "test_save_load": [
                    "self"
                ],
                "test_save_load_memmap": [
                    "self"
                ],
                "test_save_load_memmap_readwrite": [
                    "self"
                ],
                "test_savez_load": [
                    "self"
                ],
                "test_savez_compressed_load": [
                    "self"
                ],
                "test_genfromtxt": [
                    "self"
                ],
                "test_ndfromtxt": [
                    "self"
                ],
                "test_mafromtxt": [
                    "self"
                ],
                "test_recfromtxt": [
                    "self"
                ],
                "test_recfromcsv": [
                    "self"
                ]
            },
            "JustWriter": {
                "__init__": [
                    "self",
                    "base"
                ],
                "write": [
                    "self",
                    "s"
                ],
                "flush": [
                    "self"
                ]
            },
            "JustReader": {
                "__init__": [
                    "self",
                    "base"
                ],
                "read": [
                    "self",
                    "n"
                ],
                "seek": [
                    "self",
                    "off",
                    "whence"
                ]
            }
        },
        "numpy.lib.tests.test_regression": {
            "TestRegression": {
                "test_poly1d": [
                    "self"
                ],
                "test_cov_parameters": [
                    "self"
                ],
                "test_mem_digitize": [
                    "self"
                ],
                "test_unique_zero_sized": [
                    "self"
                ],
                "test_mem_vectorise": [
                    "self"
                ],
                "test_mgrid_single_element": [
                    "self"
                ],
                "test_refcount_vectorize": [
                    "self"
                ],
                "test_poly1d_nan_roots": [
                    "self"
                ],
                "test_mem_polymul": [
                    "self"
                ],
                "test_mem_string_concat": [
                    "self"
                ],
                "test_poly_div": [
                    "self"
                ],
                "test_poly_eq": [
                    "self"
                ],
                "test_polyfit_build": [
                    "self"
                ],
                "test_polydiv_type": [
                    "self"
                ],
                "test_histogramdd_too_many_bins": [
                    "self"
                ],
                "test_polyint_type": [
                    "self"
                ],
                "test_ndenumerate_crash": [
                    "self"
                ],
                "test_asfarray_none": [
                    "self"
                ],
                "test_large_fancy_indexing": [
                    "self"
                ],
                "test_void_coercion": [
                    "self"
                ],
                "test_who_with_0dim_array": [
                    "self"
                ],
                "test_include_dirs": [
                    "self"
                ],
                "test_polyder_return_type": [
                    "self"
                ],
                "test_append_fields_dtype_list": [
                    "self"
                ],
                "test_loadtxt_fields_subarrays": [
                    "self"
                ],
                "test_nansum_with_boolean": [
                    "self"
                ],
                "test_py3_compat": [
                    "self"
                ]
            }
        },
        "numpy.lib.tests": {},
        "numpy.lib.tests.test_function_base": {
            "get_mat": [
                "n"
            ],
            "_make_complex": [
                "real",
                "imag"
            ],
            "compare_results": [
                "res",
                "desired"
            ],
            "TestRot90": {
                "test_basic": [
                    "self"
                ],
                "test_axes": [
                    "self"
                ],
                "test_rotation_axes": [
                    "self"
                ]
            },
            "TestFlip": {
                "test_axes": [
                    "self"
                ],
                "test_basic_lr": [
                    "self"
                ],
                "test_basic_ud": [
                    "self"
                ],
                "test_3d_swap_axis0": [
                    "self"
                ],
                "test_3d_swap_axis1": [
                    "self"
                ],
                "test_3d_swap_axis2": [
                    "self"
                ],
                "test_4d": [
                    "self"
                ],
                "test_default_axis": [
                    "self"
                ],
                "test_multiple_axes": [
                    "self"
                ]
            },
            "TestAny": {
                "test_basic": [
                    "self"
                ],
                "test_nd": [
                    "self"
                ]
            },
            "TestAll": {
                "test_basic": [
                    "self"
                ],
                "test_nd": [
                    "self"
                ]
            },
            "TestCopy": {
                "test_basic": [
                    "self"
                ],
                "test_order": [
                    "self"
                ]
            },
            "TestAverage": {
                "test_basic": [
                    "self"
                ],
                "test_weights": [
                    "self"
                ],
                "test_returned": [
                    "self"
                ],
                "test_subclasses": [
                    "self"
                ],
                "test_upcasting": [
                    "self"
                ],
                "test_object_dtype": [
                    "self"
                ]
            },
            "TestSelect": {
                "_select": [
                    "self",
                    "cond",
                    "values",
                    "default"
                ],
                "test_basic": [
                    "self"
                ],
                "test_broadcasting": [
                    "self"
                ],
                "test_return_dtype": [
                    "self"
                ],
                "test_deprecated_empty": [
                    "self"
                ],
                "test_non_bool_deprecation": [
                    "self"
                ],
                "test_many_arguments": [
                    "self"
                ]
            },
            "TestInsert": {
                "test_basic": [
                    "self"
                ],
                "test_multidim": [
                    "self"
                ],
                "test_0d": [
                    "self"
                ],
                "test_subclass": [
                    "self"
                ],
                "test_index_array_copied": [
                    "self"
                ],
                "test_structured_array": [
                    "self"
                ]
            },
            "TestAmax": {
                "test_basic": [
                    "self"
                ]
            },
            "TestAmin": {
                "test_basic": [
                    "self"
                ]
            },
            "TestPtp": {
                "test_basic": [
                    "self"
                ]
            },
            "TestCumsum": {
                "test_basic": [
                    "self"
                ]
            },
            "TestProd": {
                "test_basic": [
                    "self"
                ]
            },
            "TestCumprod": {
                "test_basic": [
                    "self"
                ]
            },
            "TestDiff": {
                "test_basic": [
                    "self"
                ],
                "test_axis": [
                    "self"
                ],
                "test_nd": [
                    "self"
                ],
                "test_n": [
                    "self"
                ],
                "test_times": [
                    "self"
                ],
                "test_subclass": [
                    "self"
                ],
                "test_prepend": [
                    "self"
                ],
                "test_append": [
                    "self"
                ]
            },
            "TestDelete": {
                "setup": [
                    "self"
                ],
                "_check_inverse_of_slicing": [
                    "self",
                    "indices"
                ],
                "test_slices": [
                    "self"
                ],
                "test_fancy": [
                    "self"
                ],
                "test_single": [
                    "self"
                ],
                "test_0d": [
                    "self"
                ],
                "test_subclass": [
                    "self"
                ],
                "test_array_order_preserve": [
                    "self"
                ]
            },
            "TestGradient": {
                "test_basic": [
                    "self"
                ],
                "test_args": [
                    "self"
                ],
                "test_badargs": [
                    "self"
                ],
                "test_datetime64": [
                    "self"
                ],
                "test_masked": [
                    "self"
                ],
                "test_second_order_accurate": [
                    "self"
                ],
                "test_spacing": [
                    "self"
                ],
                "test_specific_axes": [
                    "self"
                ],
                "test_timedelta64": [
                    "self"
                ],
                "test_inexact_dtypes": [
                    "self"
                ],
                "test_values": [
                    "self"
                ]
            },
            "TestAngle": {
                "test_basic": [
                    "self"
                ],
                "test_subclass": [
                    "self"
                ]
            },
            "TestTrimZeros": {
                "test_basic": [
                    "self"
                ],
                "test_leading_skip": [
                    "self"
                ],
                "test_trailing_skip": [
                    "self"
                ]
            },
            "TestExtins": {
                "test_basic": [
                    "self"
                ],
                "test_place": [
                    "self"
                ],
                "test_both": [
                    "self"
                ]
            },
            "TestVectorize": {
                "test_simple": [
                    "self"
                ],
                "test_scalar": [
                    "self"
                ],
                "test_large": [
                    "self"
                ],
                "test_ufunc": [
                    "self"
                ],
                "test_keywords": [
                    "self"
                ],
                "test_keywords_no_func_code": [
                    "self"
                ],
                "test_keywords2_ticket_2100": [
                    "self"
                ],
                "test_keywords3_ticket_2100": [
                    "self"
                ],
                "test_keywords4_ticket_2100": [
                    "self"
                ],
                "test_keywords5_ticket_2100": [
                    "self"
                ],
                "test_coverage1_ticket_2100": [
                    "self"
                ],
                "test_assigning_docstring": [
                    "self"
                ],
                "test_UnboundMethod_ticket_1156": [
                    "self"
                ],
                "test_execution_order_ticket_1487": [
                    "self"
                ],
                "test_string_ticket_1892": [
                    "self"
                ],
                "test_cache": [
                    "self"
                ],
                "test_otypes": [
                    "self"
                ],
                "test_parse_gufunc_signature": [
                    "self"
                ],
                "test_signature_simple": [
                    "self"
                ],
                "test_signature_mean_last": [
                    "self"
                ],
                "test_signature_center": [
                    "self"
                ],
                "test_signature_two_outputs": [
                    "self"
                ],
                "test_signature_outer": [
                    "self"
                ],
                "test_signature_computed_size": [
                    "self"
                ],
                "test_signature_excluded": [
                    "self"
                ],
                "test_signature_otypes": [
                    "self"
                ],
                "test_signature_invalid_inputs": [
                    "self"
                ],
                "test_signature_invalid_outputs": [
                    "self"
                ],
                "test_size_zero_output": [
                    "self"
                ]
            },
            "TestLeaks": {
                "test_frompyfunc_leaks": [
                    "self",
                    "name",
                    "incr"
                ]
            },
            "TestDigitize": {
                "test_forward": [
                    "self"
                ],
                "test_reverse": [
                    "self"
                ],
                "test_random": [
                    "self"
                ],
                "test_right_basic": [
                    "self"
                ],
                "test_right_open": [
                    "self"
                ],
                "test_right_open_reverse": [
                    "self"
                ],
                "test_right_open_random": [
                    "self"
                ],
                "test_monotonic": [
                    "self"
                ],
                "test_casting_error": [
                    "self"
                ],
                "test_return_type": [
                    "self"
                ],
                "test_large_integers_increasing": [
                    "self"
                ],
                "test_large_integers_decreasing": [
                    "self"
                ]
            },
            "TestUnwrap": {
                "test_simple": [
                    "self"
                ]
            },
            "TestFilterwindows": {
                "test_hanning": [
                    "self"
                ],
                "test_hamming": [
                    "self"
                ],
                "test_bartlett": [
                    "self"
                ],
                "test_blackman": [
                    "self"
                ]
            },
            "TestTrapz": {
                "test_simple": [
                    "self"
                ],
                "test_ndim": [
                    "self"
                ],
                "test_masked": [
                    "self"
                ]
            },
            "TestSinc": {
                "test_simple": [
                    "self"
                ],
                "test_array_like": [
                    "self"
                ]
            },
            "TestUnique": {
                "test_simple": [
                    "self"
                ]
            },
            "TestCheckFinite": {
                "test_simple": [
                    "self"
                ],
                "test_dtype_order": [
                    "self"
                ]
            },
            "TestCorrCoef": {
                "test_non_array": [
                    "self"
                ],
                "test_simple": [
                    "self"
                ],
                "test_ddof": [
                    "self"
                ],
                "test_bias": [
                    "self"
                ],
                "test_complex": [
                    "self"
                ],
                "test_xy": [
                    "self"
                ],
                "test_empty": [
                    "self"
                ],
                "test_extreme": [
                    "self"
                ]
            },
            "TestCov": {
                "test_basic": [
                    "self"
                ],
                "test_complex": [
                    "self"
                ],
                "test_xy": [
                    "self"
                ],
                "test_empty": [
                    "self"
                ],
                "test_wrong_ddof": [
                    "self"
                ],
                "test_1D_rowvar": [
                    "self"
                ],
                "test_1D_variance": [
                    "self"
                ],
                "test_fweights": [
                    "self"
                ],
                "test_aweights": [
                    "self"
                ],
                "test_unit_fweights_and_aweights": [
                    "self"
                ]
            },
            "Test_I0": {
                "test_simple": [
                    "self"
                ],
                "test_non_array": [
                    "self"
                ]
            },
            "TestKaiser": {
                "test_simple": [
                    "self"
                ],
                "test_int_beta": [
                    "self"
                ]
            },
            "TestMsort": {
                "test_simple": [
                    "self"
                ]
            },
            "TestMeshgrid": {
                "test_simple": [
                    "self"
                ],
                "test_single_input": [
                    "self"
                ],
                "test_no_input": [
                    "self"
                ],
                "test_indexing": [
                    "self"
                ],
                "test_sparse": [
                    "self"
                ],
                "test_invalid_arguments": [
                    "self"
                ],
                "test_return_type": [
                    "self"
                ],
                "test_writeback": [
                    "self"
                ]
            },
            "TestPiecewise": {
                "test_simple": [
                    "self"
                ],
                "test_two_conditions": [
                    "self"
                ],
                "test_scalar_domains_three_conditions": [
                    "self"
                ],
                "test_default": [
                    "self"
                ],
                "test_0d": [
                    "self"
                ],
                "test_0d_comparison": [
                    "self"
                ],
                "test_0d_0d_condition": [
                    "self"
                ],
                "test_multidimensional_extrafunc": [
                    "self"
                ]
            },
            "TestBincount": {
                "test_simple": [
                    "self"
                ],
                "test_simple2": [
                    "self"
                ],
                "test_simple_weight": [
                    "self"
                ],
                "test_simple_weight2": [
                    "self"
                ],
                "test_with_minlength": [
                    "self"
                ],
                "test_with_minlength_smaller_than_maxvalue": [
                    "self"
                ],
                "test_with_minlength_and_weights": [
                    "self"
                ],
                "test_empty": [
                    "self"
                ],
                "test_empty_with_minlength": [
                    "self"
                ],
                "test_with_incorrect_minlength": [
                    "self"
                ],
                "test_dtype_reference_leaks": [
                    "self"
                ]
            },
            "TestInterp": {
                "test_exceptions": [
                    "self"
                ],
                "test_basic": [
                    "self"
                ],
                "test_right_left_behavior": [
                    "self"
                ],
                "test_scalar_interpolation_point": [
                    "self"
                ],
                "test_non_finite_behavior_exact_x": [
                    "self"
                ],
                "sc": [
                    "self",
                    "request"
                ],
                "test_non_finite_any_nan": [
                    "self",
                    "sc"
                ],
                "test_non_finite_inf": [
                    "self",
                    "sc"
                ],
                "test_non_finite_half_inf_xf": [
                    "self",
                    "sc"
                ],
                "test_non_finite_half_inf_x": [
                    "self",
                    "sc"
                ],
                "test_non_finite_half_inf_f": [
                    "self",
                    "sc"
                ],
                "test_complex_interp": [
                    "self"
                ],
                "test_zero_dimensional_interpolation_point": [
                    "self"
                ],
                "test_if_len_x_is_small": [
                    "self"
                ],
                "test_period": [
                    "self"
                ]
            },
            "TestPercentile": {
                "test_basic": [
                    "self"
                ],
                "test_fraction": [
                    "self"
                ],
                "test_api": [
                    "self"
                ],
                "test_2D": [
                    "self"
                ],
                "test_linear": [
                    "self"
                ],
                "test_lower_higher": [
                    "self"
                ],
                "test_midpoint": [
                    "self"
                ],
                "test_nearest": [
                    "self"
                ],
                "test_sequence": [
                    "self"
                ],
                "test_axis": [
                    "self"
                ],
                "test_scalar_q": [
                    "self"
                ],
                "test_exception": [
                    "self"
                ],
                "test_percentile_list": [
                    "self"
                ],
                "test_percentile_out": [
                    "self"
                ],
                "test_percentile_empty_dim": [
                    "self"
                ],
                "test_percentile_no_overwrite": [
                    "self"
                ],
                "test_no_p_overwrite": [
                    "self"
                ],
                "test_percentile_overwrite": [
                    "self"
                ],
                "test_extended_axis": [
                    "self"
                ],
                "test_extended_axis_invalid": [
                    "self"
                ],
                "test_keepdims": [
                    "self"
                ],
                "test_out": [
                    "self"
                ],
                "test_out_nan": [
                    "self"
                ],
                "test_nan_behavior": [
                    "self"
                ]
            },
            "TestQuantile": {
                "test_basic": [
                    "self"
                ],
                "test_fraction": [
                    "self"
                ],
                "test_no_p_overwrite": [
                    "self"
                ]
            },
            "TestMedian": {
                "test_basic": [
                    "self"
                ],
                "test_axis_keyword": [
                    "self"
                ],
                "test_overwrite_keyword": [
                    "self"
                ],
                "test_array_like": [
                    "self"
                ],
                "test_subclass": [
                    "self"
                ],
                "test_out": [
                    "self"
                ],
                "test_out_nan": [
                    "self"
                ],
                "test_nan_behavior": [
                    "self"
                ],
                "test_empty": [
                    "self"
                ],
                "test_object": [
                    "self"
                ],
                "test_extended_axis": [
                    "self"
                ],
                "test_extended_axis_invalid": [
                    "self"
                ],
                "test_keepdims": [
                    "self"
                ]
            },
            "TestAdd_newdoc_ufunc": {
                "test_ufunc_arg": [
                    "self"
                ],
                "test_string_arg": [
                    "self"
                ]
            },
            "TestAdd_newdoc": {
                "test_add_doc": [
                    "self"
                ]
            },
            "TestSortComplex": {
                "test_sort_real": [
                    "self",
                    "type_in",
                    "type_out"
                ],
                "test_sort_complex": [
                    "self"
                ]
            }
        },
        "numpy.lib.tests.test_arraypad": {
            "test_legacy_vector_functionality": [],
            "test_unicode_mode": [],
            "test_object_input": [
                "mode"
            ],
            "test_kwargs": [
                "mode"
            ],
            "test_constant_zero_default": [],
            "test_unsupported_mode": [
                "mode"
            ],
            "test_non_contiguous_array": [
                "mode"
            ],
            "test_memory_layout_persistence": [
                "mode"
            ],
            "test_dtype_persistence": [
                "dtype",
                "mode"
            ],
            "TestAsPairs": {
                "test_single_value": [
                    "self"
                ],
                "test_two_values": [
                    "self"
                ],
                "test_with_none": [
                    "self"
                ],
                "test_pass_through": [
                    "self"
                ],
                "test_as_index": [
                    "self"
                ],
                "test_exceptions": [
                    "self"
                ]
            },
            "TestConditionalShortcuts": {
                "test_zero_padding_shortcuts": [
                    "self",
                    "mode"
                ],
                "test_shallow_statistic_range": [
                    "self",
                    "mode"
                ],
                "test_clip_statistic_range": [
                    "self",
                    "mode"
                ]
            },
            "TestStatistic": {
                "test_check_mean_stat_length": [
                    "self"
                ],
                "test_check_maximum_1": [
                    "self"
                ],
                "test_check_maximum_2": [
                    "self"
                ],
                "test_check_maximum_stat_length": [
                    "self"
                ],
                "test_check_minimum_1": [
                    "self"
                ],
                "test_check_minimum_2": [
                    "self"
                ],
                "test_check_minimum_stat_length": [
                    "self"
                ],
                "test_check_median": [
                    "self"
                ],
                "test_check_median_01": [
                    "self"
                ],
                "test_check_median_02": [
                    "self"
                ],
                "test_check_median_stat_length": [
                    "self"
                ],
                "test_check_mean_shape_one": [
                    "self"
                ],
                "test_check_mean_2": [
                    "self"
                ],
                "test_same_prepend_append": [
                    "self",
                    "mode"
                ],
                "test_check_negative_stat_length": [
                    "self",
                    "mode",
                    "stat_length"
                ],
                "test_simple_stat_length": [
                    "self"
                ],
                "test_zero_stat_length_valid": [
                    "self",
                    "mode"
                ],
                "test_zero_stat_length_invalid": [
                    "self",
                    "mode"
                ]
            },
            "TestConstant": {
                "test_check_constant": [
                    "self"
                ],
                "test_check_constant_zeros": [
                    "self"
                ],
                "test_check_constant_float": [
                    "self"
                ],
                "test_check_constant_float2": [
                    "self"
                ],
                "test_check_constant_float3": [
                    "self"
                ],
                "test_check_constant_odd_pad_amount": [
                    "self"
                ],
                "test_check_constant_pad_2d": [
                    "self"
                ],
                "test_check_large_integers": [
                    "self"
                ],
                "test_check_object_array": [
                    "self"
                ],
                "test_pad_empty_dimension": [
                    "self"
                ]
            },
            "TestLinearRamp": {
                "test_check_simple": [
                    "self"
                ],
                "test_check_2d": [
                    "self"
                ],
                "test_object_array": [
                    "self"
                ],
                "test_end_values": [
                    "self"
                ],
                "test_negative_difference": [
                    "self",
                    "dtype"
                ]
            },
            "TestReflect": {
                "test_check_simple": [
                    "self"
                ],
                "test_check_odd_method": [
                    "self"
                ],
                "test_check_large_pad": [
                    "self"
                ],
                "test_check_shape": [
                    "self"
                ],
                "test_check_01": [
                    "self"
                ],
                "test_check_02": [
                    "self"
                ],
                "test_check_03": [
                    "self"
                ]
            },
            "TestEmptyArray": {
                "test_pad_empty_dimension": [
                    "self",
                    "mode"
                ],
                "test_pad_non_empty_dimension": [
                    "self",
                    "mode"
                ]
            },
            "TestSymmetric": {
                "test_check_simple": [
                    "self"
                ],
                "test_check_odd_method": [
                    "self"
                ],
                "test_check_large_pad": [
                    "self"
                ],
                "test_check_large_pad_odd": [
                    "self"
                ],
                "test_check_shape": [
                    "self"
                ],
                "test_check_01": [
                    "self"
                ],
                "test_check_02": [
                    "self"
                ],
                "test_check_03": [
                    "self"
                ]
            },
            "TestWrap": {
                "test_check_simple": [
                    "self"
                ],
                "test_check_large_pad": [
                    "self"
                ],
                "test_check_01": [
                    "self"
                ],
                "test_check_02": [
                    "self"
                ],
                "test_pad_with_zero": [
                    "self"
                ],
                "test_repeated_wrapping": [
                    "self"
                ]
            },
            "TestEdge": {
                "test_check_simple": [
                    "self"
                ],
                "test_check_width_shape_1_2": [
                    "self"
                ]
            },
            "TestEmpty": {
                "test_simple": [
                    "self"
                ],
                "test_pad_empty_dimension": [
                    "self"
                ]
            },
            "TestPadWidth": {
                "test_misshaped_pad_width": [
                    "self",
                    "pad_width",
                    "mode"
                ],
                "test_misshaped_pad_width_2": [
                    "self",
                    "mode"
                ],
                "test_negative_pad_width": [
                    "self",
                    "pad_width",
                    "mode"
                ],
                "test_bad_type": [
                    "self",
                    "pad_width",
                    "mode"
                ],
                "test_pad_width_as_ndarray": [
                    "self"
                ],
                "test_zero_pad_width": [
                    "self",
                    "pad_width",
                    "mode"
                ]
            }
        },
        "numpy.lib.tests.test_shape_base": {
            "_add_keepdims": [
                "func"
            ],
            "compare_results": [
                "res",
                "desired"
            ],
            "TestTakeAlongAxis": {
                "test_argequivalent": [
                    "self"
                ],
                "test_invalid": [
                    "self"
                ],
                "test_empty": [
                    "self"
                ],
                "test_broadcast": [
                    "self"
                ]
            },
            "TestPutAlongAxis": {
                "test_replace_max": [
                    "self"
                ],
                "test_broadcast": [
                    "self"
                ]
            },
            "TestApplyAlongAxis": {
                "test_simple": [
                    "self"
                ],
                "test_simple101": [
                    "self"
                ],
                "test_3d": [
                    "self"
                ],
                "test_preserve_subclass": [
                    "self"
                ],
                "test_subclass": [
                    "self"
                ],
                "test_scalar_array": [
                    "self",
                    "cls"
                ],
                "test_0d_array": [
                    "self",
                    "cls"
                ],
                "test_axis_insertion": [
                    "self",
                    "cls"
                ],
                "test_subclass_preservation": [
                    "self"
                ],
                "test_axis_insertion_ma": [
                    "self"
                ],
                "test_tuple_func1d": [
                    "self"
                ],
                "test_empty": [
                    "self"
                ],
                "test_with_iterable_object": [
                    "self"
                ]
            },
            "TestApplyOverAxes": {
                "test_simple": [
                    "self"
                ]
            },
            "TestExpandDims": {
                "test_functionality": [
                    "self"
                ],
                "test_axis_tuple": [
                    "self"
                ],
                "test_axis_out_of_range": [
                    "self"
                ],
                "test_repeated_axis": [
                    "self"
                ],
                "test_subclasses": [
                    "self"
                ]
            },
            "TestArraySplit": {
                "test_integer_0_split": [
                    "self"
                ],
                "test_integer_split": [
                    "self"
                ],
                "test_integer_split_2D_rows": [
                    "self"
                ],
                "test_integer_split_2D_cols": [
                    "self"
                ],
                "test_integer_split_2D_default": [
                    "self"
                ],
                "test_integer_split_2D_rows_greater_max_int32": [
                    "self"
                ],
                "test_index_split_simple": [
                    "self"
                ],
                "test_index_split_low_bound": [
                    "self"
                ],
                "test_index_split_high_bound": [
                    "self"
                ]
            },
            "TestSplit": {
                "test_equal_split": [
                    "self"
                ],
                "test_unequal_split": [
                    "self"
                ]
            },
            "TestColumnStack": {
                "test_non_iterable": [
                    "self"
                ],
                "test_1D_arrays": [
                    "self"
                ],
                "test_2D_arrays": [
                    "self"
                ],
                "test_generator": [
                    "self"
                ]
            },
            "TestDstack": {
                "test_non_iterable": [
                    "self"
                ],
                "test_0D_array": [
                    "self"
                ],
                "test_1D_array": [
                    "self"
                ],
                "test_2D_array": [
                    "self"
                ],
                "test_2D_array2": [
                    "self"
                ],
                "test_generator": [
                    "self"
                ]
            },
            "TestHsplit": {
                "test_non_iterable": [
                    "self"
                ],
                "test_0D_array": [
                    "self"
                ],
                "test_1D_array": [
                    "self"
                ],
                "test_2D_array": [
                    "self"
                ]
            },
            "TestVsplit": {
                "test_non_iterable": [
                    "self"
                ],
                "test_0D_array": [
                    "self"
                ],
                "test_1D_array": [
                    "self"
                ],
                "test_2D_array": [
                    "self"
                ]
            },
            "TestDsplit": {
                "test_non_iterable": [
                    "self"
                ],
                "test_0D_array": [
                    "self"
                ],
                "test_1D_array": [
                    "self"
                ],
                "test_2D_array": [
                    "self"
                ],
                "test_3D_array": [
                    "self"
                ]
            },
            "TestSqueeze": {
                "test_basic": [
                    "self"
                ]
            },
            "TestKron": {
                "test_return_type": [
                    "self"
                ]
            },
            "TestTile": {
                "test_basic": [
                    "self"
                ],
                "test_tile_one_repetition_on_array_gh4679": [
                    "self"
                ],
                "test_empty": [
                    "self"
                ],
                "test_kroncompare": [
                    "self"
                ]
            },
            "TestMayShareMemory": {
                "test_basic": [
                    "self"
                ]
            }
        },
        "numpy.lib.tests.test_index_tricks": {
            "test_c_": [],
            "test_diag_indices": [],
            "test_ndindex": [],
            "TestRavelUnravelIndex": {
                "test_basic": [
                    "self"
                ],
                "test_empty_indices": [
                    "self"
                ],
                "test_big_indices": [
                    "self"
                ],
                "test_dtypes": [
                    "self"
                ],
                "test_clipmodes": [
                    "self"
                ],
                "test_writeability": [
                    "self"
                ],
                "test_0d": [
                    "self"
                ],
                "test_empty_array_ravel": [
                    "self",
                    "mode"
                ],
                "test_empty_array_unravel": [
                    "self"
                ]
            },
            "TestGrid": {
                "test_basic": [
                    "self"
                ],
                "test_linspace_equivalence": [
                    "self"
                ],
                "test_nd": [
                    "self"
                ],
                "test_sparse": [
                    "self"
                ],
                "test_mgrid_size_none_handling": [
                    "self",
                    "start",
                    "stop",
                    "step",
                    "expected"
                ]
            },
            "TestConcatenator": {
                "test_1d": [
                    "self"
                ],
                "test_mixed_type": [
                    "self"
                ],
                "test_more_mixed_type": [
                    "self"
                ],
                "test_complex_step": [
                    "self"
                ],
                "test_2d": [
                    "self"
                ],
                "test_0d": [
                    "self"
                ]
            },
            "TestNdenumerate": {
                "test_basic": [
                    "self"
                ]
            },
            "TestIndexExpression": {
                "test_regression_1": [
                    "self"
                ],
                "test_simple_1": [
                    "self"
                ]
            },
            "TestIx_": {
                "test_regression_1": [
                    "self"
                ],
                "test_shape_and_dtype": [
                    "self"
                ],
                "test_bool": [
                    "self"
                ],
                "test_1d_only": [
                    "self"
                ],
                "test_repeated_input": [
                    "self"
                ]
            },
            "TestFillDiagonal": {
                "test_basic": [
                    "self"
                ],
                "test_tall_matrix": [
                    "self"
                ],
                "test_tall_matrix_wrap": [
                    "self"
                ],
                "test_wide_matrix": [
                    "self"
                ],
                "test_operate_4d_array": [
                    "self"
                ],
                "test_low_dim_handling": [
                    "self"
                ],
                "test_hetero_shape_handling": [
                    "self"
                ]
            },
            "TestDiagIndicesFrom": {
                "test_diag_indices_from": [
                    "self"
                ],
                "test_error_small_input": [
                    "self"
                ],
                "test_error_shape_mismatch": [
                    "self"
                ]
            }
        },
        "numpy.lib.tests.test_type_check": {
            "assert_all": [
                "x"
            ],
            "TestCommonType": {
                "test_basic": [
                    "self"
                ]
            },
            "TestMintypecode": {
                "test_default_1": [
                    "self"
                ],
                "test_default_2": [
                    "self"
                ],
                "test_default_3": [
                    "self"
                ]
            },
            "TestIsscalar": {
                "test_basic": [
                    "self"
                ]
            },
            "TestReal": {
                "test_real": [
                    "self"
                ],
                "test_cmplx": [
                    "self"
                ]
            },
            "TestImag": {
                "test_real": [
                    "self"
                ],
                "test_cmplx": [
                    "self"
                ]
            },
            "TestIscomplex": {
                "test_fail": [
                    "self"
                ],
                "test_pass": [
                    "self"
                ]
            },
            "TestIsreal": {
                "test_pass": [
                    "self"
                ],
                "test_fail": [
                    "self"
                ]
            },
            "TestIscomplexobj": {
                "test_basic": [
                    "self"
                ],
                "test_scalar": [
                    "self"
                ],
                "test_list": [
                    "self"
                ],
                "test_duck": [
                    "self"
                ],
                "test_pandas_duck": [
                    "self"
                ],
                "test_custom_dtype_duck": [
                    "self"
                ]
            },
            "TestIsrealobj": {
                "test_basic": [
                    "self"
                ]
            },
            "TestIsnan": {
                "test_goodvalues": [
                    "self"
                ],
                "test_posinf": [
                    "self"
                ],
                "test_neginf": [
                    "self"
                ],
                "test_ind": [
                    "self"
                ],
                "test_integer": [
                    "self"
                ],
                "test_complex": [
                    "self"
                ],
                "test_complex1": [
                    "self"
                ]
            },
            "TestIsfinite": {
                "test_goodvalues": [
                    "self"
                ],
                "test_posinf": [
                    "self"
                ],
                "test_neginf": [
                    "self"
                ],
                "test_ind": [
                    "self"
                ],
                "test_integer": [
                    "self"
                ],
                "test_complex": [
                    "self"
                ],
                "test_complex1": [
                    "self"
                ]
            },
            "TestIsinf": {
                "test_goodvalues": [
                    "self"
                ],
                "test_posinf": [
                    "self"
                ],
                "test_posinf_scalar": [
                    "self"
                ],
                "test_neginf": [
                    "self"
                ],
                "test_neginf_scalar": [
                    "self"
                ],
                "test_ind": [
                    "self"
                ]
            },
            "TestIsposinf": {
                "test_generic": [
                    "self"
                ]
            },
            "TestIsneginf": {
                "test_generic": [
                    "self"
                ]
            },
            "TestNanToNum": {
                "test_generic": [
                    "self"
                ],
                "test_array": [
                    "self"
                ],
                "test_integer": [
                    "self"
                ],
                "test_float": [
                    "self"
                ],
                "test_complex_good": [
                    "self"
                ],
                "test_complex_bad": [
                    "self"
                ],
                "test_complex_bad2": [
                    "self"
                ],
                "test_do_not_rewrite_previous_keyword": [
                    "self"
                ]
            },
            "TestRealIfClose": {
                "test_basic": [
                    "self"
                ]
            },
            "TestArrayConversion": {
                "test_asfarray": [
                    "self"
                ]
            }
        },
        "numpy.lib.tests.test_recfunctions": {
            "TestRecFunctions": {
                "setup": [
                    "self"
                ],
                "test_zip_descr": [
                    "self"
                ],
                "test_drop_fields": [
                    "self"
                ],
                "test_rename_fields": [
                    "self"
                ],
                "test_get_names": [
                    "self"
                ],
                "test_get_names_flat": [
                    "self"
                ],
                "test_get_fieldstructure": [
                    "self"
                ],
                "test_find_duplicates": [
                    "self"
                ],
                "test_find_duplicates_ignoremask": [
                    "self"
                ],
                "test_repack_fields": [
                    "self"
                ],
                "test_structured_to_unstructured": [
                    "self"
                ],
                "test_field_assignment_by_name": [
                    "self"
                ]
            },
            "TestRecursiveFillFields": {
                "test_simple_flexible": [
                    "self"
                ],
                "test_masked_flexible": [
                    "self"
                ]
            },
            "TestMergeArrays": {
                "setup": [
                    "self"
                ],
                "test_solo": [
                    "self"
                ],
                "test_solo_w_flatten": [
                    "self"
                ],
                "test_standard": [
                    "self"
                ],
                "test_flatten": [
                    "self"
                ],
                "test_flatten_wflexible": [
                    "self"
                ],
                "test_wmasked_arrays": [
                    "self"
                ],
                "test_w_singlefield": [
                    "self"
                ],
                "test_w_shorter_flex": [
                    "self"
                ],
                "test_singlerecord": [
                    "self"
                ]
            },
            "TestAppendFields": {
                "setup": [
                    "self"
                ],
                "test_append_single": [
                    "self"
                ],
                "test_append_double": [
                    "self"
                ],
                "test_append_on_flex": [
                    "self"
                ],
                "test_append_on_nested": [
                    "self"
                ]
            },
            "TestStackArrays": {
                "setup": [
                    "self"
                ],
                "test_solo": [
                    "self"
                ],
                "test_unnamed_fields": [
                    "self"
                ],
                "test_unnamed_and_named_fields": [
                    "self"
                ],
                "test_matching_named_fields": [
                    "self"
                ],
                "test_defaults": [
                    "self"
                ],
                "test_autoconversion": [
                    "self"
                ],
                "test_checktitles": [
                    "self"
                ],
                "test_subdtype": [
                    "self"
                ]
            },
            "TestJoinBy": {
                "setup": [
                    "self"
                ],
                "test_inner_join": [
                    "self"
                ],
                "test_join": [
                    "self"
                ],
                "test_join_subdtype": [
                    "self"
                ],
                "test_outer_join": [
                    "self"
                ],
                "test_leftouter_join": [
                    "self"
                ],
                "test_different_field_order": [
                    "self"
                ],
                "test_duplicate_keys": [
                    "self"
                ],
                "test_same_name_different_dtypes_key": [
                    "self"
                ],
                "test_same_name_different_dtypes": [
                    "self"
                ],
                "test_subarray_key": [
                    "self"
                ],
                "test_padded_dtype": [
                    "self"
                ]
            },
            "TestJoinBy2": {
                "setup": [
                    "cls"
                ],
                "test_no_r1postfix": [
                    "self"
                ],
                "test_no_postfix": [
                    "self"
                ],
                "test_no_r2postfix": [
                    "self"
                ],
                "test_two_keys_two_vars": [
                    "self"
                ]
            },
            "TestAppendFieldsObj": {
                "setup": [
                    "self"
                ],
                "test_append_to_objects": [
                    "self"
                ]
            }
        },
        "numpy.lib.tests.test__iotools": {
            "_bytes_to_date": [
                "s"
            ],
            "TestLineSplitter": {
                "test_no_delimiter": [
                    "self"
                ],
                "test_space_delimiter": [
                    "self"
                ],
                "test_tab_delimiter": [
                    "self"
                ],
                "test_other_delimiter": [
                    "self"
                ],
                "test_constant_fixed_width": [
                    "self"
                ],
                "test_variable_fixed_width": [
                    "self"
                ]
            },
            "TestNameValidator": {
                "test_case_sensitivity": [
                    "self"
                ],
                "test_excludelist": [
                    "self"
                ],
                "test_missing_names": [
                    "self"
                ],
                "test_validate_nb_names": [
                    "self"
                ],
                "test_validate_wo_names": [
                    "self"
                ]
            },
            "TestStringConverter": {
                "test_creation": [
                    "self"
                ],
                "test_upgrade": [
                    "self"
                ],
                "test_missing": [
                    "self"
                ],
                "test_upgrademapper": [
                    "self"
                ],
                "test_string_to_object": [
                    "self"
                ],
                "test_keep_default": [
                    "self"
                ],
                "test_keep_default_zero": [
                    "self"
                ],
                "test_keep_missing_values": [
                    "self"
                ],
                "test_int64_dtype": [
                    "self"
                ],
                "test_uint64_dtype": [
                    "self"
                ]
            },
            "TestMiscFunctions": {
                "test_has_nested_dtype": [
                    "self"
                ],
                "test_easy_dtype": [
                    "self"
                ],
                "test_flatten_dtype": [
                    "self"
                ]
            }
        },
        "numpy.lib.tests.test_polynomial": {
            "TestPolynomial": {
                "test_poly1d_str_and_repr": [
                    "self"
                ],
                "test_poly1d_resolution": [
                    "self"
                ],
                "test_poly1d_math": [
                    "self"
                ],
                "test_poly1d_misc": [
                    "self"
                ],
                "test_poly1d_variable_arg": [
                    "self"
                ],
                "test_poly": [
                    "self"
                ],
                "test_roots": [
                    "self"
                ],
                "test_str_leading_zeros": [
                    "self"
                ],
                "test_polyfit": [
                    "self"
                ],
                "test_objects": [
                    "self"
                ],
                "test_complex": [
                    "self"
                ],
                "test_integ_coeffs": [
                    "self"
                ],
                "test_zero_dims": [
                    "self"
                ],
                "test_poly_int_overflow": [
                    "self"
                ],
                "test_poly_eq": [
                    "self"
                ],
                "test_polydiv": [
                    "self"
                ],
                "test_poly_coeffs_mutable": [
                    "self"
                ]
            }
        },
        "numpy.lib.tests.test_twodim_base": {
            "get_mat": [
                "n"
            ],
            "test_tril_triu_ndim2": [],
            "test_tril_triu_ndim3": [],
            "test_tril_triu_with_inf": [],
            "test_tril_triu_dtype": [],
            "test_mask_indices": [],
            "test_tril_indices": [],
            "TestEye": {
                "test_basic": [
                    "self"
                ],
                "test_diag": [
                    "self"
                ],
                "test_2d": [
                    "self"
                ],
                "test_diag2d": [
                    "self"
                ],
                "test_eye_bounds": [
                    "self"
                ],
                "test_strings": [
                    "self"
                ],
                "test_bool": [
                    "self"
                ],
                "test_order": [
                    "self"
                ]
            },
            "TestDiag": {
                "test_vector": [
                    "self"
                ],
                "test_matrix": [
                    "self",
                    "vals"
                ],
                "test_fortran_order": [
                    "self"
                ],
                "test_diag_bounds": [
                    "self"
                ],
                "test_failure": [
                    "self"
                ]
            },
            "TestFliplr": {
                "test_basic": [
                    "self"
                ]
            },
            "TestFlipud": {
                "test_basic": [
                    "self"
                ]
            },
            "TestHistogram2d": {
                "test_simple": [
                    "self"
                ],
                "test_asym": [
                    "self"
                ],
                "test_density": [
                    "self"
                ],
                "test_all_outliers": [
                    "self"
                ],
                "test_empty": [
                    "self"
                ],
                "test_binparameter_combination": [
                    "self"
                ],
                "test_dispatch": [
                    "self"
                ]
            },
            "TestTri": {
                "test_dtype": [
                    "self"
                ]
            },
            "TestTriuIndices": {
                "test_triu_indices": [
                    "self"
                ]
            },
            "TestTrilIndicesFrom": {
                "test_exceptions": [
                    "self"
                ]
            },
            "TestTriuIndicesFrom": {
                "test_exceptions": [
                    "self"
                ]
            },
            "TestVander": {
                "test_basic": [
                    "self"
                ],
                "test_dtypes": [
                    "self"
                ]
            }
        },
        "numpy.lib.tests.test__datasource": {
            "urlopen_stub": [
                "url",
                "data"
            ],
            "setup_module": [],
            "teardown_module": [],
            "valid_textfile": [
                "filedir"
            ],
            "invalid_textfile": [
                "filedir"
            ],
            "valid_httpurl": [],
            "invalid_httpurl": [],
            "valid_baseurl": [],
            "invalid_baseurl": [],
            "valid_httpfile": [],
            "invalid_httpfile": [],
            "test_del_attr_handling": [],
            "TestDataSourceOpen": {
                "setup": [
                    "self"
                ],
                "teardown": [
                    "self"
                ],
                "test_ValidHTTP": [
                    "self"
                ],
                "test_InvalidHTTP": [
                    "self"
                ],
                "test_InvalidHTTPCacheURLError": [
                    "self"
                ],
                "test_ValidFile": [
                    "self"
                ],
                "test_InvalidFile": [
                    "self"
                ],
                "test_ValidGzipFile": [
                    "self"
                ],
                "test_ValidBz2File": [
                    "self"
                ],
                "test_Bz2File_text_mode_warning": [
                    "self"
                ]
            },
            "TestDataSourceExists": {
                "setup": [
                    "self"
                ],
                "teardown": [
                    "self"
                ],
                "test_ValidHTTP": [
                    "self"
                ],
                "test_InvalidHTTP": [
                    "self"
                ],
                "test_ValidFile": [
                    "self"
                ],
                "test_InvalidFile": [
                    "self"
                ]
            },
            "TestDataSourceAbspath": {
                "setup": [
                    "self"
                ],
                "teardown": [
                    "self"
                ],
                "test_ValidHTTP": [
                    "self"
                ],
                "test_ValidFile": [
                    "self"
                ],
                "test_InvalidHTTP": [
                    "self"
                ],
                "test_InvalidFile": [
                    "self"
                ],
                "test_sandboxing": [
                    "self"
                ],
                "test_windows_os_sep": [
                    "self"
                ]
            },
            "TestRepositoryAbspath": {
                "setup": [
                    "self"
                ],
                "teardown": [
                    "self"
                ],
                "test_ValidHTTP": [
                    "self"
                ],
                "test_sandboxing": [
                    "self"
                ],
                "test_windows_os_sep": [
                    "self"
                ]
            },
            "TestRepositoryExists": {
                "setup": [
                    "self"
                ],
                "teardown": [
                    "self"
                ],
                "test_ValidFile": [
                    "self"
                ],
                "test_InvalidFile": [
                    "self"
                ],
                "test_RemoveHTTPFile": [
                    "self"
                ],
                "test_CachedHTTPFile": [
                    "self"
                ]
            },
            "TestOpenFunc": {
                "setup": [
                    "self"
                ],
                "teardown": [
                    "self"
                ],
                "test_DataSourceOpen": [
                    "self"
                ]
            }
        },
        "numpy.lib.tests.test_financial": {
            "filter_deprecation": [
                "func"
            ],
            "TestFinancial": {
                "test_npv_irr_congruence": [
                    "self"
                ],
                "test_rate": [
                    "self"
                ],
                "test_rate_decimal": [
                    "self"
                ],
                "test_irr": [
                    "self"
                ],
                "test_pv": [
                    "self"
                ],
                "test_pv_decimal": [
                    "self"
                ],
                "test_fv": [
                    "self"
                ],
                "test_fv_decimal": [
                    "self"
                ],
                "test_pmt": [
                    "self"
                ],
                "test_pmt_decimal": [
                    "self"
                ],
                "test_ppmt": [
                    "self"
                ],
                "test_ppmt_decimal": [
                    "self"
                ],
                "test_ppmt_special_rate": [
                    "self"
                ],
                "test_ppmt_special_rate_decimal": [
                    "self"
                ],
                "test_ipmt": [
                    "self"
                ],
                "test_ipmt_decimal": [
                    "self"
                ],
                "test_nper": [
                    "self"
                ],
                "test_nper2": [
                    "self"
                ],
                "test_npv": [
                    "self"
                ],
                "test_npv_decimal": [
                    "self"
                ],
                "test_mirr": [
                    "self"
                ],
                "test_mirr_decimal": [
                    "self"
                ],
                "test_when": [
                    "self"
                ],
                "test_decimal_with_when": [
                    "self"
                ],
                "test_broadcast": [
                    "self"
                ],
                "test_broadcast_decimal": [
                    "self"
                ]
            }
        },
        "numpy.lib.tests.test_ufunclike": {
            "TestUfunclike": {
                "test_isposinf": [
                    "self"
                ],
                "test_isneginf": [
                    "self"
                ],
                "test_fix": [
                    "self"
                ],
                "test_fix_with_subclass": [
                    "self"
                ],
                "test_deprecated": [
                    "self"
                ],
                "test_scalar": [
                    "self"
                ]
            }
        },
        "numpy.lib.tests.test_histograms": {
            "TestHistogram": {
                "setup": [
                    "self"
                ],
                "teardown": [
                    "self"
                ],
                "test_simple": [
                    "self"
                ],
                "test_one_bin": [
                    "self"
                ],
                "test_normed": [
                    "self"
                ],
                "test_density": [
                    "self"
                ],
                "test_outliers": [
                    "self"
                ],
                "test_arr_weights_mismatch": [
                    "self"
                ],
                "test_type": [
                    "self"
                ],
                "test_f32_rounding": [
                    "self"
                ],
                "test_bool_conversion": [
                    "self"
                ],
                "test_weights": [
                    "self"
                ],
                "test_exotic_weights": [
                    "self"
                ],
                "test_no_side_effects": [
                    "self"
                ],
                "test_empty": [
                    "self"
                ],
                "test_error_binnum_type": [
                    "self"
                ],
                "test_finite_range": [
                    "self"
                ],
                "test_invalid_range": [
                    "self"
                ],
                "test_bin_edge_cases": [
                    "self"
                ],
                "test_last_bin_inclusive_range": [
                    "self"
                ],
                "test_bin_array_dims": [
                    "self"
                ],
                "test_unsigned_monotonicity_check": [
                    "self"
                ],
                "test_object_array_of_0d": [
                    "self"
                ],
                "test_some_nan_values": [
                    "self"
                ],
                "test_datetime": [
                    "self"
                ],
                "do_signed_overflow_bounds": [
                    "self",
                    "dtype"
                ],
                "test_signed_overflow_bounds": [
                    "self"
                ],
                "do_precision_lower_bound": [
                    "self",
                    "float_small",
                    "float_large"
                ],
                "do_precision_upper_bound": [
                    "self",
                    "float_small",
                    "float_large"
                ],
                "do_precision": [
                    "self",
                    "float_small",
                    "float_large"
                ],
                "test_precision": [
                    "self"
                ],
                "test_histogram_bin_edges": [
                    "self"
                ]
            },
            "TestHistogramOptimBinNums": {
                "test_empty": [
                    "self"
                ],
                "test_simple": [
                    "self"
                ],
                "test_small": [
                    "self"
                ],
                "test_incorrect_methods": [
                    "self"
                ],
                "test_novariance": [
                    "self"
                ],
                "test_limited_variance": [
                    "self"
                ],
                "test_outlier": [
                    "self"
                ],
                "test_scott_vs_stone": [
                    "self"
                ],
                "test_simple_range": [
                    "self"
                ],
                "test_signed_integer_data": [
                    "self",
                    "bins"
                ],
                "test_simple_weighted": [
                    "self"
                ]
            },
            "TestHistogramdd": {
                "test_simple": [
                    "self"
                ],
                "test_shape_3d": [
                    "self"
                ],
                "test_shape_4d": [
                    "self"
                ],
                "test_weights": [
                    "self"
                ],
                "test_identical_samples": [
                    "self"
                ],
                "test_empty": [
                    "self"
                ],
                "test_bins_errors": [
                    "self"
                ],
                "test_inf_edges": [
                    "self"
                ],
                "test_rightmost_binedge": [
                    "self"
                ],
                "test_finite_range": [
                    "self"
                ],
                "test_equal_edges": [
                    "self"
                ],
                "test_edge_dtype": [
                    "self"
                ],
                "test_large_integers": [
                    "self"
                ],
                "test_density_non_uniform_2d": [
                    "self"
                ],
                "test_density_non_uniform_1d": [
                    "self"
                ],
                "test_density_via_normed": [
                    "self"
                ],
                "test_density_normed_redundancy": [
                    "self"
                ]
            }
        },
        "numpy.lib.tests.test_mixins": {
            "wrap_array_like": [
                "result"
            ],
            "_assert_equal_type_and_value": [
                "result",
                "expected",
                "err_msg"
            ],
            "ArrayLike": {
                "__init__": [
                    "self",
                    "value"
                ],
                "__array_ufunc__": [
                    "self",
                    "ufunc",
                    "method"
                ],
                "__repr__": [
                    "self"
                ]
            },
            "TestNDArrayOperatorsMixin": {
                "test_array_like_add": [
                    "self"
                ],
                "test_inplace": [
                    "self"
                ],
                "test_opt_out": [
                    "self"
                ],
                "test_subclass": [
                    "self"
                ],
                "test_object": [
                    "self"
                ],
                "test_unary_methods": [
                    "self"
                ],
                "test_forward_binary_methods": [
                    "self"
                ],
                "test_reflected_binary_methods": [
                    "self"
                ],
                "test_matmul": [
                    "self"
                ],
                "test_ufunc_at": [
                    "self"
                ],
                "test_ufunc_two_outputs": [
                    "self"
                ]
            }
        },
        "numpy.lib.tests.test_arrayterator": {
            "test": []
        },
        "numpy.lib.tests.test_packbits": {
            "test_packbits": [],
            "test_packbits_empty": [],
            "test_packbits_empty_with_axis": [],
            "test_packbits_large": [
                "bitorder"
            ],
            "test_packbits_very_large": [],
            "test_unpackbits": [],
            "test_pack_unpack_order": [],
            "test_unpackbits_empty": [],
            "test_unpackbits_empty_with_axis": [],
            "test_unpackbits_large": [],
            "TestCount": {
                "test_roundtrip": [
                    "self",
                    "bitorder",
                    "count"
                ],
                "test_count": [
                    "self",
                    "kwargs"
                ],
                "test_roundtrip_axis": [
                    "self",
                    "bitorder",
                    "count"
                ],
                "test_axis_count": [
                    "self",
                    "kwargs"
                ],
                "test_bad_count": [
                    "self"
                ]
            }
        },
        "numpy.lib.tests.test_arraysetops": {
            "TestSetOps": {
                "test_intersect1d": [
                    "self"
                ],
                "test_intersect1d_array_like": [
                    "self"
                ],
                "test_intersect1d_indices": [
                    "self"
                ],
                "test_setxor1d": [
                    "self"
                ],
                "test_ediff1d": [
                    "self"
                ],
                "test_ediff1d_forbidden_type_casts": [
                    "self",
                    "ary",
                    "prepend",
                    "append"
                ],
                "test_ediff1d_scalar_handling": [
                    "self",
                    "ary",
                    "prepend",
                    "append",
                    "expected"
                ],
                "test_isin": [
                    "self"
                ],
                "test_in1d": [
                    "self"
                ],
                "test_in1d_char_array": [
                    "self"
                ],
                "test_in1d_invert": [
                    "self"
                ],
                "test_in1d_ravel": [
                    "self"
                ],
                "test_in1d_first_array_is_object": [
                    "self"
                ],
                "test_in1d_second_array_is_object": [
                    "self"
                ],
                "test_in1d_both_arrays_are_object": [
                    "self"
                ],
                "test_in1d_both_arrays_have_structured_dtype": [
                    "self"
                ],
                "test_union1d": [
                    "self"
                ],
                "test_setdiff1d": [
                    "self"
                ],
                "test_setdiff1d_unique": [
                    "self"
                ],
                "test_setdiff1d_char_array": [
                    "self"
                ],
                "test_manyways": [
                    "self"
                ]
            },
            "TestUnique": {
                "test_unique_1d": [
                    "self"
                ],
                "test_unique_axis_errors": [
                    "self"
                ],
                "test_unique_axis_list": [
                    "self"
                ],
                "test_unique_axis": [
                    "self"
                ],
                "test_unique_masked": [
                    "self"
                ],
                "test_unique_sort_order_with_axis": [
                    "self"
                ],
                "_run_axis_tests": [
                    "self",
                    "dtype"
                ]
            }
        },
        "numpy.lib.tests.test_nanfunctions": {
            "test__nan_mask": [
                "arr",
                "expected"
            ],
            "test__replace_nan": [],
            "TestNanFunctions_MinMax": {
                "test_mutation": [
                    "self"
                ],
                "test_keepdims": [
                    "self"
                ],
                "test_out": [
                    "self"
                ],
                "test_dtype_from_input": [
                    "self"
                ],
                "test_result_values": [
                    "self"
                ],
                "test_allnans": [
                    "self"
                ],
                "test_masked": [
                    "self"
                ],
                "test_scalar": [
                    "self"
                ],
                "test_subclass": [
                    "self"
                ],
                "test_object_array": [
                    "self"
                ]
            },
            "TestNanFunctions_ArgminArgmax": {
                "test_mutation": [
                    "self"
                ],
                "test_result_values": [
                    "self"
                ],
                "test_allnans": [
                    "self"
                ],
                "test_empty": [
                    "self"
                ],
                "test_scalar": [
                    "self"
                ],
                "test_subclass": [
                    "self"
                ]
            },
            "TestNanFunctions_IntTypes": {
                "integer_arrays": [
                    "self"
                ],
                "test_nanmin": [
                    "self"
                ],
                "test_nanmax": [
                    "self"
                ],
                "test_nanargmin": [
                    "self"
                ],
                "test_nanargmax": [
                    "self"
                ],
                "test_nansum": [
                    "self"
                ],
                "test_nanprod": [
                    "self"
                ],
                "test_nancumsum": [
                    "self"
                ],
                "test_nancumprod": [
                    "self"
                ],
                "test_nanmean": [
                    "self"
                ],
                "test_nanvar": [
                    "self"
                ],
                "test_nanstd": [
                    "self"
                ]
            },
            "SharedNanFunctionsTestsMixin": {
                "test_mutation": [
                    "self"
                ],
                "test_keepdims": [
                    "self"
                ],
                "test_out": [
                    "self"
                ],
                "test_dtype_from_dtype": [
                    "self"
                ],
                "test_dtype_from_char": [
                    "self"
                ],
                "test_dtype_from_input": [
                    "self"
                ],
                "test_result_values": [
                    "self"
                ],
                "test_scalar": [
                    "self"
                ],
                "test_subclass": [
                    "self"
                ]
            },
            "TestNanFunctions_SumProd": {
                "test_allnans": [
                    "self"
                ],
                "test_empty": [
                    "self"
                ]
            },
            "TestNanFunctions_CumSumProd": {
                "test_allnans": [
                    "self"
                ],
                "test_empty": [
                    "self"
                ],
                "test_keepdims": [
                    "self"
                ],
                "test_result_values": [
                    "self"
                ],
                "test_out": [
                    "self"
                ]
            },
            "TestNanFunctions_MeanVarStd": {
                "test_dtype_error": [
                    "self"
                ],
                "test_out_dtype_error": [
                    "self"
                ],
                "test_ddof": [
                    "self"
                ],
                "test_ddof_too_big": [
                    "self"
                ],
                "test_allnans": [
                    "self"
                ],
                "test_empty": [
                    "self"
                ]
            },
            "TestNanFunctions_Median": {
                "test_mutation": [
                    "self"
                ],
                "test_keepdims": [
                    "self"
                ],
                "test_out": [
                    "self"
                ],
                "test_small_large": [
                    "self"
                ],
                "test_result_values": [
                    "self"
                ],
                "test_allnans": [
                    "self"
                ],
                "test_empty": [
                    "self"
                ],
                "test_scalar": [
                    "self"
                ],
                "test_extended_axis_invalid": [
                    "self"
                ],
                "test_float_special": [
                    "self"
                ]
            },
            "TestNanFunctions_Percentile": {
                "test_mutation": [
                    "self"
                ],
                "test_keepdims": [
                    "self"
                ],
                "test_out": [
                    "self"
                ],
                "test_result_values": [
                    "self"
                ],
                "test_allnans": [
                    "self"
                ],
                "test_empty": [
                    "self"
                ],
                "test_scalar": [
                    "self"
                ],
                "test_extended_axis_invalid": [
                    "self"
                ],
                "test_multiple_percentiles": [
                    "self"
                ]
            },
            "TestNanFunctions_Quantile": {
                "test_regression": [
                    "self"
                ],
                "test_basic": [
                    "self"
                ],
                "test_no_p_overwrite": [
                    "self"
                ]
            }
        },
        "numpy.lib.tests.test_format": {
            "setup_module": [],
            "teardown_module": [],
            "roundtrip": [
                "arr"
            ],
            "roundtrip_randsize": [
                "arr"
            ],
            "roundtrip_truncated": [
                "arr"
            ],
            "assert_equal_": [
                "o1",
                "o2"
            ],
            "test_roundtrip": [],
            "test_roundtrip_randsize": [],
            "test_roundtrip_truncated": [],
            "test_long_str": [],
            "test_memmap_roundtrip": [],
            "test_compressed_roundtrip": [],
            "test_load_padded_dtype": [
                "dt"
            ],
            "test_python2_python3_interoperability": [],
            "test_pickle_python2_python3": [],
            "test_pickle_disallow": [],
            "test_descr_to_dtype": [
                "dt"
            ],
            "test_version_2_0": [],
            "test_version_2_0_memmap": [],
            "test_write_version": [],
            "test_read_magic": [],
            "test_read_magic_bad_magic": [],
            "test_read_version_1_0_bad_magic": [],
            "test_bad_magic_args": [],
            "test_large_header": [],
            "test_read_array_header_1_0": [],
            "test_read_array_header_2_0": [],
            "test_bad_header": [],
            "test_large_file_support": [],
            "test_large_archive": [],
            "test_empty_npz": [],
            "test_unicode_field_names": [],
            "test_metadata_dtype": [
                "dt",
                "fail"
            ],
            "BytesIOSRandomSize": {
                "read": [
                    "self",
                    "size"
                ]
            }
        },
        "numpy.lib.tests.test__version": {
            "test_main_versions": [],
            "test_version_1_point_10": [],
            "test_alpha_beta_rc": [],
            "test_dev_version": [],
            "test_dev_a_b_rc_mixed": [],
            "test_dev0_version": [],
            "test_dev0_a_b_rc_mixed": [],
            "test_raises": []
        },
        "numpy.lib.tests.test_stride_tricks": {
            "assert_shapes_correct": [
                "input_shapes",
                "expected_shape"
            ],
            "assert_incompatible_shapes_raise": [
                "input_shapes"
            ],
            "assert_same_as_ufunc": [
                "shape0",
                "shape1",
                "transposed",
                "flipped"
            ],
            "test_same": [],
            "test_broadcast_kwargs": [],
            "test_one_off": [],
            "test_same_input_shapes": [],
            "test_two_compatible_by_ones_input_shapes": [],
            "test_two_compatible_by_prepending_ones_input_shapes": [],
            "test_incompatible_shapes_raise_valueerror": [],
            "test_same_as_ufunc": [],
            "test_broadcast_to_succeeds": [],
            "test_broadcast_to_raises": [],
            "test_broadcast_shape": [],
            "test_as_strided": [],
            "as_strided_writeable": [],
            "test_subclasses": [],
            "test_writeable": [],
            "test_writeable_memoryview": [],
            "test_reference_types": [],
            "VerySimpleSubClass": {
                "__new__": [
                    "cls"
                ]
            },
            "SimpleSubClass": {
                "__new__": [
                    "cls"
                ],
                "__array_finalize__": [
                    "self",
                    "obj"
                ]
            }
        },
        "numpy.testing": {},
        "numpy.testing.nosetester": {},
        "numpy.testing.setup": {
            "configuration": [
                "parent_package",
                "top_path"
            ]
        },
        "numpy.testing.utils": {},
        "numpy.testing.print_coercion_tables": {
            "print_cancast_table": [
                "ntypes"
            ],
            "print_coercion_table": [
                "ntypes",
                "inputfirstvalue",
                "inputsecondvalue",
                "firstarray",
                "use_promote_types"
            ],
            "GenericObject": {
                "__init__": [
                    "self",
                    "v"
                ],
                "__add__": [
                    "self",
                    "other"
                ],
                "__radd__": [
                    "self",
                    "other"
                ]
            }
        },
        "numpy.testing.decorators": {},
        "numpy.testing.noseclasses": {},
        "numpy.testing.nose_tools": {},
        "numpy.testing.nose_tools.nosetester": {
            "get_package_name": [
                "filepath"
            ],
            "run_module_suite": [
                "file_to_run",
                "argv"
            ],
            "_numpy_tester": [],
            "NoseTester": {
                "__init__": [
                    "self",
                    "package",
                    "raise_warnings",
                    "depth",
                    "check_fpu_mode"
                ],
                "_test_argv": [
                    "self",
                    "label",
                    "verbose",
                    "extra_argv"
                ],
                "_show_system_info": [
                    "self"
                ],
                "_get_custom_doctester": [
                    "self"
                ],
                "prepare_test_args": [
                    "self",
                    "label",
                    "verbose",
                    "extra_argv",
                    "doctests",
                    "coverage",
                    "timer"
                ],
                "test": [
                    "self",
                    "label",
                    "verbose",
                    "extra_argv",
                    "doctests",
                    "coverage",
                    "raise_warnings",
                    "timer"
                ],
                "bench": [
                    "self",
                    "label",
                    "verbose",
                    "extra_argv"
                ]
            }
        },
        "numpy.testing.nose_tools.utils": {
            "import_nose": [],
            "assert_": [
                "val",
                "msg"
            ],
            "gisnan": [
                "x"
            ],
            "gisfinite": [
                "x"
            ],
            "gisinf": [
                "x"
            ],
            "rand": [],
            "build_err_msg": [
                "arrays",
                "err_msg",
                "header",
                "verbose",
                "names",
                "precision"
            ],
            "assert_equal": [
                "actual",
                "desired",
                "err_msg",
                "verbose"
            ],
            "print_assert_equal": [
                "test_string",
                "actual",
                "desired"
            ],
            "assert_almost_equal": [
                "actual",
                "desired",
                "decimal",
                "err_msg",
                "verbose"
            ],
            "assert_approx_equal": [
                "actual",
                "desired",
                "significant",
                "err_msg",
                "verbose"
            ],
            "assert_array_compare": [
                "comparison",
                "x",
                "y",
                "err_msg",
                "verbose",
                "header",
                "precision",
                "equal_nan",
                "equal_inf"
            ],
            "assert_array_equal": [
                "x",
                "y",
                "err_msg",
                "verbose"
            ],
            "assert_array_almost_equal": [
                "x",
                "y",
                "decimal",
                "err_msg",
                "verbose"
            ],
            "assert_array_less": [
                "x",
                "y",
                "err_msg",
                "verbose"
            ],
            "runstring": [
                "astr",
                "dict"
            ],
            "assert_string_equal": [
                "actual",
                "desired"
            ],
            "rundocs": [
                "filename",
                "raise_on_error"
            ],
            "raises": [],
            "assert_raises": [],
            "assert_raises_regex": [
                "exception_class",
                "expected_regexp"
            ],
            "decorate_methods": [
                "cls",
                "decorator",
                "testmatch"
            ],
            "measure": [
                "code_str",
                "times",
                "label"
            ],
            "_assert_valid_refcount": [
                "op"
            ],
            "assert_allclose": [
                "actual",
                "desired",
                "rtol",
                "atol",
                "equal_nan",
                "err_msg",
                "verbose"
            ],
            "assert_array_almost_equal_nulp": [
                "x",
                "y",
                "nulp"
            ],
            "assert_array_max_ulp": [
                "a",
                "b",
                "maxulp",
                "dtype"
            ],
            "nulp_diff": [
                "x",
                "y",
                "dtype"
            ],
            "_integer_repr": [
                "x",
                "vdt",
                "comp"
            ],
            "integer_repr": [
                "x"
            ],
            "_assert_warns_context": [
                "warning_class",
                "name"
            ],
            "assert_warns": [
                "warning_class"
            ],
            "_assert_no_warnings_context": [
                "name"
            ],
            "assert_no_warnings": [],
            "_gen_alignment_data": [
                "dtype",
                "type",
                "max_size"
            ],
            "tempdir": [],
            "temppath": [],
            "KnownFailureException": {},
            "WarningMessage": {
                "__init__": [
                    "self",
                    "message",
                    "category",
                    "filename",
                    "lineno",
                    "file",
                    "line"
                ],
                "__str__": [
                    "self"
                ]
            },
            "WarningManager": {
                "__init__": [
                    "self",
                    "record",
                    "module"
                ],
                "__enter__": [
                    "self"
                ],
                "__exit__": [
                    "self"
                ]
            },
            "IgnoreException": {},
            "clear_and_catch_warnings": {
                "__init__": [
                    "self",
                    "record",
                    "modules"
                ],
                "__enter__": [
                    "self"
                ],
                "__exit__": [
                    "self"
                ]
            },
            "suppress_warnings": {
                "__init__": [
                    "self",
                    "forwarding_rule"
                ],
                "_clear_registries": [
                    "self"
                ],
                "_filter": [
                    "self",
                    "category",
                    "message",
                    "module",
                    "record"
                ],
                "filter": [
                    "self",
                    "category",
                    "message",
                    "module"
                ],
                "record": [
                    "self",
                    "category",
                    "message",
                    "module"
                ],
                "__enter__": [
                    "self"
                ],
                "__exit__": [
                    "self"
                ],
                "_showwarning": [
                    "self",
                    "message",
                    "category",
                    "filename",
                    "lineno"
                ],
                "__call__": [
                    "self",
                    "func"
                ]
            }
        },
        "numpy.testing.nose_tools.decorators": {
            "slow": [
                "t"
            ],
            "setastest": [
                "tf"
            ],
            "skipif": [
                "skip_condition",
                "msg"
            ],
            "knownfailureif": [
                "fail_condition",
                "msg"
            ],
            "deprecated": [
                "conditional"
            ],
            "parametrize": [
                "vars",
                "input"
            ]
        },
        "numpy.testing.nose_tools.parameterized": {
            "parameterized_argument_value_pairs": [
                "func",
                "p"
            ],
            "short_repr": [
                "x",
                "n"
            ],
            "default_doc_func": [
                "func",
                "num",
                "p"
            ],
            "default_name_func": [
                "func",
                "num",
                "p"
            ],
            "set_test_runner": [
                "name"
            ],
            "detect_runner": [],
            "param": {
                "__new__": [
                    "cls"
                ],
                "explicit": [
                    "cls",
                    "args",
                    "kwargs"
                ],
                "from_decorator": [
                    "cls",
                    "args"
                ],
                "__repr__": [
                    "self"
                ]
            },
            "QuietOrderedDict": {},
            "parameterized": {
                "__init__": [
                    "self",
                    "input",
                    "doc_func"
                ],
                "__call__": [
                    "self",
                    "test_func"
                ],
                "param_as_nose_tuple": [
                    "self",
                    "test_self",
                    "func",
                    "num",
                    "p"
                ],
                "assert_not_in_testcase_subclass": [
                    "self"
                ],
                "_terrible_magic_get_defining_classes": [
                    "self"
                ],
                "input_as_callable": [
                    "cls",
                    "input"
                ],
                "check_input_values": [
                    "cls",
                    "input_values"
                ],
                "expand": [
                    "cls",
                    "input",
                    "name_func",
                    "doc_func"
                ],
                "param_as_standalone_func": [
                    "cls",
                    "p",
                    "func",
                    "name"
                ],
                "to_safe_name": [
                    "cls",
                    "s"
                ]
            }
        },
        "numpy.testing.nose_tools.noseclasses": {
            "NumpyDocTestFinder": {
                "_from_module": [
                    "self",
                    "module",
                    "object"
                ],
                "_find": [
                    "self",
                    "tests",
                    "obj",
                    "name",
                    "module",
                    "source_lines",
                    "globs",
                    "seen"
                ]
            },
            "NumpyOutputChecker": {
                "check_output": [
                    "self",
                    "want",
                    "got",
                    "optionflags"
                ]
            },
            "NumpyDocTestCase": {
                "__init__": [
                    "self",
                    "test",
                    "optionflags",
                    "setUp",
                    "tearDown",
                    "checker",
                    "obj",
                    "result_var"
                ]
            },
            "NumpyDoctest": {
                "options": [
                    "self",
                    "parser",
                    "env"
                ],
                "configure": [
                    "self",
                    "options",
                    "config"
                ],
                "set_test_context": [
                    "self",
                    "test"
                ],
                "loadTestsFromModule": [
                    "self",
                    "module"
                ],
                "afterContext": [
                    "self"
                ],
                "wantFile": [
                    "self",
                    "file"
                ]
            },
            "Unplugger": {
                "__init__": [
                    "self",
                    "to_unplug"
                ],
                "options": [
                    "self",
                    "parser",
                    "env"
                ],
                "configure": [
                    "self",
                    "options",
                    "config"
                ]
            },
            "KnownFailurePlugin": {
                "options": [
                    "self",
                    "parser",
                    "env"
                ],
                "configure": [
                    "self",
                    "options",
                    "conf"
                ]
            },
            "FPUModeCheckPlugin": {
                "prepareTestCase": [
                    "self",
                    "test"
                ]
            },
            "NumpyTestProgram": {
                "runTests": [
                    "self"
                ]
            }
        },
        "numpy.testing._private": {},
        "numpy.testing._private.nosetester": {
            "get_package_name": [
                "filepath"
            ],
            "run_module_suite": [
                "file_to_run",
                "argv"
            ],
            "_numpy_tester": [],
            "NoseTester": {
                "__init__": [
                    "self",
                    "package",
                    "raise_warnings",
                    "depth",
                    "check_fpu_mode"
                ],
                "_test_argv": [
                    "self",
                    "label",
                    "verbose",
                    "extra_argv"
                ],
                "_show_system_info": [
                    "self"
                ],
                "_get_custom_doctester": [
                    "self"
                ],
                "prepare_test_args": [
                    "self",
                    "label",
                    "verbose",
                    "extra_argv",
                    "doctests",
                    "coverage",
                    "timer"
                ],
                "test": [
                    "self",
                    "label",
                    "verbose",
                    "extra_argv",
                    "doctests",
                    "coverage",
                    "raise_warnings",
                    "timer"
                ],
                "bench": [
                    "self",
                    "label",
                    "verbose",
                    "extra_argv"
                ]
            }
        },
        "numpy.testing._private.utils": {
            "import_nose": [],
            "assert_": [
                "val",
                "msg"
            ],
            "gisnan": [
                "x"
            ],
            "gisfinite": [
                "x"
            ],
            "gisinf": [
                "x"
            ],
            "build_err_msg": [
                "arrays",
                "err_msg",
                "header",
                "verbose",
                "names",
                "precision"
            ],
            "assert_equal": [
                "actual",
                "desired",
                "err_msg",
                "verbose"
            ],
            "print_assert_equal": [
                "test_string",
                "actual",
                "desired"
            ],
            "assert_almost_equal": [
                "actual",
                "desired",
                "decimal",
                "err_msg",
                "verbose"
            ],
            "assert_approx_equal": [
                "actual",
                "desired",
                "significant",
                "err_msg",
                "verbose"
            ],
            "assert_array_compare": [
                "comparison",
                "x",
                "y",
                "err_msg",
                "verbose",
                "header",
                "precision",
                "equal_nan",
                "equal_inf"
            ],
            "assert_array_equal": [
                "x",
                "y",
                "err_msg",
                "verbose"
            ],
            "assert_array_almost_equal": [
                "x",
                "y",
                "decimal",
                "err_msg",
                "verbose"
            ],
            "assert_array_less": [
                "x",
                "y",
                "err_msg",
                "verbose"
            ],
            "runstring": [
                "astr",
                "dict"
            ],
            "assert_string_equal": [
                "actual",
                "desired"
            ],
            "rundocs": [
                "filename",
                "raise_on_error"
            ],
            "raises": [],
            "assert_raises": [],
            "assert_raises_regex": [
                "exception_class",
                "expected_regexp"
            ],
            "decorate_methods": [
                "cls",
                "decorator",
                "testmatch"
            ],
            "measure": [
                "code_str",
                "times",
                "label"
            ],
            "_assert_valid_refcount": [
                "op"
            ],
            "assert_allclose": [
                "actual",
                "desired",
                "rtol",
                "atol",
                "equal_nan",
                "err_msg",
                "verbose"
            ],
            "assert_array_almost_equal_nulp": [
                "x",
                "y",
                "nulp"
            ],
            "assert_array_max_ulp": [
                "a",
                "b",
                "maxulp",
                "dtype"
            ],
            "nulp_diff": [
                "x",
                "y",
                "dtype"
            ],
            "_integer_repr": [
                "x",
                "vdt",
                "comp"
            ],
            "integer_repr": [
                "x"
            ],
            "_assert_warns_context": [
                "warning_class",
                "name"
            ],
            "assert_warns": [
                "warning_class"
            ],
            "_assert_no_warnings_context": [
                "name"
            ],
            "assert_no_warnings": [],
            "_gen_alignment_data": [
                "dtype",
                "type",
                "max_size"
            ],
            "tempdir": [],
            "temppath": [],
            "_assert_no_gc_cycles_context": [
                "name"
            ],
            "assert_no_gc_cycles": [],
            "break_cycles": [],
            "requires_memory": [
                "free_bytes"
            ],
            "check_free_memory": [
                "free_bytes"
            ],
            "_parse_size": [
                "size_str"
            ],
            "_get_mem_available": [],
            "KnownFailureException": {},
            "_Dummy": {
                "nop": [
                    "self"
                ]
            },
            "IgnoreException": {},
            "clear_and_catch_warnings": {
                "__init__": [
                    "self",
                    "record",
                    "modules"
                ],
                "__enter__": [
                    "self"
                ],
                "__exit__": [
                    "self"
                ]
            },
            "suppress_warnings": {
                "__init__": [
                    "self",
                    "forwarding_rule"
                ],
                "_clear_registries": [
                    "self"
                ],
                "_filter": [
                    "self",
                    "category",
                    "message",
                    "module",
                    "record"
                ],
                "filter": [
                    "self",
                    "category",
                    "message",
                    "module"
                ],
                "record": [
                    "self",
                    "category",
                    "message",
                    "module"
                ],
                "__enter__": [
                    "self"
                ],
                "__exit__": [
                    "self"
                ],
                "_showwarning": [
                    "self",
                    "message",
                    "category",
                    "filename",
                    "lineno"
                ],
                "__call__": [
                    "self",
                    "func"
                ]
            }
        },
        "numpy.testing._private.decorators": {
            "slow": [
                "t"
            ],
            "setastest": [
                "tf"
            ],
            "skipif": [
                "skip_condition",
                "msg"
            ],
            "knownfailureif": [
                "fail_condition",
                "msg"
            ],
            "deprecated": [
                "conditional"
            ],
            "parametrize": [
                "vars",
                "input"
            ]
        },
        "numpy.testing._private.parameterized": {
            "parameterized_argument_value_pairs": [
                "func",
                "p"
            ],
            "short_repr": [
                "x",
                "n"
            ],
            "default_doc_func": [
                "func",
                "num",
                "p"
            ],
            "default_name_func": [
                "func",
                "num",
                "p"
            ],
            "set_test_runner": [
                "name"
            ],
            "detect_runner": [],
            "param": {
                "__new__": [
                    "cls"
                ],
                "explicit": [
                    "cls",
                    "args",
                    "kwargs"
                ],
                "from_decorator": [
                    "cls",
                    "args"
                ],
                "__repr__": [
                    "self"
                ]
            },
            "QuietOrderedDict": {},
            "parameterized": {
                "__init__": [
                    "self",
                    "input",
                    "doc_func"
                ],
                "__call__": [
                    "self",
                    "test_func"
                ],
                "param_as_nose_tuple": [
                    "self",
                    "test_self",
                    "func",
                    "num",
                    "p"
                ],
                "assert_not_in_testcase_subclass": [
                    "self"
                ],
                "_terrible_magic_get_defining_classes": [
                    "self"
                ],
                "input_as_callable": [
                    "cls",
                    "input"
                ],
                "check_input_values": [
                    "cls",
                    "input_values"
                ],
                "expand": [
                    "cls",
                    "input",
                    "name_func",
                    "doc_func"
                ],
                "param_as_standalone_func": [
                    "cls",
                    "p",
                    "func",
                    "name"
                ],
                "to_safe_name": [
                    "cls",
                    "s"
                ]
            }
        },
        "numpy.testing._private.pytesttester": {
            "_show_numpy_info": [],
            "PytestTester": {
                "__init__": [
                    "self",
                    "module_name"
                ],
                "__call__": [
                    "self",
                    "label",
                    "verbose",
                    "extra_argv",
                    "doctests",
                    "coverage",
                    "durations",
                    "tests"
                ]
            }
        },
        "numpy.testing._private.noseclasses": {
            "NumpyDocTestFinder": {
                "_from_module": [
                    "self",
                    "module",
                    "object"
                ],
                "_find": [
                    "self",
                    "tests",
                    "obj",
                    "name",
                    "module",
                    "source_lines",
                    "globs",
                    "seen"
                ]
            },
            "NumpyOutputChecker": {
                "check_output": [
                    "self",
                    "want",
                    "got",
                    "optionflags"
                ]
            },
            "NumpyDocTestCase": {
                "__init__": [
                    "self",
                    "test",
                    "optionflags",
                    "setUp",
                    "tearDown",
                    "checker",
                    "obj",
                    "result_var"
                ]
            },
            "NumpyDoctest": {
                "options": [
                    "self",
                    "parser",
                    "env"
                ],
                "configure": [
                    "self",
                    "options",
                    "config"
                ],
                "set_test_context": [
                    "self",
                    "test"
                ],
                "loadTestsFromModule": [
                    "self",
                    "module"
                ],
                "afterContext": [
                    "self"
                ],
                "wantFile": [
                    "self",
                    "file"
                ]
            },
            "Unplugger": {
                "__init__": [
                    "self",
                    "to_unplug"
                ],
                "options": [
                    "self",
                    "parser",
                    "env"
                ],
                "configure": [
                    "self",
                    "options",
                    "config"
                ]
            },
            "KnownFailurePlugin": {
                "options": [
                    "self",
                    "parser",
                    "env"
                ],
                "configure": [
                    "self",
                    "options",
                    "conf"
                ]
            },
            "FPUModeCheckPlugin": {
                "prepareTestCase": [
                    "self",
                    "test"
                ]
            },
            "NumpyTestProgram": {
                "runTests": [
                    "self"
                ]
            }
        },
        "numpy.testing.tests.test_utils": {
            "assert_warn_len_equal": [
                "mod",
                "n_in_context",
                "py34",
                "py37"
            ],
            "test_warn_len_equal_call_scenarios": [],
            "_get_fresh_mod": [],
            "test_clear_and_catch_warnings": [],
            "test_suppress_warnings_module": [],
            "test_suppress_warnings_type": [],
            "test_suppress_warnings_decorate_no_record": [],
            "test_suppress_warnings_record": [],
            "test_suppress_warnings_forwarding": [],
            "test_tempdir": [],
            "test_temppath": [],
            "test_clear_and_catch_warnings_inherit": [],
            "_GenericTest": {
                "_test_equal": [
                    "self",
                    "a",
                    "b"
                ],
                "_test_not_equal": [
                    "self",
                    "a",
                    "b"
                ],
                "test_array_rank1_eq": [
                    "self"
                ],
                "test_array_rank1_noteq": [
                    "self"
                ],
                "test_array_rank2_eq": [
                    "self"
                ],
                "test_array_diffshape": [
                    "self"
                ],
                "test_objarray": [
                    "self"
                ],
                "test_array_likes": [
                    "self"
                ]
            },
            "TestArrayEqual": {
                "setup": [
                    "self"
                ],
                "test_generic_rank1": [
                    "self"
                ],
                "test_generic_rank3": [
                    "self"
                ],
                "test_nan_array": [
                    "self"
                ],
                "test_string_arrays": [
                    "self"
                ],
                "test_recarrays": [
                    "self"
                ],
                "test_masked_nan_inf": [
                    "self"
                ],
                "test_subclass_that_overrides_eq": [
                    "self"
                ],
                "test_subclass_that_does_not_implement_npall": [
                    "self"
                ]
            },
            "TestBuildErrorMessage": {
                "test_build_err_msg_defaults": [
                    "self"
                ],
                "test_build_err_msg_no_verbose": [
                    "self"
                ],
                "test_build_err_msg_custom_names": [
                    "self"
                ],
                "test_build_err_msg_custom_precision": [
                    "self"
                ]
            },
            "TestEqual": {
                "setup": [
                    "self"
                ],
                "test_nan_items": [
                    "self"
                ],
                "test_inf_items": [
                    "self"
                ],
                "test_datetime": [
                    "self"
                ],
                "test_nat_items": [
                    "self"
                ],
                "test_non_numeric": [
                    "self"
                ],
                "test_complex_item": [
                    "self"
                ],
                "test_negative_zero": [
                    "self"
                ],
                "test_complex": [
                    "self"
                ],
                "test_error_message": [
                    "self"
                ],
                "test_object": [
                    "self"
                ]
            },
            "TestArrayAlmostEqual": {
                "setup": [
                    "self"
                ],
                "test_closeness": [
                    "self"
                ],
                "test_simple": [
                    "self"
                ],
                "test_nan": [
                    "self"
                ],
                "test_inf": [
                    "self"
                ],
                "test_subclass": [
                    "self"
                ],
                "test_subclass_that_cannot_be_bool": [
                    "self"
                ]
            },
            "TestAlmostEqual": {
                "setup": [
                    "self"
                ],
                "test_closeness": [
                    "self"
                ],
                "test_nan_item": [
                    "self"
                ],
                "test_inf_item": [
                    "self"
                ],
                "test_simple_item": [
                    "self"
                ],
                "test_complex_item": [
                    "self"
                ],
                "test_complex": [
                    "self"
                ],
                "test_error_message": [
                    "self"
                ],
                "test_error_message_2": [
                    "self"
                ],
                "test_subclass_that_cannot_be_bool": [
                    "self"
                ]
            },
            "TestApproxEqual": {
                "setup": [
                    "self"
                ],
                "test_simple_arrays": [
                    "self"
                ],
                "test_simple_items": [
                    "self"
                ],
                "test_nan_array": [
                    "self"
                ],
                "test_nan_items": [
                    "self"
                ]
            },
            "TestArrayAssertLess": {
                "setup": [
                    "self"
                ],
                "test_simple_arrays": [
                    "self"
                ],
                "test_rank2": [
                    "self"
                ],
                "test_rank3": [
                    "self"
                ],
                "test_simple_items": [
                    "self"
                ],
                "test_nan_noncompare": [
                    "self"
                ],
                "test_nan_noncompare_array": [
                    "self"
                ],
                "test_inf_compare": [
                    "self"
                ],
                "test_inf_compare_array": [
                    "self"
                ]
            },
            "TestRaises": {
                "setup": [
                    "self"
                ],
                "raises_exception": [
                    "self",
                    "e"
                ],
                "does_not_raise_exception": [
                    "self"
                ],
                "test_correct_catch": [
                    "self"
                ],
                "test_wrong_exception": [
                    "self"
                ],
                "test_catch_no_raise": [
                    "self"
                ]
            },
            "TestWarns": {
                "test_warn": [
                    "self"
                ],
                "test_context_manager": [
                    "self"
                ],
                "test_warn_wrong_warning": [
                    "self"
                ]
            },
            "TestAssertAllclose": {
                "test_simple": [
                    "self"
                ],
                "test_min_int": [
                    "self"
                ],
                "test_report_fail_percentage": [
                    "self"
                ],
                "test_equal_nan": [
                    "self"
                ],
                "test_not_equal_nan": [
                    "self"
                ],
                "test_equal_nan_default": [
                    "self"
                ],
                "test_report_max_relative_error": [
                    "self"
                ]
            },
            "TestArrayAlmostEqualNulp": {
                "test_float64_pass": [
                    "self"
                ],
                "test_float64_fail": [
                    "self"
                ],
                "test_float32_pass": [
                    "self"
                ],
                "test_float32_fail": [
                    "self"
                ],
                "test_float16_pass": [
                    "self"
                ],
                "test_float16_fail": [
                    "self"
                ],
                "test_complex128_pass": [
                    "self"
                ],
                "test_complex128_fail": [
                    "self"
                ],
                "test_complex64_pass": [
                    "self"
                ],
                "test_complex64_fail": [
                    "self"
                ]
            },
            "TestULP": {
                "test_equal": [
                    "self"
                ],
                "test_single": [
                    "self"
                ],
                "test_double": [
                    "self"
                ],
                "test_inf": [
                    "self"
                ],
                "test_nan": [
                    "self"
                ]
            },
            "TestStringEqual": {
                "test_simple": [
                    "self"
                ],
                "test_regex": [
                    "self"
                ]
            },
            "my_cacw": {},
            "TestAssertNoGcCycles": {
                "test_passes": [
                    "self"
                ],
                "test_asserts": [
                    "self"
                ],
                "test_fails": [
                    "self"
                ]
            }
        },
        "numpy.testing.tests": {},
        "numpy.testing.tests.test_doctesting": {
            "check_random_directive": [],
            "check_implicit_np": [],
            "check_whitespace_enabled": [],
            "check_empty_output": [],
            "check_skip": []
        },
        "numpy.testing.tests.test_decorators": {
            "TestNoseDecorators": {
                "test_slow": [
                    "self"
                ],
                "test_setastest": [
                    "self"
                ],
                "test_skip_functions_hardcoded": [
                    "self"
                ],
                "test_skip_functions_callable": [
                    "self"
                ],
                "test_skip_generators_hardcoded": [
                    "self"
                ],
                "test_skip_generators_callable": [
                    "self"
                ],
                "test_deprecated": [
                    "self"
                ],
                "test_parametrize": [
                    "self"
                ]
            }
        },
        "numpy.tests.test_public_api": {
            "check_dir": [
                "module",
                "module_name"
            ],
            "test_numpy_namespace": [],
            "test_import_lazy_import": [
                "name"
            ],
            "test_numpy_linalg": [],
            "test_numpy_fft": [],
            "test_NPY_NO_EXPORT": [],
            "is_unexpected": [
                "name"
            ],
            "test_all_modules_are_expected": [],
            "test_all_modules_are_expected_2": [],
            "test_api_importable": []
        },
        "numpy.tests": {},
        "numpy.tests.test_reloading": {
            "test_numpy_reloading": [],
            "test_novalue": []
        },
        "numpy.tests.test_warnings": {},
        "numpy.tests.test_scripts": {
            "find_f2py_commands": [],
            "test_f2py": [
                "f2py_cmd"
            ],
            "test_pep338": []
        },
        "numpy.tests.test_matlib": {
            "test_empty": [],
            "test_ones": [],
            "test_zeros": [],
            "test_identity": [],
            "test_eye": [],
            "test_rand": [],
            "test_randn": [],
            "test_repmat": []
        },
        "numpy.tests.test_ctypeslib": {
            "TestLoadLibrary": {
                "test_basic": [
                    "self"
                ],
                "test_basic2": [
                    "self"
                ]
            },
            "TestNdpointer": {
                "test_dtype": [
                    "self"
                ],
                "test_ndim": [
                    "self"
                ],
                "test_shape": [
                    "self"
                ],
                "test_flags": [
                    "self"
                ],
                "test_cache": [
                    "self"
                ]
            },
            "TestNdpointerCFunc": {
                "test_arguments": [
                    "self"
                ],
                "test_return": [
                    "self",
                    "dt"
                ],
                "test_vague_return_value": [
                    "self"
                ]
            },
            "TestAsArray": {
                "test_array": [
                    "self"
                ],
                "test_pointer": [
                    "self"
                ],
                "test_struct_array_pointer": [
                    "self"
                ],
                "test_reference_cycles": [
                    "self"
                ],
                "test_segmentation_fault": [
                    "self"
                ]
            },
            "TestAsCtypesType": {
                "test_scalar": [
                    "self"
                ],
                "test_subarray": [
                    "self"
                ],
                "test_structure": [
                    "self"
                ],
                "test_structure_aligned": [
                    "self"
                ],
                "test_union": [
                    "self"
                ],
                "test_padded_union": [
                    "self"
                ],
                "test_overlapping": [
                    "self"
                ]
            }
        },
        "numpy.tests.test_numpy_version": {
            "test_valid_numpy_version": []
        },
        "numpy.ma": {},
        "numpy.ma.extras": {
            "issequence": [
                "seq"
            ],
            "count_masked": [
                "arr",
                "axis"
            ],
            "masked_all": [
                "shape",
                "dtype"
            ],
            "masked_all_like": [
                "arr"
            ],
            "flatten_inplace": [
                "seq"
            ],
            "apply_along_axis": [
                "func1d",
                "axis",
                "arr"
            ],
            "apply_over_axes": [
                "func",
                "a",
                "axes"
            ],
            "average": [
                "a",
                "axis",
                "weights",
                "returned"
            ],
            "median": [
                "a",
                "axis",
                "out",
                "overwrite_input",
                "keepdims"
            ],
            "_median": [
                "a",
                "axis",
                "out",
                "overwrite_input"
            ],
            "compress_nd": [
                "x",
                "axis"
            ],
            "compress_rowcols": [
                "x",
                "axis"
            ],
            "compress_rows": [
                "a"
            ],
            "compress_cols": [
                "a"
            ],
            "mask_rows": [
                "a",
                "axis"
            ],
            "mask_cols": [
                "a",
                "axis"
            ],
            "ediff1d": [
                "arr",
                "to_end",
                "to_begin"
            ],
            "unique": [
                "ar1",
                "return_index",
                "return_inverse"
            ],
            "intersect1d": [
                "ar1",
                "ar2",
                "assume_unique"
            ],
            "setxor1d": [
                "ar1",
                "ar2",
                "assume_unique"
            ],
            "in1d": [
                "ar1",
                "ar2",
                "assume_unique",
                "invert"
            ],
            "isin": [
                "element",
                "test_elements",
                "assume_unique",
                "invert"
            ],
            "union1d": [
                "ar1",
                "ar2"
            ],
            "setdiff1d": [
                "ar1",
                "ar2",
                "assume_unique"
            ],
            "_covhelper": [
                "x",
                "y",
                "rowvar",
                "allow_masked"
            ],
            "cov": [
                "x",
                "y",
                "rowvar",
                "bias",
                "allow_masked",
                "ddof"
            ],
            "corrcoef": [
                "x",
                "y",
                "rowvar",
                "bias",
                "allow_masked",
                "ddof"
            ],
            "flatnotmasked_edges": [
                "a"
            ],
            "notmasked_edges": [
                "a",
                "axis"
            ],
            "flatnotmasked_contiguous": [
                "a"
            ],
            "notmasked_contiguous": [
                "a",
                "axis"
            ],
            "_ezclump": [
                "mask"
            ],
            "clump_unmasked": [
                "a"
            ],
            "clump_masked": [
                "a"
            ],
            "vander": [
                "x",
                "n"
            ],
            "polyfit": [
                "x",
                "y",
                "deg",
                "rcond",
                "full",
                "w",
                "cov"
            ],
            "_fromnxfunction": {
                "__init__": [
                    "self",
                    "funcname"
                ],
                "getdoc": [
                    "self"
                ],
                "__call__": [
                    "self"
                ]
            },
            "_fromnxfunction_single": {
                "__call__": [
                    "self",
                    "x"
                ]
            },
            "_fromnxfunction_seq": {
                "__call__": [
                    "self",
                    "x"
                ]
            },
            "_fromnxfunction_args": {
                "__call__": [
                    "self"
                ]
            },
            "_fromnxfunction_allargs": {
                "__call__": [
                    "self"
                ]
            },
            "MAxisConcatenator": {
                "makemat": [
                    "cls",
                    "arr"
                ],
                "__getitem__": [
                    "self",
                    "key"
                ]
            },
            "mr_class": {
                "__init__": [
                    "self"
                ]
            }
        },
        "numpy.ma.timer_comparison": {
            "ModuleTester": {
                "__init__": [
                    "self",
                    "module"
                ],
                "assert_array_compare": [
                    "self",
                    "comparison",
                    "x",
                    "y",
                    "err_msg",
                    "header",
                    "fill_value"
                ],
                "assert_array_equal": [
                    "self",
                    "x",
                    "y",
                    "err_msg"
                ],
                "test_0": [
                    "self"
                ],
                "test_1": [
                    "self"
                ],
                "test_2": [
                    "self"
                ],
                "test_3": [
                    "self"
                ],
                "test_4": [
                    "self"
                ],
                "test_5": [
                    "self"
                ],
                "test_6": [
                    "self"
                ],
                "test_7": [
                    "self"
                ],
                "test_99": [
                    "self"
                ],
                "test_A": [
                    "self"
                ]
            }
        },
        "numpy.ma.setup": {
            "configuration": [
                "parent_package",
                "top_path"
            ]
        },
        "numpy.ma.testutils": {
            "approx": [
                "a",
                "b",
                "fill_value",
                "rtol",
                "atol"
            ],
            "almost": [
                "a",
                "b",
                "decimal",
                "fill_value"
            ],
            "_assert_equal_on_sequences": [
                "actual",
                "desired",
                "err_msg"
            ],
            "assert_equal_records": [
                "a",
                "b"
            ],
            "assert_equal": [
                "actual",
                "desired",
                "err_msg"
            ],
            "fail_if_equal": [
                "actual",
                "desired",
                "err_msg"
            ],
            "assert_almost_equal": [
                "actual",
                "desired",
                "decimal",
                "err_msg",
                "verbose"
            ],
            "assert_array_compare": [
                "comparison",
                "x",
                "y",
                "err_msg",
                "verbose",
                "header",
                "fill_value"
            ],
            "assert_array_equal": [
                "x",
                "y",
                "err_msg",
                "verbose"
            ],
            "fail_if_array_equal": [
                "x",
                "y",
                "err_msg",
                "verbose"
            ],
            "assert_array_approx_equal": [
                "x",
                "y",
                "decimal",
                "err_msg",
                "verbose"
            ],
            "assert_array_almost_equal": [
                "x",
                "y",
                "decimal",
                "err_msg",
                "verbose"
            ],
            "assert_array_less": [
                "x",
                "y",
                "err_msg",
                "verbose"
            ],
            "assert_mask_equal": [
                "m1",
                "m2",
                "err_msg"
            ]
        },
        "numpy.ma.mrecords": {
            "_checknames": [
                "descr",
                "names"
            ],
            "_get_fieldmask": [
                "self"
            ],
            "_mrreconstruct": [
                "subtype",
                "baseclass",
                "baseshape",
                "basetype"
            ],
            "fromarrays": [
                "arraylist",
                "dtype",
                "shape",
                "formats",
                "names",
                "titles",
                "aligned",
                "byteorder",
                "fill_value"
            ],
            "fromrecords": [
                "reclist",
                "dtype",
                "shape",
                "formats",
                "names",
                "titles",
                "aligned",
                "byteorder",
                "fill_value",
                "mask"
            ],
            "_guessvartypes": [
                "arr"
            ],
            "openfile": [
                "fname"
            ],
            "fromtextfile": [
                "fname",
                "delimitor",
                "commentchar",
                "missingchar",
                "varnames",
                "vartypes"
            ],
            "addfield": [
                "mrecord",
                "newfield",
                "newfieldname"
            ],
            "MaskedRecords": {
                "__new__": [
                    "cls",
                    "shape",
                    "dtype",
                    "buf",
                    "offset",
                    "strides",
                    "formats",
                    "names",
                    "titles",
                    "byteorder",
                    "aligned",
                    "mask",
                    "hard_mask",
                    "fill_value",
                    "keep_mask",
                    "copy"
                ],
                "__array_finalize__": [
                    "self",
                    "obj"
                ],
                "_data": [
                    "self"
                ],
                "_fieldmask": [
                    "self"
                ],
                "__len__": [
                    "self"
                ],
                "__getattribute__": [
                    "self",
                    "attr"
                ],
                "__setattr__": [
                    "self",
                    "attr",
                    "val"
                ],
                "__getitem__": [
                    "self",
                    "indx"
                ],
                "__setitem__": [
                    "self",
                    "indx",
                    "value"
                ],
                "__str__": [
                    "self"
                ],
                "__repr__": [
                    "self"
                ],
                "view": [
                    "self",
                    "dtype",
                    "type"
                ],
                "harden_mask": [
                    "self"
                ],
                "soften_mask": [
                    "self"
                ],
                "copy": [
                    "self"
                ],
                "tolist": [
                    "self",
                    "fill_value"
                ],
                "__getstate__": [
                    "self"
                ],
                "__setstate__": [
                    "self",
                    "state"
                ],
                "__reduce__": [
                    "self"
                ]
            }
        },
        "numpy.ma.version": {},
        "numpy.ma.core": {
            "_deprecate_argsort_axis": [
                "arr"
            ],
            "doc_note": [
                "initialdoc",
                "note"
            ],
            "get_object_signature": [
                "obj"
            ],
            "_recursive_fill_value": [
                "dtype",
                "f"
            ],
            "_get_dtype_of": [
                "obj"
            ],
            "default_fill_value": [
                "obj"
            ],
            "_extremum_fill_value": [
                "obj",
                "extremum",
                "extremum_name"
            ],
            "minimum_fill_value": [
                "obj"
            ],
            "maximum_fill_value": [
                "obj"
            ],
            "_recursive_set_fill_value": [
                "fillvalue",
                "dt"
            ],
            "_check_fill_value": [
                "fill_value",
                "ndtype"
            ],
            "set_fill_value": [
                "a",
                "fill_value"
            ],
            "get_fill_value": [
                "a"
            ],
            "common_fill_value": [
                "a",
                "b"
            ],
            "filled": [
                "a",
                "fill_value"
            ],
            "get_masked_subclass": [],
            "getdata": [
                "a",
                "subok"
            ],
            "fix_invalid": [
                "a",
                "mask",
                "copy",
                "fill_value"
            ],
            "is_string_or_list_of_strings": [
                "val"
            ],
            "_replace_dtype_fields_recursive": [
                "dtype",
                "primitive_dtype"
            ],
            "_replace_dtype_fields": [
                "dtype",
                "primitive_dtype"
            ],
            "make_mask_descr": [
                "ndtype"
            ],
            "getmask": [
                "a"
            ],
            "getmaskarray": [
                "arr"
            ],
            "is_mask": [
                "m"
            ],
            "_shrink_mask": [
                "m"
            ],
            "make_mask": [
                "m",
                "copy",
                "shrink",
                "dtype"
            ],
            "make_mask_none": [
                "newshape",
                "dtype"
            ],
            "mask_or": [
                "m1",
                "m2",
                "copy",
                "shrink"
            ],
            "flatten_mask": [
                "mask"
            ],
            "_check_mask_axis": [
                "mask",
                "axis",
                "keepdims"
            ],
            "masked_where": [
                "condition",
                "a",
                "copy"
            ],
            "masked_greater": [
                "x",
                "value",
                "copy"
            ],
            "masked_greater_equal": [
                "x",
                "value",
                "copy"
            ],
            "masked_less": [
                "x",
                "value",
                "copy"
            ],
            "masked_less_equal": [
                "x",
                "value",
                "copy"
            ],
            "masked_not_equal": [
                "x",
                "value",
                "copy"
            ],
            "masked_equal": [
                "x",
                "value",
                "copy"
            ],
            "masked_inside": [
                "x",
                "v1",
                "v2",
                "copy"
            ],
            "masked_outside": [
                "x",
                "v1",
                "v2",
                "copy"
            ],
            "masked_object": [
                "x",
                "value",
                "copy",
                "shrink"
            ],
            "masked_values": [
                "x",
                "value",
                "rtol",
                "atol",
                "copy",
                "shrink"
            ],
            "masked_invalid": [
                "a",
                "copy"
            ],
            "_recursive_printoption": [
                "result",
                "mask",
                "printopt"
            ],
            "_recursive_filled": [
                "a",
                "mask",
                "fill_value"
            ],
            "flatten_structured_array": [
                "a"
            ],
            "_arraymethod": [
                "funcname",
                "onmask"
            ],
            "_mareconstruct": [
                "subtype",
                "baseclass",
                "baseshape",
                "basetype"
            ],
            "isMaskedArray": [
                "x"
            ],
            "array": [
                "data",
                "dtype",
                "copy",
                "order",
                "mask",
                "fill_value",
                "keep_mask",
                "hard_mask",
                "shrink",
                "subok",
                "ndmin"
            ],
            "is_masked": [
                "x"
            ],
            "min": [
                "obj",
                "axis",
                "out",
                "fill_value",
                "keepdims"
            ],
            "max": [
                "obj",
                "axis",
                "out",
                "fill_value",
                "keepdims"
            ],
            "ptp": [
                "obj",
                "axis",
                "out",
                "fill_value",
                "keepdims"
            ],
            "take": [
                "a",
                "indices",
                "axis",
                "out",
                "mode"
            ],
            "power": [
                "a",
                "b",
                "third"
            ],
            "argsort": [
                "a",
                "axis",
                "kind",
                "order",
                "endwith",
                "fill_value"
            ],
            "sort": [
                "a",
                "axis",
                "kind",
                "order",
                "endwith",
                "fill_value"
            ],
            "compressed": [
                "x"
            ],
            "concatenate": [
                "arrays",
                "axis"
            ],
            "diag": [
                "v",
                "k"
            ],
            "left_shift": [
                "a",
                "n"
            ],
            "right_shift": [
                "a",
                "n"
            ],
            "put": [
                "a",
                "indices",
                "values",
                "mode"
            ],
            "putmask": [
                "a",
                "mask",
                "values"
            ],
            "transpose": [
                "a",
                "axes"
            ],
            "reshape": [
                "a",
                "new_shape",
                "order"
            ],
            "resize": [
                "x",
                "new_shape"
            ],
            "ndim": [
                "obj"
            ],
            "shape": [
                "obj"
            ],
            "size": [
                "obj",
                "axis"
            ],
            "where": [
                "condition",
                "x",
                "y"
            ],
            "choose": [
                "indices",
                "choices",
                "out",
                "mode"
            ],
            "round_": [
                "a",
                "decimals",
                "out"
            ],
            "mask_rowcols": [
                "a",
                "axis"
            ],
            "dot": [
                "a",
                "b",
                "strict",
                "out"
            ],
            "inner": [
                "a",
                "b"
            ],
            "outer": [
                "a",
                "b"
            ],
            "_convolve_or_correlate": [
                "f",
                "a",
                "v",
                "mode",
                "propagate_mask"
            ],
            "correlate": [
                "a",
                "v",
                "mode",
                "propagate_mask"
            ],
            "convolve": [
                "a",
                "v",
                "mode",
                "propagate_mask"
            ],
            "allequal": [
                "a",
                "b",
                "fill_value"
            ],
            "allclose": [
                "a",
                "b",
                "masked_equal",
                "rtol",
                "atol"
            ],
            "asarray": [
                "a",
                "dtype",
                "order"
            ],
            "asanyarray": [
                "a",
                "dtype"
            ],
            "_pickle_warn": [
                "method"
            ],
            "fromfile": [
                "file",
                "dtype",
                "count",
                "sep"
            ],
            "fromflex": [
                "fxarray"
            ],
            "append": [
                "a",
                "b",
                "axis"
            ],
            "MaskedArrayFutureWarning": {},
            "MAError": {},
            "MaskError": {},
            "_DomainCheckInterval": {
                "__init__": [
                    "self",
                    "a",
                    "b"
                ],
                "__call__": [
                    "self",
                    "x"
                ]
            },
            "_DomainTan": {
                "__init__": [
                    "self",
                    "eps"
                ],
                "__call__": [
                    "self",
                    "x"
                ]
            },
            "_DomainSafeDivide": {
                "__init__": [
                    "self",
                    "tolerance"
                ],
                "__call__": [
                    "self",
                    "a",
                    "b"
                ]
            },
            "_DomainGreater": {
                "__init__": [
                    "self",
                    "critical_value"
                ],
                "__call__": [
                    "self",
                    "x"
                ]
            },
            "_DomainGreaterEqual": {
                "__init__": [
                    "self",
                    "critical_value"
                ],
                "__call__": [
                    "self",
                    "x"
                ]
            },
            "_MaskedUFunc": {
                "__init__": [
                    "self",
                    "ufunc"
                ],
                "__str__": [
                    "self"
                ]
            },
            "_MaskedUnaryOperation": {
                "__init__": [
                    "self",
                    "mufunc",
                    "fill",
                    "domain"
                ],
                "__call__": [
                    "self",
                    "a"
                ]
            },
            "_MaskedBinaryOperation": {
                "__init__": [
                    "self",
                    "mbfunc",
                    "fillx",
                    "filly"
                ],
                "__call__": [
                    "self",
                    "a",
                    "b"
                ],
                "reduce": [
                    "self",
                    "target",
                    "axis",
                    "dtype"
                ],
                "outer": [
                    "self",
                    "a",
                    "b"
                ],
                "accumulate": [
                    "self",
                    "target",
                    "axis"
                ]
            },
            "_DomainedBinaryOperation": {
                "__init__": [
                    "self",
                    "dbfunc",
                    "domain",
                    "fillx",
                    "filly"
                ],
                "__call__": [
                    "self",
                    "a",
                    "b"
                ]
            },
            "_MaskedPrintOption": {
                "__init__": [
                    "self",
                    "display"
                ],
                "display": [
                    "self"
                ],
                "set_display": [
                    "self",
                    "s"
                ],
                "enabled": [
                    "self"
                ],
                "enable": [
                    "self",
                    "shrink"
                ],
                "__str__": [
                    "self"
                ]
            },
            "MaskedIterator": {
                "__init__": [
                    "self",
                    "ma"
                ],
                "__iter__": [
                    "self"
                ],
                "__getitem__": [
                    "self",
                    "indx"
                ],
                "__setitem__": [
                    "self",
                    "index",
                    "value"
                ],
                "__next__": [
                    "self"
                ]
            },
            "MaskedArray": {
                "__new__": [
                    "cls",
                    "data",
                    "mask",
                    "dtype",
                    "copy",
                    "subok",
                    "ndmin",
                    "fill_value",
                    "keep_mask",
                    "hard_mask",
                    "shrink",
                    "order"
                ],
                "_update_from": [
                    "self",
                    "obj"
                ],
                "__array_finalize__": [
                    "self",
                    "obj"
                ],
                "__array_wrap__": [
                    "self",
                    "obj",
                    "context"
                ],
                "view": [
                    "self",
                    "dtype",
                    "type",
                    "fill_value"
                ],
                "__getitem__": [
                    "self",
                    "indx"
                ],
                "__setitem__": [
                    "self",
                    "indx",
                    "value"
                ],
                "dtype": [
                    "self",
                    "dtype"
                ],
                "shape": [
                    "self",
                    "shape"
                ],
                "__setmask__": [
                    "self",
                    "mask",
                    "copy"
                ],
                "mask": [
                    "self",
                    "value"
                ],
                "recordmask": [
                    "self",
                    "mask"
                ],
                "harden_mask": [
                    "self"
                ],
                "soften_mask": [
                    "self"
                ],
                "hardmask": [
                    "self"
                ],
                "unshare_mask": [
                    "self"
                ],
                "sharedmask": [
                    "self"
                ],
                "shrink_mask": [
                    "self"
                ],
                "baseclass": [
                    "self"
                ],
                "_get_data": [
                    "self"
                ],
                "flat": [
                    "self",
                    "value"
                ],
                "fill_value": [
                    "self",
                    "value"
                ],
                "filled": [
                    "self",
                    "fill_value"
                ],
                "compressed": [
                    "self"
                ],
                "compress": [
                    "self",
                    "condition",
                    "axis",
                    "out"
                ],
                "_insert_masked_print": [
                    "self"
                ],
                "__str__": [
                    "self"
                ],
                "__repr__": [
                    "self"
                ],
                "_delegate_binop": [
                    "self",
                    "other"
                ],
                "_comparison": [
                    "self",
                    "other",
                    "compare"
                ],
                "__eq__": [
                    "self",
                    "other"
                ],
                "__ne__": [
                    "self",
                    "other"
                ],
                "__add__": [
                    "self",
                    "other"
                ],
                "__radd__": [
                    "self",
                    "other"
                ],
                "__sub__": [
                    "self",
                    "other"
                ],
                "__rsub__": [
                    "self",
                    "other"
                ],
                "__mul__": [
                    "self",
                    "other"
                ],
                "__rmul__": [
                    "self",
                    "other"
                ],
                "__div__": [
                    "self",
                    "other"
                ],
                "__truediv__": [
                    "self",
                    "other"
                ],
                "__rtruediv__": [
                    "self",
                    "other"
                ],
                "__floordiv__": [
                    "self",
                    "other"
                ],
                "__rfloordiv__": [
                    "self",
                    "other"
                ],
                "__pow__": [
                    "self",
                    "other"
                ],
                "__rpow__": [
                    "self",
                    "other"
                ],
                "__iadd__": [
                    "self",
                    "other"
                ],
                "__isub__": [
                    "self",
                    "other"
                ],
                "__imul__": [
                    "self",
                    "other"
                ],
                "__idiv__": [
                    "self",
                    "other"
                ],
                "__ifloordiv__": [
                    "self",
                    "other"
                ],
                "__itruediv__": [
                    "self",
                    "other"
                ],
                "__ipow__": [
                    "self",
                    "other"
                ],
                "__float__": [
                    "self"
                ],
                "__int__": [
                    "self"
                ],
                "__long__": [
                    "self"
                ],
                "imag": [
                    "self"
                ],
                "real": [
                    "self"
                ],
                "count": [
                    "self",
                    "axis",
                    "keepdims"
                ],
                "ravel": [
                    "self",
                    "order"
                ],
                "reshape": [
                    "self"
                ],
                "resize": [
                    "self",
                    "newshape",
                    "refcheck",
                    "order"
                ],
                "put": [
                    "self",
                    "indices",
                    "values",
                    "mode"
                ],
                "ids": [
                    "self"
                ],
                "iscontiguous": [
                    "self"
                ],
                "all": [
                    "self",
                    "axis",
                    "out",
                    "keepdims"
                ],
                "any": [
                    "self",
                    "axis",
                    "out",
                    "keepdims"
                ],
                "nonzero": [
                    "self"
                ],
                "trace": [
                    "self",
                    "offset",
                    "axis1",
                    "axis2",
                    "dtype",
                    "out"
                ],
                "dot": [
                    "self",
                    "b",
                    "out",
                    "strict"
                ],
                "sum": [
                    "self",
                    "axis",
                    "dtype",
                    "out",
                    "keepdims"
                ],
                "cumsum": [
                    "self",
                    "axis",
                    "dtype",
                    "out"
                ],
                "prod": [
                    "self",
                    "axis",
                    "dtype",
                    "out",
                    "keepdims"
                ],
                "cumprod": [
                    "self",
                    "axis",
                    "dtype",
                    "out"
                ],
                "mean": [
                    "self",
                    "axis",
                    "dtype",
                    "out",
                    "keepdims"
                ],
                "anom": [
                    "self",
                    "axis",
                    "dtype"
                ],
                "var": [
                    "self",
                    "axis",
                    "dtype",
                    "out",
                    "ddof",
                    "keepdims"
                ],
                "std": [
                    "self",
                    "axis",
                    "dtype",
                    "out",
                    "ddof",
                    "keepdims"
                ],
                "round": [
                    "self",
                    "decimals",
                    "out"
                ],
                "argsort": [
                    "self",
                    "axis",
                    "kind",
                    "order",
                    "endwith",
                    "fill_value"
                ],
                "argmin": [
                    "self",
                    "axis",
                    "fill_value",
                    "out"
                ],
                "argmax": [
                    "self",
                    "axis",
                    "fill_value",
                    "out"
                ],
                "sort": [
                    "self",
                    "axis",
                    "kind",
                    "order",
                    "endwith",
                    "fill_value"
                ],
                "min": [
                    "self",
                    "axis",
                    "out",
                    "fill_value",
                    "keepdims"
                ],
                "mini": [
                    "self",
                    "axis"
                ],
                "max": [
                    "self",
                    "axis",
                    "out",
                    "fill_value",
                    "keepdims"
                ],
                "ptp": [
                    "self",
                    "axis",
                    "out",
                    "fill_value",
                    "keepdims"
                ],
                "partition": [
                    "self"
                ],
                "argpartition": [
                    "self"
                ],
                "take": [
                    "self",
                    "indices",
                    "axis",
                    "out",
                    "mode"
                ],
                "tolist": [
                    "self",
                    "fill_value"
                ],
                "tostring": [
                    "self",
                    "fill_value",
                    "order"
                ],
                "tobytes": [
                    "self",
                    "fill_value",
                    "order"
                ],
                "tofile": [
                    "self",
                    "fid",
                    "sep",
                    "format"
                ],
                "toflex": [
                    "self"
                ],
                "__getstate__": [
                    "self"
                ],
                "__setstate__": [
                    "self",
                    "state"
                ],
                "__reduce__": [
                    "self"
                ],
                "__deepcopy__": [
                    "self",
                    "memo"
                ]
            },
            "mvoid": {
                "__new__": [
                    "self",
                    "data",
                    "mask",
                    "dtype",
                    "fill_value",
                    "hardmask",
                    "copy",
                    "subok"
                ],
                "_data": [
                    "self"
                ],
                "__getitem__": [
                    "self",
                    "indx"
                ],
                "__setitem__": [
                    "self",
                    "indx",
                    "value"
                ],
                "__str__": [
                    "self"
                ],
                "__iter__": [
                    "self"
                ],
                "__len__": [
                    "self"
                ],
                "filled": [
                    "self",
                    "fill_value"
                ],
                "tolist": [
                    "self"
                ]
            },
            "MaskedConstant": {
                "__has_singleton": [
                    "cls"
                ],
                "__new__": [
                    "cls"
                ],
                "__array_finalize__": [
                    "self",
                    "obj"
                ],
                "__array_prepare__": [
                    "self",
                    "obj",
                    "context"
                ],
                "__array_wrap__": [
                    "self",
                    "obj",
                    "context"
                ],
                "__str__": [
                    "self"
                ],
                "__repr__": [
                    "self"
                ],
                "__reduce__": [
                    "self"
                ],
                "__iop__": [
                    "self",
                    "other"
                ],
                "copy": [
                    "self"
                ],
                "__copy__": [
                    "self"
                ],
                "__deepcopy__": [
                    "self",
                    "memo"
                ],
                "__setattr__": [
                    "self",
                    "attr",
                    "value"
                ]
            },
            "_extrema_operation": {
                "__init__": [
                    "self",
                    "ufunc",
                    "compare",
                    "fill_value"
                ],
                "__call__": [
                    "self",
                    "a",
                    "b"
                ],
                "reduce": [
                    "self",
                    "target",
                    "axis"
                ],
                "outer": [
                    "self",
                    "a",
                    "b"
                ]
            },
            "_frommethod": {
                "__init__": [
                    "self",
                    "methodname",
                    "reversed"
                ],
                "getdoc": [
                    "self"
                ],
                "__call__": [
                    "self",
                    "a"
                ]
            },
            "_convert2ma": {
                "__init__": [
                    "self",
                    "funcname",
                    "params"
                ],
                "getdoc": [
                    "self"
                ],
                "__call__": [
                    "self"
                ]
            }
        },
        "numpy.ma.bench": {
            "timer": [
                "s",
                "v",
                "nloop",
                "nrep"
            ],
            "compare_functions_1v": [
                "func",
                "nloop",
                "xs",
                "nmxs",
                "xl",
                "nmxl"
            ],
            "compare_methods": [
                "methodname",
                "args",
                "vars",
                "nloop",
                "test",
                "xs",
                "nmxs",
                "xl",
                "nmxl"
            ],
            "compare_functions_2v": [
                "func",
                "nloop",
                "test",
                "xs",
                "nmxs",
                "ys",
                "nmys",
                "xl",
                "nmxl",
                "yl",
                "nmyl"
            ]
        },
        "numpy.ma.tests.test_extras": {
            "TestGeneric": {
                "test_masked_all": [
                    "self"
                ],
                "test_masked_all_like": [
                    "self"
                ],
                "check_clump": [
                    "self",
                    "f"
                ],
                "test_clump_masked": [
                    "self"
                ],
                "test_clump_unmasked": [
                    "self"
                ],
                "test_flatnotmasked_contiguous": [
                    "self"
                ]
            },
            "TestAverage": {
                "test_testAverage1": [
                    "self"
                ],
                "test_testAverage2": [
                    "self"
                ],
                "test_testAverage3": [
                    "self"
                ],
                "test_onintegers_with_mask": [
                    "self"
                ],
                "test_complex": [
                    "self"
                ]
            },
            "TestConcatenator": {
                "test_1d": [
                    "self"
                ],
                "test_2d": [
                    "self"
                ],
                "test_masked_constant": [
                    "self"
                ]
            },
            "TestNotMasked": {
                "test_edges": [
                    "self"
                ],
                "test_contiguous": [
                    "self"
                ]
            },
            "TestCompressFunctions": {
                "test_compress_nd": [
                    "self"
                ],
                "test_compress_rowcols": [
                    "self"
                ],
                "test_mask_rowcols": [
                    "self"
                ],
                "test_mask_row_cols_axis_deprecation": [
                    "self",
                    "axis",
                    "func",
                    "rowcols_axis"
                ],
                "test_dot": [
                    "self"
                ],
                "test_dot_returns_maskedarray": [
                    "self"
                ],
                "test_dot_out": [
                    "self"
                ]
            },
            "TestApplyAlongAxis": {
                "test_3d": [
                    "self"
                ],
                "test_3d_kwargs": [
                    "self"
                ]
            },
            "TestApplyOverAxes": {
                "test_basic": [
                    "self"
                ]
            },
            "TestMedian": {
                "test_pytype": [
                    "self"
                ],
                "test_inf": [
                    "self"
                ],
                "test_non_masked": [
                    "self"
                ],
                "test_docstring_examples": [
                    "self"
                ],
                "test_axis_argument_errors": [
                    "self"
                ],
                "test_masked_0d": [
                    "self"
                ],
                "test_masked_1d": [
                    "self"
                ],
                "test_1d_shape_consistency": [
                    "self"
                ],
                "test_2d": [
                    "self"
                ],
                "test_2d_waxis": [
                    "self"
                ],
                "test_3d": [
                    "self"
                ],
                "test_neg_axis": [
                    "self"
                ],
                "test_out_1d": [
                    "self"
                ],
                "test_out": [
                    "self"
                ],
                "test_single_non_masked_value_on_axis": [
                    "self"
                ],
                "test_nan": [
                    "self"
                ],
                "test_out_nan": [
                    "self"
                ],
                "test_nan_behavior": [
                    "self"
                ],
                "test_ambigous_fill": [
                    "self"
                ],
                "test_special": [
                    "self"
                ],
                "test_empty": [
                    "self"
                ],
                "test_object": [
                    "self"
                ]
            },
            "TestCov": {
                "setup": [
                    "self"
                ],
                "test_1d_without_missing": [
                    "self"
                ],
                "test_2d_without_missing": [
                    "self"
                ],
                "test_1d_with_missing": [
                    "self"
                ],
                "test_2d_with_missing": [
                    "self"
                ]
            },
            "TestCorrcoef": {
                "setup": [
                    "self"
                ],
                "test_ddof": [
                    "self"
                ],
                "test_bias": [
                    "self"
                ],
                "test_1d_without_missing": [
                    "self"
                ],
                "test_2d_without_missing": [
                    "self"
                ],
                "test_1d_with_missing": [
                    "self"
                ],
                "test_2d_with_missing": [
                    "self"
                ]
            },
            "TestPolynomial": {
                "test_polyfit": [
                    "self"
                ],
                "test_polyfit_with_masked_NaNs": [
                    "self"
                ]
            },
            "TestArraySetOps": {
                "test_unique_onlist": [
                    "self"
                ],
                "test_unique_onmaskedarray": [
                    "self"
                ],
                "test_unique_allmasked": [
                    "self"
                ],
                "test_ediff1d": [
                    "self"
                ],
                "test_ediff1d_tobegin": [
                    "self"
                ],
                "test_ediff1d_toend": [
                    "self"
                ],
                "test_ediff1d_tobegin_toend": [
                    "self"
                ],
                "test_ediff1d_ndarray": [
                    "self"
                ],
                "test_intersect1d": [
                    "self"
                ],
                "test_setxor1d": [
                    "self"
                ],
                "test_isin": [
                    "self"
                ],
                "test_in1d": [
                    "self"
                ],
                "test_in1d_invert": [
                    "self"
                ],
                "test_union1d": [
                    "self"
                ],
                "test_setdiff1d": [
                    "self"
                ],
                "test_setdiff1d_char_array": [
                    "self"
                ]
            },
            "TestShapeBase": {
                "test_atleast_2d": [
                    "self"
                ],
                "test_shape_scalar": [
                    "self"
                ]
            },
            "TestStack": {
                "test_stack_1d": [
                    "self"
                ],
                "test_stack_masks": [
                    "self"
                ],
                "test_stack_nd": [
                    "self"
                ]
            }
        },
        "numpy.ma.tests.test_regression": {
            "TestRegression": {
                "test_masked_array_create": [
                    "self"
                ],
                "test_masked_array": [
                    "self"
                ],
                "test_mem_masked_where": [
                    "self"
                ],
                "test_masked_array_multiply": [
                    "self"
                ],
                "test_masked_array_repeat": [
                    "self"
                ],
                "test_masked_array_repr_unicode": [
                    "self"
                ],
                "test_atleast_2d": [
                    "self"
                ],
                "test_set_fill_value_unicode_py3": [
                    "self"
                ],
                "test_var_sets_maskedarray_scalar": [
                    "self"
                ],
                "test_ddof_corrcoef": [
                    "self"
                ],
                "test_mask_not_backmangled": [
                    "self"
                ],
                "test_empty_list_on_structured": [
                    "self"
                ],
                "test_masked_array_tostring_fortran": [
                    "self"
                ]
            }
        },
        "numpy.ma.tests": {},
        "numpy.ma.tests.test_subclassing": {
            "assert_startswith": [
                "a",
                "b"
            ],
            "SubArray": {
                "__new__": [
                    "cls",
                    "arr",
                    "info"
                ],
                "__array_finalize__": [
                    "self",
                    "obj"
                ],
                "__add__": [
                    "self",
                    "other"
                ],
                "__iadd__": [
                    "self",
                    "other"
                ]
            },
            "SubMaskedArray": {
                "__new__": [
                    "cls",
                    "info"
                ]
            },
            "MSubArray": {
                "__new__": [
                    "cls",
                    "data",
                    "info",
                    "mask"
                ],
                "_series": [
                    "self"
                ]
            },
            "CSAIterator": {
                "__init__": [
                    "self",
                    "a"
                ],
                "__iter__": [
                    "self"
                ],
                "__getitem__": [
                    "self",
                    "indx"
                ],
                "__setitem__": [
                    "self",
                    "index",
                    "value"
                ],
                "__next__": [
                    "self"
                ]
            },
            "ComplicatedSubArray": {
                "__str__": [
                    "self"
                ],
                "__repr__": [
                    "self"
                ],
                "_validate_input": [
                    "self",
                    "value"
                ],
                "__setitem__": [
                    "self",
                    "item",
                    "value"
                ],
                "__getitem__": [
                    "self",
                    "item"
                ],
                "flat": [
                    "self",
                    "value"
                ],
                "__array_wrap__": [
                    "self",
                    "obj",
                    "context"
                ]
            },
            "TestSubclassing": {
                "setup": [
                    "self"
                ],
                "test_data_subclassing": [
                    "self"
                ],
                "test_maskedarray_subclassing": [
                    "self"
                ],
                "test_masked_unary_operations": [
                    "self"
                ],
                "test_masked_binary_operations": [
                    "self"
                ],
                "test_masked_binary_operations2": [
                    "self"
                ],
                "test_attributepropagation": [
                    "self"
                ],
                "test_subclasspreservation": [
                    "self"
                ],
                "test_subclass_items": [
                    "self"
                ],
                "test_subclass_nomask_items": [
                    "self"
                ],
                "test_subclass_repr": [
                    "self"
                ],
                "test_subclass_str": [
                    "self"
                ],
                "test_pure_subclass_info_preservation": [
                    "self"
                ]
            }
        },
        "numpy.ma.tests.test_core": {
            "test_masked_array": [],
            "test_append_masked_array": [],
            "test_append_masked_array_along_axis": [],
            "test_default_fill_value_complex": [],
            "test_ufunc_with_output": [],
            "test_ufunc_with_out_varied": [],
            "test_astype_mask_ordering": [],
            "test_astype_basic": [
                "dt1",
                "dt2"
            ],
            "test_fieldless_void": [],
            "test_mask_shape_assignment_does_not_break_masked": [],
            "TestMaskedArray": {
                "setup": [
                    "self"
                ],
                "test_basicattributes": [
                    "self"
                ],
                "test_basic0d": [
                    "self"
                ],
                "test_basic1d": [
                    "self"
                ],
                "test_basic2d": [
                    "self"
                ],
                "test_concatenate_basic": [
                    "self"
                ],
                "test_concatenate_alongaxis": [
                    "self"
                ],
                "test_concatenate_flexible": [
                    "self"
                ],
                "test_creation_ndmin": [
                    "self"
                ],
                "test_creation_ndmin_from_maskedarray": [
                    "self"
                ],
                "test_creation_maskcreation": [
                    "self"
                ],
                "test_creation_with_list_of_maskedarrays": [
                    "self"
                ],
                "test_creation_from_ndarray_with_padding": [
                    "self"
                ],
                "test_asarray": [
                    "self"
                ],
                "test_asarray_default_order": [
                    "self"
                ],
                "test_asarray_enforce_order": [
                    "self"
                ],
                "test_fix_invalid": [
                    "self"
                ],
                "test_maskedelement": [
                    "self"
                ],
                "test_set_element_as_object": [
                    "self"
                ],
                "test_indexing": [
                    "self"
                ],
                "test_copy": [
                    "self"
                ],
                "test_copy_0d": [
                    "self"
                ],
                "test_copy_on_python_builtins": [
                    "self"
                ],
                "test_copy_immutable": [
                    "self"
                ],
                "test_deepcopy": [
                    "self"
                ],
                "test_str_repr": [
                    "self"
                ],
                "test_str_repr_legacy": [
                    "self"
                ],
                "test_0d_unicode": [
                    "self"
                ],
                "test_pickling": [
                    "self"
                ],
                "test_pickling_subbaseclass": [
                    "self"
                ],
                "test_pickling_maskedconstant": [
                    "self"
                ],
                "test_pickling_wstructured": [
                    "self"
                ],
                "test_pickling_keepalignment": [
                    "self"
                ],
                "test_single_element_subscript": [
                    "self"
                ],
                "test_topython": [
                    "self"
                ],
                "test_oddfeatures_1": [
                    "self"
                ],
                "test_oddfeatures_2": [
                    "self"
                ],
                "test_oddfeatures_3": [
                    "self"
                ],
                "test_filled_with_object_dtype": [
                    "self"
                ],
                "test_filled_with_flexible_dtype": [
                    "self"
                ],
                "test_filled_with_mvoid": [
                    "self"
                ],
                "test_filled_with_nested_dtype": [
                    "self"
                ],
                "test_filled_with_f_order": [
                    "self"
                ],
                "test_optinfo_propagation": [
                    "self"
                ],
                "test_optinfo_forward_propagation": [
                    "self"
                ],
                "test_fancy_printoptions": [
                    "self"
                ],
                "test_flatten_structured_array": [
                    "self"
                ],
                "test_void0d": [
                    "self"
                ],
                "test_mvoid_getitem": [
                    "self"
                ],
                "test_mvoid_iter": [
                    "self"
                ],
                "test_mvoid_print": [
                    "self"
                ],
                "test_mvoid_multidim_print": [
                    "self"
                ],
                "test_object_with_array": [
                    "self"
                ]
            },
            "TestMaskedArrayArithmetic": {
                "setup": [
                    "self"
                ],
                "teardown": [
                    "self"
                ],
                "test_basic_arithmetic": [
                    "self"
                ],
                "test_divide_on_different_shapes": [
                    "self"
                ],
                "test_mixed_arithmetic": [
                    "self"
                ],
                "test_limits_arithmetic": [
                    "self"
                ],
                "test_masked_singleton_arithmetic": [
                    "self"
                ],
                "test_masked_singleton_equality": [
                    "self"
                ],
                "test_arithmetic_with_masked_singleton": [
                    "self"
                ],
                "test_arithmetic_with_masked_singleton_on_1d_singleton": [
                    "self"
                ],
                "test_scalar_arithmetic": [
                    "self"
                ],
                "test_basic_ufuncs": [
                    "self"
                ],
                "test_count_func": [
                    "self"
                ],
                "test_count_on_python_builtins": [
                    "self"
                ],
                "test_minmax_func": [
                    "self"
                ],
                "test_minimummaximum_func": [
                    "self"
                ],
                "test_minmax_reduce": [
                    "self"
                ],
                "test_minmax_funcs_with_output": [
                    "self"
                ],
                "test_minmax_methods": [
                    "self"
                ],
                "test_addsumprod": [
                    "self"
                ],
                "test_binops_d2D": [
                    "self"
                ],
                "test_domained_binops_d2D": [
                    "self"
                ],
                "test_noshrinking": [
                    "self"
                ],
                "test_ufunc_nomask": [
                    "self"
                ],
                "test_noshink_on_creation": [
                    "self"
                ],
                "test_mod": [
                    "self"
                ],
                "test_TakeTransposeInnerOuter": [
                    "self"
                ],
                "test_imag_real": [
                    "self"
                ],
                "test_methods_with_output": [
                    "self"
                ],
                "test_eq_on_structured": [
                    "self"
                ],
                "test_ne_on_structured": [
                    "self"
                ],
                "test_eq_ne_structured_extra": [
                    "self"
                ],
                "test_eq_for_strings": [
                    "self",
                    "dt",
                    "fill"
                ],
                "test_ne_for_strings": [
                    "self",
                    "dt",
                    "fill"
                ],
                "test_eq_for_numeric": [
                    "self",
                    "dt1",
                    "dt2",
                    "fill"
                ],
                "test_ne_for_numeric": [
                    "self",
                    "dt1",
                    "dt2",
                    "fill"
                ],
                "test_eq_with_None": [
                    "self"
                ],
                "test_eq_with_scalar": [
                    "self"
                ],
                "test_eq_different_dimensions": [
                    "self"
                ],
                "test_numpyarithmetics": [
                    "self"
                ]
            },
            "TestMaskedArrayAttributes": {
                "test_keepmask": [
                    "self"
                ],
                "test_hardmask": [
                    "self"
                ],
                "test_hardmask_again": [
                    "self"
                ],
                "test_hardmask_oncemore_yay": [
                    "self"
                ],
                "test_smallmask": [
                    "self"
                ],
                "test_shrink_mask": [
                    "self"
                ],
                "test_flat": [
                    "self"
                ],
                "test_assign_dtype": [
                    "self"
                ]
            },
            "TestFillingValues": {
                "test_check_on_scalar": [
                    "self"
                ],
                "test_check_on_fields": [
                    "self"
                ],
                "test_fillvalue_conversion": [
                    "self"
                ],
                "test_default_fill_value": [
                    "self"
                ],
                "test_default_fill_value_structured": [
                    "self"
                ],
                "test_default_fill_value_void": [
                    "self"
                ],
                "test_fillvalue": [
                    "self"
                ],
                "test_subarray_fillvalue": [
                    "self"
                ],
                "test_fillvalue_exotic_dtype": [
                    "self"
                ],
                "test_fillvalue_datetime_timedelta": [
                    "self"
                ],
                "test_extremum_fill_value": [
                    "self"
                ],
                "test_extremum_fill_value_subdtype": [
                    "self"
                ],
                "test_fillvalue_individual_fields": [
                    "self"
                ],
                "test_fillvalue_implicit_structured_array": [
                    "self"
                ],
                "test_fillvalue_as_arguments": [
                    "self"
                ],
                "test_shape_argument": [
                    "self"
                ],
                "test_fillvalue_in_view": [
                    "self"
                ],
                "test_fillvalue_bytes_or_str": [
                    "self"
                ]
            },
            "TestUfuncs": {
                "setup": [
                    "self"
                ],
                "teardown": [
                    "self"
                ],
                "test_testUfuncRegression": [
                    "self"
                ],
                "test_reduce": [
                    "self"
                ],
                "test_minmax": [
                    "self"
                ],
                "test_ndarray_mask": [
                    "self"
                ],
                "test_treatment_of_NotImplemented": [
                    "self"
                ],
                "test_no_masked_nan_warnings": [
                    "self"
                ]
            },
            "TestMaskedArrayInPlaceArithmetics": {
                "setup": [
                    "self"
                ],
                "test_inplace_addition_scalar": [
                    "self"
                ],
                "test_inplace_addition_array": [
                    "self"
                ],
                "test_inplace_subtraction_scalar": [
                    "self"
                ],
                "test_inplace_subtraction_array": [
                    "self"
                ],
                "test_inplace_multiplication_scalar": [
                    "self"
                ],
                "test_inplace_multiplication_array": [
                    "self"
                ],
                "test_inplace_division_scalar_int": [
                    "self"
                ],
                "test_inplace_division_scalar_float": [
                    "self"
                ],
                "test_inplace_division_array_float": [
                    "self"
                ],
                "test_inplace_division_misc": [
                    "self"
                ],
                "test_datafriendly_add": [
                    "self"
                ],
                "test_datafriendly_sub": [
                    "self"
                ],
                "test_datafriendly_mul": [
                    "self"
                ],
                "test_datafriendly_div": [
                    "self"
                ],
                "test_datafriendly_pow": [
                    "self"
                ],
                "test_datafriendly_add_arrays": [
                    "self"
                ],
                "test_datafriendly_sub_arrays": [
                    "self"
                ],
                "test_datafriendly_mul_arrays": [
                    "self"
                ],
                "test_inplace_addition_scalar_type": [
                    "self"
                ],
                "test_inplace_addition_array_type": [
                    "self"
                ],
                "test_inplace_subtraction_scalar_type": [
                    "self"
                ],
                "test_inplace_subtraction_array_type": [
                    "self"
                ],
                "test_inplace_multiplication_scalar_type": [
                    "self"
                ],
                "test_inplace_multiplication_array_type": [
                    "self"
                ],
                "test_inplace_floor_division_scalar_type": [
                    "self"
                ],
                "test_inplace_floor_division_array_type": [
                    "self"
                ],
                "test_inplace_division_scalar_type": [
                    "self"
                ],
                "test_inplace_division_array_type": [
                    "self"
                ],
                "test_inplace_pow_type": [
                    "self"
                ]
            },
            "TestMaskedArrayMethods": {
                "setup": [
                    "self"
                ],
                "test_generic_methods": [
                    "self"
                ],
                "test_allclose": [
                    "self"
                ],
                "test_allany": [
                    "self"
                ],
                "test_allany_oddities": [
                    "self"
                ],
                "test_argmax_argmin": [
                    "self"
                ],
                "test_clip": [
                    "self"
                ],
                "test_clip_out": [
                    "self"
                ],
                "test_compress": [
                    "self"
                ],
                "test_compressed": [
                    "self"
                ],
                "test_empty": [
                    "self"
                ],
                "test_put": [
                    "self"
                ],
                "test_put_nomask": [
                    "self"
                ],
                "test_put_hardmask": [
                    "self"
                ],
                "test_putmask": [
                    "self"
                ],
                "test_ravel": [
                    "self"
                ],
                "test_reshape": [
                    "self"
                ],
                "test_sort": [
                    "self"
                ],
                "test_stable_sort": [
                    "self"
                ],
                "test_argsort_matches_sort": [
                    "self"
                ],
                "test_sort_2d": [
                    "self"
                ],
                "test_sort_flexible": [
                    "self"
                ],
                "test_argsort": [
                    "self"
                ],
                "test_squeeze": [
                    "self"
                ],
                "test_swapaxes": [
                    "self"
                ],
                "test_take": [
                    "self"
                ],
                "test_take_masked_indices": [
                    "self"
                ],
                "test_tolist": [
                    "self"
                ],
                "test_tolist_specialcase": [
                    "self"
                ],
                "test_toflex": [
                    "self"
                ],
                "test_fromflex": [
                    "self"
                ],
                "test_arraymethod": [
                    "self"
                ],
                "test_arraymethod_0d": [
                    "self"
                ],
                "test_transpose_view": [
                    "self"
                ],
                "test_diagonal_view": [
                    "self"
                ]
            },
            "TestMaskedArrayMathMethods": {
                "setup": [
                    "self"
                ],
                "test_cumsumprod": [
                    "self"
                ],
                "test_cumsumprod_with_output": [
                    "self"
                ],
                "test_ptp": [
                    "self"
                ],
                "test_add_object": [
                    "self"
                ],
                "test_sum_object": [
                    "self"
                ],
                "test_prod_object": [
                    "self"
                ],
                "test_meananom_object": [
                    "self"
                ],
                "test_trace": [
                    "self"
                ],
                "test_dot": [
                    "self"
                ],
                "test_dot_shape_mismatch": [
                    "self"
                ],
                "test_varmean_nomask": [
                    "self"
                ],
                "test_varstd": [
                    "self"
                ],
                "test_varstd_specialcases": [
                    "self"
                ],
                "test_varstd_ddof": [
                    "self"
                ],
                "test_diag": [
                    "self"
                ],
                "test_axis_methods_nomask": [
                    "self"
                ]
            },
            "TestMaskedArrayMathMethodsComplex": {
                "setup": [
                    "self"
                ],
                "test_varstd": [
                    "self"
                ]
            },
            "TestMaskedArrayFunctions": {
                "setup": [
                    "self"
                ],
                "test_masked_where_bool": [
                    "self"
                ],
                "test_masked_equal_wlist": [
                    "self"
                ],
                "test_masked_equal_fill_value": [
                    "self"
                ],
                "test_masked_where_condition": [
                    "self"
                ],
                "test_masked_where_oddities": [
                    "self"
                ],
                "test_masked_where_shape_constraint": [
                    "self"
                ],
                "test_masked_where_structured": [
                    "self"
                ],
                "test_masked_where_mismatch": [
                    "self"
                ],
                "test_masked_otherfunctions": [
                    "self"
                ],
                "test_round": [
                    "self"
                ],
                "test_round_with_output": [
                    "self"
                ],
                "test_round_with_scalar": [
                    "self"
                ],
                "test_identity": [
                    "self"
                ],
                "test_power": [
                    "self"
                ],
                "test_power_with_broadcasting": [
                    "self"
                ],
                "test_where": [
                    "self"
                ],
                "test_where_object": [
                    "self"
                ],
                "test_where_with_masked_choice": [
                    "self"
                ],
                "test_where_with_masked_condition": [
                    "self"
                ],
                "test_where_type": [
                    "self"
                ],
                "test_where_broadcast": [
                    "self"
                ],
                "test_where_structured": [
                    "self"
                ],
                "test_where_structured_masked": [
                    "self"
                ],
                "test_choose": [
                    "self"
                ],
                "test_choose_with_out": [
                    "self"
                ],
                "test_reshape": [
                    "self"
                ],
                "test_make_mask_descr": [
                    "self"
                ],
                "test_make_mask": [
                    "self"
                ],
                "test_mask_or": [
                    "self"
                ],
                "test_flatten_mask": [
                    "self"
                ],
                "test_on_ndarray": [
                    "self"
                ],
                "test_compress": [
                    "self"
                ],
                "test_compressed": [
                    "self"
                ],
                "test_convolve": [
                    "self"
                ]
            },
            "TestMaskedFields": {
                "setup": [
                    "self"
                ],
                "test_set_records_masks": [
                    "self"
                ],
                "test_set_record_element": [
                    "self"
                ],
                "test_set_record_slice": [
                    "self"
                ],
                "test_mask_element": [
                    "self"
                ],
                "test_getmaskarray": [
                    "self"
                ],
                "test_view": [
                    "self"
                ],
                "test_getitem": [
                    "self"
                ],
                "test_setitem": [
                    "self"
                ],
                "test_setitem_scalar": [
                    "self"
                ],
                "test_element_len": [
                    "self"
                ]
            },
            "TestMaskedObjectArray": {
                "test_getitem": [
                    "self"
                ],
                "test_nested_ma": [
                    "self"
                ]
            },
            "TestMaskedView": {
                "setup": [
                    "self"
                ],
                "test_view_to_nothing": [
                    "self"
                ],
                "test_view_to_type": [
                    "self"
                ],
                "test_view_to_simple_dtype": [
                    "self"
                ],
                "test_view_to_flexible_dtype": [
                    "self"
                ],
                "test_view_to_subdtype": [
                    "self"
                ],
                "test_view_to_dtype_and_type": [
                    "self"
                ]
            },
            "TestOptionalArgs": {
                "test_ndarrayfuncs": [
                    "self"
                ],
                "test_count": [
                    "self"
                ]
            },
            "TestMaskedConstant": {
                "_do_add_test": [
                    "self",
                    "add"
                ],
                "test_ufunc": [
                    "self"
                ],
                "test_operator": [
                    "self"
                ],
                "test_ctor": [
                    "self"
                ],
                "test_repr": [
                    "self"
                ],
                "test_pickle": [
                    "self"
                ],
                "test_copy": [
                    "self"
                ],
                "test__copy": [
                    "self"
                ],
                "test_deepcopy": [
                    "self"
                ],
                "test_immutable": [
                    "self"
                ],
                "test_coercion_int": [
                    "self"
                ],
                "test_coercion_long": [
                    "self"
                ],
                "test_coercion_float": [
                    "self"
                ],
                "test_coercion_unicode": [
                    "self"
                ],
                "test_coercion_bytes": [
                    "self"
                ],
                "test_subclass": [
                    "self"
                ],
                "test_attributes_readonly": [
                    "self"
                ]
            },
            "TestMaskedWhereAliases": {
                "test_masked_values": [
                    "self"
                ]
            }
        },
        "numpy.ma.tests.test_old_ma": {
            "eq": [
                "v",
                "w",
                "msg"
            ],
            "eqmask": [
                "m1",
                "m2"
            ],
            "TestMa": {
                "setup": [
                    "self"
                ],
                "test_testBasic1d": [
                    "self"
                ],
                "test_testBasic2d": [
                    "self"
                ],
                "test_testArithmetic": [
                    "self"
                ],
                "test_testMixedArithmetic": [
                    "self"
                ],
                "test_testUfuncs1": [
                    "self"
                ],
                "test_xtestCount": [
                    "self"
                ],
                "test_testMinMax": [
                    "self"
                ],
                "test_testAddSumProd": [
                    "self"
                ],
                "test_testCI": [
                    "self"
                ],
                "test_testCopySize": [
                    "self"
                ],
                "test_testPut": [
                    "self"
                ],
                "test_testPut2": [
                    "self"
                ],
                "test_testMaPut": [
                    "self"
                ],
                "test_testOddFeatures": [
                    "self"
                ],
                "test_testMinMax2": [
                    "self"
                ],
                "test_testTakeTransposeInnerOuter": [
                    "self"
                ],
                "test_testInplace": [
                    "self"
                ],
                "test_testPickle": [
                    "self"
                ],
                "test_testMasked": [
                    "self"
                ],
                "test_testAverage1": [
                    "self"
                ],
                "test_testAverage2": [
                    "self"
                ],
                "test_testToPython": [
                    "self"
                ],
                "test_testScalarArithmetic": [
                    "self"
                ],
                "test_testArrayMethods": [
                    "self"
                ],
                "test_testArrayAttributes": [
                    "self"
                ],
                "test_testAPI": [
                    "self"
                ],
                "test_testSingleElementSubscript": [
                    "self"
                ]
            },
            "TestUfuncs": {
                "setup": [
                    "self"
                ],
                "test_testUfuncRegression": [
                    "self"
                ],
                "test_reduce": [
                    "self"
                ],
                "test_minmax": [
                    "self"
                ],
                "test_nonzero": [
                    "self"
                ]
            },
            "TestArrayMethods": {
                "setup": [
                    "self"
                ],
                "test_trace": [
                    "self"
                ],
                "test_clip": [
                    "self"
                ],
                "test_ptp": [
                    "self"
                ],
                "test_swapaxes": [
                    "self"
                ],
                "test_cumprod": [
                    "self"
                ],
                "test_cumsum": [
                    "self"
                ],
                "test_varstd": [
                    "self"
                ]
            }
        },
        "numpy.ma.tests.test_deprecations": {
            "TestArgsort": {
                "_test_base": [
                    "self",
                    "argsort",
                    "cls"
                ],
                "test_function_ndarray": [
                    "self"
                ],
                "test_function_maskedarray": [
                    "self"
                ],
                "test_method": [
                    "self"
                ]
            },
            "TestMinimumMaximum": {
                "test_minimum": [
                    "self"
                ],
                "test_maximum": [
                    "self"
                ],
                "test_axis_default": [
                    "self"
                ]
            }
        },
        "numpy.ma.tests.test_mrecords": {
            "test_record_array_with_object_field": [],
            "TestMRecords": {
                "test_byview": [
                    "self"
                ],
                "test_get": [
                    "self"
                ],
                "test_set_fields": [
                    "self"
                ],
                "test_set_fields_mask": [
                    "self"
                ],
                "test_set_mask": [
                    "self"
                ],
                "test_set_mask_fromarray": [
                    "self"
                ],
                "test_set_mask_fromfields": [
                    "self"
                ],
                "test_set_elements": [
                    "self"
                ],
                "test_setslices_hardmask": [
                    "self"
                ],
                "test_hardmask": [
                    "self"
                ],
                "test_pickling": [
                    "self"
                ],
                "test_filled": [
                    "self"
                ],
                "test_tolist": [
                    "self"
                ],
                "test_withnames": [
                    "self"
                ],
                "test_exotic_formats": [
                    "self"
                ]
            },
            "TestView": {
                "setup": [
                    "self"
                ],
                "test_view_by_itself": [
                    "self"
                ],
                "test_view_simple_dtype": [
                    "self"
                ],
                "test_view_flexible_type": [
                    "self"
                ]
            },
            "TestMRecordsImport": {
                "test_fromarrays": [
                    "self"
                ],
                "test_fromrecords": [
                    "self"
                ],
                "test_fromrecords_wmask": [
                    "self"
                ],
                "test_fromtextfile": [
                    "self"
                ],
                "test_addfield": [
                    "self"
                ]
            }
        },
        "numpy.fft._pocketfft": {
            "_raw_fft": [
                "a",
                "n",
                "axis",
                "is_real",
                "is_forward",
                "inv_norm"
            ],
            "_unitary": [
                "norm"
            ],
            "_fft_dispatcher": [
                "a",
                "n",
                "axis",
                "norm"
            ],
            "fft": [
                "a",
                "n",
                "axis",
                "norm"
            ],
            "ifft": [
                "a",
                "n",
                "axis",
                "norm"
            ],
            "rfft": [
                "a",
                "n",
                "axis",
                "norm"
            ],
            "irfft": [
                "a",
                "n",
                "axis",
                "norm"
            ],
            "hfft": [
                "a",
                "n",
                "axis",
                "norm"
            ],
            "ihfft": [
                "a",
                "n",
                "axis",
                "norm"
            ],
            "_cook_nd_args": [
                "a",
                "s",
                "axes",
                "invreal"
            ],
            "_raw_fftnd": [
                "a",
                "s",
                "axes",
                "function",
                "norm"
            ],
            "_fftn_dispatcher": [
                "a",
                "s",
                "axes",
                "norm"
            ],
            "fftn": [
                "a",
                "s",
                "axes",
                "norm"
            ],
            "ifftn": [
                "a",
                "s",
                "axes",
                "norm"
            ],
            "fft2": [
                "a",
                "s",
                "axes",
                "norm"
            ],
            "ifft2": [
                "a",
                "s",
                "axes",
                "norm"
            ],
            "rfftn": [
                "a",
                "s",
                "axes",
                "norm"
            ],
            "rfft2": [
                "a",
                "s",
                "axes",
                "norm"
            ],
            "irfftn": [
                "a",
                "s",
                "axes",
                "norm"
            ],
            "irfft2": [
                "a",
                "s",
                "axes",
                "norm"
            ]
        },
        "numpy.fft": {},
        "numpy.fft.info": {},
        "numpy.fft.setup": {
            "configuration": [
                "parent_package",
                "top_path"
            ]
        },
        "numpy.fft.helper": {
            "_fftshift_dispatcher": [
                "x",
                "axes"
            ],
            "fftshift": [
                "x",
                "axes"
            ],
            "ifftshift": [
                "x",
                "axes"
            ],
            "fftfreq": [
                "n",
                "d"
            ],
            "rfftfreq": [
                "n",
                "d"
            ]
        },
        "numpy.fft.pocketfft": {
            "_raw_fft": [
                "a",
                "n",
                "axis",
                "is_real",
                "is_forward",
                "inv_norm"
            ],
            "_unitary": [
                "norm"
            ],
            "_fft_dispatcher": [
                "a",
                "n",
                "axis",
                "norm"
            ],
            "fft": [
                "a",
                "n",
                "axis",
                "norm"
            ],
            "ifft": [
                "a",
                "n",
                "axis",
                "norm"
            ],
            "rfft": [
                "a",
                "n",
                "axis",
                "norm"
            ],
            "irfft": [
                "a",
                "n",
                "axis",
                "norm"
            ],
            "hfft": [
                "a",
                "n",
                "axis",
                "norm"
            ],
            "ihfft": [
                "a",
                "n",
                "axis",
                "norm"
            ],
            "_cook_nd_args": [
                "a",
                "s",
                "axes",
                "invreal"
            ],
            "_raw_fftnd": [
                "a",
                "s",
                "axes",
                "function",
                "norm"
            ],
            "_fftn_dispatcher": [
                "a",
                "s",
                "axes",
                "norm"
            ],
            "fftn": [
                "a",
                "s",
                "axes",
                "norm"
            ],
            "ifftn": [
                "a",
                "s",
                "axes",
                "norm"
            ],
            "fft2": [
                "a",
                "s",
                "axes",
                "norm"
            ],
            "ifft2": [
                "a",
                "s",
                "axes",
                "norm"
            ],
            "rfftn": [
                "a",
                "s",
                "axes",
                "norm"
            ],
            "rfft2": [
                "a",
                "s",
                "axes",
                "norm"
            ],
            "irfftn": [
                "a",
                "s",
                "axes",
                "norm"
            ],
            "irfft2": [
                "a",
                "s",
                "axes",
                "norm"
            ]
        },
        "numpy.fft.fftpack": {
            "_raw_fft": [
                "a",
                "n",
                "axis",
                "init_function",
                "work_function",
                "fft_cache"
            ],
            "_unitary": [
                "norm"
            ],
            "_fft_dispatcher": [
                "a",
                "n",
                "axis",
                "norm"
            ],
            "fft": [
                "a",
                "n",
                "axis",
                "norm"
            ],
            "ifft": [
                "a",
                "n",
                "axis",
                "norm"
            ],
            "rfft": [
                "a",
                "n",
                "axis",
                "norm"
            ],
            "irfft": [
                "a",
                "n",
                "axis",
                "norm"
            ],
            "hfft": [
                "a",
                "n",
                "axis",
                "norm"
            ],
            "ihfft": [
                "a",
                "n",
                "axis",
                "norm"
            ],
            "_cook_nd_args": [
                "a",
                "s",
                "axes",
                "invreal"
            ],
            "_raw_fftnd": [
                "a",
                "s",
                "axes",
                "function",
                "norm"
            ],
            "_fftn_dispatcher": [
                "a",
                "s",
                "axes",
                "norm"
            ],
            "fftn": [
                "a",
                "s",
                "axes",
                "norm"
            ],
            "ifftn": [
                "a",
                "s",
                "axes",
                "norm"
            ],
            "fft2": [
                "a",
                "s",
                "axes",
                "norm"
            ],
            "ifft2": [
                "a",
                "s",
                "axes",
                "norm"
            ],
            "rfftn": [
                "a",
                "s",
                "axes",
                "norm"
            ],
            "rfft2": [
                "a",
                "s",
                "axes",
                "norm"
            ],
            "irfftn": [
                "a",
                "s",
                "axes",
                "norm"
            ],
            "irfft2": [
                "a",
                "s",
                "axes",
                "norm"
            ]
        },
        "numpy.fft.tests": {},
        "numpy.fft.tests.test_pocketfft": {
            "fft1": [
                "x"
            ],
            "test_fft_with_order": [
                "dtype",
                "order",
                "fft"
            ],
            "TestFFTShift": {
                "test_fft_n": [
                    "self"
                ]
            },
            "TestFFT1D": {
                "test_identity": [
                    "self"
                ],
                "test_fft": [
                    "self"
                ],
                "test_ifft": [
                    "self",
                    "norm"
                ],
                "test_fft2": [
                    "self"
                ],
                "test_ifft2": [
                    "self"
                ],
                "test_fftn": [
                    "self"
                ],
                "test_ifftn": [
                    "self"
                ],
                "test_rfft": [
                    "self"
                ],
                "test_irfft": [
                    "self"
                ],
                "test_rfft2": [
                    "self"
                ],
                "test_irfft2": [
                    "self"
                ],
                "test_rfftn": [
                    "self"
                ],
                "test_irfftn": [
                    "self"
                ],
                "test_hfft": [
                    "self"
                ],
                "test_ihttf": [
                    "self"
                ],
                "test_axes": [
                    "self",
                    "op"
                ],
                "test_all_1d_norm_preserving": [
                    "self"
                ],
                "test_dtypes": [
                    "self",
                    "dtype"
                ]
            },
            "TestFFTThreadSafe": {
                "_test_mtsame": [
                    "self",
                    "func"
                ],
                "test_fft": [
                    "self"
                ],
                "test_ifft": [
                    "self"
                ],
                "test_rfft": [
                    "self"
                ],
                "test_irfft": [
                    "self"
                ]
            }
        },
        "numpy.fft.tests.test_helper": {
            "TestFFTShift": {
                "test_definition": [
                    "self"
                ],
                "test_inverse": [
                    "self"
                ],
                "test_axes_keyword": [
                    "self"
                ],
                "test_uneven_dims": [
                    "self"
                ],
                "test_equal_to_original": [
                    "self"
                ]
            },
            "TestFFTFreq": {
                "test_definition": [
                    "self"
                ]
            },
            "TestRFFTFreq": {
                "test_definition": [
                    "self"
                ]
            },
            "TestIRFFTN": {
                "test_not_last_axis_success": [
                    "self"
                ]
            }
        },
        "numpy.fft.tests.test_fftpack": {
            "fft1": [
                "x"
            ],
            "TestFFTShift": {
                "test_fft_n": [
                    "self"
                ]
            },
            "TestFFT1D": {
                "test_fft": [
                    "self"
                ],
                "test_ifft": [
                    "self"
                ],
                "test_fft2": [
                    "self"
                ],
                "test_ifft2": [
                    "self"
                ],
                "test_fftn": [
                    "self"
                ],
                "test_ifftn": [
                    "self"
                ],
                "test_rfft": [
                    "self"
                ],
                "test_irfft": [
                    "self"
                ],
                "test_rfft2": [
                    "self"
                ],
                "test_irfft2": [
                    "self"
                ],
                "test_rfftn": [
                    "self"
                ],
                "test_irfftn": [
                    "self"
                ],
                "test_hfft": [
                    "self"
                ],
                "test_ihttf": [
                    "self"
                ],
                "test_all_1d_norm_preserving": [
                    "self"
                ]
            },
            "TestFFTThreadSafe": {
                "_test_mtsame": [
                    "self",
                    "func"
                ],
                "test_fft": [
                    "self"
                ],
                "test_ifft": [
                    "self"
                ],
                "test_rfft": [
                    "self"
                ],
                "test_irfft": [
                    "self"
                ]
            }
        },
        "numpy.doc.internals": {},
        "numpy.doc.glossary": {},
        "numpy.doc": {},
        "numpy.doc.byteswapping": {},
        "numpy.doc.subclassing": {},
        "numpy.doc.structured_arrays": {},
        "numpy.doc.basics": {},
        "numpy.doc.broadcasting": {},
        "numpy.doc.constants": {
            "add_newdoc": [
                "module",
                "name",
                "doc"
            ]
        },
        "numpy.doc.creation": {},
        "numpy.doc.misc": {},
        "numpy.doc.dispatch": {},
        "numpy.doc.indexing": {},
        "numpy.doc.ufuncs": {},
        "numpy.core.umath_tests": {},
        "numpy.core.records": {
            "find_duplicate": [
                "list"
            ],
            "fromarrays": [
                "arrayList",
                "dtype",
                "shape",
                "formats",
                "names",
                "titles",
                "aligned",
                "byteorder"
            ],
            "fromrecords": [
                "recList",
                "dtype",
                "shape",
                "formats",
                "names",
                "titles",
                "aligned",
                "byteorder"
            ],
            "fromstring": [
                "datastring",
                "dtype",
                "shape",
                "offset",
                "formats",
                "names",
                "titles",
                "aligned",
                "byteorder"
            ],
            "get_remaining_size": [
                "fd"
            ],
            "fromfile": [
                "fd",
                "dtype",
                "shape",
                "offset",
                "formats",
                "names",
                "titles",
                "aligned",
                "byteorder"
            ],
            "array": [
                "obj",
                "dtype",
                "shape",
                "offset",
                "strides",
                "formats",
                "names",
                "titles",
                "aligned",
                "byteorder",
                "copy"
            ],
            "_OrderedCounter": {
                "__repr__": [
                    "self"
                ],
                "__reduce__": [
                    "self"
                ]
            },
            "format_parser": {
                "__init__": [
                    "self",
                    "formats",
                    "names",
                    "titles",
                    "aligned",
                    "byteorder"
                ],
                "_parseFormats": [
                    "self",
                    "formats",
                    "aligned"
                ],
                "_setfieldnames": [
                    "self",
                    "names",
                    "titles"
                ],
                "_createdescr": [
                    "self",
                    "byteorder"
                ]
            },
            "record": {
                "__repr__": [
                    "self"
                ],
                "__str__": [
                    "self"
                ],
                "__getattribute__": [
                    "self",
                    "attr"
                ],
                "__setattr__": [
                    "self",
                    "attr",
                    "val"
                ],
                "__getitem__": [
                    "self",
                    "indx"
                ],
                "pprint": [
                    "self"
                ]
            },
            "recarray": {
                "__new__": [
                    "subtype",
                    "shape",
                    "dtype",
                    "buf",
                    "offset",
                    "strides",
                    "formats",
                    "names",
                    "titles",
                    "byteorder",
                    "aligned",
                    "order"
                ],
                "__array_finalize__": [
                    "self",
                    "obj"
                ],
                "__getattribute__": [
                    "self",
                    "attr"
                ],
                "__setattr__": [
                    "self",
                    "attr",
                    "val"
                ],
                "__getitem__": [
                    "self",
                    "indx"
                ],
                "__repr__": [
                    "self"
                ],
                "field": [
                    "self",
                    "attr",
                    "val"
                ]
            }
        },
        "numpy.core.overrides": {
            "verify_matching_signatures": [
                "implementation",
                "dispatcher"
            ],
            "set_module": [
                "module"
            ],
            "array_function_dispatch": [
                "dispatcher",
                "module",
                "verify",
                "docs_from_dispatcher"
            ],
            "array_function_from_dispatcher": [
                "implementation",
                "module",
                "verify",
                "docs_from_dispatcher"
            ]
        },
        "numpy.core": {
            "_ufunc_reconstruct": [
                "module",
                "name"
            ],
            "_ufunc_reduce": [
                "func"
            ]
        },
        "numpy.core.memmap": {
            "memmap": {
                "__new__": [
                    "subtype",
                    "filename",
                    "dtype",
                    "mode",
                    "offset",
                    "shape",
                    "order"
                ],
                "__array_finalize__": [
                    "self",
                    "obj"
                ],
                "flush": [
                    "self"
                ],
                "__array_wrap__": [
                    "self",
                    "arr",
                    "context"
                ],
                "__getitem__": [
                    "self",
                    "index"
                ]
            }
        },
        "numpy.core.fromnumeric": {
            "_wrapit": [
                "obj",
                "method"
            ],
            "_wrapfunc": [
                "obj",
                "method"
            ],
            "_wrapreduction": [
                "obj",
                "ufunc",
                "method",
                "axis",
                "dtype",
                "out"
            ],
            "_take_dispatcher": [
                "a",
                "indices",
                "axis",
                "out",
                "mode"
            ],
            "take": [
                "a",
                "indices",
                "axis",
                "out",
                "mode"
            ],
            "_reshape_dispatcher": [
                "a",
                "newshape",
                "order"
            ],
            "reshape": [
                "a",
                "newshape",
                "order"
            ],
            "_choose_dispatcher": [
                "a",
                "choices",
                "out",
                "mode"
            ],
            "choose": [
                "a",
                "choices",
                "out",
                "mode"
            ],
            "_repeat_dispatcher": [
                "a",
                "repeats",
                "axis"
            ],
            "repeat": [
                "a",
                "repeats",
                "axis"
            ],
            "_put_dispatcher": [
                "a",
                "ind",
                "v",
                "mode"
            ],
            "put": [
                "a",
                "ind",
                "v",
                "mode"
            ],
            "_swapaxes_dispatcher": [
                "a",
                "axis1",
                "axis2"
            ],
            "swapaxes": [
                "a",
                "axis1",
                "axis2"
            ],
            "_transpose_dispatcher": [
                "a",
                "axes"
            ],
            "transpose": [
                "a",
                "axes"
            ],
            "_partition_dispatcher": [
                "a",
                "kth",
                "axis",
                "kind",
                "order"
            ],
            "partition": [
                "a",
                "kth",
                "axis",
                "kind",
                "order"
            ],
            "_argpartition_dispatcher": [
                "a",
                "kth",
                "axis",
                "kind",
                "order"
            ],
            "argpartition": [
                "a",
                "kth",
                "axis",
                "kind",
                "order"
            ],
            "_sort_dispatcher": [
                "a",
                "axis",
                "kind",
                "order"
            ],
            "sort": [
                "a",
                "axis",
                "kind",
                "order"
            ],
            "_argsort_dispatcher": [
                "a",
                "axis",
                "kind",
                "order"
            ],
            "argsort": [
                "a",
                "axis",
                "kind",
                "order"
            ],
            "_argmax_dispatcher": [
                "a",
                "axis",
                "out"
            ],
            "argmax": [
                "a",
                "axis",
                "out"
            ],
            "_argmin_dispatcher": [
                "a",
                "axis",
                "out"
            ],
            "argmin": [
                "a",
                "axis",
                "out"
            ],
            "_searchsorted_dispatcher": [
                "a",
                "v",
                "side",
                "sorter"
            ],
            "searchsorted": [
                "a",
                "v",
                "side",
                "sorter"
            ],
            "_resize_dispatcher": [
                "a",
                "new_shape"
            ],
            "resize": [
                "a",
                "new_shape"
            ],
            "_squeeze_dispatcher": [
                "a",
                "axis"
            ],
            "squeeze": [
                "a",
                "axis"
            ],
            "_diagonal_dispatcher": [
                "a",
                "offset",
                "axis1",
                "axis2"
            ],
            "diagonal": [
                "a",
                "offset",
                "axis1",
                "axis2"
            ],
            "_trace_dispatcher": [
                "a",
                "offset",
                "axis1",
                "axis2",
                "dtype",
                "out"
            ],
            "trace": [
                "a",
                "offset",
                "axis1",
                "axis2",
                "dtype",
                "out"
            ],
            "_ravel_dispatcher": [
                "a",
                "order"
            ],
            "ravel": [
                "a",
                "order"
            ],
            "_nonzero_dispatcher": [
                "a"
            ],
            "nonzero": [
                "a"
            ],
            "_shape_dispatcher": [
                "a"
            ],
            "shape": [
                "a"
            ],
            "_compress_dispatcher": [
                "condition",
                "a",
                "axis",
                "out"
            ],
            "compress": [
                "condition",
                "a",
                "axis",
                "out"
            ],
            "_clip_dispatcher": [
                "a",
                "a_min",
                "a_max",
                "out"
            ],
            "clip": [
                "a",
                "a_min",
                "a_max",
                "out"
            ],
            "_sum_dispatcher": [
                "a",
                "axis",
                "dtype",
                "out",
                "keepdims",
                "initial",
                "where"
            ],
            "sum": [
                "a",
                "axis",
                "dtype",
                "out",
                "keepdims",
                "initial",
                "where"
            ],
            "_any_dispatcher": [
                "a",
                "axis",
                "out",
                "keepdims"
            ],
            "any": [
                "a",
                "axis",
                "out",
                "keepdims"
            ],
            "_all_dispatcher": [
                "a",
                "axis",
                "out",
                "keepdims"
            ],
            "all": [
                "a",
                "axis",
                "out",
                "keepdims"
            ],
            "_cumsum_dispatcher": [
                "a",
                "axis",
                "dtype",
                "out"
            ],
            "cumsum": [
                "a",
                "axis",
                "dtype",
                "out"
            ],
            "_ptp_dispatcher": [
                "a",
                "axis",
                "out",
                "keepdims"
            ],
            "ptp": [
                "a",
                "axis",
                "out",
                "keepdims"
            ],
            "_amax_dispatcher": [
                "a",
                "axis",
                "out",
                "keepdims",
                "initial",
                "where"
            ],
            "amax": [
                "a",
                "axis",
                "out",
                "keepdims",
                "initial",
                "where"
            ],
            "_amin_dispatcher": [
                "a",
                "axis",
                "out",
                "keepdims",
                "initial",
                "where"
            ],
            "amin": [
                "a",
                "axis",
                "out",
                "keepdims",
                "initial",
                "where"
            ],
            "_alen_dispathcer": [
                "a"
            ],
            "alen": [
                "a"
            ],
            "_prod_dispatcher": [
                "a",
                "axis",
                "dtype",
                "out",
                "keepdims",
                "initial",
                "where"
            ],
            "prod": [
                "a",
                "axis",
                "dtype",
                "out",
                "keepdims",
                "initial",
                "where"
            ],
            "_cumprod_dispatcher": [
                "a",
                "axis",
                "dtype",
                "out"
            ],
            "cumprod": [
                "a",
                "axis",
                "dtype",
                "out"
            ],
            "_ndim_dispatcher": [
                "a"
            ],
            "ndim": [
                "a"
            ],
            "_size_dispatcher": [
                "a",
                "axis"
            ],
            "size": [
                "a",
                "axis"
            ],
            "_around_dispatcher": [
                "a",
                "decimals",
                "out"
            ],
            "around": [
                "a",
                "decimals",
                "out"
            ],
            "_mean_dispatcher": [
                "a",
                "axis",
                "dtype",
                "out",
                "keepdims"
            ],
            "mean": [
                "a",
                "axis",
                "dtype",
                "out",
                "keepdims"
            ],
            "_std_dispatcher": [
                "a",
                "axis",
                "dtype",
                "out",
                "ddof",
                "keepdims"
            ],
            "std": [
                "a",
                "axis",
                "dtype",
                "out",
                "ddof",
                "keepdims"
            ],
            "_var_dispatcher": [
                "a",
                "axis",
                "dtype",
                "out",
                "ddof",
                "keepdims"
            ],
            "var": [
                "a",
                "axis",
                "dtype",
                "out",
                "ddof",
                "keepdims"
            ],
            "round_": [
                "a",
                "decimals",
                "out"
            ],
            "product": [],
            "cumproduct": [],
            "sometrue": [],
            "alltrue": []
        },
        "numpy.core.machar": {
            "MachAr": {
                "__init__": [
                    "self",
                    "float_conv",
                    "int_conv",
                    "float_to_float",
                    "float_to_str",
                    "title"
                ],
                "_do_init": [
                    "self",
                    "float_conv",
                    "int_conv",
                    "float_to_float",
                    "float_to_str",
                    "title"
                ],
                "__str__": [
                    "self"
                ]
            }
        },
        "numpy.core.info": {},
        "numpy.core.arrayprint": {
            "_make_options_dict": [
                "precision",
                "threshold",
                "edgeitems",
                "linewidth",
                "suppress",
                "nanstr",
                "infstr",
                "sign",
                "formatter",
                "floatmode",
                "legacy"
            ],
            "set_printoptions": [
                "precision",
                "threshold",
                "edgeitems",
                "linewidth",
                "suppress",
                "nanstr",
                "infstr",
                "formatter",
                "sign",
                "floatmode"
            ],
            "get_printoptions": [],
            "printoptions": [],
            "_leading_trailing": [
                "a",
                "edgeitems",
                "index"
            ],
            "_object_format": [
                "o"
            ],
            "repr_format": [
                "x"
            ],
            "str_format": [
                "x"
            ],
            "_get_formatdict": [
                "data"
            ],
            "_get_format_function": [
                "data"
            ],
            "_recursive_guard": [
                "fillvalue"
            ],
            "_array2string": [
                "a",
                "options",
                "separator",
                "prefix"
            ],
            "_array2string_dispatcher": [
                "a",
                "max_line_width",
                "precision",
                "suppress_small",
                "separator",
                "prefix",
                "style",
                "formatter",
                "threshold",
                "edgeitems",
                "sign",
                "floatmode",
                "suffix"
            ],
            "array2string": [
                "a",
                "max_line_width",
                "precision",
                "suppress_small",
                "separator",
                "prefix",
                "style",
                "formatter",
                "threshold",
                "edgeitems",
                "sign",
                "floatmode",
                "suffix"
            ],
            "_extendLine": [
                "s",
                "line",
                "word",
                "line_width",
                "next_line_prefix",
                "legacy"
            ],
            "_formatArray": [
                "a",
                "format_function",
                "line_width",
                "next_line_prefix",
                "separator",
                "edge_items",
                "summary_insert",
                "legacy"
            ],
            "_none_or_positive_arg": [
                "x",
                "name"
            ],
            "format_float_scientific": [
                "x",
                "precision",
                "unique",
                "trim",
                "sign",
                "pad_left",
                "exp_digits"
            ],
            "format_float_positional": [
                "x",
                "precision",
                "unique",
                "fractional",
                "trim",
                "sign",
                "pad_left",
                "pad_right"
            ],
            "_void_scalar_repr": [
                "x"
            ],
            "dtype_is_implied": [
                "dtype"
            ],
            "dtype_short_repr": [
                "dtype"
            ],
            "_array_repr_implementation": [
                "arr",
                "max_line_width",
                "precision",
                "suppress_small",
                "array2string"
            ],
            "_array_repr_dispatcher": [
                "arr",
                "max_line_width",
                "precision",
                "suppress_small"
            ],
            "array_repr": [
                "arr",
                "max_line_width",
                "precision",
                "suppress_small"
            ],
            "_guarded_repr_or_str": [
                "v"
            ],
            "_array_str_implementation": [
                "a",
                "max_line_width",
                "precision",
                "suppress_small",
                "array2string"
            ],
            "_array_str_dispatcher": [
                "a",
                "max_line_width",
                "precision",
                "suppress_small"
            ],
            "array_str": [
                "a",
                "max_line_width",
                "precision",
                "suppress_small"
            ],
            "set_string_function": [
                "f",
                "repr"
            ],
            "FloatingFormat": {
                "__init__": [
                    "self",
                    "data",
                    "precision",
                    "floatmode",
                    "suppress_small",
                    "sign"
                ],
                "fillFormat": [
                    "self",
                    "data"
                ],
                "__call__": [
                    "self",
                    "x"
                ]
            },
            "IntegerFormat": {
                "__init__": [
                    "self",
                    "data"
                ],
                "__call__": [
                    "self",
                    "x"
                ]
            },
            "BoolFormat": {
                "__init__": [
                    "self",
                    "data"
                ],
                "__call__": [
                    "self",
                    "x"
                ]
            },
            "ComplexFloatingFormat": {
                "__init__": [
                    "self",
                    "x",
                    "precision",
                    "floatmode",
                    "suppress_small",
                    "sign"
                ],
                "__call__": [
                    "self",
                    "x"
                ]
            },
            "_TimelikeFormat": {
                "__init__": [
                    "self",
                    "data"
                ],
                "_format_non_nat": [
                    "self",
                    "x"
                ],
                "__call__": [
                    "self",
                    "x"
                ]
            },
            "DatetimeFormat": {
                "__init__": [
                    "self",
                    "x",
                    "unit",
                    "timezone",
                    "casting",
                    "legacy"
                ],
                "__call__": [
                    "self",
                    "x"
                ],
                "_format_non_nat": [
                    "self",
                    "x"
                ]
            },
            "TimedeltaFormat": {
                "_format_non_nat": [
                    "self",
                    "x"
                ]
            },
            "SubArrayFormat": {
                "__init__": [
                    "self",
                    "format_function"
                ],
                "__call__": [
                    "self",
                    "arr"
                ]
            },
            "StructuredVoidFormat": {
                "__init__": [
                    "self",
                    "format_functions"
                ],
                "from_data": [
                    "cls",
                    "data"
                ],
                "__call__": [
                    "self",
                    "x"
                ]
            }
        },
        "numpy.core._dtype_ctypes": {
            "_from_ctypes_array": [
                "t"
            ],
            "_from_ctypes_structure": [
                "t"
            ],
            "_from_ctypes_scalar": [
                "t"
            ],
            "_from_ctypes_union": [
                "t"
            ],
            "dtype_from_ctypes_type": [
                "t"
            ]
        },
        "numpy.core._ufunc_config": {
            "seterr": [
                "all",
                "divide",
                "over",
                "under",
                "invalid"
            ],
            "geterr": [],
            "setbufsize": [
                "size"
            ],
            "getbufsize": [],
            "seterrcall": [
                "func"
            ],
            "geterrcall": [],
            "_setdef": [],
            "_unspecified": {},
            "errstate": {
                "__init__": [
                    "self"
                ],
                "__enter__": [
                    "self"
                ],
                "__exit__": [
                    "self"
                ]
            }
        },
        "numpy.core.cversions": {},
        "numpy.core.umath": {},
        "numpy.core.numerictypes": {
            "maximum_sctype": [
                "t"
            ],
            "issctype": [
                "rep"
            ],
            "obj2sctype": [
                "rep",
                "default"
            ],
            "issubclass_": [
                "arg1",
                "arg2"
            ],
            "issubsctype": [
                "arg1",
                "arg2"
            ],
            "issubdtype": [
                "arg1",
                "arg2"
            ],
            "_construct_lookups": [],
            "sctype2char": [
                "sctype"
            ],
            "_find_common_coerce": [
                "a",
                "b"
            ],
            "_can_coerce_all": [
                "dtypelist",
                "start"
            ],
            "_register_types": [],
            "find_common_type": [
                "array_types",
                "scalar_types"
            ],
            "_typedict": {
                "__getitem__": [
                    "self",
                    "obj"
                ]
            }
        },
        "numpy.core.setup": {
            "pythonlib_dir": [],
            "is_npy_no_signal": [],
            "is_npy_no_smp": [],
            "win32_checks": [
                "deflist"
            ],
            "check_math_capabilities": [
                "config",
                "moredefs",
                "mathlibs"
            ],
            "check_complex": [
                "config",
                "mathlibs"
            ],
            "check_ieee_macros": [
                "config"
            ],
            "check_types": [
                "config_cmd",
                "ext",
                "build_dir"
            ],
            "check_mathlib": [
                "config_cmd"
            ],
            "visibility_define": [
                "config"
            ],
            "configuration": [
                "parent_package",
                "top_path"
            ],
            "CallOnceOnly": {
                "__init__": [
                    "self"
                ],
                "check_types": [
                    "self"
                ],
                "check_ieee_macros": [
                    "self"
                ],
                "check_complex": [
                    "self"
                ]
            }
        },
        "numpy.core._asarray": {
            "asarray": [
                "a",
                "dtype",
                "order"
            ],
            "asanyarray": [
                "a",
                "dtype",
                "order"
            ],
            "ascontiguousarray": [
                "a",
                "dtype"
            ],
            "asfortranarray": [
                "a",
                "dtype"
            ],
            "require": [
                "a",
                "dtype",
                "requirements"
            ]
        },
        "numpy.core.generate_numpy_api": {
            "generate_api": [
                "output_dir",
                "force"
            ],
            "do_generate_api": [
                "targets",
                "sources"
            ]
        },
        "numpy.core._aliased_types": {},
        "numpy.core._add_newdocs": {
            "numeric_type_aliases": [
                "aliases"
            ],
            "add_newdoc_for_scalar_type": [
                "obj",
                "fixed_aliases",
                "doc"
            ]
        },
        "numpy.core.defchararray": {
            "_use_unicode": [],
            "_to_string_or_unicode_array": [
                "result"
            ],
            "_clean_args": [],
            "_get_num_chars": [
                "a"
            ],
            "_binary_op_dispatcher": [
                "x1",
                "x2"
            ],
            "equal": [
                "x1",
                "x2"
            ],
            "not_equal": [
                "x1",
                "x2"
            ],
            "greater_equal": [
                "x1",
                "x2"
            ],
            "less_equal": [
                "x1",
                "x2"
            ],
            "greater": [
                "x1",
                "x2"
            ],
            "less": [
                "x1",
                "x2"
            ],
            "_unary_op_dispatcher": [
                "a"
            ],
            "str_len": [
                "a"
            ],
            "add": [
                "x1",
                "x2"
            ],
            "_multiply_dispatcher": [
                "a",
                "i"
            ],
            "multiply": [
                "a",
                "i"
            ],
            "_mod_dispatcher": [
                "a",
                "values"
            ],
            "mod": [
                "a",
                "values"
            ],
            "capitalize": [
                "a"
            ],
            "_center_dispatcher": [
                "a",
                "width",
                "fillchar"
            ],
            "center": [
                "a",
                "width",
                "fillchar"
            ],
            "_count_dispatcher": [
                "a",
                "sub",
                "start",
                "end"
            ],
            "count": [
                "a",
                "sub",
                "start",
                "end"
            ],
            "_code_dispatcher": [
                "a",
                "encoding",
                "errors"
            ],
            "decode": [
                "a",
                "encoding",
                "errors"
            ],
            "encode": [
                "a",
                "encoding",
                "errors"
            ],
            "_endswith_dispatcher": [
                "a",
                "suffix",
                "start",
                "end"
            ],
            "endswith": [
                "a",
                "suffix",
                "start",
                "end"
            ],
            "_expandtabs_dispatcher": [
                "a",
                "tabsize"
            ],
            "expandtabs": [
                "a",
                "tabsize"
            ],
            "find": [
                "a",
                "sub",
                "start",
                "end"
            ],
            "index": [
                "a",
                "sub",
                "start",
                "end"
            ],
            "isalnum": [
                "a"
            ],
            "isalpha": [
                "a"
            ],
            "isdigit": [
                "a"
            ],
            "islower": [
                "a"
            ],
            "isspace": [
                "a"
            ],
            "istitle": [
                "a"
            ],
            "isupper": [
                "a"
            ],
            "_join_dispatcher": [
                "sep",
                "seq"
            ],
            "join": [
                "sep",
                "seq"
            ],
            "_just_dispatcher": [
                "a",
                "width",
                "fillchar"
            ],
            "ljust": [
                "a",
                "width",
                "fillchar"
            ],
            "lower": [
                "a"
            ],
            "_strip_dispatcher": [
                "a",
                "chars"
            ],
            "lstrip": [
                "a",
                "chars"
            ],
            "_partition_dispatcher": [
                "a",
                "sep"
            ],
            "partition": [
                "a",
                "sep"
            ],
            "_replace_dispatcher": [
                "a",
                "old",
                "new",
                "count"
            ],
            "replace": [
                "a",
                "old",
                "new",
                "count"
            ],
            "rfind": [
                "a",
                "sub",
                "start",
                "end"
            ],
            "rindex": [
                "a",
                "sub",
                "start",
                "end"
            ],
            "rjust": [
                "a",
                "width",
                "fillchar"
            ],
            "rpartition": [
                "a",
                "sep"
            ],
            "_split_dispatcher": [
                "a",
                "sep",
                "maxsplit"
            ],
            "rsplit": [
                "a",
                "sep",
                "maxsplit"
            ],
            "rstrip": [
                "a",
                "chars"
            ],
            "split": [
                "a",
                "sep",
                "maxsplit"
            ],
            "_splitlines_dispatcher": [
                "a",
                "keepends"
            ],
            "splitlines": [
                "a",
                "keepends"
            ],
            "_startswith_dispatcher": [
                "a",
                "prefix",
                "start",
                "end"
            ],
            "startswith": [
                "a",
                "prefix",
                "start",
                "end"
            ],
            "strip": [
                "a",
                "chars"
            ],
            "swapcase": [
                "a"
            ],
            "title": [
                "a"
            ],
            "_translate_dispatcher": [
                "a",
                "table",
                "deletechars"
            ],
            "translate": [
                "a",
                "table",
                "deletechars"
            ],
            "upper": [
                "a"
            ],
            "_zfill_dispatcher": [
                "a",
                "width"
            ],
            "zfill": [
                "a",
                "width"
            ],
            "isnumeric": [
                "a"
            ],
            "isdecimal": [
                "a"
            ],
            "array": [
                "obj",
                "itemsize",
                "copy",
                "unicode",
                "order"
            ],
            "asarray": [
                "obj",
                "itemsize",
                "unicode",
                "order"
            ],
            "chararray": {
                "__new__": [
                    "subtype",
                    "shape",
                    "itemsize",
                    "unicode",
                    "buffer",
                    "offset",
                    "strides",
                    "order"
                ],
                "__array_finalize__": [
                    "self",
                    "obj"
                ],
                "__getitem__": [
                    "self",
                    "obj"
                ],
                "__eq__": [
                    "self",
                    "other"
                ],
                "__ne__": [
                    "self",
                    "other"
                ],
                "__ge__": [
                    "self",
                    "other"
                ],
                "__le__": [
                    "self",
                    "other"
                ],
                "__gt__": [
                    "self",
                    "other"
                ],
                "__lt__": [
                    "self",
                    "other"
                ],
                "__add__": [
                    "self",
                    "other"
                ],
                "__radd__": [
                    "self",
                    "other"
                ],
                "__mul__": [
                    "self",
                    "i"
                ],
                "__rmul__": [
                    "self",
                    "i"
                ],
                "__mod__": [
                    "self",
                    "i"
                ],
                "__rmod__": [
                    "self",
                    "other"
                ],
                "argsort": [
                    "self",
                    "axis",
                    "kind",
                    "order"
                ],
                "capitalize": [
                    "self"
                ],
                "center": [
                    "self",
                    "width",
                    "fillchar"
                ],
                "count": [
                    "self",
                    "sub",
                    "start",
                    "end"
                ],
                "decode": [
                    "self",
                    "encoding",
                    "errors"
                ],
                "encode": [
                    "self",
                    "encoding",
                    "errors"
                ],
                "endswith": [
                    "self",
                    "suffix",
                    "start",
                    "end"
                ],
                "expandtabs": [
                    "self",
                    "tabsize"
                ],
                "find": [
                    "self",
                    "sub",
                    "start",
                    "end"
                ],
                "index": [
                    "self",
                    "sub",
                    "start",
                    "end"
                ],
                "isalnum": [
                    "self"
                ],
                "isalpha": [
                    "self"
                ],
                "isdigit": [
                    "self"
                ],
                "islower": [
                    "self"
                ],
                "isspace": [
                    "self"
                ],
                "istitle": [
                    "self"
                ],
                "isupper": [
                    "self"
                ],
                "join": [
                    "self",
                    "seq"
                ],
                "ljust": [
                    "self",
                    "width",
                    "fillchar"
                ],
                "lower": [
                    "self"
                ],
                "lstrip": [
                    "self",
                    "chars"
                ],
                "partition": [
                    "self",
                    "sep"
                ],
                "replace": [
                    "self",
                    "old",
                    "new",
                    "count"
                ],
                "rfind": [
                    "self",
                    "sub",
                    "start",
                    "end"
                ],
                "rindex": [
                    "self",
                    "sub",
                    "start",
                    "end"
                ],
                "rjust": [
                    "self",
                    "width",
                    "fillchar"
                ],
                "rpartition": [
                    "self",
                    "sep"
                ],
                "rsplit": [
                    "self",
                    "sep",
                    "maxsplit"
                ],
                "rstrip": [
                    "self",
                    "chars"
                ],
                "split": [
                    "self",
                    "sep",
                    "maxsplit"
                ],
                "splitlines": [
                    "self",
                    "keepends"
                ],
                "startswith": [
                    "self",
                    "prefix",
                    "start",
                    "end"
                ],
                "strip": [
                    "self",
                    "chars"
                ],
                "swapcase": [
                    "self"
                ],
                "title": [
                    "self"
                ],
                "translate": [
                    "self",
                    "table",
                    "deletechars"
                ],
                "upper": [
                    "self"
                ],
                "zfill": [
                    "self",
                    "width"
                ],
                "isnumeric": [
                    "self"
                ],
                "isdecimal": [
                    "self"
                ]
            }
        },
        "numpy.core.einsumfunc": {
            "_flop_count": [
                "idx_contraction",
                "inner",
                "num_terms",
                "size_dictionary"
            ],
            "_compute_size_by_dict": [
                "indices",
                "idx_dict"
            ],
            "_find_contraction": [
                "positions",
                "input_sets",
                "output_set"
            ],
            "_optimal_path": [
                "input_sets",
                "output_set",
                "idx_dict",
                "memory_limit"
            ],
            "_parse_possible_contraction": [
                "positions",
                "input_sets",
                "output_set",
                "idx_dict",
                "memory_limit",
                "path_cost",
                "naive_cost"
            ],
            "_update_other_results": [
                "results",
                "best"
            ],
            "_greedy_path": [
                "input_sets",
                "output_set",
                "idx_dict",
                "memory_limit"
            ],
            "_can_dot": [
                "inputs",
                "result",
                "idx_removed"
            ],
            "_parse_einsum_input": [
                "operands"
            ],
            "_einsum_path_dispatcher": [],
            "einsum_path": [],
            "_einsum_dispatcher": [],
            "einsum": []
        },
        "numpy.core.setup_common": {
            "is_released": [
                "config"
            ],
            "get_api_versions": [
                "apiversion",
                "codegen_dir"
            ],
            "check_api_version": [
                "apiversion",
                "codegen_dir"
            ],
            "fname2def": [
                "name"
            ],
            "sym2def": [
                "symbol"
            ],
            "type2def": [
                "symbol"
            ],
            "check_long_double_representation": [
                "cmd"
            ],
            "pyod": [
                "filename"
            ],
            "long_double_representation": [
                "lines"
            ],
            "check_for_right_shift_internal_compiler_error": [
                "cmd"
            ],
            "MismatchCAPIWarning": {}
        },
        "numpy.core._exceptions": {
            "_unpack_tuple": [
                "tup"
            ],
            "_display_as_base": [
                "cls"
            ],
            "UFuncTypeError": {
                "__init__": [
                    "self",
                    "ufunc"
                ]
            },
            "_UFuncBinaryResolutionError": {
                "__init__": [
                    "self",
                    "ufunc",
                    "dtypes"
                ],
                "__str__": [
                    "self"
                ]
            },
            "_UFuncNoLoopError": {
                "__init__": [
                    "self",
                    "ufunc",
                    "dtypes"
                ],
                "__str__": [
                    "self"
                ]
            },
            "_UFuncCastingError": {
                "__init__": [
                    "self",
                    "ufunc",
                    "casting",
                    "from_",
                    "to"
                ]
            },
            "_UFuncInputCastingError": {
                "__init__": [
                    "self",
                    "ufunc",
                    "casting",
                    "from_",
                    "to",
                    "i"
                ],
                "__str__": [
                    "self"
                ]
            },
            "_UFuncOutputCastingError": {
                "__init__": [
                    "self",
                    "ufunc",
                    "casting",
                    "from_",
                    "to",
                    "i"
                ],
                "__str__": [
                    "self"
                ]
            },
            "TooHardError": {},
            "AxisError": {
                "__init__": [
                    "self",
                    "axis",
                    "ndim",
                    "msg_prefix"
                ]
            },
            "_ArrayMemoryError": {
                "__init__": [
                    "self",
                    "shape",
                    "dtype"
                ],
                "_total_size": [
                    "self"
                ],
                "_size_to_string": [
                    "num_bytes"
                ],
                "__str__": [
                    "self"
                ]
            }
        },
        "numpy.core._methods": {
            "_amax": [
                "a",
                "axis",
                "out",
                "keepdims",
                "initial",
                "where"
            ],
            "_amin": [
                "a",
                "axis",
                "out",
                "keepdims",
                "initial",
                "where"
            ],
            "_sum": [
                "a",
                "axis",
                "dtype",
                "out",
                "keepdims",
                "initial",
                "where"
            ],
            "_prod": [
                "a",
                "axis",
                "dtype",
                "out",
                "keepdims",
                "initial",
                "where"
            ],
            "_any": [
                "a",
                "axis",
                "dtype",
                "out",
                "keepdims"
            ],
            "_all": [
                "a",
                "axis",
                "dtype",
                "out",
                "keepdims"
            ],
            "_count_reduce_items": [
                "arr",
                "axis"
            ],
            "_clip_dep_is_scalar_nan": [
                "a"
            ],
            "_clip_dep_is_byte_swapped": [
                "a"
            ],
            "_clip_dep_invoke_with_casting": [
                "ufunc"
            ],
            "_clip": [
                "a",
                "min",
                "max",
                "out"
            ],
            "_mean": [
                "a",
                "axis",
                "dtype",
                "out",
                "keepdims"
            ],
            "_var": [
                "a",
                "axis",
                "dtype",
                "out",
                "ddof",
                "keepdims"
            ],
            "_std": [
                "a",
                "axis",
                "dtype",
                "out",
                "ddof",
                "keepdims"
            ],
            "_ptp": [
                "a",
                "axis",
                "out",
                "keepdims"
            ],
            "_dump": [
                "self",
                "file",
                "protocol"
            ],
            "_dumps": [
                "self",
                "protocol"
            ]
        },
        "numpy.core.shape_base": {
            "_atleast_1d_dispatcher": [],
            "atleast_1d": [],
            "_atleast_2d_dispatcher": [],
            "atleast_2d": [],
            "_atleast_3d_dispatcher": [],
            "atleast_3d": [],
            "_arrays_for_stack_dispatcher": [
                "arrays",
                "stacklevel"
            ],
            "_vhstack_dispatcher": [
                "tup"
            ],
            "vstack": [
                "tup"
            ],
            "hstack": [
                "tup"
            ],
            "_stack_dispatcher": [
                "arrays",
                "axis",
                "out"
            ],
            "stack": [
                "arrays",
                "axis",
                "out"
            ],
            "_block_format_index": [
                "index"
            ],
            "_block_check_depths_match": [
                "arrays",
                "parent_index"
            ],
            "_atleast_nd": [
                "a",
                "ndim"
            ],
            "_accumulate": [
                "values"
            ],
            "_concatenate_shapes": [
                "shapes",
                "axis"
            ],
            "_block_info_recursion": [
                "arrays",
                "max_depth",
                "result_ndim",
                "depth"
            ],
            "_block": [
                "arrays",
                "max_depth",
                "result_ndim",
                "depth"
            ],
            "_block_dispatcher": [
                "arrays"
            ],
            "block": [
                "arrays"
            ],
            "_block_setup": [
                "arrays"
            ],
            "_block_slicing": [
                "arrays",
                "list_ndim",
                "result_ndim"
            ],
            "_block_concatenate": [
                "arrays",
                "list_ndim",
                "result_ndim"
            ]
        },
        "numpy.core._type_aliases": {
            "_bits_of": [
                "obj"
            ],
            "bitname": [
                "obj"
            ],
            "_add_types": [],
            "_add_aliases": [],
            "_add_integer_aliases": [],
            "_set_up_aliases": [],
            "_add_array_type": [
                "typename",
                "bits"
            ],
            "_set_array_types": [],
            "TypeNADict": {
                "__getitem__": [
                    "self",
                    "key"
                ],
                "get": [
                    "self",
                    "key",
                    "default"
                ]
            }
        },
        "numpy.core._internal": {
            "_makenames_list": [
                "adict",
                "align"
            ],
            "_usefields": [
                "adict",
                "align"
            ],
            "_array_descr": [
                "descriptor"
            ],
            "_reconstruct": [
                "subtype",
                "shape",
                "dtype"
            ],
            "_commastring": [
                "astr"
            ],
            "_getintp_ctype": [],
            "_newnames": [
                "datatype",
                "order"
            ],
            "_copy_fields": [
                "ary"
            ],
            "_getfield_is_safe": [
                "oldtype",
                "newtype",
                "offset"
            ],
            "_view_is_safe": [
                "oldtype",
                "newtype"
            ],
            "_dtype_from_pep3118": [
                "spec"
            ],
            "__dtype_from_pep3118": [
                "stream",
                "is_subdtype"
            ],
            "_fix_names": [
                "field_spec"
            ],
            "_add_trailing_padding": [
                "value",
                "padding"
            ],
            "_prod": [
                "a"
            ],
            "_gcd": [
                "a",
                "b"
            ],
            "_lcm": [
                "a",
                "b"
            ],
            "array_ufunc_errmsg_formatter": [
                "dummy",
                "ufunc",
                "method"
            ],
            "array_function_errmsg_formatter": [
                "public_api",
                "types"
            ],
            "_ufunc_doc_signature_formatter": [
                "ufunc"
            ],
            "npy_ctypes_check": [
                "cls"
            ],
            "dummy_ctype": {
                "__init__": [
                    "self",
                    "cls"
                ],
                "__mul__": [
                    "self",
                    "other"
                ],
                "__call__": [
                    "self"
                ],
                "__eq__": [
                    "self",
                    "other"
                ],
                "__ne__": [
                    "self",
                    "other"
                ]
            },
            "_missing_ctypes": {
                "cast": [
                    "self",
                    "num",
                    "obj"
                ]
            },
            "_ctypes": {
                "__init__": [
                    "self",
                    "array",
                    "ptr"
                ],
                "data_as": [
                    "self",
                    "obj"
                ],
                "shape_as": [
                    "self",
                    "obj"
                ],
                "strides_as": [
                    "self",
                    "obj"
                ],
                "data": [
                    "self"
                ],
                "shape": [
                    "self"
                ],
                "strides": [
                    "self"
                ],
                "_as_parameter_": [
                    "self"
                ]
            },
            "_Stream": {
                "__init__": [
                    "self",
                    "s"
                ],
                "advance": [
                    "self",
                    "n"
                ],
                "consume": [
                    "self",
                    "c"
                ],
                "consume_until": [
                    "self",
                    "c"
                ],
                "next": [
                    "self"
                ],
                "__bool__": [
                    "self"
                ]
            },
            "recursive": {
                "__init__": [
                    "self",
                    "func"
                ],
                "__call__": [
                    "self"
                ]
            }
        },
        "numpy.core.multiarray": {
            "empty_like": [
                "prototype",
                "dtype",
                "order",
                "subok",
                "shape"
            ],
            "concatenate": [
                "arrays",
                "axis",
                "out"
            ],
            "inner": [
                "a",
                "b"
            ],
            "where": [
                "condition",
                "x",
                "y"
            ],
            "lexsort": [
                "keys",
                "axis"
            ],
            "can_cast": [
                "from_",
                "to",
                "casting"
            ],
            "min_scalar_type": [
                "a"
            ],
            "result_type": [],
            "dot": [
                "a",
                "b",
                "out"
            ],
            "vdot": [
                "a",
                "b"
            ],
            "bincount": [
                "x",
                "weights",
                "minlength"
            ],
            "ravel_multi_index": [
                "multi_index",
                "dims",
                "mode",
                "order"
            ],
            "unravel_index": [
                "indices",
                "shape",
                "order",
                "dims"
            ],
            "copyto": [
                "dst",
                "src",
                "casting",
                "where"
            ],
            "putmask": [
                "a",
                "mask",
                "values"
            ],
            "packbits": [
                "a",
                "axis",
                "bitorder"
            ],
            "unpackbits": [
                "a",
                "axis",
                "count",
                "bitorder"
            ],
            "shares_memory": [
                "a",
                "b",
                "max_work"
            ],
            "may_share_memory": [
                "a",
                "b",
                "max_work"
            ],
            "is_busday": [
                "dates",
                "weekmask",
                "holidays",
                "busdaycal",
                "out"
            ],
            "busday_offset": [
                "dates",
                "offsets",
                "roll",
                "weekmask",
                "holidays",
                "busdaycal",
                "out"
            ],
            "busday_count": [
                "begindates",
                "enddates",
                "weekmask",
                "holidays",
                "busdaycal",
                "out"
            ],
            "datetime_as_string": [
                "arr",
                "unit",
                "timezone",
                "casting"
            ]
        },
        "numpy.core._dtype": {
            "_kind_name": [
                "dtype"
            ],
            "__str__": [
                "dtype"
            ],
            "__repr__": [
                "dtype"
            ],
            "_unpack_field": [
                "dtype",
                "offset",
                "title"
            ],
            "_isunsized": [
                "dtype"
            ],
            "_construction_repr": [
                "dtype",
                "include_align",
                "short"
            ],
            "_scalar_str": [
                "dtype",
                "short"
            ],
            "_byte_order_str": [
                "dtype"
            ],
            "_datetime_metadata_str": [
                "dtype"
            ],
            "_struct_dict_str": [
                "dtype",
                "includealignedflag"
            ],
            "_is_packed": [
                "dtype"
            ],
            "_struct_list_str": [
                "dtype"
            ],
            "_struct_str": [
                "dtype",
                "include_align"
            ],
            "_subarray_str": [
                "dtype"
            ],
            "_name_includes_bit_suffix": [
                "dtype"
            ],
            "_name_get": [
                "dtype"
            ]
        },
        "numpy.core.numeric": {
            "_zeros_like_dispatcher": [
                "a",
                "dtype",
                "order",
                "subok",
                "shape"
            ],
            "zeros_like": [
                "a",
                "dtype",
                "order",
                "subok",
                "shape"
            ],
            "ones": [
                "shape",
                "dtype",
                "order"
            ],
            "_ones_like_dispatcher": [
                "a",
                "dtype",
                "order",
                "subok",
                "shape"
            ],
            "ones_like": [
                "a",
                "dtype",
                "order",
                "subok",
                "shape"
            ],
            "full": [
                "shape",
                "fill_value",
                "dtype",
                "order"
            ],
            "_full_like_dispatcher": [
                "a",
                "fill_value",
                "dtype",
                "order",
                "subok",
                "shape"
            ],
            "full_like": [
                "a",
                "fill_value",
                "dtype",
                "order",
                "subok",
                "shape"
            ],
            "_count_nonzero_dispatcher": [
                "a",
                "axis"
            ],
            "count_nonzero": [
                "a",
                "axis"
            ],
            "isfortran": [
                "a"
            ],
            "_argwhere_dispatcher": [
                "a"
            ],
            "argwhere": [
                "a"
            ],
            "_flatnonzero_dispatcher": [
                "a"
            ],
            "flatnonzero": [
                "a"
            ],
            "_mode_from_name": [
                "mode"
            ],
            "_correlate_dispatcher": [
                "a",
                "v",
                "mode"
            ],
            "correlate": [
                "a",
                "v",
                "mode"
            ],
            "_convolve_dispatcher": [
                "a",
                "v",
                "mode"
            ],
            "convolve": [
                "a",
                "v",
                "mode"
            ],
            "_outer_dispatcher": [
                "a",
                "b",
                "out"
            ],
            "outer": [
                "a",
                "b",
                "out"
            ],
            "_tensordot_dispatcher": [
                "a",
                "b",
                "axes"
            ],
            "tensordot": [
                "a",
                "b",
                "axes"
            ],
            "_roll_dispatcher": [
                "a",
                "shift",
                "axis"
            ],
            "roll": [
                "a",
                "shift",
                "axis"
            ],
            "_rollaxis_dispatcher": [
                "a",
                "axis",
                "start"
            ],
            "rollaxis": [
                "a",
                "axis",
                "start"
            ],
            "normalize_axis_tuple": [
                "axis",
                "ndim",
                "argname",
                "allow_duplicate"
            ],
            "_moveaxis_dispatcher": [
                "a",
                "source",
                "destination"
            ],
            "moveaxis": [
                "a",
                "source",
                "destination"
            ],
            "_move_axis_to_0": [
                "a",
                "axis"
            ],
            "_cross_dispatcher": [
                "a",
                "b",
                "axisa",
                "axisb",
                "axisc",
                "axis"
            ],
            "cross": [
                "a",
                "b",
                "axisa",
                "axisb",
                "axisc",
                "axis"
            ],
            "indices": [
                "dimensions",
                "dtype",
                "sparse"
            ],
            "fromfunction": [
                "function",
                "shape"
            ],
            "_frombuffer": [
                "buf",
                "dtype",
                "shape",
                "order"
            ],
            "isscalar": [
                "element"
            ],
            "binary_repr": [
                "num",
                "width"
            ],
            "base_repr": [
                "number",
                "base",
                "padding"
            ],
            "_maketup": [
                "descr",
                "val"
            ],
            "identity": [
                "n",
                "dtype"
            ],
            "_allclose_dispatcher": [
                "a",
                "b",
                "rtol",
                "atol",
                "equal_nan"
            ],
            "allclose": [
                "a",
                "b",
                "rtol",
                "atol",
                "equal_nan"
            ],
            "_isclose_dispatcher": [
                "a",
                "b",
                "rtol",
                "atol",
                "equal_nan"
            ],
            "isclose": [
                "a",
                "b",
                "rtol",
                "atol",
                "equal_nan"
            ],
            "_array_equal_dispatcher": [
                "a1",
                "a2"
            ],
            "array_equal": [
                "a1",
                "a2"
            ],
            "_array_equiv_dispatcher": [
                "a1",
                "a2"
            ],
            "array_equiv": [
                "a1",
                "a2"
            ],
            "extend_all": [
                "module"
            ],
            "ComplexWarning": {}
        },
        "numpy.core.function_base": {
            "_linspace_dispatcher": [
                "start",
                "stop",
                "num",
                "endpoint",
                "retstep",
                "dtype",
                "axis"
            ],
            "linspace": [
                "start",
                "stop",
                "num",
                "endpoint",
                "retstep",
                "dtype",
                "axis"
            ],
            "_logspace_dispatcher": [
                "start",
                "stop",
                "num",
                "endpoint",
                "base",
                "dtype",
                "axis"
            ],
            "logspace": [
                "start",
                "stop",
                "num",
                "endpoint",
                "base",
                "dtype",
                "axis"
            ],
            "_geomspace_dispatcher": [
                "start",
                "stop",
                "num",
                "endpoint",
                "dtype",
                "axis"
            ],
            "geomspace": [
                "start",
                "stop",
                "num",
                "endpoint",
                "dtype",
                "axis"
            ],
            "_needs_add_docstring": [
                "obj"
            ],
            "_add_docstring": [
                "obj",
                "doc",
                "warn_on_python"
            ],
            "add_newdoc": [
                "place",
                "obj",
                "doc",
                "warn_on_python"
            ]
        },
        "numpy.core.getlimits": {
            "_fr0": [
                "a"
            ],
            "_fr1": [
                "a"
            ],
            "_register_type": [
                "machar",
                "bytepat"
            ],
            "_register_known_types": [],
            "_get_machar": [
                "ftype"
            ],
            "_discovered_machar": [
                "ftype"
            ],
            "MachArLike": {
                "__init__": [
                    "self",
                    "ftype"
                ]
            },
            "finfo": {
                "__new__": [
                    "cls",
                    "dtype"
                ],
                "_init": [
                    "self",
                    "dtype"
                ],
                "__str__": [
                    "self"
                ],
                "__repr__": [
                    "self"
                ]
            },
            "iinfo": {
                "__init__": [
                    "self",
                    "int_type"
                ],
                "min": [
                    "self"
                ],
                "max": [
                    "self"
                ],
                "__str__": [
                    "self"
                ],
                "__repr__": [
                    "self"
                ]
            }
        },
        "numpy.core._string_helpers": {
            "english_lower": [
                "s"
            ],
            "english_upper": [
                "s"
            ],
            "english_capitalize": [
                "s"
            ]
        },
        "numpy.core.code_generators.ufunc_docstrings": {
            "get": [
                "name"
            ],
            "add_newdoc": [
                "place",
                "name",
                "doc"
            ]
        },
        "numpy.core.code_generators": {},
        "numpy.core.code_generators.generate_umath": {
            "build_func_data": [
                "types",
                "f"
            ],
            "TD": [
                "types",
                "f",
                "astype",
                "in_",
                "out"
            ],
            "english_upper": [
                "s"
            ],
            "indent": [
                "st",
                "spaces"
            ],
            "make_arrays": [
                "funcdict"
            ],
            "make_ufuncs": [
                "funcdict"
            ],
            "make_code": [
                "funcdict",
                "filename"
            ],
            "FullTypeDescr": {},
            "FuncNameSuffix": {
                "__init__": [
                    "self",
                    "suffix"
                ]
            },
            "TypeDescription": {
                "__init__": [
                    "self",
                    "type",
                    "f",
                    "in_",
                    "out",
                    "astype"
                ],
                "finish_signature": [
                    "self",
                    "nin",
                    "nout"
                ]
            },
            "Ufunc": {
                "__init__": [
                    "self",
                    "nin",
                    "nout",
                    "identity",
                    "docstring",
                    "typereso"
                ]
            }
        },
        "numpy.core.code_generators.generate_ufunc_api": {
            "generate_api": [
                "output_dir",
                "force"
            ],
            "do_generate_api": [
                "targets",
                "sources"
            ]
        },
        "numpy.core.code_generators.generate_numpy_api": {
            "generate_api": [
                "output_dir",
                "force"
            ],
            "do_generate_api": [
                "targets",
                "sources"
            ]
        },
        "numpy.core.code_generators.genapi": {
            "file_in_this_dir": [
                "filename"
            ],
            "remove_whitespace": [
                "s"
            ],
            "_repl": [
                "str"
            ],
            "skip_brackets": [
                "s",
                "lbrac",
                "rbrac"
            ],
            "split_arguments": [
                "argstr"
            ],
            "find_functions": [
                "filename",
                "tag"
            ],
            "should_rebuild": [
                "targets",
                "source_files"
            ],
            "order_dict": [
                "d"
            ],
            "merge_api_dicts": [
                "dicts"
            ],
            "check_api_dict": [
                "d"
            ],
            "get_api_functions": [
                "tagname",
                "api_dict"
            ],
            "fullapi_hash": [
                "api_dicts"
            ],
            "get_versions_hash": [],
            "main": [],
            "StealRef": {
                "__init__": [
                    "self",
                    "arg"
                ],
                "__str__": [
                    "self"
                ]
            },
            "NonNull": {
                "__init__": [
                    "self",
                    "arg"
                ],
                "__str__": [
                    "self"
                ]
            },
            "Function": {
                "__init__": [
                    "self",
                    "name",
                    "return_type",
                    "args",
                    "doc"
                ],
                "_format_arg": [
                    "self",
                    "typename",
                    "name"
                ],
                "__str__": [
                    "self"
                ],
                "to_ReST": [
                    "self"
                ],
                "api_hash": [
                    "self"
                ]
            },
            "ParseError": {
                "__init__": [
                    "self",
                    "filename",
                    "lineno",
                    "msg"
                ],
                "__str__": [
                    "self"
                ]
            },
            "TypeApi": {
                "__init__": [
                    "self",
                    "name",
                    "index",
                    "ptr_cast",
                    "api_name"
                ],
                "define_from_array_api_string": [
                    "self"
                ],
                "array_api_define": [
                    "self"
                ],
                "internal_define": [
                    "self"
                ]
            },
            "GlobalVarApi": {
                "__init__": [
                    "self",
                    "name",
                    "index",
                    "type",
                    "api_name"
                ],
                "define_from_array_api_string": [
                    "self"
                ],
                "array_api_define": [
                    "self"
                ],
                "internal_define": [
                    "self"
                ]
            },
            "BoolValuesApi": {
                "__init__": [
                    "self",
                    "name",
                    "index",
                    "api_name"
                ],
                "define_from_array_api_string": [
                    "self"
                ],
                "array_api_define": [
                    "self"
                ],
                "internal_define": [
                    "self"
                ]
            },
            "FunctionApi": {
                "__init__": [
                    "self",
                    "name",
                    "index",
                    "annotations",
                    "return_type",
                    "args",
                    "api_name"
                ],
                "_argtypes_string": [
                    "self"
                ],
                "define_from_array_api_string": [
                    "self"
                ],
                "array_api_define": [
                    "self"
                ],
                "internal_define": [
                    "self"
                ]
            }
        },
        "numpy.core.code_generators.numpy_api": {},
        "numpy.core.tests.test_ufunc": {
            "test_ufunc_types": [
                "ufunc"
            ],
            "test_ufunc_noncontiguous": [
                "ufunc"
            ],
            "TestUfuncKwargs": {
                "test_kwarg_exact": [
                    "self"
                ],
                "test_sig_signature": [
                    "self"
                ],
                "test_sig_dtype": [
                    "self"
                ],
                "test_extobj_refcount": [
                    "self"
                ]
            },
            "TestUfuncGenericLoops": {
                "test_unary_PyUFunc": [
                    "self",
                    "input_dtype",
                    "output_dtype",
                    "f",
                    "x",
                    "y"
                ],
                "f2": [
                    "x",
                    "y"
                ],
                "test_binary_PyUFunc": [
                    "self",
                    "input_dtype",
                    "output_dtype",
                    "f",
                    "x",
                    "y"
                ],
                "test_unary_PyUFunc_O_O": [
                    "self"
                ],
                "test_unary_PyUFunc_O_O_method": [
                    "self",
                    "foo"
                ],
                "test_binary_PyUFunc_OO_O": [
                    "self"
                ],
                "test_binary_PyUFunc_OO_O_method": [
                    "self",
                    "foo"
                ],
                "test_binary_PyUFunc_On_Om_method": [
                    "self",
                    "foo"
                ]
            },
            "TestUfunc": {
                "test_pickle": [
                    "self"
                ],
                "test_pickle_withstring": [
                    "self"
                ],
                "test_reduceat_shifting_sum": [
                    "self"
                ],
                "test_all_ufunc": [
                    "self"
                ],
                "test_signature0": [
                    "self"
                ],
                "test_signature1": [
                    "self"
                ],
                "test_signature2": [
                    "self"
                ],
                "test_signature3": [
                    "self"
                ],
                "test_signature4": [
                    "self"
                ],
                "test_signature5": [
                    "self"
                ],
                "test_signature6": [
                    "self"
                ],
                "test_signature7": [
                    "self"
                ],
                "test_signature8": [
                    "self"
                ],
                "test_signature_failure_extra_parenthesis": [
                    "self"
                ],
                "test_signature_failure_mismatching_parenthesis": [
                    "self"
                ],
                "test_signature_failure_signature_missing_input_arg": [
                    "self"
                ],
                "test_signature_failure_signature_missing_output_arg": [
                    "self"
                ],
                "test_get_signature": [
                    "self"
                ],
                "test_forced_sig": [
                    "self"
                ],
                "test_true_divide": [
                    "self"
                ],
                "test_sum_stability": [
                    "self"
                ],
                "test_sum": [
                    "self"
                ],
                "test_sum_complex": [
                    "self"
                ],
                "test_sum_initial": [
                    "self"
                ],
                "test_sum_where": [
                    "self"
                ],
                "test_inner1d": [
                    "self"
                ],
                "test_broadcast": [
                    "self"
                ],
                "test_type_cast": [
                    "self"
                ],
                "test_endian": [
                    "self"
                ],
                "test_incontiguous_array": [
                    "self"
                ],
                "test_output_argument": [
                    "self"
                ],
                "test_axes_argument": [
                    "self"
                ],
                "test_axis_argument": [
                    "self"
                ],
                "test_keepdims_argument": [
                    "self"
                ],
                "test_innerwt": [
                    "self"
                ],
                "test_innerwt_empty": [
                    "self"
                ],
                "test_cross1d": [
                    "self"
                ],
                "test_can_ignore_signature": [
                    "self"
                ],
                "test_matrix_multiply": [
                    "self"
                ],
                "test_matrix_multiply_umath_empty": [
                    "self"
                ],
                "compare_matrix_multiply_results": [
                    "self",
                    "tp"
                ],
                "test_euclidean_pdist": [
                    "self"
                ],
                "test_cumsum": [
                    "self"
                ],
                "test_object_logical": [
                    "self"
                ],
                "test_object_comparison": [
                    "self"
                ],
                "test_object_array_reduction": [
                    "self"
                ],
                "test_object_array_accumulate_inplace": [
                    "self"
                ],
                "test_object_array_reduceat_inplace": [
                    "self"
                ],
                "test_zerosize_reduction": [
                    "self"
                ],
                "test_axis_out_of_bounds": [
                    "self"
                ],
                "test_scalar_reduction": [
                    "self"
                ],
                "test_casting_out_param": [
                    "self"
                ],
                "test_where_param": [
                    "self"
                ],
                "test_where_param_buffer_output": [
                    "self"
                ],
                "test_where_param_alloc": [
                    "self"
                ],
                "check_identityless_reduction": [
                    "self",
                    "a"
                ],
                "test_identityless_reduction_corder": [
                    "self"
                ],
                "test_identityless_reduction_forder": [
                    "self"
                ],
                "test_identityless_reduction_otherorder": [
                    "self"
                ],
                "test_identityless_reduction_noncontig": [
                    "self"
                ],
                "test_identityless_reduction_noncontig_unaligned": [
                    "self"
                ],
                "test_initial_reduction": [
                    "self"
                ],
                "test_reduction_with_where": [
                    "self",
                    "axis",
                    "where"
                ],
                "test_reduction_with_where_and_initial": [
                    "self",
                    "axis",
                    "where",
                    "initial"
                ],
                "test_reduction_where_initial_needed": [
                    "self"
                ],
                "test_identityless_reduction_nonreorderable": [
                    "self"
                ],
                "test_reduce_zero_axis": [
                    "self"
                ],
                "test_safe_casting": [
                    "self"
                ],
                "test_ufunc_custom_out": [
                    "self"
                ],
                "test_operand_flags": [
                    "self"
                ],
                "test_struct_ufunc": [
                    "self"
                ],
                "test_custom_ufunc": [
                    "self"
                ],
                "test_custom_ufunc_forced_sig": [
                    "self"
                ],
                "test_custom_array_like": [
                    "self"
                ],
                "test_inplace_fancy_indexing": [
                    "self"
                ],
                "test_reduce_arguments": [
                    "self"
                ],
                "test_structured_equal": [
                    "self"
                ],
                "test_scalar_equal": [
                    "self"
                ],
                "test_NotImplemented_not_returned": [
                    "self"
                ],
                "test_reduce_noncontig_output": [
                    "self"
                ],
                "test_no_doc_string": [
                    "self"
                ],
                "test_invalid_args": [
                    "self"
                ],
                "test_nat_is_not_finite": [
                    "self",
                    "nat"
                ],
                "test_nat_is_nan": [
                    "self",
                    "nat"
                ],
                "test_nat_is_not_inf": [
                    "self",
                    "nat"
                ]
            }
        },
        "numpy.core.tests.test_umath_complex": {
            "check_real_value": [
                "f",
                "x1",
                "y1",
                "x",
                "exact"
            ],
            "check_complex_value": [
                "f",
                "x1",
                "y1",
                "x2",
                "y2",
                "exact"
            ],
            "TestCexp": {
                "test_simple": [
                    "self"
                ],
                "test_special_values": [
                    "self"
                ],
                "test_special_values2": [
                    "self"
                ]
            },
            "TestClog": {
                "test_simple": [
                    "self"
                ],
                "test_special_values": [
                    "self"
                ]
            },
            "TestCsqrt": {
                "test_simple": [
                    "self"
                ],
                "test_simple_conjugate": [
                    "self"
                ],
                "test_special_values": [
                    "self"
                ]
            },
            "TestCpow": {
                "setup": [
                    "self"
                ],
                "teardown": [
                    "self"
                ],
                "test_simple": [
                    "self"
                ],
                "test_scalar": [
                    "self"
                ],
                "test_array": [
                    "self"
                ]
            },
            "TestCabs": {
                "setup": [
                    "self"
                ],
                "teardown": [
                    "self"
                ],
                "test_simple": [
                    "self"
                ],
                "test_fabs": [
                    "self"
                ],
                "test_cabs_inf_nan": [
                    "self"
                ]
            },
            "TestCarg": {
                "test_simple": [
                    "self"
                ],
                "test_zero": [
                    "self"
                ],
                "test_special_values": [
                    "self"
                ]
            }
        },
        "numpy.core.tests.test_extint128": {
            "exc_iter": [],
            "test_safe_binop": [],
            "test_to_128": [],
            "test_to_64": [],
            "test_mul_64_64": [],
            "test_add_128": [],
            "test_sub_128": [],
            "test_neg_128": [],
            "test_shl_128": [],
            "test_shr_128": [],
            "test_gt_128": [],
            "test_divmod_128_64": [],
            "test_floordiv_128_64": [],
            "test_ceildiv_128_64": []
        },
        "numpy.core.tests.test_einsum": {
            "test_overlap": [],
            "TestEinsum": {
                "test_einsum_errors": [
                    "self"
                ],
                "test_einsum_views": [
                    "self"
                ],
                "check_einsum_sums": [
                    "self",
                    "dtype",
                    "do_opt"
                ],
                "test_einsum_sums_int8": [
                    "self"
                ],
                "test_einsum_sums_uint8": [
                    "self"
                ],
                "test_einsum_sums_int16": [
                    "self"
                ],
                "test_einsum_sums_uint16": [
                    "self"
                ],
                "test_einsum_sums_int32": [
                    "self"
                ],
                "test_einsum_sums_uint32": [
                    "self"
                ],
                "test_einsum_sums_int64": [
                    "self"
                ],
                "test_einsum_sums_uint64": [
                    "self"
                ],
                "test_einsum_sums_float16": [
                    "self"
                ],
                "test_einsum_sums_float32": [
                    "self"
                ],
                "test_einsum_sums_float64": [
                    "self"
                ],
                "test_einsum_sums_longdouble": [
                    "self"
                ],
                "test_einsum_sums_cfloat64": [
                    "self"
                ],
                "test_einsum_sums_cfloat128": [
                    "self"
                ],
                "test_einsum_sums_clongdouble": [
                    "self"
                ],
                "test_einsum_misc": [
                    "self"
                ],
                "test_subscript_range": [
                    "self"
                ],
                "test_einsum_broadcast": [
                    "self"
                ],
                "test_einsum_fixedstridebug": [
                    "self"
                ],
                "test_einsum_fixed_collapsingbug": [
                    "self"
                ],
                "test_einsum_failed_on_p9_and_s390x": [
                    "self"
                ],
                "test_einsum_all_contig_non_contig_output": [
                    "self"
                ],
                "test_small_boolean_arrays": [
                    "self"
                ],
                "test_out_is_res": [
                    "self"
                ],
                "optimize_compare": [
                    "self",
                    "subscripts",
                    "operands"
                ],
                "test_hadamard_like_products": [
                    "self"
                ],
                "test_index_transformations": [
                    "self"
                ],
                "test_complex": [
                    "self"
                ],
                "test_collapse": [
                    "self"
                ],
                "test_expand": [
                    "self"
                ],
                "test_edge_cases": [
                    "self"
                ],
                "test_inner_product": [
                    "self"
                ],
                "test_random_cases": [
                    "self"
                ],
                "test_combined_views_mapping": [
                    "self"
                ],
                "test_broadcasting_dot_cases": [
                    "self"
                ]
            },
            "TestEinsumPath": {
                "build_operands": [
                    "self",
                    "string",
                    "size_dict"
                ],
                "assert_path_equal": [
                    "self",
                    "comp",
                    "benchmark"
                ],
                "test_memory_contraints": [
                    "self"
                ],
                "test_long_paths": [
                    "self"
                ],
                "test_edge_paths": [
                    "self"
                ],
                "test_path_type_input": [
                    "self"
                ],
                "test_spaces": [
                    "self"
                ]
            }
        },
        "numpy.core.tests.test_indexerrors": {
            "TestIndexErrors": {
                "test_arraytypes_fasttake": [
                    "self"
                ],
                "test_take_from_object": [
                    "self"
                ],
                "test_multiindex_exceptions": [
                    "self"
                ],
                "test_put_exceptions": [
                    "self"
                ],
                "test_iterators_exceptions": [
                    "self"
                ],
                "test_mapping": [
                    "self"
                ],
                "test_methods": [
                    "self"
                ]
            }
        },
        "numpy.core.tests.test_numerictypes": {
            "normalize_descr": [
                "descr"
            ],
            "test_issctype": [
                "rep",
                "expected"
            ],
            "CreateZeros": {
                "test_zeros0D": [
                    "self"
                ],
                "test_zerosSD": [
                    "self"
                ],
                "test_zerosMD": [
                    "self"
                ]
            },
            "TestCreateZerosPlain": {},
            "TestCreateZerosNested": {},
            "CreateValues": {
                "test_tuple": [
                    "self"
                ],
                "test_list_of_tuple": [
                    "self"
                ],
                "test_list_of_list_of_tuple": [
                    "self"
                ]
            },
            "TestCreateValuesPlainSingle": {},
            "TestCreateValuesPlainMultiple": {},
            "TestCreateValuesNestedSingle": {},
            "TestCreateValuesNestedMultiple": {},
            "ReadValuesPlain": {
                "test_access_fields": [
                    "self"
                ]
            },
            "TestReadValuesPlainSingle": {},
            "TestReadValuesPlainMultiple": {},
            "ReadValuesNested": {
                "test_access_top_fields": [
                    "self"
                ],
                "test_nested1_acessors": [
                    "self"
                ],
                "test_nested2_acessors": [
                    "self"
                ],
                "test_nested1_descriptor": [
                    "self"
                ],
                "test_nested2_descriptor": [
                    "self"
                ]
            },
            "TestReadValuesNestedSingle": {},
            "TestReadValuesNestedMultiple": {},
            "TestEmptyField": {
                "test_assign": [
                    "self"
                ]
            },
            "TestCommonType": {
                "test_scalar_loses1": [
                    "self"
                ],
                "test_scalar_loses2": [
                    "self"
                ],
                "test_scalar_wins": [
                    "self"
                ],
                "test_scalar_wins2": [
                    "self"
                ],
                "test_scalar_wins3": [
                    "self"
                ]
            },
            "TestMultipleFields": {
                "setup": [
                    "self"
                ],
                "_bad_call": [
                    "self"
                ],
                "test_no_tuple": [
                    "self"
                ],
                "test_return": [
                    "self"
                ]
            },
            "TestIsSubDType": {
                "test_both_abstract": [
                    "self"
                ],
                "test_same": [
                    "self"
                ],
                "test_subclass": [
                    "self"
                ],
                "test_subclass_backwards": [
                    "self"
                ],
                "test_sibling_class": [
                    "self"
                ]
            },
            "TestSctypeDict": {
                "test_longdouble": [
                    "self"
                ]
            },
            "TestBitName": {
                "test_abstract": [
                    "self"
                ]
            },
            "TestMaximumSctype": {
                "test_int": [
                    "self",
                    "t"
                ],
                "test_uint": [
                    "self",
                    "t"
                ],
                "test_float": [
                    "self",
                    "t"
                ],
                "test_complex": [
                    "self",
                    "t"
                ],
                "test_other": [
                    "self",
                    "t"
                ]
            },
            "Test_sctype2char": {
                "test_scalar_type": [
                    "self"
                ],
                "test_other_type": [
                    "self"
                ],
                "test_third_party_scalar_type": [
                    "self"
                ],
                "test_array_instance": [
                    "self"
                ],
                "test_abstract_type": [
                    "self"
                ],
                "test_non_type": [
                    "self"
                ]
            },
            "TestDocStrings": {
                "test_platform_dependent_aliases": [
                    "self"
                ]
            },
            "TestScalarTypeNames": {
                "test_names_are_unique": [
                    "self"
                ],
                "test_names_reflect_attributes": [
                    "self",
                    "t"
                ],
                "test_names_are_undersood_by_dtype": [
                    "self",
                    "t"
                ]
            }
        },
        "numpy.core.tests.test_scalar_ctors": {
            "TestFromString": {
                "test_floating": [
                    "self"
                ],
                "test_floating_overflow": [
                    "self"
                ],
                "test_intp": [
                    "self"
                ]
            },
            "TestFromInt": {
                "test_intp": [
                    "self"
                ],
                "test_uint64_from_negative": [
                    "self"
                ]
            }
        },
        "numpy.core.tests.test_scalarprint": {
            "TestRealScalars": {
                "test_str": [
                    "self"
                ],
                "test_scalar_cutoffs": [
                    "self"
                ],
                "test_py2_float_print": [
                    "self"
                ],
                "test_dragon4": [
                    "self"
                ],
                "test_dragon4_interface": [
                    "self"
                ],
                "test_ppc64_ibm_double_double128": [
                    "self"
                ],
                "float32_roundtrip": [
                    "self"
                ],
                "float64_vs_python": [
                    "self"
                ]
            }
        },
        "numpy.core.tests.test_machar": {
            "TestMachAr": {
                "_run_machar_highprec": [
                    "self"
                ],
                "test_underlow": [
                    "self"
                ]
            }
        },
        "numpy.core.tests.test_regression": {
            "TestRegression": {
                "test_invalid_round": [
                    "self"
                ],
                "test_mem_empty": [
                    "self"
                ],
                "test_pickle_transposed": [
                    "self"
                ],
                "test_typeNA": [
                    "self"
                ],
                "test_dtype_names": [
                    "self"
                ],
                "test_reduce": [
                    "self"
                ],
                "test_zeros_order": [
                    "self"
                ],
                "test_asarray_with_order": [
                    "self"
                ],
                "test_ravel_with_order": [
                    "self"
                ],
                "test_sort_bigendian": [
                    "self"
                ],
                "test_negative_nd_indexing": [
                    "self"
                ],
                "test_char_dump": [
                    "self"
                ],
                "test_noncontiguous_fill": [
                    "self"
                ],
                "test_bool": [
                    "self"
                ],
                "test_indexing1": [
                    "self"
                ],
                "test_indexing2": [
                    "self"
                ],
                "test_round": [
                    "self"
                ],
                "test_scalar_compare": [
                    "self"
                ],
                "test_unicode_swapping": [
                    "self"
                ],
                "test_object_array_fill": [
                    "self"
                ],
                "test_mem_dtype_align": [
                    "self"
                ],
                "test_endian_bool_indexing": [
                    "self"
                ],
                "test_endian_where": [
                    "self"
                ],
                "test_endian_recarray": [
                    "self"
                ],
                "test_mem_dot": [
                    "self"
                ],
                "test_arange_endian": [
                    "self"
                ],
                "test_arange_inf_step": [
                    "self"
                ],
                "test_arange_underflow_stop_and_step": [
                    "self"
                ],
                "test_argmax": [
                    "self"
                ],
                "test_mem_divmod": [
                    "self"
                ],
                "test_hstack_invalid_dims": [
                    "self"
                ],
                "test_squeeze_type": [
                    "self"
                ],
                "test_add_identity": [
                    "self"
                ],
                "test_numpy_float_python_long_addition": [
                    "self"
                ],
                "test_binary_repr_0": [
                    "self"
                ],
                "test_rec_iterate": [
                    "self"
                ],
                "test_unicode_string_comparison": [
                    "self"
                ],
                "test_tobytes_FORTRANORDER_discontiguous": [
                    "self"
                ],
                "test_flat_assignment": [
                    "self"
                ],
                "test_broadcast_flat_assignment": [
                    "self"
                ],
                "test_nonarray_assignment": [
                    "self"
                ],
                "test_unpickle_dtype_with_object": [
                    "self"
                ],
                "test_mem_array_creation_invalid_specification": [
                    "self"
                ],
                "test_recarray_single_element": [
                    "self"
                ],
                "test_zero_sized_array_indexing": [
                    "self"
                ],
                "test_chararray_rstrip": [
                    "self"
                ],
                "test_object_array_shape": [
                    "self"
                ],
                "test_mem_around": [
                    "self"
                ],
                "test_character_array_strip": [
                    "self"
                ],
                "test_lexsort": [
                    "self"
                ],
                "test_lexsort_invalid_sequence": [
                    "self"
                ],
                "test_lexsort_zerolen_custom_strides": [
                    "self"
                ],
                "test_lexsort_zerolen_custom_strides_2d": [
                    "self"
                ],
                "test_lexsort_zerolen_element": [
                    "self"
                ],
                "test_pickle_py2_bytes_encoding": [
                    "self"
                ],
                "test_pickle_dtype": [
                    "self"
                ],
                "test_swap_real": [
                    "self"
                ],
                "test_object_array_from_list": [
                    "self"
                ],
                "test_multiple_assign": [
                    "self"
                ],
                "test_empty_array_type": [
                    "self"
                ],
                "test_void_copyswap": [
                    "self"
                ],
                "test_method_args": [
                    "self"
                ],
                "test_mem_lexsort_strings": [
                    "self"
                ],
                "test_fancy_index": [
                    "self"
                ],
                "test_recarray_copy": [
                    "self"
                ],
                "test_rec_fromarray": [
                    "self"
                ],
                "test_object_array_assign": [
                    "self"
                ],
                "test_ndmin_float64": [
                    "self"
                ],
                "test_ndmin_order": [
                    "self"
                ],
                "test_mem_axis_minimization": [
                    "self"
                ],
                "test_mem_float_imag": [
                    "self"
                ],
                "test_dtype_tuple": [
                    "self"
                ],
                "test_dtype_posttuple": [
                    "self"
                ],
                "test_numeric_carray_compare": [
                    "self"
                ],
                "test_string_array_size": [
                    "self"
                ],
                "test_dtype_repr": [
                    "self"
                ],
                "test_reshape_order": [
                    "self"
                ],
                "test_reshape_zero_strides": [
                    "self"
                ],
                "test_reshape_zero_size": [
                    "self"
                ],
                "test_reshape_trailing_ones_strides": [
                    "self"
                ],
                "test_repeat_discont": [
                    "self"
                ],
                "test_array_index": [
                    "self"
                ],
                "test_object_argmax": [
                    "self"
                ],
                "test_recarray_fields": [
                    "self"
                ],
                "test_random_shuffle": [
                    "self"
                ],
                "test_refcount_vdot": [
                    "self"
                ],
                "test_startswith": [
                    "self"
                ],
                "test_noncommutative_reduce_accumulate": [
                    "self"
                ],
                "test_convolve_empty": [
                    "self"
                ],
                "test_multidim_byteswap": [
                    "self"
                ],
                "test_string_NULL": [
                    "self"
                ],
                "test_junk_in_string_fields_of_recarray": [
                    "self"
                ],
                "test_take_output": [
                    "self"
                ],
                "test_take_object_fail": [
                    "self"
                ],
                "test_array_str_64bit": [
                    "self"
                ],
                "test_frompyfunc_endian": [
                    "self"
                ],
                "test_mem_string_arr": [
                    "self"
                ],
                "test_arr_transpose": [
                    "self"
                ],
                "test_string_mergesort": [
                    "self"
                ],
                "test_argmax_byteorder": [
                    "self"
                ],
                "test_rand_seed": [
                    "self"
                ],
                "test_mem_deallocation_leak": [
                    "self"
                ],
                "test_mem_on_invalid_dtype": [
                    "self"
                ],
                "test_dot_negative_stride": [
                    "self"
                ],
                "test_object_casting": [
                    "self"
                ],
                "test_unicode_scalar": [
                    "self"
                ],
                "test_arange_non_native_dtype": [
                    "self"
                ],
                "test_bool_flat_indexing_invalid_nr_elements": [
                    "self"
                ],
                "test_mem_scalar_indexing": [
                    "self"
                ],
                "test_binary_repr_0_width": [
                    "self"
                ],
                "test_fromstring": [
                    "self"
                ],
                "test_searchsorted_variable_length": [
                    "self"
                ],
                "test_string_argsort_with_zeros": [
                    "self"
                ],
                "test_string_sort_with_zeros": [
                    "self"
                ],
                "test_copy_detection_zero_dim": [
                    "self"
                ],
                "test_flat_byteorder": [
                    "self"
                ],
                "test_sign_bit": [
                    "self"
                ],
                "test_flat_index_byteswap": [
                    "self"
                ],
                "test_copy_detection_corner_case": [
                    "self"
                ],
                "test_copy_detection_corner_case2": [
                    "self"
                ],
                "test_object_array_refcounting": [
                    "self"
                ],
                "test_mem_custom_float_to_array": [
                    "self"
                ],
                "test_object_array_refcount_self_assign": [
                    "self"
                ],
                "test_mem_fromiter_invalid_dtype_string": [
                    "self"
                ],
                "test_reduce_big_object_array": [
                    "self"
                ],
                "test_mem_0d_array_index": [
                    "self"
                ],
                "test_nonnative_endian_fill": [
                    "self"
                ],
                "test_dot_alignment_sse2": [
                    "self"
                ],
                "test_astype_copy": [
                    "self"
                ],
                "test_compress_small_type": [
                    "self"
                ],
                "test_attributes": [
                    "self"
                ],
                "test_recarray_tolist": [
                    "self"
                ],
                "test_nonscalar_item_method": [
                    "self"
                ],
                "test_char_array_creation": [
                    "self"
                ],
                "test_unaligned_unicode_access": [
                    "self"
                ],
                "test_sign_for_complex_nan": [
                    "self"
                ],
                "test_for_equal_names": [
                    "self"
                ],
                "test_for_object_scalar_creation": [
                    "self"
                ],
                "test_array_resize_method_system_error": [
                    "self"
                ],
                "test_for_zero_length_in_choose": [
                    "self"
                ],
                "test_array_ndmin_overflow": [
                    "self"
                ],
                "test_void_scalar_with_titles": [
                    "self"
                ],
                "test_void_scalar_constructor": [
                    "self"
                ],
                "test_blasdot_uninitialized_memory": [
                    "self"
                ],
                "test_zeros": [
                    "self"
                ],
                "test_huge_arange": [
                    "self"
                ],
                "test_fromiter_bytes": [
                    "self"
                ],
                "test_array_from_sequence_scalar_array": [
                    "self"
                ],
                "test_array_from_sequence_scalar_array2": [
                    "self"
                ],
                "test_array_too_big": [
                    "self"
                ],
                "test_dtype_keyerrors_": [
                    "self"
                ],
                "test_lexsort_buffer_length": [
                    "self"
                ],
                "test_object_array_to_fixed_string": [
                    "self"
                ],
                "test_unicode_to_string_cast": [
                    "self"
                ],
                "test_mixed_string_unicode_array_creation": [
                    "self"
                ],
                "test_misaligned_objects_segfault": [
                    "self"
                ],
                "test_misaligned_scalars_segfault": [
                    "self"
                ],
                "test_misaligned_dot_product_objects": [
                    "self"
                ],
                "test_byteswap_complex_scalar": [
                    "self"
                ],
                "test_structured_arrays_with_objects1": [
                    "self"
                ],
                "test_structured_arrays_with_objects2": [
                    "self"
                ],
                "test_duplicate_title_and_name": [
                    "self"
                ],
                "test_signed_integer_division_overflow": [
                    "self"
                ],
                "test_buffer_hashlib": [
                    "self"
                ],
                "test_0d_string_scalar": [
                    "self"
                ],
                "test_log1p_compiler_shenanigans": [
                    "self"
                ],
                "test_fromiter_comparison": [
                    "self"
                ],
                "test_fromstring_crash": [
                    "self"
                ],
                "test_ticket_1539": [
                    "self"
                ],
                "test_ticket_1538": [
                    "self"
                ],
                "test_ticket_1434": [
                    "self"
                ],
                "test_complex_nan_maximum": [
                    "self"
                ],
                "test_subclass_int_tuple_assignment": [
                    "self"
                ],
                "test_ufunc_no_unnecessary_views": [
                    "self"
                ],
                "test_take_refcount": [
                    "self"
                ],
                "test_fromfile_tofile_seeks": [
                    "self"
                ],
                "test_complex_scalar_warning": [
                    "self"
                ],
                "test_complex_scalar_complex_cast": [
                    "self"
                ],
                "test_complex_boolean_cast": [
                    "self"
                ],
                "test_uint_int_conversion": [
                    "self"
                ],
                "test_duplicate_field_names_assign": [
                    "self"
                ],
                "test_eq_string_and_object_array": [
                    "self"
                ],
                "test_nonzero_byteswap": [
                    "self"
                ],
                "test_find_common_type_boolean": [
                    "self"
                ],
                "test_empty_mul": [
                    "self"
                ],
                "test_array_side_effect": [
                    "self"
                ],
                "test_any_float": [
                    "self"
                ],
                "test_large_float_sum": [
                    "self"
                ],
                "test_ufunc_casting_out": [
                    "self"
                ],
                "test_array_scalar_contiguous": [
                    "self"
                ],
                "test_squeeze_contiguous": [
                    "self"
                ],
                "test_squeeze_axis_handling": [
                    "self"
                ],
                "test_reduce_contiguous": [
                    "self"
                ],
                "test_object_array_self_reference": [
                    "self"
                ],
                "test_object_array_circular_reference": [
                    "self"
                ],
                "test_object_array_nested": [
                    "self"
                ],
                "test_object_array_self_copy": [
                    "self"
                ],
                "test_zerosize_accumulate": [
                    "self"
                ],
                "test_objectarray_setfield": [
                    "self"
                ],
                "test_setting_rank0_string": [
                    "self"
                ],
                "test_string_astype": [
                    "self"
                ],
                "test_ticket_1756": [
                    "self"
                ],
                "test_fields_strides": [
                    "self"
                ],
                "test_alignment_update": [
                    "self"
                ],
                "test_ticket_1770": [
                    "self"
                ],
                "test_ticket_1608": [
                    "self"
                ],
                "test_pickle_string_overwrite": [
                    "self"
                ],
                "test_pickle_bytes_overwrite": [
                    "self"
                ],
                "test_pickle_py2_array_latin1_hack": [
                    "self"
                ],
                "test_pickle_py2_scalar_latin1_hack": [
                    "self"
                ],
                "test_structured_type_to_object": [
                    "self"
                ],
                "test_assign_obj_listoflists": [
                    "self"
                ],
                "test_memoryleak": [
                    "self"
                ],
                "test_ufunc_reduce_memoryleak": [
                    "self"
                ],
                "test_search_sorted_invalid_arguments": [
                    "self"
                ],
                "test_string_truncation": [
                    "self"
                ],
                "test_string_truncation_ucs2": [
                    "self"
                ],
                "test_unique_stable": [
                    "self"
                ],
                "test_unicode_alloc_dealloc_match": [
                    "self"
                ],
                "test_refcount_error_in_clip": [
                    "self"
                ],
                "test_searchsorted_wrong_dtype": [
                    "self"
                ],
                "test_complex64_alignment": [
                    "self"
                ],
                "test_structured_count_nonzero": [
                    "self"
                ],
                "test_copymodule_preserves_f_contiguity": [
                    "self"
                ],
                "test_fortran_order_buffer": [
                    "self"
                ],
                "test_assign_from_sequence_error": [
                    "self"
                ],
                "test_format_on_flex_array_element": [
                    "self"
                ],
                "test_deepcopy_on_0d_array": [
                    "self"
                ],
                "test_deepcopy_F_order_object_array": [
                    "self"
                ],
                "test_deepcopy_empty_object_array": [
                    "self"
                ],
                "test_bool_subscript_crash": [
                    "self"
                ],
                "test_richcompare_crash": [
                    "self"
                ],
                "test_richcompare_scalar_and_subclass": [
                    "self"
                ],
                "test_pickle_empty_string": [
                    "self"
                ],
                "test_frompyfunc_many_args": [
                    "self"
                ],
                "test_repeat_broadcasting": [
                    "self"
                ],
                "test_frompyfunc_nout_0": [
                    "self"
                ],
                "test_leak_in_structured_dtype_comparison": [
                    "self"
                ],
                "test_empty_percentile": [
                    "self"
                ],
                "test_void_compare_segfault": [
                    "self"
                ],
                "test_reshape_size_overflow": [
                    "self"
                ],
                "test_invalid_structured_dtypes": [
                    "self"
                ],
                "test_correct_hash_dict": [
                    "self"
                ],
                "test_scalar_copy": [
                    "self"
                ],
                "test_void_item_memview": [
                    "self"
                ],
                "test_void_getitem": [
                    "self"
                ],
                "test_structarray_title": [
                    "self"
                ],
                "test_dtype_scalar_squeeze": [
                    "self"
                ],
                "test_field_access_by_title": [
                    "self"
                ],
                "test_pickle_module": [
                    "self",
                    "protocol",
                    "val"
                ],
                "test_object_casting_errors": [
                    "self"
                ],
                "test_eff1d_casting": [
                    "self"
                ],
                "test_pickle_datetime64_array": [
                    "self"
                ],
                "test_bad_array_interface": [
                    "self"
                ],
                "test_to_ctypes": [
                    "self"
                ]
            }
        },
        "numpy.core.tests.test_abc": {
            "TestABC": {
                "test_abstract": [
                    "self"
                ],
                "test_floats": [
                    "self"
                ],
                "test_complex": [
                    "self"
                ],
                "test_int": [
                    "self"
                ],
                "test_uint": [
                    "self"
                ]
            }
        },
        "numpy.core.tests.test_scalar_methods": {
            "TestAsIntegerRatio": {
                "test_small": [
                    "self",
                    "ftype",
                    "f",
                    "ratio"
                ],
                "test_simple_fractions": [
                    "self",
                    "ftype"
                ],
                "test_errors": [
                    "self",
                    "ftype"
                ],
                "test_against_known_values": [
                    "self"
                ],
                "test_roundtrip": [
                    "self",
                    "ftype",
                    "frac_vals",
                    "exp_vals"
                ]
            }
        },
        "numpy.core.tests": {},
        "numpy.core.tests.test_scalarbuffer": {
            "TestScalarPEP3118": {
                "test_scalar_match_array": [
                    "self",
                    "scalar"
                ],
                "test_scalar_dim": [
                    "self",
                    "scalar"
                ],
                "test_scalar_known_code": [
                    "self",
                    "scalar",
                    "code"
                ],
                "test_void_scalar_structured_data": [
                    "self"
                ],
                "test_datetime_memoryview": [
                    "self"
                ]
            }
        },
        "numpy.core.tests.test_function_base": {
            "PhysicalQuantity": {
                "__new__": [
                    "cls",
                    "value"
                ],
                "__add__": [
                    "self",
                    "x"
                ],
                "__sub__": [
                    "self",
                    "x"
                ],
                "__rsub__": [
                    "self",
                    "x"
                ],
                "__mul__": [
                    "self",
                    "x"
                ],
                "__div__": [
                    "self",
                    "x"
                ],
                "__rdiv__": [
                    "self",
                    "x"
                ]
            },
            "PhysicalQuantity2": {},
            "TestLogspace": {
                "test_basic": [
                    "self"
                ],
                "test_start_stop_array": [
                    "self"
                ],
                "test_dtype": [
                    "self"
                ],
                "test_physical_quantities": [
                    "self"
                ],
                "test_subclass": [
                    "self"
                ]
            },
            "TestGeomspace": {
                "test_basic": [
                    "self"
                ],
                "test_complex": [
                    "self"
                ],
                "test_dtype": [
                    "self"
                ],
                "test_start_stop_array_scalar": [
                    "self"
                ],
                "test_start_stop_array": [
                    "self"
                ],
                "test_physical_quantities": [
                    "self"
                ],
                "test_subclass": [
                    "self"
                ],
                "test_bounds": [
                    "self"
                ]
            },
            "TestLinspace": {
                "test_basic": [
                    "self"
                ],
                "test_corner": [
                    "self"
                ],
                "test_type": [
                    "self"
                ],
                "test_dtype": [
                    "self"
                ],
                "test_start_stop_array_scalar": [
                    "self"
                ],
                "test_start_stop_array": [
                    "self"
                ],
                "test_complex": [
                    "self"
                ],
                "test_physical_quantities": [
                    "self"
                ],
                "test_subclass": [
                    "self"
                ],
                "test_array_interface": [
                    "self"
                ],
                "test_denormal_numbers": [
                    "self"
                ],
                "test_equivalent_to_arange": [
                    "self"
                ],
                "test_retstep": [
                    "self"
                ],
                "test_object": [
                    "self"
                ]
            }
        },
        "numpy.core.tests.test_item_selection": {
            "TestTake": {
                "test_simple": [
                    "self"
                ],
                "test_refcounting": [
                    "self"
                ],
                "test_unicode_mode": [
                    "self"
                ],
                "test_empty_partition": [
                    "self"
                ],
                "test_empty_argpartition": [
                    "self"
                ]
            }
        },
        "numpy.core.tests.test_dtype": {
            "assert_dtype_equal": [
                "a",
                "b"
            ],
            "assert_dtype_not_equal": [
                "a",
                "b"
            ],
            "iter_struct_object_dtypes": [],
            "test_rational_dtype": [],
            "test_dtypes_are_true": [],
            "test_invalid_dtype_string": [],
            "TestBuiltin": {
                "test_run": [
                    "self",
                    "t"
                ],
                "test_dtype": [
                    "self",
                    "t"
                ],
                "test_equivalent_dtype_hashing": [
                    "self"
                ],
                "test_invalid_types": [
                    "self"
                ],
                "test_dtype_bytes_str_equivalence": [
                    "self",
                    "value"
                ],
                "test_dtype_from_bytes": [
                    "self"
                ],
                "test_bad_param": [
                    "self"
                ],
                "test_field_order_equality": [
                    "self"
                ]
            },
            "TestRecord": {
                "test_equivalent_record": [
                    "self"
                ],
                "test_different_names": [
                    "self"
                ],
                "test_different_titles": [
                    "self"
                ],
                "test_refcount_dictionary_setting": [
                    "self"
                ],
                "test_mutate": [
                    "self"
                ],
                "test_not_lists": [
                    "self"
                ],
                "test_aligned_size": [
                    "self"
                ],
                "test_union_struct": [
                    "self"
                ],
                "test_comma_datetime": [
                    "self"
                ],
                "test_from_dictproxy": [
                    "self"
                ],
                "test_from_dict_with_zero_width_field": [
                    "self"
                ],
                "test_bool_commastring": [
                    "self"
                ],
                "test_nonint_offsets": [
                    "self"
                ],
                "test_fields_by_index": [
                    "self"
                ],
                "test_multifield_index": [
                    "self",
                    "align_flag"
                ],
                "test_partial_dict": [
                    "self"
                ],
                "test_fieldless_views": [
                    "self"
                ]
            },
            "TestSubarray": {
                "test_single_subarray": [
                    "self"
                ],
                "test_equivalent_record": [
                    "self"
                ],
                "test_nonequivalent_record": [
                    "self"
                ],
                "test_shape_equal": [
                    "self"
                ],
                "test_shape_simple": [
                    "self"
                ],
                "test_shape_monster": [
                    "self"
                ],
                "test_shape_sequence": [
                    "self"
                ],
                "test_shape_matches_ndim": [
                    "self"
                ],
                "test_shape_invalid": [
                    "self"
                ],
                "test_alignment": [
                    "self"
                ]
            },
            "TestStructuredObjectRefcounting": {
                "test_structured_object_create_delete": [
                    "self",
                    "dt",
                    "pat",
                    "count",
                    "singleton",
                    "creation_func",
                    "creation_obj"
                ],
                "test_structured_object_item_setting": [
                    "self",
                    "dt",
                    "pat",
                    "count",
                    "singleton"
                ],
                "test_structured_object_indexing": [
                    "self",
                    "shape",
                    "index",
                    "items_changed",
                    "dt",
                    "pat",
                    "count",
                    "singleton"
                ],
                "test_structured_object_take_and_repeat": [
                    "self",
                    "dt",
                    "pat",
                    "count",
                    "singleton"
                ]
            },
            "TestStructuredDtypeSparseFields": {
                "test_sparse_field_assignment": [
                    "self"
                ],
                "test_sparse_field_assignment_fancy": [
                    "self"
                ]
            },
            "TestMonsterType": {
                "test1": [
                    "self"
                ]
            },
            "TestMetadata": {
                "test_no_metadata": [
                    "self"
                ],
                "test_metadata_takes_dict": [
                    "self"
                ],
                "test_metadata_rejects_nondict": [
                    "self"
                ],
                "test_nested_metadata": [
                    "self"
                ],
                "test_base_metadata_copied": [
                    "self"
                ]
            },
            "TestString": {
                "test_complex_dtype_str": [
                    "self"
                ],
                "test_repr_structured": [
                    "self"
                ],
                "test_repr_structured_not_packed": [
                    "self"
                ],
                "test_repr_structured_datetime": [
                    "self"
                ],
                "test_repr_str_subarray": [
                    "self"
                ],
                "test_dtype_str_with_long_in_shape": [
                    "self"
                ],
                "test_base_dtype_with_object_type": [
                    "self"
                ],
                "test_empty_string_to_object": [
                    "self"
                ],
                "test_void_subclass_unsized": [
                    "self"
                ],
                "test_void_subclass_sized": [
                    "self"
                ],
                "test_void_subclass_fields": [
                    "self"
                ]
            },
            "TestDtypeAttributeDeletion": {
                "test_dtype_non_writable_attributes_deletion": [
                    "self"
                ],
                "test_dtype_writable_attributes_deletion": [
                    "self"
                ]
            },
            "TestDtypeAttributes": {
                "test_descr_has_trailing_void": [
                    "self"
                ],
                "test_name_dtype_subclass": [
                    "self"
                ]
            },
            "TestPickling": {
                "check_pickling": [
                    "self",
                    "dtype"
                ],
                "test_builtin": [
                    "self",
                    "t"
                ],
                "test_structured": [
                    "self"
                ],
                "test_structured_aligned": [
                    "self"
                ],
                "test_structured_unaligned": [
                    "self"
                ],
                "test_structured_padded": [
                    "self"
                ],
                "test_structured_titles": [
                    "self"
                ],
                "test_datetime": [
                    "self",
                    "base",
                    "unit"
                ],
                "test_metadata": [
                    "self"
                ]
            },
            "TestFromDTypeAttribute": {
                "test_simple": [
                    "self"
                ],
                "test_recursion": [
                    "self"
                ],
                "test_void_subtype": [
                    "self"
                ],
                "test_void_subtype_recursion": [
                    "self"
                ]
            },
            "TestFromCTypes": {
                "check": [
                    "ctype",
                    "dtype"
                ],
                "test_array": [
                    "self"
                ],
                "test_padded_structure": [
                    "self"
                ],
                "test_bit_fields": [
                    "self"
                ],
                "test_pointer": [
                    "self"
                ],
                "test_void_pointer": [
                    "self"
                ],
                "test_union": [
                    "self"
                ],
                "test_union_with_struct_packed": [
                    "self"
                ],
                "test_union_packed": [
                    "self"
                ],
                "test_packed_structure": [
                    "self"
                ],
                "test_large_packed_structure": [
                    "self"
                ],
                "test_big_endian_structure_packed": [
                    "self"
                ],
                "test_little_endian_structure_packed": [
                    "self"
                ],
                "test_little_endian_structure": [
                    "self"
                ],
                "test_big_endian_structure": [
                    "self"
                ],
                "test_simple_endian_types": [
                    "self"
                ],
                "test_pairs": [
                    "self",
                    "pair"
                ]
            }
        },
        "numpy.core.tests.test_shape_base": {
            "test_stack": [],
            "test_block_dispatcher": [],
            "TestAtleast1d": {
                "test_0D_array": [
                    "self"
                ],
                "test_1D_array": [
                    "self"
                ],
                "test_2D_array": [
                    "self"
                ],
                "test_3D_array": [
                    "self"
                ],
                "test_r1array": [
                    "self"
                ]
            },
            "TestAtleast2d": {
                "test_0D_array": [
                    "self"
                ],
                "test_1D_array": [
                    "self"
                ],
                "test_2D_array": [
                    "self"
                ],
                "test_3D_array": [
                    "self"
                ],
                "test_r2array": [
                    "self"
                ]
            },
            "TestAtleast3d": {
                "test_0D_array": [
                    "self"
                ],
                "test_1D_array": [
                    "self"
                ],
                "test_2D_array": [
                    "self"
                ],
                "test_3D_array": [
                    "self"
                ]
            },
            "TestHstack": {
                "test_non_iterable": [
                    "self"
                ],
                "test_empty_input": [
                    "self"
                ],
                "test_0D_array": [
                    "self"
                ],
                "test_1D_array": [
                    "self"
                ],
                "test_2D_array": [
                    "self"
                ],
                "test_generator": [
                    "self"
                ]
            },
            "TestVstack": {
                "test_non_iterable": [
                    "self"
                ],
                "test_empty_input": [
                    "self"
                ],
                "test_0D_array": [
                    "self"
                ],
                "test_1D_array": [
                    "self"
                ],
                "test_2D_array": [
                    "self"
                ],
                "test_2D_array2": [
                    "self"
                ],
                "test_generator": [
                    "self"
                ]
            },
            "TestConcatenate": {
                "test_returns_copy": [
                    "self"
                ],
                "test_exceptions": [
                    "self"
                ],
                "test_concatenate_axis_None": [
                    "self"
                ],
                "test_large_concatenate_axis_None": [
                    "self"
                ],
                "test_concatenate": [
                    "self"
                ],
                "test_bad_out_shape": [
                    "self"
                ],
                "test_out_dtype": [
                    "self"
                ]
            },
            "TestBlock": {
                "block": [
                    "self",
                    "request"
                ],
                "test_returns_copy": [
                    "self",
                    "block"
                ],
                "test_block_total_size_estimate": [
                    "self",
                    "block"
                ],
                "test_block_simple_row_wise": [
                    "self",
                    "block"
                ],
                "test_block_simple_column_wise": [
                    "self",
                    "block"
                ],
                "test_block_with_1d_arrays_row_wise": [
                    "self",
                    "block"
                ],
                "test_block_with_1d_arrays_multiple_rows": [
                    "self",
                    "block"
                ],
                "test_block_with_1d_arrays_column_wise": [
                    "self",
                    "block"
                ],
                "test_block_mixed_1d_and_2d": [
                    "self",
                    "block"
                ],
                "test_block_complicated": [
                    "self",
                    "block"
                ],
                "test_nested": [
                    "self",
                    "block"
                ],
                "test_3d": [
                    "self",
                    "block"
                ],
                "test_block_with_mismatched_shape": [
                    "self",
                    "block"
                ],
                "test_no_lists": [
                    "self",
                    "block"
                ],
                "test_invalid_nesting": [
                    "self",
                    "block"
                ],
                "test_empty_lists": [
                    "self",
                    "block"
                ],
                "test_tuple": [
                    "self",
                    "block"
                ],
                "test_different_ndims": [
                    "self",
                    "block"
                ],
                "test_different_ndims_depths": [
                    "self",
                    "block"
                ],
                "test_block_memory_order": [
                    "self",
                    "block"
                ]
            }
        },
        "numpy.core.tests.test_indexing": {
            "TestIndexing": {
                "test_index_no_floats": [
                    "self"
                ],
                "test_slicing_no_floats": [
                    "self"
                ],
                "test_index_no_array_to_index": [
                    "self"
                ],
                "test_none_index": [
                    "self"
                ],
                "test_empty_tuple_index": [
                    "self"
                ],
                "test_void_scalar_empty_tuple": [
                    "self"
                ],
                "test_same_kind_index_casting": [
                    "self"
                ],
                "test_empty_fancy_index": [
                    "self"
                ],
                "test_ellipsis_index": [
                    "self"
                ],
                "test_single_int_index": [
                    "self"
                ],
                "test_single_bool_index": [
                    "self"
                ],
                "test_boolean_shape_mismatch": [
                    "self"
                ],
                "test_boolean_indexing_onedim": [
                    "self"
                ],
                "test_boolean_assignment_value_mismatch": [
                    "self"
                ],
                "test_boolean_assignment_needs_api": [
                    "self"
                ],
                "test_boolean_indexing_twodim": [
                    "self"
                ],
                "test_boolean_indexing_list": [
                    "self"
                ],
                "test_reverse_strides_and_subspace_bufferinit": [
                    "self"
                ],
                "test_reversed_strides_result_allocation": [
                    "self"
                ],
                "test_uncontiguous_subspace_assignment": [
                    "self"
                ],
                "test_too_many_fancy_indices_special_case": [
                    "self"
                ],
                "test_scalar_array_bool": [
                    "self"
                ],
                "test_everything_returns_views": [
                    "self"
                ],
                "test_broaderrors_indexing": [
                    "self"
                ],
                "test_trivial_fancy_out_of_bounds": [
                    "self"
                ],
                "test_trivial_fancy_not_possible": [
                    "self"
                ],
                "test_nonbaseclass_values": [
                    "self"
                ],
                "test_subclass_writeable": [
                    "self"
                ],
                "test_memory_order": [
                    "self"
                ],
                "test_scalar_return_type": [
                    "self"
                ],
                "test_small_regressions": [
                    "self"
                ],
                "test_unaligned": [
                    "self"
                ],
                "test_tuple_subclass": [
                    "self"
                ],
                "test_broken_sequence_not_nd_index": [
                    "self"
                ],
                "test_indexing_array_weird_strides": [
                    "self"
                ],
                "test_indexing_array_negative_strides": [
                    "self"
                ]
            },
            "TestFieldIndexing": {
                "test_scalar_return_type": [
                    "self"
                ]
            },
            "TestBroadcastedAssignments": {
                "assign": [
                    "self",
                    "a",
                    "ind",
                    "val"
                ],
                "test_prepending_ones": [
                    "self"
                ],
                "test_prepend_not_one": [
                    "self"
                ],
                "test_simple_broadcasting_errors": [
                    "self"
                ],
                "test_index_is_larger": [
                    "self"
                ],
                "test_broadcast_subspace": [
                    "self"
                ]
            },
            "TestSubclasses": {
                "test_basic": [
                    "self"
                ],
                "test_fancy_on_read_only": [
                    "self"
                ],
                "test_finalize_gets_full_info": [
                    "self"
                ],
                "test_slice_decref_getsetslice": [
                    "self"
                ]
            },
            "TestFancyIndexingCast": {
                "test_boolean_index_cast_assign": [
                    "self"
                ]
            },
            "TestFancyIndexingEquivalence": {
                "test_object_assign": [
                    "self"
                ],
                "test_cast_equivalence": [
                    "self"
                ]
            },
            "TestMultiIndexingAutomated": {
                "setup": [
                    "self"
                ],
                "_get_multi_index": [
                    "self",
                    "arr",
                    "indices"
                ],
                "_check_multi_index": [
                    "self",
                    "arr",
                    "index"
                ],
                "_check_single_index": [
                    "self",
                    "arr",
                    "index"
                ],
                "_compare_index_result": [
                    "self",
                    "arr",
                    "index",
                    "mimic_get",
                    "no_copy"
                ],
                "test_boolean": [
                    "self"
                ],
                "test_multidim": [
                    "self"
                ],
                "test_1d": [
                    "self"
                ]
            },
            "TestFloatNonIntegerArgument": {
                "test_valid_indexing": [
                    "self"
                ],
                "test_valid_slicing": [
                    "self"
                ],
                "test_non_integer_argument_errors": [
                    "self"
                ],
                "test_non_integer_sequence_multiplication": [
                    "self"
                ],
                "test_reduce_axis_float_index": [
                    "self"
                ]
            },
            "TestBooleanIndexing": {
                "test_bool_as_int_argument_errors": [
                    "self"
                ],
                "test_boolean_indexing_weirdness": [
                    "self"
                ]
            },
            "TestArrayToIndexDeprecation": {
                "test_array_to_index_error": [
                    "self"
                ]
            },
            "TestNonIntegerArrayLike": {
                "test_basic": [
                    "self"
                ]
            },
            "TestMultipleEllipsisError": {
                "test_basic": [
                    "self"
                ]
            },
            "TestCApiAccess": {
                "test_getitem": [
                    "self"
                ],
                "test_setitem": [
                    "self"
                ]
            }
        },
        "numpy.core.tests.test_half": {
            "assert_raises_fpe": [
                "strmatch",
                "callable"
            ],
            "TestHalf": {
                "setup": [
                    "self"
                ],
                "test_half_conversions": [
                    "self"
                ],
                "test_half_conversion_rounding": [
                    "self",
                    "float_t",
                    "shift",
                    "offset"
                ],
                "test_half_conversion_denormal_round_even": [
                    "self",
                    "float_t",
                    "uint_t",
                    "bits"
                ],
                "test_nans_infs": [
                    "self"
                ],
                "test_half_values": [
                    "self"
                ],
                "test_half_rounding": [
                    "self"
                ],
                "test_half_correctness": [
                    "self"
                ],
                "test_half_ordering": [
                    "self"
                ],
                "test_half_funcs": [
                    "self"
                ],
                "test_spacing_nextafter": [
                    "self"
                ],
                "test_half_ufuncs": [
                    "self"
                ],
                "test_half_coercion": [
                    "self"
                ],
                "test_half_fpe": [
                    "self"
                ],
                "test_half_array_interface": [
                    "self"
                ]
            }
        },
        "numpy.core.tests.test_scalarinherit": {
            "A": {},
            "B": {},
            "C": {},
            "D": {},
            "B0": {},
            "C0": {},
            "TestInherit": {
                "test_init": [
                    "self"
                ],
                "test_init2": [
                    "self"
                ]
            },
            "TestCharacter": {
                "test_char_radd": [
                    "self"
                ],
                "test_char_repeat": [
                    "self"
                ]
            }
        },
        "numpy.core.tests.test_records": {
            "test_find_duplicate": [],
            "TestFromrecords": {
                "test_fromrecords": [
                    "self"
                ],
                "test_fromrecords_0len": [
                    "self"
                ],
                "test_fromrecords_2d": [
                    "self"
                ],
                "test_method_array": [
                    "self"
                ],
                "test_method_array2": [
                    "self"
                ],
                "test_recarray_slices": [
                    "self"
                ],
                "test_recarray_fromarrays": [
                    "self"
                ],
                "test_recarray_fromfile": [
                    "self"
                ],
                "test_recarray_from_obj": [
                    "self"
                ],
                "test_recarray_repr": [
                    "self"
                ],
                "test_0d_recarray_repr": [
                    "self"
                ],
                "test_recarray_from_repr": [
                    "self"
                ],
                "test_recarray_views": [
                    "self"
                ],
                "test_recarray_from_names": [
                    "self"
                ],
                "test_recarray_conflict_fields": [
                    "self"
                ],
                "test_fromrecords_with_explicit_dtype": [
                    "self"
                ],
                "test_recarray_stringtypes": [
                    "self"
                ],
                "test_recarray_returntypes": [
                    "self"
                ],
                "test_zero_width_strings": [
                    "self"
                ]
            },
            "TestPathUsage": {
                "test_tofile_fromfile": [
                    "self"
                ]
            },
            "TestRecord": {
                "setup": [
                    "self"
                ],
                "test_assignment1": [
                    "self"
                ],
                "test_assignment2": [
                    "self"
                ],
                "test_invalid_assignment": [
                    "self"
                ],
                "test_nonwriteable_setfield": [
                    "self"
                ],
                "test_out_of_order_fields": [
                    "self"
                ],
                "test_pickle_1": [
                    "self"
                ],
                "test_pickle_2": [
                    "self"
                ],
                "test_pickle_3": [
                    "self"
                ],
                "test_objview_record": [
                    "self"
                ],
                "test_record_scalar_setitem": [
                    "self"
                ],
                "test_missing_field": [
                    "self"
                ],
                "test_fromarrays_nested_structured_arrays": [
                    "self"
                ],
                "test_assign_dtype_attribute": [
                    "self",
                    "nfields"
                ],
                "test_nested_fields_are_records": [
                    "self",
                    "nfields"
                ],
                "test_nested_dtype_padding": [
                    "self"
                ]
            }
        },
        "numpy.core.tests.test_api": {
            "test_array_array": [],
            "test_fastCopyAndTranspose": [],
            "test_array_astype": [],
            "test_array_astype_warning": [
                "t"
            ],
            "test_copyto_fromscalar": [],
            "test_copyto": [],
            "test_copyto_permut": [],
            "test_copy_order": [],
            "test_contiguous_flags": [],
            "test_broadcast_arrays": []
        },
        "numpy.core.tests.test_errstate": {
            "TestErrstate": {
                "test_invalid": [
                    "self"
                ],
                "test_divide": [
                    "self"
                ],
                "test_errcall": [
                    "self"
                ],
                "test_errstate_decorator": [
                    "self"
                ]
            }
        },
        "numpy.core.tests.test_unicode": {
            "test_string_cast": [],
            "CreateZeros": {
                "content_check": [
                    "self",
                    "ua",
                    "ua_scalar",
                    "nbytes"
                ],
                "test_zeros0D": [
                    "self"
                ],
                "test_zerosSD": [
                    "self"
                ],
                "test_zerosMD": [
                    "self"
                ]
            },
            "TestCreateZeros_1": {},
            "TestCreateZeros_2": {},
            "TestCreateZeros_1009": {},
            "CreateValues": {
                "content_check": [
                    "self",
                    "ua",
                    "ua_scalar",
                    "nbytes"
                ],
                "test_values0D": [
                    "self"
                ],
                "test_valuesSD": [
                    "self"
                ],
                "test_valuesMD": [
                    "self"
                ]
            },
            "TestCreateValues_1_UCS2": {},
            "TestCreateValues_1_UCS4": {},
            "TestCreateValues_2_UCS2": {},
            "TestCreateValues_2_UCS4": {},
            "TestCreateValues_1009_UCS2": {},
            "TestCreateValues_1009_UCS4": {},
            "AssignValues": {
                "content_check": [
                    "self",
                    "ua",
                    "ua_scalar",
                    "nbytes"
                ],
                "test_values0D": [
                    "self"
                ],
                "test_valuesSD": [
                    "self"
                ],
                "test_valuesMD": [
                    "self"
                ]
            },
            "TestAssignValues_1_UCS2": {},
            "TestAssignValues_1_UCS4": {},
            "TestAssignValues_2_UCS2": {},
            "TestAssignValues_2_UCS4": {},
            "TestAssignValues_1009_UCS2": {},
            "TestAssignValues_1009_UCS4": {},
            "ByteorderValues": {
                "test_values0D": [
                    "self"
                ],
                "test_valuesSD": [
                    "self"
                ],
                "test_valuesMD": [
                    "self"
                ],
                "test_values_cast": [
                    "self"
                ],
                "test_values_updowncast": [
                    "self"
                ]
            },
            "TestByteorder_1_UCS2": {},
            "TestByteorder_1_UCS4": {},
            "TestByteorder_2_UCS2": {},
            "TestByteorder_2_UCS4": {},
            "TestByteorder_1009_UCS2": {},
            "TestByteorder_1009_UCS4": {}
        },
        "numpy.core.tests.test_defchararray": {
            "test_empty_indexing": [],
            "TestBasic": {
                "test_from_object_array": [
                    "self"
                ],
                "test_from_object_array_unicode": [
                    "self"
                ],
                "test_from_string_array": [
                    "self"
                ],
                "test_from_unicode_array": [
                    "self"
                ],
                "test_unicode_upconvert": [
                    "self"
                ],
                "test_from_string": [
                    "self"
                ],
                "test_from_unicode": [
                    "self"
                ]
            },
            "TestVecString": {
                "test_non_existent_method": [
                    "self"
                ],
                "test_non_string_array": [
                    "self"
                ],
                "test_invalid_args_tuple": [
                    "self"
                ],
                "test_invalid_type_descr": [
                    "self"
                ],
                "test_invalid_function_args": [
                    "self"
                ],
                "test_invalid_result_type": [
                    "self"
                ],
                "test_broadcast_error": [
                    "self"
                ]
            },
            "TestWhitespace": {
                "setup": [
                    "self"
                ],
                "test1": [
                    "self"
                ]
            },
            "TestChar": {
                "setup": [
                    "self"
                ],
                "test_it": [
                    "self"
                ]
            },
            "TestComparisons": {
                "setup": [
                    "self"
                ],
                "test_not_equal": [
                    "self"
                ],
                "test_equal": [
                    "self"
                ],
                "test_greater_equal": [
                    "self"
                ],
                "test_less_equal": [
                    "self"
                ],
                "test_greater": [
                    "self"
                ],
                "test_less": [
                    "self"
                ]
            },
            "TestComparisonsMixed1": {
                "setup": [
                    "self"
                ]
            },
            "TestComparisonsMixed2": {
                "setup": [
                    "self"
                ]
            },
            "TestInformation": {
                "setup": [
                    "self"
                ],
                "test_len": [
                    "self"
                ],
                "test_count": [
                    "self"
                ],
                "test_endswith": [
                    "self"
                ],
                "test_find": [
                    "self"
                ],
                "test_index": [
                    "self"
                ],
                "test_isalnum": [
                    "self"
                ],
                "test_isalpha": [
                    "self"
                ],
                "test_isdigit": [
                    "self"
                ],
                "test_islower": [
                    "self"
                ],
                "test_isspace": [
                    "self"
                ],
                "test_istitle": [
                    "self"
                ],
                "test_isupper": [
                    "self"
                ],
                "test_rfind": [
                    "self"
                ],
                "test_rindex": [
                    "self"
                ],
                "test_startswith": [
                    "self"
                ]
            },
            "TestMethods": {
                "setup": [
                    "self"
                ],
                "test_capitalize": [
                    "self"
                ],
                "test_center": [
                    "self"
                ],
                "test_decode": [
                    "self"
                ],
                "test_encode": [
                    "self"
                ],
                "test_expandtabs": [
                    "self"
                ],
                "test_join": [
                    "self"
                ],
                "test_ljust": [
                    "self"
                ],
                "test_lower": [
                    "self"
                ],
                "test_lstrip": [
                    "self"
                ],
                "test_partition": [
                    "self"
                ],
                "test_replace": [
                    "self"
                ],
                "test_rjust": [
                    "self"
                ],
                "test_rpartition": [
                    "self"
                ],
                "test_rsplit": [
                    "self"
                ],
                "test_rstrip": [
                    "self"
                ],
                "test_strip": [
                    "self"
                ],
                "test_split": [
                    "self"
                ],
                "test_splitlines": [
                    "self"
                ],
                "test_swapcase": [
                    "self"
                ],
                "test_title": [
                    "self"
                ],
                "test_upper": [
                    "self"
                ],
                "test_isnumeric": [
                    "self"
                ],
                "test_isdecimal": [
                    "self"
                ]
            },
            "TestOperations": {
                "setup": [
                    "self"
                ],
                "test_add": [
                    "self"
                ],
                "test_radd": [
                    "self"
                ],
                "test_mul": [
                    "self"
                ],
                "test_rmul": [
                    "self"
                ],
                "test_mod": [
                    "self"
                ],
                "test_rmod": [
                    "self"
                ],
                "test_slice": [
                    "self"
                ]
            }
        },
        "numpy.core.tests.test_umath_accuracy": {
            "convert": [
                "s"
            ],
            "TestAccuracy": {
                "test_validate_transcendentals": [
                    "self"
                ]
            }
        },
        "numpy.core.tests.test_getlimits": {
            "test_instances": [],
            "assert_ma_equal": [
                "discovered",
                "ma_like"
            ],
            "test_known_types": [],
            "test_plausible_finfo": [],
            "TestPythonFloat": {
                "test_singleton": [
                    "self"
                ]
            },
            "TestHalf": {
                "test_singleton": [
                    "self"
                ]
            },
            "TestSingle": {
                "test_singleton": [
                    "self"
                ]
            },
            "TestDouble": {
                "test_singleton": [
                    "self"
                ]
            },
            "TestLongdouble": {
                "test_singleton": [
                    "self"
                ]
            },
            "TestFinfo": {
                "test_basic": [
                    "self"
                ]
            },
            "TestIinfo": {
                "test_basic": [
                    "self"
                ],
                "test_unsigned_max": [
                    "self"
                ]
            },
            "TestRepr": {
                "test_iinfo_repr": [
                    "self"
                ],
                "test_finfo_repr": [
                    "self"
                ]
            }
        },
        "numpy.core.tests.test_multiarray": {
            "_aligned_zeros": [
                "shape",
                "dtype",
                "order",
                "align"
            ],
            "_mean": [
                "a"
            ],
            "_var": [
                "a"
            ],
            "_std": [
                "a"
            ],
            "test_interface_no_shape": [],
            "test_array_interface_itemsize": [],
            "test_array_interface_empty_shape": [],
            "test_array_interface_offset": [],
            "test_flat_element_deletion": [],
            "test_scalar_element_deletion": [],
            "test_orderconverter_with_nonASCII_unicode_ordering": [],
            "test_equal_override": [],
            "test_npymath_complex": [],
            "test_npymath_real": [],
            "test_uintalignment_and_alignment": [],
            "test_getfield": [],
            "TestFlags": {
                "setup": [
                    "self"
                ],
                "test_writeable": [
                    "self"
                ],
                "test_writeable_any_base": [
                    "self"
                ],
                "test_writeable_from_readonly": [
                    "self"
                ],
                "test_writeable_from_buffer": [
                    "self"
                ],
                "test_writeable_pickle": [
                    "self"
                ],
                "test_writeable_from_c_data": [
                    "self"
                ],
                "test_warnonwrite": [
                    "self"
                ],
                "test_otherflags": [
                    "self"
                ],
                "test_string_align": [
                    "self"
                ],
                "test_void_align": [
                    "self"
                ]
            },
            "TestHash": {
                "test_int": [
                    "self"
                ]
            },
            "TestAttributes": {
                "setup": [
                    "self"
                ],
                "test_attributes": [
                    "self"
                ],
                "test_dtypeattr": [
                    "self"
                ],
                "test_int_subclassing": [
                    "self"
                ],
                "test_stridesattr": [
                    "self"
                ],
                "test_set_stridesattr": [
                    "self"
                ],
                "test_fill": [
                    "self"
                ],
                "test_fill_max_uint64": [
                    "self"
                ],
                "test_fill_struct_array": [
                    "self"
                ]
            },
            "TestArrayConstruction": {
                "test_array": [
                    "self"
                ],
                "test_array_empty": [
                    "self"
                ],
                "test_array_copy_false": [
                    "self"
                ],
                "test_array_copy_true": [
                    "self"
                ],
                "test_array_cont": [
                    "self"
                ]
            },
            "TestAssignment": {
                "test_assignment_broadcasting": [
                    "self"
                ],
                "test_assignment_errors": [
                    "self"
                ],
                "test_unicode_assignment": [
                    "self"
                ],
                "test_stringlike_empty_list": [
                    "self"
                ],
                "test_longdouble_assignment": [
                    "self"
                ],
                "test_cast_to_string": [
                    "self"
                ]
            },
            "TestDtypedescr": {
                "test_construction": [
                    "self"
                ],
                "test_byteorders": [
                    "self"
                ],
                "test_structured_non_void": [
                    "self"
                ]
            },
            "TestZeroRank": {
                "setup": [
                    "self"
                ],
                "test_ellipsis_subscript": [
                    "self"
                ],
                "test_empty_subscript": [
                    "self"
                ],
                "test_invalid_subscript": [
                    "self"
                ],
                "test_ellipsis_subscript_assignment": [
                    "self"
                ],
                "test_empty_subscript_assignment": [
                    "self"
                ],
                "test_invalid_subscript_assignment": [
                    "self"
                ],
                "test_newaxis": [
                    "self"
                ],
                "test_invalid_newaxis": [
                    "self"
                ],
                "test_constructor": [
                    "self"
                ],
                "test_output": [
                    "self"
                ],
                "test_real_imag": [
                    "self"
                ]
            },
            "TestScalarIndexing": {
                "setup": [
                    "self"
                ],
                "test_ellipsis_subscript": [
                    "self"
                ],
                "test_empty_subscript": [
                    "self"
                ],
                "test_invalid_subscript": [
                    "self"
                ],
                "test_invalid_subscript_assignment": [
                    "self"
                ],
                "test_newaxis": [
                    "self"
                ],
                "test_invalid_newaxis": [
                    "self"
                ],
                "test_overlapping_assignment": [
                    "self"
                ]
            },
            "TestCreation": {
                "test_from_attribute": [
                    "self"
                ],
                "test_from_string": [
                    "self"
                ],
                "test_void": [
                    "self"
                ],
                "test_too_big_error": [
                    "self"
                ],
                "test_zeros": [
                    "self"
                ],
                "test_zeros_big": [
                    "self"
                ],
                "test_zeros_obj": [
                    "self"
                ],
                "test_zeros_obj_obj": [
                    "self"
                ],
                "test_zeros_like_like_zeros": [
                    "self"
                ],
                "test_empty_unicode": [
                    "self"
                ],
                "test_sequence_non_homogenous": [
                    "self"
                ],
                "test_sequence_long": [
                    "self"
                ],
                "test_non_sequence_sequence": [
                    "self"
                ],
                "test_no_len_object_type": [
                    "self"
                ],
                "test_false_len_sequence": [
                    "self"
                ],
                "test_failed_len_sequence": [
                    "self"
                ],
                "test_array_too_big": [
                    "self"
                ],
                "test_jagged_ndim_object": [
                    "self"
                ],
                "test_jagged_shape_object": [
                    "self"
                ]
            },
            "TestStructured": {
                "test_subarray_field_access": [
                    "self"
                ],
                "test_subarray_comparison": [
                    "self"
                ],
                "test_casting": [
                    "self"
                ],
                "test_objview": [
                    "self"
                ],
                "test_setfield": [
                    "self"
                ],
                "test_setfield_object": [
                    "self"
                ],
                "test_zero_width_string": [
                    "self"
                ],
                "test_base_attr": [
                    "self"
                ],
                "test_assignment": [
                    "self"
                ],
                "test_structuredscalar_indexing": [
                    "self"
                ],
                "test_multiindex_titles": [
                    "self"
                ]
            },
            "TestBool": {
                "test_test_interning": [
                    "self"
                ],
                "test_sum": [
                    "self"
                ],
                "check_count_nonzero": [
                    "self",
                    "power",
                    "length"
                ],
                "test_count_nonzero": [
                    "self"
                ],
                "test_count_nonzero_all": [
                    "self"
                ],
                "test_count_nonzero_unaligned": [
                    "self"
                ],
                "_test_cast_from_flexible": [
                    "self",
                    "dtype"
                ],
                "test_cast_from_void": [
                    "self"
                ],
                "test_cast_from_unicode": [
                    "self"
                ],
                "test_cast_from_bytes": [
                    "self"
                ]
            },
            "TestZeroSizeFlexible": {
                "_zeros": [
                    "shape",
                    "dtype"
                ],
                "test_create": [
                    "self"
                ],
                "_test_sort_partition": [
                    "self",
                    "name",
                    "kinds"
                ],
                "test_sort": [
                    "self"
                ],
                "test_argsort": [
                    "self"
                ],
                "test_partition": [
                    "self"
                ],
                "test_argpartition": [
                    "self"
                ],
                "test_resize": [
                    "self"
                ],
                "test_view": [
                    "self"
                ],
                "test_dumps": [
                    "self"
                ],
                "test_pickle": [
                    "self"
                ],
                "test_pickle_with_buffercallback": [
                    "self"
                ]
            },
            "TestMethods": {
                "test_compress": [
                    "self"
                ],
                "test_choose": [
                    "self"
                ],
                "test_prod": [
                    "self"
                ],
                "test_repeat": [
                    "self"
                ],
                "test_reshape": [
                    "self"
                ],
                "test_round": [
                    "self"
                ],
                "test_squeeze": [
                    "self"
                ],
                "test_transpose": [
                    "self"
                ],
                "test_sort": [
                    "self"
                ],
                "test_void_sort": [
                    "self"
                ],
                "test_sort_raises": [
                    "self"
                ],
                "test_sort_degraded": [
                    "self"
                ],
                "test_copy": [
                    "self"
                ],
                "test_sort_order": [
                    "self"
                ],
                "test_argsort": [
                    "self"
                ],
                "test_sort_unicode_kind": [
                    "self"
                ],
                "test_searchsorted": [
                    "self"
                ],
                "test_searchsorted_unicode": [
                    "self"
                ],
                "test_searchsorted_with_sorter": [
                    "self"
                ],
                "test_searchsorted_return_type": [
                    "self"
                ],
                "test_argpartition_out_of_range": [
                    "self"
                ],
                "test_partition_out_of_range": [
                    "self"
                ],
                "test_argpartition_integer": [
                    "self"
                ],
                "test_partition_integer": [
                    "self"
                ],
                "test_partition_empty_array": [
                    "self"
                ],
                "test_argpartition_empty_array": [
                    "self"
                ],
                "test_partition": [
                    "self"
                ],
                "assert_partitioned": [
                    "self",
                    "d",
                    "kth"
                ],
                "test_partition_iterative": [
                    "self"
                ],
                "test_partition_cdtype": [
                    "self"
                ],
                "test_partition_unicode_kind": [
                    "self"
                ],
                "test_partition_fuzz": [
                    "self"
                ],
                "test_argpartition_gh5524": [
                    "self"
                ],
                "test_flatten": [
                    "self"
                ],
                "test_flatten_invalid_order": [
                    "self"
                ],
                "test_arr_mult": [
                    "self",
                    "func"
                ],
                "test_no_dgemv": [
                    "self",
                    "func",
                    "dtype"
                ],
                "test_dot": [
                    "self"
                ],
                "test_dot_type_mismatch": [
                    "self"
                ],
                "test_dot_out_mem_overlap": [
                    "self"
                ],
                "test_dot_matmul_out": [
                    "self"
                ],
                "test_dot_matmul_inner_array_casting_fails": [
                    "self"
                ],
                "test_matmul_out": [
                    "self"
                ],
                "test_diagonal": [
                    "self"
                ],
                "test_diagonal_view_notwriteable": [
                    "self"
                ],
                "test_diagonal_memleak": [
                    "self"
                ],
                "test_size_zero_memleak": [
                    "self"
                ],
                "test_trace": [
                    "self"
                ],
                "test_trace_subclass": [
                    "self"
                ],
                "test_put": [
                    "self"
                ],
                "test_ravel": [
                    "self"
                ],
                "test_ravel_subclass": [
                    "self"
                ],
                "test_swapaxes": [
                    "self"
                ],
                "test_conjugate": [
                    "self"
                ],
                "test__complex__": [
                    "self"
                ],
                "test__complex__should_not_work": [
                    "self"
                ]
            },
            "TestCequenceMethods": {
                "test_array_contains": [
                    "self"
                ]
            },
            "TestBinop": {
                "test_inplace": [
                    "self"
                ],
                "test_ufunc_binop_interaction": [
                    "self"
                ],
                "test_ufunc_override_normalize_signature": [
                    "self"
                ],
                "test_array_ufunc_index": [
                    "self"
                ],
                "test_out_override": [
                    "self"
                ],
                "test_pow_override_with_errors": [
                    "self"
                ],
                "test_pow_array_object_dtype": [
                    "self"
                ],
                "test_pos_array_ufunc_override": [
                    "self"
                ]
            },
            "TestTemporaryElide": {
                "test_extension_incref_elide": [
                    "self"
                ],
                "test_extension_incref_elide_stack": [
                    "self"
                ],
                "test_temporary_with_cast": [
                    "self"
                ],
                "test_elide_broadcast": [
                    "self"
                ],
                "test_elide_scalar": [
                    "self"
                ],
                "test_elide_scalar_readonly": [
                    "self"
                ],
                "test_elide_readonly": [
                    "self"
                ],
                "test_elide_updateifcopy": [
                    "self"
                ]
            },
            "TestCAPI": {
                "test_IsPythonScalar": [
                    "self"
                ]
            },
            "TestSubscripting": {
                "test_test_zero_rank": [
                    "self"
                ]
            },
            "TestPickling": {
                "test_correct_protocol5_error_message": [
                    "self"
                ],
                "test_record_array_with_object_dtype": [
                    "self"
                ],
                "test_f_contiguous_array": [
                    "self"
                ],
                "test_non_contiguous_array": [
                    "self"
                ],
                "test_roundtrip": [
                    "self"
                ],
                "_loads": [
                    "self",
                    "obj"
                ],
                "test_version0_int8": [
                    "self"
                ],
                "test_version0_float32": [
                    "self"
                ],
                "test_version0_object": [
                    "self"
                ],
                "test_version1_int8": [
                    "self"
                ],
                "test_version1_float32": [
                    "self"
                ],
                "test_version1_object": [
                    "self"
                ],
                "test_subarray_int_shape": [
                    "self"
                ],
                "test_datetime64_byteorder": [
                    "self"
                ]
            },
            "TestFancyIndexing": {
                "test_list": [
                    "self"
                ],
                "test_tuple": [
                    "self"
                ],
                "test_mask": [
                    "self"
                ],
                "test_mask2": [
                    "self"
                ],
                "test_assign_mask": [
                    "self"
                ],
                "test_assign_mask2": [
                    "self"
                ]
            },
            "TestStringCompare": {
                "test_string": [
                    "self"
                ],
                "test_mixed": [
                    "self"
                ],
                "test_unicode": [
                    "self"
                ]
            },
            "TestArgmax": {
                "test_all": [
                    "self"
                ],
                "test_combinations": [
                    "self"
                ],
                "test_output_shape": [
                    "self"
                ],
                "test_argmax_unicode": [
                    "self"
                ],
                "test_np_vs_ndarray": [
                    "self"
                ],
                "test_object_argmax_with_NULLs": [
                    "self"
                ]
            },
            "TestArgmin": {
                "test_all": [
                    "self"
                ],
                "test_combinations": [
                    "self"
                ],
                "test_minimum_signed_integers": [
                    "self"
                ],
                "test_output_shape": [
                    "self"
                ],
                "test_argmin_unicode": [
                    "self"
                ],
                "test_np_vs_ndarray": [
                    "self"
                ],
                "test_object_argmin_with_NULLs": [
                    "self"
                ]
            },
            "TestMinMax": {
                "test_scalar": [
                    "self"
                ],
                "test_axis": [
                    "self"
                ],
                "test_datetime": [
                    "self"
                ]
            },
            "TestNewaxis": {
                "test_basic": [
                    "self"
                ]
            },
            "TestClip": {
                "_check_range": [
                    "self",
                    "x",
                    "cmin",
                    "cmax"
                ],
                "_clip_type": [
                    "self",
                    "type_group",
                    "array_max",
                    "clip_min",
                    "clip_max",
                    "inplace",
                    "expected_min",
                    "expected_max"
                ],
                "test_basic": [
                    "self"
                ],
                "test_record_array": [
                    "self"
                ],
                "test_max_or_min": [
                    "self"
                ],
                "test_nan": [
                    "self"
                ]
            },
            "TestCompress": {
                "test_axis": [
                    "self"
                ],
                "test_truncate": [
                    "self"
                ],
                "test_flatten": [
                    "self"
                ]
            },
            "TestPutmask": {
                "tst_basic": [
                    "self",
                    "x",
                    "T",
                    "mask",
                    "val"
                ],
                "test_ip_types": [
                    "self"
                ],
                "test_mask_size": [
                    "self"
                ],
                "test_byteorder": [
                    "self",
                    "dtype"
                ],
                "test_record_array": [
                    "self"
                ],
                "test_overlaps": [
                    "self"
                ]
            },
            "TestTake": {
                "tst_basic": [
                    "self",
                    "x"
                ],
                "test_ip_types": [
                    "self"
                ],
                "test_raise": [
                    "self"
                ],
                "test_clip": [
                    "self"
                ],
                "test_wrap": [
                    "self"
                ],
                "test_byteorder": [
                    "self",
                    "dtype"
                ],
                "test_record_array": [
                    "self"
                ],
                "test_out_overlap": [
                    "self"
                ]
            },
            "TestLexsort": {
                "test_basic": [
                    "self",
                    "dtype"
                ],
                "test_mixed": [
                    "self"
                ],
                "test_datetime": [
                    "self"
                ],
                "test_object": [
                    "self"
                ],
                "test_invalid_axis": [
                    "self"
                ]
            },
            "TestIO": {
                "setup": [
                    "self"
                ],
                "teardown": [
                    "self"
                ],
                "test_nofile": [
                    "self"
                ],
                "test_bool_fromstring": [
                    "self"
                ],
                "test_uint64_fromstring": [
                    "self"
                ],
                "test_int64_fromstring": [
                    "self"
                ],
                "test_empty_files_binary": [
                    "self"
                ],
                "test_empty_files_text": [
                    "self"
                ],
                "test_roundtrip_file": [
                    "self"
                ],
                "test_roundtrip_filename": [
                    "self"
                ],
                "test_roundtrip_pathlib": [
                    "self"
                ],
                "test_roundtrip_dump_pathlib": [
                    "self"
                ],
                "test_roundtrip_binary_str": [
                    "self"
                ],
                "test_roundtrip_str": [
                    "self"
                ],
                "test_roundtrip_repr": [
                    "self"
                ],
                "test_unseekable_fromfile": [
                    "self"
                ],
                "test_io_open_unbuffered_fromfile": [
                    "self"
                ],
                "test_largish_file": [
                    "self"
                ],
                "test_io_open_buffered_fromfile": [
                    "self"
                ],
                "test_file_position_after_fromfile": [
                    "self"
                ],
                "test_file_position_after_tofile": [
                    "self"
                ],
                "test_load_object_array_fromfile": [
                    "self"
                ],
                "test_fromfile_offset": [
                    "self"
                ],
                "_check_from": [
                    "self",
                    "s",
                    "value"
                ],
                "test_nan": [
                    "self"
                ],
                "test_inf": [
                    "self"
                ],
                "test_numbers": [
                    "self"
                ],
                "test_binary": [
                    "self"
                ],
                "test_big_binary": [
                    "self"
                ],
                "test_string": [
                    "self"
                ],
                "test_counted_string": [
                    "self"
                ],
                "test_string_with_ws": [
                    "self"
                ],
                "test_counted_string_with_ws": [
                    "self"
                ],
                "test_ascii": [
                    "self"
                ],
                "test_malformed": [
                    "self"
                ],
                "test_long_sep": [
                    "self"
                ],
                "test_dtype": [
                    "self"
                ],
                "test_dtype_bool": [
                    "self"
                ],
                "test_tofile_sep": [
                    "self"
                ],
                "test_tofile_format": [
                    "self"
                ],
                "test_locale": [
                    "self"
                ],
                "test_fromfile_subarray_binary": [
                    "self"
                ]
            },
            "TestFromBuffer": {
                "test_basic": [
                    "self",
                    "byteorder",
                    "dtype"
                ],
                "test_empty": [
                    "self"
                ]
            },
            "TestFlat": {
                "setup": [
                    "self"
                ],
                "test_contiguous": [
                    "self"
                ],
                "test_discontiguous": [
                    "self"
                ],
                "test___array__": [
                    "self"
                ],
                "test_refcount": [
                    "self"
                ]
            },
            "TestResize": {
                "test_basic": [
                    "self"
                ],
                "test_check_reference": [
                    "self"
                ],
                "test_int_shape": [
                    "self"
                ],
                "test_none_shape": [
                    "self"
                ],
                "test_0d_shape": [
                    "self"
                ],
                "test_invalid_arguments": [
                    "self"
                ],
                "test_freeform_shape": [
                    "self"
                ],
                "test_zeros_appended": [
                    "self"
                ],
                "test_obj_obj": [
                    "self"
                ],
                "test_empty_view": [
                    "self"
                ],
                "test_check_weakref": [
                    "self"
                ]
            },
            "TestRecord": {
                "test_field_rename": [
                    "self"
                ],
                "test_multiple_field_name_occurrence": [
                    "self"
                ],
                "test_bytes_fields": [
                    "self"
                ],
                "test_multiple_field_name_unicode": [
                    "self"
                ],
                "test_unicode_field_titles": [
                    "self"
                ],
                "test_unicode_field_names": [
                    "self"
                ],
                "test_fromarrays_unicode": [
                    "self"
                ],
                "test_unicode_order": [
                    "self"
                ],
                "test_field_names": [
                    "self"
                ],
                "test_record_hash": [
                    "self"
                ],
                "test_record_no_hash": [
                    "self"
                ],
                "test_empty_structure_creation": [
                    "self"
                ],
                "test_multifield_indexing_view": [
                    "self"
                ]
            },
            "TestView": {
                "test_basic": [
                    "self"
                ]
            },
            "TestStats": {
                "setup": [
                    "self"
                ],
                "test_python_type": [
                    "self"
                ],
                "test_keepdims": [
                    "self"
                ],
                "test_out": [
                    "self"
                ],
                "test_dtype_from_input": [
                    "self"
                ],
                "test_dtype_from_dtype": [
                    "self"
                ],
                "test_ddof": [
                    "self"
                ],
                "test_ddof_too_big": [
                    "self"
                ],
                "test_empty": [
                    "self"
                ],
                "test_mean_values": [
                    "self"
                ],
                "test_mean_float16": [
                    "self"
                ],
                "test_var_values": [
                    "self"
                ],
                "test_std_values": [
                    "self"
                ],
                "test_subclass": [
                    "self"
                ]
            },
            "TestVdot": {
                "test_basic": [
                    "self"
                ],
                "test_vdot_array_order": [
                    "self"
                ],
                "test_vdot_uncontiguous": [
                    "self"
                ]
            },
            "TestDot": {
                "setup": [
                    "self"
                ],
                "test_dotmatmat": [
                    "self"
                ],
                "test_dotmatvec": [
                    "self"
                ],
                "test_dotmatvec2": [
                    "self"
                ],
                "test_dotvecmat": [
                    "self"
                ],
                "test_dotvecmat2": [
                    "self"
                ],
                "test_dotvecmat3": [
                    "self"
                ],
                "test_dotvecvecouter": [
                    "self"
                ],
                "test_dotvecvecinner": [
                    "self"
                ],
                "test_dotcolumnvect1": [
                    "self"
                ],
                "test_dotcolumnvect2": [
                    "self"
                ],
                "test_dotvecscalar": [
                    "self"
                ],
                "test_dotvecscalar2": [
                    "self"
                ],
                "test_all": [
                    "self"
                ],
                "test_vecobject": [
                    "self"
                ],
                "test_dot_2args": [
                    "self"
                ],
                "test_dot_3args": [
                    "self"
                ],
                "test_dot_3args_errors": [
                    "self"
                ],
                "test_dot_array_order": [
                    "self"
                ],
                "test_accelerate_framework_sgemv_fix": [
                    "self"
                ]
            },
            "MatmulCommon": {
                "test_exceptions": [
                    "self"
                ],
                "test_shapes": [
                    "self"
                ],
                "test_result_types": [
                    "self"
                ],
                "test_scalar_output": [
                    "self"
                ],
                "test_vector_vector_values": [
                    "self"
                ],
                "test_vector_matrix_values": [
                    "self"
                ],
                "test_matrix_vector_values": [
                    "self"
                ],
                "test_matrix_matrix_values": [
                    "self"
                ]
            },
            "TestMatmul": {
                "test_out_arg": [
                    "self"
                ],
                "test_out_contiguous": [
                    "self"
                ],
                "test_dot_equivalent": [
                    "self",
                    "args"
                ],
                "test_matmul_object": [
                    "self"
                ],
                "test_matmul_object_type_scalar": [
                    "self"
                ],
                "test_matmul_empty": [
                    "self"
                ],
                "test_matmul_exception_multiply": [
                    "self"
                ],
                "test_matmul_exception_add": [
                    "self"
                ],
                "test_matmul_bool": [
                    "self"
                ]
            },
            "TestInner": {
                "test_inner_type_mismatch": [
                    "self"
                ],
                "test_inner_scalar_and_vector": [
                    "self"
                ],
                "test_vecself": [
                    "self"
                ],
                "test_inner_product_with_various_contiguities": [
                    "self"
                ],
                "test_3d_tensor": [
                    "self"
                ]
            },
            "TestAlen": {
                "test_basic": [
                    "self"
                ],
                "test_singleton": [
                    "self"
                ]
            },
            "TestChoose": {
                "setup": [
                    "self"
                ],
                "test_basic": [
                    "self"
                ],
                "test_broadcast1": [
                    "self"
                ],
                "test_broadcast2": [
                    "self"
                ]
            },
            "TestRepeat": {
                "setup": [
                    "self"
                ],
                "test_basic": [
                    "self"
                ],
                "test_broadcast1": [
                    "self"
                ],
                "test_axis_spec": [
                    "self"
                ],
                "test_broadcast2": [
                    "self"
                ]
            },
            "TestNeighborhoodIter": {
                "test_simple2d": [
                    "self",
                    "dt"
                ],
                "test_mirror2d": [
                    "self",
                    "dt"
                ],
                "test_simple": [
                    "self",
                    "dt"
                ],
                "test_mirror": [
                    "self",
                    "dt"
                ],
                "test_circular": [
                    "self",
                    "dt"
                ]
            },
            "TestStackedNeighborhoodIter": {
                "test_simple_const": [
                    "self"
                ],
                "test_simple_mirror": [
                    "self"
                ],
                "test_simple_circular": [
                    "self"
                ],
                "test_simple_strict_within": [
                    "self"
                ]
            },
            "TestWarnings": {
                "test_complex_warning": [
                    "self"
                ]
            },
            "TestMinScalarType": {
                "test_usigned_shortshort": [
                    "self"
                ],
                "test_usigned_short": [
                    "self"
                ],
                "test_usigned_int": [
                    "self"
                ],
                "test_usigned_longlong": [
                    "self"
                ],
                "test_object": [
                    "self"
                ]
            },
            "TestPEP3118Dtype": {
                "_check": [
                    "self",
                    "spec",
                    "wanted"
                ],
                "test_native_padding": [
                    "self"
                ],
                "test_native_padding_2": [
                    "self"
                ],
                "test_trailing_padding": [
                    "self"
                ],
                "test_native_padding_3": [
                    "self"
                ],
                "test_padding_with_array_inside_struct": [
                    "self"
                ],
                "test_byteorder_inside_struct": [
                    "self"
                ],
                "test_intra_padding": [
                    "self"
                ],
                "test_char_vs_string": [
                    "self"
                ],
                "test_field_order": [
                    "self"
                ],
                "test_unnamed_fields": [
                    "self"
                ]
            },
            "TestNewBufferProtocol": {
                "_check_roundtrip": [
                    "self",
                    "obj"
                ],
                "test_roundtrip": [
                    "self"
                ],
                "test_roundtrip_half": [
                    "self"
                ],
                "test_roundtrip_single_types": [
                    "self"
                ],
                "test_roundtrip_scalar": [
                    "self"
                ],
                "test_invalid_buffer_format": [
                    "self"
                ],
                "test_export_simple_1d": [
                    "self"
                ],
                "test_export_simple_nd": [
                    "self"
                ],
                "test_export_discontiguous": [
                    "self"
                ],
                "test_export_record": [
                    "self"
                ],
                "test_export_subarray": [
                    "self"
                ],
                "test_export_endian": [
                    "self"
                ],
                "test_export_flags": [
                    "self"
                ],
                "test_padding": [
                    "self"
                ],
                "test_reference_leak": [
                    "self"
                ],
                "test_padded_struct_array": [
                    "self"
                ],
                "test_relaxed_strides": [
                    "self"
                ],
                "test_out_of_order_fields": [
                    "self"
                ],
                "test_max_dims": [
                    "self"
                ],
                "test_error_too_many_dims": [
                    "self"
                ],
                "test_error_pointer_type": [
                    "self"
                ],
                "test_error_message_unsupported": [
                    "self"
                ],
                "test_ctypes_integer_via_memoryview": [
                    "self"
                ],
                "test_ctypes_struct_via_memoryview": [
                    "self"
                ]
            },
            "TestArrayAttributeDeletion": {
                "test_multiarray_writable_attributes_deletion": [
                    "self"
                ],
                "test_multiarray_not_writable_attributes_deletion": [
                    "self"
                ],
                "test_multiarray_flags_writable_attribute_deletion": [
                    "self"
                ],
                "test_multiarray_flags_not_writable_attribute_deletion": [
                    "self"
                ]
            },
            "TestArrayInterface": {
                "test_scalar_interface": [
                    "self",
                    "val",
                    "iface",
                    "expected"
                ]
            },
            "TestMemEventHook": {
                "test_mem_seteventhook": [
                    "self"
                ]
            },
            "TestMapIter": {
                "test_mapiter": [
                    "self"
                ]
            },
            "TestAsCArray": {
                "test_1darray": [
                    "self"
                ],
                "test_2darray": [
                    "self"
                ],
                "test_3darray": [
                    "self"
                ]
            },
            "TestConversion": {
                "test_array_scalar_relational_operation": [
                    "self"
                ],
                "test_to_bool_scalar": [
                    "self"
                ],
                "test_to_int_scalar": [
                    "self"
                ]
            },
            "TestWhere": {
                "test_basic": [
                    "self"
                ],
                "test_exotic": [
                    "self"
                ],
                "test_ndim": [
                    "self"
                ],
                "test_dtype_mix": [
                    "self"
                ],
                "test_foreign": [
                    "self"
                ],
                "test_error": [
                    "self"
                ],
                "test_string": [
                    "self"
                ],
                "test_empty_result": [
                    "self"
                ],
                "test_largedim": [
                    "self"
                ]
            },
            "TestHashing": {
                "test_arrays_not_hashable": [
                    "self"
                ],
                "test_collections_hashable": [
                    "self"
                ]
            },
            "TestArrayPriority": {
                "test_ndarray_subclass": [
                    "self"
                ],
                "test_ndarray_other": [
                    "self"
                ],
                "test_subclass_subclass": [
                    "self"
                ],
                "test_subclass_other": [
                    "self"
                ]
            },
            "TestBytestringArrayNonzero": {
                "test_empty_bstring_array_is_falsey": [
                    "self"
                ],
                "test_whitespace_bstring_array_is_falsey": [
                    "self"
                ],
                "test_all_null_bstring_array_is_falsey": [
                    "self"
                ],
                "test_null_inside_bstring_array_is_truthy": [
                    "self"
                ]
            },
            "TestUnicodeArrayNonzero": {
                "test_empty_ustring_array_is_falsey": [
                    "self"
                ],
                "test_whitespace_ustring_array_is_falsey": [
                    "self"
                ],
                "test_all_null_ustring_array_is_falsey": [
                    "self"
                ],
                "test_null_inside_ustring_array_is_truthy": [
                    "self"
                ]
            },
            "TestFormat": {
                "test_0d": [
                    "self"
                ],
                "test_1d_no_format": [
                    "self"
                ],
                "test_1d_format": [
                    "self"
                ]
            },
            "TestCTypes": {
                "test_ctypes_is_available": [
                    "self"
                ],
                "test_ctypes_is_not_available": [
                    "self"
                ],
                "_make_readonly": [
                    "x"
                ],
                "test_ctypes_data_as_holds_reference": [
                    "self",
                    "arr"
                ],
                "test_ctypes_as_parameter_holds_reference": [
                    "self"
                ]
            },
            "TestWritebackIfCopy": {
                "test_argmax_with_out": [
                    "self"
                ],
                "test_argmin_with_out": [
                    "self"
                ],
                "test_insert_noncontiguous": [
                    "self"
                ],
                "test_put_noncontiguous": [
                    "self"
                ],
                "test_putmask_noncontiguous": [
                    "self"
                ],
                "test_take_mode_raise": [
                    "self"
                ],
                "test_choose_mod_raise": [
                    "self"
                ],
                "test_flatiter__array__": [
                    "self"
                ],
                "test_dot_out": [
                    "self"
                ],
                "test_view_assign": [
                    "self"
                ],
                "test_dealloc_warning": [
                    "self"
                ],
                "test_view_discard_refcount": [
                    "self"
                ]
            },
            "TestArange": {
                "test_infinite": [
                    "self"
                ],
                "test_nan_step": [
                    "self"
                ],
                "test_zero_step": [
                    "self"
                ]
            },
            "TestArrayFinalize": {
                "test_receives_base": [
                    "self"
                ],
                "test_lifetime_on_error": [
                    "self"
                ]
            },
            "TestAlignment": {
                "check": [
                    "self",
                    "shape",
                    "dtype",
                    "order",
                    "align"
                ],
                "test_various_alignments": [
                    "self"
                ],
                "test_strided_loop_alignments": [
                    "self"
                ]
            }
        },
        "numpy.core.tests.test_datetime": {
            "TestDateTime": {
                "test_datetime_dtype_creation": [
                    "self"
                ],
                "test_datetime_casting_rules": [
                    "self"
                ],
                "test_compare_generic_nat": [
                    "self"
                ],
                "test_datetime_nat_argsort_stability": [
                    "self",
                    "size"
                ],
                "test_timedelta_nat_argsort_stability": [
                    "self",
                    "size"
                ],
                "test_datetime_timedelta_sort_nat": [
                    "self",
                    "arr",
                    "expected",
                    "dtype"
                ],
                "test_datetime_scalar_construction": [
                    "self"
                ],
                "test_datetime_scalar_construction_timezone": [
                    "self"
                ],
                "test_datetime_array_find_type": [
                    "self"
                ],
                "test_timedelta_np_int_construction": [
                    "self",
                    "unit"
                ],
                "test_timedelta_scalar_construction": [
                    "self"
                ],
                "test_timedelta_object_array_conversion": [
                    "self"
                ],
                "test_timedelta_0_dim_object_array_conversion": [
                    "self"
                ],
                "test_timedelta_scalar_construction_units": [
                    "self"
                ],
                "test_datetime_nat_casting": [
                    "self"
                ],
                "test_days_creation": [
                    "self"
                ],
                "test_days_to_pydate": [
                    "self"
                ],
                "test_dtype_comparison": [
                    "self"
                ],
                "test_pydatetime_creation": [
                    "self"
                ],
                "test_datetime_string_conversion": [
                    "self"
                ],
                "test_datetime_array_str": [
                    "self"
                ],
                "test_timedelta_array_str": [
                    "self"
                ],
                "test_pickle": [
                    "self"
                ],
                "test_setstate": [
                    "self"
                ],
                "test_dtype_promotion": [
                    "self"
                ],
                "test_cast_overflow": [
                    "self"
                ],
                "test_pyobject_roundtrip": [
                    "self"
                ],
                "test_month_truncation": [
                    "self"
                ],
                "test_different_unit_comparison": [
                    "self"
                ],
                "test_datetime_like": [
                    "self"
                ],
                "test_datetime_unary": [
                    "self"
                ],
                "test_datetime_add": [
                    "self"
                ],
                "test_datetime_subtract": [
                    "self"
                ],
                "test_datetime_multiply": [
                    "self"
                ],
                "test_timedelta_floor_divide": [
                    "self",
                    "op1",
                    "op2",
                    "exp"
                ],
                "test_timedelta_floor_div_warnings": [
                    "self",
                    "op1",
                    "op2"
                ],
                "test_timedelta_floor_div_precision": [
                    "self",
                    "val1",
                    "val2"
                ],
                "test_timedelta_floor_div_error": [
                    "self",
                    "val1",
                    "val2"
                ],
                "test_timedelta_divmod": [
                    "self",
                    "op1",
                    "op2"
                ],
                "test_timedelta_divmod_warnings": [
                    "self",
                    "op1",
                    "op2"
                ],
                "test_datetime_divide": [
                    "self"
                ],
                "test_datetime_compare": [
                    "self"
                ],
                "test_datetime_compare_nat": [
                    "self"
                ],
                "test_datetime_minmax": [
                    "self"
                ],
                "test_hours": [
                    "self"
                ],
                "test_divisor_conversion_year": [
                    "self"
                ],
                "test_divisor_conversion_month": [
                    "self"
                ],
                "test_divisor_conversion_week": [
                    "self"
                ],
                "test_divisor_conversion_day": [
                    "self"
                ],
                "test_divisor_conversion_hour": [
                    "self"
                ],
                "test_divisor_conversion_minute": [
                    "self"
                ],
                "test_divisor_conversion_second": [
                    "self"
                ],
                "test_divisor_conversion_fs": [
                    "self"
                ],
                "test_divisor_conversion_as": [
                    "self"
                ],
                "test_string_parser_variants": [
                    "self"
                ],
                "test_string_parser_error_check": [
                    "self"
                ],
                "test_creation_overflow": [
                    "self"
                ],
                "test_datetime_as_string": [
                    "self"
                ],
                "test_datetime_as_string_timezone": [
                    "self"
                ],
                "test_datetime_arange": [
                    "self"
                ],
                "test_datetime_arange_no_dtype": [
                    "self"
                ],
                "test_timedelta_arange": [
                    "self"
                ],
                "test_timedelta_modulus": [
                    "self",
                    "val1",
                    "val2",
                    "expected"
                ],
                "test_timedelta_modulus_error": [
                    "self",
                    "val1",
                    "val2"
                ],
                "test_timedelta_modulus_div_by_zero": [
                    "self"
                ],
                "test_timedelta_modulus_type_resolution": [
                    "self",
                    "val1",
                    "val2"
                ],
                "test_timedelta_arange_no_dtype": [
                    "self"
                ],
                "test_datetime_maximum_reduce": [
                    "self"
                ],
                "test_datetime_busday_offset": [
                    "self"
                ],
                "test_datetime_busdaycalendar": [
                    "self"
                ],
                "test_datetime_busday_holidays_offset": [
                    "self"
                ],
                "test_datetime_busday_holidays_count": [
                    "self"
                ],
                "test_datetime_is_busday": [
                    "self"
                ],
                "test_datetime_y2038": [
                    "self"
                ],
                "test_isnat": [
                    "self"
                ],
                "test_isnat_error": [
                    "self"
                ],
                "test_isfinite_scalar": [
                    "self"
                ],
                "test_isfinite_isinf_isnan_units": [
                    "self",
                    "unit",
                    "dstr"
                ],
                "test_assert_equal": [
                    "self"
                ],
                "test_corecursive_input": [
                    "self"
                ],
                "test_limit_symmetry": [
                    "self",
                    "time_unit"
                ],
                "test_limit_str_roundtrip": [
                    "self",
                    "time_unit",
                    "sign"
                ]
            },
            "TestDateTimeData": {
                "test_basic": [
                    "self"
                ]
            }
        },
        "numpy.core.tests.test__exceptions": {
            "TestArrayMemoryError": {
                "test_str": [
                    "self"
                ],
                "test__size_to_string": [
                    "self"
                ],
                "test__total_size": [
                    "self"
                ]
            }
        },
        "numpy.core.tests.test_overrides": {
            "_return_not_implemented": [
                "self"
            ],
            "dispatched_one_arg": [
                "array"
            ],
            "dispatched_two_arg": [
                "array1",
                "array2"
            ],
            "_new_duck_type_and_implements": [],
            "TestGetImplementingArgs": {
                "test_ndarray": [
                    "self"
                ],
                "test_ndarray_subclasses": [
                    "self"
                ],
                "test_ndarray_and_duck_array": [
                    "self"
                ],
                "test_ndarray_subclass_and_duck_array": [
                    "self"
                ],
                "test_many_duck_arrays": [
                    "self"
                ],
                "test_too_many_duck_arrays": [
                    "self"
                ]
            },
            "TestNDArrayArrayFunction": {
                "test_method": [
                    "self"
                ],
                "test_no_wrapper": [
                    "self"
                ]
            },
            "TestArrayFunctionDispatch": {
                "test_pickle": [
                    "self"
                ],
                "test_name_and_docstring": [
                    "self"
                ],
                "test_interface": [
                    "self"
                ],
                "test_not_implemented": [
                    "self"
                ]
            },
            "TestVerifyMatchingSignatures": {
                "test_verify_matching_signatures": [
                    "self"
                ],
                "test_array_function_dispatch": [
                    "self"
                ]
            },
            "TestArrayFunctionImplementation": {
                "test_one_arg": [
                    "self"
                ],
                "test_optional_args": [
                    "self"
                ],
                "test_not_implemented": [
                    "self"
                ]
            },
            "TestNDArrayMethods": {
                "test_repr": [
                    "self"
                ]
            },
            "TestNumPyFunctions": {
                "test_set_module": [
                    "self"
                ],
                "test_inspect_sum": [
                    "self"
                ],
                "test_override_sum": [
                    "self"
                ],
                "test_sum_on_mock_array": [
                    "self"
                ],
                "test_sum_forwarding_implementation": [
                    "self"
                ]
            }
        },
        "numpy.core.tests.test_nditer": {
            "iter_multi_index": [
                "i"
            ],
            "iter_indices": [
                "i"
            ],
            "iter_iterindices": [
                "i"
            ],
            "test_iter_refcount": [],
            "test_iter_best_order": [],
            "test_iter_c_order": [],
            "test_iter_f_order": [],
            "test_iter_c_or_f_order": [],
            "test_iter_best_order_multi_index_1d": [],
            "test_iter_best_order_multi_index_2d": [],
            "test_iter_best_order_multi_index_3d": [],
            "test_iter_best_order_c_index_1d": [],
            "test_iter_best_order_c_index_2d": [],
            "test_iter_best_order_c_index_3d": [],
            "test_iter_best_order_f_index_1d": [],
            "test_iter_best_order_f_index_2d": [],
            "test_iter_best_order_f_index_3d": [],
            "test_iter_no_inner_full_coalesce": [],
            "test_iter_no_inner_dim_coalescing": [],
            "test_iter_dim_coalescing": [],
            "test_iter_broadcasting": [],
            "test_iter_itershape": [],
            "test_iter_broadcasting_errors": [],
            "test_iter_flags_errors": [],
            "test_iter_slice": [],
            "test_iter_assign_mapping": [],
            "test_iter_nbo_align_contig": [],
            "test_iter_array_cast": [],
            "test_iter_array_cast_errors": [],
            "test_iter_scalar_cast": [],
            "test_iter_scalar_cast_errors": [],
            "test_iter_object_arrays_basic": [],
            "test_iter_object_arrays_conversions": [],
            "test_iter_common_dtype": [],
            "test_iter_copy_if_overlap": [],
            "test_iter_op_axes": [],
            "test_iter_op_axes_errors": [],
            "test_iter_copy": [],
            "test_iter_allocate_output_simple": [],
            "test_iter_allocate_output_buffered_readwrite": [],
            "test_iter_allocate_output_itorder": [],
            "test_iter_allocate_output_opaxes": [],
            "test_iter_allocate_output_types_promotion": [],
            "test_iter_allocate_output_types_byte_order": [],
            "test_iter_allocate_output_types_scalar": [],
            "test_iter_allocate_output_subtype": [],
            "test_iter_allocate_output_errors": [],
            "test_iter_remove_axis": [],
            "test_iter_remove_multi_index_inner_loop": [],
            "test_iter_iterindex": [],
            "test_iter_iterrange": [],
            "test_iter_buffering": [],
            "test_iter_write_buffering": [],
            "test_iter_buffering_delayed_alloc": [],
            "test_iter_buffered_cast_simple": [],
            "test_iter_buffered_cast_byteswapped": [],
            "test_iter_buffered_cast_byteswapped_complex": [],
            "test_iter_buffered_cast_structured_type": [],
            "test_iter_buffered_cast_subarray": [],
            "test_iter_buffering_badwriteback": [],
            "test_iter_buffering_string": [],
            "test_iter_buffering_growinner": [],
            "test_iter_buffered_reduce_reuse": [],
            "test_iter_no_broadcast": [],
            "test_iter_reduction_error": [],
            "test_iter_reduction": [],
            "test_iter_buffering_reduction": [],
            "test_iter_buffering_reduction_reuse_reduce_loops": [],
            "test_iter_writemasked_badinput": [],
            "test_iter_writemasked": [],
            "test_iter_non_writable_attribute_deletion": [],
            "test_iter_writable_attribute_deletion": [],
            "test_iter_element_deletion": [],
            "test_iter_allocated_array_dtypes": [],
            "test_0d_iter": [],
            "test_iter_too_large": [],
            "test_iter_too_large_with_multiindex": [],
            "test_writebacks": [],
            "test_close_equivalent": [],
            "test_close_raises": [],
            "test_warn_noclose": [],
            "TestIterNested": {
                "test_basic": [
                    "self"
                ],
                "test_reorder": [
                    "self"
                ],
                "test_flip_axes": [
                    "self"
                ],
                "test_broadcast": [
                    "self"
                ],
                "test_dtype_copy": [
                    "self"
                ],
                "test_dtype_buffered": [
                    "self"
                ],
                "test_0d": [
                    "self"
                ],
                "test_iter_nested_iters_dtype_buffered": [
                    "self"
                ]
            }
        },
        "numpy.core.tests.test_scalarmath": {
            "floordiv_and_mod": [
                "x",
                "y"
            ],
            "_signs": [
                "dt"
            ],
            "TestTypes": {
                "test_types": [
                    "self"
                ],
                "test_type_add": [
                    "self"
                ],
                "test_type_create": [
                    "self"
                ],
                "test_leak": [
                    "self"
                ]
            },
            "TestBaseMath": {
                "test_blocked": [
                    "self"
                ],
                "test_lower_align": [
                    "self"
                ]
            },
            "TestPower": {
                "test_small_types": [
                    "self"
                ],
                "test_large_types": [
                    "self"
                ],
                "test_integers_to_negative_integer_power": [
                    "self"
                ],
                "test_mixed_types": [
                    "self"
                ],
                "test_modular_power": [
                    "self"
                ]
            },
            "TestModulus": {
                "test_modulus_basic": [
                    "self"
                ],
                "test_float_modulus_exact": [
                    "self"
                ],
                "test_float_modulus_roundoff": [
                    "self"
                ],
                "test_float_modulus_corner_cases": [
                    "self"
                ],
                "test_inplace_floordiv_handling": [
                    "self"
                ]
            },
            "TestComplexDivision": {
                "test_zero_division": [
                    "self"
                ],
                "test_signed_zeros": [
                    "self"
                ],
                "test_branches": [
                    "self"
                ]
            },
            "TestConversion": {
                "test_int_from_long": [
                    "self"
                ],
                "test_iinfo_long_values": [
                    "self"
                ],
                "test_int_raise_behaviour": [
                    "self"
                ],
                "test_int_from_infinite_longdouble": [
                    "self"
                ],
                "test_int_from_infinite_longdouble___int__": [
                    "self"
                ],
                "test_int_from_huge_longdouble": [
                    "self"
                ],
                "test_int_from_longdouble": [
                    "self"
                ],
                "test_numpy_scalar_relational_operators": [
                    "self"
                ],
                "test_scalar_comparison_to_none": [
                    "self"
                ]
            },
            "TestRepr": {
                "_test_type_repr": [
                    "self",
                    "t"
                ],
                "test_float_repr": [
                    "self"
                ]
            },
            "TestMultiply": {
                "test_seq_repeat": [
                    "self"
                ],
                "test_no_seq_repeat_basic_array_like": [
                    "self"
                ]
            },
            "TestNegative": {
                "test_exceptions": [
                    "self"
                ],
                "test_result": [
                    "self"
                ]
            },
            "TestSubtract": {
                "test_exceptions": [
                    "self"
                ],
                "test_result": [
                    "self"
                ]
            },
            "TestAbs": {
                "_test_abs_func": [
                    "self",
                    "absfunc"
                ],
                "test_builtin_abs": [
                    "self"
                ],
                "test_numpy_abs": [
                    "self"
                ]
            },
            "TestBitShifts": {
                "test_shift_all_bits": [
                    "self",
                    "type_code",
                    "op"
                ]
            }
        },
        "numpy.core.tests.test_arrayprint": {
            "test_unicode_object_array": [],
            "TestArrayRepr": {
                "test_nan_inf": [
                    "self"
                ],
                "test_subclass": [
                    "self"
                ],
                "test_object_subclass": [
                    "self"
                ],
                "test_0d_object_subclass": [
                    "self"
                ],
                "test_self_containing": [
                    "self"
                ],
                "test_containing_list": [
                    "self"
                ],
                "test_void_scalar_recursion": [
                    "self"
                ],
                "test_fieldless_structured": [
                    "self"
                ]
            },
            "TestComplexArray": {
                "test_str": [
                    "self"
                ]
            },
            "TestArray2String": {
                "test_basic": [
                    "self"
                ],
                "test_unexpected_kwarg": [
                    "self"
                ],
                "test_format_function": [
                    "self"
                ],
                "test_structure_format": [
                    "self"
                ],
                "test_unstructured_void_repr": [
                    "self"
                ],
                "test_edgeitems_kwarg": [
                    "self"
                ],
                "test_summarize_1d": [
                    "self"
                ],
                "test_summarize_2d": [
                    "self"
                ],
                "test_linewidth": [
                    "self"
                ],
                "test_wide_element": [
                    "self"
                ],
                "test_refcount": [
                    "self"
                ]
            },
            "TestPrintOptions": {
                "setup": [
                    "self"
                ],
                "teardown": [
                    "self"
                ],
                "test_basic": [
                    "self"
                ],
                "test_precision_zero": [
                    "self"
                ],
                "test_formatter": [
                    "self"
                ],
                "test_formatter_reset": [
                    "self"
                ],
                "test_0d_arrays": [
                    "self"
                ],
                "test_float_spacing": [
                    "self"
                ],
                "test_bool_spacing": [
                    "self"
                ],
                "test_sign_spacing": [
                    "self"
                ],
                "test_float_overflow_nowarn": [
                    "self"
                ],
                "test_sign_spacing_structured": [
                    "self"
                ],
                "test_floatmode": [
                    "self"
                ],
                "test_legacy_mode_scalars": [
                    "self"
                ],
                "test_legacy_stray_comma": [
                    "self"
                ],
                "test_dtype_linewidth_wrapping": [
                    "self"
                ],
                "test_linewidth_repr": [
                    "self"
                ],
                "test_linewidth_str": [
                    "self"
                ],
                "test_edgeitems": [
                    "self"
                ],
                "test_bad_args": [
                    "self"
                ]
            },
            "TestContextManager": {
                "test_ctx_mgr": [
                    "self"
                ],
                "test_ctx_mgr_restores": [
                    "self"
                ],
                "test_ctx_mgr_exceptions": [
                    "self"
                ],
                "test_ctx_mgr_as_smth": [
                    "self"
                ]
            }
        },
        "numpy.core.tests._locales": {
            "find_comma_decimal_point_locale": [],
            "CommaDecimalPointLocale": {
                "setup": [
                    "self"
                ],
                "teardown": [
                    "self"
                ],
                "__enter__": [
                    "self"
                ],
                "__exit__": [
                    "self",
                    "type",
                    "value",
                    "traceback"
                ]
            }
        },
        "numpy.core.tests.test_print": {
            "test_float_types": [
                "tp"
            ],
            "test_nan_inf_float": [
                "tp"
            ],
            "test_complex_types": [
                "tp"
            ],
            "test_complex_inf_nan": [
                "dtype"
            ],
            "_test_redirected_print": [
                "x",
                "tp",
                "ref"
            ],
            "test_float_type_print": [
                "tp"
            ],
            "test_complex_type_print": [
                "tp"
            ],
            "test_scalar_format": [],
            "TestCommaDecimalPointLocale": {
                "test_locale_single": [
                    "self"
                ],
                "test_locale_double": [
                    "self"
                ],
                "test_locale_longdouble": [
                    "self"
                ]
            }
        },
        "numpy.core.tests.test_longdouble": {
            "test_scalar_extraction": [],
            "test_repr_roundtrip": [],
            "test_unicode": [],
            "test_string": [],
            "test_bytes": [],
            "test_repr_roundtrip_bytes": [],
            "test_bogus_string": [],
            "test_fromstring": [],
            "test_fromstring_complex": [],
            "test_fromstring_bogus": [],
            "test_fromstring_empty": [],
            "test_fromstring_missing": [],
            "test_repr_exact": [],
            "test_format": [],
            "test_percent": [],
            "test_array_repr": [],
            "test_longdouble_from_int": [
                "int_val"
            ],
            "test_longdouble_from_bool": [
                "bool_val"
            ],
            "TestFileBased": {
                "test_fromfile_bogus": [
                    "self"
                ],
                "test_fromfile_complex": [
                    "self"
                ],
                "test_fromfile": [
                    "self"
                ],
                "test_genfromtxt": [
                    "self"
                ],
                "test_loadtxt": [
                    "self"
                ],
                "test_tofile_roundtrip": [
                    "self"
                ]
            },
            "TestCommaDecimalPointLocale": {
                "test_repr_roundtrip_foreign": [
                    "self"
                ],
                "test_fromstring_foreign_repr": [
                    "self"
                ],
                "test_fromstring_best_effort_float": [
                    "self"
                ],
                "test_fromstring_best_effort": [
                    "self"
                ],
                "test_fromstring_foreign": [
                    "self"
                ],
                "test_fromstring_foreign_sep": [
                    "self"
                ],
                "test_fromstring_foreign_value": [
                    "self"
                ]
            }
        },
        "numpy.core.tests.test_umath": {
            "on_powerpc": [],
            "floor_divide_and_remainder": [
                "x",
                "y"
            ],
            "_signs": [
                "dt"
            ],
            "assert_hypot_isnan": [
                "x",
                "y"
            ],
            "assert_hypot_isinf": [
                "x",
                "y"
            ],
            "assert_arctan2_isnan": [
                "x",
                "y"
            ],
            "assert_arctan2_ispinf": [
                "x",
                "y"
            ],
            "assert_arctan2_isninf": [
                "x",
                "y"
            ],
            "assert_arctan2_ispzero": [
                "x",
                "y"
            ],
            "assert_arctan2_isnzero": [
                "x",
                "y"
            ],
            "_check_branch_cut": [
                "f",
                "x0",
                "dx",
                "re_sign",
                "im_sign",
                "sig_zero_ok",
                "dtype"
            ],
            "test_copysign": [],
            "_test_nextafter": [
                "t"
            ],
            "test_nextafter": [],
            "test_nextafterf": [],
            "test_nextafterl": [],
            "test_nextafter_0": [],
            "_test_spacing": [
                "t"
            ],
            "test_spacing": [],
            "test_spacingf": [],
            "test_spacingl": [],
            "test_spacing_gfortran": [],
            "test_nextafter_vs_spacing": [],
            "test_pos_nan": [],
            "test_reduceat": [],
            "test_reduceat_empty": [],
            "test_complex_nan_comparisons": [],
            "test_rint_big_int": [],
            "test_signaling_nan_exceptions": [],
            "test_outer_subclass_preserve": [
                "arr"
            ],
            "_FilterInvalids": {
                "setup": [
                    "self"
                ],
                "teardown": [
                    "self"
                ]
            },
            "TestConstants": {
                "test_pi": [
                    "self"
                ],
                "test_e": [
                    "self"
                ],
                "test_euler_gamma": [
                    "self"
                ]
            },
            "TestOut": {
                "test_out_subok": [
                    "self"
                ],
                "test_out_wrap_subok": [
                    "self"
                ]
            },
            "TestComparisons": {
                "test_ignore_object_identity_in_equal": [
                    "self"
                ],
                "test_ignore_object_identity_in_not_equal": [
                    "self"
                ]
            },
            "TestAdd": {
                "test_reduce_alignment": [
                    "self"
                ]
            },
            "TestDivision": {
                "test_division_int": [
                    "self"
                ],
                "test_division_complex": [
                    "self"
                ],
                "test_zero_division_complex": [
                    "self"
                ],
                "test_floor_division_complex": [
                    "self"
                ],
                "test_floor_division_signed_zero": [
                    "self"
                ]
            },
            "TestRemainder": {
                "test_remainder_basic": [
                    "self"
                ],
                "test_float_remainder_exact": [
                    "self"
                ],
                "test_float_remainder_roundoff": [
                    "self"
                ],
                "test_float_remainder_corner_cases": [
                    "self"
                ]
            },
            "TestCbrt": {
                "test_cbrt_scalar": [
                    "self"
                ],
                "test_cbrt": [
                    "self"
                ]
            },
            "TestPower": {
                "test_power_float": [
                    "self"
                ],
                "test_power_complex": [
                    "self"
                ],
                "test_power_zero": [
                    "self"
                ],
                "test_fast_power": [
                    "self"
                ],
                "test_integer_power": [
                    "self"
                ],
                "test_integer_power_with_integer_zero_exponent": [
                    "self"
                ],
                "test_integer_power_of_1": [
                    "self"
                ],
                "test_integer_power_of_zero": [
                    "self"
                ],
                "test_integer_to_negative_power": [
                    "self"
                ]
            },
            "TestFloat_power": {
                "test_type_conversion": [
                    "self"
                ]
            },
            "TestLog2": {
                "test_log2_values": [
                    "self"
                ],
                "test_log2_ints": [
                    "self"
                ],
                "test_log2_special": [
                    "self"
                ]
            },
            "TestExp2": {
                "test_exp2_values": [
                    "self"
                ]
            },
            "TestLogAddExp2": {
                "test_logaddexp2_values": [
                    "self"
                ],
                "test_logaddexp2_range": [
                    "self"
                ],
                "test_inf": [
                    "self"
                ],
                "test_nan": [
                    "self"
                ]
            },
            "TestLog": {
                "test_log_values": [
                    "self"
                ]
            },
            "TestExp": {
                "test_exp_values": [
                    "self"
                ]
            },
            "TestSpecialFloats": {
                "test_exp_values": [
                    "self"
                ],
                "test_log_values": [
                    "self"
                ],
                "test_sincos_values": [
                    "self"
                ],
                "test_sqrt_values": [
                    "self"
                ],
                "test_abs_values": [
                    "self"
                ],
                "test_square_values": [
                    "self"
                ],
                "test_reciprocal_values": [
                    "self"
                ]
            },
            "TestAVXUfuncs": {
                "test_avx_based_ufunc": [
                    "self"
                ]
            },
            "TestAVXFloat32Transcendental": {
                "test_exp_float32": [
                    "self"
                ],
                "test_log_float32": [
                    "self"
                ],
                "test_sincos_float32": [
                    "self"
                ],
                "test_strided_float32": [
                    "self"
                ]
            },
            "TestLogAddExp": {
                "test_logaddexp_values": [
                    "self"
                ],
                "test_logaddexp_range": [
                    "self"
                ],
                "test_inf": [
                    "self"
                ],
                "test_nan": [
                    "self"
                ],
                "test_reduce": [
                    "self"
                ]
            },
            "TestLog1p": {
                "test_log1p": [
                    "self"
                ],
                "test_special": [
                    "self"
                ]
            },
            "TestExpm1": {
                "test_expm1": [
                    "self"
                ],
                "test_special": [
                    "self"
                ]
            },
            "TestHypot": {
                "test_simple": [
                    "self"
                ],
                "test_reduce": [
                    "self"
                ]
            },
            "TestHypotSpecialValues": {
                "test_nan_outputs": [
                    "self"
                ],
                "test_nan_outputs2": [
                    "self"
                ],
                "test_no_fpe": [
                    "self"
                ]
            },
            "TestArctan2SpecialValues": {
                "test_one_one": [
                    "self"
                ],
                "test_zero_nzero": [
                    "self"
                ],
                "test_zero_pzero": [
                    "self"
                ],
                "test_zero_negative": [
                    "self"
                ],
                "test_zero_positive": [
                    "self"
                ],
                "test_positive_zero": [
                    "self"
                ],
                "test_negative_zero": [
                    "self"
                ],
                "test_any_ninf": [
                    "self"
                ],
                "test_any_pinf": [
                    "self"
                ],
                "test_inf_any": [
                    "self"
                ],
                "test_inf_ninf": [
                    "self"
                ],
                "test_inf_pinf": [
                    "self"
                ],
                "test_nan_any": [
                    "self"
                ]
            },
            "TestLdexp": {
                "_check_ldexp": [
                    "self",
                    "tp"
                ],
                "test_ldexp": [
                    "self"
                ],
                "test_ldexp_overflow": [
                    "self"
                ]
            },
            "TestMaximum": {
                "test_reduce": [
                    "self"
                ],
                "test_reduce_complex": [
                    "self"
                ],
                "test_float_nans": [
                    "self"
                ],
                "test_object_nans": [
                    "self"
                ],
                "test_complex_nans": [
                    "self"
                ],
                "test_object_array": [
                    "self"
                ]
            },
            "TestMinimum": {
                "test_reduce": [
                    "self"
                ],
                "test_reduce_complex": [
                    "self"
                ],
                "test_float_nans": [
                    "self"
                ],
                "test_object_nans": [
                    "self"
                ],
                "test_complex_nans": [
                    "self"
                ],
                "test_object_array": [
                    "self"
                ]
            },
            "TestFmax": {
                "test_reduce": [
                    "self"
                ],
                "test_reduce_complex": [
                    "self"
                ],
                "test_float_nans": [
                    "self"
                ],
                "test_complex_nans": [
                    "self"
                ]
            },
            "TestFmin": {
                "test_reduce": [
                    "self"
                ],
                "test_reduce_complex": [
                    "self"
                ],
                "test_float_nans": [
                    "self"
                ],
                "test_complex_nans": [
                    "self"
                ]
            },
            "TestBool": {
                "test_exceptions": [
                    "self"
                ],
                "test_truth_table_logical": [
                    "self"
                ],
                "test_truth_table_bitwise": [
                    "self"
                ],
                "test_reduce": [
                    "self"
                ]
            },
            "TestBitwiseUFuncs": {
                "test_values": [
                    "self"
                ],
                "test_types": [
                    "self"
                ],
                "test_identity": [
                    "self"
                ],
                "test_reduction": [
                    "self"
                ]
            },
            "TestInt": {
                "test_logical_not": [
                    "self"
                ]
            },
            "TestFloatingPoint": {
                "test_floating_point": [
                    "self"
                ]
            },
            "TestDegrees": {
                "test_degrees": [
                    "self"
                ]
            },
            "TestRadians": {
                "test_radians": [
                    "self"
                ]
            },
            "TestHeavside": {
                "test_heaviside": [
                    "self"
                ]
            },
            "TestSign": {
                "test_sign": [
                    "self"
                ],
                "test_sign_dtype_object": [
                    "self"
                ],
                "test_sign_dtype_nan_object": [
                    "self"
                ]
            },
            "TestMinMax": {
                "test_minmax_blocked": [
                    "self"
                ],
                "test_lower_align": [
                    "self"
                ],
                "test_reduce_reorder": [
                    "self"
                ],
                "test_minimize_no_warns": [
                    "self"
                ]
            },
            "TestAbsoluteNegative": {
                "test_abs_neg_blocked": [
                    "self"
                ],
                "test_lower_align": [
                    "self"
                ]
            },
            "TestPositive": {
                "test_valid": [
                    "self"
                ],
                "test_invalid": [
                    "self"
                ]
            },
            "TestSpecialMethods": {
                "test_wrap": [
                    "self"
                ],
                "test_wrap_and_prepare_out": [
                    "self"
                ],
                "test_wrap_with_iterable": [
                    "self"
                ],
                "test_priority_with_scalar": [
                    "self"
                ],
                "test_old_wrap": [
                    "self"
                ],
                "test_priority": [
                    "self"
                ],
                "test_failing_wrap": [
                    "self"
                ],
                "test_failing_out_wrap": [
                    "self"
                ],
                "test_none_wrap": [
                    "self"
                ],
                "test_default_prepare": [
                    "self"
                ],
                "test_prepare": [
                    "self"
                ],
                "test_prepare_out": [
                    "self"
                ],
                "test_failing_prepare": [
                    "self"
                ],
                "test_array_with_context": [
                    "self"
                ],
                "test_ufunc_override": [
                    "self"
                ],
                "test_ufunc_override_mro": [
                    "self"
                ],
                "test_ufunc_override_methods": [
                    "self"
                ],
                "test_ufunc_override_out": [
                    "self"
                ],
                "test_ufunc_override_exception": [
                    "self"
                ],
                "test_ufunc_override_not_implemented": [
                    "self"
                ],
                "test_ufunc_override_disabled": [
                    "self"
                ],
                "test_gufunc_override": [
                    "self"
                ],
                "test_ufunc_override_with_super": [
                    "self"
                ]
            },
            "TestChoose": {
                "test_mixed": [
                    "self"
                ]
            },
            "TestRationalFunctions": {
                "test_lcm": [
                    "self"
                ],
                "test_lcm_object": [
                    "self"
                ],
                "test_gcd": [
                    "self"
                ],
                "test_gcd_object": [
                    "self"
                ],
                "_test_lcm_inner": [
                    "self",
                    "dtype"
                ],
                "_test_gcd_inner": [
                    "self",
                    "dtype"
                ],
                "test_lcm_overflow": [
                    "self"
                ],
                "test_gcd_overflow": [
                    "self"
                ],
                "test_decimal": [
                    "self"
                ],
                "test_float": [
                    "self"
                ],
                "test_builtin_long": [
                    "self"
                ]
            },
            "TestRoundingFunctions": {
                "test_object_direct": [
                    "self"
                ],
                "test_object_indirect": [
                    "self"
                ],
                "test_fraction": [
                    "self"
                ]
            },
            "TestComplexFunctions": {
                "test_it": [
                    "self"
                ],
                "test_precisions_consistent": [
                    "self"
                ],
                "test_branch_cuts": [
                    "self"
                ],
                "test_branch_cuts_complex64": [
                    "self"
                ],
                "test_against_cmath": [
                    "self"
                ],
                "test_loss_of_precision": [
                    "self",
                    "dtype"
                ]
            },
            "TestAttributes": {
                "test_attributes": [
                    "self"
                ],
                "test_doc": [
                    "self"
                ]
            },
            "TestSubclass": {
                "test_subclass_op": [
                    "self"
                ]
            }
        },
        "numpy.core.tests.test_memmap": {
            "TestMemmap": {
                "setup": [
                    "self"
                ],
                "teardown": [
                    "self"
                ],
                "test_roundtrip": [
                    "self"
                ],
                "test_open_with_filename": [
                    "self"
                ],
                "test_unnamed_file": [
                    "self"
                ],
                "test_attributes": [
                    "self"
                ],
                "test_filename": [
                    "self"
                ],
                "test_path": [
                    "self"
                ],
                "test_filename_fileobj": [
                    "self"
                ],
                "test_flush": [
                    "self"
                ],
                "test_del": [
                    "self"
                ],
                "test_arithmetic_drops_references": [
                    "self"
                ],
                "test_indexing_drops_references": [
                    "self"
                ],
                "test_slicing_keeps_references": [
                    "self"
                ],
                "test_view": [
                    "self"
                ],
                "test_ufunc_return_ndarray": [
                    "self"
                ],
                "test_getitem": [
                    "self"
                ],
                "test_memmap_subclass": [
                    "self"
                ],
                "test_mmap_offset_greater_than_allocation_granularity": [
                    "self"
                ],
                "test_no_shape": [
                    "self"
                ],
                "test_empty_array": [
                    "self"
                ]
            }
        },
        "numpy.core.tests.test_deprecations": {
            "_DeprecationTestCase": {
                "setup": [
                    "self"
                ],
                "teardown": [
                    "self"
                ],
                "assert_deprecated": [
                    "self",
                    "function",
                    "num",
                    "ignore_others",
                    "function_fails",
                    "exceptions",
                    "args",
                    "kwargs"
                ],
                "assert_not_deprecated": [
                    "self",
                    "function",
                    "args",
                    "kwargs"
                ]
            },
            "_VisibleDeprecationTestCase": {},
            "TestNonTupleNDIndexDeprecation": {
                "test_basic": [
                    "self"
                ]
            },
            "TestComparisonDeprecations": {
                "test_normal_types": [
                    "self"
                ],
                "test_string": [
                    "self"
                ],
                "test_void_dtype_equality_failures": [
                    "self"
                ],
                "test_array_richcompare_legacy_weirdness": [
                    "self"
                ]
            },
            "TestDatetime64Timezone": {
                "test_string": [
                    "self"
                ],
                "test_datetime": [
                    "self"
                ]
            },
            "TestNonCContiguousViewDeprecation": {
                "test_fortran_contiguous": [
                    "self"
                ]
            },
            "TestArrayDataAttributeAssignmentDeprecation": {
                "test_data_attr_assignment": [
                    "self"
                ]
            },
            "TestBinaryReprInsufficientWidthParameterForRepresentation": {
                "test_insufficient_width_positive": [
                    "self"
                ],
                "test_insufficient_width_negative": [
                    "self"
                ]
            },
            "TestNumericStyleTypecodes": {
                "test_all_dtypes": [
                    "self"
                ]
            },
            "TestTestDeprecated": {
                "test_assert_deprecated": [
                    "self"
                ]
            },
            "TestClassicIntDivision": {
                "test_int_dtypes": [
                    "self"
                ]
            },
            "TestNonNumericConjugate": {
                "test_conjugate": [
                    "self"
                ]
            },
            "TestNPY_CHAR": {
                "test_npy_char_deprecation": [
                    "self"
                ]
            },
            "TestPyArray_AS1D": {
                "test_npy_pyarrayas1d_deprecation": [
                    "self"
                ]
            },
            "TestPyArray_AS2D": {
                "test_npy_pyarrayas2d_deprecation": [
                    "self"
                ]
            },
            "Test_UPDATEIFCOPY": {
                "test_npy_updateifcopy_deprecation": [
                    "self"
                ]
            },
            "TestDatetimeEvent": {
                "test_3_tuple": [
                    "self"
                ]
            },
            "TestTruthTestingEmptyArrays": {
                "test_1d": [
                    "self"
                ],
                "test_2d": [
                    "self"
                ]
            },
            "TestBincount": {
                "test_bincount_minlength": [
                    "self"
                ]
            },
            "TestAlen": {
                "test_alen": [
                    "self"
                ]
            },
            "TestGeneratorSum": {
                "test_generator_sum": [
                    "self"
                ]
            },
            "TestSctypeNA": {
                "test_sctypeNA": [
                    "self"
                ]
            },
            "TestPositiveOnNonNumerical": {
                "test_positive_on_non_number": [
                    "self"
                ]
            },
            "TestFromstring": {
                "test_fromstring": [
                    "self"
                ]
            },
            "TestFromStringAndFileInvalidData": {
                "test_deprecate_unparsable_data_file": [
                    "self",
                    "invalid_str"
                ],
                "test_deprecate_unparsable_string": [
                    "self",
                    "invalid_str"
                ]
            },
            "Test_GetSet_NumericOps": {
                "test_get_numeric_ops": [
                    "self"
                ]
            },
            "TestShape1Fields": {
                "test_shape_1_fields": [
                    "self"
                ]
            },
            "TestNonZero": {
                "test_zerod": [
                    "self"
                ]
            }
        },
        "numpy.core.tests.test_numeric": {
            "assert_array_strict_equal": [
                "x",
                "y"
            ],
            "test_outer_out_param": [],
            "TestResize": {
                "test_copies": [
                    "self"
                ],
                "test_zeroresize": [
                    "self"
                ],
                "test_reshape_from_zero": [
                    "self"
                ]
            },
            "TestNonarrayArgs": {
                "test_choose": [
                    "self"
                ],
                "test_clip": [
                    "self"
                ],
                "test_compress": [
                    "self"
                ],
                "test_count_nonzero": [
                    "self"
                ],
                "test_cumproduct": [
                    "self"
                ],
                "test_diagonal": [
                    "self"
                ],
                "test_mean": [
                    "self"
                ],
                "test_ptp": [
                    "self"
                ],
                "test_prod": [
                    "self"
                ],
                "test_ravel": [
                    "self"
                ],
                "test_repeat": [
                    "self"
                ],
                "test_reshape": [
                    "self"
                ],
                "test_round": [
                    "self"
                ],
                "test_searchsorted": [
                    "self"
                ],
                "test_size": [
                    "self"
                ],
                "test_squeeze": [
                    "self"
                ],
                "test_std": [
                    "self"
                ],
                "test_swapaxes": [
                    "self"
                ],
                "test_sum": [
                    "self"
                ],
                "test_take": [
                    "self"
                ],
                "test_trace": [
                    "self"
                ],
                "test_transpose": [
                    "self"
                ],
                "test_var": [
                    "self"
                ]
            },
            "TestIsscalar": {
                "test_isscalar": [
                    "self"
                ]
            },
            "TestBoolScalar": {
                "test_logical": [
                    "self"
                ],
                "test_bitwise_or": [
                    "self"
                ],
                "test_bitwise_and": [
                    "self"
                ],
                "test_bitwise_xor": [
                    "self"
                ]
            },
            "TestBoolArray": {
                "setup": [
                    "self"
                ],
                "test_all_any": [
                    "self"
                ],
                "test_logical_not_abs": [
                    "self"
                ],
                "test_logical_and_or_xor": [
                    "self"
                ]
            },
            "TestBoolCmp": {
                "setup": [
                    "self"
                ],
                "test_float": [
                    "self"
                ],
                "test_double": [
                    "self"
                ]
            },
            "TestSeterr": {
                "test_default": [
                    "self"
                ],
                "test_set": [
                    "self"
                ],
                "test_divide_err": [
                    "self"
                ],
                "test_errobj": [
                    "self"
                ],
                "test_errobj_noerrmask": [
                    "self"
                ]
            },
            "TestFloatExceptions": {
                "assert_raises_fpe": [
                    "self",
                    "fpeerr",
                    "flop",
                    "x",
                    "y"
                ],
                "assert_op_raises_fpe": [
                    "self",
                    "fpeerr",
                    "flop",
                    "sc1",
                    "sc2"
                ],
                "test_floating_exceptions": [
                    "self"
                ],
                "test_warnings": [
                    "self"
                ]
            },
            "TestTypes": {
                "check_promotion_cases": [
                    "self",
                    "promote_func"
                ],
                "test_coercion": [
                    "self"
                ],
                "test_result_type": [
                    "self"
                ],
                "test_promote_types_endian": [
                    "self"
                ],
                "test_promote_types_strings": [
                    "self"
                ],
                "test_can_cast": [
                    "self"
                ],
                "test_can_cast_simple_to_structured": [
                    "self"
                ],
                "test_can_cast_structured_to_simple": [
                    "self"
                ],
                "test_can_cast_values": [
                    "self"
                ]
            },
            "NIterError": {},
            "TestFromiter": {
                "makegen": [
                    "self"
                ],
                "test_types": [
                    "self"
                ],
                "test_lengths": [
                    "self"
                ],
                "test_values": [
                    "self"
                ],
                "load_data": [
                    "self",
                    "n",
                    "eindex"
                ],
                "test_2592": [
                    "self"
                ],
                "test_2592_edge": [
                    "self"
                ]
            },
            "TestNonzero": {
                "test_nonzero_trivial": [
                    "self"
                ],
                "test_nonzero_zerod": [
                    "self"
                ],
                "test_nonzero_onedim": [
                    "self"
                ],
                "test_nonzero_twodim": [
                    "self"
                ],
                "test_sparse": [
                    "self"
                ],
                "test_return_type": [
                    "self"
                ],
                "test_count_nonzero_axis": [
                    "self"
                ],
                "test_count_nonzero_axis_all_dtypes": [
                    "self"
                ],
                "test_count_nonzero_axis_consistent": [
                    "self"
                ],
                "test_countnonzero_axis_empty": [
                    "self"
                ],
                "test_array_method": [
                    "self"
                ],
                "test_nonzero_invalid_object": [
                    "self"
                ],
                "test_nonzero_sideeffect_safety": [
                    "self"
                ],
                "test_nonzero_exception_safe": [
                    "self"
                ]
            },
            "TestIndex": {
                "test_boolean": [
                    "self"
                ],
                "test_boolean_edgecase": [
                    "self"
                ]
            },
            "TestBinaryRepr": {
                "test_zero": [
                    "self"
                ],
                "test_positive": [
                    "self"
                ],
                "test_negative": [
                    "self"
                ],
                "test_sufficient_width": [
                    "self"
                ],
                "test_neg_width_boundaries": [
                    "self"
                ],
                "test_large_neg_int64": [
                    "self"
                ]
            },
            "TestBaseRepr": {
                "test_base3": [
                    "self"
                ],
                "test_positive": [
                    "self"
                ],
                "test_negative": [
                    "self"
                ],
                "test_base_range": [
                    "self"
                ]
            },
            "TestArrayComparisons": {
                "test_array_equal": [
                    "self"
                ],
                "test_none_compares_elementwise": [
                    "self"
                ],
                "test_array_equiv": [
                    "self"
                ]
            },
            "TestClip": {
                "setup": [
                    "self"
                ],
                "fastclip": [
                    "self",
                    "a",
                    "m",
                    "M",
                    "out",
                    "casting"
                ],
                "clip": [
                    "self",
                    "a",
                    "m",
                    "M",
                    "out"
                ],
                "_generate_data": [
                    "self",
                    "n",
                    "m"
                ],
                "_generate_data_complex": [
                    "self",
                    "n",
                    "m"
                ],
                "_generate_flt_data": [
                    "self",
                    "n",
                    "m"
                ],
                "_neg_byteorder": [
                    "self",
                    "a"
                ],
                "_generate_non_native_data": [
                    "self",
                    "n",
                    "m"
                ],
                "_generate_int_data": [
                    "self",
                    "n",
                    "m"
                ],
                "_generate_int32_data": [
                    "self",
                    "n",
                    "m"
                ],
                "test_ones_pathological": [
                    "self",
                    "dtype"
                ],
                "test_simple_double": [
                    "self"
                ],
                "test_simple_int": [
                    "self"
                ],
                "test_array_double": [
                    "self"
                ],
                "test_simple_nonnative": [
                    "self"
                ],
                "test_simple_complex": [
                    "self"
                ],
                "test_clip_complex": [
                    "self"
                ],
                "test_clip_non_contig": [
                    "self"
                ],
                "test_simple_out": [
                    "self"
                ],
                "test_simple_int32_inout": [
                    "self",
                    "casting"
                ],
                "test_simple_int64_out": [
                    "self"
                ],
                "test_simple_int64_inout": [
                    "self"
                ],
                "test_simple_int32_out": [
                    "self"
                ],
                "test_simple_inplace_01": [
                    "self"
                ],
                "test_simple_inplace_02": [
                    "self"
                ],
                "test_noncontig_inplace": [
                    "self"
                ],
                "test_type_cast_01": [
                    "self"
                ],
                "test_type_cast_02": [
                    "self"
                ],
                "test_type_cast_03": [
                    "self"
                ],
                "test_type_cast_04": [
                    "self"
                ],
                "test_type_cast_05": [
                    "self"
                ],
                "test_type_cast_06": [
                    "self"
                ],
                "test_type_cast_07": [
                    "self"
                ],
                "test_type_cast_08": [
                    "self"
                ],
                "test_type_cast_09": [
                    "self"
                ],
                "test_type_cast_10": [
                    "self"
                ],
                "test_type_cast_11": [
                    "self"
                ],
                "test_type_cast_12": [
                    "self"
                ],
                "test_clip_with_out_simple": [
                    "self"
                ],
                "test_clip_with_out_simple2": [
                    "self"
                ],
                "test_clip_with_out_simple_int32": [
                    "self"
                ],
                "test_clip_with_out_array_int32": [
                    "self"
                ],
                "test_clip_with_out_array_outint32": [
                    "self"
                ],
                "test_clip_with_out_transposed": [
                    "self"
                ],
                "test_clip_with_out_memory_overlap": [
                    "self"
                ],
                "test_clip_inplace_array": [
                    "self"
                ],
                "test_clip_inplace_simple": [
                    "self"
                ],
                "test_clip_func_takes_out": [
                    "self"
                ],
                "test_clip_nan": [
                    "self"
                ],
                "test_object_clip": [
                    "self"
                ],
                "test_clip_all_none": [
                    "self"
                ],
                "test_clip_invalid_casting": [
                    "self"
                ],
                "test_clip_value_min_max_flip": [
                    "self",
                    "amin",
                    "amax"
                ],
                "test_clip_problem_cases": [
                    "self",
                    "arr",
                    "amin",
                    "amax",
                    "exp"
                ],
                "test_clip_scalar_nan_propagation": [
                    "self",
                    "arr",
                    "amin",
                    "amax"
                ],
                "test_NaT_propagation": [
                    "self",
                    "arr",
                    "amin",
                    "amax"
                ]
            },
            "TestAllclose": {
                "setup": [
                    "self"
                ],
                "teardown": [
                    "self"
                ],
                "tst_allclose": [
                    "self",
                    "x",
                    "y"
                ],
                "tst_not_allclose": [
                    "self",
                    "x",
                    "y"
                ],
                "test_ip_allclose": [
                    "self"
                ],
                "test_ip_not_allclose": [
                    "self"
                ],
                "test_no_parameter_modification": [
                    "self"
                ],
                "test_min_int": [
                    "self"
                ],
                "test_equalnan": [
                    "self"
                ],
                "test_return_class_is_ndarray": [
                    "self"
                ]
            },
            "TestIsclose": {
                "setup": [
                    "self"
                ],
                "test_ip_isclose": [
                    "self"
                ],
                "tst_all_isclose": [
                    "self",
                    "x",
                    "y"
                ],
                "tst_none_isclose": [
                    "self",
                    "x",
                    "y"
                ],
                "tst_isclose_allclose": [
                    "self",
                    "x",
                    "y"
                ],
                "test_ip_all_isclose": [
                    "self"
                ],
                "test_ip_none_isclose": [
                    "self"
                ],
                "test_ip_isclose_allclose": [
                    "self"
                ],
                "test_equal_nan": [
                    "self"
                ],
                "test_masked_arrays": [
                    "self"
                ],
                "test_scalar_return": [
                    "self"
                ],
                "test_no_parameter_modification": [
                    "self"
                ],
                "test_non_finite_scalar": [
                    "self"
                ]
            },
            "TestStdVar": {
                "setup": [
                    "self"
                ],
                "test_basic": [
                    "self"
                ],
                "test_scalars": [
                    "self"
                ],
                "test_ddof1": [
                    "self"
                ],
                "test_ddof2": [
                    "self"
                ],
                "test_out_scalar": [
                    "self"
                ]
            },
            "TestStdVarComplex": {
                "test_basic": [
                    "self"
                ],
                "test_scalars": [
                    "self"
                ]
            },
            "TestCreationFuncs": {
                "setup": [
                    "self"
                ],
                "check_function": [
                    "self",
                    "func",
                    "fill_value"
                ],
                "test_zeros": [
                    "self"
                ],
                "test_ones": [
                    "self"
                ],
                "test_empty": [
                    "self"
                ],
                "test_full": [
                    "self"
                ],
                "test_for_reference_leak": [
                    "self"
                ]
            },
            "TestLikeFuncs": {
                "setup": [
                    "self"
                ],
                "compare_array_value": [
                    "self",
                    "dz",
                    "value",
                    "fill_value"
                ],
                "check_like_function": [
                    "self",
                    "like_function",
                    "value",
                    "fill_value"
                ],
                "test_ones_like": [
                    "self"
                ],
                "test_zeros_like": [
                    "self"
                ],
                "test_empty_like": [
                    "self"
                ],
                "test_filled_like": [
                    "self"
                ]
            },
            "TestCorrelate": {
                "_setup": [
                    "self",
                    "dt"
                ],
                "test_float": [
                    "self"
                ],
                "test_object": [
                    "self"
                ],
                "test_no_overwrite": [
                    "self"
                ],
                "test_complex": [
                    "self"
                ],
                "test_zero_size": [
                    "self"
                ]
            },
            "TestConvolve": {
                "test_object": [
                    "self"
                ],
                "test_no_overwrite": [
                    "self"
                ]
            },
            "TestArgwhere": {
                "test_nd": [
                    "self",
                    "nd"
                ],
                "test_2D": [
                    "self"
                ],
                "test_list": [
                    "self"
                ]
            },
            "TestStringFunction": {
                "test_set_string_function": [
                    "self"
                ]
            },
            "TestRoll": {
                "test_roll1d": [
                    "self"
                ],
                "test_roll2d": [
                    "self"
                ],
                "test_roll_empty": [
                    "self"
                ]
            },
            "TestRollaxis": {
                "test_exceptions": [
                    "self"
                ],
                "test_results": [
                    "self"
                ]
            },
            "TestMoveaxis": {
                "test_move_to_end": [
                    "self"
                ],
                "test_move_new_position": [
                    "self"
                ],
                "test_preserve_order": [
                    "self"
                ],
                "test_move_multiples": [
                    "self"
                ],
                "test_errors": [
                    "self"
                ],
                "test_array_likes": [
                    "self"
                ]
            },
            "TestCross": {
                "test_2x2": [
                    "self"
                ],
                "test_2x3": [
                    "self"
                ],
                "test_3x3": [
                    "self"
                ],
                "test_broadcasting": [
                    "self"
                ],
                "test_broadcasting_shapes": [
                    "self"
                ]
            },
            "TestIndices": {
                "test_simple": [
                    "self"
                ],
                "test_single_input": [
                    "self"
                ],
                "test_scalar_input": [
                    "self"
                ],
                "test_sparse": [
                    "self"
                ],
                "test_return_type": [
                    "self",
                    "dtype",
                    "dims"
                ]
            },
            "TestRequire": {
                "generate_all_false": [
                    "self",
                    "dtype"
                ],
                "set_and_check_flag": [
                    "self",
                    "flag",
                    "dtype",
                    "arr"
                ],
                "test_require_each": [
                    "self"
                ],
                "test_unknown_requirement": [
                    "self"
                ],
                "test_non_array_input": [
                    "self"
                ],
                "test_C_and_F_simul": [
                    "self"
                ],
                "test_ensure_array": [
                    "self"
                ],
                "test_preserve_subtype": [
                    "self"
                ]
            },
            "TestBroadcast": {
                "test_broadcast_in_args": [
                    "self"
                ],
                "test_broadcast_single_arg": [
                    "self"
                ],
                "test_number_of_arguments": [
                    "self"
                ],
                "test_broadcast_error_kwargs": [
                    "self"
                ]
            },
            "TestKeepdims": {
                "test_raise": [
                    "self"
                ]
            },
            "TestTensordot": {
                "test_zero_dimension": [
                    "self"
                ],
                "test_zero_dimensional": [
                    "self"
                ]
            }
        },
        "numpy.core.tests.test_mem_overlap": {
            "_indices_for_nelems": [
                "nelems"
            ],
            "_indices_for_axis": [],
            "_indices": [
                "ndims"
            ],
            "_check_assignment": [
                "srcidx",
                "dstidx"
            ],
            "test_overlapping_assignments": [],
            "test_diophantine_fuzz": [],
            "test_diophantine_overflow": [],
            "check_may_share_memory_exact": [
                "a",
                "b"
            ],
            "test_may_share_memory_manual": [],
            "iter_random_view_pairs": [
                "x",
                "same_steps",
                "equal_size"
            ],
            "check_may_share_memory_easy_fuzz": [
                "get_max_work",
                "same_steps",
                "min_count"
            ],
            "test_may_share_memory_easy_fuzz": [],
            "test_may_share_memory_harder_fuzz": [],
            "test_shares_memory_api": [],
            "test_may_share_memory_bad_max_work": [],
            "test_internal_overlap_diophantine": [],
            "test_internal_overlap_slices": [],
            "check_internal_overlap": [
                "a",
                "manual_expected"
            ],
            "test_internal_overlap_manual": [],
            "test_internal_overlap_fuzz": [],
            "test_non_ndarray_inputs": [],
            "view_element_first_byte": [
                "x"
            ],
            "assert_copy_equivalent": [
                "operation",
                "args",
                "out"
            ],
            "TestUFunc": {
                "check_unary_fuzz": [
                    "self",
                    "operation",
                    "get_out_axis_size",
                    "dtype",
                    "count"
                ],
                "test_unary_ufunc_call_fuzz": [
                    "self"
                ],
                "test_binary_ufunc_accumulate_fuzz": [
                    "self"
                ],
                "test_binary_ufunc_reduce_fuzz": [
                    "self"
                ],
                "test_binary_ufunc_reduceat_fuzz": [
                    "self"
                ],
                "test_binary_ufunc_reduceat_manual": [
                    "self"
                ],
                "test_unary_gufunc_fuzz": [
                    "self"
                ],
                "test_ufunc_at_manual": [
                    "self"
                ],
                "test_unary_ufunc_1d_manual": [
                    "self"
                ],
                "test_unary_ufunc_where_same": [
                    "self"
                ],
                "test_binary_ufunc_1d_manual": [
                    "self"
                ],
                "test_inplace_op_simple_manual": [
                    "self"
                ]
            }
        },
        "numpy.core.tests.test_issue14735": {
            "test_getattr_warning": [],
            "Wrapper": {
                "__init__": [
                    "self",
                    "array"
                ],
                "__len__": [
                    "self"
                ],
                "__getitem__": [
                    "self",
                    "item"
                ],
                "__getattr__": [
                    "self",
                    "name"
                ],
                "__repr__": [
                    "self"
                ]
            }
        },
        "numpy.compat": {},
        "numpy.compat.setup": {
            "configuration": [
                "parent_package",
                "top_path"
            ]
        },
        "numpy.compat.py3k": {
            "getexception": [],
            "asbytes_nested": [
                "x"
            ],
            "asunicode_nested": [
                "x"
            ],
            "is_pathlib_path": [
                "obj"
            ],
            "contextlib_nullcontext": {
                "__init__": [
                    "self",
                    "enter_result"
                ],
                "__enter__": [
                    "self"
                ],
                "__exit__": [
                    "self"
                ]
            }
        },
        "numpy.compat._inspect": {
            "ismethod": [
                "object"
            ],
            "isfunction": [
                "object"
            ],
            "iscode": [
                "object"
            ],
            "getargs": [
                "co"
            ],
            "getargspec": [
                "func"
            ],
            "getargvalues": [
                "frame"
            ],
            "joinseq": [
                "seq"
            ],
            "strseq": [
                "object",
                "convert",
                "join"
            ],
            "formatargspec": [
                "args",
                "varargs",
                "varkw",
                "defaults",
                "formatarg",
                "formatvarargs",
                "formatvarkw",
                "formatvalue",
                "join"
            ],
            "formatargvalues": [
                "args",
                "varargs",
                "varkw",
                "locals",
                "formatarg",
                "formatvarargs",
                "formatvarkw",
                "formatvalue",
                "join"
            ]
        },
        "numpy.compat.tests": {},
        "numpy.compat.tests.test_compat": {
            "test_isfileobj": []
        },
        "numpy.matrixlib": {},
        "numpy.matrixlib.setup": {
            "configuration": [
                "parent_package",
                "top_path"
            ]
        },
        "numpy.matrixlib.defmatrix": {
            "_convert_from_string": [
                "data"
            ],
            "asmatrix": [
                "data",
                "dtype"
            ],
            "_from_string": [
                "str",
                "gdict",
                "ldict"
            ],
            "bmat": [
                "obj",
                "ldict",
                "gdict"
            ],
            "matrix": {
                "__new__": [
                    "subtype",
                    "data",
                    "dtype",
                    "copy"
                ],
                "__array_finalize__": [
                    "self",
                    "obj"
                ],
                "__getitem__": [
                    "self",
                    "index"
                ],
                "__mul__": [
                    "self",
                    "other"
                ],
                "__rmul__": [
                    "self",
                    "other"
                ],
                "__imul__": [
                    "self",
                    "other"
                ],
                "__pow__": [
                    "self",
                    "other"
                ],
                "__ipow__": [
                    "self",
                    "other"
                ],
                "__rpow__": [
                    "self",
                    "other"
                ],
                "_align": [
                    "self",
                    "axis"
                ],
                "_collapse": [
                    "self",
                    "axis"
                ],
                "tolist": [
                    "self"
                ],
                "sum": [
                    "self",
                    "axis",
                    "dtype",
                    "out"
                ],
                "squeeze": [
                    "self",
                    "axis"
                ],
                "flatten": [
                    "self",
                    "order"
                ],
                "mean": [
                    "self",
                    "axis",
                    "dtype",
                    "out"
                ],
                "std": [
                    "self",
                    "axis",
                    "dtype",
                    "out",
                    "ddof"
                ],
                "var": [
                    "self",
                    "axis",
                    "dtype",
                    "out",
                    "ddof"
                ],
                "prod": [
                    "self",
                    "axis",
                    "dtype",
                    "out"
                ],
                "any": [
                    "self",
                    "axis",
                    "out"
                ],
                "all": [
                    "self",
                    "axis",
                    "out"
                ],
                "max": [
                    "self",
                    "axis",
                    "out"
                ],
                "argmax": [
                    "self",
                    "axis",
                    "out"
                ],
                "min": [
                    "self",
                    "axis",
                    "out"
                ],
                "argmin": [
                    "self",
                    "axis",
                    "out"
                ],
                "ptp": [
                    "self",
                    "axis",
                    "out"
                ],
                "I": [
                    "self"
                ],
                "A": [
                    "self"
                ],
                "A1": [
                    "self"
                ],
                "ravel": [
                    "self",
                    "order"
                ],
                "T": [
                    "self"
                ],
                "H": [
                    "self"
                ]
            }
        },
        "numpy.matrixlib.tests.test_defmatrix": {
            "TestCtor": {
                "test_basic": [
                    "self"
                ],
                "test_exceptions": [
                    "self"
                ],
                "test_bmat_nondefault_str": [
                    "self"
                ]
            },
            "TestProperties": {
                "test_sum": [
                    "self"
                ],
                "test_prod": [
                    "self"
                ],
                "test_max": [
                    "self"
                ],
                "test_min": [
                    "self"
                ],
                "test_ptp": [
                    "self"
                ],
                "test_var": [
                    "self"
                ],
                "test_basic": [
                    "self"
                ],
                "test_pinv": [
                    "self"
                ],
                "test_comparisons": [
                    "self"
                ],
                "test_asmatrix": [
                    "self"
                ],
                "test_noaxis": [
                    "self"
                ],
                "test_repr": [
                    "self"
                ],
                "test_make_bool_matrix_from_str": [
                    "self"
                ]
            },
            "TestCasting": {
                "test_basic": [
                    "self"
                ]
            },
            "TestAlgebra": {
                "test_basic": [
                    "self"
                ],
                "test_pow": [
                    "self"
                ],
                "test_scalar_type_pow": [
                    "self"
                ],
                "test_notimplemented": [
                    "self"
                ]
            },
            "TestMatrixReturn": {
                "test_instance_methods": [
                    "self"
                ]
            },
            "TestIndexing": {
                "test_basic": [
                    "self"
                ]
            },
            "TestNewScalarIndexing": {
                "test_dimesions": [
                    "self"
                ],
                "test_array_from_matrix_list": [
                    "self"
                ],
                "test_array_to_list": [
                    "self"
                ],
                "test_fancy_indexing": [
                    "self"
                ],
                "test_matrix_element": [
                    "self"
                ],
                "test_scalar_indexing": [
                    "self"
                ],
                "test_row_column_indexing": [
                    "self"
                ],
                "test_boolean_indexing": [
                    "self"
                ],
                "test_list_indexing": [
                    "self"
                ]
            },
            "TestPower": {
                "test_returntype": [
                    "self"
                ],
                "test_list": [
                    "self"
                ]
            },
            "TestShape": {
                "test_shape": [
                    "self"
                ],
                "test_numpy_ravel": [
                    "self"
                ],
                "test_member_ravel": [
                    "self"
                ],
                "test_member_flatten": [
                    "self"
                ],
                "test_numpy_ravel_order": [
                    "self"
                ],
                "test_matrix_ravel_order": [
                    "self"
                ],
                "test_array_memory_sharing": [
                    "self"
                ],
                "test_matrix_memory_sharing": [
                    "self"
                ],
                "test_expand_dims_matrix": [
                    "self"
                ]
            }
        },
        "numpy.matrixlib.tests.test_regression": {
            "TestRegression": {
                "test_kron_matrix": [
                    "self"
                ],
                "test_matrix_properties": [
                    "self"
                ],
                "test_matrix_multiply_by_1d_vector": [
                    "self"
                ],
                "test_matrix_std_argmax": [
                    "self"
                ]
            }
        },
        "numpy.matrixlib.tests.test_masked_matrix": {
            "MMatrix": {
                "__new__": [
                    "cls",
                    "data",
                    "mask"
                ],
                "__array_finalize__": [
                    "self",
                    "obj"
                ],
                "_series": [
                    "self"
                ]
            },
            "TestMaskedMatrix": {
                "test_matrix_indexing": [
                    "self"
                ],
                "test_pickling_subbaseclass": [
                    "self"
                ],
                "test_count_mean_with_matrix": [
                    "self"
                ],
                "test_flat": [
                    "self"
                ],
                "test_allany_onmatrices": [
                    "self"
                ],
                "test_compressed": [
                    "self"
                ],
                "test_ravel": [
                    "self"
                ],
                "test_view": [
                    "self"
                ]
            },
            "TestSubclassing": {
                "setup": [
                    "self"
                ],
                "test_maskedarray_subclassing": [
                    "self"
                ],
                "test_masked_unary_operations": [
                    "self"
                ],
                "test_masked_binary_operations": [
                    "self"
                ],
                "test_masked_binary_operations2": [
                    "self"
                ]
            },
            "TestConcatenator": {
                "test_matrix_builder": [
                    "self"
                ],
                "test_matrix": [
                    "self"
                ]
            }
        },
        "numpy.matrixlib.tests": {},
        "numpy.matrixlib.tests.test_multiarray": {
            "TestView": {
                "test_type": [
                    "self"
                ],
                "test_keywords": [
                    "self"
                ]
            }
        },
        "numpy.matrixlib.tests.test_interaction": {
            "test_fancy_indexing": [],
            "test_polynomial_mapdomain": [],
            "test_sort_matrix_none": [],
            "test_partition_matrix_none": [],
            "test_dot_scalar_and_matrix_of_objects": [],
            "test_inner_scalar_and_matrix": [],
            "test_inner_scalar_and_matrix_of_objects": [],
            "test_iter_allocate_output_subtype": [],
            "like_function": [],
            "test_array_astype": [],
            "test_stack": [],
            "test_object_scalar_multiply": [],
            "test_nanfunctions_matrices": [],
            "test_nanfunctions_matrices_general": [],
            "test_average_matrix": [],
            "test_trapz_matrix": [],
            "test_ediff1d_matrix": [],
            "test_apply_along_axis_matrix": [],
            "test_kron_matrix": [],
            "test_array_equal_error_message_matrix": [],
            "test_array_almost_equal_matrix": [],
            "TestConcatenatorMatrix": {
                "test_matrix": [
                    "self"
                ],
                "test_matrix_scalar": [
                    "self"
                ],
                "test_matrix_builder": [
                    "self"
                ]
            }
        },
        "numpy.matrixlib.tests.test_numeric": {
            "test_diagonal": [],
            "TestDot": {
                "test_matscalar": [
                    "self"
                ]
            }
        },
        "numpy.matrixlib.tests.test_matrix_linalg": {
            "MatrixTestCase": {},
            "TestSolveMatrix": {},
            "TestInvMatrix": {},
            "TestEigvalsMatrix": {},
            "TestEigMatrix": {},
            "TestSVDMatrix": {},
            "TestCondMatrix": {},
            "TestPinvMatrix": {},
            "TestDetMatrix": {},
            "TestLstsqMatrix": {},
            "_TestNorm2DMatrix": {},
            "TestNormDoubleMatrix": {},
            "TestNormSingleMatrix": {},
            "TestNormInt64Matrix": {},
            "TestQRMatrix": {}
        },
        "doc.sphinxext.numpydoc.traitsdoc": {
            "looks_like_issubclass": [
                "obj",
                "classname"
            ],
            "get_doc_object": [
                "obj",
                "what",
                "config"
            ],
            "setup": [
                "app"
            ],
            "SphinxTraitsDoc": {
                "__init__": [
                    "self",
                    "cls",
                    "modulename",
                    "func_doc"
                ],
                "_str_summary": [
                    "self"
                ],
                "_str_extended_summary": [
                    "self"
                ],
                "__str__": [
                    "self",
                    "indent",
                    "func_role"
                ]
            }
        },
        "doc.sphinxext.numpydoc": {},
        "doc.sphinxext.numpydoc.linkcode": {
            "doctree_read": [
                "app",
                "doctree"
            ],
            "setup": [
                "app"
            ],
            "LinkcodeError": {}
        },
        "doc.sphinxext.numpydoc.comment_eater": {
            "strip_comment_marker": [
                "text"
            ],
            "get_class_traits": [
                "klass"
            ],
            "Comment": {
                "__init__": [
                    "self",
                    "start_lineno",
                    "end_lineno",
                    "text"
                ],
                "add": [
                    "self",
                    "string",
                    "start",
                    "end",
                    "line"
                ],
                "__repr__": [
                    "self"
                ]
            },
            "NonComment": {
                "__init__": [
                    "self",
                    "start_lineno",
                    "end_lineno"
                ],
                "add": [
                    "self",
                    "string",
                    "start",
                    "end",
                    "line"
                ],
                "__repr__": [
                    "self"
                ]
            },
            "CommentBlocker": {
                "__init__": [
                    "self"
                ],
                "process_file": [
                    "self",
                    "file"
                ],
                "process_token": [
                    "self",
                    "kind",
                    "string",
                    "start",
                    "end",
                    "line"
                ],
                "new_noncomment": [
                    "self",
                    "start_lineno",
                    "end_lineno"
                ],
                "new_comment": [
                    "self",
                    "string",
                    "start",
                    "end",
                    "line"
                ],
                "make_index": [
                    "self"
                ],
                "search_for_comment": [
                    "self",
                    "lineno",
                    "default"
                ]
            }
        },
        "doc.sphinxext.numpydoc.plot_directive": {
            "setup": [
                "app"
            ],
            "plot_directive": [
                "name",
                "arguments",
                "options",
                "content",
                "lineno",
                "content_offset",
                "block_text",
                "state",
                "state_machine"
            ],
            "_option_boolean": [
                "arg"
            ],
            "_option_format": [
                "arg"
            ],
            "_option_align": [
                "arg"
            ],
            "run": [
                "arguments",
                "content",
                "options",
                "state_machine",
                "state",
                "lineno"
            ],
            "contains_doctest": [
                "text"
            ],
            "unescape_doctest": [
                "text"
            ],
            "split_code_at_show": [
                "text"
            ],
            "run_code": [
                "code",
                "code_path",
                "ns"
            ],
            "out_of_date": [
                "original",
                "derived"
            ],
            "makefig": [
                "code",
                "code_path",
                "output_dir",
                "output_base",
                "config"
            ],
            "ImageFile": {
                "__init__": [
                    "self",
                    "basename",
                    "dirname"
                ],
                "filename": [
                    "self",
                    "format"
                ],
                "filenames": [
                    "self"
                ]
            },
            "PlotError": {}
        },
        "doc.sphinxext.numpydoc.phantom_import": {
            "setup": [
                "app"
            ],
            "initialize": [
                "app"
            ],
            "import_phantom_module": [
                "xml_file"
            ]
        },
        "doc.sphinxext.numpydoc.numpydoc": {
            "mangle_docstrings": [
                "app",
                "what",
                "name",
                "obj",
                "options",
                "lines",
                "reference_offset"
            ],
            "mangle_signature": [
                "app",
                "what",
                "name",
                "obj",
                "options",
                "sig",
                "retann"
            ],
            "setup": [
                "app",
                "get_doc_object_"
            ],
            "wrap_mangling_directive": [
                "base_directive",
                "objtype"
            ],
            "ManglingDomainBase": {
                "__init__": [
                    "self"
                ],
                "wrap_mangling_directives": [
                    "self"
                ]
            },
            "NumpyPythonDomain": {},
            "NumpyCDomain": {}
        },
        "doc.sphinxext.numpydoc.compiler_unparse": {
            "unparse": [
                "ast",
                "single_line_functions"
            ],
            "UnparseCompilerAst": {
                "__init__": [
                    "self",
                    "tree",
                    "file",
                    "single_line_functions"
                ],
                "_fill": [
                    "self",
                    "text"
                ],
                "_write": [
                    "self",
                    "text"
                ],
                "_enter": [
                    "self"
                ],
                "_leave": [
                    "self"
                ],
                "_dispatch": [
                    "self",
                    "tree"
                ],
                "_Add": [
                    "self",
                    "t"
                ],
                "_And": [
                    "self",
                    "t"
                ],
                "_AssAttr": [
                    "self",
                    "t"
                ],
                "_Assign": [
                    "self",
                    "t"
                ],
                "_AssName": [
                    "self",
                    "t"
                ],
                "_AssTuple": [
                    "self",
                    "t"
                ],
                "_AugAssign": [
                    "self",
                    "t"
                ],
                "_Bitand": [
                    "self",
                    "t"
                ],
                "_Bitor": [
                    "self",
                    "t"
                ],
                "_CallFunc": [
                    "self",
                    "t"
                ],
                "_Compare": [
                    "self",
                    "t"
                ],
                "_Const": [
                    "self",
                    "t"
                ],
                "_Decorators": [
                    "self",
                    "t"
                ],
                "_Dict": [
                    "self",
                    "t"
                ],
                "_Discard": [
                    "self",
                    "t"
                ],
                "_Div": [
                    "self",
                    "t"
                ],
                "_Ellipsis": [
                    "self",
                    "t"
                ],
                "_From": [
                    "self",
                    "t"
                ],
                "_Function": [
                    "self",
                    "t"
                ],
                "_Getattr": [
                    "self",
                    "t"
                ],
                "_If": [
                    "self",
                    "t"
                ],
                "_IfExp": [
                    "self",
                    "t"
                ],
                "_Import": [
                    "self",
                    "t"
                ],
                "_Keyword": [
                    "self",
                    "t"
                ],
                "_List": [
                    "self",
                    "t"
                ],
                "_Module": [
                    "self",
                    "t"
                ],
                "_Mul": [
                    "self",
                    "t"
                ],
                "_Name": [
                    "self",
                    "t"
                ],
                "_NoneType": [
                    "self",
                    "t"
                ],
                "_Not": [
                    "self",
                    "t"
                ],
                "_Or": [
                    "self",
                    "t"
                ],
                "_Pass": [
                    "self",
                    "t"
                ],
                "_Printnl": [
                    "self",
                    "t"
                ],
                "_Power": [
                    "self",
                    "t"
                ],
                "_Return": [
                    "self",
                    "t"
                ],
                "_Slice": [
                    "self",
                    "t"
                ],
                "_Sliceobj": [
                    "self",
                    "t"
                ],
                "_Stmt": [
                    "self",
                    "tree"
                ],
                "_Sub": [
                    "self",
                    "t"
                ],
                "_Subscript": [
                    "self",
                    "t"
                ],
                "_TryExcept": [
                    "self",
                    "t"
                ],
                "_Tuple": [
                    "self",
                    "t"
                ],
                "_UnaryAdd": [
                    "self",
                    "t"
                ],
                "_UnarySub": [
                    "self",
                    "t"
                ],
                "_With": [
                    "self",
                    "t"
                ],
                "_int": [
                    "self",
                    "t"
                ],
                "__binary_op": [
                    "self",
                    "t",
                    "symbol"
                ],
                "_float": [
                    "self",
                    "t"
                ],
                "_str": [
                    "self",
                    "t"
                ],
                "_tuple": [
                    "self",
                    "t"
                ]
            }
        },
        "doc.sphinxext.numpydoc.docscrape_sphinx": {
            "get_doc_object": [
                "obj",
                "what",
                "doc",
                "config"
            ],
            "SphinxDocString": {
                "__init__": [
                    "self",
                    "docstring",
                    "config"
                ],
                "load_config": [
                    "self",
                    "config"
                ],
                "_str_header": [
                    "self",
                    "name",
                    "symbol"
                ],
                "_str_field_list": [
                    "self",
                    "name"
                ],
                "_str_indent": [
                    "self",
                    "doc",
                    "indent"
                ],
                "_str_signature": [
                    "self"
                ],
                "_str_summary": [
                    "self"
                ],
                "_str_extended_summary": [
                    "self"
                ],
                "_str_returns": [
                    "self"
                ],
                "_str_param_list": [
                    "self",
                    "name"
                ],
                "_obj": [
                    "self"
                ],
                "_str_member_list": [
                    "self",
                    "name"
                ],
                "_str_section": [
                    "self",
                    "name"
                ],
                "_str_see_also": [
                    "self",
                    "func_role"
                ],
                "_str_warnings": [
                    "self"
                ],
                "_str_index": [
                    "self"
                ],
                "_str_references": [
                    "self"
                ],
                "_str_examples": [
                    "self"
                ],
                "__str__": [
                    "self",
                    "indent",
                    "func_role"
                ]
            },
            "SphinxFunctionDoc": {
                "__init__": [
                    "self",
                    "obj",
                    "doc",
                    "config"
                ]
            },
            "SphinxClassDoc": {
                "__init__": [
                    "self",
                    "obj",
                    "doc",
                    "func_doc",
                    "config"
                ]
            },
            "SphinxObjDoc": {
                "__init__": [
                    "self",
                    "obj",
                    "doc",
                    "config"
                ]
            }
        },
        "doc.sphinxext.numpydoc.docscrape": {
            "indent": [
                "str",
                "indent"
            ],
            "dedent_lines": [
                "lines"
            ],
            "header": [
                "text",
                "style"
            ],
            "Reader": {
                "__init__": [
                    "self",
                    "data"
                ],
                "__getitem__": [
                    "self",
                    "n"
                ],
                "reset": [
                    "self"
                ],
                "read": [
                    "self"
                ],
                "seek_next_non_empty_line": [
                    "self"
                ],
                "eof": [
                    "self"
                ],
                "read_to_condition": [
                    "self",
                    "condition_func"
                ],
                "read_to_next_empty_line": [
                    "self"
                ],
                "read_to_next_unindented_line": [
                    "self"
                ],
                "peek": [
                    "self",
                    "n"
                ],
                "is_empty": [
                    "self"
                ]
            },
            "NumpyDocString": {
                "__init__": [
                    "self",
                    "docstring",
                    "config"
                ],
                "__getitem__": [
                    "self",
                    "key"
                ],
                "__setitem__": [
                    "self",
                    "key",
                    "val"
                ],
                "_is_at_section": [
                    "self"
                ],
                "_strip": [
                    "self",
                    "doc"
                ],
                "_read_to_next_section": [
                    "self"
                ],
                "_read_sections": [
                    "self"
                ],
                "_parse_param_list": [
                    "self",
                    "content"
                ],
                "_parse_see_also": [
                    "self",
                    "content"
                ],
                "_parse_index": [
                    "self",
                    "section",
                    "content"
                ],
                "_parse_summary": [
                    "self"
                ],
                "_parse": [
                    "self"
                ],
                "_str_header": [
                    "self",
                    "name",
                    "symbol"
                ],
                "_str_indent": [
                    "self",
                    "doc",
                    "indent"
                ],
                "_str_signature": [
                    "self"
                ],
                "_str_summary": [
                    "self"
                ],
                "_str_extended_summary": [
                    "self"
                ],
                "_str_param_list": [
                    "self",
                    "name"
                ],
                "_str_section": [
                    "self",
                    "name"
                ],
                "_str_see_also": [
                    "self",
                    "func_role"
                ],
                "_str_index": [
                    "self"
                ],
                "__str__": [
                    "self",
                    "func_role"
                ]
            },
            "FunctionDoc": {
                "__init__": [
                    "self",
                    "func",
                    "role",
                    "doc",
                    "config"
                ],
                "get_func": [
                    "self"
                ],
                "__str__": [
                    "self"
                ]
            },
            "ClassDoc": {
                "__init__": [
                    "self",
                    "cls",
                    "doc",
                    "modulename",
                    "func_doc",
                    "config"
                ],
                "methods": [
                    "self"
                ],
                "properties": [
                    "self"
                ]
            }
        }
    }
}