{
    "1.8.2": {
        "numpy.matlib": {
            "empty": [
                "shape",
                "dtype",
                "order"
            ],
            "ones": [
                "shape",
                "dtype",
                "order"
            ],
            "zeros": [
                "shape",
                "dtype",
                "order"
            ],
            "identity": [
                "n",
                "dtype"
            ],
            "eye": [
                "n",
                "M",
                "k",
                "dtype"
            ],
            "rand": [],
            "randn": [],
            "repmat": [
                "a",
                "m",
                "n"
            ]
        },
        "numpy.setup": {
            "configuration": [
                "parent_package",
                "top_path"
            ]
        },
        "numpy.add_newdocs": {},
        "numpy.ctypeslib": {
            "_num_fromflags": [
                "flaglist"
            ],
            "_flags_fromnum": [
                "num"
            ],
            "ndpointer": [
                "dtype",
                "ndim",
                "shape",
                "flags"
            ],
            "_ndptr": {
                "_check_retval_": [
                    "self"
                ],
                "__array_interface__": [
                    "self"
                ],
                "from_param": [
                    "cls",
                    "obj"
                ]
            }
        },
        "numpy._import_tools": {
            "PackageLoader": {
                "__init__": [
                    "self",
                    "verbose",
                    "infunc"
                ],
                "_get_info_files": [
                    "self",
                    "package_dir",
                    "parent_path",
                    "parent_package"
                ],
                "_init_info_modules": [
                    "self",
                    "packages"
                ],
                "_get_sorted_names": [
                    "self"
                ],
                "__call__": [
                    "self"
                ],
                "_execcmd": [
                    "self",
                    "cmdstr"
                ],
                "_obj2repr": [
                    "self",
                    "obj"
                ],
                "log": [
                    "self",
                    "mess"
                ],
                "warn": [
                    "self",
                    "mess"
                ],
                "error": [
                    "self",
                    "mess"
                ],
                "_get_doc_title": [
                    "self",
                    "info_module"
                ],
                "_format_titles": [
                    "self",
                    "titles",
                    "colsep"
                ],
                "get_pkgdocs": [
                    "self"
                ]
            },
            "PackageLoaderDebug": {
                "_execcmd": [
                    "self",
                    "cmdstr"
                ]
            }
        },
        "numpy.dual": {
            "register_func": [
                "name",
                "func"
            ],
            "restore_func": [
                "name"
            ],
            "restore_all": []
        },
        "numpy": {
            "ModuleDeprecationWarning": {}
        },
        "numpy.version": {},
        "numpy.testing.decorators": {
            "slow": [
                "t"
            ],
            "setastest": [
                "tf"
            ],
            "skipif": [
                "skip_condition",
                "msg"
            ],
            "knownfailureif": [
                "fail_condition",
                "msg"
            ],
            "deprecated": [
                "conditional"
            ]
        },
        "numpy.testing.setup": {
            "configuration": [
                "parent_package",
                "top_path"
            ]
        },
        "numpy.testing.numpytest": {
            "importall": [
                "package"
            ]
        },
        "numpy.testing.noseclasses": {
            "NumpyDocTestFinder": {
                "_from_module": [
                    "self",
                    "module",
                    "object"
                ],
                "_find": [
                    "self",
                    "tests",
                    "obj",
                    "name",
                    "module",
                    "source_lines",
                    "globs",
                    "seen"
                ]
            },
            "NumpyOutputChecker": {
                "check_output": [
                    "self",
                    "want",
                    "got",
                    "optionflags"
                ]
            },
            "NumpyDocTestCase": {
                "__init__": [
                    "self",
                    "test",
                    "optionflags",
                    "setUp",
                    "tearDown",
                    "checker",
                    "obj",
                    "result_var"
                ]
            },
            "NumpyDoctest": {
                "options": [
                    "self",
                    "parser",
                    "env"
                ],
                "configure": [
                    "self",
                    "options",
                    "config"
                ],
                "set_test_context": [
                    "self",
                    "test"
                ],
                "loadTestsFromModule": [
                    "self",
                    "module"
                ],
                "afterContext": [
                    "self"
                ],
                "wantFile": [
                    "self",
                    "file"
                ]
            },
            "Unplugger": {
                "__init__": [
                    "self",
                    "to_unplug"
                ],
                "options": [
                    "self",
                    "parser",
                    "env"
                ],
                "configure": [
                    "self",
                    "options",
                    "config"
                ]
            },
            "KnownFailureTest": {},
            "KnownFailure": {
                "options": [
                    "self",
                    "parser",
                    "env"
                ],
                "configure": [
                    "self",
                    "options",
                    "conf"
                ]
            },
            "NumpyTestProgram": {
                "runTests": [
                    "self"
                ]
            }
        },
        "numpy.testing.print_coercion_tables": {
            "print_cancast_table": [
                "ntypes"
            ],
            "print_coercion_table": [
                "ntypes",
                "inputfirstvalue",
                "inputsecondvalue",
                "firstarray",
                "use_promote_types"
            ],
            "GenericObject": {
                "__init__": [
                    "self",
                    "v"
                ],
                "__add__": [
                    "self",
                    "other"
                ],
                "__radd__": [
                    "self",
                    "other"
                ]
            }
        },
        "numpy.testing.nosetester": {
            "get_package_name": [
                "filepath"
            ],
            "import_nose": [],
            "run_module_suite": [
                "file_to_run"
            ],
            "NoseTester": {
                "__init__": [
                    "self",
                    "package",
                    "raise_warnings"
                ],
                "_test_argv": [
                    "self",
                    "label",
                    "verbose",
                    "extra_argv"
                ],
                "_show_system_info": [
                    "self"
                ],
                "_get_custom_doctester": [
                    "self"
                ],
                "prepare_test_args": [
                    "self",
                    "label",
                    "verbose",
                    "extra_argv",
                    "doctests",
                    "coverage"
                ],
                "test": [
                    "self",
                    "label",
                    "verbose",
                    "extra_argv",
                    "doctests",
                    "coverage",
                    "raise_warnings"
                ],
                "bench": [
                    "self",
                    "label",
                    "verbose",
                    "extra_argv"
                ]
            }
        },
        "numpy.testing.utils": {
            "assert_": [
                "val",
                "msg"
            ],
            "gisnan": [
                "x"
            ],
            "gisfinite": [
                "x"
            ],
            "gisinf": [
                "x"
            ],
            "rand": [],
            "build_err_msg": [
                "arrays",
                "err_msg",
                "header",
                "verbose",
                "names"
            ],
            "assert_equal": [
                "actual",
                "desired",
                "err_msg",
                "verbose"
            ],
            "print_assert_equal": [
                "test_string",
                "actual",
                "desired"
            ],
            "assert_almost_equal": [
                "actual",
                "desired",
                "decimal",
                "err_msg",
                "verbose"
            ],
            "assert_approx_equal": [
                "actual",
                "desired",
                "significant",
                "err_msg",
                "verbose"
            ],
            "assert_array_compare": [
                "comparison",
                "x",
                "y",
                "err_msg",
                "verbose",
                "header"
            ],
            "assert_array_equal": [
                "x",
                "y",
                "err_msg",
                "verbose"
            ],
            "assert_array_almost_equal": [
                "x",
                "y",
                "decimal",
                "err_msg",
                "verbose"
            ],
            "assert_array_less": [
                "x",
                "y",
                "err_msg",
                "verbose"
            ],
            "runstring": [
                "astr",
                "dict"
            ],
            "assert_string_equal": [
                "actual",
                "desired"
            ],
            "rundocs": [
                "filename",
                "raise_on_error"
            ],
            "raises": [],
            "assert_raises": [],
            "decorate_methods": [
                "cls",
                "decorator",
                "testmatch"
            ],
            "measure": [
                "code_str",
                "times",
                "label"
            ],
            "_assert_valid_refcount": [
                "op"
            ],
            "assert_allclose": [
                "actual",
                "desired",
                "rtol",
                "atol",
                "err_msg",
                "verbose"
            ],
            "assert_array_almost_equal_nulp": [
                "x",
                "y",
                "nulp"
            ],
            "assert_array_max_ulp": [
                "a",
                "b",
                "maxulp",
                "dtype"
            ],
            "nulp_diff": [
                "x",
                "y",
                "dtype"
            ],
            "_integer_repr": [
                "x",
                "vdt",
                "comp"
            ],
            "integer_repr": [
                "x"
            ],
            "assert_warns": [
                "warning_class",
                "func"
            ],
            "assert_no_warnings": [
                "func"
            ],
            "_gen_alignment_data": [
                "dtype",
                "type",
                "max_size"
            ],
            "WarningMessage": {
                "__init__": [
                    "self",
                    "message",
                    "category",
                    "filename",
                    "lineno",
                    "file",
                    "line"
                ],
                "__str__": [
                    "self"
                ]
            },
            "WarningManager": {
                "__init__": [
                    "self",
                    "record",
                    "module"
                ],
                "__enter__": [
                    "self"
                ],
                "__exit__": [
                    "self"
                ]
            },
            "IgnoreException": {}
        },
        "numpy.testing": {},
        "numpy.lib.type_check": {
            "mintypecode": [
                "typechars",
                "typeset",
                "default"
            ],
            "asfarray": [
                "a",
                "dtype"
            ],
            "real": [
                "val"
            ],
            "imag": [
                "val"
            ],
            "iscomplex": [
                "x"
            ],
            "isreal": [
                "x"
            ],
            "iscomplexobj": [
                "x"
            ],
            "isrealobj": [
                "x"
            ],
            "_getmaxmin": [
                "t"
            ],
            "nan_to_num": [
                "x"
            ],
            "real_if_close": [
                "a",
                "tol"
            ],
            "asscalar": [
                "a"
            ],
            "typename": [
                "char"
            ],
            "common_type": []
        },
        "numpy.lib.setup": {
            "configuration": [
                "parent_package",
                "top_path"
            ]
        },
        "numpy.lib.info": {},
        "numpy.lib.format": {
            "magic": [
                "major",
                "minor"
            ],
            "read_magic": [
                "fp"
            ],
            "dtype_to_descr": [
                "dtype"
            ],
            "header_data_from_array_1_0": [
                "array"
            ],
            "write_array_header_1_0": [
                "fp",
                "d"
            ],
            "read_array_header_1_0": [
                "fp"
            ],
            "write_array": [
                "fp",
                "array",
                "version"
            ],
            "read_array": [
                "fp"
            ],
            "open_memmap": [
                "filename",
                "mode",
                "dtype",
                "shape",
                "fortran_order",
                "version"
            ],
            "_read_bytes": [
                "fp",
                "size",
                "error_template"
            ]
        },
        "numpy.lib.stride_tricks": {
            "as_strided": [
                "x",
                "shape",
                "strides"
            ],
            "broadcast_arrays": [],
            "DummyArray": {
                "__init__": [
                    "self",
                    "interface",
                    "base"
                ]
            }
        },
        "numpy.lib.ufunclike": {
            "fix": [
                "x",
                "y"
            ],
            "isposinf": [
                "x",
                "y"
            ],
            "isneginf": [
                "x",
                "y"
            ]
        },
        "numpy.lib.arrayterator": {
            "Arrayterator": {
                "__init__": [
                    "self",
                    "var",
                    "buf_size"
                ],
                "__getattr__": [
                    "self",
                    "attr"
                ],
                "__getitem__": [
                    "self",
                    "index"
                ],
                "__array__": [
                    "self"
                ],
                "flat": [
                    "self"
                ],
                "shape": [
                    "self"
                ],
                "__iter__": [
                    "self"
                ]
            }
        },
        "numpy.lib.recfunctions": {
            "recursive_fill_fields": [
                "input",
                "output"
            ],
            "get_names": [
                "adtype"
            ],
            "get_names_flat": [
                "adtype"
            ],
            "flatten_descr": [
                "ndtype"
            ],
            "zip_descr": [
                "seqarrays",
                "flatten"
            ],
            "get_fieldstructure": [
                "adtype",
                "lastname",
                "parents"
            ],
            "_izip_fields_flat": [
                "iterable"
            ],
            "_izip_fields": [
                "iterable"
            ],
            "izip_records": [
                "seqarrays",
                "fill_value",
                "flatten"
            ],
            "_fix_output": [
                "output",
                "usemask",
                "asrecarray"
            ],
            "_fix_defaults": [
                "output",
                "defaults"
            ],
            "merge_arrays": [
                "seqarrays",
                "fill_value",
                "flatten",
                "usemask",
                "asrecarray"
            ],
            "drop_fields": [
                "base",
                "drop_names",
                "usemask",
                "asrecarray"
            ],
            "rec_drop_fields": [
                "base",
                "drop_names"
            ],
            "rename_fields": [
                "base",
                "namemapper"
            ],
            "append_fields": [
                "base",
                "names",
                "data",
                "dtypes",
                "fill_value",
                "usemask",
                "asrecarray"
            ],
            "rec_append_fields": [
                "base",
                "names",
                "data",
                "dtypes"
            ],
            "stack_arrays": [
                "arrays",
                "defaults",
                "usemask",
                "asrecarray",
                "autoconvert"
            ],
            "find_duplicates": [
                "a",
                "key",
                "ignoremask",
                "return_index"
            ],
            "join_by": [
                "key",
                "r1",
                "r2",
                "jointype",
                "r1postfix",
                "r2postfix",
                "defaults",
                "usemask",
                "asrecarray"
            ],
            "rec_join": [
                "key",
                "r1",
                "r2",
                "jointype",
                "r1postfix",
                "r2postfix",
                "defaults"
            ]
        },
        "numpy.lib._datasource": {
            "open": [
                "path",
                "mode",
                "destpath"
            ],
            "_FileOpeners": {
                "__init__": [
                    "self"
                ],
                "_load": [
                    "self"
                ],
                "keys": [
                    "self"
                ],
                "__getitem__": [
                    "self",
                    "key"
                ]
            },
            "DataSource": {
                "__init__": [
                    "self",
                    "destpath"
                ],
                "__del__": [
                    "self"
                ],
                "_iszip": [
                    "self",
                    "filename"
                ],
                "_iswritemode": [
                    "self",
                    "mode"
                ],
                "_splitzipext": [
                    "self",
                    "filename"
                ],
                "_possible_names": [
                    "self",
                    "filename"
                ],
                "_isurl": [
                    "self",
                    "path"
                ],
                "_cache": [
                    "self",
                    "path"
                ],
                "_findfile": [
                    "self",
                    "path"
                ],
                "abspath": [
                    "self",
                    "path"
                ],
                "_sanitize_relative_path": [
                    "self",
                    "path"
                ],
                "exists": [
                    "self",
                    "path"
                ],
                "open": [
                    "self",
                    "path",
                    "mode"
                ]
            },
            "Repository": {
                "__init__": [
                    "self",
                    "baseurl",
                    "destpath"
                ],
                "__del__": [
                    "self"
                ],
                "_fullpath": [
                    "self",
                    "path"
                ],
                "_findfile": [
                    "self",
                    "path"
                ],
                "abspath": [
                    "self",
                    "path"
                ],
                "exists": [
                    "self",
                    "path"
                ],
                "open": [
                    "self",
                    "path",
                    "mode"
                ],
                "listdir": [
                    "self"
                ]
            }
        },
        "numpy.lib.twodim_base": {
            "fliplr": [
                "m"
            ],
            "flipud": [
                "m"
            ],
            "rot90": [
                "m",
                "k"
            ],
            "eye": [
                "N",
                "M",
                "k",
                "dtype"
            ],
            "diag": [
                "v",
                "k"
            ],
            "diagflat": [
                "v",
                "k"
            ],
            "tri": [
                "N",
                "M",
                "k",
                "dtype"
            ],
            "tril": [
                "m",
                "k"
            ],
            "triu": [
                "m",
                "k"
            ],
            "vander": [
                "x",
                "N"
            ],
            "histogram2d": [
                "x",
                "y",
                "bins",
                "range",
                "normed",
                "weights"
            ],
            "mask_indices": [
                "n",
                "mask_func",
                "k"
            ],
            "tril_indices": [
                "n",
                "k"
            ],
            "tril_indices_from": [
                "arr",
                "k"
            ],
            "triu_indices": [
                "n",
                "k"
            ],
            "triu_indices_from": [
                "arr",
                "k"
            ]
        },
        "numpy.lib.nanfunctions": {
            "_replace_nan": [
                "a",
                "val"
            ],
            "_copyto": [
                "a",
                "val",
                "mask"
            ],
            "_divide_by_count": [
                "a",
                "b",
                "out"
            ],
            "nanmin": [
                "a",
                "axis",
                "out",
                "keepdims"
            ],
            "nanmax": [
                "a",
                "axis",
                "out",
                "keepdims"
            ],
            "nanargmin": [
                "a",
                "axis"
            ],
            "nanargmax": [
                "a",
                "axis"
            ],
            "nansum": [
                "a",
                "axis",
                "dtype",
                "out",
                "keepdims"
            ],
            "nanmean": [
                "a",
                "axis",
                "dtype",
                "out",
                "keepdims"
            ],
            "nanvar": [
                "a",
                "axis",
                "dtype",
                "out",
                "ddof",
                "keepdims"
            ],
            "nanstd": [
                "a",
                "axis",
                "dtype",
                "out",
                "ddof",
                "keepdims"
            ]
        },
        "numpy.lib.scimath": {
            "_tocomplex": [
                "arr"
            ],
            "_fix_real_lt_zero": [
                "x"
            ],
            "_fix_int_lt_zero": [
                "x"
            ],
            "_fix_real_abs_gt_1": [
                "x"
            ],
            "sqrt": [
                "x"
            ],
            "log": [
                "x"
            ],
            "log10": [
                "x"
            ],
            "logn": [
                "n",
                "x"
            ],
            "log2": [
                "x"
            ],
            "power": [
                "x",
                "p"
            ],
            "arccos": [
                "x"
            ],
            "arcsin": [
                "x"
            ],
            "arctanh": [
                "x"
            ]
        },
        "numpy.lib.shape_base": {
            "apply_along_axis": [
                "func1d",
                "axis",
                "arr"
            ],
            "apply_over_axes": [
                "func",
                "a",
                "axes"
            ],
            "expand_dims": [
                "a",
                "axis"
            ],
            "column_stack": [
                "tup"
            ],
            "dstack": [
                "tup"
            ],
            "_replace_zero_by_x_arrays": [
                "sub_arys"
            ],
            "array_split": [
                "ary",
                "indices_or_sections",
                "axis"
            ],
            "split": [
                "ary",
                "indices_or_sections",
                "axis"
            ],
            "hsplit": [
                "ary",
                "indices_or_sections"
            ],
            "vsplit": [
                "ary",
                "indices_or_sections"
            ],
            "dsplit": [
                "ary",
                "indices_or_sections"
            ],
            "get_array_prepare": [],
            "get_array_wrap": [],
            "kron": [
                "a",
                "b"
            ],
            "tile": [
                "A",
                "reps"
            ]
        },
        "numpy.lib.polynomial": {
            "poly": [
                "seq_of_zeros"
            ],
            "roots": [
                "p"
            ],
            "polyint": [
                "p",
                "m",
                "k"
            ],
            "polyder": [
                "p",
                "m"
            ],
            "polyfit": [
                "x",
                "y",
                "deg",
                "rcond",
                "full",
                "w",
                "cov"
            ],
            "polyval": [
                "p",
                "x"
            ],
            "polyadd": [
                "a1",
                "a2"
            ],
            "polysub": [
                "a1",
                "a2"
            ],
            "polymul": [
                "a1",
                "a2"
            ],
            "polydiv": [
                "u",
                "v"
            ],
            "_raise_power": [
                "astr",
                "wrap"
            ],
            "RankWarning": {},
            "poly1d": {
                "__init__": [
                    "self",
                    "c_or_r",
                    "r",
                    "variable"
                ],
                "__array__": [
                    "self",
                    "t"
                ],
                "__repr__": [
                    "self"
                ],
                "__len__": [
                    "self"
                ],
                "__str__": [
                    "self"
                ],
                "__call__": [
                    "self",
                    "val"
                ],
                "__neg__": [
                    "self"
                ],
                "__pos__": [
                    "self"
                ],
                "__mul__": [
                    "self",
                    "other"
                ],
                "__rmul__": [
                    "self",
                    "other"
                ],
                "__add__": [
                    "self",
                    "other"
                ],
                "__radd__": [
                    "self",
                    "other"
                ],
                "__pow__": [
                    "self",
                    "val"
                ],
                "__sub__": [
                    "self",
                    "other"
                ],
                "__rsub__": [
                    "self",
                    "other"
                ],
                "__div__": [
                    "self",
                    "other"
                ],
                "__rdiv__": [
                    "self",
                    "other"
                ],
                "__eq__": [
                    "self",
                    "other"
                ],
                "__ne__": [
                    "self",
                    "other"
                ],
                "__setattr__": [
                    "self",
                    "key",
                    "val"
                ],
                "__getattr__": [
                    "self",
                    "key"
                ],
                "__getitem__": [
                    "self",
                    "val"
                ],
                "__setitem__": [
                    "self",
                    "key",
                    "val"
                ],
                "__iter__": [
                    "self"
                ],
                "integ": [
                    "self",
                    "m",
                    "k"
                ],
                "deriv": [
                    "self",
                    "m"
                ]
            }
        },
        "numpy.lib.index_tricks": {
            "ix_": [],
            "fill_diagonal": [
                "a",
                "val",
                "wrap"
            ],
            "diag_indices": [
                "n",
                "ndim"
            ],
            "diag_indices_from": [
                "arr"
            ],
            "nd_grid": {
                "__init__": [
                    "self",
                    "sparse"
                ],
                "__getitem__": [
                    "self",
                    "key"
                ],
                "__getslice__": [
                    "self",
                    "i",
                    "j"
                ],
                "__len__": [
                    "self"
                ]
            },
            "AxisConcatenator": {
                "_retval": [
                    "self",
                    "res"
                ],
                "__init__": [
                    "self",
                    "axis",
                    "matrix",
                    "ndmin",
                    "trans1d"
                ],
                "__getitem__": [
                    "self",
                    "key"
                ],
                "__getslice__": [
                    "self",
                    "i",
                    "j"
                ],
                "__len__": [
                    "self"
                ]
            },
            "RClass": {
                "__init__": [
                    "self"
                ]
            },
            "CClass": {
                "__init__": [
                    "self"
                ]
            },
            "ndenumerate": {
                "__init__": [
                    "self",
                    "arr"
                ],
                "__next__": [
                    "self"
                ],
                "__iter__": [
                    "self"
                ]
            },
            "ndindex": {
                "__init__": [
                    "self"
                ],
                "__iter__": [
                    "self"
                ],
                "ndincr": [
                    "self"
                ],
                "__next__": [
                    "self"
                ]
            },
            "IndexExpression": {
                "__init__": [
                    "self",
                    "maketuple"
                ],
                "__getitem__": [
                    "self",
                    "item"
                ]
            }
        },
        "numpy.lib.function_base": {
            "iterable": [
                "y"
            ],
            "histogram": [
                "a",
                "bins",
                "range",
                "normed",
                "weights",
                "density"
            ],
            "histogramdd": [
                "sample",
                "bins",
                "range",
                "normed",
                "weights"
            ],
            "average": [
                "a",
                "axis",
                "weights",
                "returned"
            ],
            "asarray_chkfinite": [
                "a",
                "dtype",
                "order"
            ],
            "piecewise": [
                "x",
                "condlist",
                "funclist"
            ],
            "select": [
                "condlist",
                "choicelist",
                "default"
            ],
            "copy": [
                "a",
                "order"
            ],
            "gradient": [
                "f"
            ],
            "diff": [
                "a",
                "n",
                "axis"
            ],
            "interp": [
                "x",
                "xp",
                "fp",
                "left",
                "right"
            ],
            "angle": [
                "z",
                "deg"
            ],
            "unwrap": [
                "p",
                "discont",
                "axis"
            ],
            "sort_complex": [
                "a"
            ],
            "trim_zeros": [
                "filt",
                "trim"
            ],
            "unique": [
                "x"
            ],
            "extract": [
                "condition",
                "arr"
            ],
            "place": [
                "arr",
                "mask",
                "vals"
            ],
            "disp": [
                "mesg",
                "device",
                "linefeed"
            ],
            "cov": [
                "m",
                "y",
                "rowvar",
                "bias",
                "ddof"
            ],
            "corrcoef": [
                "x",
                "y",
                "rowvar",
                "bias",
                "ddof"
            ],
            "blackman": [
                "M"
            ],
            "bartlett": [
                "M"
            ],
            "hanning": [
                "M"
            ],
            "hamming": [
                "M"
            ],
            "_chbevl": [
                "x",
                "vals"
            ],
            "_i0_1": [
                "x"
            ],
            "_i0_2": [
                "x"
            ],
            "i0": [
                "x"
            ],
            "kaiser": [
                "M",
                "beta"
            ],
            "sinc": [
                "x"
            ],
            "msort": [
                "a"
            ],
            "median": [
                "a",
                "axis",
                "out",
                "overwrite_input"
            ],
            "percentile": [
                "a",
                "q",
                "axis",
                "out",
                "overwrite_input"
            ],
            "_compute_qth_percentile": [
                "sorted",
                "q",
                "axis",
                "out"
            ],
            "trapz": [
                "y",
                "x",
                "dx",
                "axis"
            ],
            "add_newdoc": [
                "place",
                "obj",
                "doc"
            ],
            "meshgrid": [],
            "delete": [
                "arr",
                "obj",
                "axis"
            ],
            "insert": [
                "arr",
                "obj",
                "values",
                "axis"
            ],
            "append": [
                "arr",
                "values",
                "axis"
            ],
            "vectorize": {
                "__init__": [
                    "self",
                    "pyfunc",
                    "otypes",
                    "doc",
                    "excluded",
                    "cache"
                ],
                "__call__": [
                    "self"
                ],
                "_get_ufunc_and_otypes": [
                    "self",
                    "func",
                    "args"
                ],
                "_vectorize_call": [
                    "self",
                    "func",
                    "args"
                ]
            }
        },
        "numpy.lib.arraypad": {
            "_arange_ndarray": [
                "arr",
                "shape",
                "axis",
                "reverse"
            ],
            "_round_ifneeded": [
                "arr",
                "dtype"
            ],
            "_prepend_const": [
                "arr",
                "pad_amt",
                "val",
                "axis"
            ],
            "_append_const": [
                "arr",
                "pad_amt",
                "val",
                "axis"
            ],
            "_prepend_edge": [
                "arr",
                "pad_amt",
                "axis"
            ],
            "_append_edge": [
                "arr",
                "pad_amt",
                "axis"
            ],
            "_prepend_ramp": [
                "arr",
                "pad_amt",
                "end",
                "axis"
            ],
            "_append_ramp": [
                "arr",
                "pad_amt",
                "end",
                "axis"
            ],
            "_prepend_max": [
                "arr",
                "pad_amt",
                "num",
                "axis"
            ],
            "_append_max": [
                "arr",
                "pad_amt",
                "num",
                "axis"
            ],
            "_prepend_mean": [
                "arr",
                "pad_amt",
                "num",
                "axis"
            ],
            "_append_mean": [
                "arr",
                "pad_amt",
                "num",
                "axis"
            ],
            "_prepend_med": [
                "arr",
                "pad_amt",
                "num",
                "axis"
            ],
            "_append_med": [
                "arr",
                "pad_amt",
                "num",
                "axis"
            ],
            "_prepend_min": [
                "arr",
                "pad_amt",
                "num",
                "axis"
            ],
            "_append_min": [
                "arr",
                "pad_amt",
                "num",
                "axis"
            ],
            "_pad_ref": [
                "arr",
                "pad_amt",
                "method",
                "axis"
            ],
            "_pad_sym": [
                "arr",
                "pad_amt",
                "method",
                "axis"
            ],
            "_pad_wrap": [
                "arr",
                "pad_amt",
                "axis"
            ],
            "_normalize_shape": [
                "narray",
                "shape"
            ],
            "_validate_lengths": [
                "narray",
                "number_elements"
            ],
            "pad": [
                "array",
                "pad_width",
                "mode"
            ]
        },
        "numpy.lib.financial": {
            "_convert_when": [
                "when"
            ],
            "fv": [
                "rate",
                "nper",
                "pmt",
                "pv",
                "when"
            ],
            "pmt": [
                "rate",
                "nper",
                "pv",
                "fv",
                "when"
            ],
            "nper": [
                "rate",
                "pmt",
                "pv",
                "fv",
                "when"
            ],
            "ipmt": [
                "rate",
                "per",
                "nper",
                "pv",
                "fv",
                "when"
            ],
            "_rbl": [
                "rate",
                "per",
                "pmt",
                "pv",
                "when"
            ],
            "ppmt": [
                "rate",
                "per",
                "nper",
                "pv",
                "fv",
                "when"
            ],
            "pv": [
                "rate",
                "nper",
                "pmt",
                "fv",
                "when"
            ],
            "_g_div_gp": [
                "r",
                "n",
                "p",
                "x",
                "y",
                "w"
            ],
            "rate": [
                "nper",
                "pmt",
                "pv",
                "fv",
                "when",
                "guess",
                "tol",
                "maxiter"
            ],
            "irr": [
                "values"
            ],
            "npv": [
                "rate",
                "values"
            ],
            "mirr": [
                "values",
                "finance_rate",
                "reinvest_rate"
            ]
        },
        "numpy.lib.arraysetops": {
            "ediff1d": [
                "ary",
                "to_end",
                "to_begin"
            ],
            "unique": [
                "ar",
                "return_index",
                "return_inverse"
            ],
            "intersect1d": [
                "ar1",
                "ar2",
                "assume_unique"
            ],
            "setxor1d": [
                "ar1",
                "ar2",
                "assume_unique"
            ],
            "in1d": [
                "ar1",
                "ar2",
                "assume_unique",
                "invert"
            ],
            "union1d": [
                "ar1",
                "ar2"
            ],
            "setdiff1d": [
                "ar1",
                "ar2",
                "assume_unique"
            ]
        },
        "numpy.lib.user_array": {
            "container": {
                "__init__": [
                    "self",
                    "data",
                    "dtype",
                    "copy"
                ],
                "__repr__": [
                    "self"
                ],
                "__array__": [
                    "self",
                    "t"
                ],
                "__len__": [
                    "self"
                ],
                "__getitem__": [
                    "self",
                    "index"
                ],
                "__getslice__": [
                    "self",
                    "i",
                    "j"
                ],
                "__setitem__": [
                    "self",
                    "index",
                    "value"
                ],
                "__setslice__": [
                    "self",
                    "i",
                    "j",
                    "value"
                ],
                "__abs__": [
                    "self"
                ],
                "__neg__": [
                    "self"
                ],
                "__add__": [
                    "self",
                    "other"
                ],
                "__iadd__": [
                    "self",
                    "other"
                ],
                "__sub__": [
                    "self",
                    "other"
                ],
                "__rsub__": [
                    "self",
                    "other"
                ],
                "__isub__": [
                    "self",
                    "other"
                ],
                "__mul__": [
                    "self",
                    "other"
                ],
                "__imul__": [
                    "self",
                    "other"
                ],
                "__div__": [
                    "self",
                    "other"
                ],
                "__rdiv__": [
                    "self",
                    "other"
                ],
                "__idiv__": [
                    "self",
                    "other"
                ],
                "__mod__": [
                    "self",
                    "other"
                ],
                "__rmod__": [
                    "self",
                    "other"
                ],
                "__imod__": [
                    "self",
                    "other"
                ],
                "__divmod__": [
                    "self",
                    "other"
                ],
                "__rdivmod__": [
                    "self",
                    "other"
                ],
                "__pow__": [
                    "self",
                    "other"
                ],
                "__rpow__": [
                    "self",
                    "other"
                ],
                "__ipow__": [
                    "self",
                    "other"
                ],
                "__lshift__": [
                    "self",
                    "other"
                ],
                "__rshift__": [
                    "self",
                    "other"
                ],
                "__rlshift__": [
                    "self",
                    "other"
                ],
                "__rrshift__": [
                    "self",
                    "other"
                ],
                "__ilshift__": [
                    "self",
                    "other"
                ],
                "__irshift__": [
                    "self",
                    "other"
                ],
                "__and__": [
                    "self",
                    "other"
                ],
                "__rand__": [
                    "self",
                    "other"
                ],
                "__iand__": [
                    "self",
                    "other"
                ],
                "__xor__": [
                    "self",
                    "other"
                ],
                "__rxor__": [
                    "self",
                    "other"
                ],
                "__ixor__": [
                    "self",
                    "other"
                ],
                "__or__": [
                    "self",
                    "other"
                ],
                "__ror__": [
                    "self",
                    "other"
                ],
                "__ior__": [
                    "self",
                    "other"
                ],
                "__pos__": [
                    "self"
                ],
                "__invert__": [
                    "self"
                ],
                "_scalarfunc": [
                    "self",
                    "func"
                ],
                "__complex__": [
                    "self"
                ],
                "__float__": [
                    "self"
                ],
                "__int__": [
                    "self"
                ],
                "__long__": [
                    "self"
                ],
                "__hex__": [
                    "self"
                ],
                "__oct__": [
                    "self"
                ],
                "__lt__": [
                    "self",
                    "other"
                ],
                "__le__": [
                    "self",
                    "other"
                ],
                "__eq__": [
                    "self",
                    "other"
                ],
                "__ne__": [
                    "self",
                    "other"
                ],
                "__gt__": [
                    "self",
                    "other"
                ],
                "__ge__": [
                    "self",
                    "other"
                ],
                "copy": [
                    "self"
                ],
                "tostring": [
                    "self"
                ],
                "byteswap": [
                    "self"
                ],
                "astype": [
                    "self",
                    "typecode"
                ],
                "_rc": [
                    "self",
                    "a"
                ],
                "__array_wrap__": [
                    "self"
                ],
                "__setattr__": [
                    "self",
                    "attr",
                    "value"
                ],
                "__getattr__": [
                    "self",
                    "attr"
                ]
            }
        },
        "numpy.lib.utils": {
            "get_include": [],
            "get_numarray_include": [
                "type"
            ],
            "_set_function_name": [
                "func",
                "name"
            ],
            "deprecate": [],
            "byte_bounds": [
                "a"
            ],
            "who": [
                "vardict"
            ],
            "_split_line": [
                "name",
                "arguments",
                "width"
            ],
            "_makenamedict": [
                "module"
            ],
            "info": [
                "object",
                "maxwidth",
                "output",
                "toplevel"
            ],
            "source": [
                "object",
                "output"
            ],
            "lookfor": [
                "what",
                "module",
                "import_modules",
                "regenerate",
                "output"
            ],
            "_lookfor_generate_cache": [
                "module",
                "import_modules",
                "regenerate"
            ],
            "_getmembers": [
                "item"
            ],
            "safe_eval": [
                "source"
            ],
            "_Deprecate": {
                "__init__": [
                    "self",
                    "old_name",
                    "new_name",
                    "message"
                ],
                "__call__": [
                    "self",
                    "func"
                ]
            },
            "SafeEval": {}
        },
        "numpy.lib._iotools": {
            "_is_string_like": [
                "obj"
            ],
            "_is_bytes_like": [
                "obj"
            ],
            "_to_filehandle": [
                "fname",
                "flag",
                "return_opened"
            ],
            "has_nested_fields": [
                "ndtype"
            ],
            "flatten_dtype": [
                "ndtype",
                "flatten_base"
            ],
            "str2bool": [
                "value"
            ],
            "easy_dtype": [
                "ndtype",
                "names",
                "defaultfmt"
            ],
            "LineSplitter": {
                "autostrip": [
                    "self",
                    "method"
                ],
                "__init__": [
                    "self",
                    "delimiter",
                    "comments",
                    "autostrip"
                ],
                "_delimited_splitter": [
                    "self",
                    "line"
                ],
                "_fixedwidth_splitter": [
                    "self",
                    "line"
                ],
                "_variablewidth_splitter": [
                    "self",
                    "line"
                ],
                "__call__": [
                    "self",
                    "line"
                ]
            },
            "NameValidator": {
                "__init__": [
                    "self",
                    "excludelist",
                    "deletechars",
                    "case_sensitive",
                    "replace_space"
                ],
                "validate": [
                    "self",
                    "names",
                    "defaultfmt",
                    "nbfields"
                ],
                "__call__": [
                    "self",
                    "names",
                    "defaultfmt",
                    "nbfields"
                ]
            },
            "ConverterError": {},
            "ConverterLockError": {},
            "ConversionWarning": {},
            "StringConverter": {
                "_getdtype": [
                    "cls",
                    "val"
                ],
                "_getsubdtype": [
                    "cls",
                    "val"
                ],
                "_dtypeortype": [
                    "cls",
                    "dtype"
                ],
                "upgrade_mapper": [
                    "cls",
                    "func",
                    "default"
                ],
                "__init__": [
                    "self",
                    "dtype_or_func",
                    "default",
                    "missing_values",
                    "locked"
                ],
                "_loose_call": [
                    "self",
                    "value"
                ],
                "_strict_call": [
                    "self",
                    "value"
                ],
                "__call__": [
                    "self",
                    "value"
                ],
                "upgrade": [
                    "self",
                    "value"
                ],
                "iterupgrade": [
                    "self",
                    "value"
                ],
                "update": [
                    "self",
                    "func",
                    "default",
                    "testing_value",
                    "missing_values",
                    "locked"
                ]
            }
        },
        "numpy.lib": {},
        "numpy.lib.npyio": {
            "seek_gzip_factory": [
                "f"
            ],
            "zipfile_factory": [],
            "load": [
                "file",
                "mmap_mode"
            ],
            "save": [
                "file",
                "arr"
            ],
            "savez": [
                "file"
            ],
            "savez_compressed": [
                "file"
            ],
            "_savez": [
                "file",
                "args",
                "kwds",
                "compress"
            ],
            "_getconv": [
                "dtype"
            ],
            "loadtxt": [
                "fname",
                "dtype",
                "comments",
                "delimiter",
                "converters",
                "skiprows",
                "usecols",
                "unpack",
                "ndmin"
            ],
            "savetxt": [
                "fname",
                "X",
                "fmt",
                "delimiter",
                "newline",
                "header",
                "footer",
                "comments"
            ],
            "fromregex": [
                "file",
                "regexp",
                "dtype"
            ],
            "genfromtxt": [
                "fname",
                "dtype",
                "comments",
                "delimiter",
                "skiprows",
                "skip_header",
                "skip_footer",
                "converters",
                "missing",
                "missing_values",
                "filling_values",
                "usecols",
                "names",
                "excludelist",
                "deletechars",
                "replace_space",
                "autostrip",
                "case_sensitive",
                "defaultfmt",
                "unpack",
                "usemask",
                "loose",
                "invalid_raise"
            ],
            "ndfromtxt": [
                "fname"
            ],
            "mafromtxt": [
                "fname"
            ],
            "recfromtxt": [
                "fname"
            ],
            "recfromcsv": [
                "fname"
            ],
            "BagObj": {
                "__init__": [
                    "self",
                    "obj"
                ],
                "__getattribute__": [
                    "self",
                    "key"
                ]
            },
            "NpzFile": {
                "__init__": [
                    "self",
                    "fid",
                    "own_fid"
                ],
                "__enter__": [
                    "self"
                ],
                "__exit__": [
                    "self",
                    "exc_type",
                    "exc_value",
                    "traceback"
                ],
                "close": [
                    "self"
                ],
                "__del__": [
                    "self"
                ],
                "__getitem__": [
                    "self",
                    "key"
                ],
                "__iter__": [
                    "self"
                ],
                "items": [
                    "self"
                ],
                "iteritems": [
                    "self"
                ],
                "keys": [
                    "self"
                ],
                "iterkeys": [
                    "self"
                ],
                "__contains__": [
                    "self",
                    "key"
                ]
            }
        },
        "numpy.compat.setup": {
            "configuration": [
                "parent_package",
                "top_path"
            ]
        },
        "numpy.compat._inspect": {
            "ismethod": [
                "object"
            ],
            "isfunction": [
                "object"
            ],
            "iscode": [
                "object"
            ],
            "getargs": [
                "co"
            ],
            "getargspec": [
                "func"
            ],
            "getargvalues": [
                "frame"
            ],
            "joinseq": [
                "seq"
            ],
            "strseq": [
                "object",
                "convert",
                "join"
            ],
            "formatargspec": [
                "args",
                "varargs",
                "varkw",
                "defaults",
                "formatarg",
                "formatvarargs",
                "formatvarkw",
                "formatvalue",
                "join"
            ],
            "formatargvalues": [
                "args",
                "varargs",
                "varkw",
                "locals",
                "formatarg",
                "formatvarargs",
                "formatvarkw",
                "formatvalue",
                "join"
            ]
        },
        "numpy.compat.py3k": {
            "getexception": [],
            "asbytes_nested": [
                "x"
            ],
            "asunicode_nested": [
                "x"
            ]
        },
        "numpy.compat": {},
        "numpy.doc.creation": {},
        "numpy.doc.methods_vs_functions": {},
        "numpy.doc.misc": {},
        "numpy.doc.basics": {},
        "numpy.doc.internals": {},
        "numpy.doc.broadcasting": {},
        "numpy.doc.performance": {},
        "numpy.doc.constants": {
            "add_newdoc": [
                "module",
                "name",
                "doc"
            ]
        },
        "numpy.doc.byteswapping": {},
        "numpy.doc.structured_arrays": {},
        "numpy.doc.ufuncs": {},
        "numpy.doc.io": {},
        "numpy.doc.indexing": {},
        "numpy.doc.glossary": {},
        "numpy.doc.jargon": {},
        "numpy.doc.howtofind": {},
        "numpy.doc.subclassing": {},
        "numpy.doc": {},
        "numpy.distutils.setup": {
            "configuration": [
                "parent_package",
                "top_path"
            ]
        },
        "numpy.distutils.info": {},
        "numpy.distutils.intelccompiler": {
            "IntelCCompiler": {
                "__init__": [
                    "self",
                    "verbose",
                    "dry_run",
                    "force"
                ]
            },
            "IntelItaniumCCompiler": {},
            "IntelEM64TCCompiler": {
                "__init__": [
                    "self",
                    "verbose",
                    "dry_run",
                    "force"
                ]
            }
        },
        "numpy.distutils.line_endings": {
            "dos2unix": [
                "file"
            ],
            "dos2unix_one_dir": [
                "modified_files",
                "dir_name",
                "file_names"
            ],
            "dos2unix_dir": [
                "dir_name"
            ],
            "unix2dos": [
                "file"
            ],
            "unix2dos_one_dir": [
                "modified_files",
                "dir_name",
                "file_names"
            ],
            "unix2dos_dir": [
                "dir_name"
            ]
        },
        "numpy.distutils.cpuinfo": {
            "getoutput": [
                "cmd",
                "successful_status",
                "stacklevel"
            ],
            "command_info": [
                "successful_status",
                "stacklevel"
            ],
            "command_by_line": [
                "cmd",
                "successful_status",
                "stacklevel"
            ],
            "key_value_from_command": [
                "cmd",
                "sep",
                "successful_status",
                "stacklevel"
            ],
            "CPUInfoBase": {
                "_try_call": [
                    "self",
                    "func"
                ],
                "__getattr__": [
                    "self",
                    "name"
                ],
                "_getNCPUs": [
                    "self"
                ],
                "__get_nbits": [
                    "self"
                ],
                "_is_32bit": [
                    "self"
                ],
                "_is_64bit": [
                    "self"
                ]
            },
            "LinuxCPUInfo": {
                "__init__": [
                    "self"
                ],
                "_not_impl": [
                    "self"
                ],
                "_is_AMD": [
                    "self"
                ],
                "_is_AthlonK6_2": [
                    "self"
                ],
                "_is_AthlonK6_3": [
                    "self"
                ],
                "_is_AthlonK6": [
                    "self"
                ],
                "_is_AthlonK7": [
                    "self"
                ],
                "_is_AthlonMP": [
                    "self"
                ],
                "_is_AMD64": [
                    "self"
                ],
                "_is_Athlon64": [
                    "self"
                ],
                "_is_AthlonHX": [
                    "self"
                ],
                "_is_Opteron": [
                    "self"
                ],
                "_is_Hammer": [
                    "self"
                ],
                "_is_Alpha": [
                    "self"
                ],
                "_is_EV4": [
                    "self"
                ],
                "_is_EV5": [
                    "self"
                ],
                "_is_EV56": [
                    "self"
                ],
                "_is_PCA56": [
                    "self"
                ],
                "_is_Intel": [
                    "self"
                ],
                "_is_i486": [
                    "self"
                ],
                "_is_i586": [
                    "self"
                ],
                "_is_i686": [
                    "self"
                ],
                "_is_Celeron": [
                    "self"
                ],
                "_is_Pentium": [
                    "self"
                ],
                "_is_PentiumII": [
                    "self"
                ],
                "_is_PentiumPro": [
                    "self"
                ],
                "_is_PentiumMMX": [
                    "self"
                ],
                "_is_PentiumIII": [
                    "self"
                ],
                "_is_PentiumIV": [
                    "self"
                ],
                "_is_PentiumM": [
                    "self"
                ],
                "_is_Prescott": [
                    "self"
                ],
                "_is_Nocona": [
                    "self"
                ],
                "_is_Core2": [
                    "self"
                ],
                "_is_Itanium": [
                    "self"
                ],
                "_is_XEON": [
                    "self"
                ],
                "_is_singleCPU": [
                    "self"
                ],
                "_getNCPUs": [
                    "self"
                ],
                "_has_fdiv_bug": [
                    "self"
                ],
                "_has_f00f_bug": [
                    "self"
                ],
                "_has_mmx": [
                    "self"
                ],
                "_has_sse": [
                    "self"
                ],
                "_has_sse2": [
                    "self"
                ],
                "_has_sse3": [
                    "self"
                ],
                "_has_ssse3": [
                    "self"
                ],
                "_has_3dnow": [
                    "self"
                ],
                "_has_3dnowext": [
                    "self"
                ]
            },
            "IRIXCPUInfo": {
                "__init__": [
                    "self"
                ],
                "_not_impl": [
                    "self"
                ],
                "_is_singleCPU": [
                    "self"
                ],
                "_getNCPUs": [
                    "self"
                ],
                "__cputype": [
                    "self",
                    "n"
                ],
                "_is_r2000": [
                    "self"
                ],
                "_is_r3000": [
                    "self"
                ],
                "_is_r3900": [
                    "self"
                ],
                "_is_r4000": [
                    "self"
                ],
                "_is_r4100": [
                    "self"
                ],
                "_is_r4300": [
                    "self"
                ],
                "_is_r4400": [
                    "self"
                ],
                "_is_r4600": [
                    "self"
                ],
                "_is_r4650": [
                    "self"
                ],
                "_is_r5000": [
                    "self"
                ],
                "_is_r6000": [
                    "self"
                ],
                "_is_r8000": [
                    "self"
                ],
                "_is_r10000": [
                    "self"
                ],
                "_is_r12000": [
                    "self"
                ],
                "_is_rorion": [
                    "self"
                ],
                "get_ip": [
                    "self"
                ],
                "__machine": [
                    "self",
                    "n"
                ],
                "_is_IP19": [
                    "self"
                ],
                "_is_IP20": [
                    "self"
                ],
                "_is_IP21": [
                    "self"
                ],
                "_is_IP22": [
                    "self"
                ],
                "_is_IP22_4k": [
                    "self"
                ],
                "_is_IP22_5k": [
                    "self"
                ],
                "_is_IP24": [
                    "self"
                ],
                "_is_IP25": [
                    "self"
                ],
                "_is_IP26": [
                    "self"
                ],
                "_is_IP27": [
                    "self"
                ],
                "_is_IP28": [
                    "self"
                ],
                "_is_IP30": [
                    "self"
                ],
                "_is_IP32": [
                    "self"
                ],
                "_is_IP32_5k": [
                    "self"
                ],
                "_is_IP32_10k": [
                    "self"
                ]
            },
            "DarwinCPUInfo": {
                "__init__": [
                    "self"
                ],
                "_not_impl": [
                    "self"
                ],
                "_getNCPUs": [
                    "self"
                ],
                "_is_Power_Macintosh": [
                    "self"
                ],
                "_is_i386": [
                    "self"
                ],
                "_is_ppc": [
                    "self"
                ],
                "__machine": [
                    "self",
                    "n"
                ],
                "_is_ppc601": [
                    "self"
                ],
                "_is_ppc602": [
                    "self"
                ],
                "_is_ppc603": [
                    "self"
                ],
                "_is_ppc603e": [
                    "self"
                ],
                "_is_ppc604": [
                    "self"
                ],
                "_is_ppc604e": [
                    "self"
                ],
                "_is_ppc620": [
                    "self"
                ],
                "_is_ppc630": [
                    "self"
                ],
                "_is_ppc740": [
                    "self"
                ],
                "_is_ppc7400": [
                    "self"
                ],
                "_is_ppc7450": [
                    "self"
                ],
                "_is_ppc750": [
                    "self"
                ],
                "_is_ppc403": [
                    "self"
                ],
                "_is_ppc505": [
                    "self"
                ],
                "_is_ppc801": [
                    "self"
                ],
                "_is_ppc821": [
                    "self"
                ],
                "_is_ppc823": [
                    "self"
                ],
                "_is_ppc860": [
                    "self"
                ]
            },
            "SunOSCPUInfo": {
                "__init__": [
                    "self"
                ],
                "_not_impl": [
                    "self"
                ],
                "_is_i386": [
                    "self"
                ],
                "_is_sparc": [
                    "self"
                ],
                "_is_sparcv9": [
                    "self"
                ],
                "_getNCPUs": [
                    "self"
                ],
                "_is_sun4": [
                    "self"
                ],
                "_is_SUNW": [
                    "self"
                ],
                "_is_sparcstation5": [
                    "self"
                ],
                "_is_ultra1": [
                    "self"
                ],
                "_is_ultra250": [
                    "self"
                ],
                "_is_ultra2": [
                    "self"
                ],
                "_is_ultra30": [
                    "self"
                ],
                "_is_ultra4": [
                    "self"
                ],
                "_is_ultra5_10": [
                    "self"
                ],
                "_is_ultra5": [
                    "self"
                ],
                "_is_ultra60": [
                    "self"
                ],
                "_is_ultra80": [
                    "self"
                ],
                "_is_ultraenterprice": [
                    "self"
                ],
                "_is_ultraenterprice10k": [
                    "self"
                ],
                "_is_sunfire": [
                    "self"
                ],
                "_is_ultra": [
                    "self"
                ],
                "_is_cpusparcv7": [
                    "self"
                ],
                "_is_cpusparcv8": [
                    "self"
                ],
                "_is_cpusparcv9": [
                    "self"
                ]
            },
            "Win32CPUInfo": {
                "__init__": [
                    "self"
                ],
                "_not_impl": [
                    "self"
                ],
                "_is_AMD": [
                    "self"
                ],
                "_is_Am486": [
                    "self"
                ],
                "_is_Am5x86": [
                    "self"
                ],
                "_is_AMDK5": [
                    "self"
                ],
                "_is_AMDK6": [
                    "self"
                ],
                "_is_AMDK6_2": [
                    "self"
                ],
                "_is_AMDK6_3": [
                    "self"
                ],
                "_is_AMDK7": [
                    "self"
                ],
                "_is_AMD64": [
                    "self"
                ],
                "_is_Intel": [
                    "self"
                ],
                "_is_i386": [
                    "self"
                ],
                "_is_i486": [
                    "self"
                ],
                "_is_i586": [
                    "self"
                ],
                "_is_i686": [
                    "self"
                ],
                "_is_Pentium": [
                    "self"
                ],
                "_is_PentiumMMX": [
                    "self"
                ],
                "_is_PentiumPro": [
                    "self"
                ],
                "_is_PentiumII": [
                    "self"
                ],
                "_is_PentiumIII": [
                    "self"
                ],
                "_is_PentiumIV": [
                    "self"
                ],
                "_is_PentiumM": [
                    "self"
                ],
                "_is_Core2": [
                    "self"
                ],
                "_is_singleCPU": [
                    "self"
                ],
                "_getNCPUs": [
                    "self"
                ],
                "_has_mmx": [
                    "self"
                ],
                "_has_sse": [
                    "self"
                ],
                "_has_sse2": [
                    "self"
                ],
                "_has_3dnow": [
                    "self"
                ],
                "_has_3dnowext": [
                    "self"
                ]
            }
        },
        "numpy.distutils.environment": {
            "EnvironmentConfig": {
                "__init__": [
                    "self",
                    "distutils_section"
                ],
                "dump_variable": [
                    "self",
                    "name"
                ],
                "dump_variables": [
                    "self"
                ],
                "__getattr__": [
                    "self",
                    "name"
                ],
                "get": [
                    "self",
                    "name",
                    "default"
                ],
                "_get_var": [
                    "self",
                    "name",
                    "conf_desc"
                ],
                "clone": [
                    "self",
                    "hook_handler"
                ],
                "use_distribution": [
                    "self",
                    "dist"
                ]
            }
        },
        "numpy.distutils.core": {
            "_dict_append": [
                "d"
            ],
            "_command_line_ok": [
                "_cache"
            ],
            "get_distribution": [
                "always"
            ],
            "setup": [],
            "_check_append_library": [
                "libraries",
                "item"
            ],
            "_check_append_ext_library": [
                "libraries",
                "lib_name",
                "build_info"
            ]
        },
        "numpy.distutils.system_info": {
            "libpaths": [
                "paths",
                "bits"
            ],
            "get_standard_file": [
                "fname"
            ],
            "get_info": [
                "name",
                "notfound_action"
            ],
            "get_atlas_version": [],
            "combine_paths": [],
            "dict_append": [
                "d"
            ],
            "parseCmdLine": [
                "argv"
            ],
            "show_all": [
                "argv"
            ],
            "NotFoundError": {},
            "AtlasNotFoundError": {},
            "LapackNotFoundError": {},
            "LapackSrcNotFoundError": {},
            "BlasNotFoundError": {},
            "BlasSrcNotFoundError": {},
            "FFTWNotFoundError": {},
            "DJBFFTNotFoundError": {},
            "NumericNotFoundError": {},
            "X11NotFoundError": {},
            "UmfpackNotFoundError": {},
            "system_info": {
                "__init__": [
                    "self",
                    "default_lib_dirs",
                    "default_include_dirs",
                    "verbosity"
                ],
                "parse_config_files": [
                    "self"
                ],
                "calc_libraries_info": [
                    "self"
                ],
                "set_info": [
                    "self"
                ],
                "has_info": [
                    "self"
                ],
                "get_info": [
                    "self",
                    "notfound_action"
                ],
                "get_paths": [
                    "self",
                    "section",
                    "key"
                ],
                "get_lib_dirs": [
                    "self",
                    "key"
                ],
                "get_include_dirs": [
                    "self",
                    "key"
                ],
                "get_src_dirs": [
                    "self",
                    "key"
                ],
                "get_libs": [
                    "self",
                    "key",
                    "default"
                ],
                "get_libraries": [
                    "self",
                    "key"
                ],
                "library_extensions": [
                    "self"
                ],
                "check_libs": [
                    "self",
                    "lib_dirs",
                    "libs",
                    "opt_libs"
                ],
                "check_libs2": [
                    "self",
                    "lib_dirs",
                    "libs",
                    "opt_libs"
                ],
                "_lib_list": [
                    "self",
                    "lib_dir",
                    "libs",
                    "exts"
                ],
                "_check_libs": [
                    "self",
                    "lib_dirs",
                    "libs",
                    "opt_libs",
                    "exts"
                ],
                "combine_paths": [
                    "self"
                ]
            },
            "fft_opt_info": {
                "calc_info": [
                    "self"
                ]
            },
            "fftw_info": {
                "calc_ver_info": [
                    "self",
                    "ver_param"
                ],
                "calc_info": [
                    "self"
                ]
            },
            "fftw2_info": {},
            "fftw3_info": {},
            "dfftw_info": {},
            "sfftw_info": {},
            "fftw_threads_info": {},
            "dfftw_threads_info": {},
            "sfftw_threads_info": {},
            "djbfft_info": {
                "get_paths": [
                    "self",
                    "section",
                    "key"
                ],
                "calc_info": [
                    "self"
                ]
            },
            "mkl_info": {
                "get_mkl_rootdir": [
                    "self"
                ],
                "__init__": [
                    "self"
                ],
                "calc_info": [
                    "self"
                ]
            },
            "lapack_mkl_info": {
                "calc_info": [
                    "self"
                ]
            },
            "blas_mkl_info": {},
            "atlas_info": {
                "get_paths": [
                    "self",
                    "section",
                    "key"
                ],
                "calc_info": [
                    "self"
                ]
            },
            "atlas_blas_info": {
                "calc_info": [
                    "self"
                ]
            },
            "atlas_threads_info": {},
            "atlas_blas_threads_info": {},
            "lapack_atlas_info": {},
            "lapack_atlas_threads_info": {},
            "lapack_info": {
                "calc_info": [
                    "self"
                ]
            },
            "lapack_src_info": {
                "get_paths": [
                    "self",
                    "section",
                    "key"
                ],
                "calc_info": [
                    "self"
                ]
            },
            "lapack_opt_info": {
                "calc_info": [
                    "self"
                ]
            },
            "blas_opt_info": {
                "calc_info": [
                    "self"
                ]
            },
            "blas_info": {
                "calc_info": [
                    "self"
                ]
            },
            "openblas_info": {
                "calc_info": [
                    "self"
                ]
            },
            "blas_src_info": {
                "get_paths": [
                    "self",
                    "section",
                    "key"
                ],
                "calc_info": [
                    "self"
                ]
            },
            "x11_info": {
                "__init__": [
                    "self"
                ],
                "calc_info": [
                    "self"
                ]
            },
            "_numpy_info": {
                "__init__": [
                    "self"
                ],
                "calc_info": [
                    "self"
                ]
            },
            "numarray_info": {},
            "Numeric_info": {},
            "numpy_info": {},
            "numerix_info": {
                "calc_info": [
                    "self"
                ]
            },
            "f2py_info": {
                "calc_info": [
                    "self"
                ]
            },
            "boost_python_info": {
                "get_paths": [
                    "self",
                    "section",
                    "key"
                ],
                "calc_info": [
                    "self"
                ]
            },
            "agg2_info": {
                "get_paths": [
                    "self",
                    "section",
                    "key"
                ],
                "calc_info": [
                    "self"
                ]
            },
            "_pkg_config_info": {
                "get_config_exe": [
                    "self"
                ],
                "get_config_output": [
                    "self",
                    "config_exe",
                    "option"
                ],
                "calc_info": [
                    "self"
                ]
            },
            "wx_info": {},
            "gdk_pixbuf_xlib_2_info": {},
            "gdk_pixbuf_2_info": {},
            "gdk_x11_2_info": {},
            "gdk_2_info": {},
            "gdk_info": {},
            "gtkp_x11_2_info": {},
            "gtkp_2_info": {},
            "xft_info": {},
            "freetype2_info": {},
            "amd_info": {
                "calc_info": [
                    "self"
                ]
            },
            "umfpack_info": {
                "calc_info": [
                    "self"
                ]
            }
        },
        "numpy.distutils.compat": {
            "get_exception": []
        },
        "numpy.distutils.numpy_distribution": {
            "NumpyDistribution": {
                "__init__": [
                    "self",
                    "attrs"
                ],
                "has_scons_scripts": [
                    "self"
                ]
            }
        },
        "numpy.distutils.exec_command": {
            "temp_file_name": [],
            "get_pythonexe": [],
            "splitcmdline": [
                "line"
            ],
            "find_executable": [
                "exe",
                "path",
                "_cache"
            ],
            "_preserve_environment": [
                "names"
            ],
            "_update_environment": [],
            "_supports_fileno": [
                "stream"
            ],
            "exec_command": [
                "command",
                "execute_in",
                "use_shell",
                "use_tee",
                "_with_python"
            ],
            "_exec_command_posix": [
                "command",
                "use_shell",
                "use_tee"
            ],
            "_exec_command_python": [
                "command",
                "exec_command_dir"
            ],
            "quote_arg": [
                "arg"
            ],
            "_exec_command": [
                "command",
                "use_shell",
                "use_tee"
            ],
            "test_nt": [],
            "test_posix": [],
            "test_execute_in": [],
            "test_svn": [],
            "test_cl": []
        },
        "numpy.distutils.npy_pkg_config": {
            "parse_flags": [
                "line"
            ],
            "_escape_backslash": [
                "val"
            ],
            "parse_meta": [
                "config"
            ],
            "parse_variables": [
                "config"
            ],
            "parse_sections": [
                "config"
            ],
            "pkg_to_filename": [
                "pkg_name"
            ],
            "parse_config": [
                "filename",
                "dirs"
            ],
            "_read_config_imp": [
                "filenames",
                "dirs"
            ],
            "read_config": [
                "pkgname",
                "dirs"
            ],
            "FormatError": {
                "__init__": [
                    "self",
                    "msg"
                ],
                "__str__": [
                    "self"
                ]
            },
            "PkgNotFound": {
                "__init__": [
                    "self",
                    "msg"
                ],
                "__str__": [
                    "self"
                ]
            },
            "LibraryInfo": {
                "__init__": [
                    "self",
                    "name",
                    "description",
                    "version",
                    "sections",
                    "vars",
                    "requires"
                ],
                "sections": [
                    "self"
                ],
                "cflags": [
                    "self",
                    "section"
                ],
                "libs": [
                    "self",
                    "section"
                ],
                "__str__": [
                    "self"
                ]
            },
            "VariableSet": {
                "__init__": [
                    "self",
                    "d"
                ],
                "_init_parse": [
                    "self"
                ],
                "_init_parse_var": [
                    "self",
                    "name",
                    "value"
                ],
                "interpolate": [
                    "self",
                    "value"
                ],
                "variables": [
                    "self"
                ],
                "__getitem__": [
                    "self",
                    "name"
                ],
                "__setitem__": [
                    "self",
                    "name",
                    "value"
                ]
            }
        },
        "numpy.distutils.extension": {
            "Extension": {
                "__init__": [
                    "self",
                    "name",
                    "sources",
                    "include_dirs",
                    "define_macros",
                    "undef_macros",
                    "library_dirs",
                    "libraries",
                    "runtime_library_dirs",
                    "extra_objects",
                    "extra_compile_args",
                    "extra_link_args",
                    "export_symbols",
                    "swig_opts",
                    "depends",
                    "language",
                    "f2py_options",
                    "module_dirs",
                    "extra_f77_compile_args",
                    "extra_f90_compile_args"
                ],
                "has_cxx_sources": [
                    "self"
                ],
                "has_f2py_sources": [
                    "self"
                ]
            }
        },
        "numpy.distutils.conv_template": {
            "parse_structure": [
                "astr",
                "level"
            ],
            "paren_repl": [
                "obj"
            ],
            "parse_values": [
                "astr"
            ],
            "parse_loop_header": [
                "loophead"
            ],
            "parse_string": [
                "astr",
                "env",
                "level",
                "line"
            ],
            "process_str": [
                "astr"
            ],
            "resolve_includes": [
                "source"
            ],
            "process_file": [
                "source"
            ],
            "unique_key": [
                "adict"
            ]
        },
        "numpy.distutils.__version__": {},
        "numpy.distutils.unixccompiler": {
            "UnixCCompiler__compile": [
                "self",
                "obj",
                "src",
                "ext",
                "cc_args",
                "extra_postargs",
                "pp_opts"
            ],
            "UnixCCompiler_create_static_lib": [
                "self",
                "objects",
                "output_libname",
                "output_dir",
                "debug",
                "target_lang"
            ]
        },
        "numpy.distutils.pathccompiler": {
            "PathScaleCCompiler": {
                "__init__": [
                    "self",
                    "verbose",
                    "dry_run",
                    "force"
                ]
            }
        },
        "numpy.distutils.log": {
            "_fix_args": [
                "args",
                "flag"
            ],
            "set_threshold": [
                "level",
                "force"
            ],
            "set_verbosity": [
                "v",
                "force"
            ],
            "Log": {
                "_log": [
                    "self",
                    "level",
                    "msg",
                    "args"
                ],
                "good": [
                    "self",
                    "msg"
                ]
            }
        },
        "numpy.distutils.mingw32ccompiler": {
            "find_python_dll": [],
            "dump_table": [
                "dll"
            ],
            "generate_def": [
                "dll",
                "dfile"
            ],
            "find_dll": [
                "dll_name"
            ],
            "build_msvcr_library": [
                "debug"
            ],
            "build_import_library": [],
            "_build_import_library_amd64": [],
            "_build_import_library_x86": [],
            "msvc_manifest_xml": [
                "maj",
                "min"
            ],
            "manifest_rc": [
                "name",
                "type"
            ],
            "check_embedded_msvcr_match_linked": [
                "msver"
            ],
            "configtest_name": [
                "config"
            ],
            "manifest_name": [
                "config"
            ],
            "rc_name": [
                "config"
            ],
            "generate_manifest": [
                "config"
            ],
            "Mingw32CCompiler": {
                "__init__": [
                    "self",
                    "verbose",
                    "dry_run",
                    "force"
                ],
                "link": [
                    "self",
                    "target_desc",
                    "objects",
                    "output_filename",
                    "output_dir",
                    "libraries",
                    "library_dirs",
                    "runtime_library_dirs",
                    "export_symbols",
                    "debug",
                    "extra_preargs",
                    "extra_postargs",
                    "build_temp",
                    "target_lang"
                ],
                "object_filenames": [
                    "self",
                    "source_filenames",
                    "strip_dir",
                    "output_dir"
                ]
            }
        },
        "numpy.distutils.lib2def": {
            "parse_cmd": [],
            "getnm": [
                "nm_cmd"
            ],
            "parse_nm": [
                "nm_output"
            ],
            "output_def": [
                "dlist",
                "flist",
                "header",
                "file"
            ]
        },
        "numpy.distutils.ccompiler": {
            "replace_method": [
                "klass",
                "method_name",
                "func"
            ],
            "CCompiler_spawn": [
                "self",
                "cmd",
                "display"
            ],
            "CCompiler_object_filenames": [
                "self",
                "source_filenames",
                "strip_dir",
                "output_dir"
            ],
            "CCompiler_compile": [
                "self",
                "sources",
                "output_dir",
                "macros",
                "include_dirs",
                "debug",
                "extra_preargs",
                "extra_postargs",
                "depends"
            ],
            "CCompiler_customize_cmd": [
                "self",
                "cmd",
                "ignore"
            ],
            "_compiler_to_string": [
                "compiler"
            ],
            "CCompiler_show_customization": [
                "self"
            ],
            "CCompiler_customize": [
                "self",
                "dist",
                "need_cxx"
            ],
            "simple_version_match": [
                "pat",
                "ignore",
                "start"
            ],
            "CCompiler_get_version": [
                "self",
                "force",
                "ok_status"
            ],
            "CCompiler_cxx_compiler": [
                "self"
            ],
            "new_compiler": [
                "plat",
                "compiler",
                "verbose",
                "dry_run",
                "force"
            ],
            "gen_lib_options": [
                "compiler",
                "library_dirs",
                "runtime_library_dirs",
                "libraries"
            ],
            "gen_preprocess_options": [
                "macros",
                "include_dirs"
            ],
            "split_quoted": [
                "s"
            ]
        },
        "numpy.distutils.from_template": {
            "parse_structure": [
                "astr"
            ],
            "find_repl_patterns": [
                "astr"
            ],
            "conv": [
                "astr"
            ],
            "unique_key": [
                "adict"
            ],
            "expand_sub": [
                "substr",
                "names"
            ],
            "process_str": [
                "allstr"
            ],
            "resolve_includes": [
                "source"
            ],
            "process_file": [
                "source"
            ]
        },
        "numpy.distutils.misc_util": {
            "quote_args": [
                "args"
            ],
            "allpath": [
                "name"
            ],
            "rel_path": [
                "path",
                "parent_path"
            ],
            "get_path_from_frame": [
                "frame",
                "parent_path"
            ],
            "njoin": [],
            "get_mathlibs": [
                "path"
            ],
            "minrelpath": [
                "path"
            ],
            "_fix_paths": [
                "paths",
                "local_path",
                "include_non_existing"
            ],
            "gpaths": [
                "paths",
                "local_path",
                "include_non_existing"
            ],
            "clean_up_temporary_directory": [],
            "make_temp_file": [
                "suffix",
                "prefix",
                "text"
            ],
            "terminal_has_colors": [],
            "default_text": [
                "s"
            ],
            "red_text": [
                "s"
            ],
            "green_text": [
                "s"
            ],
            "yellow_text": [
                "s"
            ],
            "cyan_text": [
                "s"
            ],
            "blue_text": [
                "s"
            ],
            "cyg2win32": [
                "path"
            ],
            "mingw32": [],
            "msvc_runtime_library": [],
            "_get_f90_modules": [
                "source"
            ],
            "is_string": [
                "s"
            ],
            "all_strings": [
                "lst"
            ],
            "is_sequence": [
                "seq"
            ],
            "is_glob_pattern": [
                "s"
            ],
            "as_list": [
                "seq"
            ],
            "get_language": [
                "sources"
            ],
            "has_f_sources": [
                "sources"
            ],
            "has_cxx_sources": [
                "sources"
            ],
            "filter_sources": [
                "sources"
            ],
            "_get_headers": [
                "directory_list"
            ],
            "_get_directories": [
                "list_of_sources"
            ],
            "get_dependencies": [
                "sources"
            ],
            "is_local_src_dir": [
                "directory"
            ],
            "general_source_files": [
                "top_path"
            ],
            "general_source_directories_files": [
                "top_path"
            ],
            "get_ext_source_files": [
                "ext"
            ],
            "get_script_files": [
                "scripts"
            ],
            "get_lib_source_files": [
                "lib"
            ],
            "get_shared_lib_extension": [
                "is_python_ext"
            ],
            "get_data_files": [
                "data"
            ],
            "dot_join": [],
            "get_frame": [
                "level"
            ],
            "get_cmd": [
                "cmdname",
                "_cache"
            ],
            "get_numpy_include_dirs": [],
            "get_npy_pkg_dir": [],
            "get_pkg_info": [
                "pkgname",
                "dirs"
            ],
            "get_info": [
                "pkgname",
                "dirs"
            ],
            "is_bootstrapping": [],
            "default_config_dict": [
                "name",
                "parent_name",
                "local_path"
            ],
            "dict_append": [
                "d"
            ],
            "appendpath": [
                "prefix",
                "path"
            ],
            "generate_config_py": [
                "target"
            ],
            "msvc_version": [
                "compiler"
            ],
            "InstallableLib": {
                "__init__": [
                    "self",
                    "name",
                    "build_info",
                    "target_dir"
                ]
            },
            "Configuration": {
                "__init__": [
                    "self",
                    "package_name",
                    "parent_name",
                    "top_path",
                    "package_path",
                    "caller_level",
                    "setup_name"
                ],
                "todict": [
                    "self"
                ],
                "info": [
                    "self",
                    "message"
                ],
                "warn": [
                    "self",
                    "message"
                ],
                "set_options": [
                    "self"
                ],
                "get_distribution": [
                    "self"
                ],
                "_wildcard_get_subpackage": [
                    "self",
                    "subpackage_name",
                    "parent_name",
                    "caller_level"
                ],
                "_get_configuration_from_setup_py": [
                    "self",
                    "setup_py",
                    "subpackage_name",
                    "subpackage_path",
                    "parent_name",
                    "caller_level"
                ],
                "get_subpackage": [
                    "self",
                    "subpackage_name",
                    "subpackage_path",
                    "parent_name",
                    "caller_level"
                ],
                "add_subpackage": [
                    "self",
                    "subpackage_name",
                    "subpackage_path",
                    "standalone"
                ],
                "add_data_dir": [
                    "self",
                    "data_path"
                ],
                "_optimize_data_files": [
                    "self"
                ],
                "add_data_files": [
                    "self"
                ],
                "add_define_macros": [
                    "self",
                    "macros"
                ],
                "add_include_dirs": [
                    "self"
                ],
                "add_numarray_include_dirs": [
                    "self"
                ],
                "add_headers": [
                    "self"
                ],
                "paths": [
                    "self"
                ],
                "_fix_paths_dict": [
                    "self",
                    "kw"
                ],
                "add_extension": [
                    "self",
                    "name",
                    "sources"
                ],
                "add_library": [
                    "self",
                    "name",
                    "sources"
                ],
                "_add_library": [
                    "self",
                    "name",
                    "sources",
                    "install_dir",
                    "build_info"
                ],
                "add_installed_library": [
                    "self",
                    "name",
                    "sources",
                    "install_dir",
                    "build_info"
                ],
                "add_npy_pkg_config": [
                    "self",
                    "template",
                    "install_dir",
                    "subst_dict"
                ],
                "add_scripts": [
                    "self"
                ],
                "dict_append": [
                    "self"
                ],
                "__str__": [
                    "self"
                ],
                "get_config_cmd": [
                    "self"
                ],
                "get_build_temp_dir": [
                    "self"
                ],
                "have_f77c": [
                    "self"
                ],
                "have_f90c": [
                    "self"
                ],
                "append_to": [
                    "self",
                    "extlib"
                ],
                "_get_svn_revision": [
                    "self",
                    "path"
                ],
                "_get_hg_revision": [
                    "self",
                    "path"
                ],
                "get_version": [
                    "self",
                    "version_file",
                    "version_variable"
                ],
                "make_svn_version_py": [
                    "self",
                    "delete"
                ],
                "make_hg_version_py": [
                    "self",
                    "delete"
                ],
                "make_config_py": [
                    "self",
                    "name"
                ],
                "get_info": [
                    "self"
                ]
            }
        },
        "numpy.distutils": {},
        "numpy.distutils.fcompiler.pathf95": {
            "PathScaleFCompiler": {
                "get_flags_opt": [
                    "self"
                ],
                "get_flags_debug": [
                    "self"
                ]
            }
        },
        "numpy.distutils.fcompiler.ibm": {
            "IBMFCompiler": {
                "get_version": [
                    "self"
                ],
                "get_flags": [
                    "self"
                ],
                "get_flags_debug": [
                    "self"
                ],
                "get_flags_linker_so": [
                    "self"
                ],
                "get_flags_opt": [
                    "self"
                ]
            }
        },
        "numpy.distutils.fcompiler.intel": {
            "intel_version_match": [
                "type"
            ],
            "BaseIntelFCompiler": {
                "update_executables": [
                    "self"
                ]
            },
            "IntelFCompiler": {
                "get_flags_free": [
                    "self"
                ],
                "get_flags": [
                    "self"
                ],
                "get_flags_opt": [
                    "self"
                ],
                "get_flags_arch": [
                    "self"
                ],
                "get_flags_linker_so": [
                    "self"
                ]
            },
            "IntelItaniumFCompiler": {},
            "IntelEM64TFCompiler": {
                "get_flags": [
                    "self"
                ],
                "get_flags_opt": [
                    "self"
                ],
                "get_flags_arch": [
                    "self"
                ]
            },
            "IntelVisualFCompiler": {
                "update_executables": [
                    "self"
                ],
                "get_flags": [
                    "self"
                ],
                "get_flags_free": [
                    "self"
                ],
                "get_flags_debug": [
                    "self"
                ],
                "get_flags_opt": [
                    "self"
                ],
                "get_flags_arch": [
                    "self"
                ]
            },
            "IntelItaniumVisualFCompiler": {},
            "IntelEM64VisualFCompiler": {
                "get_flags_arch": [
                    "self"
                ]
            }
        },
        "numpy.distutils.fcompiler.lahey": {
            "LaheyFCompiler": {
                "get_flags_opt": [
                    "self"
                ],
                "get_flags_debug": [
                    "self"
                ],
                "get_library_dirs": [
                    "self"
                ],
                "get_libraries": [
                    "self"
                ]
            }
        },
        "numpy.distutils.fcompiler.vast": {
            "VastFCompiler": {
                "find_executables": [
                    "self"
                ],
                "get_version_cmd": [
                    "self"
                ],
                "get_flags_arch": [
                    "self"
                ]
            }
        },
        "numpy.distutils.fcompiler.gnu": {
            "is_win64": [],
            "_can_target": [
                "cmd",
                "arch"
            ],
            "GnuFCompiler": {
                "gnu_version_match": [
                    "self",
                    "version_string"
                ],
                "version_match": [
                    "self",
                    "version_string"
                ],
                "get_flags_linker_so": [
                    "self"
                ],
                "get_libgcc_dir": [
                    "self"
                ],
                "get_library_dirs": [
                    "self"
                ],
                "get_libraries": [
                    "self"
                ],
                "get_flags_debug": [
                    "self"
                ],
                "get_flags_opt": [
                    "self"
                ],
                "_c_arch_flags": [
                    "self"
                ],
                "get_flags_arch": [
                    "self"
                ]
            },
            "Gnu95FCompiler": {
                "version_match": [
                    "self",
                    "version_string"
                ],
                "_universal_flags": [
                    "self",
                    "cmd"
                ],
                "get_flags": [
                    "self"
                ],
                "get_flags_linker_so": [
                    "self"
                ],
                "get_library_dirs": [
                    "self"
                ],
                "get_libraries": [
                    "self"
                ],
                "get_target": [
                    "self"
                ],
                "get_flags_opt": [
                    "self"
                ]
            }
        },
        "numpy.distutils.fcompiler.sun": {
            "SunFCompiler": {
                "get_flags_f77": [
                    "self"
                ],
                "get_opt": [
                    "self"
                ],
                "get_arch": [
                    "self"
                ],
                "get_libraries": [
                    "self"
                ]
            }
        },
        "numpy.distutils.fcompiler.nag": {
            "NAGFCompiler": {
                "get_flags_linker_so": [
                    "self"
                ],
                "get_flags_opt": [
                    "self"
                ],
                "get_flags_arch": [
                    "self"
                ],
                "get_flags_debug": [
                    "self"
                ]
            }
        },
        "numpy.distutils.fcompiler.hpux": {
            "HPUXFCompiler": {
                "get_flags": [
                    "self"
                ],
                "get_flags_opt": [
                    "self"
                ],
                "get_libraries": [
                    "self"
                ],
                "get_library_dirs": [
                    "self"
                ],
                "get_version": [
                    "self",
                    "force",
                    "ok_status"
                ]
            }
        },
        "numpy.distutils.fcompiler.pg": {
            "PGroupFCompiler": {
                "get_flags": [
                    "self"
                ],
                "get_flags_opt": [
                    "self"
                ],
                "get_flags_debug": [
                    "self"
                ]
            }
        },
        "numpy.distutils.fcompiler.mips": {
            "MIPSFCompiler": {
                "get_flags": [
                    "self"
                ],
                "get_flags_opt": [
                    "self"
                ],
                "get_flags_arch": [
                    "self"
                ],
                "get_flags_arch_f77": [
                    "self"
                ],
                "get_flags_arch_f90": [
                    "self"
                ]
            }
        },
        "numpy.distutils.fcompiler.compaq": {
            "CompaqFCompiler": {
                "get_flags": [
                    "self"
                ],
                "get_flags_debug": [
                    "self"
                ],
                "get_flags_opt": [
                    "self"
                ],
                "get_flags_arch": [
                    "self"
                ],
                "get_flags_linker_so": [
                    "self"
                ]
            },
            "CompaqVisualFCompiler": {
                "get_flags": [
                    "self"
                ],
                "get_flags_opt": [
                    "self"
                ],
                "get_flags_arch": [
                    "self"
                ],
                "get_flags_debug": [
                    "self"
                ]
            }
        },
        "numpy.distutils.fcompiler.none": {
            "NoneFCompiler": {
                "find_executables": [
                    "self"
                ]
            }
        },
        "numpy.distutils.fcompiler.g95": {
            "G95FCompiler": {
                "get_flags": [
                    "self"
                ],
                "get_flags_opt": [
                    "self"
                ],
                "get_flags_debug": [
                    "self"
                ]
            }
        },
        "numpy.distutils.fcompiler": {
            "flaglist": [
                "s"
            ],
            "str2bool": [
                "s"
            ],
            "is_sequence_of_strings": [
                "seq"
            ],
            "load_all_fcompiler_classes": [],
            "_find_existing_fcompiler": [
                "compiler_types",
                "osname",
                "platform",
                "requiref90",
                "c_compiler"
            ],
            "available_fcompilers_for_platform": [
                "osname",
                "platform"
            ],
            "get_default_fcompiler": [
                "osname",
                "platform",
                "requiref90",
                "c_compiler"
            ],
            "new_fcompiler": [
                "plat",
                "compiler",
                "verbose",
                "dry_run",
                "force",
                "requiref90",
                "c_compiler"
            ],
            "show_fcompilers": [
                "dist"
            ],
            "dummy_fortran_file": [],
            "is_free_format": [
                "file"
            ],
            "has_f90_header": [
                "src"
            ],
            "get_f77flags": [
                "src"
            ],
            "CompilerNotFound": {},
            "FCompiler": {
                "__init__": [
                    "self"
                ],
                "__copy__": [
                    "self"
                ],
                "copy": [
                    "self"
                ],
                "_command_property": [
                    "key"
                ],
                "set_executable": [
                    "self",
                    "key",
                    "value"
                ],
                "set_commands": [
                    "self"
                ],
                "set_command": [
                    "self",
                    "key",
                    "value"
                ],
                "find_executables": [
                    "self"
                ],
                "update_executables": [
                    "elf"
                ],
                "get_flags": [
                    "self"
                ],
                "_get_command_flags": [
                    "self",
                    "key"
                ],
                "get_flags_f77": [
                    "self"
                ],
                "get_flags_f90": [
                    "self"
                ],
                "get_flags_free": [
                    "self"
                ],
                "get_flags_fix": [
                    "self"
                ],
                "get_flags_linker_so": [
                    "self"
                ],
                "get_flags_linker_exe": [
                    "self"
                ],
                "get_flags_ar": [
                    "self"
                ],
                "get_flags_opt": [
                    "self"
                ],
                "get_flags_arch": [
                    "self"
                ],
                "get_flags_debug": [
                    "self"
                ],
                "get_libraries": [
                    "self"
                ],
                "get_library_dirs": [
                    "self"
                ],
                "get_version": [
                    "self",
                    "force",
                    "ok_status"
                ],
                "customize": [
                    "self",
                    "dist"
                ],
                "dump_properties": [
                    "self"
                ],
                "_compile": [
                    "self",
                    "obj",
                    "src",
                    "ext",
                    "cc_args",
                    "extra_postargs",
                    "pp_opts"
                ],
                "module_options": [
                    "self",
                    "module_dirs",
                    "module_build_dir"
                ],
                "library_option": [
                    "self",
                    "lib"
                ],
                "library_dir_option": [
                    "self",
                    "dir"
                ],
                "link": [
                    "self",
                    "target_desc",
                    "objects",
                    "output_filename",
                    "output_dir",
                    "libraries",
                    "library_dirs",
                    "runtime_library_dirs",
                    "export_symbols",
                    "debug",
                    "extra_preargs",
                    "extra_postargs",
                    "build_temp",
                    "target_lang"
                ],
                "_environment_hook": [
                    "self",
                    "name",
                    "hook_name"
                ]
            }
        },
        "numpy.distutils.fcompiler.absoft": {
            "AbsoftFCompiler": {
                "update_executables": [
                    "self"
                ],
                "get_flags_linker_so": [
                    "self"
                ],
                "library_dir_option": [
                    "self",
                    "dir"
                ],
                "library_option": [
                    "self",
                    "lib"
                ],
                "get_library_dirs": [
                    "self"
                ],
                "get_libraries": [
                    "self"
                ],
                "get_flags": [
                    "self"
                ],
                "get_flags_f77": [
                    "self"
                ],
                "get_flags_f90": [
                    "self"
                ],
                "get_flags_fix": [
                    "self"
                ],
                "get_flags_opt": [
                    "self"
                ]
            }
        },
        "numpy.distutils.tests.pyrex_ext.setup": {
            "configuration": [
                "parent_package",
                "top_path"
            ]
        },
        "numpy.distutils.tests.pyrex_ext": {},
        "numpy.distutils.tests.f2py_f90_ext.setup": {
            "configuration": [
                "parent_package",
                "top_path"
            ]
        },
        "numpy.distutils.tests.f2py_f90_ext": {},
        "numpy.distutils.tests.swig_ext.setup": {
            "configuration": [
                "parent_package",
                "top_path"
            ]
        },
        "numpy.distutils.tests.swig_ext": {},
        "numpy.distutils.tests.gen_ext.setup": {
            "source_func": [
                "ext",
                "build_dir"
            ],
            "configuration": [
                "parent_package",
                "top_path"
            ]
        },
        "numpy.distutils.tests.gen_ext": {},
        "numpy.distutils.tests.f2py_ext.setup": {
            "configuration": [
                "parent_package",
                "top_path"
            ]
        },
        "numpy.distutils.tests.f2py_ext": {},
        "numpy.distutils.command.config": {
            "config": {
                "initialize_options": [
                    "self"
                ],
                "try_run": [
                    "self",
                    "body",
                    "headers",
                    "include_dirs",
                    "libraries",
                    "library_dirs",
                    "lang"
                ],
                "_check_compiler": [
                    "self"
                ],
                "_wrap_method": [
                    "self",
                    "mth",
                    "lang",
                    "args"
                ],
                "_compile": [
                    "self",
                    "body",
                    "headers",
                    "include_dirs",
                    "lang"
                ],
                "_link": [
                    "self",
                    "body",
                    "headers",
                    "include_dirs",
                    "libraries",
                    "library_dirs",
                    "lang"
                ],
                "check_header": [
                    "self",
                    "header",
                    "include_dirs",
                    "library_dirs",
                    "lang"
                ],
                "check_decl": [
                    "self",
                    "symbol",
                    "headers",
                    "include_dirs"
                ],
                "check_macro_true": [
                    "self",
                    "symbol",
                    "headers",
                    "include_dirs"
                ],
                "check_type": [
                    "self",
                    "type_name",
                    "headers",
                    "include_dirs",
                    "library_dirs"
                ],
                "check_type_size": [
                    "self",
                    "type_name",
                    "headers",
                    "include_dirs",
                    "library_dirs",
                    "expected"
                ],
                "check_func": [
                    "self",
                    "func",
                    "headers",
                    "include_dirs",
                    "libraries",
                    "library_dirs",
                    "decl",
                    "call",
                    "call_args"
                ],
                "check_funcs_once": [
                    "self",
                    "funcs",
                    "headers",
                    "include_dirs",
                    "libraries",
                    "library_dirs",
                    "decl",
                    "call",
                    "call_args"
                ],
                "check_inline": [
                    "self"
                ],
                "check_compiler_gcc4": [
                    "self"
                ],
                "get_output": [
                    "self",
                    "body",
                    "headers",
                    "include_dirs",
                    "libraries",
                    "library_dirs",
                    "lang",
                    "use_tee"
                ]
            },
            "GrabStdout": {
                "__init__": [
                    "self"
                ],
                "write": [
                    "self",
                    "data"
                ],
                "flush": [
                    "self"
                ],
                "restore": [
                    "self"
                ]
            }
        },
        "numpy.distutils.command.config_compiler": {
            "show_fortran_compilers": [
                "_cache"
            ],
            "config_fc": {
                "initialize_options": [
                    "self"
                ],
                "finalize_options": [
                    "self"
                ],
                "run": [
                    "self"
                ]
            },
            "config_cc": {
                "initialize_options": [
                    "self"
                ],
                "finalize_options": [
                    "self"
                ],
                "run": [
                    "self"
                ]
            }
        },
        "numpy.distutils.command.install_clib": {
            "install_clib": {
                "initialize_options": [
                    "self"
                ],
                "finalize_options": [
                    "self"
                ],
                "run": [
                    "self"
                ],
                "get_outputs": [
                    "self"
                ]
            }
        },
        "numpy.distutils.command.bdist_rpm": {
            "bdist_rpm": {
                "_make_spec_file": [
                    "self"
                ]
            }
        },
        "numpy.distutils.command.develop": {
            "develop": {
                "install_for_development": [
                    "self"
                ]
            }
        },
        "numpy.distutils.command.install": {
            "install": {
                "finalize_options": [
                    "self"
                ],
                "setuptools_run": [
                    "self"
                ],
                "run": [
                    "self"
                ]
            }
        },
        "numpy.distutils.command.install_data": {
            "install_data": {
                "run": [
                    "self"
                ],
                "finalize_options": [
                    "self"
                ]
            }
        },
        "numpy.distutils.command.build_py": {
            "build_py": {
                "run": [
                    "self"
                ],
                "find_package_modules": [
                    "self",
                    "package",
                    "package_dir"
                ],
                "find_modules": [
                    "self"
                ]
            }
        },
        "numpy.distutils.command.build_src": {
            "have_pyrex": [],
            "subst_vars": [
                "target",
                "source",
                "d"
            ],
            "get_swig_target": [
                "source"
            ],
            "get_swig_modulename": [
                "source"
            ],
            "_find_swig_target": [
                "target_dir",
                "name"
            ],
            "get_f2py_modulename": [
                "source"
            ],
            "build_src": {
                "initialize_options": [
                    "self"
                ],
                "finalize_options": [
                    "self"
                ],
                "run": [
                    "self"
                ],
                "build_sources": [
                    "self"
                ],
                "build_data_files_sources": [
                    "self"
                ],
                "_build_npy_pkg_config": [
                    "self",
                    "info",
                    "gd"
                ],
                "build_npy_pkg_config": [
                    "self"
                ],
                "build_py_modules_sources": [
                    "self"
                ],
                "build_library_sources": [
                    "self",
                    "lib_name",
                    "build_info"
                ],
                "build_extension_sources": [
                    "self",
                    "ext"
                ],
                "generate_sources": [
                    "self",
                    "sources",
                    "extension"
                ],
                "filter_py_files": [
                    "self",
                    "sources"
                ],
                "filter_h_files": [
                    "self",
                    "sources"
                ],
                "filter_files": [
                    "self",
                    "sources",
                    "exts"
                ],
                "template_sources": [
                    "self",
                    "sources",
                    "extension"
                ],
                "pyrex_sources": [
                    "self",
                    "sources",
                    "extension"
                ],
                "generate_a_pyrex_source": [
                    "self",
                    "base",
                    "ext_name",
                    "source",
                    "extension"
                ],
                "f2py_sources": [
                    "self",
                    "sources",
                    "extension"
                ],
                "swig_sources": [
                    "self",
                    "sources",
                    "extension"
                ]
            }
        },
        "numpy.distutils.command.build_scripts": {
            "build_scripts": {
                "generate_scripts": [
                    "self",
                    "scripts"
                ],
                "run": [
                    "self"
                ],
                "get_source_files": [
                    "self"
                ]
            }
        },
        "numpy.distutils.command.egg_info": {
            "egg_info": {
                "run": [
                    "self"
                ]
            }
        },
        "numpy.distutils.command.build_ext": {
            "build_ext": {
                "initialize_options": [
                    "self"
                ],
                "finalize_options": [
                    "self"
                ],
                "run": [
                    "self"
                ],
                "swig_sources": [
                    "self",
                    "sources"
                ],
                "build_extension": [
                    "self",
                    "ext"
                ],
                "_add_dummy_mingwex_sym": [
                    "self",
                    "c_sources"
                ],
                "_libs_with_msvc_and_fortran": [
                    "self",
                    "fcompiler",
                    "c_libraries",
                    "c_library_dirs"
                ],
                "get_source_files": [
                    "self"
                ],
                "get_outputs": [
                    "self"
                ]
            }
        },
        "numpy.distutils.command.sdist": {
            "sdist": {
                "add_defaults": [
                    "self"
                ]
            }
        },
        "numpy.distutils.command.autodist": {
            "check_inline": [
                "cmd"
            ],
            "check_compiler_gcc4": [
                "cmd"
            ]
        },
        "numpy.distutils.command.build_clib": {
            "build_clib": {
                "initialize_options": [
                    "self"
                ],
                "have_f_sources": [
                    "self"
                ],
                "have_cxx_sources": [
                    "self"
                ],
                "run": [
                    "self"
                ],
                "get_source_files": [
                    "self"
                ],
                "build_libraries": [
                    "self",
                    "libraries"
                ],
                "build_a_library": [
                    "self",
                    "build_info",
                    "lib_name",
                    "libraries"
                ]
            }
        },
        "numpy.distutils.command.install_headers": {
            "install_headers": {
                "run": [
                    "self"
                ]
            }
        },
        "numpy.distutils.command.build": {
            "build": {
                "initialize_options": [
                    "self"
                ],
                "finalize_options": [
                    "self"
                ],
                "run": [
                    "self"
                ]
            }
        },
        "numpy.distutils.command": {
            "test_na_writable_attributes_deletion": []
        },
        "numpy.random.setup": {
            "needs_mingw_ftime_workaround": [],
            "configuration": [
                "parent_package",
                "top_path"
            ],
            "testcode_wincrypt": []
        },
        "numpy.random.info": {},
        "numpy.random": {
            "__RandomState_ctor": []
        },
        "numpy.f2py.setup": {
            "configuration": [
                "parent_package",
                "top_path"
            ]
        },
        "numpy.f2py.info": {},
        "numpy.f2py.cb_rules": {
            "buildcallbacks": [
                "m"
            ],
            "buildcallback": [
                "rout",
                "um"
            ]
        },
        "numpy.f2py.common_rules": {
            "findcommonblocks": [
                "block",
                "top"
            ],
            "buildhooks": [
                "m"
            ]
        },
        "numpy.f2py.diagnose": {
            "run_command": [
                "cmd"
            ],
            "run": []
        },
        "numpy.f2py.cfuncs": {
            "buildcfuncs": [],
            "append_needs": [
                "need",
                "flag"
            ],
            "get_needs": []
        },
        "numpy.f2py.f2py2e": {
            "scaninputline": [
                "inputline"
            ],
            "callcrackfortran": [
                "files",
                "options"
            ],
            "buildmodules": [
                "lst"
            ],
            "dict_append": [
                "d_out",
                "d_in"
            ],
            "run_main": [
                "comline_list"
            ],
            "filter_files": [
                "prefix",
                "suffix",
                "files",
                "remove_prefix"
            ],
            "get_prefix": [
                "module"
            ],
            "run_compile": [],
            "main": []
        },
        "numpy.f2py.func2subr": {
            "var2fixfortran": [
                "vars",
                "a",
                "fa",
                "f90mode"
            ],
            "createfuncwrapper": [
                "rout",
                "signature"
            ],
            "createsubrwrapper": [
                "rout",
                "signature"
            ],
            "assubr": [
                "rout"
            ]
        },
        "numpy.f2py.f2py_testing": {
            "cmdline": [],
            "run": [
                "runtest",
                "test_functions",
                "repeat"
            ]
        },
        "numpy.f2py.rules": {
            "buildmodule": [
                "m",
                "um"
            ],
            "buildapi": [
                "rout"
            ]
        },
        "numpy.f2py.crackfortran": {
            "show": [
                "o",
                "f"
            ],
            "outmess": [
                "line",
                "flag"
            ],
            "rmbadname1": [
                "name"
            ],
            "rmbadname": [
                "names"
            ],
            "undo_rmbadname1": [
                "name"
            ],
            "undo_rmbadname": [
                "names"
            ],
            "getextension": [
                "name"
            ],
            "is_free_format": [
                "file"
            ],
            "readfortrancode": [
                "ffile",
                "dowithline",
                "istop"
            ],
            "_simplifyargs": [
                "argsline"
            ],
            "crackline": [
                "line",
                "reset"
            ],
            "markouterparen": [
                "line"
            ],
            "markoutercomma": [
                "line",
                "comma"
            ],
            "unmarkouterparen": [
                "line"
            ],
            "appenddecl": [
                "decl",
                "decl2",
                "force"
            ],
            "_is_intent_callback": [
                "vdecl"
            ],
            "_resolvenameargspattern": [
                "line"
            ],
            "analyzeline": [
                "m",
                "case",
                "line"
            ],
            "appendmultiline": [
                "group",
                "context_name",
                "ml"
            ],
            "cracktypespec0": [
                "typespec",
                "ll"
            ],
            "removespaces": [
                "expr"
            ],
            "markinnerspaces": [
                "line"
            ],
            "updatevars": [
                "typespec",
                "selector",
                "attrspec",
                "entitydecl"
            ],
            "cracktypespec": [
                "typespec",
                "selector"
            ],
            "setattrspec": [
                "decl",
                "attr",
                "force"
            ],
            "setkindselector": [
                "decl",
                "sel",
                "force"
            ],
            "setcharselector": [
                "decl",
                "sel",
                "force"
            ],
            "getblockname": [
                "block",
                "unknown"
            ],
            "setmesstext": [
                "block"
            ],
            "get_usedict": [
                "block"
            ],
            "get_useparameters": [
                "block",
                "param_map"
            ],
            "postcrack2": [
                "block",
                "tab",
                "param_map"
            ],
            "postcrack": [
                "block",
                "args",
                "tab"
            ],
            "sortvarnames": [
                "vars"
            ],
            "analyzecommon": [
                "block"
            ],
            "analyzebody": [
                "block",
                "args",
                "tab"
            ],
            "buildimplicitrules": [
                "block"
            ],
            "myeval": [
                "e",
                "g",
                "l"
            ],
            "getlincoef": [
                "e",
                "xset"
            ],
            "getarrlen": [
                "dl",
                "args",
                "star"
            ],
            "_get_depend_dict": [
                "name",
                "vars",
                "deps"
            ],
            "_calc_depend_dict": [
                "vars"
            ],
            "get_sorted_names": [
                "vars"
            ],
            "_kind_func": [
                "string"
            ],
            "_selected_int_kind_func": [
                "r"
            ],
            "_selected_real_kind_func": [
                "p",
                "r",
                "radix"
            ],
            "get_parameters": [
                "vars",
                "global_params"
            ],
            "_eval_length": [
                "length",
                "params"
            ],
            "_eval_scalar": [
                "value",
                "params"
            ],
            "analyzevars": [
                "block"
            ],
            "expr2name": [
                "a",
                "block",
                "args"
            ],
            "analyzeargs": [
                "block"
            ],
            "_ensure_exprdict": [
                "r"
            ],
            "determineexprtype": [
                "expr",
                "vars",
                "rules"
            ],
            "crack2fortrangen": [
                "block",
                "tab",
                "as_interface"
            ],
            "common2fortran": [
                "common",
                "tab"
            ],
            "use2fortran": [
                "use",
                "tab"
            ],
            "true_intent_list": [
                "var"
            ],
            "vars2fortran": [
                "block",
                "vars",
                "args",
                "tab",
                "as_interface"
            ],
            "crackfortran": [
                "files"
            ],
            "crack2fortran": [
                "block"
            ]
        },
        "numpy.f2py.f90mod_rules": {
            "findf90modules": [
                "m"
            ],
            "buildhooks": [
                "pymod"
            ]
        },
        "numpy.f2py.__version__": {},
        "numpy.f2py.use_rules": {
            "buildusevars": [
                "m",
                "r"
            ],
            "buildusevar": [
                "name",
                "realname",
                "vars",
                "usemodulename"
            ]
        },
        "numpy.f2py.capi_maps": {
            "getctype": [
                "var"
            ],
            "getstrlength": [
                "var"
            ],
            "getarrdims": [
                "a",
                "var",
                "verbose"
            ],
            "getpydocsign": [
                "a",
                "var"
            ],
            "getarrdocsign": [
                "a",
                "var"
            ],
            "getinit": [
                "a",
                "var"
            ],
            "sign2map": [
                "a",
                "var"
            ],
            "routsign2map": [
                "rout"
            ],
            "modsign2map": [
                "m"
            ],
            "cb_sign2map": [
                "a",
                "var",
                "index"
            ],
            "cb_routsign2map": [
                "rout",
                "um"
            ],
            "common_sign2map": [
                "a",
                "var"
            ]
        },
        "numpy.f2py.auxfuncs": {
            "outmess": [
                "t"
            ],
            "debugcapi": [
                "var"
            ],
            "_isstring": [
                "var"
            ],
            "isstring": [
                "var"
            ],
            "ischaracter": [
                "var"
            ],
            "isstringarray": [
                "var"
            ],
            "isarrayofstrings": [
                "var"
            ],
            "isarray": [
                "var"
            ],
            "isscalar": [
                "var"
            ],
            "iscomplex": [
                "var"
            ],
            "islogical": [
                "var"
            ],
            "isinteger": [
                "var"
            ],
            "isreal": [
                "var"
            ],
            "get_kind": [
                "var"
            ],
            "islong_long": [
                "var"
            ],
            "isunsigned_char": [
                "var"
            ],
            "isunsigned_short": [
                "var"
            ],
            "isunsigned": [
                "var"
            ],
            "isunsigned_long_long": [
                "var"
            ],
            "isdouble": [
                "var"
            ],
            "islong_double": [
                "var"
            ],
            "islong_complex": [
                "var"
            ],
            "iscomplexarray": [
                "var"
            ],
            "isint1array": [
                "var"
            ],
            "isunsigned_chararray": [
                "var"
            ],
            "isunsigned_shortarray": [
                "var"
            ],
            "isunsignedarray": [
                "var"
            ],
            "isunsigned_long_longarray": [
                "var"
            ],
            "issigned_chararray": [
                "var"
            ],
            "issigned_shortarray": [
                "var"
            ],
            "issigned_array": [
                "var"
            ],
            "issigned_long_longarray": [
                "var"
            ],
            "isallocatable": [
                "var"
            ],
            "ismutable": [
                "var"
            ],
            "ismoduleroutine": [
                "rout"
            ],
            "ismodule": [
                "rout"
            ],
            "isfunction": [
                "rout"
            ],
            "isfunction_wrap": [
                "rout"
            ],
            "issubroutine": [
                "rout"
            ],
            "issubroutine_wrap": [
                "rout"
            ],
            "hasassumedshape": [
                "rout"
            ],
            "isroutine": [
                "rout"
            ],
            "islogicalfunction": [
                "rout"
            ],
            "islong_longfunction": [
                "rout"
            ],
            "islong_doublefunction": [
                "rout"
            ],
            "iscomplexfunction": [
                "rout"
            ],
            "iscomplexfunction_warn": [
                "rout"
            ],
            "isstringfunction": [
                "rout"
            ],
            "hasexternals": [
                "rout"
            ],
            "isthreadsafe": [
                "rout"
            ],
            "hasvariables": [
                "rout"
            ],
            "isoptional": [
                "var"
            ],
            "isexternal": [
                "var"
            ],
            "isrequired": [
                "var"
            ],
            "isintent_in": [
                "var"
            ],
            "isintent_inout": [
                "var"
            ],
            "isintent_out": [
                "var"
            ],
            "isintent_hide": [
                "var"
            ],
            "isintent_nothide": [
                "var"
            ],
            "isintent_c": [
                "var"
            ],
            "isintent_cache": [
                "var"
            ],
            "isintent_copy": [
                "var"
            ],
            "isintent_overwrite": [
                "var"
            ],
            "isintent_callback": [
                "var"
            ],
            "isintent_inplace": [
                "var"
            ],
            "isintent_aux": [
                "var"
            ],
            "isintent_aligned4": [
                "var"
            ],
            "isintent_aligned8": [
                "var"
            ],
            "isintent_aligned16": [
                "var"
            ],
            "isprivate": [
                "var"
            ],
            "hasinitvalue": [
                "var"
            ],
            "hasinitvalueasstring": [
                "var"
            ],
            "hasnote": [
                "var"
            ],
            "hasresultnote": [
                "rout"
            ],
            "hascommon": [
                "rout"
            ],
            "containscommon": [
                "rout"
            ],
            "containsmodule": [
                "block"
            ],
            "hasbody": [
                "rout"
            ],
            "hascallstatement": [
                "rout"
            ],
            "istrue": [
                "var"
            ],
            "isfalse": [
                "var"
            ],
            "l_and": [],
            "l_or": [],
            "l_not": [
                "f"
            ],
            "isdummyroutine": [
                "rout"
            ],
            "getfortranname": [
                "rout"
            ],
            "getmultilineblock": [
                "rout",
                "blockname",
                "comment",
                "counter"
            ],
            "getcallstatement": [
                "rout"
            ],
            "getcallprotoargument": [
                "rout",
                "cb_map"
            ],
            "getusercode": [
                "rout"
            ],
            "getusercode1": [
                "rout"
            ],
            "getpymethoddef": [
                "rout"
            ],
            "getargs": [
                "rout"
            ],
            "getargs2": [
                "rout"
            ],
            "getrestdoc": [
                "rout"
            ],
            "gentitle": [
                "name"
            ],
            "flatlist": [
                "l"
            ],
            "stripcomma": [
                "s"
            ],
            "replace": [
                "str",
                "d",
                "defaultsep"
            ],
            "dictappend": [
                "rd",
                "ar"
            ],
            "applyrules": [
                "rules",
                "d",
                "var"
            ],
            "F2PYError": {},
            "throw_error": {
                "__init__": [
                    "self",
                    "mess"
                ],
                "__call__": [
                    "self",
                    "var"
                ]
            }
        },
        "numpy.f2py": {
            "compile": [
                "source",
                "modulename",
                "extra_args",
                "verbose",
                "source_fn"
            ]
        },
        "numpy.matrixlib.setup": {
            "configuration": [
                "parent_package",
                "top_path"
            ]
        },
        "numpy.matrixlib.defmatrix": {
            "_convert_from_string": [
                "data"
            ],
            "asmatrix": [
                "data",
                "dtype"
            ],
            "matrix_power": [
                "M",
                "n"
            ],
            "_from_string": [
                "str",
                "gdict",
                "ldict"
            ],
            "bmat": [
                "obj",
                "ldict",
                "gdict"
            ],
            "matrix": {
                "__new__": [
                    "subtype",
                    "data",
                    "dtype",
                    "copy"
                ],
                "__array_finalize__": [
                    "self",
                    "obj"
                ],
                "__getitem__": [
                    "self",
                    "index"
                ],
                "__mul__": [
                    "self",
                    "other"
                ],
                "__rmul__": [
                    "self",
                    "other"
                ],
                "__imul__": [
                    "self",
                    "other"
                ],
                "__pow__": [
                    "self",
                    "other"
                ],
                "__ipow__": [
                    "self",
                    "other"
                ],
                "__rpow__": [
                    "self",
                    "other"
                ],
                "__repr__": [
                    "self"
                ],
                "__str__": [
                    "self"
                ],
                "_align": [
                    "self",
                    "axis"
                ],
                "_collapse": [
                    "self",
                    "axis"
                ],
                "tolist": [
                    "self"
                ],
                "sum": [
                    "self",
                    "axis",
                    "dtype",
                    "out"
                ],
                "mean": [
                    "self",
                    "axis",
                    "dtype",
                    "out"
                ],
                "std": [
                    "self",
                    "axis",
                    "dtype",
                    "out",
                    "ddof"
                ],
                "var": [
                    "self",
                    "axis",
                    "dtype",
                    "out",
                    "ddof"
                ],
                "prod": [
                    "self",
                    "axis",
                    "dtype",
                    "out"
                ],
                "any": [
                    "self",
                    "axis",
                    "out"
                ],
                "all": [
                    "self",
                    "axis",
                    "out"
                ],
                "max": [
                    "self",
                    "axis",
                    "out"
                ],
                "argmax": [
                    "self",
                    "axis",
                    "out"
                ],
                "min": [
                    "self",
                    "axis",
                    "out"
                ],
                "argmin": [
                    "self",
                    "axis",
                    "out"
                ],
                "ptp": [
                    "self",
                    "axis",
                    "out"
                ],
                "getI": [
                    "self"
                ],
                "getA": [
                    "self"
                ],
                "getA1": [
                    "self"
                ],
                "getT": [
                    "self"
                ],
                "getH": [
                    "self"
                ]
            }
        },
        "numpy.matrixlib": {},
        "numpy.oldnumeric.setup": {
            "configuration": [
                "parent_package",
                "top_path"
            ]
        },
        "numpy.oldnumeric.functions": {
            "take": [
                "a",
                "indicies",
                "axis"
            ],
            "repeat": [
                "a",
                "repeats",
                "axis"
            ],
            "sum": [
                "x",
                "axis"
            ],
            "product": [
                "x",
                "axis"
            ],
            "sometrue": [
                "x",
                "axis"
            ],
            "alltrue": [
                "x",
                "axis"
            ],
            "cumsum": [
                "x",
                "axis"
            ],
            "cumproduct": [
                "x",
                "axis"
            ],
            "argmax": [
                "x",
                "axis"
            ],
            "argmin": [
                "x",
                "axis"
            ],
            "compress": [
                "condition",
                "m",
                "axis"
            ],
            "fromfunction": [
                "args",
                "dimensions"
            ],
            "ones": [
                "shape",
                "typecode",
                "savespace",
                "dtype"
            ],
            "zeros": [
                "shape",
                "typecode",
                "savespace",
                "dtype"
            ],
            "identity": [
                "n",
                "typecode",
                "dtype"
            ],
            "empty": [
                "shape",
                "typecode",
                "dtype"
            ],
            "array": [
                "sequence",
                "typecode",
                "copy",
                "savespace",
                "dtype"
            ],
            "sarray": [
                "a",
                "typecode",
                "copy",
                "dtype"
            ],
            "asarray": [
                "a",
                "typecode",
                "dtype"
            ],
            "nonzero": [
                "a"
            ],
            "reshape": [
                "a",
                "shape"
            ],
            "arange": [
                "start",
                "stop",
                "step",
                "typecode",
                "dtype"
            ],
            "fromstring": [
                "string",
                "typecode",
                "count",
                "dtype"
            ],
            "ravel": [
                "m"
            ],
            "trace": [
                "a",
                "offset",
                "axis1",
                "axis2"
            ],
            "indices": [
                "dimensions",
                "typecode",
                "dtype"
            ],
            "where": [
                "condition",
                "x",
                "y"
            ],
            "cross_product": [
                "a",
                "b",
                "axis1",
                "axis2"
            ],
            "average": [
                "a",
                "axis",
                "weights",
                "returned"
            ]
        },
        "numpy.oldnumeric.misc": {},
        "numpy.oldnumeric.arrayfns": {
            "array_set": [
                "vals1",
                "indices",
                "vals2"
            ],
            "index_sort": [
                "arr"
            ],
            "interp": [
                "y",
                "x",
                "z",
                "typ"
            ],
            "nz": [
                "x"
            ],
            "reverse": [
                "x",
                "n"
            ],
            "span": [
                "lo",
                "hi",
                "num",
                "d2"
            ],
            "zmin_zmax": [
                "z",
                "ireg"
            ],
            "find_mask": [
                "fs",
                "node_edges"
            ],
            "to_corners": [
                "arr",
                "nv",
                "nvsum"
            ],
            "construct3": [
                "mask",
                "itype"
            ],
            "error": {}
        },
        "numpy.oldnumeric.typeconv": {
            "convtypecode": [
                "typecode",
                "dtype"
            ],
            "convtypecode2": [
                "typecode",
                "dtype"
            ],
            "_oldtypecodes": {
                "__getitem__": [
                    "self",
                    "obj"
                ]
            }
        },
        "numpy.oldnumeric.compat": {
            "DumpArray": [
                "m",
                "fp"
            ],
            "LoadArray": [
                "fp"
            ],
            "array_constructor": [
                "shape",
                "typecode",
                "thestr",
                "Endian"
            ],
            "pickle_array": [
                "a"
            ],
            "loads": [
                "astr"
            ],
            "load": [
                "fp"
            ],
            "_LoadArray": [
                "fp"
            ],
            "Pickler": {
                "__init__": [
                    "self"
                ],
                "save_array": [
                    "self",
                    "object"
                ]
            }
        },
        "numpy.oldnumeric.linear_algebra": {
            "solve_linear_equations": [
                "a",
                "b"
            ],
            "inverse": [
                "a"
            ],
            "cholesky_decomposition": [
                "a"
            ],
            "eigenvalues": [
                "a"
            ],
            "Heigenvalues": [
                "a",
                "UPLO"
            ],
            "eigenvectors": [
                "A"
            ],
            "Heigenvectors": [
                "A"
            ],
            "generalized_inverse": [
                "a",
                "rcond"
            ],
            "determinant": [
                "a"
            ],
            "linear_least_squares": [
                "a",
                "b",
                "rcond"
            ],
            "singular_value_decomposition": [
                "A",
                "full_matrices"
            ]
        },
        "numpy.oldnumeric.fix_default_axis": {
            "_add_axis": [
                "fstr",
                "name",
                "repl"
            ],
            "_import_change": [
                "fstr",
                "names"
            ],
            "add_axis": [
                "fstr",
                "import_change"
            ],
            "makenewfile": [
                "name",
                "filestr"
            ],
            "getfile": [
                "name"
            ],
            "copyfile": [
                "name",
                "fstr"
            ],
            "convertfile": [
                "filename",
                "import_change"
            ],
            "fromargs": [
                "args"
            ],
            "convertall": [
                "direc",
                "import_change"
            ],
            "_func": [
                "arg",
                "dirname",
                "fnames"
            ],
            "converttree": [
                "direc",
                "import_change"
            ]
        },
        "numpy.oldnumeric.mlab": {
            "eye": [
                "N",
                "M",
                "k",
                "typecode",
                "dtype"
            ],
            "tri": [
                "N",
                "M",
                "k",
                "typecode",
                "dtype"
            ],
            "trapz": [
                "y",
                "x",
                "axis"
            ],
            "ptp": [
                "x",
                "axis"
            ],
            "cumprod": [
                "x",
                "axis"
            ],
            "max": [
                "x",
                "axis"
            ],
            "min": [
                "x",
                "axis"
            ],
            "prod": [
                "x",
                "axis"
            ],
            "std": [
                "x",
                "axis"
            ],
            "mean": [
                "x",
                "axis"
            ],
            "cov": [
                "m",
                "y",
                "rowvar",
                "bias"
            ],
            "corrcoef": [
                "x",
                "y"
            ]
        },
        "numpy.oldnumeric.ma": {
            "default_fill_value": [
                "obj"
            ],
            "minimum_fill_value": [
                "obj"
            ],
            "maximum_fill_value": [
                "obj"
            ],
            "set_fill_value": [
                "a",
                "fill_value"
            ],
            "getmask": [
                "a"
            ],
            "getmaskarray": [
                "a"
            ],
            "is_mask": [
                "m"
            ],
            "make_mask": [
                "m",
                "copy",
                "flag"
            ],
            "make_mask_none": [
                "s"
            ],
            "mask_or": [
                "m1",
                "m2"
            ],
            "filled": [
                "a",
                "value"
            ],
            "get_fill_value": [
                "a"
            ],
            "common_fill_value": [
                "a",
                "b"
            ],
            "nonzero": [
                "a"
            ],
            "rank": [
                "object"
            ],
            "shape": [
                "object"
            ],
            "size": [
                "object",
                "axis"
            ],
            "isMaskedArray": [
                "x"
            ],
            "allclose": [
                "a",
                "b",
                "fill_value",
                "rtol",
                "atol"
            ],
            "allequal": [
                "a",
                "b",
                "fill_value"
            ],
            "masked_values": [
                "data",
                "value",
                "rtol",
                "atol",
                "copy"
            ],
            "masked_object": [
                "data",
                "value",
                "copy"
            ],
            "arange": [
                "start",
                "stop",
                "step",
                "dtype"
            ],
            "fromstring": [
                "s",
                "t"
            ],
            "left_shift": [
                "a",
                "n"
            ],
            "right_shift": [
                "a",
                "n"
            ],
            "resize": [
                "a",
                "new_shape"
            ],
            "new_repeat": [
                "a",
                "repeats",
                "axis"
            ],
            "identity": [
                "n"
            ],
            "indices": [
                "dimensions",
                "dtype"
            ],
            "zeros": [
                "shape",
                "dtype"
            ],
            "ones": [
                "shape",
                "dtype"
            ],
            "count": [
                "a",
                "axis"
            ],
            "power": [
                "a",
                "b",
                "third"
            ],
            "masked_array": [
                "a",
                "mask",
                "fill_value"
            ],
            "sum": [
                "target",
                "axis",
                "dtype"
            ],
            "product": [
                "target",
                "axis",
                "dtype"
            ],
            "new_average": [
                "a",
                "axis",
                "weights",
                "returned"
            ],
            "where": [
                "condition",
                "x",
                "y"
            ],
            "choose": [
                "indices",
                "t",
                "out",
                "mode"
            ],
            "masked_where": [
                "condition",
                "x",
                "copy"
            ],
            "masked_greater": [
                "x",
                "value",
                "copy"
            ],
            "masked_greater_equal": [
                "x",
                "value",
                "copy"
            ],
            "masked_less": [
                "x",
                "value",
                "copy"
            ],
            "masked_less_equal": [
                "x",
                "value",
                "copy"
            ],
            "masked_not_equal": [
                "x",
                "value",
                "copy"
            ],
            "masked_equal": [
                "x",
                "value",
                "copy"
            ],
            "masked_inside": [
                "x",
                "v1",
                "v2",
                "copy"
            ],
            "masked_outside": [
                "x",
                "v1",
                "v2",
                "copy"
            ],
            "reshape": [
                "a"
            ],
            "ravel": [
                "a"
            ],
            "concatenate": [
                "arrays",
                "axis"
            ],
            "swapaxes": [
                "a",
                "axis1",
                "axis2"
            ],
            "new_take": [
                "a",
                "indices",
                "axis",
                "out",
                "mode"
            ],
            "transpose": [
                "a",
                "axes"
            ],
            "put": [
                "a",
                "indices",
                "values",
                "mode"
            ],
            "putmask": [
                "a",
                "mask",
                "values"
            ],
            "inner": [
                "a",
                "b"
            ],
            "outer": [
                "a",
                "b"
            ],
            "dot": [
                "a",
                "b"
            ],
            "compress": [
                "condition",
                "x",
                "dimension",
                "out"
            ],
            "sort": [
                "x",
                "axis",
                "fill_value"
            ],
            "diagonal": [
                "a",
                "k",
                "axis1",
                "axis2"
            ],
            "trace": [
                "a",
                "offset",
                "axis1",
                "axis2",
                "dtype",
                "out"
            ],
            "argsort": [
                "x",
                "axis",
                "out",
                "fill_value"
            ],
            "argmin": [
                "x",
                "axis",
                "out",
                "fill_value"
            ],
            "argmax": [
                "x",
                "axis",
                "out",
                "fill_value"
            ],
            "fromfunction": [
                "f",
                "s"
            ],
            "asarray": [
                "data",
                "dtype"
            ],
            "_m": [
                "f"
            ],
            "not_implemented": [],
            "_choose": [
                "self"
            ],
            "_clip": [
                "self",
                "a_min",
                "a_max",
                "out"
            ],
            "_compress": [
                "self",
                "cond",
                "axis",
                "out"
            ],
            "_cumprod": [
                "self",
                "axis",
                "dtype",
                "out"
            ],
            "_cumsum": [
                "self",
                "axis",
                "dtype",
                "out"
            ],
            "_max": [
                "a",
                "axis",
                "out"
            ],
            "_min": [
                "a",
                "axis",
                "out"
            ],
            "_ptp": [
                "a",
                "axis",
                "out"
            ],
            "_squeeze": [
                "self"
            ],
            "_swapaxes": [
                "self",
                "axis1",
                "axis2"
            ],
            "_var": [
                "self",
                "axis",
                "dtype",
                "out"
            ],
            "_std": [
                "self",
                "axis",
                "dtype",
                "out"
            ],
            "repeat": [
                "a",
                "repeats",
                "axis"
            ],
            "average": [
                "a",
                "axis",
                "weights",
                "returned"
            ],
            "take": [
                "a",
                "indices",
                "axis"
            ],
            "MAError": {
                "__init__": [
                    "self",
                    "args"
                ],
                "__str__": [
                    "self"
                ]
            },
            "_MaskedPrintOption": {
                "__init__": [
                    "self",
                    "display"
                ],
                "display": [
                    "self"
                ],
                "set_display": [
                    "self",
                    "s"
                ],
                "enabled": [
                    "self"
                ],
                "enable": [
                    "self",
                    "flag"
                ],
                "__str__": [
                    "self"
                ]
            },
            "domain_check_interval": {
                "__init__": [
                    "self",
                    "y1",
                    "y2"
                ],
                "__call__": [
                    "self",
                    "x"
                ]
            },
            "domain_tan": {
                "__init__": [
                    "self",
                    "eps"
                ],
                "__call__": [
                    "self",
                    "x"
                ]
            },
            "domain_greater": {
                "__init__": [
                    "self",
                    "critical_value"
                ],
                "__call__": [
                    "self",
                    "x"
                ]
            },
            "domain_greater_equal": {
                "__init__": [
                    "self",
                    "critical_value"
                ],
                "__call__": [
                    "self",
                    "x"
                ]
            },
            "masked_unary_operation": {
                "__init__": [
                    "self",
                    "aufunc",
                    "fill",
                    "domain"
                ],
                "__call__": [
                    "self",
                    "a"
                ],
                "__str__": [
                    "self"
                ]
            },
            "domain_safe_divide": {
                "__init__": [
                    "self",
                    "tolerance"
                ],
                "__call__": [
                    "self",
                    "a",
                    "b"
                ]
            },
            "domained_binary_operation": {
                "__init__": [
                    "self",
                    "abfunc",
                    "domain",
                    "fillx",
                    "filly"
                ],
                "__call__": [
                    "self",
                    "a",
                    "b"
                ],
                "__str__": [
                    "self"
                ]
            },
            "masked_binary_operation": {
                "__init__": [
                    "self",
                    "abfunc",
                    "fillx",
                    "filly"
                ],
                "__call__": [
                    "self",
                    "a",
                    "b"
                ],
                "reduce": [
                    "self",
                    "target",
                    "axis",
                    "dtype"
                ],
                "outer": [
                    "self",
                    "a",
                    "b"
                ],
                "accumulate": [
                    "self",
                    "target",
                    "axis"
                ],
                "__str__": [
                    "self"
                ]
            },
            "MaskedArray": {
                "__init__": [
                    "self",
                    "data",
                    "dtype",
                    "copy",
                    "order",
                    "mask",
                    "fill_value"
                ],
                "__array__": [
                    "self",
                    "t",
                    "context"
                ],
                "__array_wrap__": [
                    "self",
                    "array",
                    "context"
                ],
                "_get_shape": [
                    "self"
                ],
                "_set_shape": [
                    "self",
                    "newshape"
                ],
                "_get_flat": [
                    "self"
                ],
                "_set_flat": [
                    "self",
                    "value"
                ],
                "_get_real": [
                    "self"
                ],
                "_set_real": [
                    "self",
                    "value"
                ],
                "_get_imaginary": [
                    "self"
                ],
                "_set_imaginary": [
                    "self",
                    "value"
                ],
                "__str__": [
                    "self"
                ],
                "__repr__": [
                    "self"
                ],
                "__float__": [
                    "self"
                ],
                "__int__": [
                    "self"
                ],
                "__getitem__": [
                    "self",
                    "i"
                ],
                "__setitem__": [
                    "self",
                    "index",
                    "value"
                ],
                "__nonzero__": [
                    "self"
                ],
                "__bool__": [
                    "self"
                ],
                "__len__": [
                    "self"
                ],
                "__and__": [
                    "self",
                    "other"
                ],
                "__or__": [
                    "self",
                    "other"
                ],
                "__xor__": [
                    "self",
                    "other"
                ],
                "__abs__": [
                    "self"
                ],
                "__neg__": [
                    "self"
                ],
                "__pos__": [
                    "self"
                ],
                "__add__": [
                    "self",
                    "other"
                ],
                "__mod__": [
                    "self",
                    "other"
                ],
                "__rmod__": [
                    "self",
                    "other"
                ],
                "__lshift__": [
                    "self",
                    "n"
                ],
                "__rshift__": [
                    "self",
                    "n"
                ],
                "__sub__": [
                    "self",
                    "other"
                ],
                "__rsub__": [
                    "self",
                    "other"
                ],
                "__mul__": [
                    "self",
                    "other"
                ],
                "__div__": [
                    "self",
                    "other"
                ],
                "__rdiv__": [
                    "self",
                    "other"
                ],
                "__truediv__": [
                    "self",
                    "other"
                ],
                "__rtruediv__": [
                    "self",
                    "other"
                ],
                "__floordiv__": [
                    "self",
                    "other"
                ],
                "__rfloordiv__": [
                    "self",
                    "other"
                ],
                "__pow__": [
                    "self",
                    "other",
                    "third"
                ],
                "__sqrt__": [
                    "self"
                ],
                "__iadd__": [
                    "self",
                    "other"
                ],
                "__imul__": [
                    "self",
                    "other"
                ],
                "__isub__": [
                    "self",
                    "other"
                ],
                "__idiv__": [
                    "self",
                    "other"
                ],
                "__eq__": [
                    "self",
                    "other"
                ],
                "__ne__": [
                    "self",
                    "other"
                ],
                "__lt__": [
                    "self",
                    "other"
                ],
                "__le__": [
                    "self",
                    "other"
                ],
                "__gt__": [
                    "self",
                    "other"
                ],
                "__ge__": [
                    "self",
                    "other"
                ],
                "astype": [
                    "self",
                    "tc"
                ],
                "byte_swapped": [
                    "self"
                ],
                "compressed": [
                    "self"
                ],
                "count": [
                    "self",
                    "axis"
                ],
                "dot": [
                    "self",
                    "other"
                ],
                "fill_value": [
                    "self"
                ],
                "filled": [
                    "self",
                    "fill_value"
                ],
                "ids": [
                    "self"
                ],
                "iscontiguous": [
                    "self"
                ],
                "itemsize": [
                    "self"
                ],
                "outer": [
                    "self",
                    "other"
                ],
                "put": [
                    "self",
                    "values"
                ],
                "putmask": [
                    "self",
                    "values"
                ],
                "ravel": [
                    "self"
                ],
                "raw_data": [
                    "self"
                ],
                "raw_mask": [
                    "self"
                ],
                "reshape": [
                    "self"
                ],
                "set_fill_value": [
                    "self",
                    "v"
                ],
                "_get_ndim": [
                    "self"
                ],
                "_get_size": [
                    "self"
                ],
                "_get_dtype": [
                    "self"
                ],
                "item": [
                    "self"
                ],
                "itemset": [
                    "self"
                ],
                "tolist": [
                    "self",
                    "fill_value"
                ],
                "tostring": [
                    "self",
                    "fill_value"
                ],
                "unmask": [
                    "self"
                ],
                "unshare_mask": [
                    "self"
                ],
                "_get_ctypes": [
                    "self"
                ],
                "_get_T": [
                    "self"
                ]
            },
            "_minimum_operation": {
                "__init__": [
                    "self"
                ],
                "__call__": [
                    "self",
                    "a",
                    "b"
                ],
                "reduce": [
                    "self",
                    "target",
                    "axis"
                ],
                "outer": [
                    "self",
                    "a",
                    "b"
                ]
            },
            "_maximum_operation": {
                "__init__": [
                    "self"
                ],
                "__call__": [
                    "self",
                    "a",
                    "b"
                ],
                "reduce": [
                    "self",
                    "target",
                    "axis"
                ],
                "outer": [
                    "self",
                    "a",
                    "b"
                ]
            }
        },
        "numpy.oldnumeric.fft": {},
        "numpy.oldnumeric.precision": {
            "_get_precisions": [
                "typecodes"
            ],
            "_fill_table": [
                "typecodes",
                "table"
            ],
            "_lookup": [
                "table",
                "key",
                "required_bits"
            ],
            "PrecisionError": {}
        },
        "numpy.oldnumeric.random_array": {
            "seed": [
                "x",
                "y"
            ],
            "get_seed": [],
            "random": [
                "shape"
            ],
            "uniform": [
                "minimum",
                "maximum",
                "shape"
            ],
            "randint": [
                "minimum",
                "maximum",
                "shape"
            ],
            "random_integers": [
                "maximum",
                "minimum",
                "shape"
            ],
            "permutation": [
                "n"
            ],
            "standard_normal": [
                "shape"
            ],
            "normal": [
                "mean",
                "std",
                "shape"
            ],
            "multivariate_normal": [
                "mean",
                "cov",
                "shape"
            ],
            "exponential": [
                "mean",
                "shape"
            ],
            "beta": [
                "a",
                "b",
                "shape"
            ],
            "gamma": [
                "a",
                "r",
                "shape"
            ],
            "F": [
                "dfn",
                "dfd",
                "shape"
            ],
            "noncentral_F": [
                "dfn",
                "dfd",
                "nconc",
                "shape"
            ],
            "chi_square": [
                "df",
                "shape"
            ],
            "noncentral_chi_square": [
                "df",
                "nconc",
                "shape"
            ],
            "binomial": [
                "trials",
                "p",
                "shape"
            ],
            "negative_binomial": [
                "trials",
                "p",
                "shape"
            ],
            "multinomial": [
                "trials",
                "probs",
                "shape"
            ],
            "poisson": [
                "mean",
                "shape"
            ],
            "mean_var_test": [
                "x",
                "type",
                "mean",
                "var",
                "skew"
            ],
            "test": []
        },
        "numpy.oldnumeric.ufuncs": {},
        "numpy.oldnumeric.rng": {
            "ranf": [],
            "random_sample": [],
            "error": {},
            "Distribution": {
                "__init__": [
                    "self",
                    "meth"
                ],
                "density": [
                    "self",
                    "x"
                ],
                "__call__": [
                    "self",
                    "x"
                ],
                "_onesample": [
                    "self",
                    "rng"
                ],
                "_sample": [
                    "self",
                    "rng",
                    "n"
                ]
            },
            "ExponentialDistribution": {
                "__init__": [
                    "self",
                    "lambda_"
                ],
                "density": [
                    "x"
                ]
            },
            "LogNormalDistribution": {
                "__init__": [
                    "self",
                    "m",
                    "s"
                ],
                "density": [
                    "x"
                ]
            },
            "NormalDistribution": {
                "__init__": [
                    "self",
                    "m",
                    "s"
                ],
                "density": [
                    "x"
                ]
            },
            "UniformDistribution": {
                "__init__": [
                    "self",
                    "a",
                    "b"
                ],
                "density": [
                    "x"
                ]
            },
            "CreateGenerator": {
                "__init__": [
                    "self",
                    "seed",
                    "dist"
                ],
                "ranf": [
                    "self"
                ],
                "sample": [
                    "self",
                    "n"
                ]
            }
        },
        "numpy.oldnumeric.user_array": {},
        "numpy.oldnumeric.alter_code2": {
            "replacetypechars": [
                "astr"
            ],
            "changeimports": [
                "fstr",
                "name",
                "newname"
            ],
            "replaceattr": [
                "astr"
            ],
            "replaceother": [
                "astr"
            ],
            "fromstr": [
                "filestr"
            ],
            "makenewfile": [
                "name",
                "filestr"
            ],
            "getandcopy": [
                "name"
            ],
            "convertfile": [
                "filename"
            ],
            "fromargs": [
                "args"
            ],
            "convertall": [
                "direc"
            ],
            "_func": [
                "arg",
                "dirname",
                "fnames"
            ],
            "converttree": [
                "direc"
            ]
        },
        "numpy.oldnumeric.array_printer": {
            "array2string": [
                "a",
                "max_line_width",
                "precision",
                "suppress_small",
                "separator",
                "array_output"
            ]
        },
        "numpy.oldnumeric.rng_stats": {
            "average": [
                "data"
            ],
            "variance": [
                "data"
            ],
            "standardDeviation": [
                "data"
            ],
            "histogram": [
                "data",
                "nbins",
                "range"
            ]
        },
        "numpy.oldnumeric.alter_code1": {
            "fixtypechars": [
                "fstr"
            ],
            "changeimports": [
                "fstr",
                "name",
                "newname"
            ],
            "fixistesting": [
                "astr"
            ],
            "replaceattr": [
                "astr"
            ],
            "replaceother": [
                "astr"
            ],
            "fromstr": [
                "filestr"
            ],
            "makenewfile": [
                "name",
                "filestr"
            ],
            "convertfile": [
                "filename",
                "orig"
            ],
            "fromargs": [
                "args"
            ],
            "convertall": [
                "direc",
                "orig"
            ],
            "convertsrc": [
                "direc",
                "ext",
                "orig"
            ],
            "_func": [
                "arg",
                "dirname",
                "fnames"
            ],
            "converttree": [
                "direc"
            ]
        },
        "numpy.oldnumeric.matrix": {
            "_eval": [
                "astr"
            ],
            "_convert_from_string": [
                "data"
            ],
            "_binary": [
                "num"
            ]
        },
        "numpy.oldnumeric": {
            "_move_axis_to_0": [
                "a",
                "axis"
            ]
        },
        "numpy.fft.setup": {
            "configuration": [
                "parent_package",
                "top_path"
            ]
        },
        "numpy.fft.info": {},
        "numpy.fft.helper": {
            "fftshift": [
                "x",
                "axes"
            ],
            "ifftshift": [
                "x",
                "axes"
            ],
            "fftfreq": [
                "n",
                "d"
            ],
            "rfftfreq": [
                "n",
                "d"
            ]
        },
        "numpy.fft.fftpack": {
            "_raw_fft": [
                "a",
                "n",
                "axis",
                "init_function",
                "work_function",
                "fft_cache"
            ],
            "fft": [
                "a",
                "n",
                "axis"
            ],
            "ifft": [
                "a",
                "n",
                "axis"
            ],
            "rfft": [
                "a",
                "n",
                "axis"
            ],
            "irfft": [
                "a",
                "n",
                "axis"
            ],
            "hfft": [
                "a",
                "n",
                "axis"
            ],
            "ihfft": [
                "a",
                "n",
                "axis"
            ],
            "_cook_nd_args": [
                "a",
                "s",
                "axes",
                "invreal"
            ],
            "_raw_fftnd": [
                "a",
                "s",
                "axes",
                "function"
            ],
            "fftn": [
                "a",
                "s",
                "axes"
            ],
            "ifftn": [
                "a",
                "s",
                "axes"
            ],
            "fft2": [
                "a",
                "s",
                "axes"
            ],
            "ifft2": [
                "a",
                "s",
                "axes"
            ],
            "rfftn": [
                "a",
                "s",
                "axes"
            ],
            "rfft2": [
                "a",
                "s",
                "axes"
            ],
            "irfftn": [
                "a",
                "s",
                "axes"
            ],
            "irfft2": [
                "a",
                "s",
                "axes"
            ]
        },
        "numpy.fft": {},
        "numpy.linalg.setup": {
            "configuration": [
                "parent_package",
                "top_path"
            ]
        },
        "numpy.linalg.info": {},
        "numpy.linalg.linalg": {
            "_determine_error_states": [],
            "_raise_linalgerror_singular": [
                "err",
                "flag"
            ],
            "_raise_linalgerror_nonposdef": [
                "err",
                "flag"
            ],
            "_raise_linalgerror_eigenvalues_nonconvergence": [
                "err",
                "flag"
            ],
            "_raise_linalgerror_svd_nonconvergence": [
                "err",
                "flag"
            ],
            "get_linalg_error_extobj": [
                "callback"
            ],
            "_makearray": [
                "a"
            ],
            "isComplexType": [
                "t"
            ],
            "_realType": [
                "t",
                "default"
            ],
            "_complexType": [
                "t",
                "default"
            ],
            "_linalgRealType": [
                "t"
            ],
            "_commonType": [],
            "_to_native_byte_order": [],
            "_fastCopyAndTranspose": [
                "type"
            ],
            "_assertRank2": [],
            "_assertRankAtLeast2": [],
            "_assertSquareness": [],
            "_assertNdSquareness": [],
            "_assertFinite": [],
            "_assertNoEmpty2d": [],
            "tensorsolve": [
                "a",
                "b",
                "axes"
            ],
            "solve": [
                "a",
                "b"
            ],
            "tensorinv": [
                "a",
                "ind"
            ],
            "inv": [
                "a"
            ],
            "cholesky": [
                "a"
            ],
            "qr": [
                "a",
                "mode"
            ],
            "eigvals": [
                "a"
            ],
            "eigvalsh": [
                "a",
                "UPLO"
            ],
            "_convertarray": [
                "a"
            ],
            "eig": [
                "a"
            ],
            "eigh": [
                "a",
                "UPLO"
            ],
            "svd": [
                "a",
                "full_matrices",
                "compute_uv"
            ],
            "cond": [
                "x",
                "p"
            ],
            "matrix_rank": [
                "M",
                "tol"
            ],
            "pinv": [
                "a",
                "rcond"
            ],
            "slogdet": [
                "a"
            ],
            "det": [
                "a"
            ],
            "lstsq": [
                "a",
                "b",
                "rcond"
            ],
            "_multi_svd_norm": [
                "x",
                "row_axis",
                "col_axis",
                "op"
            ],
            "norm": [
                "x",
                "ord",
                "axis"
            ],
            "LinAlgError": {}
        },
        "numpy.linalg": {},
        "numpy.numarray.setup": {
            "configuration": [
                "parent_package",
                "top_path"
            ]
        },
        "numpy.numarray.functions": {
            "type2dtype": [
                "typecode",
                "type",
                "dtype",
                "use_default"
            ],
            "fromfunction": [
                "shape",
                "dimensions",
                "type",
                "typecode",
                "dtype"
            ],
            "ones": [
                "shape",
                "type",
                "typecode",
                "dtype"
            ],
            "zeros": [
                "shape",
                "type",
                "typecode",
                "dtype"
            ],
            "where": [
                "condition",
                "x",
                "y",
                "out"
            ],
            "indices": [
                "shape",
                "type"
            ],
            "arange": [
                "a1",
                "a2",
                "stride",
                "type",
                "shape",
                "typecode",
                "dtype"
            ],
            "alltrue": [
                "x",
                "axis"
            ],
            "and_": [
                "a",
                "b"
            ],
            "divide_remainder": [
                "a",
                "b"
            ],
            "around": [
                "array",
                "digits",
                "output"
            ],
            "array2list": [
                "arr"
            ],
            "choose": [
                "selector",
                "population",
                "outarr",
                "clipmode"
            ],
            "compress": [
                "condition",
                "a",
                "axis"
            ],
            "explicit_type": [
                "a"
            ],
            "flush_caches": [],
            "fromfile": [
                "infile",
                "type",
                "shape",
                "sizing",
                "typecode",
                "dtype"
            ],
            "_resizebuf": [
                "buf",
                "newsize"
            ],
            "fromstring": [
                "datastring",
                "type",
                "shape",
                "typecode",
                "dtype"
            ],
            "fromlist": [
                "seq",
                "type",
                "shape",
                "check_overflow",
                "typecode",
                "dtype"
            ],
            "array": [
                "sequence",
                "typecode",
                "copy",
                "savespace",
                "type",
                "shape",
                "dtype"
            ],
            "asarray": [
                "seq",
                "type",
                "typecode",
                "dtype"
            ],
            "getTypeObject": [
                "sequence",
                "type"
            ],
            "getShape": [
                "shape"
            ],
            "identity": [
                "n",
                "type",
                "typecode",
                "dtype"
            ],
            "info": [
                "obj",
                "output",
                "numpy"
            ],
            "put": [
                "array",
                "indices",
                "values",
                "axis",
                "clipmode"
            ],
            "repeat": [
                "array",
                "repeats",
                "axis"
            ],
            "reshape": [
                "array",
                "shape"
            ],
            "round": [],
            "sometrue": [
                "array",
                "axis"
            ],
            "take": [
                "array",
                "indices",
                "axis",
                "outarr",
                "clipmode"
            ],
            "tensormultiply": [
                "a1",
                "a2"
            ],
            "cumsum": [
                "a1",
                "axis",
                "out",
                "type",
                "dim"
            ],
            "cumproduct": [
                "a1",
                "axis",
                "out",
                "type",
                "dim"
            ],
            "argmax": [
                "x",
                "axis"
            ],
            "argmin": [
                "x",
                "axis"
            ],
            "newobj": [
                "self",
                "type"
            ],
            "togglebyteorder": [
                "self"
            ],
            "average": [
                "a",
                "axis",
                "weights",
                "returned"
            ],
            "EarlyEOFError": {},
            "SizeMismatchError": {},
            "SizeMismatchWarning": {},
            "FileSeekWarning": {}
        },
        "numpy.numarray.convolve": {},
        "numpy.numarray.nd_image": {},
        "numpy.numarray.image": {},
        "numpy.numarray.session": {
            "_foo": [],
            "_update_proxy_types": [],
            "_unknown": [
                "_type"
            ],
            "_caller": [],
            "_callers_globals": [],
            "_callers_modules": [],
            "_errout": [],
            "_verbose": [],
            "_loadmodule": [
                "module"
            ],
            "_locate": [
                "modules",
                "object"
            ],
            "save": [
                "variables",
                "file",
                "dictionary",
                "verbose"
            ],
            "load": [
                "variables",
                "file",
                "dictionary",
                "verbose"
            ],
            "test": [],
            "_ProxyingFailure": {
                "__init__": [
                    "self",
                    "module",
                    "name",
                    "type"
                ],
                "__repr__": [
                    "self"
                ]
            },
            "_ModuleProxy": {
                "__new__": [
                    "_type",
                    "name",
                    "save"
                ],
                "__getnewargs__": [
                    "self"
                ],
                "__getstate__": [
                    "self"
                ]
            },
            "_ObjectProxy": {
                "__new__": [
                    "_type",
                    "module",
                    "name",
                    "_type2",
                    "save"
                ],
                "__getnewargs__": [
                    "self"
                ],
                "__getstate__": [
                    "self"
                ]
            },
            "_SaveSession": {
                "__new__": [
                    "_type",
                    "keys",
                    "save"
                ],
                "__getnewargs__": [
                    "self"
                ],
                "__getstate__": [
                    "self"
                ]
            },
            "ObjectNotFound": {}
        },
        "numpy.numarray.compat": {},
        "numpy.numarray.linear_algebra": {
            "qr_decomposition": [
                "a",
                "mode"
            ]
        },
        "numpy.numarray.util": {
            "handleError": [
                "errorStatus",
                "sourcemsg"
            ],
            "get_numarray_include_dirs": [],
            "MathDomainError": {},
            "UnderflowError": {},
            "NumOverflowError": {}
        },
        "numpy.numarray.numerictypes": {
            "IsType": [
                "rep"
            ],
            "_register": [
                "name",
                "type",
                "force"
            ],
            "_scipy_alias": [
                "scipy_type",
                "numarray_type"
            ],
            "_initGenericCoercions": [],
            "MaximumType": [
                "t"
            ],
            "getType": [
                "type"
            ],
            "typefrom": [
                "obj"
            ],
            "NumericType": {
                "__new__": [
                    "type",
                    "name",
                    "bytes",
                    "default",
                    "typeno"
                ],
                "__init__": [
                    "self",
                    "name",
                    "bytes",
                    "default",
                    "typeno"
                ],
                "__getnewargs__": [
                    "self"
                ],
                "__getstate__": [
                    "self"
                ]
            },
            "BooleanType": {},
            "SignedType": {},
            "UnsignedType": {},
            "IntegralType": {},
            "SignedIntegralType": {},
            "UnsignedIntegralType": {},
            "FloatingType": {},
            "ComplexType": {},
            "AnyType": {},
            "ObjectType": {}
        },
        "numpy.numarray.mlab": {},
        "numpy.numarray.ma": {},
        "numpy.numarray.fft": {},
        "numpy.numarray.random_array": {},
        "numpy.numarray.ufuncs": {},
        "numpy.numarray.alter_code2": {
            "makenewfile": [
                "name",
                "filestr"
            ],
            "getandcopy": [
                "name"
            ],
            "convertfile": [
                "filename"
            ],
            "fromargs": [
                "args"
            ],
            "convertall": [
                "direc"
            ],
            "_func": [
                "arg",
                "dirname",
                "fnames"
            ],
            "converttree": [
                "direc"
            ]
        },
        "numpy.numarray.alter_code1": {
            "changeimports": [
                "fstr",
                "name",
                "newname"
            ],
            "addimport": [
                "astr"
            ],
            "replaceattr": [
                "astr"
            ],
            "replaceother": [
                "astr"
            ],
            "fromstr": [
                "filestr"
            ],
            "makenewfile": [
                "name",
                "filestr"
            ],
            "convertfile": [
                "filename",
                "orig"
            ],
            "fromargs": [
                "args"
            ],
            "convertall": [
                "direc",
                "orig"
            ],
            "convertsrc": [
                "direc",
                "ext",
                "orig"
            ],
            "_func": [
                "arg",
                "dirname",
                "fnames"
            ],
            "converttree": [
                "direc"
            ]
        },
        "numpy.numarray.matrix": {
            "Matrix": [
                "data",
                "typecode",
                "copy",
                "savespace"
            ]
        },
        "numpy.numarray": {},
        "numpy.polynomial.setup": {
            "configuration": [
                "parent_package",
                "top_path"
            ]
        },
        "numpy.polynomial.hermite_e": {
            "poly2herme": [
                "pol"
            ],
            "herme2poly": [
                "c"
            ],
            "hermeline": [
                "off",
                "scl"
            ],
            "hermefromroots": [
                "roots"
            ],
            "hermeadd": [
                "c1",
                "c2"
            ],
            "hermesub": [
                "c1",
                "c2"
            ],
            "hermemulx": [
                "c"
            ],
            "hermemul": [
                "c1",
                "c2"
            ],
            "hermediv": [
                "c1",
                "c2"
            ],
            "hermepow": [
                "c",
                "pow",
                "maxpower"
            ],
            "hermeder": [
                "c",
                "m",
                "scl",
                "axis"
            ],
            "hermeint": [
                "c",
                "m",
                "k",
                "lbnd",
                "scl",
                "axis"
            ],
            "hermeval": [
                "x",
                "c",
                "tensor"
            ],
            "hermeval2d": [
                "x",
                "y",
                "c"
            ],
            "hermegrid2d": [
                "x",
                "y",
                "c"
            ],
            "hermeval3d": [
                "x",
                "y",
                "z",
                "c"
            ],
            "hermegrid3d": [
                "x",
                "y",
                "z",
                "c"
            ],
            "hermevander": [
                "x",
                "deg"
            ],
            "hermevander2d": [
                "x",
                "y",
                "deg"
            ],
            "hermevander3d": [
                "x",
                "y",
                "z",
                "deg"
            ],
            "hermefit": [
                "x",
                "y",
                "deg",
                "rcond",
                "full",
                "w"
            ],
            "hermecompanion": [
                "c"
            ],
            "hermeroots": [
                "c"
            ],
            "hermegauss": [
                "deg"
            ],
            "hermeweight": [
                "x"
            ]
        },
        "numpy.polynomial.laguerre": {
            "poly2lag": [
                "pol"
            ],
            "lag2poly": [
                "c"
            ],
            "lagline": [
                "off",
                "scl"
            ],
            "lagfromroots": [
                "roots"
            ],
            "lagadd": [
                "c1",
                "c2"
            ],
            "lagsub": [
                "c1",
                "c2"
            ],
            "lagmulx": [
                "c"
            ],
            "lagmul": [
                "c1",
                "c2"
            ],
            "lagdiv": [
                "c1",
                "c2"
            ],
            "lagpow": [
                "c",
                "pow",
                "maxpower"
            ],
            "lagder": [
                "c",
                "m",
                "scl",
                "axis"
            ],
            "lagint": [
                "c",
                "m",
                "k",
                "lbnd",
                "scl",
                "axis"
            ],
            "lagval": [
                "x",
                "c",
                "tensor"
            ],
            "lagval2d": [
                "x",
                "y",
                "c"
            ],
            "laggrid2d": [
                "x",
                "y",
                "c"
            ],
            "lagval3d": [
                "x",
                "y",
                "z",
                "c"
            ],
            "laggrid3d": [
                "x",
                "y",
                "z",
                "c"
            ],
            "lagvander": [
                "x",
                "deg"
            ],
            "lagvander2d": [
                "x",
                "y",
                "deg"
            ],
            "lagvander3d": [
                "x",
                "y",
                "z",
                "deg"
            ],
            "lagfit": [
                "x",
                "y",
                "deg",
                "rcond",
                "full",
                "w"
            ],
            "lagcompanion": [
                "c"
            ],
            "lagroots": [
                "c"
            ],
            "laggauss": [
                "deg"
            ],
            "lagweight": [
                "x"
            ]
        },
        "numpy.polynomial.polynomial": {
            "polyline": [
                "off",
                "scl"
            ],
            "polyfromroots": [
                "roots"
            ],
            "polyadd": [
                "c1",
                "c2"
            ],
            "polysub": [
                "c1",
                "c2"
            ],
            "polymulx": [
                "c"
            ],
            "polymul": [
                "c1",
                "c2"
            ],
            "polydiv": [
                "c1",
                "c2"
            ],
            "polypow": [
                "c",
                "pow",
                "maxpower"
            ],
            "polyder": [
                "c",
                "m",
                "scl",
                "axis"
            ],
            "polyint": [
                "c",
                "m",
                "k",
                "lbnd",
                "scl",
                "axis"
            ],
            "polyval": [
                "x",
                "c",
                "tensor"
            ],
            "polyval2d": [
                "x",
                "y",
                "c"
            ],
            "polygrid2d": [
                "x",
                "y",
                "c"
            ],
            "polyval3d": [
                "x",
                "y",
                "z",
                "c"
            ],
            "polygrid3d": [
                "x",
                "y",
                "z",
                "c"
            ],
            "polyvander": [
                "x",
                "deg"
            ],
            "polyvander2d": [
                "x",
                "y",
                "deg"
            ],
            "polyvander3d": [
                "x",
                "y",
                "z",
                "deg"
            ],
            "polyfit": [
                "x",
                "y",
                "deg",
                "rcond",
                "full",
                "w"
            ],
            "polycompanion": [
                "c"
            ],
            "polyroots": [
                "c"
            ]
        },
        "numpy.polynomial.chebyshev": {
            "_cseries_to_zseries": [
                "c"
            ],
            "_zseries_to_cseries": [
                "zs"
            ],
            "_zseries_mul": [
                "z1",
                "z2"
            ],
            "_zseries_div": [
                "z1",
                "z2"
            ],
            "_zseries_der": [
                "zs"
            ],
            "_zseries_int": [
                "zs"
            ],
            "poly2cheb": [
                "pol"
            ],
            "cheb2poly": [
                "c"
            ],
            "chebline": [
                "off",
                "scl"
            ],
            "chebfromroots": [
                "roots"
            ],
            "chebadd": [
                "c1",
                "c2"
            ],
            "chebsub": [
                "c1",
                "c2"
            ],
            "chebmulx": [
                "c"
            ],
            "chebmul": [
                "c1",
                "c2"
            ],
            "chebdiv": [
                "c1",
                "c2"
            ],
            "chebpow": [
                "c",
                "pow",
                "maxpower"
            ],
            "chebder": [
                "c",
                "m",
                "scl",
                "axis"
            ],
            "chebint": [
                "c",
                "m",
                "k",
                "lbnd",
                "scl",
                "axis"
            ],
            "chebval": [
                "x",
                "c",
                "tensor"
            ],
            "chebval2d": [
                "x",
                "y",
                "c"
            ],
            "chebgrid2d": [
                "x",
                "y",
                "c"
            ],
            "chebval3d": [
                "x",
                "y",
                "z",
                "c"
            ],
            "chebgrid3d": [
                "x",
                "y",
                "z",
                "c"
            ],
            "chebvander": [
                "x",
                "deg"
            ],
            "chebvander2d": [
                "x",
                "y",
                "deg"
            ],
            "chebvander3d": [
                "x",
                "y",
                "z",
                "deg"
            ],
            "chebfit": [
                "x",
                "y",
                "deg",
                "rcond",
                "full",
                "w"
            ],
            "chebcompanion": [
                "c"
            ],
            "chebroots": [
                "c"
            ],
            "chebgauss": [
                "deg"
            ],
            "chebweight": [
                "x"
            ],
            "chebpts1": [
                "npts"
            ],
            "chebpts2": [
                "npts"
            ]
        },
        "numpy.polynomial.legendre": {
            "poly2leg": [
                "pol"
            ],
            "leg2poly": [
                "c"
            ],
            "legline": [
                "off",
                "scl"
            ],
            "legfromroots": [
                "roots"
            ],
            "legadd": [
                "c1",
                "c2"
            ],
            "legsub": [
                "c1",
                "c2"
            ],
            "legmulx": [
                "c"
            ],
            "legmul": [
                "c1",
                "c2"
            ],
            "legdiv": [
                "c1",
                "c2"
            ],
            "legpow": [
                "c",
                "pow",
                "maxpower"
            ],
            "legder": [
                "c",
                "m",
                "scl",
                "axis"
            ],
            "legint": [
                "c",
                "m",
                "k",
                "lbnd",
                "scl",
                "axis"
            ],
            "legval": [
                "x",
                "c",
                "tensor"
            ],
            "legval2d": [
                "x",
                "y",
                "c"
            ],
            "leggrid2d": [
                "x",
                "y",
                "c"
            ],
            "legval3d": [
                "x",
                "y",
                "z",
                "c"
            ],
            "leggrid3d": [
                "x",
                "y",
                "z",
                "c"
            ],
            "legvander": [
                "x",
                "deg"
            ],
            "legvander2d": [
                "x",
                "y",
                "deg"
            ],
            "legvander3d": [
                "x",
                "y",
                "z",
                "deg"
            ],
            "legfit": [
                "x",
                "y",
                "deg",
                "rcond",
                "full",
                "w"
            ],
            "legcompanion": [
                "c"
            ],
            "legroots": [
                "c"
            ],
            "leggauss": [
                "deg"
            ],
            "legweight": [
                "x"
            ]
        },
        "numpy.polynomial.polyutils": {
            "trimseq": [
                "seq"
            ],
            "as_series": [
                "alist",
                "trim"
            ],
            "trimcoef": [
                "c",
                "tol"
            ],
            "getdomain": [
                "x"
            ],
            "mapparms": [
                "old",
                "new"
            ],
            "mapdomain": [
                "x",
                "old",
                "new"
            ],
            "RankWarning": {},
            "PolyError": {},
            "PolyDomainError": {},
            "PolyBase": {}
        },
        "numpy.polynomial.polytemplate": {},
        "numpy.polynomial.hermite": {
            "poly2herm": [
                "pol"
            ],
            "herm2poly": [
                "c"
            ],
            "hermline": [
                "off",
                "scl"
            ],
            "hermfromroots": [
                "roots"
            ],
            "hermadd": [
                "c1",
                "c2"
            ],
            "hermsub": [
                "c1",
                "c2"
            ],
            "hermmulx": [
                "c"
            ],
            "hermmul": [
                "c1",
                "c2"
            ],
            "hermdiv": [
                "c1",
                "c2"
            ],
            "hermpow": [
                "c",
                "pow",
                "maxpower"
            ],
            "hermder": [
                "c",
                "m",
                "scl",
                "axis"
            ],
            "hermint": [
                "c",
                "m",
                "k",
                "lbnd",
                "scl",
                "axis"
            ],
            "hermval": [
                "x",
                "c",
                "tensor"
            ],
            "hermval2d": [
                "x",
                "y",
                "c"
            ],
            "hermgrid2d": [
                "x",
                "y",
                "c"
            ],
            "hermval3d": [
                "x",
                "y",
                "z",
                "c"
            ],
            "hermgrid3d": [
                "x",
                "y",
                "z",
                "c"
            ],
            "hermvander": [
                "x",
                "deg"
            ],
            "hermvander2d": [
                "x",
                "y",
                "deg"
            ],
            "hermvander3d": [
                "x",
                "y",
                "z",
                "deg"
            ],
            "hermfit": [
                "x",
                "y",
                "deg",
                "rcond",
                "full",
                "w"
            ],
            "hermcompanion": [
                "c"
            ],
            "hermroots": [
                "c"
            ],
            "hermgauss": [
                "deg"
            ],
            "hermweight": [
                "x"
            ]
        },
        "numpy.polynomial": {},
        "numpy.core.setup": {
            "pythonlib_dir": [],
            "is_npy_no_signal": [],
            "is_npy_no_smp": [],
            "win32_checks": [
                "deflist"
            ],
            "check_math_capabilities": [
                "config",
                "moredefs",
                "mathlibs"
            ],
            "check_complex": [
                "config",
                "mathlibs"
            ],
            "check_ieee_macros": [
                "config"
            ],
            "check_types": [
                "config_cmd",
                "ext",
                "build_dir"
            ],
            "check_mathlib": [
                "config_cmd"
            ],
            "visibility_define": [
                "config"
            ],
            "configuration": [
                "parent_package",
                "top_path"
            ],
            "CallOnceOnly": {
                "__init__": [
                    "self"
                ],
                "check_types": [
                    "self"
                ],
                "check_ieee_macros": [
                    "self"
                ],
                "check_complex": [
                    "self"
                ]
            }
        },
        "numpy.core.info": {},
        "numpy.core.getlimits": {
            "_frz": [
                "a"
            ],
            "finfo": {
                "__new__": [
                    "cls",
                    "dtype"
                ],
                "_init": [
                    "self",
                    "dtype"
                ],
                "__str__": [
                    "self"
                ],
                "__repr__": [
                    "self"
                ]
            },
            "iinfo": {
                "__init__": [
                    "self",
                    "int_type"
                ],
                "min": [
                    "self"
                ],
                "max": [
                    "self"
                ],
                "__str__": [
                    "self"
                ],
                "__repr__": [
                    "self"
                ]
            }
        },
        "numpy.core._methods": {
            "_amax": [
                "a",
                "axis",
                "out",
                "keepdims"
            ],
            "_amin": [
                "a",
                "axis",
                "out",
                "keepdims"
            ],
            "_sum": [
                "a",
                "axis",
                "dtype",
                "out",
                "keepdims"
            ],
            "_prod": [
                "a",
                "axis",
                "dtype",
                "out",
                "keepdims"
            ],
            "_any": [
                "a",
                "axis",
                "dtype",
                "out",
                "keepdims"
            ],
            "_all": [
                "a",
                "axis",
                "dtype",
                "out",
                "keepdims"
            ],
            "_count_reduce_items": [
                "arr",
                "axis"
            ],
            "_mean": [
                "a",
                "axis",
                "dtype",
                "out",
                "keepdims"
            ],
            "_var": [
                "a",
                "axis",
                "dtype",
                "out",
                "ddof",
                "keepdims"
            ],
            "_std": [
                "a",
                "axis",
                "dtype",
                "out",
                "ddof",
                "keepdims"
            ]
        },
        "numpy.core.setup_common": {
            "is_released": [
                "config"
            ],
            "get_api_versions": [
                "apiversion",
                "codegen_dir"
            ],
            "check_api_version": [
                "apiversion",
                "codegen_dir"
            ],
            "fname2def": [
                "name"
            ],
            "sym2def": [
                "symbol"
            ],
            "type2def": [
                "symbol"
            ],
            "check_long_double_representation": [
                "cmd"
            ],
            "pyod": [
                "filename"
            ],
            "long_double_representation": [
                "lines"
            ],
            "MismatchCAPIWarning": {}
        },
        "numpy.core.shape_base": {
            "atleast_1d": [],
            "atleast_2d": [],
            "atleast_3d": [],
            "vstack": [
                "tup"
            ],
            "hstack": [
                "tup"
            ]
        },
        "numpy.core.defchararray": {
            "_use_unicode": [],
            "_to_string_or_unicode_array": [
                "result"
            ],
            "_clean_args": [],
            "_get_num_chars": [
                "a"
            ],
            "equal": [
                "x1",
                "x2"
            ],
            "not_equal": [
                "x1",
                "x2"
            ],
            "greater_equal": [
                "x1",
                "x2"
            ],
            "less_equal": [
                "x1",
                "x2"
            ],
            "greater": [
                "x1",
                "x2"
            ],
            "less": [
                "x1",
                "x2"
            ],
            "str_len": [
                "a"
            ],
            "add": [
                "x1",
                "x2"
            ],
            "multiply": [
                "a",
                "i"
            ],
            "mod": [
                "a",
                "values"
            ],
            "capitalize": [
                "a"
            ],
            "center": [
                "a",
                "width",
                "fillchar"
            ],
            "count": [
                "a",
                "sub",
                "start",
                "end"
            ],
            "decode": [
                "a",
                "encoding",
                "errors"
            ],
            "encode": [
                "a",
                "encoding",
                "errors"
            ],
            "endswith": [
                "a",
                "suffix",
                "start",
                "end"
            ],
            "expandtabs": [
                "a",
                "tabsize"
            ],
            "find": [
                "a",
                "sub",
                "start",
                "end"
            ],
            "index": [
                "a",
                "sub",
                "start",
                "end"
            ],
            "isalnum": [
                "a"
            ],
            "isalpha": [
                "a"
            ],
            "isdigit": [
                "a"
            ],
            "islower": [
                "a"
            ],
            "isspace": [
                "a"
            ],
            "istitle": [
                "a"
            ],
            "isupper": [
                "a"
            ],
            "join": [
                "sep",
                "seq"
            ],
            "ljust": [
                "a",
                "width",
                "fillchar"
            ],
            "lower": [
                "a"
            ],
            "lstrip": [
                "a",
                "chars"
            ],
            "partition": [
                "a",
                "sep"
            ],
            "replace": [
                "a",
                "old",
                "new",
                "count"
            ],
            "rfind": [
                "a",
                "sub",
                "start",
                "end"
            ],
            "rindex": [
                "a",
                "sub",
                "start",
                "end"
            ],
            "rjust": [
                "a",
                "width",
                "fillchar"
            ],
            "rpartition": [
                "a",
                "sep"
            ],
            "rsplit": [
                "a",
                "sep",
                "maxsplit"
            ],
            "rstrip": [
                "a",
                "chars"
            ],
            "split": [
                "a",
                "sep",
                "maxsplit"
            ],
            "splitlines": [
                "a",
                "keepends"
            ],
            "startswith": [
                "a",
                "prefix",
                "start",
                "end"
            ],
            "strip": [
                "a",
                "chars"
            ],
            "swapcase": [
                "a"
            ],
            "title": [
                "a"
            ],
            "translate": [
                "a",
                "table",
                "deletechars"
            ],
            "upper": [
                "a"
            ],
            "zfill": [
                "a",
                "width"
            ],
            "isnumeric": [
                "a"
            ],
            "isdecimal": [
                "a"
            ],
            "array": [
                "obj",
                "itemsize",
                "copy",
                "unicode",
                "order"
            ],
            "asarray": [
                "obj",
                "itemsize",
                "unicode",
                "order"
            ],
            "chararray": {
                "__new__": [
                    "subtype",
                    "shape",
                    "itemsize",
                    "unicode",
                    "buffer",
                    "offset",
                    "strides",
                    "order"
                ],
                "__array_finalize__": [
                    "self",
                    "obj"
                ],
                "__getitem__": [
                    "self",
                    "obj"
                ],
                "__eq__": [
                    "self",
                    "other"
                ],
                "__ne__": [
                    "self",
                    "other"
                ],
                "__ge__": [
                    "self",
                    "other"
                ],
                "__le__": [
                    "self",
                    "other"
                ],
                "__gt__": [
                    "self",
                    "other"
                ],
                "__lt__": [
                    "self",
                    "other"
                ],
                "__add__": [
                    "self",
                    "other"
                ],
                "__radd__": [
                    "self",
                    "other"
                ],
                "__mul__": [
                    "self",
                    "i"
                ],
                "__rmul__": [
                    "self",
                    "i"
                ],
                "__mod__": [
                    "self",
                    "i"
                ],
                "__rmod__": [
                    "self",
                    "other"
                ],
                "argsort": [
                    "self",
                    "axis",
                    "kind",
                    "order"
                ],
                "capitalize": [
                    "self"
                ],
                "center": [
                    "self",
                    "width",
                    "fillchar"
                ],
                "count": [
                    "self",
                    "sub",
                    "start",
                    "end"
                ],
                "decode": [
                    "self",
                    "encoding",
                    "errors"
                ],
                "encode": [
                    "self",
                    "encoding",
                    "errors"
                ],
                "endswith": [
                    "self",
                    "suffix",
                    "start",
                    "end"
                ],
                "expandtabs": [
                    "self",
                    "tabsize"
                ],
                "find": [
                    "self",
                    "sub",
                    "start",
                    "end"
                ],
                "index": [
                    "self",
                    "sub",
                    "start",
                    "end"
                ],
                "isalnum": [
                    "self"
                ],
                "isalpha": [
                    "self"
                ],
                "isdigit": [
                    "self"
                ],
                "islower": [
                    "self"
                ],
                "isspace": [
                    "self"
                ],
                "istitle": [
                    "self"
                ],
                "isupper": [
                    "self"
                ],
                "join": [
                    "self",
                    "seq"
                ],
                "ljust": [
                    "self",
                    "width",
                    "fillchar"
                ],
                "lower": [
                    "self"
                ],
                "lstrip": [
                    "self",
                    "chars"
                ],
                "partition": [
                    "self",
                    "sep"
                ],
                "replace": [
                    "self",
                    "old",
                    "new",
                    "count"
                ],
                "rfind": [
                    "self",
                    "sub",
                    "start",
                    "end"
                ],
                "rindex": [
                    "self",
                    "sub",
                    "start",
                    "end"
                ],
                "rjust": [
                    "self",
                    "width",
                    "fillchar"
                ],
                "rpartition": [
                    "self",
                    "sep"
                ],
                "rsplit": [
                    "self",
                    "sep",
                    "maxsplit"
                ],
                "rstrip": [
                    "self",
                    "chars"
                ],
                "split": [
                    "self",
                    "sep",
                    "maxsplit"
                ],
                "splitlines": [
                    "self",
                    "keepends"
                ],
                "startswith": [
                    "self",
                    "prefix",
                    "start",
                    "end"
                ],
                "strip": [
                    "self",
                    "chars"
                ],
                "swapcase": [
                    "self"
                ],
                "title": [
                    "self"
                ],
                "translate": [
                    "self",
                    "table",
                    "deletechars"
                ],
                "upper": [
                    "self"
                ],
                "zfill": [
                    "self",
                    "width"
                ],
                "isnumeric": [
                    "self"
                ],
                "isdecimal": [
                    "self"
                ]
            }
        },
        "numpy.core.numerictypes": {
            "english_lower": [
                "s"
            ],
            "english_upper": [
                "s"
            ],
            "english_capitalize": [
                "s"
            ],
            "_evalname": [
                "name"
            ],
            "bitname": [
                "obj"
            ],
            "_add_types": [],
            "_add_aliases": [],
            "_add_integer_aliases": [],
            "_set_up_aliases": [],
            "_construct_char_code_lookup": [],
            "_add_array_type": [
                "typename",
                "bits"
            ],
            "_set_array_types": [],
            "maximum_sctype": [
                "t"
            ],
            "issctype": [
                "rep"
            ],
            "obj2sctype": [
                "rep",
                "default"
            ],
            "issubclass_": [
                "arg1",
                "arg2"
            ],
            "issubsctype": [
                "arg1",
                "arg2"
            ],
            "issubdtype": [
                "arg1",
                "arg2"
            ],
            "_construct_lookups": [],
            "sctype2char": [
                "sctype"
            ],
            "_find_common_coerce": [
                "a",
                "b"
            ],
            "_can_coerce_all": [
                "dtypelist",
                "start"
            ],
            "find_common_type": [
                "array_types",
                "scalar_types"
            ],
            "_typedict": {
                "__getitem__": [
                    "self",
                    "obj"
                ]
            }
        },
        "numpy.core.arrayprint": {
            "product": [
                "x",
                "y"
            ],
            "set_printoptions": [
                "precision",
                "threshold",
                "edgeitems",
                "linewidth",
                "suppress",
                "nanstr",
                "infstr",
                "formatter"
            ],
            "get_printoptions": [],
            "_leading_trailing": [
                "a"
            ],
            "_boolFormatter": [
                "x"
            ],
            "repr_format": [
                "x"
            ],
            "_array2string": [
                "a",
                "max_line_width",
                "precision",
                "suppress_small",
                "separator",
                "prefix",
                "formatter"
            ],
            "_convert_arrays": [
                "obj"
            ],
            "array2string": [
                "a",
                "max_line_width",
                "precision",
                "suppress_small",
                "separator",
                "prefix",
                "style",
                "formatter"
            ],
            "_extendLine": [
                "s",
                "line",
                "word",
                "max_line_len",
                "next_line_prefix"
            ],
            "_formatArray": [
                "a",
                "format_function",
                "rank",
                "max_line_len",
                "next_line_prefix",
                "separator",
                "edge_items",
                "summary_insert"
            ],
            "_digits": [
                "x",
                "precision",
                "format"
            ],
            "FloatFormat": {
                "__init__": [
                    "self",
                    "data",
                    "precision",
                    "suppress_small",
                    "sign"
                ],
                "fillFormat": [
                    "self",
                    "data"
                ],
                "__call__": [
                    "self",
                    "x",
                    "strip_zeros"
                ]
            },
            "IntegerFormat": {
                "__init__": [
                    "self",
                    "data"
                ],
                "__call__": [
                    "self",
                    "x"
                ]
            },
            "LongFloatFormat": {
                "__init__": [
                    "self",
                    "precision",
                    "sign"
                ],
                "__call__": [
                    "self",
                    "x"
                ]
            },
            "LongComplexFormat": {
                "__init__": [
                    "self",
                    "precision"
                ],
                "__call__": [
                    "self",
                    "x"
                ]
            },
            "ComplexFormat": {
                "__init__": [
                    "self",
                    "x",
                    "precision",
                    "suppress_small"
                ],
                "__call__": [
                    "self",
                    "x"
                ]
            },
            "DatetimeFormat": {
                "__init__": [
                    "self",
                    "x",
                    "unit",
                    "timezone",
                    "casting"
                ],
                "__call__": [
                    "self",
                    "x"
                ]
            },
            "TimedeltaFormat": {
                "__init__": [
                    "self",
                    "data"
                ],
                "__call__": [
                    "self",
                    "x"
                ]
            }
        },
        "numpy.core.memmap": {
            "memmap": {
                "__new__": [
                    "subtype",
                    "filename",
                    "dtype",
                    "mode",
                    "offset",
                    "shape",
                    "order"
                ],
                "__array_finalize__": [
                    "self",
                    "obj"
                ],
                "flush": [
                    "self"
                ]
            }
        },
        "numpy.core._internal": {
            "_makenames_list": [
                "adict",
                "align"
            ],
            "_usefields": [
                "adict",
                "align"
            ],
            "_array_descr": [
                "descriptor"
            ],
            "_reconstruct": [
                "subtype",
                "shape",
                "dtype"
            ],
            "_commastring": [
                "astr"
            ],
            "_getintp_ctype": [],
            "_newnames": [
                "datatype",
                "order"
            ],
            "_index_fields": [
                "ary",
                "fields"
            ],
            "_dtype_from_pep3118": [
                "spec",
                "byteorder",
                "is_subdtype"
            ],
            "_add_trailing_padding": [
                "value",
                "padding"
            ],
            "_prod": [
                "a"
            ],
            "_gcd": [
                "a",
                "b"
            ],
            "_missing_ctypes": {
                "cast": [
                    "self",
                    "num",
                    "obj"
                ],
                "c_void_p": [
                    "self",
                    "num"
                ]
            },
            "_ctypes": {
                "__init__": [
                    "self",
                    "array",
                    "ptr"
                ],
                "data_as": [
                    "self",
                    "obj"
                ],
                "shape_as": [
                    "self",
                    "obj"
                ],
                "strides_as": [
                    "self",
                    "obj"
                ],
                "get_data": [
                    "self"
                ],
                "get_shape": [
                    "self"
                ],
                "get_strides": [
                    "self"
                ],
                "get_as_parameter": [
                    "self"
                ]
            }
        },
        "numpy.core.function_base": {
            "linspace": [
                "start",
                "stop",
                "num",
                "endpoint",
                "retstep"
            ],
            "logspace": [
                "start",
                "stop",
                "num",
                "endpoint",
                "base"
            ]
        },
        "numpy.core.machar": {
            "MachAr": {
                "__init__": [
                    "self",
                    "float_conv",
                    "int_conv",
                    "float_to_float",
                    "float_to_str",
                    "title"
                ],
                "_do_init": [
                    "self",
                    "float_conv",
                    "int_conv",
                    "float_to_float",
                    "float_to_str",
                    "title"
                ],
                "__str__": [
                    "self"
                ]
            }
        },
        "numpy.core.records": {
            "find_duplicate": [
                "list"
            ],
            "fromarrays": [
                "arrayList",
                "dtype",
                "shape",
                "formats",
                "names",
                "titles",
                "aligned",
                "byteorder"
            ],
            "fromrecords": [
                "recList",
                "dtype",
                "shape",
                "formats",
                "names",
                "titles",
                "aligned",
                "byteorder"
            ],
            "fromstring": [
                "datastring",
                "dtype",
                "shape",
                "offset",
                "formats",
                "names",
                "titles",
                "aligned",
                "byteorder"
            ],
            "get_remaining_size": [
                "fd"
            ],
            "fromfile": [
                "fd",
                "dtype",
                "shape",
                "offset",
                "formats",
                "names",
                "titles",
                "aligned",
                "byteorder"
            ],
            "array": [
                "obj",
                "dtype",
                "shape",
                "offset",
                "strides",
                "formats",
                "names",
                "titles",
                "aligned",
                "byteorder",
                "copy"
            ],
            "format_parser": {
                "__init__": [
                    "self",
                    "formats",
                    "names",
                    "titles",
                    "aligned",
                    "byteorder"
                ],
                "_parseFormats": [
                    "self",
                    "formats",
                    "aligned"
                ],
                "_setfieldnames": [
                    "self",
                    "names",
                    "titles"
                ],
                "_createdescr": [
                    "self",
                    "byteorder"
                ]
            },
            "record": {
                "__repr__": [
                    "self"
                ],
                "__str__": [
                    "self"
                ],
                "__getattribute__": [
                    "self",
                    "attr"
                ],
                "__setattr__": [
                    "self",
                    "attr",
                    "val"
                ],
                "pprint": [
                    "self"
                ]
            },
            "recarray": {
                "__new__": [
                    "subtype",
                    "shape",
                    "dtype",
                    "buf",
                    "offset",
                    "strides",
                    "formats",
                    "names",
                    "titles",
                    "byteorder",
                    "aligned",
                    "order"
                ],
                "__getattribute__": [
                    "self",
                    "attr"
                ],
                "__setattr__": [
                    "self",
                    "attr",
                    "val"
                ],
                "__getitem__": [
                    "self",
                    "indx"
                ],
                "__repr__": [
                    "self"
                ],
                "field": [
                    "self",
                    "attr",
                    "val"
                ],
                "view": [
                    "self",
                    "dtype",
                    "type"
                ]
            }
        },
        "numpy.core.fromnumeric": {
            "_wrapit": [
                "obj",
                "method"
            ],
            "take": [
                "a",
                "indices",
                "axis",
                "out",
                "mode"
            ],
            "reshape": [
                "a",
                "newshape",
                "order"
            ],
            "choose": [
                "a",
                "choices",
                "out",
                "mode"
            ],
            "repeat": [
                "a",
                "repeats",
                "axis"
            ],
            "put": [
                "a",
                "ind",
                "v",
                "mode"
            ],
            "swapaxes": [
                "a",
                "axis1",
                "axis2"
            ],
            "transpose": [
                "a",
                "axes"
            ],
            "partition": [
                "a",
                "kth",
                "axis",
                "kind",
                "order"
            ],
            "argpartition": [
                "a",
                "kth",
                "axis",
                "kind",
                "order"
            ],
            "sort": [
                "a",
                "axis",
                "kind",
                "order"
            ],
            "argsort": [
                "a",
                "axis",
                "kind",
                "order"
            ],
            "argmax": [
                "a",
                "axis"
            ],
            "argmin": [
                "a",
                "axis"
            ],
            "searchsorted": [
                "a",
                "v",
                "side",
                "sorter"
            ],
            "resize": [
                "a",
                "new_shape"
            ],
            "squeeze": [
                "a",
                "axis"
            ],
            "diagonal": [
                "a",
                "offset",
                "axis1",
                "axis2"
            ],
            "trace": [
                "a",
                "offset",
                "axis1",
                "axis2",
                "dtype",
                "out"
            ],
            "ravel": [
                "a",
                "order"
            ],
            "nonzero": [
                "a"
            ],
            "shape": [
                "a"
            ],
            "compress": [
                "condition",
                "a",
                "axis",
                "out"
            ],
            "clip": [
                "a",
                "a_min",
                "a_max",
                "out"
            ],
            "sum": [
                "a",
                "axis",
                "dtype",
                "out",
                "keepdims"
            ],
            "product": [
                "a",
                "axis",
                "dtype",
                "out",
                "keepdims"
            ],
            "sometrue": [
                "a",
                "axis",
                "out",
                "keepdims"
            ],
            "alltrue": [
                "a",
                "axis",
                "out",
                "keepdims"
            ],
            "any": [
                "a",
                "axis",
                "out",
                "keepdims"
            ],
            "all": [
                "a",
                "axis",
                "out",
                "keepdims"
            ],
            "cumsum": [
                "a",
                "axis",
                "dtype",
                "out"
            ],
            "cumproduct": [
                "a",
                "axis",
                "dtype",
                "out"
            ],
            "ptp": [
                "a",
                "axis",
                "out"
            ],
            "amax": [
                "a",
                "axis",
                "out",
                "keepdims"
            ],
            "amin": [
                "a",
                "axis",
                "out",
                "keepdims"
            ],
            "alen": [
                "a"
            ],
            "prod": [
                "a",
                "axis",
                "dtype",
                "out",
                "keepdims"
            ],
            "cumprod": [
                "a",
                "axis",
                "dtype",
                "out"
            ],
            "ndim": [
                "a"
            ],
            "rank": [
                "a"
            ],
            "size": [
                "a",
                "axis"
            ],
            "around": [
                "a",
                "decimals",
                "out"
            ],
            "round_": [
                "a",
                "decimals",
                "out"
            ],
            "mean": [
                "a",
                "axis",
                "dtype",
                "out",
                "keepdims"
            ],
            "std": [
                "a",
                "axis",
                "dtype",
                "out",
                "ddof",
                "keepdims"
            ],
            "var": [
                "a",
                "axis",
                "dtype",
                "out",
                "ddof",
                "keepdims"
            ]
        },
        "numpy.core": {
            "_ufunc_reconstruct": [
                "module",
                "name"
            ],
            "_ufunc_reduce": [
                "func"
            ]
        },
        "numpy.core.numeric": {
            "zeros_like": [
                "a",
                "dtype",
                "order",
                "subok"
            ],
            "ones": [
                "shape",
                "dtype",
                "order"
            ],
            "ones_like": [
                "a",
                "dtype",
                "order",
                "subok"
            ],
            "full": [
                "shape",
                "fill_value",
                "dtype",
                "order"
            ],
            "full_like": [
                "a",
                "fill_value",
                "dtype",
                "order",
                "subok"
            ],
            "extend_all": [
                "module"
            ],
            "asarray": [
                "a",
                "dtype",
                "order"
            ],
            "asanyarray": [
                "a",
                "dtype",
                "order"
            ],
            "ascontiguousarray": [
                "a",
                "dtype"
            ],
            "asfortranarray": [
                "a",
                "dtype"
            ],
            "require": [
                "a",
                "dtype",
                "requirements"
            ],
            "isfortran": [
                "a"
            ],
            "argwhere": [
                "a"
            ],
            "flatnonzero": [
                "a"
            ],
            "_mode_from_name": [
                "mode"
            ],
            "correlate": [
                "a",
                "v",
                "mode",
                "old_behavior"
            ],
            "convolve": [
                "a",
                "v",
                "mode"
            ],
            "outer": [
                "a",
                "b"
            ],
            "tensordot": [
                "a",
                "b",
                "axes"
            ],
            "roll": [
                "a",
                "shift",
                "axis"
            ],
            "rollaxis": [
                "a",
                "axis",
                "start"
            ],
            "_move_axis_to_0": [
                "a",
                "axis"
            ],
            "cross": [
                "a",
                "b",
                "axisa",
                "axisb",
                "axisc",
                "axis"
            ],
            "array_repr": [
                "arr",
                "max_line_width",
                "precision",
                "suppress_small"
            ],
            "array_str": [
                "a",
                "max_line_width",
                "precision",
                "suppress_small"
            ],
            "set_string_function": [
                "f",
                "repr"
            ],
            "indices": [
                "dimensions",
                "dtype"
            ],
            "fromfunction": [
                "function",
                "shape"
            ],
            "isscalar": [
                "num"
            ],
            "binary_repr": [
                "num",
                "width"
            ],
            "base_repr": [
                "number",
                "base",
                "padding"
            ],
            "load": [
                "file"
            ],
            "_maketup": [
                "descr",
                "val"
            ],
            "identity": [
                "n",
                "dtype"
            ],
            "allclose": [
                "a",
                "b",
                "rtol",
                "atol"
            ],
            "isclose": [
                "a",
                "b",
                "rtol",
                "atol",
                "equal_nan"
            ],
            "array_equal": [
                "a1",
                "a2"
            ],
            "array_equiv": [
                "a1",
                "a2"
            ],
            "seterr": [
                "all",
                "divide",
                "over",
                "under",
                "invalid"
            ],
            "geterr": [],
            "setbufsize": [
                "size"
            ],
            "getbufsize": [],
            "seterrcall": [
                "func"
            ],
            "geterrcall": [],
            "_setdef": [],
            "ComplexWarning": {},
            "_unspecified": {},
            "errstate": {
                "__init__": [
                    "self"
                ],
                "__enter__": [
                    "self"
                ],
                "__exit__": [
                    "self"
                ]
            }
        },
        "numpy.core.code_generators.generate_umath": {
            "build_func_data": [
                "types",
                "f"
            ],
            "TD": [
                "types",
                "f",
                "astype",
                "in_",
                "out"
            ],
            "english_upper": [
                "s"
            ],
            "indent": [
                "st",
                "spaces"
            ],
            "make_arrays": [
                "funcdict"
            ],
            "make_ufuncs": [
                "funcdict"
            ],
            "make_code": [
                "funcdict",
                "filename"
            ],
            "FullTypeDescr": {},
            "TypeDescription": {
                "__init__": [
                    "self",
                    "type",
                    "f",
                    "in_",
                    "out",
                    "astype"
                ],
                "finish_signature": [
                    "self",
                    "nin",
                    "nout"
                ]
            },
            "Ufunc": {
                "__init__": [
                    "self",
                    "nin",
                    "nout",
                    "identity",
                    "docstring",
                    "typereso"
                ]
            }
        },
        "numpy.core.code_generators.genapi": {
            "file_in_this_dir": [
                "filename"
            ],
            "remove_whitespace": [
                "s"
            ],
            "_repl": [
                "str"
            ],
            "skip_brackets": [
                "s",
                "lbrac",
                "rbrac"
            ],
            "split_arguments": [
                "argstr"
            ],
            "find_functions": [
                "filename",
                "tag"
            ],
            "should_rebuild": [
                "targets",
                "source_files"
            ],
            "order_dict": [
                "d"
            ],
            "merge_api_dicts": [
                "dicts"
            ],
            "check_api_dict": [
                "d"
            ],
            "get_api_functions": [
                "tagname",
                "api_dict"
            ],
            "fullapi_hash": [
                "api_dicts"
            ],
            "get_versions_hash": [],
            "main": [],
            "Function": {
                "__init__": [
                    "self",
                    "name",
                    "return_type",
                    "args",
                    "doc"
                ],
                "_format_arg": [
                    "self",
                    "typename",
                    "name"
                ],
                "__str__": [
                    "self"
                ],
                "to_ReST": [
                    "self"
                ],
                "api_hash": [
                    "self"
                ]
            },
            "ParseError": {
                "__init__": [
                    "self",
                    "filename",
                    "lineno",
                    "msg"
                ],
                "__str__": [
                    "self"
                ]
            },
            "TypeApi": {
                "__init__": [
                    "self",
                    "name",
                    "index",
                    "ptr_cast",
                    "api_name"
                ],
                "define_from_array_api_string": [
                    "self"
                ],
                "array_api_define": [
                    "self"
                ],
                "internal_define": [
                    "self"
                ]
            },
            "GlobalVarApi": {
                "__init__": [
                    "self",
                    "name",
                    "index",
                    "type",
                    "api_name"
                ],
                "define_from_array_api_string": [
                    "self"
                ],
                "array_api_define": [
                    "self"
                ],
                "internal_define": [
                    "self"
                ]
            },
            "BoolValuesApi": {
                "__init__": [
                    "self",
                    "name",
                    "index",
                    "api_name"
                ],
                "define_from_array_api_string": [
                    "self"
                ],
                "array_api_define": [
                    "self"
                ],
                "internal_define": [
                    "self"
                ]
            },
            "FunctionApi": {
                "__init__": [
                    "self",
                    "name",
                    "index",
                    "return_type",
                    "args",
                    "api_name"
                ],
                "_argtypes_string": [
                    "self"
                ],
                "define_from_array_api_string": [
                    "self"
                ],
                "array_api_define": [
                    "self"
                ],
                "internal_define": [
                    "self"
                ]
            }
        },
        "numpy.core.code_generators.generate_ufunc_api": {
            "generate_api": [
                "output_dir",
                "force"
            ],
            "do_generate_api": [
                "targets",
                "sources"
            ]
        },
        "numpy.core.code_generators.ufunc_docstrings": {
            "get": [
                "name"
            ],
            "add_newdoc": [
                "place",
                "name",
                "doc"
            ]
        },
        "numpy.core.code_generators.cversions": {},
        "numpy.core.code_generators.numpy_api": {},
        "numpy.core.code_generators.generate_numpy_api": {
            "generate_api": [
                "output_dir",
                "force"
            ],
            "do_generate_api": [
                "targets",
                "sources"
            ]
        },
        "numpy.core.code_generators": {},
        "numpy.ma.setup": {
            "configuration": [
                "parent_package",
                "top_path"
            ]
        },
        "numpy.ma.core": {
            "doc_note": [
                "initialdoc",
                "note"
            ],
            "get_object_signature": [
                "obj"
            ],
            "default_fill_value": [
                "obj"
            ],
            "_recursive_extremum_fill_value": [
                "ndtype",
                "extremum"
            ],
            "minimum_fill_value": [
                "obj"
            ],
            "maximum_fill_value": [
                "obj"
            ],
            "_recursive_set_default_fill_value": [
                "dtypedescr"
            ],
            "_recursive_set_fill_value": [
                "fillvalue",
                "dtypedescr"
            ],
            "_check_fill_value": [
                "fill_value",
                "ndtype"
            ],
            "set_fill_value": [
                "a",
                "fill_value"
            ],
            "get_fill_value": [
                "a"
            ],
            "common_fill_value": [
                "a",
                "b"
            ],
            "filled": [
                "a",
                "fill_value"
            ],
            "get_masked_subclass": [],
            "getdata": [
                "a",
                "subok"
            ],
            "fix_invalid": [
                "a",
                "mask",
                "copy",
                "fill_value"
            ],
            "_recursive_make_descr": [
                "datatype",
                "newtype"
            ],
            "make_mask_descr": [
                "ndtype"
            ],
            "getmask": [
                "a"
            ],
            "getmaskarray": [
                "arr"
            ],
            "is_mask": [
                "m"
            ],
            "make_mask": [
                "m",
                "copy",
                "shrink",
                "dtype"
            ],
            "make_mask_none": [
                "newshape",
                "dtype"
            ],
            "mask_or": [
                "m1",
                "m2",
                "copy",
                "shrink"
            ],
            "flatten_mask": [
                "mask"
            ],
            "_check_mask_axis": [
                "mask",
                "axis"
            ],
            "masked_where": [
                "condition",
                "a",
                "copy"
            ],
            "masked_greater": [
                "x",
                "value",
                "copy"
            ],
            "masked_greater_equal": [
                "x",
                "value",
                "copy"
            ],
            "masked_less": [
                "x",
                "value",
                "copy"
            ],
            "masked_less_equal": [
                "x",
                "value",
                "copy"
            ],
            "masked_not_equal": [
                "x",
                "value",
                "copy"
            ],
            "masked_equal": [
                "x",
                "value",
                "copy"
            ],
            "masked_inside": [
                "x",
                "v1",
                "v2",
                "copy"
            ],
            "masked_outside": [
                "x",
                "v1",
                "v2",
                "copy"
            ],
            "masked_object": [
                "x",
                "value",
                "copy",
                "shrink"
            ],
            "masked_values": [
                "x",
                "value",
                "rtol",
                "atol",
                "copy",
                "shrink"
            ],
            "masked_invalid": [
                "a",
                "copy"
            ],
            "_recursive_printoption": [
                "result",
                "mask",
                "printopt"
            ],
            "_recursive_filled": [
                "a",
                "mask",
                "fill_value"
            ],
            "flatten_structured_array": [
                "a"
            ],
            "_mareconstruct": [
                "subtype",
                "baseclass",
                "baseshape",
                "basetype"
            ],
            "isMaskedArray": [
                "x"
            ],
            "array": [
                "data",
                "dtype",
                "copy",
                "order",
                "mask",
                "fill_value",
                "keep_mask",
                "hard_mask",
                "shrink",
                "subok",
                "ndmin"
            ],
            "is_masked": [
                "x"
            ],
            "min": [
                "obj",
                "axis",
                "out",
                "fill_value"
            ],
            "max": [
                "obj",
                "axis",
                "out",
                "fill_value"
            ],
            "ptp": [
                "obj",
                "axis",
                "out",
                "fill_value"
            ],
            "take": [
                "a",
                "indices",
                "axis",
                "out",
                "mode"
            ],
            "power": [
                "a",
                "b",
                "third"
            ],
            "argsort": [
                "a",
                "axis",
                "kind",
                "order",
                "fill_value"
            ],
            "argmin": [
                "a",
                "axis",
                "fill_value"
            ],
            "argmax": [
                "a",
                "axis",
                "fill_value"
            ],
            "sort": [
                "a",
                "axis",
                "kind",
                "order",
                "endwith",
                "fill_value"
            ],
            "compressed": [
                "x"
            ],
            "concatenate": [
                "arrays",
                "axis"
            ],
            "count": [
                "a",
                "axis"
            ],
            "diag": [
                "v",
                "k"
            ],
            "expand_dims": [
                "x",
                "axis"
            ],
            "left_shift": [
                "a",
                "n"
            ],
            "right_shift": [
                "a",
                "n"
            ],
            "put": [
                "a",
                "indices",
                "values",
                "mode"
            ],
            "putmask": [
                "a",
                "mask",
                "values"
            ],
            "transpose": [
                "a",
                "axes"
            ],
            "reshape": [
                "a",
                "new_shape",
                "order"
            ],
            "resize": [
                "x",
                "new_shape"
            ],
            "rank": [
                "obj"
            ],
            "shape": [
                "obj"
            ],
            "size": [
                "obj",
                "axis"
            ],
            "where": [
                "condition",
                "x",
                "y"
            ],
            "choose": [
                "indices",
                "choices",
                "out",
                "mode"
            ],
            "round_": [
                "a",
                "decimals",
                "out"
            ],
            "inner": [
                "a",
                "b"
            ],
            "outer": [
                "a",
                "b"
            ],
            "allequal": [
                "a",
                "b",
                "fill_value"
            ],
            "allclose": [
                "a",
                "b",
                "masked_equal",
                "rtol",
                "atol"
            ],
            "asarray": [
                "a",
                "dtype",
                "order"
            ],
            "asanyarray": [
                "a",
                "dtype"
            ],
            "dump": [
                "a",
                "F"
            ],
            "dumps": [
                "a"
            ],
            "load": [
                "F"
            ],
            "loads": [
                "strg"
            ],
            "fromfile": [
                "file",
                "dtype",
                "count",
                "sep"
            ],
            "fromflex": [
                "fxarray"
            ],
            "MAError": {},
            "MaskError": {},
            "_DomainCheckInterval": {
                "__init__": [
                    "self",
                    "a",
                    "b"
                ],
                "__call__": [
                    "self",
                    "x"
                ]
            },
            "_DomainTan": {
                "__init__": [
                    "self",
                    "eps"
                ],
                "__call__": [
                    "self",
                    "x"
                ]
            },
            "_DomainSafeDivide": {
                "__init__": [
                    "self",
                    "tolerance"
                ],
                "__call__": [
                    "self",
                    "a",
                    "b"
                ]
            },
            "_DomainGreater": {
                "__init__": [
                    "self",
                    "critical_value"
                ],
                "__call__": [
                    "self",
                    "x"
                ]
            },
            "_DomainGreaterEqual": {
                "__init__": [
                    "self",
                    "critical_value"
                ],
                "__call__": [
                    "self",
                    "x"
                ]
            },
            "_MaskedUnaryOperation": {
                "__init__": [
                    "self",
                    "mufunc",
                    "fill",
                    "domain"
                ],
                "__call__": [
                    "self",
                    "a"
                ],
                "__str__": [
                    "self"
                ]
            },
            "_MaskedBinaryOperation": {
                "__init__": [
                    "self",
                    "mbfunc",
                    "fillx",
                    "filly"
                ],
                "__call__": [
                    "self",
                    "a",
                    "b"
                ],
                "reduce": [
                    "self",
                    "target",
                    "axis",
                    "dtype"
                ],
                "outer": [
                    "self",
                    "a",
                    "b"
                ],
                "accumulate": [
                    "self",
                    "target",
                    "axis"
                ],
                "__str__": [
                    "self"
                ]
            },
            "_DomainedBinaryOperation": {
                "__init__": [
                    "self",
                    "dbfunc",
                    "domain",
                    "fillx",
                    "filly"
                ],
                "__call__": [
                    "self",
                    "a",
                    "b"
                ],
                "__str__": [
                    "self"
                ]
            },
            "_MaskedPrintOption": {
                "__init__": [
                    "self",
                    "display"
                ],
                "display": [
                    "self"
                ],
                "set_display": [
                    "self",
                    "s"
                ],
                "enabled": [
                    "self"
                ],
                "enable": [
                    "self",
                    "shrink"
                ],
                "__str__": [
                    "self"
                ]
            },
            "_arraymethod": {
                "__init__": [
                    "self",
                    "funcname",
                    "onmask"
                ],
                "getdoc": [
                    "self"
                ],
                "__get__": [
                    "self",
                    "obj",
                    "objtype"
                ],
                "__call__": [
                    "self"
                ]
            },
            "MaskedIterator": {
                "__init__": [
                    "self",
                    "ma"
                ],
                "__iter__": [
                    "self"
                ],
                "__getitem__": [
                    "self",
                    "indx"
                ],
                "__setitem__": [
                    "self",
                    "index",
                    "value"
                ],
                "__next__": [
                    "self"
                ]
            },
            "MaskedArray": {
                "__new__": [
                    "cls",
                    "data",
                    "mask",
                    "dtype",
                    "copy",
                    "subok",
                    "ndmin",
                    "fill_value",
                    "keep_mask",
                    "hard_mask",
                    "shrink"
                ],
                "_update_from": [
                    "self",
                    "obj"
                ],
                "__array_finalize__": [
                    "self",
                    "obj"
                ],
                "__array_wrap__": [
                    "self",
                    "obj",
                    "context"
                ],
                "view": [
                    "self",
                    "dtype",
                    "type",
                    "fill_value"
                ],
                "astype": [
                    "self",
                    "newtype"
                ],
                "__getitem__": [
                    "self",
                    "indx"
                ],
                "__setitem__": [
                    "self",
                    "indx",
                    "value"
                ],
                "__getslice__": [
                    "self",
                    "i",
                    "j"
                ],
                "__setslice__": [
                    "self",
                    "i",
                    "j",
                    "value"
                ],
                "__setmask__": [
                    "self",
                    "mask",
                    "copy"
                ],
                "_get_mask": [
                    "self"
                ],
                "_get_recordmask": [
                    "self"
                ],
                "_set_recordmask": [
                    "self"
                ],
                "harden_mask": [
                    "self"
                ],
                "soften_mask": [
                    "self"
                ],
                "unshare_mask": [
                    "self"
                ],
                "shrink_mask": [
                    "self"
                ],
                "_get_data": [
                    "self"
                ],
                "_get_flat": [
                    "self"
                ],
                "_set_flat": [
                    "self",
                    "value"
                ],
                "get_fill_value": [
                    "self"
                ],
                "set_fill_value": [
                    "self",
                    "value"
                ],
                "filled": [
                    "self",
                    "fill_value"
                ],
                "compressed": [
                    "self"
                ],
                "compress": [
                    "self",
                    "condition",
                    "axis",
                    "out"
                ],
                "__str__": [
                    "self"
                ],
                "__repr__": [
                    "self"
                ],
                "__eq__": [
                    "self",
                    "other"
                ],
                "__ne__": [
                    "self",
                    "other"
                ],
                "__add__": [
                    "self",
                    "other"
                ],
                "__radd__": [
                    "self",
                    "other"
                ],
                "__sub__": [
                    "self",
                    "other"
                ],
                "__rsub__": [
                    "self",
                    "other"
                ],
                "__mul__": [
                    "self",
                    "other"
                ],
                "__rmul__": [
                    "self",
                    "other"
                ],
                "__div__": [
                    "self",
                    "other"
                ],
                "__truediv__": [
                    "self",
                    "other"
                ],
                "__rtruediv__": [
                    "self",
                    "other"
                ],
                "__floordiv__": [
                    "self",
                    "other"
                ],
                "__rfloordiv__": [
                    "self",
                    "other"
                ],
                "__pow__": [
                    "self",
                    "other"
                ],
                "__rpow__": [
                    "self",
                    "other"
                ],
                "__iadd__": [
                    "self",
                    "other"
                ],
                "__isub__": [
                    "self",
                    "other"
                ],
                "__imul__": [
                    "self",
                    "other"
                ],
                "__idiv__": [
                    "self",
                    "other"
                ],
                "__ifloordiv__": [
                    "self",
                    "other"
                ],
                "__itruediv__": [
                    "self",
                    "other"
                ],
                "__ipow__": [
                    "self",
                    "other"
                ],
                "__float__": [
                    "self"
                ],
                "__int__": [
                    "self"
                ],
                "get_imag": [
                    "self"
                ],
                "get_real": [
                    "self"
                ],
                "count": [
                    "self",
                    "axis"
                ],
                "ravel": [
                    "self"
                ],
                "reshape": [
                    "self"
                ],
                "resize": [
                    "self",
                    "newshape",
                    "refcheck",
                    "order"
                ],
                "put": [
                    "self",
                    "indices",
                    "values",
                    "mode"
                ],
                "ids": [
                    "self"
                ],
                "iscontiguous": [
                    "self"
                ],
                "all": [
                    "self",
                    "axis",
                    "out"
                ],
                "any": [
                    "self",
                    "axis",
                    "out"
                ],
                "nonzero": [
                    "self"
                ],
                "trace": [
                    "self",
                    "offset",
                    "axis1",
                    "axis2",
                    "dtype",
                    "out"
                ],
                "sum": [
                    "self",
                    "axis",
                    "dtype",
                    "out"
                ],
                "cumsum": [
                    "self",
                    "axis",
                    "dtype",
                    "out"
                ],
                "prod": [
                    "self",
                    "axis",
                    "dtype",
                    "out"
                ],
                "cumprod": [
                    "self",
                    "axis",
                    "dtype",
                    "out"
                ],
                "mean": [
                    "self",
                    "axis",
                    "dtype",
                    "out"
                ],
                "anom": [
                    "self",
                    "axis",
                    "dtype"
                ],
                "var": [
                    "self",
                    "axis",
                    "dtype",
                    "out",
                    "ddof"
                ],
                "std": [
                    "self",
                    "axis",
                    "dtype",
                    "out",
                    "ddof"
                ],
                "round": [
                    "self",
                    "decimals",
                    "out"
                ],
                "argsort": [
                    "self",
                    "axis",
                    "kind",
                    "order",
                    "fill_value"
                ],
                "argmin": [
                    "self",
                    "axis",
                    "fill_value",
                    "out"
                ],
                "argmax": [
                    "self",
                    "axis",
                    "fill_value",
                    "out"
                ],
                "sort": [
                    "self",
                    "axis",
                    "kind",
                    "order",
                    "endwith",
                    "fill_value"
                ],
                "min": [
                    "self",
                    "axis",
                    "out",
                    "fill_value"
                ],
                "mini": [
                    "self",
                    "axis"
                ],
                "max": [
                    "self",
                    "axis",
                    "out",
                    "fill_value"
                ],
                "ptp": [
                    "self",
                    "axis",
                    "out",
                    "fill_value"
                ],
                "take": [
                    "self",
                    "indices",
                    "axis",
                    "out",
                    "mode"
                ],
                "tolist": [
                    "self",
                    "fill_value"
                ],
                "tostring": [
                    "self",
                    "fill_value",
                    "order"
                ],
                "tofile": [
                    "self",
                    "fid",
                    "sep",
                    "format"
                ],
                "toflex": [
                    "self"
                ],
                "__getstate__": [
                    "self"
                ],
                "__setstate__": [
                    "self",
                    "state"
                ],
                "__reduce__": [
                    "self"
                ],
                "__deepcopy__": [
                    "self",
                    "memo"
                ]
            },
            "mvoid": {
                "__new__": [
                    "self",
                    "data",
                    "mask",
                    "dtype",
                    "fill_value",
                    "hardmask"
                ],
                "_get_data": [
                    "self"
                ],
                "__getitem__": [
                    "self",
                    "indx"
                ],
                "__setitem__": [
                    "self",
                    "indx",
                    "value"
                ],
                "__str__": [
                    "self"
                ],
                "__repr__": [
                    "self"
                ],
                "__iter__": [
                    "self"
                ],
                "__len__": [
                    "self"
                ],
                "filled": [
                    "self",
                    "fill_value"
                ],
                "tolist": [
                    "self"
                ]
            },
            "MaskedConstant": {
                "__new__": [
                    "self"
                ],
                "__array_finalize__": [
                    "self",
                    "obj"
                ],
                "__array_wrap__": [
                    "self",
                    "obj"
                ],
                "__str__": [
                    "self"
                ],
                "__repr__": [
                    "self"
                ],
                "flatten": [
                    "self"
                ],
                "__reduce__": [
                    "self"
                ]
            },
            "_extrema_operation": {
                "__call__": [
                    "self",
                    "a",
                    "b"
                ],
                "reduce": [
                    "self",
                    "target",
                    "axis"
                ],
                "outer": [
                    "self",
                    "a",
                    "b"
                ]
            },
            "_minimum_operation": {
                "__init__": [
                    "self"
                ]
            },
            "_maximum_operation": {
                "__init__": [
                    "self"
                ]
            },
            "_frommethod": {
                "__init__": [
                    "self",
                    "methodname",
                    "reversed"
                ],
                "getdoc": [
                    "self"
                ],
                "__call__": [
                    "self",
                    "a"
                ]
            },
            "_convert2ma": {
                "__init__": [
                    "self",
                    "funcname",
                    "params"
                ],
                "getdoc": [
                    "self"
                ],
                "__call__": [
                    "self",
                    "a"
                ]
            }
        },
        "numpy.ma.bench": {
            "timer": [
                "s",
                "v",
                "nloop",
                "nrep"
            ],
            "compare_functions_1v": [
                "func",
                "nloop",
                "xs",
                "nmxs",
                "xl",
                "nmxl"
            ],
            "compare_methods": [
                "methodname",
                "args",
                "vars",
                "nloop",
                "test",
                "xs",
                "nmxs",
                "xl",
                "nmxl"
            ],
            "compare_functions_2v": [
                "func",
                "nloop",
                "test",
                "xs",
                "nmxs",
                "ys",
                "nmys",
                "xl",
                "nmxl",
                "yl",
                "nmyl"
            ]
        },
        "numpy.ma.testutils": {
            "approx": [
                "a",
                "b",
                "fill_value",
                "rtol",
                "atol"
            ],
            "almost": [
                "a",
                "b",
                "decimal",
                "fill_value"
            ],
            "_assert_equal_on_sequences": [
                "actual",
                "desired",
                "err_msg"
            ],
            "assert_equal_records": [
                "a",
                "b"
            ],
            "assert_equal": [
                "actual",
                "desired",
                "err_msg"
            ],
            "fail_if_equal": [
                "actual",
                "desired",
                "err_msg"
            ],
            "assert_almost_equal": [
                "actual",
                "desired",
                "decimal",
                "err_msg",
                "verbose"
            ],
            "assert_array_compare": [
                "comparison",
                "x",
                "y",
                "err_msg",
                "verbose",
                "header",
                "fill_value"
            ],
            "assert_array_equal": [
                "x",
                "y",
                "err_msg",
                "verbose"
            ],
            "fail_if_array_equal": [
                "x",
                "y",
                "err_msg",
                "verbose"
            ],
            "assert_array_approx_equal": [
                "x",
                "y",
                "decimal",
                "err_msg",
                "verbose"
            ],
            "assert_array_almost_equal": [
                "x",
                "y",
                "decimal",
                "err_msg",
                "verbose"
            ],
            "assert_array_less": [
                "x",
                "y",
                "err_msg",
                "verbose"
            ],
            "assert_mask_equal": [
                "m1",
                "m2",
                "err_msg"
            ]
        },
        "numpy.ma.extras": {
            "issequence": [
                "seq"
            ],
            "count_masked": [
                "arr",
                "axis"
            ],
            "masked_all": [
                "shape",
                "dtype"
            ],
            "masked_all_like": [
                "arr"
            ],
            "flatten_inplace": [
                "seq"
            ],
            "apply_along_axis": [
                "func1d",
                "axis",
                "arr"
            ],
            "apply_over_axes": [
                "func",
                "a",
                "axes"
            ],
            "average": [
                "a",
                "axis",
                "weights",
                "returned"
            ],
            "median": [
                "a",
                "axis",
                "out",
                "overwrite_input"
            ],
            "compress_rowcols": [
                "x",
                "axis"
            ],
            "compress_rows": [
                "a"
            ],
            "compress_cols": [
                "a"
            ],
            "mask_rowcols": [
                "a",
                "axis"
            ],
            "mask_rows": [
                "a",
                "axis"
            ],
            "mask_cols": [
                "a",
                "axis"
            ],
            "dot": [
                "a",
                "b",
                "strict"
            ],
            "ediff1d": [
                "arr",
                "to_end",
                "to_begin"
            ],
            "unique": [
                "ar1",
                "return_index",
                "return_inverse"
            ],
            "intersect1d": [
                "ar1",
                "ar2",
                "assume_unique"
            ],
            "setxor1d": [
                "ar1",
                "ar2",
                "assume_unique"
            ],
            "in1d": [
                "ar1",
                "ar2",
                "assume_unique",
                "invert"
            ],
            "union1d": [
                "ar1",
                "ar2"
            ],
            "setdiff1d": [
                "ar1",
                "ar2",
                "assume_unique"
            ],
            "_covhelper": [
                "x",
                "y",
                "rowvar",
                "allow_masked"
            ],
            "cov": [
                "x",
                "y",
                "rowvar",
                "bias",
                "allow_masked",
                "ddof"
            ],
            "corrcoef": [
                "x",
                "y",
                "rowvar",
                "bias",
                "allow_masked",
                "ddof"
            ],
            "flatnotmasked_edges": [
                "a"
            ],
            "notmasked_edges": [
                "a",
                "axis"
            ],
            "flatnotmasked_contiguous": [
                "a"
            ],
            "notmasked_contiguous": [
                "a",
                "axis"
            ],
            "_ezclump": [
                "mask"
            ],
            "clump_unmasked": [
                "a"
            ],
            "clump_masked": [
                "a"
            ],
            "vander": [
                "x",
                "n"
            ],
            "polyfit": [
                "x",
                "y",
                "deg",
                "rcond",
                "full",
                "w",
                "cov"
            ],
            "_fromnxfunction": {
                "__init__": [
                    "self",
                    "funcname"
                ],
                "getdoc": [
                    "self"
                ],
                "__call__": [
                    "self"
                ]
            },
            "MAxisConcatenator": {
                "__init__": [
                    "self",
                    "axis"
                ],
                "__getitem__": [
                    "self",
                    "key"
                ]
            },
            "mr_class": {
                "__init__": [
                    "self"
                ]
            }
        },
        "numpy.ma.timer_comparison": {
            "moduletester": {
                "__init__": [
                    "self",
                    "module"
                ],
                "assert_array_compare": [
                    "self",
                    "comparison",
                    "x",
                    "y",
                    "err_msg",
                    "header",
                    "fill_value"
                ],
                "assert_array_equal": [
                    "self",
                    "x",
                    "y",
                    "err_msg"
                ],
                "test_0": [
                    "self"
                ],
                "test_1": [
                    "self"
                ],
                "test_2": [
                    "self"
                ],
                "test_3": [
                    "self"
                ],
                "test_4": [
                    "self"
                ],
                "test_5": [
                    "self"
                ],
                "test_6": [
                    "self"
                ],
                "test_7": [
                    "self"
                ],
                "test_99": [
                    "self"
                ],
                "test_A": [
                    "self"
                ]
            }
        },
        "numpy.ma.mrecords": {
            "_getformats": [
                "data"
            ],
            "_checknames": [
                "descr",
                "names"
            ],
            "_get_fieldmask": [
                "self"
            ],
            "_mrreconstruct": [
                "subtype",
                "baseclass",
                "baseshape",
                "basetype"
            ],
            "fromarrays": [
                "arraylist",
                "dtype",
                "shape",
                "formats",
                "names",
                "titles",
                "aligned",
                "byteorder",
                "fill_value"
            ],
            "fromrecords": [
                "reclist",
                "dtype",
                "shape",
                "formats",
                "names",
                "titles",
                "aligned",
                "byteorder",
                "fill_value",
                "mask"
            ],
            "_guessvartypes": [
                "arr"
            ],
            "openfile": [
                "fname"
            ],
            "fromtextfile": [
                "fname",
                "delimitor",
                "commentchar",
                "missingchar",
                "varnames",
                "vartypes"
            ],
            "addfield": [
                "mrecord",
                "newfield",
                "newfieldname"
            ],
            "MaskedRecords": {
                "__new__": [
                    "cls",
                    "shape",
                    "dtype",
                    "buf",
                    "offset",
                    "strides",
                    "formats",
                    "names",
                    "titles",
                    "byteorder",
                    "aligned",
                    "mask",
                    "hard_mask",
                    "fill_value",
                    "keep_mask",
                    "copy"
                ],
                "__array_finalize__": [
                    "self",
                    "obj"
                ],
                "_getdata": [
                    "self"
                ],
                "_getfieldmask": [
                    "self"
                ],
                "__len__": [
                    "self"
                ],
                "__getattribute__": [
                    "self",
                    "attr"
                ],
                "__setattr__": [
                    "self",
                    "attr",
                    "val"
                ],
                "__getitem__": [
                    "self",
                    "indx"
                ],
                "__setitem__": [
                    "self",
                    "indx",
                    "value"
                ],
                "__str__": [
                    "self"
                ],
                "__repr__": [
                    "self"
                ],
                "view": [
                    "self",
                    "dtype",
                    "type"
                ],
                "harden_mask": [
                    "self"
                ],
                "soften_mask": [
                    "self"
                ],
                "copy": [
                    "self"
                ],
                "tolist": [
                    "self",
                    "fill_value"
                ],
                "__getstate__": [
                    "self"
                ],
                "__setstate__": [
                    "self",
                    "state"
                ],
                "__reduce__": [
                    "self"
                ]
            }
        },
        "numpy.ma": {},
        "numpy.ma.version": {},
        "doc.sphinxext.numpydoc.docscrape": {
            "indent": [
                "str",
                "indent"
            ],
            "dedent_lines": [
                "lines"
            ],
            "header": [
                "text",
                "style"
            ],
            "Reader": {
                "__init__": [
                    "self",
                    "data"
                ],
                "__getitem__": [
                    "self",
                    "n"
                ],
                "reset": [
                    "self"
                ],
                "read": [
                    "self"
                ],
                "seek_next_non_empty_line": [
                    "self"
                ],
                "eof": [
                    "self"
                ],
                "read_to_condition": [
                    "self",
                    "condition_func"
                ],
                "read_to_next_empty_line": [
                    "self"
                ],
                "read_to_next_unindented_line": [
                    "self"
                ],
                "peek": [
                    "self",
                    "n"
                ],
                "is_empty": [
                    "self"
                ]
            },
            "NumpyDocString": {
                "__init__": [
                    "self",
                    "docstring",
                    "config"
                ],
                "__getitem__": [
                    "self",
                    "key"
                ],
                "__setitem__": [
                    "self",
                    "key",
                    "val"
                ],
                "_is_at_section": [
                    "self"
                ],
                "_strip": [
                    "self",
                    "doc"
                ],
                "_read_to_next_section": [
                    "self"
                ],
                "_read_sections": [
                    "self"
                ],
                "_parse_param_list": [
                    "self",
                    "content"
                ],
                "_parse_see_also": [
                    "self",
                    "content"
                ],
                "_parse_index": [
                    "self",
                    "section",
                    "content"
                ],
                "_parse_summary": [
                    "self"
                ],
                "_parse": [
                    "self"
                ],
                "_str_header": [
                    "self",
                    "name",
                    "symbol"
                ],
                "_str_indent": [
                    "self",
                    "doc",
                    "indent"
                ],
                "_str_signature": [
                    "self"
                ],
                "_str_summary": [
                    "self"
                ],
                "_str_extended_summary": [
                    "self"
                ],
                "_str_param_list": [
                    "self",
                    "name"
                ],
                "_str_section": [
                    "self",
                    "name"
                ],
                "_str_see_also": [
                    "self",
                    "func_role"
                ],
                "_str_index": [
                    "self"
                ],
                "__str__": [
                    "self",
                    "func_role"
                ]
            },
            "FunctionDoc": {
                "__init__": [
                    "self",
                    "func",
                    "role",
                    "doc",
                    "config"
                ],
                "get_func": [
                    "self"
                ],
                "__str__": [
                    "self"
                ]
            },
            "ClassDoc": {
                "__init__": [
                    "self",
                    "cls",
                    "doc",
                    "modulename",
                    "func_doc",
                    "config"
                ],
                "methods": [
                    "self"
                ],
                "properties": [
                    "self"
                ]
            }
        },
        "doc.sphinxext.numpydoc.compiler_unparse": {
            "unparse": [
                "ast",
                "single_line_functions"
            ],
            "UnparseCompilerAst": {
                "__init__": [
                    "self",
                    "tree",
                    "file",
                    "single_line_functions"
                ],
                "_fill": [
                    "self",
                    "text"
                ],
                "_write": [
                    "self",
                    "text"
                ],
                "_enter": [
                    "self"
                ],
                "_leave": [
                    "self"
                ],
                "_dispatch": [
                    "self",
                    "tree"
                ],
                "_Add": [
                    "self",
                    "t"
                ],
                "_And": [
                    "self",
                    "t"
                ],
                "_AssAttr": [
                    "self",
                    "t"
                ],
                "_Assign": [
                    "self",
                    "t"
                ],
                "_AssName": [
                    "self",
                    "t"
                ],
                "_AssTuple": [
                    "self",
                    "t"
                ],
                "_AugAssign": [
                    "self",
                    "t"
                ],
                "_Bitand": [
                    "self",
                    "t"
                ],
                "_Bitor": [
                    "self",
                    "t"
                ],
                "_CallFunc": [
                    "self",
                    "t"
                ],
                "_Compare": [
                    "self",
                    "t"
                ],
                "_Const": [
                    "self",
                    "t"
                ],
                "_Decorators": [
                    "self",
                    "t"
                ],
                "_Dict": [
                    "self",
                    "t"
                ],
                "_Discard": [
                    "self",
                    "t"
                ],
                "_Div": [
                    "self",
                    "t"
                ],
                "_Ellipsis": [
                    "self",
                    "t"
                ],
                "_From": [
                    "self",
                    "t"
                ],
                "_Function": [
                    "self",
                    "t"
                ],
                "_Getattr": [
                    "self",
                    "t"
                ],
                "_If": [
                    "self",
                    "t"
                ],
                "_IfExp": [
                    "self",
                    "t"
                ],
                "_Import": [
                    "self",
                    "t"
                ],
                "_Keyword": [
                    "self",
                    "t"
                ],
                "_List": [
                    "self",
                    "t"
                ],
                "_Module": [
                    "self",
                    "t"
                ],
                "_Mul": [
                    "self",
                    "t"
                ],
                "_Name": [
                    "self",
                    "t"
                ],
                "_NoneType": [
                    "self",
                    "t"
                ],
                "_Not": [
                    "self",
                    "t"
                ],
                "_Or": [
                    "self",
                    "t"
                ],
                "_Pass": [
                    "self",
                    "t"
                ],
                "_Printnl": [
                    "self",
                    "t"
                ],
                "_Power": [
                    "self",
                    "t"
                ],
                "_Return": [
                    "self",
                    "t"
                ],
                "_Slice": [
                    "self",
                    "t"
                ],
                "_Sliceobj": [
                    "self",
                    "t"
                ],
                "_Stmt": [
                    "self",
                    "tree"
                ],
                "_Sub": [
                    "self",
                    "t"
                ],
                "_Subscript": [
                    "self",
                    "t"
                ],
                "_TryExcept": [
                    "self",
                    "t"
                ],
                "_Tuple": [
                    "self",
                    "t"
                ],
                "_UnaryAdd": [
                    "self",
                    "t"
                ],
                "_UnarySub": [
                    "self",
                    "t"
                ],
                "_With": [
                    "self",
                    "t"
                ],
                "_int": [
                    "self",
                    "t"
                ],
                "__binary_op": [
                    "self",
                    "t",
                    "symbol"
                ],
                "_float": [
                    "self",
                    "t"
                ],
                "_str": [
                    "self",
                    "t"
                ],
                "_tuple": [
                    "self",
                    "t"
                ]
            }
        },
        "doc.sphinxext.numpydoc.linkcode": {
            "doctree_read": [
                "app",
                "doctree"
            ],
            "setup": [
                "app"
            ],
            "LinkcodeError": {}
        },
        "doc.sphinxext.numpydoc.numpydoc": {
            "mangle_docstrings": [
                "app",
                "what",
                "name",
                "obj",
                "options",
                "lines",
                "reference_offset"
            ],
            "mangle_signature": [
                "app",
                "what",
                "name",
                "obj",
                "options",
                "sig",
                "retann"
            ],
            "setup": [
                "app",
                "get_doc_object_"
            ],
            "wrap_mangling_directive": [
                "base_directive",
                "objtype"
            ],
            "ManglingDomainBase": {
                "__init__": [
                    "self"
                ],
                "wrap_mangling_directives": [
                    "self"
                ]
            },
            "NumpyPythonDomain": {},
            "NumpyCDomain": {}
        },
        "doc.sphinxext.numpydoc.docscrape_sphinx": {
            "get_doc_object": [
                "obj",
                "what",
                "doc",
                "config"
            ],
            "SphinxDocString": {
                "__init__": [
                    "self",
                    "docstring",
                    "config"
                ],
                "_str_header": [
                    "self",
                    "name",
                    "symbol"
                ],
                "_str_field_list": [
                    "self",
                    "name"
                ],
                "_str_indent": [
                    "self",
                    "doc",
                    "indent"
                ],
                "_str_signature": [
                    "self"
                ],
                "_str_summary": [
                    "self"
                ],
                "_str_extended_summary": [
                    "self"
                ],
                "_str_returns": [
                    "self"
                ],
                "_str_param_list": [
                    "self",
                    "name"
                ],
                "_obj": [
                    "self"
                ],
                "_str_member_list": [
                    "self",
                    "name"
                ],
                "_str_section": [
                    "self",
                    "name"
                ],
                "_str_see_also": [
                    "self",
                    "func_role"
                ],
                "_str_warnings": [
                    "self"
                ],
                "_str_index": [
                    "self"
                ],
                "_str_references": [
                    "self"
                ],
                "_str_examples": [
                    "self"
                ],
                "__str__": [
                    "self",
                    "indent",
                    "func_role"
                ]
            },
            "SphinxFunctionDoc": {
                "__init__": [
                    "self",
                    "obj",
                    "doc",
                    "config"
                ]
            },
            "SphinxClassDoc": {
                "__init__": [
                    "self",
                    "obj",
                    "doc",
                    "func_doc",
                    "config"
                ]
            },
            "SphinxObjDoc": {
                "__init__": [
                    "self",
                    "obj",
                    "doc",
                    "config"
                ]
            }
        },
        "doc.sphinxext.numpydoc.plot_directive": {
            "setup": [
                "app"
            ],
            "plot_directive": [
                "name",
                "arguments",
                "options",
                "content",
                "lineno",
                "content_offset",
                "block_text",
                "state",
                "state_machine"
            ],
            "_option_boolean": [
                "arg"
            ],
            "_option_format": [
                "arg"
            ],
            "_option_align": [
                "arg"
            ],
            "run": [
                "arguments",
                "content",
                "options",
                "state_machine",
                "state",
                "lineno"
            ],
            "contains_doctest": [
                "text"
            ],
            "unescape_doctest": [
                "text"
            ],
            "split_code_at_show": [
                "text"
            ],
            "run_code": [
                "code",
                "code_path",
                "ns"
            ],
            "out_of_date": [
                "original",
                "derived"
            ],
            "makefig": [
                "code",
                "code_path",
                "output_dir",
                "output_base",
                "config"
            ],
            "ImageFile": {
                "__init__": [
                    "self",
                    "basename",
                    "dirname"
                ],
                "filename": [
                    "self",
                    "format"
                ],
                "filenames": [
                    "self"
                ]
            },
            "PlotError": {}
        },
        "doc.sphinxext.numpydoc.comment_eater": {
            "strip_comment_marker": [
                "text"
            ],
            "get_class_traits": [
                "klass"
            ],
            "Comment": {
                "__init__": [
                    "self",
                    "start_lineno",
                    "end_lineno",
                    "text"
                ],
                "add": [
                    "self",
                    "string",
                    "start",
                    "end",
                    "line"
                ],
                "__repr__": [
                    "self"
                ]
            },
            "NonComment": {
                "__init__": [
                    "self",
                    "start_lineno",
                    "end_lineno"
                ],
                "add": [
                    "self",
                    "string",
                    "start",
                    "end",
                    "line"
                ],
                "__repr__": [
                    "self"
                ]
            },
            "CommentBlocker": {
                "__init__": [
                    "self"
                ],
                "process_file": [
                    "self",
                    "file"
                ],
                "process_token": [
                    "self",
                    "kind",
                    "string",
                    "start",
                    "end",
                    "line"
                ],
                "new_noncomment": [
                    "self",
                    "start_lineno",
                    "end_lineno"
                ],
                "new_comment": [
                    "self",
                    "string",
                    "start",
                    "end",
                    "line"
                ],
                "make_index": [
                    "self"
                ],
                "search_for_comment": [
                    "self",
                    "lineno",
                    "default"
                ]
            }
        },
        "doc.sphinxext.numpydoc.phantom_import": {
            "setup": [
                "app"
            ],
            "initialize": [
                "app"
            ],
            "import_phantom_module": [
                "xml_file"
            ]
        },
        "doc.sphinxext.numpydoc.traitsdoc": {
            "looks_like_issubclass": [
                "obj",
                "classname"
            ],
            "get_doc_object": [
                "obj",
                "what",
                "config"
            ],
            "setup": [
                "app"
            ],
            "SphinxTraitsDoc": {
                "__init__": [
                    "self",
                    "cls",
                    "modulename",
                    "func_doc"
                ],
                "_str_summary": [
                    "self"
                ],
                "_str_extended_summary": [
                    "self"
                ],
                "__str__": [
                    "self",
                    "indent",
                    "func_role"
                ]
            }
        },
        "doc.sphinxext.numpydoc": {}
    }
}