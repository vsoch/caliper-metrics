{
    "1.1.1": {
        "pandas.testing": {},
        "pandas._version": {
            "get_versions": []
        },
        "pandas._testing": {
            "set_testing_mode": [],
            "reset_testing_mode": [],
            "reset_display_options": [],
            "round_trip_pickle": [
                "obj",
                "path"
            ],
            "round_trip_pathlib": [
                "writer",
                "reader",
                "path"
            ],
            "round_trip_localpath": [
                "writer",
                "reader",
                "path"
            ],
            "decompress_file": [
                "path",
                "compression"
            ],
            "write_to_compressed": [
                "compression",
                "path",
                "data",
                "dest"
            ],
            "_get_tol_from_less_precise": [
                "check_less_precise"
            ],
            "assert_almost_equal": [
                "left",
                "right",
                "check_dtype",
                "check_less_precise",
                "rtol",
                "atol"
            ],
            "_check_isinstance": [
                "left",
                "right",
                "cls"
            ],
            "assert_dict_equal": [
                "left",
                "right",
                "compare_keys"
            ],
            "randbool": [
                "size",
                "p"
            ],
            "rands_array": [
                "nchars",
                "size",
                "dtype"
            ],
            "randu_array": [
                "nchars",
                "size",
                "dtype"
            ],
            "rands": [
                "nchars"
            ],
            "close": [
                "fignum"
            ],
            "ensure_clean": [
                "filename",
                "return_filelike"
            ],
            "ensure_clean_dir": [],
            "ensure_safe_environment_variables": [],
            "equalContents": [
                "arr1",
                "arr2"
            ],
            "assert_index_equal": [
                "left",
                "right",
                "exact",
                "check_names",
                "check_less_precise",
                "check_exact",
                "check_categorical",
                "rtol",
                "atol",
                "obj"
            ],
            "assert_class_equal": [
                "left",
                "right",
                "exact",
                "obj"
            ],
            "assert_attr_equal": [
                "attr",
                "left",
                "right",
                "obj"
            ],
            "assert_is_valid_plot_return_object": [
                "objs"
            ],
            "assert_is_sorted": [
                "seq"
            ],
            "assert_categorical_equal": [
                "left",
                "right",
                "check_dtype",
                "check_category_order",
                "obj"
            ],
            "assert_interval_array_equal": [
                "left",
                "right",
                "exact",
                "obj"
            ],
            "assert_period_array_equal": [
                "left",
                "right",
                "obj"
            ],
            "assert_datetime_array_equal": [
                "left",
                "right",
                "obj"
            ],
            "assert_timedelta_array_equal": [
                "left",
                "right",
                "obj"
            ],
            "raise_assert_detail": [
                "obj",
                "message",
                "left",
                "right",
                "diff",
                "index_values"
            ],
            "assert_numpy_array_equal": [
                "left",
                "right",
                "strict_nan",
                "check_dtype",
                "err_msg",
                "check_same",
                "obj",
                "index_values"
            ],
            "assert_extension_array_equal": [
                "left",
                "right",
                "check_dtype",
                "index_values",
                "check_less_precise",
                "check_exact",
                "rtol",
                "atol"
            ],
            "assert_series_equal": [
                "left",
                "right",
                "check_dtype",
                "check_index_type",
                "check_series_type",
                "check_less_precise",
                "check_names",
                "check_exact",
                "check_datetimelike_compat",
                "check_categorical",
                "check_category_order",
                "check_freq",
                "rtol",
                "atol",
                "obj"
            ],
            "assert_frame_equal": [
                "left",
                "right",
                "check_dtype",
                "check_index_type",
                "check_column_type",
                "check_frame_type",
                "check_less_precise",
                "check_names",
                "by_blocks",
                "check_exact",
                "check_datetimelike_compat",
                "check_categorical",
                "check_like",
                "check_freq",
                "rtol",
                "atol",
                "obj"
            ],
            "assert_equal": [
                "left",
                "right"
            ],
            "box_expected": [
                "expected",
                "box_cls",
                "transpose"
            ],
            "to_array": [
                "obj"
            ],
            "assert_sp_array_equal": [
                "left",
                "right"
            ],
            "assert_contains_all": [
                "iterable",
                "dic"
            ],
            "assert_copy": [
                "iter1",
                "iter2"
            ],
            "getCols": [
                "k"
            ],
            "makeStringIndex": [
                "k",
                "name"
            ],
            "makeUnicodeIndex": [
                "k",
                "name"
            ],
            "makeCategoricalIndex": [
                "k",
                "n",
                "name"
            ],
            "makeIntervalIndex": [
                "k",
                "name"
            ],
            "makeBoolIndex": [
                "k",
                "name"
            ],
            "makeIntIndex": [
                "k",
                "name"
            ],
            "makeUIntIndex": [
                "k",
                "name"
            ],
            "makeRangeIndex": [
                "k",
                "name"
            ],
            "makeFloatIndex": [
                "k",
                "name"
            ],
            "makeDateIndex": [
                "k",
                "freq",
                "name"
            ],
            "makeTimedeltaIndex": [
                "k",
                "freq",
                "name"
            ],
            "makePeriodIndex": [
                "k",
                "name"
            ],
            "makeMultiIndex": [
                "k",
                "names"
            ],
            "_make_timeseries": [
                "start",
                "end",
                "freq",
                "seed"
            ],
            "index_subclass_makers_generator": [],
            "all_timeseries_index_generator": [
                "k"
            ],
            "makeFloatSeries": [
                "name"
            ],
            "makeStringSeries": [
                "name"
            ],
            "makeObjectSeries": [
                "name"
            ],
            "getSeriesData": [],
            "makeTimeSeries": [
                "nper",
                "freq",
                "name"
            ],
            "makePeriodSeries": [
                "nper",
                "name"
            ],
            "getTimeSeriesData": [
                "nper",
                "freq"
            ],
            "getPeriodData": [
                "nper"
            ],
            "makeTimeDataFrame": [
                "nper",
                "freq"
            ],
            "makeDataFrame": [],
            "getMixedTypeDict": [],
            "makeMixedDataFrame": [],
            "makePeriodFrame": [
                "nper"
            ],
            "makeCustomIndex": [
                "nentries",
                "nlevels",
                "prefix",
                "names",
                "ndupe_l",
                "idx_type"
            ],
            "makeCustomDataframe": [
                "nrows",
                "ncols",
                "c_idx_names",
                "r_idx_names",
                "c_idx_nlevels",
                "r_idx_nlevels",
                "data_gen_f",
                "c_ndupe_l",
                "r_ndupe_l",
                "dtype",
                "c_idx_type",
                "r_idx_type"
            ],
            "_create_missing_idx": [
                "nrows",
                "ncols",
                "density",
                "random_state"
            ],
            "makeMissingDataframe": [
                "density",
                "random_state"
            ],
            "optional_args": [
                "decorator"
            ],
            "_get_default_network_errors": [],
            "can_connect": [
                "url",
                "error_classes"
            ],
            "network": [
                "t",
                "url",
                "raise_on_error",
                "check_before_test",
                "error_classes",
                "skip_errnos",
                "_skip_on_messages"
            ],
            "assert_produces_warning": [
                "expected_warning",
                "filter_level",
                "check_stacklevel",
                "raise_on_extra_warnings"
            ],
            "with_csv_dialect": [
                "name"
            ],
            "use_numexpr": [
                "use",
                "min_elements"
            ],
            "test_parallel": [
                "num_threads",
                "kwargs_list"
            ],
            "set_timezone": [
                "tz"
            ],
            "_make_skipna_wrapper": [
                "alternative",
                "skipna_alternative"
            ],
            "convert_rows_list_to_csv_str": [
                "rows_list"
            ],
            "external_error_raised": [
                "expected_exception"
            ],
            "get_cython_table_params": [
                "ndframe",
                "func_names_and_expected"
            ],
            "get_op_from_name": [
                "op_name"
            ],
            "RNGContext": {
                "__init__": [
                    "self",
                    "seed"
                ],
                "__enter__": [
                    "self"
                ],
                "__exit__": [
                    "self",
                    "exc_type",
                    "exc_value",
                    "traceback"
                ]
            },
            "SubclassedSeries": {
                "_constructor": [
                    "self"
                ],
                "_constructor_expanddim": [
                    "self"
                ]
            },
            "SubclassedDataFrame": {
                "_constructor": [
                    "self"
                ],
                "_constructor_sliced": [
                    "self"
                ]
            },
            "SubclassedCategorical": {
                "_constructor": [
                    "self"
                ]
            }
        },
        "pandas._typing": {},
        "pandas.conftest": {
            "pytest_configure": [
                "config"
            ],
            "pytest_addoption": [
                "parser"
            ],
            "pytest_runtest_setup": [
                "item"
            ],
            "configure_tests": [],
            "add_imports": [
                "doctest_namespace"
            ],
            "axis": [
                "request"
            ],
            "axis_series": [
                "request"
            ],
            "observed": [
                "request"
            ],
            "ordered": [
                "request"
            ],
            "keep": [
                "request"
            ],
            "closed": [
                "request"
            ],
            "other_closed": [
                "request"
            ],
            "compression": [
                "request"
            ],
            "compression_only": [
                "request"
            ],
            "writable": [
                "request"
            ],
            "join_type": [
                "request"
            ],
            "nselect_method": [
                "request"
            ],
            "nulls_fixture": [
                "request"
            ],
            "unique_nulls_fixture": [
                "request"
            ],
            "index_or_series": [
                "request"
            ],
            "dict_subclass": [],
            "non_dict_mapping_subclass": [],
            "multiindex_year_month_day_dataframe_random_data": [],
            "_create_multiindex": [],
            "_create_mi_with_dt64tz_level": [],
            "index": [
                "request"
            ],
            "empty_series": [],
            "string_series": [],
            "object_series": [],
            "datetime_series": [],
            "_create_series": [
                "index"
            ],
            "series_with_simple_index": [
                "index"
            ],
            "narrow_series": [
                "request"
            ],
            "index_or_series_obj": [
                "request"
            ],
            "empty_frame": [],
            "int_frame": [],
            "datetime_frame": [],
            "float_frame": [],
            "all_arithmetic_operators": [
                "request"
            ],
            "all_arithmetic_functions": [
                "request"
            ],
            "all_numeric_reductions": [
                "request"
            ],
            "all_boolean_reductions": [
                "request"
            ],
            "all_reductions": [
                "request"
            ],
            "all_compare_operators": [
                "request"
            ],
            "compare_operators_no_eq_ne": [
                "request"
            ],
            "all_logical_operators": [
                "request"
            ],
            "strict_data_files": [
                "pytestconfig"
            ],
            "datapath": [
                "strict_data_files"
            ],
            "iris": [
                "datapath"
            ],
            "tz_naive_fixture": [
                "request"
            ],
            "tz_aware_fixture": [
                "request"
            ],
            "datetime_tz_utc": [],
            "utc_fixture": [
                "request"
            ],
            "string_dtype": [
                "request"
            ],
            "bytes_dtype": [
                "request"
            ],
            "object_dtype": [
                "request"
            ],
            "datetime64_dtype": [
                "request"
            ],
            "timedelta64_dtype": [
                "request"
            ],
            "float_dtype": [
                "request"
            ],
            "complex_dtype": [
                "request"
            ],
            "sint_dtype": [
                "request"
            ],
            "uint_dtype": [
                "request"
            ],
            "any_int_dtype": [
                "request"
            ],
            "any_nullable_int_dtype": [
                "request"
            ],
            "any_real_dtype": [
                "request"
            ],
            "any_numpy_dtype": [
                "request"
            ],
            "any_skipna_inferred_dtype": [
                "request"
            ],
            "ip": [],
            "spmatrix": [
                "request"
            ],
            "cython_table_items": [
                "request"
            ],
            "tick_classes": [
                "request"
            ],
            "sort_by_key": [
                "request"
            ]
        },
        "pandas": {},
        "pandas.core.algorithms": {
            "_ensure_data": [
                "values",
                "dtype"
            ],
            "_reconstruct_data": [
                "values",
                "dtype",
                "original"
            ],
            "_ensure_arraylike": [
                "values"
            ],
            "_get_hashtable_algo": [
                "values"
            ],
            "_get_values_for_rank": [
                "values"
            ],
            "_get_data_algo": [
                "values"
            ],
            "_check_object_for_strings": [
                "values"
            ],
            "unique": [
                "values"
            ],
            "isin": [
                "comps",
                "values"
            ],
            "_factorize_array": [
                "values",
                "na_sentinel",
                "size_hint",
                "na_value",
                "mask"
            ],
            "factorize": [
                "values",
                "sort",
                "na_sentinel",
                "size_hint",
                "dropna"
            ],
            "value_counts": [
                "values",
                "sort",
                "ascending",
                "normalize",
                "bins",
                "dropna"
            ],
            "_value_counts_arraylike": [
                "values",
                "dropna"
            ],
            "duplicated": [
                "values",
                "keep"
            ],
            "mode": [
                "values",
                "dropna"
            ],
            "rank": [
                "values",
                "axis",
                "method",
                "na_option",
                "ascending",
                "pct"
            ],
            "checked_add_with_arr": [
                "arr",
                "b",
                "arr_mask",
                "b_mask"
            ],
            "quantile": [
                "x",
                "q",
                "interpolation_method"
            ],
            "_view_wrapper": [
                "f",
                "arr_dtype",
                "out_dtype",
                "fill_wrap"
            ],
            "_convert_wrapper": [
                "f",
                "conv_dtype"
            ],
            "_take_2d_multi_object": [
                "arr",
                "indexer",
                "out",
                "fill_value",
                "mask_info"
            ],
            "_take_nd_object": [
                "arr",
                "indexer",
                "out",
                "axis",
                "fill_value",
                "mask_info"
            ],
            "_get_take_nd_function": [
                "ndim",
                "arr_dtype",
                "out_dtype",
                "axis",
                "mask_info"
            ],
            "take": [
                "arr",
                "indices",
                "axis",
                "allow_fill",
                "fill_value"
            ],
            "take_nd": [
                "arr",
                "indexer",
                "axis",
                "out",
                "fill_value",
                "allow_fill"
            ],
            "take_2d_multi": [
                "arr",
                "indexer",
                "fill_value"
            ],
            "searchsorted": [
                "arr",
                "value",
                "side",
                "sorter"
            ],
            "diff": [
                "arr",
                "n",
                "axis",
                "stacklevel"
            ],
            "safe_sort": [
                "values",
                "codes",
                "na_sentinel",
                "assume_unique",
                "verify"
            ],
            "SelectN": {
                "__init__": [
                    "self",
                    "obj",
                    "n",
                    "keep"
                ],
                "nlargest": [
                    "self"
                ],
                "nsmallest": [
                    "self"
                ],
                "is_valid_dtype_n_method": [
                    "dtype"
                ]
            },
            "SelectNSeries": {
                "compute": [
                    "self",
                    "method"
                ]
            },
            "SelectNFrame": {
                "__init__": [
                    "self",
                    "obj",
                    "n",
                    "keep",
                    "columns"
                ],
                "compute": [
                    "self",
                    "method"
                ]
            }
        },
        "pandas.core.config_init": {
            "use_bottleneck_cb": [
                "key"
            ],
            "use_numexpr_cb": [
                "key"
            ],
            "use_numba_cb": [
                "key"
            ],
            "table_schema_cb": [
                "key"
            ],
            "is_terminal": [],
            "use_inf_as_na_cb": [
                "key"
            ],
            "register_plotting_backend_cb": [
                "key"
            ],
            "register_converter_cb": [
                "key"
            ]
        },
        "pandas.core.resample": {
            "get_resampler": [
                "obj",
                "kind"
            ],
            "get_resampler_for_grouping": [
                "groupby",
                "rule",
                "how",
                "fill_method",
                "limit",
                "kind"
            ],
            "_take_new_index": [
                "obj",
                "indexer",
                "new_index",
                "axis"
            ],
            "_get_timestamp_range_edges": [
                "first",
                "last",
                "freq",
                "closed",
                "origin",
                "offset"
            ],
            "_get_period_range_edges": [
                "first",
                "last",
                "freq",
                "closed",
                "origin",
                "offset"
            ],
            "_adjust_dates_anchored": [
                "first",
                "last",
                "freq",
                "closed",
                "origin",
                "offset"
            ],
            "asfreq": [
                "obj",
                "freq",
                "method",
                "how",
                "normalize",
                "fill_value"
            ],
            "_asfreq_compat": [
                "index",
                "freq"
            ],
            "Resampler": {
                "__init__": [
                    "self",
                    "obj",
                    "groupby",
                    "axis",
                    "kind"
                ],
                "__str__": [
                    "self"
                ],
                "__getattr__": [
                    "self",
                    "attr"
                ],
                "__iter__": [
                    "self"
                ],
                "obj": [
                    "self"
                ],
                "ax": [
                    "self"
                ],
                "_typ": [
                    "self"
                ],
                "_from_selection": [
                    "self"
                ],
                "_convert_obj": [
                    "self",
                    "obj"
                ],
                "_get_binner_for_time": [
                    "self"
                ],
                "_set_binner": [
                    "self"
                ],
                "_get_binner": [
                    "self"
                ],
                "_assure_grouper": [
                    "self"
                ],
                "pipe": [
                    "self",
                    "func"
                ],
                "aggregate": [
                    "self",
                    "func"
                ],
                "transform": [
                    "self",
                    "arg"
                ],
                "_downsample": [
                    "self",
                    "f"
                ],
                "_upsample": [
                    "self",
                    "f",
                    "limit",
                    "fill_value"
                ],
                "_gotitem": [
                    "self",
                    "key",
                    "ndim",
                    "subset"
                ],
                "_groupby_and_aggregate": [
                    "self",
                    "how",
                    "grouper"
                ],
                "_apply_loffset": [
                    "self",
                    "result"
                ],
                "_get_resampler_for_grouping": [
                    "self",
                    "groupby"
                ],
                "_wrap_result": [
                    "self",
                    "result"
                ],
                "pad": [
                    "self",
                    "limit"
                ],
                "nearest": [
                    "self",
                    "limit"
                ],
                "backfill": [
                    "self",
                    "limit"
                ],
                "fillna": [
                    "self",
                    "method",
                    "limit"
                ],
                "interpolate": [
                    "self",
                    "method",
                    "axis",
                    "limit",
                    "inplace",
                    "limit_direction",
                    "limit_area",
                    "downcast"
                ],
                "asfreq": [
                    "self",
                    "fill_value"
                ],
                "std": [
                    "self",
                    "ddof"
                ],
                "var": [
                    "self",
                    "ddof"
                ],
                "size": [
                    "self"
                ],
                "count": [
                    "self"
                ],
                "quantile": [
                    "self",
                    "q"
                ]
            },
            "_GroupByMixin": {
                "__init__": [
                    "self",
                    "obj"
                ],
                "_apply": [
                    "self",
                    "f",
                    "grouper"
                ]
            },
            "DatetimeIndexResampler": {
                "_resampler_for_grouping": [
                    "self"
                ],
                "_get_binner_for_time": [
                    "self"
                ],
                "_downsample": [
                    "self",
                    "how"
                ],
                "_adjust_binner_for_upsample": [
                    "self",
                    "binner"
                ],
                "_upsample": [
                    "self",
                    "method",
                    "limit",
                    "fill_value"
                ],
                "_wrap_result": [
                    "self",
                    "result"
                ]
            },
            "DatetimeIndexResamplerGroupby": {
                "_constructor": [
                    "self"
                ]
            },
            "PeriodIndexResampler": {
                "_resampler_for_grouping": [
                    "self"
                ],
                "_get_binner_for_time": [
                    "self"
                ],
                "_convert_obj": [
                    "self",
                    "obj"
                ],
                "_downsample": [
                    "self",
                    "how"
                ],
                "_upsample": [
                    "self",
                    "method",
                    "limit",
                    "fill_value"
                ]
            },
            "PeriodIndexResamplerGroupby": {
                "_constructor": [
                    "self"
                ]
            },
            "TimedeltaIndexResampler": {
                "_resampler_for_grouping": [
                    "self"
                ],
                "_get_binner_for_time": [
                    "self"
                ],
                "_adjust_binner_for_upsample": [
                    "self",
                    "binner"
                ]
            },
            "TimedeltaIndexResamplerGroupby": {
                "_constructor": [
                    "self"
                ]
            },
            "TimeGrouper": {
                "__init__": [
                    "self",
                    "freq",
                    "closed",
                    "label",
                    "how",
                    "axis",
                    "fill_method",
                    "limit",
                    "loffset",
                    "kind",
                    "convention",
                    "base",
                    "origin",
                    "offset"
                ],
                "_get_resampler": [
                    "self",
                    "obj",
                    "kind"
                ],
                "_get_grouper": [
                    "self",
                    "obj",
                    "validate"
                ],
                "_get_time_bins": [
                    "self",
                    "ax"
                ],
                "_adjust_bin_edges": [
                    "self",
                    "binner",
                    "ax_values"
                ],
                "_get_time_delta_bins": [
                    "self",
                    "ax"
                ],
                "_get_time_period_bins": [
                    "self",
                    "ax"
                ],
                "_get_period_bins": [
                    "self",
                    "ax"
                ]
            }
        },
        "pandas.core.generic": {
            "_single_replace": [
                "self",
                "to_replace",
                "method",
                "inplace",
                "limit"
            ],
            "_doc_parms": [
                "cls"
            ],
            "_make_min_count_stat_function": [
                "cls",
                "name",
                "name1",
                "name2",
                "axis_descr",
                "desc",
                "func",
                "see_also",
                "examples"
            ],
            "_make_stat_function": [
                "cls",
                "name",
                "name1",
                "name2",
                "axis_descr",
                "desc",
                "func",
                "see_also",
                "examples"
            ],
            "_make_stat_function_ddof": [
                "cls",
                "name",
                "name1",
                "name2",
                "axis_descr",
                "desc",
                "func"
            ],
            "_make_cum_function": [
                "cls",
                "name",
                "name1",
                "name2",
                "axis_descr",
                "desc",
                "accum_func",
                "accum_func_name",
                "examples"
            ],
            "_make_logical_function": [
                "cls",
                "name",
                "name1",
                "name2",
                "axis_descr",
                "desc",
                "func",
                "see_also",
                "examples",
                "empty_value"
            ],
            "NDFrame": {
                "__init__": [
                    "self",
                    "data",
                    "copy",
                    "attrs"
                ],
                "_init_mgr": [
                    "cls",
                    "mgr",
                    "axes",
                    "dtype",
                    "copy"
                ],
                "attrs": [
                    "self",
                    "value"
                ],
                "_validate_dtype": [
                    "cls",
                    "dtype"
                ],
                "_constructor": [
                    "self"
                ],
                "_constructor_sliced": [
                    "self"
                ],
                "_constructor_expanddim": [
                    "self"
                ],
                "_data": [
                    "self"
                ],
                "_AXIS_NUMBERS": [
                    "self"
                ],
                "_AXIS_NAMES": [
                    "self"
                ],
                "_construct_axes_dict": [
                    "self",
                    "axes"
                ],
                "_construct_axes_from_arguments": [
                    "cls",
                    "args",
                    "kwargs",
                    "require_all",
                    "sentinel"
                ],
                "_get_axis_number": [
                    "cls",
                    "axis"
                ],
                "_get_axis_name": [
                    "cls",
                    "axis"
                ],
                "_get_axis": [
                    "self",
                    "axis"
                ],
                "_get_block_manager_axis": [
                    "cls",
                    "axis"
                ],
                "_get_axis_resolvers": [
                    "self",
                    "axis"
                ],
                "_get_index_resolvers": [
                    "self"
                ],
                "_get_cleaned_column_resolvers": [
                    "self"
                ],
                "_info_axis": [
                    "self"
                ],
                "_stat_axis": [
                    "self"
                ],
                "shape": [
                    "self"
                ],
                "axes": [
                    "self"
                ],
                "ndim": [
                    "self"
                ],
                "size": [
                    "self"
                ],
                "_selected_obj": [
                    "self"
                ],
                "_obj_with_exclusions": [
                    "self"
                ],
                "set_axis": [
                    "self",
                    "labels",
                    "axis",
                    "inplace"
                ],
                "_set_axis": [
                    "self",
                    "axis",
                    "labels"
                ],
                "swapaxes": [
                    "self",
                    "axis1",
                    "axis2",
                    "copy"
                ],
                "droplevel": [
                    "self",
                    "level",
                    "axis"
                ],
                "pop": [
                    "self",
                    "item"
                ],
                "squeeze": [
                    "self",
                    "axis"
                ],
                "rename": [
                    "self",
                    "mapper"
                ],
                "rename_axis": [
                    "self",
                    "mapper"
                ],
                "_set_axis_name": [
                    "self",
                    "name",
                    "axis",
                    "inplace"
                ],
                "_indexed_same": [
                    "self",
                    "other"
                ],
                "equals": [
                    "self",
                    "other"
                ],
                "__neg__": [
                    "self"
                ],
                "__pos__": [
                    "self"
                ],
                "__invert__": [
                    "self"
                ],
                "__nonzero__": [
                    "self"
                ],
                "bool": [
                    "self"
                ],
                "__abs__": [
                    "self"
                ],
                "__round__": [
                    "self",
                    "decimals"
                ],
                "_is_level_reference": [
                    "self",
                    "key",
                    "axis"
                ],
                "_is_label_reference": [
                    "self",
                    "key",
                    "axis"
                ],
                "_is_label_or_level_reference": [
                    "self",
                    "key",
                    "axis"
                ],
                "_check_label_or_level_ambiguity": [
                    "self",
                    "key",
                    "axis"
                ],
                "_get_label_or_level_values": [
                    "self",
                    "key",
                    "axis"
                ],
                "_drop_labels_or_levels": [
                    "self",
                    "keys",
                    "axis"
                ],
                "__hash__": [
                    "self"
                ],
                "__iter__": [
                    "self"
                ],
                "keys": [
                    "self"
                ],
                "items": [
                    "self"
                ],
                "iteritems": [
                    "self"
                ],
                "__len__": [
                    "self"
                ],
                "__contains__": [
                    "self",
                    "key"
                ],
                "empty": [
                    "self"
                ],
                "__array__": [
                    "self",
                    "dtype"
                ],
                "__array_wrap__": [
                    "self",
                    "result",
                    "context"
                ],
                "__getstate__": [
                    "self"
                ],
                "__setstate__": [
                    "self",
                    "state"
                ],
                "__repr__": [
                    "self"
                ],
                "_repr_latex_": [
                    "self"
                ],
                "_repr_data_resource_": [
                    "self"
                ],
                "to_excel": [
                    "self",
                    "excel_writer",
                    "sheet_name",
                    "na_rep",
                    "float_format",
                    "columns",
                    "header",
                    "index",
                    "index_label",
                    "startrow",
                    "startcol",
                    "engine",
                    "merge_cells",
                    "encoding",
                    "inf_rep",
                    "verbose",
                    "freeze_panes"
                ],
                "to_json": [
                    "self",
                    "path_or_buf",
                    "orient",
                    "date_format",
                    "double_precision",
                    "force_ascii",
                    "date_unit",
                    "default_handler",
                    "lines",
                    "compression",
                    "index",
                    "indent"
                ],
                "to_hdf": [
                    "self",
                    "path_or_buf",
                    "key",
                    "mode",
                    "complevel",
                    "complib",
                    "append",
                    "format",
                    "index",
                    "min_itemsize",
                    "nan_rep",
                    "dropna",
                    "data_columns",
                    "errors",
                    "encoding"
                ],
                "to_sql": [
                    "self",
                    "name",
                    "con",
                    "schema",
                    "if_exists",
                    "index",
                    "index_label",
                    "chunksize",
                    "dtype",
                    "method"
                ],
                "to_pickle": [
                    "self",
                    "path",
                    "compression",
                    "protocol"
                ],
                "to_clipboard": [
                    "self",
                    "excel",
                    "sep"
                ],
                "to_xarray": [
                    "self"
                ],
                "to_latex": [
                    "self",
                    "buf",
                    "columns",
                    "col_space",
                    "header",
                    "index",
                    "na_rep",
                    "formatters",
                    "float_format",
                    "sparsify",
                    "index_names",
                    "bold_rows",
                    "column_format",
                    "longtable",
                    "escape",
                    "encoding",
                    "decimal",
                    "multicolumn",
                    "multicolumn_format",
                    "multirow",
                    "caption",
                    "label"
                ],
                "to_csv": [
                    "self",
                    "path_or_buf",
                    "sep",
                    "na_rep",
                    "float_format",
                    "columns",
                    "header",
                    "index",
                    "index_label",
                    "mode",
                    "encoding",
                    "compression",
                    "quoting",
                    "quotechar",
                    "line_terminator",
                    "chunksize",
                    "date_format",
                    "doublequote",
                    "escapechar",
                    "decimal",
                    "errors"
                ],
                "_set_as_cached": [
                    "self",
                    "item",
                    "cacher"
                ],
                "_reset_cacher": [
                    "self"
                ],
                "_maybe_cache_changed": [
                    "self",
                    "item",
                    "value"
                ],
                "_is_cached": [
                    "self"
                ],
                "_get_cacher": [
                    "self"
                ],
                "_maybe_update_cacher": [
                    "self",
                    "clear",
                    "verify_is_copy"
                ],
                "_clear_item_cache": [
                    "self"
                ],
                "take": [
                    "self",
                    "indices",
                    "axis",
                    "is_copy"
                ],
                "_take_with_is_copy": [
                    "self",
                    "indices",
                    "axis"
                ],
                "xs": [
                    "self",
                    "key",
                    "axis",
                    "level",
                    "drop_level"
                ],
                "__getitem__": [
                    "self",
                    "item"
                ],
                "_get_item_cache": [
                    "self",
                    "item"
                ],
                "_slice": [
                    "self",
                    "slobj",
                    "axis"
                ],
                "_iset_item": [
                    "self",
                    "loc",
                    "value"
                ],
                "_set_item": [
                    "self",
                    "key",
                    "value"
                ],
                "_set_is_copy": [
                    "self",
                    "ref",
                    "copy"
                ],
                "_check_is_chained_assignment_possible": [
                    "self"
                ],
                "_check_setitem_copy": [
                    "self",
                    "stacklevel",
                    "t",
                    "force"
                ],
                "__delitem__": [
                    "self",
                    "key"
                ],
                "get": [
                    "self",
                    "key",
                    "default"
                ],
                "_is_view": [
                    "self"
                ],
                "reindex_like": [
                    "self",
                    "other",
                    "method",
                    "copy",
                    "limit",
                    "tolerance"
                ],
                "drop": [
                    "self",
                    "labels",
                    "axis",
                    "index",
                    "columns",
                    "level",
                    "inplace",
                    "errors"
                ],
                "_drop_axis": [
                    "self",
                    "labels",
                    "axis",
                    "level",
                    "errors"
                ],
                "_update_inplace": [
                    "self",
                    "result",
                    "verify_is_copy"
                ],
                "add_prefix": [
                    "self",
                    "prefix"
                ],
                "add_suffix": [
                    "self",
                    "suffix"
                ],
                "sort_values": [
                    "self",
                    "axis",
                    "ascending",
                    "inplace",
                    "kind",
                    "na_position",
                    "ignore_index",
                    "key"
                ],
                "reindex": [
                    "self"
                ],
                "_reindex_axes": [
                    "self",
                    "axes",
                    "level",
                    "limit",
                    "tolerance",
                    "method",
                    "fill_value",
                    "copy"
                ],
                "_needs_reindex_multi": [
                    "self",
                    "axes",
                    "method",
                    "level"
                ],
                "_reindex_multi": [
                    "self",
                    "axes",
                    "copy",
                    "fill_value"
                ],
                "_reindex_with_indexers": [
                    "self",
                    "reindexers",
                    "fill_value",
                    "copy",
                    "allow_dups"
                ],
                "filter": [
                    "self",
                    "items",
                    "like",
                    "regex",
                    "axis"
                ],
                "head": [
                    "self",
                    "n"
                ],
                "tail": [
                    "self",
                    "n"
                ],
                "sample": [
                    "self",
                    "n",
                    "frac",
                    "replace",
                    "weights",
                    "random_state",
                    "axis"
                ],
                "pipe": [
                    "self",
                    "func"
                ],
                "__finalize__": [
                    "self",
                    "other",
                    "method"
                ],
                "__getattr__": [
                    "self",
                    "name"
                ],
                "__setattr__": [
                    "self",
                    "name",
                    "value"
                ],
                "_dir_additions": [
                    "self"
                ],
                "_protect_consolidate": [
                    "self",
                    "f"
                ],
                "_consolidate_inplace": [
                    "self"
                ],
                "_consolidate": [
                    "self",
                    "inplace"
                ],
                "_is_mixed_type": [
                    "self"
                ],
                "_check_inplace_setting": [
                    "self",
                    "value"
                ],
                "_get_numeric_data": [
                    "self"
                ],
                "_get_bool_data": [
                    "self"
                ],
                "values": [
                    "self"
                ],
                "_values": [
                    "self"
                ],
                "dtypes": [
                    "self"
                ],
                "_to_dict_of_blocks": [
                    "self",
                    "copy"
                ],
                "astype": [
                    "self",
                    "dtype",
                    "copy",
                    "errors"
                ],
                "copy": [
                    "self",
                    "deep"
                ],
                "__copy__": [
                    "self",
                    "deep"
                ],
                "__deepcopy__": [
                    "self",
                    "memo"
                ],
                "_convert": [
                    "self",
                    "datetime",
                    "numeric",
                    "timedelta",
                    "coerce"
                ],
                "infer_objects": [
                    "self"
                ],
                "convert_dtypes": [
                    "self",
                    "infer_objects",
                    "convert_string",
                    "convert_integer",
                    "convert_boolean"
                ],
                "fillna": [
                    "self",
                    "value",
                    "method",
                    "axis",
                    "inplace",
                    "limit",
                    "downcast"
                ],
                "ffill": [
                    "self",
                    "axis",
                    "inplace",
                    "limit",
                    "downcast"
                ],
                "bfill": [
                    "self",
                    "axis",
                    "inplace",
                    "limit",
                    "downcast"
                ],
                "replace": [
                    "self",
                    "to_replace",
                    "value",
                    "inplace",
                    "limit",
                    "regex",
                    "method"
                ],
                "interpolate": [
                    "self",
                    "method",
                    "axis",
                    "limit",
                    "inplace",
                    "limit_direction",
                    "limit_area",
                    "downcast"
                ],
                "asof": [
                    "self",
                    "where",
                    "subset"
                ],
                "isna": [
                    "self"
                ],
                "isnull": [
                    "self"
                ],
                "notna": [
                    "self"
                ],
                "notnull": [
                    "self"
                ],
                "_clip_with_scalar": [
                    "self",
                    "lower",
                    "upper",
                    "inplace"
                ],
                "_clip_with_one_bound": [
                    "self",
                    "threshold",
                    "method",
                    "axis",
                    "inplace"
                ],
                "clip": [
                    "self",
                    "lower",
                    "upper",
                    "axis",
                    "inplace"
                ],
                "asfreq": [
                    "self",
                    "freq",
                    "method",
                    "how",
                    "normalize",
                    "fill_value"
                ],
                "at_time": [
                    "self",
                    "time",
                    "asof",
                    "axis"
                ],
                "between_time": [
                    "self",
                    "start_time",
                    "end_time",
                    "include_start",
                    "include_end",
                    "axis"
                ],
                "resample": [
                    "self",
                    "rule",
                    "axis",
                    "closed",
                    "label",
                    "convention",
                    "kind",
                    "loffset",
                    "base",
                    "on",
                    "level",
                    "origin",
                    "offset"
                ],
                "first": [
                    "self",
                    "offset"
                ],
                "last": [
                    "self",
                    "offset"
                ],
                "rank": [
                    "self",
                    "axis",
                    "method",
                    "numeric_only",
                    "na_option",
                    "ascending",
                    "pct"
                ],
                "compare": [
                    "self",
                    "other",
                    "align_axis",
                    "keep_shape",
                    "keep_equal"
                ],
                "align": [
                    "self",
                    "other",
                    "join",
                    "axis",
                    "level",
                    "copy",
                    "fill_value",
                    "method",
                    "limit",
                    "fill_axis",
                    "broadcast_axis"
                ],
                "_align_frame": [
                    "self",
                    "other",
                    "join",
                    "axis",
                    "level",
                    "copy",
                    "fill_value",
                    "method",
                    "limit",
                    "fill_axis"
                ],
                "_align_series": [
                    "self",
                    "other",
                    "join",
                    "axis",
                    "level",
                    "copy",
                    "fill_value",
                    "method",
                    "limit",
                    "fill_axis"
                ],
                "_where": [
                    "self",
                    "cond",
                    "other",
                    "inplace",
                    "axis",
                    "level",
                    "errors",
                    "try_cast"
                ],
                "where": [
                    "self",
                    "cond",
                    "other",
                    "inplace",
                    "axis",
                    "level",
                    "errors",
                    "try_cast"
                ],
                "mask": [
                    "self",
                    "cond",
                    "other",
                    "inplace",
                    "axis",
                    "level",
                    "errors",
                    "try_cast"
                ],
                "shift": [
                    "self",
                    "periods",
                    "freq",
                    "axis",
                    "fill_value"
                ],
                "slice_shift": [
                    "self",
                    "periods",
                    "axis"
                ],
                "tshift": [
                    "self",
                    "periods",
                    "freq",
                    "axis"
                ],
                "truncate": [
                    "self",
                    "before",
                    "after",
                    "axis",
                    "copy"
                ],
                "tz_convert": [
                    "self",
                    "tz",
                    "axis",
                    "level",
                    "copy"
                ],
                "tz_localize": [
                    "self",
                    "tz",
                    "axis",
                    "level",
                    "copy",
                    "ambiguous",
                    "nonexistent"
                ],
                "abs": [
                    "self"
                ],
                "describe": [
                    "self",
                    "percentiles",
                    "include",
                    "exclude",
                    "datetime_is_numeric"
                ],
                "pct_change": [
                    "self",
                    "periods",
                    "fill_method",
                    "limit",
                    "freq"
                ],
                "_agg_by_level": [
                    "self",
                    "name",
                    "axis",
                    "level",
                    "skipna"
                ],
                "_add_numeric_operations": [
                    "cls"
                ],
                "_add_series_or_dataframe_operations": [
                    "cls"
                ],
                "transform": [
                    "self",
                    "func"
                ],
                "_find_valid_index": [
                    "self",
                    "how"
                ],
                "first_valid_index": [
                    "self"
                ],
                "last_valid_index": [
                    "self"
                ]
            }
        },
        "pandas.core.construction": {
            "array": [
                "data",
                "dtype",
                "copy"
            ],
            "extract_array": [
                "obj",
                "extract_numpy"
            ],
            "sanitize_array": [
                "data",
                "index",
                "dtype",
                "copy",
                "raise_cast_failure"
            ],
            "_try_cast": [
                "arr",
                "dtype",
                "copy",
                "raise_cast_failure"
            ],
            "is_empty_data": [
                "data"
            ],
            "create_series_with_explicit_dtype": [
                "data",
                "index",
                "dtype",
                "name",
                "copy",
                "fastpath",
                "dtype_if_empty"
            ]
        },
        "pandas.core.shared_docs": {},
        "pandas.core.sorting": {
            "get_group_index": [
                "labels",
                "shape",
                "sort",
                "xnull"
            ],
            "get_compressed_ids": [
                "labels",
                "sizes"
            ],
            "is_int64_overflow_possible": [
                "shape"
            ],
            "decons_group_index": [
                "comp_labels",
                "shape"
            ],
            "decons_obs_group_ids": [
                "comp_ids",
                "obs_ids",
                "shape",
                "labels",
                "xnull"
            ],
            "indexer_from_factorized": [
                "labels",
                "shape",
                "compress"
            ],
            "lexsort_indexer": [
                "keys",
                "orders",
                "na_position",
                "key"
            ],
            "nargsort": [
                "items",
                "kind",
                "ascending",
                "na_position",
                "key"
            ],
            "nargminmax": [
                "values",
                "method"
            ],
            "ensure_key_mapped_multiindex": [
                "index",
                "key",
                "level"
            ],
            "ensure_key_mapped": [
                "values",
                "key",
                "levels"
            ],
            "get_flattened_iterator": [
                "comp_ids",
                "ngroups",
                "levels",
                "labels"
            ],
            "get_indexer_dict": [
                "label_list",
                "keys"
            ],
            "get_group_index_sorter": [
                "group_index",
                "ngroups"
            ],
            "compress_group_index": [
                "group_index",
                "sort"
            ],
            "_reorder_by_uniques": [
                "uniques",
                "labels"
            ],
            "_KeyMapper": {
                "__init__": [
                    "self",
                    "comp_ids",
                    "ngroups",
                    "levels",
                    "labels"
                ],
                "_populate_tables": [
                    "self"
                ],
                "get_key": [
                    "self",
                    "comp_id"
                ]
            }
        },
        "pandas.core.common": {
            "flatten": [
                "l"
            ],
            "consensus_name_attr": [
                "objs"
            ],
            "maybe_box_datetimelike": [
                "value",
                "dtype"
            ],
            "is_bool_indexer": [
                "key"
            ],
            "cast_scalar_indexer": [
                "val",
                "warn_float"
            ],
            "not_none": [],
            "any_none": [],
            "all_none": [],
            "any_not_none": [],
            "all_not_none": [],
            "count_not_none": [],
            "asarray_tuplesafe": [
                "values",
                "dtype"
            ],
            "index_labels_to_array": [
                "labels",
                "dtype"
            ],
            "maybe_make_list": [
                "obj"
            ],
            "maybe_iterable_to_list": [
                "obj"
            ],
            "is_null_slice": [
                "obj"
            ],
            "is_true_slices": [
                "l"
            ],
            "is_full_slice": [
                "obj",
                "l"
            ],
            "get_callable_name": [
                "obj"
            ],
            "apply_if_callable": [
                "maybe_callable",
                "obj"
            ],
            "dict_compat": [
                "d"
            ],
            "standardize_mapping": [
                "into"
            ],
            "random_state": [
                "state"
            ],
            "pipe": [
                "obj",
                "func"
            ],
            "get_rename_function": [
                "mapper"
            ],
            "convert_to_list_like": [
                "values"
            ],
            "temp_setattr": [
                "obj",
                "attr",
                "value"
            ],
            "SettingWithCopyError": {},
            "SettingWithCopyWarning": {}
        },
        "pandas.core.accessor": {
            "delegate_names": [
                "delegate",
                "accessors",
                "typ",
                "overwrite"
            ],
            "_register_accessor": [
                "name",
                "cls"
            ],
            "register_dataframe_accessor": [
                "name"
            ],
            "register_series_accessor": [
                "name"
            ],
            "register_index_accessor": [
                "name"
            ],
            "DirNamesMixin": {
                "_dir_deletions": [
                    "self"
                ],
                "_dir_additions": [
                    "self"
                ],
                "__dir__": [
                    "self"
                ]
            },
            "PandasDelegate": {
                "_delegate_property_get": [
                    "self",
                    "name"
                ],
                "_delegate_property_set": [
                    "self",
                    "name",
                    "value"
                ],
                "_delegate_method": [
                    "self",
                    "name"
                ],
                "_add_delegate_accessors": [
                    "cls",
                    "delegate",
                    "accessors",
                    "typ",
                    "overwrite"
                ]
            },
            "CachedAccessor": {
                "__init__": [
                    "self",
                    "name",
                    "accessor"
                ],
                "__get__": [
                    "self",
                    "obj",
                    "cls"
                ]
            }
        },
        "pandas.core.indexing": {
            "_tuplify": [
                "ndim",
                "loc"
            ],
            "convert_to_index_sliceable": [
                "obj",
                "key"
            ],
            "check_bool_indexer": [
                "index",
                "key"
            ],
            "convert_missing_indexer": [
                "indexer"
            ],
            "convert_from_missing_indexer_tuple": [
                "indexer",
                "axes"
            ],
            "maybe_convert_ix": [],
            "is_nested_tuple": [
                "tup",
                "labels"
            ],
            "is_label_like": [
                "key"
            ],
            "need_slice": [
                "obj"
            ],
            "_non_reducing_slice": [
                "slice_"
            ],
            "_maybe_numeric_slice": [
                "df",
                "slice_",
                "include_bool"
            ],
            "_IndexSlice": {
                "__getitem__": [
                    "self",
                    "arg"
                ]
            },
            "IndexingError": {},
            "IndexingMixin": {
                "iloc": [
                    "self"
                ],
                "loc": [
                    "self"
                ],
                "at": [
                    "self"
                ],
                "iat": [
                    "self"
                ]
            },
            "_LocationIndexer": {
                "__call__": [
                    "self",
                    "axis"
                ],
                "_get_setitem_indexer": [
                    "self",
                    "key"
                ],
                "_ensure_listlike_indexer": [
                    "self",
                    "key",
                    "axis"
                ],
                "__setitem__": [
                    "self",
                    "key",
                    "value"
                ],
                "_validate_key": [
                    "self",
                    "key",
                    "axis"
                ],
                "_has_valid_tuple": [
                    "self",
                    "key"
                ],
                "_is_nested_tuple_indexer": [
                    "self",
                    "tup"
                ],
                "_convert_tuple": [
                    "self",
                    "key",
                    "is_setter"
                ],
                "_getitem_tuple_same_dim": [
                    "self",
                    "tup"
                ],
                "_getitem_lowerdim": [
                    "self",
                    "tup"
                ],
                "_getitem_nested_tuple": [
                    "self",
                    "tup"
                ],
                "_convert_to_indexer": [
                    "self",
                    "key",
                    "axis",
                    "is_setter"
                ],
                "__getitem__": [
                    "self",
                    "key"
                ],
                "_is_scalar_access": [
                    "self",
                    "key"
                ],
                "_getitem_tuple": [
                    "self",
                    "tup"
                ],
                "_getitem_axis": [
                    "self",
                    "key",
                    "axis"
                ],
                "_has_valid_setitem_indexer": [
                    "self",
                    "indexer"
                ],
                "_getbool_axis": [
                    "self",
                    "key",
                    "axis"
                ]
            },
            "_LocIndexer": {
                "_validate_key": [
                    "self",
                    "key",
                    "axis"
                ],
                "_has_valid_setitem_indexer": [
                    "self",
                    "indexer"
                ],
                "_is_scalar_access": [
                    "self",
                    "key"
                ],
                "_multi_take_opportunity": [
                    "self",
                    "tup"
                ],
                "_multi_take": [
                    "self",
                    "tup"
                ],
                "_getitem_iterable": [
                    "self",
                    "key",
                    "axis"
                ],
                "_getitem_tuple": [
                    "self",
                    "tup"
                ],
                "_get_label": [
                    "self",
                    "label",
                    "axis"
                ],
                "_handle_lowerdim_multi_index_axis0": [
                    "self",
                    "tup"
                ],
                "_getitem_axis": [
                    "self",
                    "key",
                    "axis"
                ],
                "_get_slice_axis": [
                    "self",
                    "slice_obj",
                    "axis"
                ],
                "_convert_to_indexer": [
                    "self",
                    "key",
                    "axis",
                    "is_setter"
                ],
                "_get_listlike_indexer": [
                    "self",
                    "key",
                    "axis",
                    "raise_missing"
                ],
                "_validate_read_indexer": [
                    "self",
                    "key",
                    "indexer",
                    "axis",
                    "raise_missing"
                ]
            },
            "_iLocIndexer": {
                "_validate_key": [
                    "self",
                    "key",
                    "axis"
                ],
                "_has_valid_setitem_indexer": [
                    "self",
                    "indexer"
                ],
                "_is_scalar_access": [
                    "self",
                    "key"
                ],
                "_validate_integer": [
                    "self",
                    "key",
                    "axis"
                ],
                "_getitem_tuple": [
                    "self",
                    "tup"
                ],
                "_get_list_axis": [
                    "self",
                    "key",
                    "axis"
                ],
                "_getitem_axis": [
                    "self",
                    "key",
                    "axis"
                ],
                "_get_slice_axis": [
                    "self",
                    "slice_obj",
                    "axis"
                ],
                "_convert_to_indexer": [
                    "self",
                    "key",
                    "axis",
                    "is_setter"
                ],
                "_get_setitem_indexer": [
                    "self",
                    "key"
                ],
                "_setitem_with_indexer": [
                    "self",
                    "indexer",
                    "value"
                ],
                "_setitem_with_indexer_missing": [
                    "self",
                    "indexer",
                    "value"
                ],
                "_align_series": [
                    "self",
                    "indexer",
                    "ser",
                    "multiindex_indexer"
                ],
                "_align_frame": [
                    "self",
                    "indexer",
                    "df"
                ]
            },
            "_ScalarAccessIndexer": {
                "_convert_key": [
                    "self",
                    "key",
                    "is_setter"
                ],
                "__getitem__": [
                    "self",
                    "key"
                ],
                "__setitem__": [
                    "self",
                    "key",
                    "value"
                ]
            },
            "_AtIndexer": {
                "_convert_key": [
                    "self",
                    "key",
                    "is_setter"
                ],
                "_axes_are_unique": [
                    "self"
                ],
                "__getitem__": [
                    "self",
                    "key"
                ],
                "__setitem__": [
                    "self",
                    "key",
                    "value"
                ]
            },
            "_iAtIndexer": {
                "_convert_key": [
                    "self",
                    "key",
                    "is_setter"
                ]
            }
        },
        "pandas.core.apply": {
            "frame_apply": [
                "obj",
                "func",
                "axis",
                "raw",
                "result_type",
                "ignore_failures",
                "args",
                "kwds"
            ],
            "FrameApply": {
                "result_index": [
                    "self"
                ],
                "result_columns": [
                    "self"
                ],
                "series_generator": [
                    "self"
                ],
                "wrap_results_for_axis": [
                    "self",
                    "results",
                    "res_index"
                ],
                "__init__": [
                    "self",
                    "obj",
                    "func",
                    "raw",
                    "result_type",
                    "ignore_failures",
                    "args",
                    "kwds"
                ],
                "res_columns": [
                    "self"
                ],
                "columns": [
                    "self"
                ],
                "index": [
                    "self"
                ],
                "values": [
                    "self"
                ],
                "dtypes": [
                    "self"
                ],
                "agg_axis": [
                    "self"
                ],
                "get_result": [
                    "self"
                ],
                "apply_empty_result": [
                    "self"
                ],
                "apply_raw": [
                    "self"
                ],
                "apply_broadcast": [
                    "self",
                    "target"
                ],
                "apply_standard": [
                    "self"
                ],
                "apply_series_generator": [
                    "self"
                ],
                "wrap_results": [
                    "self",
                    "results",
                    "res_index"
                ]
            },
            "FrameRowApply": {
                "apply_broadcast": [
                    "self",
                    "target"
                ],
                "series_generator": [
                    "self"
                ],
                "result_index": [
                    "self"
                ],
                "result_columns": [
                    "self"
                ],
                "wrap_results_for_axis": [
                    "self",
                    "results",
                    "res_index"
                ]
            },
            "FrameColumnApply": {
                "apply_broadcast": [
                    "self",
                    "target"
                ],
                "series_generator": [
                    "self"
                ],
                "result_index": [
                    "self"
                ],
                "result_columns": [
                    "self"
                ],
                "wrap_results_for_axis": [
                    "self",
                    "results",
                    "res_index"
                ],
                "infer_to_same_shape": [
                    "self",
                    "results",
                    "res_index"
                ]
            }
        },
        "pandas.core.strings": {
            "cat_core": [
                "list_of_columns",
                "sep"
            ],
            "cat_safe": [
                "list_of_columns",
                "sep"
            ],
            "_na_map": [
                "f",
                "arr",
                "na_result",
                "dtype"
            ],
            "_map_stringarray": [
                "func",
                "arr",
                "na_value",
                "dtype"
            ],
            "_map_object": [
                "f",
                "arr",
                "na_mask",
                "na_value",
                "dtype"
            ],
            "str_count": [
                "arr",
                "pat",
                "flags"
            ],
            "str_contains": [
                "arr",
                "pat",
                "case",
                "flags",
                "na",
                "regex"
            ],
            "str_startswith": [
                "arr",
                "pat",
                "na"
            ],
            "str_endswith": [
                "arr",
                "pat",
                "na"
            ],
            "str_replace": [
                "arr",
                "pat",
                "repl",
                "n",
                "case",
                "flags",
                "regex"
            ],
            "str_repeat": [
                "arr",
                "repeats"
            ],
            "str_match": [
                "arr",
                "pat",
                "case",
                "flags",
                "na"
            ],
            "str_fullmatch": [
                "arr",
                "pat",
                "case",
                "flags",
                "na"
            ],
            "_get_single_group_name": [
                "rx"
            ],
            "_groups_or_na_fun": [
                "regex"
            ],
            "_result_dtype": [
                "arr"
            ],
            "_str_extract_noexpand": [
                "arr",
                "pat",
                "flags"
            ],
            "_str_extract_frame": [
                "arr",
                "pat",
                "flags"
            ],
            "str_extract": [
                "arr",
                "pat",
                "flags",
                "expand"
            ],
            "str_extractall": [
                "arr",
                "pat",
                "flags"
            ],
            "str_get_dummies": [
                "arr",
                "sep"
            ],
            "str_join": [
                "arr",
                "sep"
            ],
            "str_findall": [
                "arr",
                "pat",
                "flags"
            ],
            "str_find": [
                "arr",
                "sub",
                "start",
                "end",
                "side"
            ],
            "str_index": [
                "arr",
                "sub",
                "start",
                "end",
                "side"
            ],
            "str_pad": [
                "arr",
                "width",
                "side",
                "fillchar"
            ],
            "str_split": [
                "arr",
                "pat",
                "n"
            ],
            "str_rsplit": [
                "arr",
                "pat",
                "n"
            ],
            "str_slice": [
                "arr",
                "start",
                "stop",
                "step"
            ],
            "str_slice_replace": [
                "arr",
                "start",
                "stop",
                "repl"
            ],
            "str_strip": [
                "arr",
                "to_strip",
                "side"
            ],
            "str_wrap": [
                "arr",
                "width"
            ],
            "str_translate": [
                "arr",
                "table"
            ],
            "str_get": [
                "arr",
                "i"
            ],
            "str_decode": [
                "arr",
                "encoding",
                "errors"
            ],
            "str_encode": [
                "arr",
                "encoding",
                "errors"
            ],
            "forbid_nonstring_types": [
                "forbidden",
                "name"
            ],
            "_noarg_wrapper": [
                "f",
                "name",
                "docstring",
                "forbidden_types",
                "returns_string"
            ],
            "_pat_wrapper": [
                "f",
                "flags",
                "na",
                "name",
                "forbidden_types",
                "returns_string"
            ],
            "copy": [
                "source"
            ],
            "StringMethods": {
                "__init__": [
                    "self",
                    "data"
                ],
                "_validate": [
                    "data"
                ],
                "__getitem__": [
                    "self",
                    "key"
                ],
                "__iter__": [
                    "self"
                ],
                "_wrap_result": [
                    "self",
                    "result",
                    "use_codes",
                    "name",
                    "expand",
                    "fill_value",
                    "returns_string"
                ],
                "_get_series_list": [
                    "self",
                    "others"
                ],
                "cat": [
                    "self",
                    "others",
                    "sep",
                    "na_rep",
                    "join"
                ],
                "split": [
                    "self",
                    "pat",
                    "n",
                    "expand"
                ],
                "rsplit": [
                    "self",
                    "pat",
                    "n",
                    "expand"
                ],
                "partition": [
                    "self",
                    "sep",
                    "expand"
                ],
                "rpartition": [
                    "self",
                    "sep",
                    "expand"
                ],
                "get": [
                    "self",
                    "i"
                ],
                "join": [
                    "self",
                    "sep"
                ],
                "contains": [
                    "self",
                    "pat",
                    "case",
                    "flags",
                    "na",
                    "regex"
                ],
                "match": [
                    "self",
                    "pat",
                    "case",
                    "flags",
                    "na"
                ],
                "fullmatch": [
                    "self",
                    "pat",
                    "case",
                    "flags",
                    "na"
                ],
                "replace": [
                    "self",
                    "pat",
                    "repl",
                    "n",
                    "case",
                    "flags",
                    "regex"
                ],
                "repeat": [
                    "self",
                    "repeats"
                ],
                "pad": [
                    "self",
                    "width",
                    "side",
                    "fillchar"
                ],
                "center": [
                    "self",
                    "width",
                    "fillchar"
                ],
                "ljust": [
                    "self",
                    "width",
                    "fillchar"
                ],
                "rjust": [
                    "self",
                    "width",
                    "fillchar"
                ],
                "zfill": [
                    "self",
                    "width"
                ],
                "slice": [
                    "self",
                    "start",
                    "stop",
                    "step"
                ],
                "slice_replace": [
                    "self",
                    "start",
                    "stop",
                    "repl"
                ],
                "decode": [
                    "self",
                    "encoding",
                    "errors"
                ],
                "encode": [
                    "self",
                    "encoding",
                    "errors"
                ],
                "strip": [
                    "self",
                    "to_strip"
                ],
                "lstrip": [
                    "self",
                    "to_strip"
                ],
                "rstrip": [
                    "self",
                    "to_strip"
                ],
                "wrap": [
                    "self",
                    "width"
                ],
                "get_dummies": [
                    "self",
                    "sep"
                ],
                "translate": [
                    "self",
                    "table"
                ],
                "extract": [
                    "self",
                    "pat",
                    "flags",
                    "expand"
                ],
                "extractall": [
                    "self",
                    "pat",
                    "flags"
                ],
                "find": [
                    "self",
                    "sub",
                    "start",
                    "end"
                ],
                "rfind": [
                    "self",
                    "sub",
                    "start",
                    "end"
                ],
                "normalize": [
                    "self",
                    "form"
                ],
                "index": [
                    "self",
                    "sub",
                    "start",
                    "end"
                ],
                "rindex": [
                    "self",
                    "sub",
                    "start",
                    "end"
                ],
                "_make_accessor": [
                    "cls",
                    "data"
                ]
            }
        },
        "pandas.core.frame": {
            "_from_nested_dict": [
                "data"
            ],
            "DataFrame": {
                "_constructor": [
                    "self"
                ],
                "_constructor_expanddim": [
                    "self"
                ],
                "__init__": [
                    "self",
                    "data",
                    "index",
                    "columns",
                    "dtype",
                    "copy"
                ],
                "axes": [
                    "self"
                ],
                "shape": [
                    "self"
                ],
                "_is_homogeneous_type": [
                    "self"
                ],
                "_can_fast_transpose": [
                    "self"
                ],
                "_repr_fits_vertical_": [
                    "self"
                ],
                "_repr_fits_horizontal_": [
                    "self",
                    "ignore_width"
                ],
                "_info_repr": [
                    "self"
                ],
                "__repr__": [
                    "self"
                ],
                "_repr_html_": [
                    "self"
                ],
                "to_string": [
                    "self",
                    "buf",
                    "columns",
                    "col_space",
                    "header",
                    "index",
                    "na_rep",
                    "formatters",
                    "float_format",
                    "sparsify",
                    "index_names",
                    "justify",
                    "max_rows",
                    "min_rows",
                    "max_cols",
                    "show_dimensions",
                    "decimal",
                    "line_width",
                    "max_colwidth",
                    "encoding"
                ],
                "style": [
                    "self"
                ],
                "items": [
                    "self"
                ],
                "iteritems": [
                    "self"
                ],
                "iterrows": [
                    "self"
                ],
                "itertuples": [
                    "self",
                    "index",
                    "name"
                ],
                "__len__": [
                    "self"
                ],
                "dot": [
                    "self",
                    "other"
                ],
                "__matmul__": [
                    "self",
                    "other"
                ],
                "__rmatmul__": [
                    "self",
                    "other"
                ],
                "from_dict": [
                    "cls",
                    "data",
                    "orient",
                    "dtype",
                    "columns"
                ],
                "to_numpy": [
                    "self",
                    "dtype",
                    "copy",
                    "na_value"
                ],
                "to_dict": [
                    "self",
                    "orient",
                    "into"
                ],
                "to_gbq": [
                    "self",
                    "destination_table",
                    "project_id",
                    "chunksize",
                    "reauth",
                    "if_exists",
                    "auth_local_webserver",
                    "table_schema",
                    "location",
                    "progress_bar",
                    "credentials"
                ],
                "from_records": [
                    "cls",
                    "data",
                    "index",
                    "exclude",
                    "columns",
                    "coerce_float",
                    "nrows"
                ],
                "to_records": [
                    "self",
                    "index",
                    "column_dtypes",
                    "index_dtypes"
                ],
                "_from_arrays": [
                    "cls",
                    "arrays",
                    "columns",
                    "index",
                    "dtype",
                    "verify_integrity"
                ],
                "to_stata": [
                    "self",
                    "path",
                    "convert_dates",
                    "write_index",
                    "byteorder",
                    "time_stamp",
                    "data_label",
                    "variable_labels",
                    "version",
                    "convert_strl",
                    "compression"
                ],
                "to_feather": [
                    "self",
                    "path"
                ],
                "to_markdown": [
                    "self",
                    "buf",
                    "mode",
                    "index"
                ],
                "to_parquet": [
                    "self",
                    "path",
                    "engine",
                    "compression",
                    "index",
                    "partition_cols"
                ],
                "to_html": [
                    "self",
                    "buf",
                    "columns",
                    "col_space",
                    "header",
                    "index",
                    "na_rep",
                    "formatters",
                    "float_format",
                    "sparsify",
                    "index_names",
                    "justify",
                    "max_rows",
                    "max_cols",
                    "show_dimensions",
                    "decimal",
                    "bold_rows",
                    "classes",
                    "escape",
                    "notebook",
                    "border",
                    "table_id",
                    "render_links",
                    "encoding"
                ],
                "info": [
                    "self",
                    "verbose",
                    "buf",
                    "max_cols",
                    "memory_usage",
                    "null_counts"
                ],
                "memory_usage": [
                    "self",
                    "index",
                    "deep"
                ],
                "transpose": [
                    "self"
                ],
                "T": [
                    "self"
                ],
                "_ixs": [
                    "self",
                    "i",
                    "axis"
                ],
                "_get_column_array": [
                    "self",
                    "i"
                ],
                "_iter_column_arrays": [
                    "self"
                ],
                "__getitem__": [
                    "self",
                    "key"
                ],
                "_getitem_bool_array": [
                    "self",
                    "key"
                ],
                "_getitem_multilevel": [
                    "self",
                    "key"
                ],
                "_get_value": [
                    "self",
                    "index",
                    "col",
                    "takeable"
                ],
                "__setitem__": [
                    "self",
                    "key",
                    "value"
                ],
                "_setitem_slice": [
                    "self",
                    "key",
                    "value"
                ],
                "_setitem_array": [
                    "self",
                    "key",
                    "value"
                ],
                "_setitem_frame": [
                    "self",
                    "key",
                    "value"
                ],
                "_iset_item": [
                    "self",
                    "loc",
                    "value"
                ],
                "_set_item": [
                    "self",
                    "key",
                    "value"
                ],
                "_set_value": [
                    "self",
                    "index",
                    "col",
                    "value",
                    "takeable"
                ],
                "_ensure_valid_index": [
                    "self",
                    "value"
                ],
                "_box_col_values": [
                    "self",
                    "values",
                    "loc"
                ],
                "query": [
                    "self",
                    "expr",
                    "inplace"
                ],
                "eval": [
                    "self",
                    "expr",
                    "inplace"
                ],
                "select_dtypes": [
                    "self",
                    "include",
                    "exclude"
                ],
                "insert": [
                    "self",
                    "loc",
                    "column",
                    "value",
                    "allow_duplicates"
                ],
                "assign": [
                    "self"
                ],
                "_sanitize_column": [
                    "self",
                    "key",
                    "value",
                    "broadcast"
                ],
                "_series": [
                    "self"
                ],
                "lookup": [
                    "self",
                    "row_labels",
                    "col_labels"
                ],
                "_reindex_axes": [
                    "self",
                    "axes",
                    "level",
                    "limit",
                    "tolerance",
                    "method",
                    "fill_value",
                    "copy"
                ],
                "_reindex_index": [
                    "self",
                    "new_index",
                    "method",
                    "copy",
                    "level",
                    "fill_value",
                    "limit",
                    "tolerance"
                ],
                "_reindex_columns": [
                    "self",
                    "new_columns",
                    "method",
                    "copy",
                    "level",
                    "fill_value",
                    "limit",
                    "tolerance"
                ],
                "_reindex_multi": [
                    "self",
                    "axes",
                    "copy",
                    "fill_value"
                ],
                "align": [
                    "self",
                    "other",
                    "join",
                    "axis",
                    "level",
                    "copy",
                    "fill_value",
                    "method",
                    "limit",
                    "fill_axis",
                    "broadcast_axis"
                ],
                "set_axis": [
                    "self",
                    "labels",
                    "axis",
                    "inplace"
                ],
                "reindex": [
                    "self"
                ],
                "drop": [
                    "self",
                    "labels",
                    "axis",
                    "index",
                    "columns",
                    "level",
                    "inplace",
                    "errors"
                ],
                "rename": [
                    "self",
                    "mapper"
                ],
                "fillna": [
                    "self",
                    "value",
                    "method",
                    "axis",
                    "inplace",
                    "limit",
                    "downcast"
                ],
                "pop": [
                    "self",
                    "item"
                ],
                "replace": [
                    "self",
                    "to_replace",
                    "value",
                    "inplace",
                    "limit",
                    "regex",
                    "method"
                ],
                "_replace_columnwise": [
                    "self",
                    "mapping",
                    "inplace",
                    "regex"
                ],
                "shift": [
                    "self",
                    "periods",
                    "freq",
                    "axis",
                    "fill_value"
                ],
                "set_index": [
                    "self",
                    "keys",
                    "drop",
                    "append",
                    "inplace",
                    "verify_integrity"
                ],
                "reset_index": [
                    "self",
                    "level",
                    "drop",
                    "inplace",
                    "col_level",
                    "col_fill"
                ],
                "isna": [
                    "self"
                ],
                "isnull": [
                    "self"
                ],
                "notna": [
                    "self"
                ],
                "notnull": [
                    "self"
                ],
                "dropna": [
                    "self",
                    "axis",
                    "how",
                    "thresh",
                    "subset",
                    "inplace"
                ],
                "drop_duplicates": [
                    "self",
                    "subset",
                    "keep",
                    "inplace",
                    "ignore_index"
                ],
                "duplicated": [
                    "self",
                    "subset",
                    "keep"
                ],
                "sort_values": [
                    "self",
                    "by",
                    "axis",
                    "ascending",
                    "inplace",
                    "kind",
                    "na_position",
                    "ignore_index",
                    "key"
                ],
                "sort_index": [
                    "self",
                    "axis",
                    "level",
                    "ascending",
                    "inplace",
                    "kind",
                    "na_position",
                    "sort_remaining",
                    "ignore_index",
                    "key"
                ],
                "value_counts": [
                    "self",
                    "subset",
                    "normalize",
                    "sort",
                    "ascending"
                ],
                "nlargest": [
                    "self",
                    "n",
                    "columns",
                    "keep"
                ],
                "nsmallest": [
                    "self",
                    "n",
                    "columns",
                    "keep"
                ],
                "swaplevel": [
                    "self",
                    "i",
                    "j",
                    "axis"
                ],
                "reorder_levels": [
                    "self",
                    "order",
                    "axis"
                ],
                "_combine_frame": [
                    "self",
                    "other",
                    "func",
                    "fill_value"
                ],
                "_construct_result": [
                    "self",
                    "result"
                ],
                "compare": [
                    "self",
                    "other",
                    "align_axis",
                    "keep_shape",
                    "keep_equal"
                ],
                "combine": [
                    "self",
                    "other",
                    "func",
                    "fill_value",
                    "overwrite"
                ],
                "combine_first": [
                    "self",
                    "other"
                ],
                "update": [
                    "self",
                    "other",
                    "join",
                    "overwrite",
                    "filter_func",
                    "errors"
                ],
                "groupby": [
                    "self",
                    "by",
                    "axis",
                    "level",
                    "as_index",
                    "sort",
                    "group_keys",
                    "squeeze",
                    "observed",
                    "dropna"
                ],
                "pivot": [
                    "self",
                    "index",
                    "columns",
                    "values"
                ],
                "pivot_table": [
                    "self",
                    "values",
                    "index",
                    "columns",
                    "aggfunc",
                    "fill_value",
                    "margins",
                    "dropna",
                    "margins_name",
                    "observed"
                ],
                "stack": [
                    "self",
                    "level",
                    "dropna"
                ],
                "explode": [
                    "self",
                    "column",
                    "ignore_index"
                ],
                "unstack": [
                    "self",
                    "level",
                    "fill_value"
                ],
                "melt": [
                    "self",
                    "id_vars",
                    "value_vars",
                    "var_name",
                    "value_name",
                    "col_level",
                    "ignore_index"
                ],
                "diff": [
                    "self",
                    "periods",
                    "axis"
                ],
                "_gotitem": [
                    "self",
                    "key",
                    "ndim",
                    "subset"
                ],
                "aggregate": [
                    "self",
                    "func",
                    "axis"
                ],
                "_aggregate": [
                    "self",
                    "arg",
                    "axis"
                ],
                "transform": [
                    "self",
                    "func",
                    "axis"
                ],
                "apply": [
                    "self",
                    "func",
                    "axis",
                    "raw",
                    "result_type",
                    "args"
                ],
                "applymap": [
                    "self",
                    "func"
                ],
                "append": [
                    "self",
                    "other",
                    "ignore_index",
                    "verify_integrity",
                    "sort"
                ],
                "join": [
                    "self",
                    "other",
                    "on",
                    "how",
                    "lsuffix",
                    "rsuffix",
                    "sort"
                ],
                "_join_compat": [
                    "self",
                    "other",
                    "on",
                    "how",
                    "lsuffix",
                    "rsuffix",
                    "sort"
                ],
                "merge": [
                    "self",
                    "right",
                    "how",
                    "on",
                    "left_on",
                    "right_on",
                    "left_index",
                    "right_index",
                    "sort",
                    "suffixes",
                    "copy",
                    "indicator",
                    "validate"
                ],
                "round": [
                    "self",
                    "decimals"
                ],
                "corr": [
                    "self",
                    "method",
                    "min_periods"
                ],
                "cov": [
                    "self",
                    "min_periods",
                    "ddof"
                ],
                "corrwith": [
                    "self",
                    "other",
                    "axis",
                    "drop",
                    "method"
                ],
                "count": [
                    "self",
                    "axis",
                    "level",
                    "numeric_only"
                ],
                "_count_level": [
                    "self",
                    "level",
                    "axis",
                    "numeric_only"
                ],
                "_reduce": [
                    "self",
                    "op",
                    "name",
                    "axis",
                    "skipna",
                    "numeric_only",
                    "filter_type"
                ],
                "nunique": [
                    "self",
                    "axis",
                    "dropna"
                ],
                "idxmin": [
                    "self",
                    "axis",
                    "skipna"
                ],
                "idxmax": [
                    "self",
                    "axis",
                    "skipna"
                ],
                "_get_agg_axis": [
                    "self",
                    "axis_num"
                ],
                "mode": [
                    "self",
                    "axis",
                    "numeric_only",
                    "dropna"
                ],
                "quantile": [
                    "self",
                    "q",
                    "axis",
                    "numeric_only",
                    "interpolation"
                ],
                "to_timestamp": [
                    "self",
                    "freq",
                    "how",
                    "axis",
                    "copy"
                ],
                "to_period": [
                    "self",
                    "freq",
                    "axis",
                    "copy"
                ],
                "isin": [
                    "self",
                    "values"
                ],
                "_AXIS_NUMBERS": [
                    "self"
                ],
                "_AXIS_NAMES": [
                    "self"
                ]
            }
        },
        "pandas.core.indexers": {
            "is_valid_positional_slice": [
                "slc"
            ],
            "is_list_like_indexer": [
                "key"
            ],
            "is_scalar_indexer": [
                "indexer",
                "ndim"
            ],
            "is_empty_indexer": [
                "indexer",
                "arr_value"
            ],
            "check_setitem_lengths": [
                "indexer",
                "value",
                "values"
            ],
            "validate_indices": [
                "indices",
                "n"
            ],
            "maybe_convert_indices": [
                "indices",
                "n"
            ],
            "length_of_indexer": [
                "indexer",
                "target"
            ],
            "deprecate_ndim_indexing": [
                "result",
                "stacklevel"
            ],
            "unpack_1tuple": [
                "tup"
            ],
            "check_array_indexer": [
                "array",
                "indexer"
            ]
        },
        "pandas.core.aggregation": {
            "reconstruct_func": [
                "func"
            ],
            "is_multi_agg_with_relabel": [],
            "normalize_keyword_aggregation": [
                "kwargs"
            ],
            "_make_unique_kwarg_list": [
                "seq"
            ],
            "_managle_lambda_list": [
                "aggfuncs"
            ],
            "maybe_mangle_lambdas": [
                "agg_spec"
            ],
            "relabel_result": [
                "result",
                "func",
                "columns",
                "order"
            ],
            "validate_func_kwargs": [
                "kwargs"
            ]
        },
        "pandas.core.base": {
            "PandasObject": {
                "_constructor": [
                    "self"
                ],
                "__repr__": [
                    "self"
                ],
                "_reset_cache": [
                    "self",
                    "key"
                ],
                "__sizeof__": [
                    "self"
                ]
            },
            "NoNewAttributesMixin": {
                "_freeze": [
                    "self"
                ],
                "__setattr__": [
                    "self",
                    "key",
                    "value"
                ]
            },
            "DataError": {},
            "SpecificationError": {},
            "SelectionMixin": {
                "_selection_name": [
                    "self"
                ],
                "_selection_list": [
                    "self"
                ],
                "_selected_obj": [
                    "self"
                ],
                "ndim": [
                    "self"
                ],
                "_obj_with_exclusions": [
                    "self"
                ],
                "__getitem__": [
                    "self",
                    "key"
                ],
                "_gotitem": [
                    "self",
                    "key",
                    "ndim",
                    "subset"
                ],
                "aggregate": [
                    "self",
                    "func"
                ],
                "_try_aggregate_string_function": [
                    "self",
                    "arg"
                ],
                "_aggregate": [
                    "self",
                    "arg"
                ],
                "_aggregate_multiple_funcs": [
                    "self",
                    "arg",
                    "_axis"
                ],
                "_get_cython_func": [
                    "self",
                    "arg"
                ],
                "_is_builtin_func": [
                    "self",
                    "arg"
                ]
            },
            "ShallowMixin": {
                "_shallow_copy": [
                    "self",
                    "obj"
                ]
            },
            "IndexOpsMixin": {
                "_values": [
                    "self"
                ],
                "transpose": [
                    "self"
                ],
                "shape": [
                    "self"
                ],
                "__len__": [
                    "self"
                ],
                "ndim": [
                    "self"
                ],
                "item": [
                    "self"
                ],
                "nbytes": [
                    "self"
                ],
                "size": [
                    "self"
                ],
                "array": [
                    "self"
                ],
                "to_numpy": [
                    "self",
                    "dtype",
                    "copy",
                    "na_value"
                ],
                "empty": [
                    "self"
                ],
                "max": [
                    "self",
                    "axis",
                    "skipna"
                ],
                "argmax": [
                    "self",
                    "axis",
                    "skipna"
                ],
                "min": [
                    "self",
                    "axis",
                    "skipna"
                ],
                "argmin": [
                    "self",
                    "axis",
                    "skipna"
                ],
                "tolist": [
                    "self"
                ],
                "__iter__": [
                    "self"
                ],
                "hasnans": [
                    "self"
                ],
                "_reduce": [
                    "self",
                    "op",
                    "name",
                    "axis",
                    "skipna",
                    "numeric_only",
                    "filter_type"
                ],
                "_map_values": [
                    "self",
                    "mapper",
                    "na_action"
                ],
                "value_counts": [
                    "self",
                    "normalize",
                    "sort",
                    "ascending",
                    "bins",
                    "dropna"
                ],
                "unique": [
                    "self"
                ],
                "nunique": [
                    "self",
                    "dropna"
                ],
                "is_unique": [
                    "self"
                ],
                "is_monotonic": [
                    "self"
                ],
                "is_monotonic_increasing": [
                    "self"
                ],
                "is_monotonic_decreasing": [
                    "self"
                ],
                "memory_usage": [
                    "self",
                    "deep"
                ],
                "factorize": [
                    "self",
                    "sort",
                    "na_sentinel"
                ],
                "searchsorted": [
                    "self",
                    "value",
                    "side",
                    "sorter"
                ],
                "drop_duplicates": [
                    "self",
                    "keep"
                ],
                "duplicated": [
                    "self",
                    "keep"
                ]
            }
        },
        "pandas.core.api": {},
        "pandas.core.series": {
            "_coerce_method": [
                "converter"
            ],
            "Series": {
                "__init__": [
                    "self",
                    "data",
                    "index",
                    "dtype",
                    "name",
                    "copy",
                    "fastpath"
                ],
                "_init_dict": [
                    "self",
                    "data",
                    "index",
                    "dtype"
                ],
                "_constructor": [
                    "self"
                ],
                "_constructor_expanddim": [
                    "self"
                ],
                "_can_hold_na": [
                    "self"
                ],
                "_set_axis": [
                    "self",
                    "axis",
                    "labels",
                    "fastpath"
                ],
                "dtype": [
                    "self"
                ],
                "dtypes": [
                    "self"
                ],
                "name": [
                    "self",
                    "value"
                ],
                "values": [
                    "self"
                ],
                "_values": [
                    "self"
                ],
                "array": [
                    "self"
                ],
                "ravel": [
                    "self",
                    "order"
                ],
                "__len__": [
                    "self"
                ],
                "view": [
                    "self",
                    "dtype"
                ],
                "__array_ufunc__": [
                    "self",
                    "ufunc",
                    "method"
                ],
                "__array__": [
                    "self",
                    "dtype"
                ],
                "axes": [
                    "self"
                ],
                "take": [
                    "self",
                    "indices",
                    "axis",
                    "is_copy"
                ],
                "_take_with_is_copy": [
                    "self",
                    "indices",
                    "axis"
                ],
                "_ixs": [
                    "self",
                    "i",
                    "axis"
                ],
                "_slice": [
                    "self",
                    "slobj",
                    "axis"
                ],
                "__getitem__": [
                    "self",
                    "key"
                ],
                "_get_with": [
                    "self",
                    "key"
                ],
                "_get_values_tuple": [
                    "self",
                    "key"
                ],
                "_get_values": [
                    "self",
                    "indexer"
                ],
                "_get_value": [
                    "self",
                    "label",
                    "takeable"
                ],
                "__setitem__": [
                    "self",
                    "key",
                    "value"
                ],
                "_set_with_engine": [
                    "self",
                    "key",
                    "value"
                ],
                "_set_with": [
                    "self",
                    "key",
                    "value"
                ],
                "_set_value": [
                    "self",
                    "label",
                    "value",
                    "takeable"
                ],
                "_is_mixed_type": [
                    "self"
                ],
                "repeat": [
                    "self",
                    "repeats",
                    "axis"
                ],
                "reset_index": [
                    "self",
                    "level",
                    "drop",
                    "name",
                    "inplace"
                ],
                "__repr__": [
                    "self"
                ],
                "to_string": [
                    "self",
                    "buf",
                    "na_rep",
                    "float_format",
                    "header",
                    "index",
                    "length",
                    "dtype",
                    "name",
                    "max_rows",
                    "min_rows"
                ],
                "to_markdown": [
                    "self",
                    "buf",
                    "mode",
                    "index"
                ],
                "items": [
                    "self"
                ],
                "iteritems": [
                    "self"
                ],
                "keys": [
                    "self"
                ],
                "to_dict": [
                    "self",
                    "into"
                ],
                "to_frame": [
                    "self",
                    "name"
                ],
                "_set_name": [
                    "self",
                    "name",
                    "inplace"
                ],
                "groupby": [
                    "self",
                    "by",
                    "axis",
                    "level",
                    "as_index",
                    "sort",
                    "group_keys",
                    "squeeze",
                    "observed",
                    "dropna"
                ],
                "count": [
                    "self",
                    "level"
                ],
                "mode": [
                    "self",
                    "dropna"
                ],
                "unique": [
                    "self"
                ],
                "drop_duplicates": [
                    "self",
                    "keep",
                    "inplace"
                ],
                "duplicated": [
                    "self",
                    "keep"
                ],
                "idxmin": [
                    "self",
                    "axis",
                    "skipna"
                ],
                "idxmax": [
                    "self",
                    "axis",
                    "skipna"
                ],
                "round": [
                    "self",
                    "decimals"
                ],
                "quantile": [
                    "self",
                    "q",
                    "interpolation"
                ],
                "corr": [
                    "self",
                    "other",
                    "method",
                    "min_periods"
                ],
                "cov": [
                    "self",
                    "other",
                    "min_periods",
                    "ddof"
                ],
                "diff": [
                    "self",
                    "periods"
                ],
                "autocorr": [
                    "self",
                    "lag"
                ],
                "dot": [
                    "self",
                    "other"
                ],
                "__matmul__": [
                    "self",
                    "other"
                ],
                "__rmatmul__": [
                    "self",
                    "other"
                ],
                "searchsorted": [
                    "self",
                    "value",
                    "side",
                    "sorter"
                ],
                "append": [
                    "self",
                    "to_append",
                    "ignore_index",
                    "verify_integrity"
                ],
                "_binop": [
                    "self",
                    "other",
                    "func",
                    "level",
                    "fill_value"
                ],
                "_construct_result": [
                    "self",
                    "result",
                    "name"
                ],
                "compare": [
                    "self",
                    "other",
                    "align_axis",
                    "keep_shape",
                    "keep_equal"
                ],
                "combine": [
                    "self",
                    "other",
                    "func",
                    "fill_value"
                ],
                "combine_first": [
                    "self",
                    "other"
                ],
                "update": [
                    "self",
                    "other"
                ],
                "sort_values": [
                    "self",
                    "axis",
                    "ascending",
                    "inplace",
                    "kind",
                    "na_position",
                    "ignore_index",
                    "key"
                ],
                "sort_index": [
                    "self",
                    "axis",
                    "level",
                    "ascending",
                    "inplace",
                    "kind",
                    "na_position",
                    "sort_remaining",
                    "ignore_index",
                    "key"
                ],
                "argsort": [
                    "self",
                    "axis",
                    "kind",
                    "order"
                ],
                "nlargest": [
                    "self",
                    "n",
                    "keep"
                ],
                "nsmallest": [
                    "self",
                    "n",
                    "keep"
                ],
                "swaplevel": [
                    "self",
                    "i",
                    "j",
                    "copy"
                ],
                "reorder_levels": [
                    "self",
                    "order"
                ],
                "explode": [
                    "self",
                    "ignore_index"
                ],
                "unstack": [
                    "self",
                    "level",
                    "fill_value"
                ],
                "map": [
                    "self",
                    "arg",
                    "na_action"
                ],
                "_gotitem": [
                    "self",
                    "key",
                    "ndim",
                    "subset"
                ],
                "aggregate": [
                    "self",
                    "func",
                    "axis"
                ],
                "transform": [
                    "self",
                    "func",
                    "axis"
                ],
                "apply": [
                    "self",
                    "func",
                    "convert_dtype",
                    "args"
                ],
                "_reduce": [
                    "self",
                    "op",
                    "name",
                    "axis",
                    "skipna",
                    "numeric_only",
                    "filter_type"
                ],
                "_reindex_indexer": [
                    "self",
                    "new_index",
                    "indexer",
                    "copy"
                ],
                "_needs_reindex_multi": [
                    "self",
                    "axes",
                    "method",
                    "level"
                ],
                "align": [
                    "self",
                    "other",
                    "join",
                    "axis",
                    "level",
                    "copy",
                    "fill_value",
                    "method",
                    "limit",
                    "fill_axis",
                    "broadcast_axis"
                ],
                "rename": [
                    "self",
                    "index"
                ],
                "set_axis": [
                    "self",
                    "labels",
                    "axis",
                    "inplace"
                ],
                "reindex": [
                    "self",
                    "index"
                ],
                "drop": [
                    "self",
                    "labels",
                    "axis",
                    "index",
                    "columns",
                    "level",
                    "inplace",
                    "errors"
                ],
                "fillna": [
                    "self",
                    "value",
                    "method",
                    "axis",
                    "inplace",
                    "limit",
                    "downcast"
                ],
                "pop": [
                    "self",
                    "item"
                ],
                "replace": [
                    "self",
                    "to_replace",
                    "value",
                    "inplace",
                    "limit",
                    "regex",
                    "method"
                ],
                "shift": [
                    "self",
                    "periods",
                    "freq",
                    "axis",
                    "fill_value"
                ],
                "memory_usage": [
                    "self",
                    "index",
                    "deep"
                ],
                "isin": [
                    "self",
                    "values"
                ],
                "between": [
                    "self",
                    "left",
                    "right",
                    "inclusive"
                ],
                "_convert_dtypes": [
                    "self",
                    "infer_objects",
                    "convert_string",
                    "convert_integer",
                    "convert_boolean"
                ],
                "isna": [
                    "self"
                ],
                "isnull": [
                    "self"
                ],
                "notna": [
                    "self"
                ],
                "notnull": [
                    "self"
                ],
                "dropna": [
                    "self",
                    "axis",
                    "inplace",
                    "how"
                ],
                "to_timestamp": [
                    "self",
                    "freq",
                    "how",
                    "copy"
                ],
                "to_period": [
                    "self",
                    "freq",
                    "copy"
                ]
            }
        },
        "pandas.core.missing": {
            "mask_missing": [
                "arr",
                "values_to_mask"
            ],
            "clean_fill_method": [
                "method",
                "allow_nearest"
            ],
            "clean_interp_method": [
                "method"
            ],
            "find_valid_index": [
                "values",
                "how"
            ],
            "interpolate_1d": [
                "xvalues",
                "yvalues",
                "method",
                "limit",
                "limit_direction",
                "limit_area",
                "fill_value",
                "bounds_error",
                "order"
            ],
            "_interpolate_scipy_wrapper": [
                "x",
                "y",
                "new_x",
                "method",
                "fill_value",
                "bounds_error",
                "order"
            ],
            "_from_derivatives": [
                "xi",
                "yi",
                "x",
                "order",
                "der",
                "extrapolate"
            ],
            "_akima_interpolate": [
                "xi",
                "yi",
                "x",
                "der",
                "axis"
            ],
            "_cubicspline_interpolate": [
                "xi",
                "yi",
                "x",
                "axis",
                "bc_type",
                "extrapolate"
            ],
            "interpolate_2d": [
                "values",
                "method",
                "axis",
                "limit",
                "fill_value",
                "dtype"
            ],
            "_cast_values_for_fillna": [
                "values",
                "dtype"
            ],
            "_fillna_prep": [
                "values",
                "mask",
                "dtype"
            ],
            "pad_1d": [
                "values",
                "limit",
                "mask",
                "dtype"
            ],
            "backfill_1d": [
                "values",
                "limit",
                "mask",
                "dtype"
            ],
            "pad_2d": [
                "values",
                "limit",
                "mask",
                "dtype"
            ],
            "backfill_2d": [
                "values",
                "limit",
                "mask",
                "dtype"
            ],
            "get_fill_func": [
                "method"
            ],
            "clean_reindex_fill_method": [
                "method"
            ],
            "_interp_limit": [
                "invalid",
                "fw_limit",
                "bw_limit"
            ],
            "_rolling_window": [
                "a",
                "window"
            ]
        },
        "pandas.core": {},
        "pandas.core.nanops": {
            "set_use_bottleneck": [
                "v"
            ],
            "_bn_ok_dtype": [
                "dtype",
                "name"
            ],
            "_has_infs": [
                "result"
            ],
            "_get_fill_value": [
                "dtype",
                "fill_value",
                "fill_value_typ"
            ],
            "_maybe_get_mask": [
                "values",
                "skipna",
                "mask"
            ],
            "_get_values": [
                "values",
                "skipna",
                "fill_value",
                "fill_value_typ",
                "mask"
            ],
            "_na_ok_dtype": [
                "dtype"
            ],
            "_wrap_results": [
                "result",
                "dtype",
                "fill_value"
            ],
            "_na_for_min_count": [
                "values",
                "axis"
            ],
            "nanany": [
                "values",
                "axis",
                "skipna",
                "mask"
            ],
            "nanall": [
                "values",
                "axis",
                "skipna",
                "mask"
            ],
            "nansum": [
                "values",
                "axis",
                "skipna",
                "min_count",
                "mask"
            ],
            "nanmean": [
                "values",
                "axis",
                "skipna",
                "mask"
            ],
            "nanmedian": [
                "values",
                "axis",
                "skipna",
                "mask"
            ],
            "_get_counts_nanvar": [
                "value_counts",
                "mask",
                "axis",
                "ddof",
                "dtype"
            ],
            "nanstd": [
                "values",
                "axis",
                "skipna",
                "ddof",
                "mask"
            ],
            "nanvar": [
                "values",
                "axis",
                "skipna",
                "ddof",
                "mask"
            ],
            "nansem": [
                "values",
                "axis",
                "skipna",
                "ddof",
                "mask"
            ],
            "_nanminmax": [
                "meth",
                "fill_value_typ"
            ],
            "nanargmax": [
                "values",
                "axis",
                "skipna",
                "mask"
            ],
            "nanargmin": [
                "values",
                "axis",
                "skipna",
                "mask"
            ],
            "nanskew": [
                "values",
                "axis",
                "skipna",
                "mask"
            ],
            "nankurt": [
                "values",
                "axis",
                "skipna",
                "mask"
            ],
            "nanprod": [
                "values",
                "axis",
                "skipna",
                "min_count",
                "mask"
            ],
            "_maybe_arg_null_out": [
                "result",
                "axis",
                "mask",
                "skipna"
            ],
            "_get_counts": [
                "values_shape",
                "mask",
                "axis",
                "dtype"
            ],
            "_maybe_null_out": [
                "result",
                "axis",
                "mask",
                "shape",
                "min_count"
            ],
            "check_below_min_count": [
                "shape",
                "mask",
                "min_count"
            ],
            "_zero_out_fperr": [
                "arg"
            ],
            "nancorr": [
                "a",
                "b",
                "method",
                "min_periods"
            ],
            "get_corr_func": [
                "method"
            ],
            "nancov": [
                "a",
                "b",
                "min_periods",
                "ddof"
            ],
            "_ensure_numeric": [
                "x"
            ],
            "make_nancomp": [
                "op"
            ],
            "_nanpercentile_1d": [
                "values",
                "mask",
                "q",
                "na_value",
                "interpolation"
            ],
            "nanpercentile": [
                "values",
                "q",
                "axis",
                "na_value",
                "mask",
                "ndim",
                "interpolation"
            ],
            "na_accum_func": [
                "values",
                "accum_func",
                "skipna"
            ],
            "disallow": {
                "__init__": [
                    "self"
                ],
                "check": [
                    "self",
                    "obj"
                ],
                "__call__": [
                    "self",
                    "f"
                ]
            },
            "bottleneck_switch": {
                "__init__": [
                    "self",
                    "name"
                ],
                "__call__": [
                    "self",
                    "alt"
                ]
            }
        },
        "pandas.core.index": {},
        "pandas.core.arrays.categorical": {
            "_cat_compare_op": [
                "op"
            ],
            "contains": [
                "cat",
                "key",
                "container"
            ],
            "_get_codes_for_values": [
                "values",
                "categories"
            ],
            "recode_for_categories": [
                "codes",
                "old_categories",
                "new_categories"
            ],
            "factorize_from_iterable": [
                "values"
            ],
            "factorize_from_iterables": [
                "iterables"
            ],
            "Categorical": {
                "__init__": [
                    "self",
                    "values",
                    "categories",
                    "ordered",
                    "dtype",
                    "fastpath"
                ],
                "categories": [
                    "self",
                    "categories"
                ],
                "ordered": [
                    "self"
                ],
                "dtype": [
                    "self"
                ],
                "_constructor": [
                    "self"
                ],
                "_from_sequence": [
                    "cls",
                    "scalars",
                    "dtype",
                    "copy"
                ],
                "_formatter": [
                    "self",
                    "boxed"
                ],
                "astype": [
                    "self",
                    "dtype",
                    "copy"
                ],
                "itemsize": [
                    "self"
                ],
                "tolist": [
                    "self"
                ],
                "_from_inferred_categories": [
                    "cls",
                    "inferred_categories",
                    "inferred_codes",
                    "dtype",
                    "true_values"
                ],
                "from_codes": [
                    "cls",
                    "codes",
                    "categories",
                    "ordered",
                    "dtype"
                ],
                "codes": [
                    "self"
                ],
                "_set_categories": [
                    "self",
                    "categories",
                    "fastpath"
                ],
                "_set_dtype": [
                    "self",
                    "dtype"
                ],
                "set_ordered": [
                    "self",
                    "value",
                    "inplace"
                ],
                "as_ordered": [
                    "self",
                    "inplace"
                ],
                "as_unordered": [
                    "self",
                    "inplace"
                ],
                "set_categories": [
                    "self",
                    "new_categories",
                    "ordered",
                    "rename",
                    "inplace"
                ],
                "rename_categories": [
                    "self",
                    "new_categories",
                    "inplace"
                ],
                "reorder_categories": [
                    "self",
                    "new_categories",
                    "ordered",
                    "inplace"
                ],
                "add_categories": [
                    "self",
                    "new_categories",
                    "inplace"
                ],
                "remove_categories": [
                    "self",
                    "removals",
                    "inplace"
                ],
                "remove_unused_categories": [
                    "self",
                    "inplace"
                ],
                "map": [
                    "self",
                    "mapper"
                ],
                "shift": [
                    "self",
                    "periods",
                    "fill_value"
                ],
                "_validate_fill_value": [
                    "self",
                    "fill_value"
                ],
                "__array__": [
                    "self",
                    "dtype"
                ],
                "__array_ufunc__": [
                    "self",
                    "ufunc",
                    "method"
                ],
                "__setstate__": [
                    "self",
                    "state"
                ],
                "nbytes": [
                    "self"
                ],
                "memory_usage": [
                    "self",
                    "deep"
                ],
                "searchsorted": [
                    "self",
                    "value",
                    "side",
                    "sorter"
                ],
                "isna": [
                    "self"
                ],
                "notna": [
                    "self"
                ],
                "dropna": [
                    "self"
                ],
                "value_counts": [
                    "self",
                    "dropna"
                ],
                "_internal_get_values": [
                    "self"
                ],
                "check_for_ordered": [
                    "self",
                    "op"
                ],
                "_values_for_argsort": [
                    "self"
                ],
                "argsort": [
                    "self",
                    "ascending",
                    "kind"
                ],
                "sort_values": [
                    "self",
                    "inplace",
                    "ascending",
                    "na_position"
                ],
                "_values_for_rank": [
                    "self"
                ],
                "view": [
                    "self",
                    "dtype"
                ],
                "to_dense": [
                    "self"
                ],
                "fillna": [
                    "self",
                    "value",
                    "method",
                    "limit"
                ],
                "take": [
                    "self",
                    "indexer",
                    "allow_fill",
                    "fill_value"
                ],
                "_ndarray": [
                    "self"
                ],
                "_from_backing_data": [
                    "self",
                    "arr"
                ],
                "take_nd": [
                    "self",
                    "indexer",
                    "allow_fill",
                    "fill_value"
                ],
                "__iter__": [
                    "self"
                ],
                "__contains__": [
                    "self",
                    "key"
                ],
                "_tidy_repr": [
                    "self",
                    "max_vals",
                    "footer"
                ],
                "_repr_categories": [
                    "self"
                ],
                "_repr_categories_info": [
                    "self"
                ],
                "_repr_footer": [
                    "self"
                ],
                "_get_repr": [
                    "self",
                    "length",
                    "na_rep",
                    "footer"
                ],
                "__repr__": [
                    "self"
                ],
                "_maybe_coerce_indexer": [
                    "self",
                    "indexer"
                ],
                "__getitem__": [
                    "self",
                    "key"
                ],
                "__setitem__": [
                    "self",
                    "key",
                    "value"
                ],
                "_reverse_indexer": [
                    "self"
                ],
                "_reduce": [
                    "self",
                    "name",
                    "skipna"
                ],
                "min": [
                    "self",
                    "skipna"
                ],
                "max": [
                    "self",
                    "skipna"
                ],
                "mode": [
                    "self",
                    "dropna"
                ],
                "unique": [
                    "self"
                ],
                "_values_for_factorize": [
                    "self"
                ],
                "_from_factorized": [
                    "cls",
                    "uniques",
                    "original"
                ],
                "equals": [
                    "self",
                    "other"
                ],
                "is_dtype_equal": [
                    "self",
                    "other"
                ],
                "describe": [
                    "self"
                ],
                "_can_hold_na": [
                    "self"
                ],
                "_concat_same_type": [
                    "self",
                    "to_concat"
                ],
                "isin": [
                    "self",
                    "values"
                ],
                "replace": [
                    "self",
                    "to_replace",
                    "value",
                    "inplace"
                ]
            },
            "CategoricalAccessor": {
                "__init__": [
                    "self",
                    "data"
                ],
                "_validate": [
                    "data"
                ],
                "_delegate_property_get": [
                    "self",
                    "name"
                ],
                "_delegate_property_set": [
                    "self",
                    "name",
                    "new_values"
                ],
                "codes": [
                    "self"
                ],
                "_delegate_method": [
                    "self",
                    "name"
                ]
            }
        },
        "pandas.core.arrays.integer": {
            "integer_array": [
                "values",
                "dtype",
                "copy"
            ],
            "safe_cast": [
                "values",
                "dtype",
                "copy"
            ],
            "coerce_to_array": [
                "values",
                "dtype",
                "mask",
                "copy"
            ],
            "_IntegerDtype": {
                "__repr__": [
                    "self"
                ],
                "is_signed_integer": [
                    "self"
                ],
                "is_unsigned_integer": [
                    "self"
                ],
                "_is_numeric": [
                    "self"
                ],
                "numpy_dtype": [
                    "self"
                ],
                "kind": [
                    "self"
                ],
                "itemsize": [
                    "self"
                ],
                "construct_array_type": [
                    "cls"
                ],
                "_get_common_dtype": [
                    "self",
                    "dtypes"
                ],
                "__from_arrow__": [
                    "self",
                    "array"
                ]
            },
            "IntegerArray": {
                "dtype": [
                    "self"
                ],
                "__init__": [
                    "self",
                    "values",
                    "mask",
                    "copy"
                ],
                "_from_sequence": [
                    "cls",
                    "scalars",
                    "dtype",
                    "copy"
                ],
                "_from_sequence_of_strings": [
                    "cls",
                    "strings",
                    "dtype",
                    "copy"
                ],
                "__array_ufunc__": [
                    "self",
                    "ufunc",
                    "method"
                ],
                "_coerce_to_array": [
                    "self",
                    "value"
                ],
                "astype": [
                    "self",
                    "dtype",
                    "copy"
                ],
                "_values_for_argsort": [
                    "self"
                ],
                "_create_comparison_method": [
                    "cls",
                    "op"
                ],
                "sum": [
                    "self",
                    "skipna",
                    "min_count"
                ],
                "_maybe_mask_result": [
                    "self",
                    "result",
                    "mask",
                    "other",
                    "op_name"
                ],
                "_create_arithmetic_method": [
                    "cls",
                    "op"
                ]
            },
            "Int8Dtype": {},
            "Int16Dtype": {},
            "Int32Dtype": {},
            "Int64Dtype": {},
            "UInt8Dtype": {},
            "UInt16Dtype": {},
            "UInt32Dtype": {},
            "UInt64Dtype": {}
        },
        "pandas.core.arrays.interval": {
            "maybe_convert_platform_interval": [
                "values"
            ],
            "IntervalArray": {
                "__new__": [
                    "cls",
                    "data",
                    "closed",
                    "dtype",
                    "copy",
                    "verify_integrity"
                ],
                "_simple_new": [
                    "cls",
                    "left",
                    "right",
                    "closed",
                    "copy",
                    "dtype",
                    "verify_integrity"
                ],
                "_from_sequence": [
                    "cls",
                    "scalars",
                    "dtype",
                    "copy"
                ],
                "_from_factorized": [
                    "cls",
                    "values",
                    "original"
                ],
                "from_breaks": [
                    "cls",
                    "breaks",
                    "closed",
                    "copy",
                    "dtype"
                ],
                "from_arrays": [
                    "cls",
                    "left",
                    "right",
                    "closed",
                    "copy",
                    "dtype"
                ],
                "from_tuples": [
                    "cls",
                    "data",
                    "closed",
                    "copy",
                    "dtype"
                ],
                "_validate": [
                    "self"
                ],
                "__iter__": [
                    "self"
                ],
                "__len__": [
                    "self"
                ],
                "__getitem__": [
                    "self",
                    "value"
                ],
                "__setitem__": [
                    "self",
                    "key",
                    "value"
                ],
                "__eq__": [
                    "self",
                    "other"
                ],
                "fillna": [
                    "self",
                    "value",
                    "method",
                    "limit"
                ],
                "dtype": [
                    "self"
                ],
                "astype": [
                    "self",
                    "dtype",
                    "copy"
                ],
                "_concat_same_type": [
                    "cls",
                    "to_concat"
                ],
                "_shallow_copy": [
                    "self",
                    "left",
                    "right"
                ],
                "copy": [
                    "self"
                ],
                "isna": [
                    "self"
                ],
                "nbytes": [
                    "self"
                ],
                "size": [
                    "self"
                ],
                "shift": [
                    "self",
                    "periods",
                    "fill_value"
                ],
                "take": [
                    "self",
                    "indices",
                    "allow_fill",
                    "fill_value",
                    "axis"
                ],
                "value_counts": [
                    "self",
                    "dropna"
                ],
                "_format_data": [
                    "self"
                ],
                "__repr__": [
                    "self"
                ],
                "_format_space": [
                    "self"
                ],
                "left": [
                    "self"
                ],
                "right": [
                    "self"
                ],
                "closed": [
                    "self"
                ],
                "set_closed": [
                    "self",
                    "closed"
                ],
                "length": [
                    "self"
                ],
                "mid": [
                    "self"
                ],
                "is_non_overlapping_monotonic": [
                    "self"
                ],
                "__array__": [
                    "self",
                    "dtype"
                ],
                "__arrow_array__": [
                    "self",
                    "type"
                ],
                "to_tuples": [
                    "self",
                    "na_tuple"
                ],
                "repeat": [
                    "self",
                    "repeats",
                    "axis"
                ],
                "contains": [
                    "self",
                    "other"
                ],
                "overlaps": [
                    "self",
                    "other"
                ]
            }
        },
        "pandas.core.arrays._arrow_utils": {
            "pyarrow_array_to_numpy_and_mask": [
                "arr",
                "dtype"
            ]
        },
        "pandas.core.arrays.datetimelike": {
            "_datetimelike_array_cmp": [
                "cls",
                "op"
            ],
            "validate_periods": [
                "periods"
            ],
            "validate_endpoints": [
                "closed"
            ],
            "validate_inferred_freq": [
                "freq",
                "inferred_freq",
                "freq_infer"
            ],
            "maybe_infer_freq": [
                "freq"
            ],
            "AttributesMixin": {
                "_simple_new": [
                    "cls",
                    "values"
                ],
                "_scalar_type": [
                    "self"
                ],
                "_scalar_from_string": [
                    "self",
                    "value"
                ],
                "_unbox_scalar": [
                    "self",
                    "value"
                ],
                "_check_compatible_with": [
                    "self",
                    "other",
                    "setitem"
                ]
            },
            "DatelikeOps": {
                "strftime": [
                    "self",
                    "date_format"
                ]
            },
            "TimelikeOps": {
                "_round": [
                    "self",
                    "freq",
                    "mode",
                    "ambiguous",
                    "nonexistent"
                ],
                "round": [
                    "self",
                    "freq",
                    "ambiguous",
                    "nonexistent"
                ],
                "floor": [
                    "self",
                    "freq",
                    "ambiguous",
                    "nonexistent"
                ],
                "ceil": [
                    "self",
                    "freq",
                    "ambiguous",
                    "nonexistent"
                ],
                "_with_freq": [
                    "self",
                    "freq"
                ]
            },
            "DatetimeLikeArrayMixin": {
                "_ndarray": [
                    "self"
                ],
                "_from_backing_data": [
                    "self",
                    "arr"
                ],
                "_box_func": [
                    "self"
                ],
                "_box_values": [
                    "self",
                    "values"
                ],
                "__iter__": [
                    "self"
                ],
                "asi8": [
                    "self"
                ],
                "_format_native_types": [
                    "self",
                    "na_rep",
                    "date_format"
                ],
                "_formatter": [
                    "self",
                    "boxed"
                ],
                "__array__": [
                    "self",
                    "dtype"
                ],
                "__getitem__": [
                    "self",
                    "key"
                ],
                "_get_getitem_freq": [
                    "self",
                    "key"
                ],
                "__setitem__": [
                    "self",
                    "key",
                    "value"
                ],
                "_maybe_clear_freq": [
                    "self"
                ],
                "astype": [
                    "self",
                    "dtype",
                    "copy"
                ],
                "view": [
                    "self",
                    "dtype"
                ],
                "_concat_same_type": [
                    "cls",
                    "to_concat",
                    "axis"
                ],
                "copy": [
                    "self"
                ],
                "_values_for_factorize": [
                    "self"
                ],
                "_from_factorized": [
                    "cls",
                    "values",
                    "original"
                ],
                "_values_for_argsort": [
                    "self"
                ],
                "shift": [
                    "self",
                    "periods",
                    "fill_value",
                    "axis"
                ],
                "_validate_fill_value": [
                    "self",
                    "fill_value"
                ],
                "_validate_shift_value": [
                    "self",
                    "fill_value"
                ],
                "_validate_scalar": [
                    "self",
                    "value",
                    "msg",
                    "cast_str"
                ],
                "_validate_listlike": [
                    "self",
                    "value",
                    "opname",
                    "cast_str",
                    "allow_object"
                ],
                "_validate_searchsorted_value": [
                    "self",
                    "value"
                ],
                "_validate_setitem_value": [
                    "self",
                    "value"
                ],
                "_validate_insert_value": [
                    "self",
                    "value"
                ],
                "_validate_where_value": [
                    "self",
                    "other"
                ],
                "_unbox": [
                    "self",
                    "other"
                ],
                "searchsorted": [
                    "self",
                    "value",
                    "side",
                    "sorter"
                ],
                "value_counts": [
                    "self",
                    "dropna"
                ],
                "map": [
                    "self",
                    "mapper"
                ],
                "isna": [
                    "self"
                ],
                "_isnan": [
                    "self"
                ],
                "_hasnans": [
                    "self"
                ],
                "_maybe_mask_results": [
                    "self",
                    "result",
                    "fill_value",
                    "convert"
                ],
                "fillna": [
                    "self",
                    "value",
                    "method",
                    "limit"
                ],
                "freq": [
                    "self",
                    "value"
                ],
                "freqstr": [
                    "self"
                ],
                "inferred_freq": [
                    "self"
                ],
                "_resolution_obj": [
                    "self"
                ],
                "resolution": [
                    "self"
                ],
                "_validate_frequency": [
                    "cls",
                    "index",
                    "freq"
                ],
                "_is_monotonic_increasing": [
                    "self"
                ],
                "_is_monotonic_decreasing": [
                    "self"
                ],
                "_is_unique": [
                    "self"
                ],
                "_add_datetimelike_scalar": [
                    "self",
                    "other"
                ],
                "_sub_datetimelike_scalar": [
                    "self",
                    "other"
                ],
                "_sub_period": [
                    "self",
                    "other"
                ],
                "_add_period": [
                    "self",
                    "other"
                ],
                "_add_offset": [
                    "self",
                    "offset"
                ],
                "_add_timedeltalike_scalar": [
                    "self",
                    "other"
                ],
                "_add_timedelta_arraylike": [
                    "self",
                    "other"
                ],
                "_add_nat": [
                    "self"
                ],
                "_sub_nat": [
                    "self"
                ],
                "_sub_period_array": [
                    "self",
                    "other"
                ],
                "_addsub_object_array": [
                    "self",
                    "other",
                    "op"
                ],
                "_time_shift": [
                    "self",
                    "periods",
                    "freq"
                ],
                "__add__": [
                    "self",
                    "other"
                ],
                "__radd__": [
                    "self",
                    "other"
                ],
                "__sub__": [
                    "self",
                    "other"
                ],
                "__rsub__": [
                    "self",
                    "other"
                ],
                "__iadd__": [
                    "self",
                    "other"
                ],
                "__isub__": [
                    "self",
                    "other"
                ],
                "_reduce": [
                    "self",
                    "name",
                    "skipna"
                ],
                "min": [
                    "self",
                    "axis",
                    "skipna"
                ],
                "max": [
                    "self",
                    "axis",
                    "skipna"
                ],
                "mean": [
                    "self",
                    "skipna"
                ]
            }
        },
        "pandas.core.arrays._mixins": {
            "NDArrayBackedExtensionArray": {
                "_from_backing_data": [
                    "self",
                    "arr"
                ],
                "take": [
                    "self",
                    "indices",
                    "allow_fill",
                    "fill_value"
                ],
                "_validate_fill_value": [
                    "self",
                    "fill_value"
                ],
                "shape": [
                    "self"
                ],
                "__len__": [
                    "self"
                ],
                "ndim": [
                    "self"
                ],
                "size": [
                    "self"
                ],
                "nbytes": [
                    "self"
                ],
                "reshape": [
                    "self"
                ],
                "ravel": [
                    "self"
                ],
                "T": [
                    "self"
                ],
                "copy": [
                    "self"
                ],
                "repeat": [
                    "self",
                    "repeats",
                    "axis"
                ],
                "unique": [
                    "self"
                ]
            }
        },
        "pandas.core.arrays.boolean": {
            "coerce_to_array": [
                "values",
                "mask",
                "copy"
            ],
            "BooleanDtype": {
                "type": [
                    "self"
                ],
                "kind": [
                    "self"
                ],
                "numpy_dtype": [
                    "self"
                ],
                "construct_array_type": [
                    "cls"
                ],
                "__repr__": [
                    "self"
                ],
                "_is_boolean": [
                    "self"
                ],
                "_is_numeric": [
                    "self"
                ],
                "__from_arrow__": [
                    "self",
                    "array"
                ]
            },
            "BooleanArray": {
                "__init__": [
                    "self",
                    "values",
                    "mask",
                    "copy"
                ],
                "dtype": [
                    "self"
                ],
                "_from_sequence": [
                    "cls",
                    "scalars",
                    "dtype",
                    "copy"
                ],
                "_from_sequence_of_strings": [
                    "cls",
                    "strings",
                    "dtype",
                    "copy"
                ],
                "__array_ufunc__": [
                    "self",
                    "ufunc",
                    "method"
                ],
                "_coerce_to_array": [
                    "self",
                    "value"
                ],
                "astype": [
                    "self",
                    "dtype",
                    "copy"
                ],
                "_values_for_argsort": [
                    "self"
                ],
                "any": [
                    "self",
                    "skipna"
                ],
                "all": [
                    "self",
                    "skipna"
                ],
                "_create_logical_method": [
                    "cls",
                    "op"
                ],
                "_create_comparison_method": [
                    "cls",
                    "op"
                ],
                "_reduce": [
                    "self",
                    "name",
                    "skipna"
                ],
                "_maybe_mask_result": [
                    "self",
                    "result",
                    "mask",
                    "other",
                    "op_name"
                ],
                "_create_arithmetic_method": [
                    "cls",
                    "op"
                ]
            }
        },
        "pandas.core.arrays.timedeltas": {
            "_field_accessor": [
                "name",
                "alias",
                "docstring"
            ],
            "sequence_to_td64ns": [
                "data",
                "copy",
                "unit",
                "errors"
            ],
            "ints_to_td64ns": [
                "data",
                "unit"
            ],
            "objects_to_td64ns": [
                "data",
                "unit",
                "errors"
            ],
            "_validate_td64_dtype": [
                "dtype"
            ],
            "TimedeltaArray": {
                "_box_func": [
                    "self"
                ],
                "dtype": [
                    "self"
                ],
                "__init__": [
                    "self",
                    "values",
                    "dtype",
                    "freq",
                    "copy"
                ],
                "_simple_new": [
                    "cls",
                    "values",
                    "freq",
                    "dtype"
                ],
                "_from_sequence": [
                    "cls",
                    "data",
                    "dtype",
                    "copy",
                    "freq",
                    "unit"
                ],
                "_generate_range": [
                    "cls",
                    "start",
                    "end",
                    "periods",
                    "freq",
                    "closed"
                ],
                "_unbox_scalar": [
                    "self",
                    "value"
                ],
                "_scalar_from_string": [
                    "self",
                    "value"
                ],
                "_check_compatible_with": [
                    "self",
                    "other",
                    "setitem"
                ],
                "_maybe_clear_freq": [
                    "self"
                ],
                "astype": [
                    "self",
                    "dtype",
                    "copy"
                ],
                "sum": [
                    "self",
                    "axis",
                    "dtype",
                    "out",
                    "keepdims",
                    "initial",
                    "skipna",
                    "min_count"
                ],
                "std": [
                    "self",
                    "axis",
                    "dtype",
                    "out",
                    "ddof",
                    "keepdims",
                    "skipna"
                ],
                "median": [
                    "self",
                    "axis",
                    "out",
                    "overwrite_input",
                    "keepdims",
                    "skipna"
                ],
                "_formatter": [
                    "self",
                    "boxed"
                ],
                "_format_native_types": [
                    "self",
                    "na_rep",
                    "date_format"
                ],
                "_add_offset": [
                    "self",
                    "other"
                ],
                "_add_period": [
                    "self",
                    "other"
                ],
                "_add_datetime_arraylike": [
                    "self",
                    "other"
                ],
                "_add_datetimelike_scalar": [
                    "self",
                    "other"
                ],
                "_addsub_object_array": [
                    "self",
                    "other",
                    "op"
                ],
                "__mul__": [
                    "self",
                    "other"
                ],
                "__truediv__": [
                    "self",
                    "other"
                ],
                "__rtruediv__": [
                    "self",
                    "other"
                ],
                "__floordiv__": [
                    "self",
                    "other"
                ],
                "__rfloordiv__": [
                    "self",
                    "other"
                ],
                "__mod__": [
                    "self",
                    "other"
                ],
                "__rmod__": [
                    "self",
                    "other"
                ],
                "__divmod__": [
                    "self",
                    "other"
                ],
                "__rdivmod__": [
                    "self",
                    "other"
                ],
                "__neg__": [
                    "self"
                ],
                "__pos__": [
                    "self"
                ],
                "__abs__": [
                    "self"
                ],
                "total_seconds": [
                    "self"
                ],
                "to_pytimedelta": [
                    "self"
                ],
                "components": [
                    "self"
                ]
            }
        },
        "pandas.core.arrays.masked": {
            "BaseMaskedDtype": {
                "numpy_dtype": [
                    "self"
                ],
                "construct_array_type": [
                    "cls"
                ]
            },
            "BaseMaskedArray": {
                "__init__": [
                    "self",
                    "values",
                    "mask",
                    "copy"
                ],
                "dtype": [
                    "self"
                ],
                "__getitem__": [
                    "self",
                    "item"
                ],
                "_coerce_to_array": [
                    "self",
                    "values"
                ],
                "__setitem__": [
                    "self",
                    "key",
                    "value"
                ],
                "__iter__": [
                    "self"
                ],
                "__len__": [
                    "self"
                ],
                "__invert__": [
                    "self"
                ],
                "to_numpy": [
                    "self",
                    "dtype",
                    "copy",
                    "na_value"
                ],
                "__array__": [
                    "self",
                    "dtype"
                ],
                "__arrow_array__": [
                    "self",
                    "type"
                ],
                "_hasna": [
                    "self"
                ],
                "isna": [
                    "self"
                ],
                "_na_value": [
                    "self"
                ],
                "nbytes": [
                    "self"
                ],
                "_concat_same_type": [
                    "cls",
                    "to_concat"
                ],
                "take": [
                    "self",
                    "indexer",
                    "allow_fill",
                    "fill_value"
                ],
                "copy": [
                    "self"
                ],
                "factorize": [
                    "self",
                    "na_sentinel"
                ],
                "value_counts": [
                    "self",
                    "dropna"
                ],
                "_reduce": [
                    "self",
                    "name",
                    "skipna"
                ]
            }
        },
        "pandas.core.arrays.period": {
            "_field_accessor": [
                "name",
                "docstring"
            ],
            "raise_on_incompatible": [
                "left",
                "right"
            ],
            "period_array": [
                "data",
                "freq",
                "copy"
            ],
            "validate_dtype_freq": [
                "dtype",
                "freq"
            ],
            "dt64arr_to_periodarr": [
                "data",
                "freq",
                "tz"
            ],
            "_get_ordinal_range": [
                "start",
                "end",
                "periods",
                "freq",
                "mult"
            ],
            "_range_from_fields": [
                "year",
                "month",
                "quarter",
                "day",
                "hour",
                "minute",
                "second",
                "freq"
            ],
            "_make_field_arrays": [],
            "PeriodArray": {
                "__init__": [
                    "self",
                    "values",
                    "freq",
                    "dtype",
                    "copy"
                ],
                "_simple_new": [
                    "cls",
                    "values",
                    "freq"
                ],
                "_from_sequence": [
                    "cls",
                    "scalars",
                    "dtype",
                    "copy"
                ],
                "_from_sequence_of_strings": [
                    "cls",
                    "strings",
                    "dtype",
                    "copy"
                ],
                "_from_datetime64": [
                    "cls",
                    "data",
                    "freq",
                    "tz"
                ],
                "_generate_range": [
                    "cls",
                    "start",
                    "end",
                    "periods",
                    "freq",
                    "fields"
                ],
                "_unbox_scalar": [
                    "self",
                    "value"
                ],
                "_scalar_from_string": [
                    "self",
                    "value"
                ],
                "_check_compatible_with": [
                    "self",
                    "other",
                    "setitem"
                ],
                "dtype": [
                    "self"
                ],
                "freq": [
                    "self"
                ],
                "__array__": [
                    "self",
                    "dtype"
                ],
                "__arrow_array__": [
                    "self",
                    "type"
                ],
                "is_leap_year": [
                    "self"
                ],
                "start_time": [
                    "self"
                ],
                "end_time": [
                    "self"
                ],
                "to_timestamp": [
                    "self",
                    "freq",
                    "how"
                ],
                "_time_shift": [
                    "self",
                    "periods",
                    "freq"
                ],
                "_box_func": [
                    "self"
                ],
                "asfreq": [
                    "self",
                    "freq",
                    "how"
                ],
                "_formatter": [
                    "self",
                    "boxed"
                ],
                "_format_native_types": [
                    "self",
                    "na_rep",
                    "date_format"
                ],
                "astype": [
                    "self",
                    "dtype",
                    "copy"
                ],
                "_sub_datelike": [
                    "self",
                    "other"
                ],
                "_sub_period": [
                    "self",
                    "other"
                ],
                "_sub_period_array": [
                    "self",
                    "other"
                ],
                "_addsub_int_array": [
                    "self",
                    "other",
                    "op"
                ],
                "_add_offset": [
                    "self",
                    "other"
                ],
                "_add_timedeltalike_scalar": [
                    "self",
                    "other"
                ],
                "_add_timedelta_arraylike": [
                    "self",
                    "other"
                ],
                "_check_timedeltalike_freq_compat": [
                    "self",
                    "other"
                ]
            }
        },
        "pandas.core.arrays.datetimes": {
            "tz_to_dtype": [
                "tz"
            ],
            "_field_accessor": [
                "name",
                "field",
                "docstring"
            ],
            "sequence_to_dt64ns": [
                "data",
                "dtype",
                "copy",
                "tz",
                "dayfirst",
                "yearfirst",
                "ambiguous"
            ],
            "objects_to_datetime64ns": [
                "data",
                "dayfirst",
                "yearfirst",
                "utc",
                "errors",
                "require_iso8601",
                "allow_object"
            ],
            "maybe_convert_dtype": [
                "data",
                "copy"
            ],
            "_maybe_infer_tz": [
                "tz",
                "inferred_tz"
            ],
            "_validate_dt64_dtype": [
                "dtype"
            ],
            "validate_tz_from_dtype": [
                "dtype",
                "tz"
            ],
            "_infer_tz_from_endpoints": [
                "start",
                "end",
                "tz"
            ],
            "_maybe_normalize_endpoints": [
                "start",
                "end",
                "normalize"
            ],
            "_maybe_localize_point": [
                "ts",
                "is_none",
                "is_not_none",
                "freq",
                "tz",
                "ambiguous",
                "nonexistent"
            ],
            "generate_range": [
                "start",
                "end",
                "periods",
                "offset"
            ],
            "DatetimeArray": {
                "__init__": [
                    "self",
                    "values",
                    "dtype",
                    "freq",
                    "copy"
                ],
                "_simple_new": [
                    "cls",
                    "values",
                    "freq",
                    "dtype"
                ],
                "_from_sequence": [
                    "cls",
                    "data",
                    "dtype",
                    "copy",
                    "tz",
                    "freq",
                    "dayfirst",
                    "yearfirst",
                    "ambiguous"
                ],
                "_generate_range": [
                    "cls",
                    "start",
                    "end",
                    "periods",
                    "freq",
                    "tz",
                    "normalize",
                    "ambiguous",
                    "nonexistent",
                    "closed"
                ],
                "_unbox_scalar": [
                    "self",
                    "value"
                ],
                "_scalar_from_string": [
                    "self",
                    "value"
                ],
                "_check_compatible_with": [
                    "self",
                    "other",
                    "setitem"
                ],
                "_maybe_clear_freq": [
                    "self"
                ],
                "_box_func": [
                    "self"
                ],
                "dtype": [
                    "self"
                ],
                "tz": [
                    "self",
                    "value"
                ],
                "tzinfo": [
                    "self"
                ],
                "is_normalized": [
                    "self"
                ],
                "_resolution_obj": [
                    "self"
                ],
                "__array__": [
                    "self",
                    "dtype"
                ],
                "__iter__": [
                    "self"
                ],
                "astype": [
                    "self",
                    "dtype",
                    "copy"
                ],
                "_format_native_types": [
                    "self",
                    "na_rep",
                    "date_format"
                ],
                "_has_same_tz": [
                    "self",
                    "other"
                ],
                "_assert_tzawareness_compat": [
                    "self",
                    "other"
                ],
                "_sub_datetime_arraylike": [
                    "self",
                    "other"
                ],
                "_add_offset": [
                    "self",
                    "offset"
                ],
                "_sub_datetimelike_scalar": [
                    "self",
                    "other"
                ],
                "_local_timestamps": [
                    "self"
                ],
                "tz_convert": [
                    "self",
                    "tz"
                ],
                "tz_localize": [
                    "self",
                    "tz",
                    "ambiguous",
                    "nonexistent"
                ],
                "to_pydatetime": [
                    "self"
                ],
                "normalize": [
                    "self"
                ],
                "to_period": [
                    "self",
                    "freq"
                ],
                "to_perioddelta": [
                    "self",
                    "freq"
                ],
                "month_name": [
                    "self",
                    "locale"
                ],
                "day_name": [
                    "self",
                    "locale"
                ],
                "time": [
                    "self"
                ],
                "timetz": [
                    "self"
                ],
                "date": [
                    "self"
                ],
                "isocalendar": [
                    "self"
                ],
                "weekofyear": [
                    "self"
                ],
                "to_julian_date": [
                    "self"
                ]
            }
        },
        "pandas.core.arrays._ranges": {
            "generate_regular_range": [
                "start",
                "end",
                "periods",
                "freq"
            ],
            "_generate_range_overflow_safe": [
                "endpoint",
                "periods",
                "stride",
                "side"
            ],
            "_generate_range_overflow_safe_signed": [
                "endpoint",
                "periods",
                "stride",
                "side"
            ]
        },
        "pandas.core.arrays.base": {
            "ExtensionArray": {
                "_from_sequence": [
                    "cls",
                    "scalars",
                    "dtype",
                    "copy"
                ],
                "_from_sequence_of_strings": [
                    "cls",
                    "strings",
                    "dtype",
                    "copy"
                ],
                "_from_factorized": [
                    "cls",
                    "values",
                    "original"
                ],
                "__getitem__": [
                    "self",
                    "item"
                ],
                "__setitem__": [
                    "self",
                    "key",
                    "value"
                ],
                "__len__": [
                    "self"
                ],
                "__iter__": [
                    "self"
                ],
                "__eq__": [
                    "self",
                    "other"
                ],
                "__ne__": [
                    "self",
                    "other"
                ],
                "to_numpy": [
                    "self",
                    "dtype",
                    "copy",
                    "na_value"
                ],
                "dtype": [
                    "self"
                ],
                "shape": [
                    "self"
                ],
                "size": [
                    "self"
                ],
                "ndim": [
                    "self"
                ],
                "nbytes": [
                    "self"
                ],
                "astype": [
                    "self",
                    "dtype",
                    "copy"
                ],
                "isna": [
                    "self"
                ],
                "_values_for_argsort": [
                    "self"
                ],
                "argsort": [
                    "self",
                    "ascending",
                    "kind"
                ],
                "argmin": [
                    "self"
                ],
                "argmax": [
                    "self"
                ],
                "fillna": [
                    "self",
                    "value",
                    "method",
                    "limit"
                ],
                "dropna": [
                    "self"
                ],
                "shift": [
                    "self",
                    "periods",
                    "fill_value"
                ],
                "unique": [
                    "self"
                ],
                "searchsorted": [
                    "self",
                    "value",
                    "side",
                    "sorter"
                ],
                "equals": [
                    "self",
                    "other"
                ],
                "_values_for_factorize": [
                    "self"
                ],
                "factorize": [
                    "self",
                    "na_sentinel"
                ],
                "repeat": [
                    "self",
                    "repeats",
                    "axis"
                ],
                "take": [
                    "self",
                    "indices",
                    "allow_fill",
                    "fill_value"
                ],
                "copy": [
                    "self"
                ],
                "view": [
                    "self",
                    "dtype"
                ],
                "__repr__": [
                    "self"
                ],
                "_formatter": [
                    "self",
                    "boxed"
                ],
                "ravel": [
                    "self",
                    "order"
                ],
                "_concat_same_type": [
                    "cls",
                    "to_concat"
                ],
                "_reduce": [
                    "self",
                    "name",
                    "skipna"
                ],
                "__hash__": [
                    "self"
                ]
            },
            "ExtensionOpsMixin": {
                "_add_arithmetic_ops": [
                    "cls"
                ],
                "_add_comparison_ops": [
                    "cls"
                ],
                "_add_logical_ops": [
                    "cls"
                ]
            },
            "ExtensionScalarOpsMixin": {
                "_create_method": [
                    "cls",
                    "op",
                    "coerce_to_dtype",
                    "result_dtype"
                ],
                "_create_arithmetic_method": [
                    "cls",
                    "op"
                ],
                "_create_comparison_method": [
                    "cls",
                    "op"
                ]
            }
        },
        "pandas.core.arrays.numpy_": {
            "PandasDtype": {
                "__init__": [
                    "self",
                    "dtype"
                ],
                "__repr__": [
                    "self"
                ],
                "numpy_dtype": [
                    "self"
                ],
                "name": [
                    "self"
                ],
                "type": [
                    "self"
                ],
                "_is_numeric": [
                    "self"
                ],
                "_is_boolean": [
                    "self"
                ],
                "construct_from_string": [
                    "cls",
                    "string"
                ],
                "construct_array_type": [
                    "cls"
                ],
                "kind": [
                    "self"
                ],
                "itemsize": [
                    "self"
                ]
            },
            "PandasArray": {
                "__init__": [
                    "self",
                    "values",
                    "copy"
                ],
                "_from_sequence": [
                    "cls",
                    "scalars",
                    "dtype",
                    "copy"
                ],
                "_from_factorized": [
                    "cls",
                    "values",
                    "original"
                ],
                "_concat_same_type": [
                    "cls",
                    "to_concat"
                ],
                "_from_backing_data": [
                    "self",
                    "arr"
                ],
                "dtype": [
                    "self"
                ],
                "__array__": [
                    "self",
                    "dtype"
                ],
                "__array_ufunc__": [
                    "self",
                    "ufunc",
                    "method"
                ],
                "__getitem__": [
                    "self",
                    "item"
                ],
                "__setitem__": [
                    "self",
                    "key",
                    "value"
                ],
                "isna": [
                    "self"
                ],
                "fillna": [
                    "self",
                    "value",
                    "method",
                    "limit"
                ],
                "_validate_fill_value": [
                    "self",
                    "fill_value"
                ],
                "_values_for_argsort": [
                    "self"
                ],
                "_values_for_factorize": [
                    "self"
                ],
                "_reduce": [
                    "self",
                    "name",
                    "skipna"
                ],
                "any": [
                    "self",
                    "axis",
                    "out",
                    "keepdims",
                    "skipna"
                ],
                "all": [
                    "self",
                    "axis",
                    "out",
                    "keepdims",
                    "skipna"
                ],
                "min": [
                    "self",
                    "skipna"
                ],
                "max": [
                    "self",
                    "skipna"
                ],
                "sum": [
                    "self",
                    "axis",
                    "skipna",
                    "min_count"
                ],
                "prod": [
                    "self",
                    "axis",
                    "skipna",
                    "min_count"
                ],
                "mean": [
                    "self",
                    "axis",
                    "dtype",
                    "out",
                    "keepdims",
                    "skipna"
                ],
                "median": [
                    "self",
                    "axis",
                    "out",
                    "overwrite_input",
                    "keepdims",
                    "skipna"
                ],
                "std": [
                    "self",
                    "axis",
                    "dtype",
                    "out",
                    "ddof",
                    "keepdims",
                    "skipna"
                ],
                "var": [
                    "self",
                    "axis",
                    "dtype",
                    "out",
                    "ddof",
                    "keepdims",
                    "skipna"
                ],
                "sem": [
                    "self",
                    "axis",
                    "dtype",
                    "out",
                    "ddof",
                    "keepdims",
                    "skipna"
                ],
                "kurt": [
                    "self",
                    "axis",
                    "dtype",
                    "out",
                    "keepdims",
                    "skipna"
                ],
                "skew": [
                    "self",
                    "axis",
                    "dtype",
                    "out",
                    "keepdims",
                    "skipna"
                ],
                "to_numpy": [
                    "self",
                    "dtype",
                    "copy",
                    "na_value"
                ],
                "searchsorted": [
                    "self",
                    "value",
                    "side",
                    "sorter"
                ],
                "__invert__": [
                    "self"
                ],
                "_create_arithmetic_method": [
                    "cls",
                    "op"
                ]
            }
        },
        "pandas.core.arrays.string_": {
            "StringDtype": {
                "type": [
                    "self"
                ],
                "construct_array_type": [
                    "cls"
                ],
                "__repr__": [
                    "self"
                ],
                "__from_arrow__": [
                    "self",
                    "array"
                ]
            },
            "StringArray": {
                "__init__": [
                    "self",
                    "values",
                    "copy"
                ],
                "_validate": [
                    "self"
                ],
                "_from_sequence": [
                    "cls",
                    "scalars",
                    "dtype",
                    "copy"
                ],
                "_from_sequence_of_strings": [
                    "cls",
                    "strings",
                    "dtype",
                    "copy"
                ],
                "__arrow_array__": [
                    "self",
                    "type"
                ],
                "_values_for_factorize": [
                    "self"
                ],
                "__setitem__": [
                    "self",
                    "key",
                    "value"
                ],
                "fillna": [
                    "self",
                    "value",
                    "method",
                    "limit"
                ],
                "astype": [
                    "self",
                    "dtype",
                    "copy"
                ],
                "_reduce": [
                    "self",
                    "name",
                    "skipna"
                ],
                "value_counts": [
                    "self",
                    "dropna"
                ],
                "memory_usage": [
                    "self",
                    "deep"
                ],
                "_create_arithmetic_method": [
                    "cls",
                    "op"
                ],
                "_add_arithmetic_ops": [
                    "cls"
                ]
            }
        },
        "pandas.core.arrays": {},
        "pandas.core.arrays.sparse.scipy_sparse": {
            "_check_is_partition": [
                "parts",
                "whole"
            ],
            "_to_ijv": [
                "ss",
                "row_levels",
                "column_levels",
                "sort_labels"
            ],
            "_sparse_series_to_coo": [
                "ss",
                "row_levels",
                "column_levels",
                "sort_labels"
            ],
            "_coo_to_sparse_series": [
                "A",
                "dense_index"
            ]
        },
        "pandas.core.arrays.sparse.accessor": {
            "BaseAccessor": {
                "__init__": [
                    "self",
                    "data"
                ],
                "_validate": [
                    "self",
                    "data"
                ]
            },
            "SparseAccessor": {
                "_validate": [
                    "self",
                    "data"
                ],
                "_delegate_property_get": [
                    "self",
                    "name"
                ],
                "_delegate_method": [
                    "self",
                    "name"
                ],
                "from_coo": [
                    "cls",
                    "A",
                    "dense_index"
                ],
                "to_coo": [
                    "self",
                    "row_levels",
                    "column_levels",
                    "sort_labels"
                ],
                "to_dense": [
                    "self"
                ]
            },
            "SparseFrameAccessor": {
                "_validate": [
                    "self",
                    "data"
                ],
                "from_spmatrix": [
                    "cls",
                    "data",
                    "index",
                    "columns"
                ],
                "to_dense": [
                    "self"
                ],
                "to_coo": [
                    "self"
                ],
                "density": [
                    "self"
                ],
                "_prep_index": [
                    "data",
                    "index",
                    "columns"
                ]
            }
        },
        "pandas.core.arrays.sparse.dtype": {
            "SparseDtype": {
                "__init__": [
                    "self",
                    "dtype",
                    "fill_value"
                ],
                "__hash__": [
                    "self"
                ],
                "__eq__": [
                    "self",
                    "other"
                ],
                "fill_value": [
                    "self"
                ],
                "_is_na_fill_value": [
                    "self"
                ],
                "_is_numeric": [
                    "self"
                ],
                "_is_boolean": [
                    "self"
                ],
                "kind": [
                    "self"
                ],
                "type": [
                    "self"
                ],
                "subtype": [
                    "self"
                ],
                "name": [
                    "self"
                ],
                "__repr__": [
                    "self"
                ],
                "construct_array_type": [
                    "cls"
                ],
                "construct_from_string": [
                    "cls",
                    "string"
                ],
                "_parse_subtype": [
                    "dtype"
                ],
                "is_dtype": [
                    "cls",
                    "dtype"
                ],
                "update_dtype": [
                    "self",
                    "dtype"
                ],
                "_subtype_with_str": [
                    "self"
                ],
                "_get_common_dtype": [
                    "self",
                    "dtypes"
                ]
            }
        },
        "pandas.core.arrays.sparse": {},
        "pandas.core.arrays.sparse.array": {
            "_get_fill": [
                "arr"
            ],
            "_sparse_array_op": [
                "left",
                "right",
                "op",
                "name"
            ],
            "_wrap_result": [
                "name",
                "data",
                "sparse_index",
                "fill_value",
                "dtype"
            ],
            "make_sparse": [
                "arr",
                "kind",
                "fill_value",
                "dtype",
                "copy"
            ],
            "_make_index": [
                "length",
                "indices",
                "kind"
            ],
            "SparseArray": {
                "__init__": [
                    "self",
                    "data",
                    "sparse_index",
                    "index",
                    "fill_value",
                    "kind",
                    "dtype",
                    "copy"
                ],
                "_simple_new": [
                    "cls",
                    "sparse_array",
                    "sparse_index",
                    "dtype"
                ],
                "from_spmatrix": [
                    "cls",
                    "data"
                ],
                "__array__": [
                    "self",
                    "dtype",
                    "copy"
                ],
                "__setitem__": [
                    "self",
                    "key",
                    "value"
                ],
                "_from_sequence": [
                    "cls",
                    "scalars",
                    "dtype",
                    "copy"
                ],
                "_from_factorized": [
                    "cls",
                    "values",
                    "original"
                ],
                "sp_index": [
                    "self"
                ],
                "sp_values": [
                    "self"
                ],
                "dtype": [
                    "self"
                ],
                "fill_value": [
                    "self",
                    "value"
                ],
                "kind": [
                    "self"
                ],
                "_valid_sp_values": [
                    "self"
                ],
                "__len__": [
                    "self"
                ],
                "_null_fill_value": [
                    "self"
                ],
                "_fill_value_matches": [
                    "self",
                    "fill_value"
                ],
                "nbytes": [
                    "self"
                ],
                "density": [
                    "self"
                ],
                "npoints": [
                    "self"
                ],
                "isna": [
                    "self"
                ],
                "fillna": [
                    "self",
                    "value",
                    "method",
                    "limit"
                ],
                "shift": [
                    "self",
                    "periods",
                    "fill_value"
                ],
                "_first_fill_value_loc": [
                    "self"
                ],
                "unique": [
                    "self"
                ],
                "_values_for_factorize": [
                    "self"
                ],
                "factorize": [
                    "self",
                    "na_sentinel"
                ],
                "value_counts": [
                    "self",
                    "dropna"
                ],
                "__getitem__": [
                    "self",
                    "key"
                ],
                "_get_val_at": [
                    "self",
                    "loc"
                ],
                "take": [
                    "self",
                    "indices",
                    "allow_fill",
                    "fill_value"
                ],
                "_take_with_fill": [
                    "self",
                    "indices",
                    "fill_value"
                ],
                "_take_without_fill": [
                    "self",
                    "indices"
                ],
                "searchsorted": [
                    "self",
                    "v",
                    "side",
                    "sorter"
                ],
                "copy": [
                    "self"
                ],
                "_concat_same_type": [
                    "cls",
                    "to_concat"
                ],
                "astype": [
                    "self",
                    "dtype",
                    "copy"
                ],
                "map": [
                    "self",
                    "mapper"
                ],
                "to_dense": [
                    "self"
                ],
                "__setstate__": [
                    "self",
                    "state"
                ],
                "nonzero": [
                    "self"
                ],
                "_reduce": [
                    "self",
                    "name",
                    "skipna"
                ],
                "all": [
                    "self",
                    "axis"
                ],
                "any": [
                    "self",
                    "axis"
                ],
                "sum": [
                    "self",
                    "axis",
                    "min_count"
                ],
                "cumsum": [
                    "self",
                    "axis"
                ],
                "mean": [
                    "self",
                    "axis"
                ],
                "transpose": [
                    "self"
                ],
                "T": [
                    "self"
                ],
                "__array_ufunc__": [
                    "self",
                    "ufunc",
                    "method"
                ],
                "__abs__": [
                    "self"
                ],
                "_create_unary_method": [
                    "cls",
                    "op"
                ],
                "_create_arithmetic_method": [
                    "cls",
                    "op"
                ],
                "_create_comparison_method": [
                    "cls",
                    "op"
                ],
                "_add_unary_ops": [
                    "cls"
                ],
                "_add_comparison_ops": [
                    "cls"
                ],
                "__repr__": [
                    "self"
                ],
                "_formatter": [
                    "self",
                    "boxed"
                ]
            }
        },
        "pandas.core.internals.construction": {
            "arrays_to_mgr": [
                "arrays",
                "arr_names",
                "index",
                "columns",
                "dtype",
                "verify_integrity"
            ],
            "masked_rec_array_to_mgr": [
                "data",
                "index",
                "columns",
                "dtype",
                "copy"
            ],
            "init_ndarray": [
                "values",
                "index",
                "columns",
                "dtype",
                "copy"
            ],
            "init_dict": [
                "data",
                "index",
                "columns",
                "dtype"
            ],
            "_prep_ndarray": [
                "values",
                "copy"
            ],
            "_homogenize": [
                "data",
                "index",
                "dtype"
            ],
            "extract_index": [
                "data"
            ],
            "reorder_arrays": [
                "arrays",
                "arr_columns",
                "columns"
            ],
            "get_names_from_index": [
                "data"
            ],
            "_get_axes": [
                "N",
                "K",
                "index",
                "columns"
            ],
            "dataclasses_to_dicts": [
                "data"
            ],
            "to_arrays": [
                "data",
                "columns",
                "coerce_float",
                "dtype"
            ],
            "_list_to_arrays": [
                "data",
                "columns",
                "coerce_float",
                "dtype"
            ],
            "_list_of_series_to_arrays": [
                "data",
                "columns",
                "coerce_float",
                "dtype"
            ],
            "_list_of_dict_to_arrays": [
                "data",
                "columns",
                "coerce_float",
                "dtype"
            ],
            "_validate_or_indexify_columns": [
                "content",
                "columns"
            ],
            "_convert_object_array": [
                "content",
                "coerce_float",
                "dtype"
            ],
            "sanitize_index": [
                "data",
                "index"
            ]
        },
        "pandas.core.internals.ops": {
            "operate_blockwise": [
                "left",
                "right",
                "array_op"
            ],
            "_reset_block_mgr_locs": [
                "nbs",
                "locs"
            ],
            "_get_same_shape_values": [
                "lblk",
                "rblk",
                "left_ea",
                "right_ea"
            ]
        },
        "pandas.core.internals.managers": {
            "create_block_manager_from_blocks": [
                "blocks",
                "axes"
            ],
            "create_block_manager_from_arrays": [
                "arrays",
                "names",
                "axes"
            ],
            "construction_error": [
                "tot_items",
                "block_shape",
                "axes",
                "e"
            ],
            "form_blocks": [
                "arrays",
                "names",
                "axes"
            ],
            "_simple_blockify": [
                "tuples",
                "dtype"
            ],
            "_multi_blockify": [
                "tuples",
                "dtype"
            ],
            "_stack_arrays": [
                "tuples",
                "dtype"
            ],
            "_interleaved_dtype": [
                "blocks"
            ],
            "_consolidate": [
                "blocks"
            ],
            "_merge_blocks": [
                "blocks",
                "dtype",
                "can_consolidate"
            ],
            "_compare_or_regex_search": [
                "a",
                "b",
                "regex",
                "mask"
            ],
            "_fast_count_smallints": [
                "arr"
            ],
            "_preprocess_slice_or_indexer": [
                "slice_or_indexer",
                "length",
                "allow_fill"
            ],
            "BlockManager": {
                "__init__": [
                    "self",
                    "blocks",
                    "axes",
                    "do_integrity_check"
                ],
                "from_blocks": [
                    "cls",
                    "blocks",
                    "axes"
                ],
                "blknos": [
                    "self"
                ],
                "blklocs": [
                    "self"
                ],
                "make_empty": [
                    "self",
                    "axes"
                ],
                "__nonzero__": [
                    "self"
                ],
                "shape": [
                    "self"
                ],
                "ndim": [
                    "self"
                ],
                "set_axis": [
                    "self",
                    "axis",
                    "new_labels"
                ],
                "_is_single_block": [
                    "self"
                ],
                "_rebuild_blknos_and_blklocs": [
                    "self"
                ],
                "items": [
                    "self"
                ],
                "get_dtypes": [
                    "self"
                ],
                "__getstate__": [
                    "self"
                ],
                "__setstate__": [
                    "self",
                    "state"
                ],
                "_post_setstate": [
                    "self"
                ],
                "__len__": [
                    "self"
                ],
                "__repr__": [
                    "self"
                ],
                "_verify_integrity": [
                    "self"
                ],
                "reduce": [
                    "self",
                    "func"
                ],
                "operate_blockwise": [
                    "self",
                    "other",
                    "array_op"
                ],
                "apply": [
                    "self",
                    "f",
                    "align_keys"
                ],
                "quantile": [
                    "self",
                    "axis",
                    "transposed",
                    "interpolation",
                    "qs",
                    "numeric_only"
                ],
                "isna": [
                    "self",
                    "func"
                ],
                "where": [
                    "self",
                    "other",
                    "cond",
                    "align",
                    "errors",
                    "try_cast",
                    "axis"
                ],
                "setitem": [
                    "self",
                    "indexer",
                    "value"
                ],
                "putmask": [
                    "self",
                    "mask",
                    "new",
                    "align",
                    "axis"
                ],
                "diff": [
                    "self",
                    "n",
                    "axis"
                ],
                "interpolate": [
                    "self"
                ],
                "shift": [
                    "self",
                    "periods",
                    "axis",
                    "fill_value"
                ],
                "fillna": [
                    "self",
                    "value",
                    "limit",
                    "inplace",
                    "downcast"
                ],
                "downcast": [
                    "self"
                ],
                "astype": [
                    "self",
                    "dtype",
                    "copy",
                    "errors"
                ],
                "convert": [
                    "self",
                    "copy",
                    "datetime",
                    "numeric",
                    "timedelta",
                    "coerce"
                ],
                "replace": [
                    "self",
                    "value"
                ],
                "replace_list": [
                    "self",
                    "src_list",
                    "dest_list",
                    "inplace",
                    "regex"
                ],
                "is_consolidated": [
                    "self"
                ],
                "_consolidate_check": [
                    "self"
                ],
                "is_mixed_type": [
                    "self"
                ],
                "is_numeric_mixed_type": [
                    "self"
                ],
                "any_extension_types": [
                    "self"
                ],
                "is_view": [
                    "self"
                ],
                "get_bool_data": [
                    "self",
                    "copy"
                ],
                "get_numeric_data": [
                    "self",
                    "copy"
                ],
                "_combine": [
                    "self",
                    "blocks",
                    "copy"
                ],
                "get_slice": [
                    "self",
                    "slobj",
                    "axis"
                ],
                "nblocks": [
                    "self"
                ],
                "copy": [
                    "self",
                    "deep"
                ],
                "as_array": [
                    "self",
                    "transpose",
                    "dtype",
                    "copy",
                    "na_value"
                ],
                "_interleave": [
                    "self",
                    "dtype",
                    "na_value"
                ],
                "to_dict": [
                    "self",
                    "copy"
                ],
                "fast_xs": [
                    "self",
                    "loc"
                ],
                "consolidate": [
                    "self"
                ],
                "_consolidate_inplace": [
                    "self"
                ],
                "iget": [
                    "self",
                    "i"
                ],
                "iget_values": [
                    "self",
                    "i"
                ],
                "idelete": [
                    "self",
                    "indexer"
                ],
                "iset": [
                    "self",
                    "loc",
                    "value"
                ],
                "insert": [
                    "self",
                    "loc",
                    "item",
                    "value",
                    "allow_duplicates"
                ],
                "reindex_axis": [
                    "self",
                    "new_index",
                    "axis",
                    "method",
                    "limit",
                    "fill_value",
                    "copy"
                ],
                "reindex_indexer": [
                    "self",
                    "new_axis",
                    "indexer",
                    "axis",
                    "fill_value",
                    "allow_dups",
                    "copy",
                    "consolidate"
                ],
                "_slice_take_blocks_ax0": [
                    "self",
                    "slice_or_indexer",
                    "fill_value",
                    "only_slice"
                ],
                "_make_na_block": [
                    "self",
                    "placement",
                    "fill_value"
                ],
                "take": [
                    "self",
                    "indexer",
                    "axis",
                    "verify",
                    "convert"
                ],
                "equals": [
                    "self",
                    "other"
                ],
                "unstack": [
                    "self",
                    "unstacker",
                    "fill_value"
                ]
            },
            "SingleBlockManager": {
                "__init__": [
                    "self",
                    "block",
                    "axis",
                    "do_integrity_check",
                    "fastpath"
                ],
                "from_blocks": [
                    "cls",
                    "blocks",
                    "axes"
                ],
                "from_array": [
                    "cls",
                    "array",
                    "index"
                ],
                "_post_setstate": [
                    "self"
                ],
                "_block": [
                    "self"
                ],
                "_blknos": [
                    "self"
                ],
                "_blklocs": [
                    "self"
                ],
                "get_slice": [
                    "self",
                    "slobj",
                    "axis"
                ],
                "index": [
                    "self"
                ],
                "dtype": [
                    "self"
                ],
                "get_dtypes": [
                    "self"
                ],
                "external_values": [
                    "self"
                ],
                "internal_values": [
                    "self"
                ],
                "_can_hold_na": [
                    "self"
                ],
                "is_consolidated": [
                    "self"
                ],
                "_consolidate_check": [
                    "self"
                ],
                "_consolidate_inplace": [
                    "self"
                ],
                "idelete": [
                    "self",
                    "indexer"
                ],
                "fast_xs": [
                    "self",
                    "loc"
                ]
            }
        },
        "pandas.core.internals.blocks": {
            "get_block_type": [
                "values",
                "dtype"
            ],
            "make_block": [
                "values",
                "placement",
                "klass",
                "ndim",
                "dtype"
            ],
            "_extend_blocks": [
                "result",
                "blocks"
            ],
            "_block_shape": [
                "values",
                "ndim"
            ],
            "_safe_reshape": [
                "arr",
                "new_shape"
            ],
            "_putmask_smart": [
                "v",
                "mask",
                "n"
            ],
            "_extract_bool_array": [
                "mask"
            ],
            "Block": {
                "_simple_new": [
                    "cls",
                    "values",
                    "placement",
                    "ndim"
                ],
                "__init__": [
                    "self",
                    "values",
                    "placement",
                    "ndim"
                ],
                "_check_ndim": [
                    "self",
                    "values",
                    "ndim"
                ],
                "_holder": [
                    "self"
                ],
                "_consolidate_key": [
                    "self"
                ],
                "is_view": [
                    "self"
                ],
                "is_datelike": [
                    "self"
                ],
                "external_values": [
                    "self"
                ],
                "internal_values": [
                    "self"
                ],
                "array_values": [
                    "self"
                ],
                "get_values": [
                    "self",
                    "dtype"
                ],
                "get_block_values_for_json": [
                    "self"
                ],
                "fill_value": [
                    "self"
                ],
                "mgr_locs": [
                    "self",
                    "new_mgr_locs"
                ],
                "make_block": [
                    "self",
                    "values",
                    "placement"
                ],
                "make_block_same_class": [
                    "self",
                    "values",
                    "placement",
                    "ndim"
                ],
                "__repr__": [
                    "self"
                ],
                "__len__": [
                    "self"
                ],
                "__getstate__": [
                    "self"
                ],
                "__setstate__": [
                    "self",
                    "state"
                ],
                "_slice": [
                    "self",
                    "slicer"
                ],
                "getitem_block": [
                    "self",
                    "slicer",
                    "new_mgr_locs"
                ],
                "shape": [
                    "self"
                ],
                "dtype": [
                    "self"
                ],
                "iget": [
                    "self",
                    "i"
                ],
                "set": [
                    "self",
                    "locs",
                    "values"
                ],
                "delete": [
                    "self",
                    "loc"
                ],
                "apply": [
                    "self",
                    "func"
                ],
                "_split_op_result": [
                    "self",
                    "result"
                ],
                "fillna": [
                    "self",
                    "value",
                    "limit",
                    "inplace",
                    "downcast"
                ],
                "split_and_operate": [
                    "self",
                    "mask",
                    "f",
                    "inplace"
                ],
                "_maybe_downcast": [
                    "self",
                    "blocks",
                    "downcast"
                ],
                "downcast": [
                    "self",
                    "dtypes"
                ],
                "astype": [
                    "self",
                    "dtype",
                    "copy",
                    "errors"
                ],
                "convert": [
                    "self",
                    "copy",
                    "datetime",
                    "numeric",
                    "timedelta",
                    "coerce"
                ],
                "_can_hold_element": [
                    "self",
                    "element"
                ],
                "should_store": [
                    "self",
                    "value"
                ],
                "to_native_types": [
                    "self",
                    "na_rep",
                    "quoting"
                ],
                "copy": [
                    "self",
                    "deep"
                ],
                "replace": [
                    "self",
                    "to_replace",
                    "value",
                    "inplace",
                    "regex",
                    "convert"
                ],
                "_replace_single": [
                    "self"
                ],
                "setitem": [
                    "self",
                    "indexer",
                    "value"
                ],
                "putmask": [
                    "self",
                    "mask",
                    "new",
                    "inplace",
                    "axis",
                    "transpose"
                ],
                "coerce_to_target_dtype": [
                    "self",
                    "other"
                ],
                "interpolate": [
                    "self",
                    "method",
                    "axis",
                    "index",
                    "inplace",
                    "limit",
                    "limit_direction",
                    "limit_area",
                    "fill_value",
                    "coerce",
                    "downcast"
                ],
                "_interpolate_with_fill": [
                    "self",
                    "method",
                    "axis",
                    "inplace",
                    "limit",
                    "fill_value",
                    "coerce",
                    "downcast"
                ],
                "_interpolate": [
                    "self",
                    "method",
                    "index",
                    "fill_value",
                    "axis",
                    "limit",
                    "limit_direction",
                    "limit_area",
                    "inplace",
                    "downcast"
                ],
                "take_nd": [
                    "self",
                    "indexer",
                    "axis",
                    "new_mgr_locs",
                    "fill_value"
                ],
                "diff": [
                    "self",
                    "n",
                    "axis"
                ],
                "shift": [
                    "self",
                    "periods",
                    "axis",
                    "fill_value"
                ],
                "where": [
                    "self",
                    "other",
                    "cond",
                    "errors",
                    "try_cast",
                    "axis"
                ],
                "_unstack": [
                    "self",
                    "unstacker",
                    "fill_value",
                    "new_placement"
                ],
                "quantile": [
                    "self",
                    "qs",
                    "interpolation",
                    "axis"
                ],
                "_replace_coerce": [
                    "self",
                    "to_replace",
                    "value",
                    "inplace",
                    "regex",
                    "convert",
                    "mask"
                ]
            },
            "ExtensionBlock": {
                "__init__": [
                    "self",
                    "values",
                    "placement",
                    "ndim"
                ],
                "shape": [
                    "self"
                ],
                "iget": [
                    "self",
                    "col"
                ],
                "should_store": [
                    "self",
                    "value"
                ],
                "set": [
                    "self",
                    "locs",
                    "values"
                ],
                "putmask": [
                    "self",
                    "mask",
                    "new",
                    "inplace",
                    "axis",
                    "transpose"
                ],
                "_maybe_coerce_values": [
                    "self",
                    "values"
                ],
                "_holder": [
                    "self"
                ],
                "fill_value": [
                    "self"
                ],
                "_can_hold_na": [
                    "self"
                ],
                "is_view": [
                    "self"
                ],
                "is_numeric": [
                    "self"
                ],
                "setitem": [
                    "self",
                    "indexer",
                    "value"
                ],
                "get_values": [
                    "self",
                    "dtype"
                ],
                "array_values": [
                    "self"
                ],
                "to_native_types": [
                    "self",
                    "na_rep",
                    "quoting"
                ],
                "take_nd": [
                    "self",
                    "indexer",
                    "axis",
                    "new_mgr_locs",
                    "fill_value"
                ],
                "_can_hold_element": [
                    "self",
                    "element"
                ],
                "_slice": [
                    "self",
                    "slicer"
                ],
                "fillna": [
                    "self",
                    "value",
                    "limit",
                    "inplace",
                    "downcast"
                ],
                "interpolate": [
                    "self",
                    "method",
                    "axis",
                    "inplace",
                    "limit",
                    "fill_value"
                ],
                "diff": [
                    "self",
                    "n",
                    "axis"
                ],
                "shift": [
                    "self",
                    "periods",
                    "axis",
                    "fill_value"
                ],
                "where": [
                    "self",
                    "other",
                    "cond",
                    "errors",
                    "try_cast",
                    "axis"
                ],
                "_unstack": [
                    "self",
                    "unstacker",
                    "fill_value",
                    "new_placement"
                ]
            },
            "ObjectValuesExtensionBlock": {
                "external_values": [
                    "self"
                ]
            },
            "NumericBlock": {},
            "FloatOrComplexBlock": {},
            "FloatBlock": {
                "_can_hold_element": [
                    "self",
                    "element"
                ],
                "to_native_types": [
                    "self",
                    "na_rep",
                    "float_format",
                    "decimal",
                    "quoting"
                ]
            },
            "ComplexBlock": {
                "_can_hold_element": [
                    "self",
                    "element"
                ],
                "should_store": [
                    "self",
                    "value"
                ]
            },
            "IntBlock": {
                "_can_hold_element": [
                    "self",
                    "element"
                ]
            },
            "DatetimeLikeBlockMixin": {
                "_holder": [
                    "self"
                ],
                "fill_value": [
                    "self"
                ],
                "get_values": [
                    "self",
                    "dtype"
                ],
                "internal_values": [
                    "self"
                ],
                "array_values": [
                    "self"
                ],
                "iget": [
                    "self",
                    "key"
                ],
                "shift": [
                    "self",
                    "periods",
                    "axis",
                    "fill_value"
                ]
            },
            "DatetimeBlock": {
                "__init__": [
                    "self",
                    "values",
                    "placement",
                    "ndim"
                ],
                "_can_hold_na": [
                    "self"
                ],
                "_maybe_coerce_values": [
                    "self",
                    "values"
                ],
                "astype": [
                    "self",
                    "dtype",
                    "copy",
                    "errors"
                ],
                "_can_hold_element": [
                    "self",
                    "element"
                ],
                "to_native_types": [
                    "self",
                    "na_rep",
                    "date_format"
                ],
                "set": [
                    "self",
                    "locs",
                    "values"
                ]
            },
            "DatetimeTZBlock": {
                "_holder": [
                    "self"
                ],
                "_maybe_coerce_values": [
                    "self",
                    "values"
                ],
                "is_view": [
                    "self"
                ],
                "get_values": [
                    "self",
                    "dtype"
                ],
                "external_values": [
                    "self"
                ],
                "diff": [
                    "self",
                    "n",
                    "axis"
                ],
                "fillna": [
                    "self",
                    "value",
                    "limit",
                    "inplace",
                    "downcast"
                ],
                "setitem": [
                    "self",
                    "indexer",
                    "value"
                ],
                "quantile": [
                    "self",
                    "qs",
                    "interpolation",
                    "axis"
                ]
            },
            "TimeDeltaBlock": {
                "__init__": [
                    "self",
                    "values",
                    "placement",
                    "ndim"
                ],
                "_holder": [
                    "self"
                ],
                "_can_hold_element": [
                    "self",
                    "element"
                ],
                "fillna": [
                    "self",
                    "value"
                ],
                "to_native_types": [
                    "self",
                    "na_rep"
                ]
            },
            "BoolBlock": {
                "_can_hold_element": [
                    "self",
                    "element"
                ],
                "replace": [
                    "self",
                    "to_replace",
                    "value",
                    "inplace",
                    "regex",
                    "convert"
                ]
            },
            "ObjectBlock": {
                "__init__": [
                    "self",
                    "values",
                    "placement",
                    "ndim"
                ],
                "is_bool": [
                    "self"
                ],
                "convert": [
                    "self",
                    "copy",
                    "datetime",
                    "numeric",
                    "timedelta",
                    "coerce"
                ],
                "_maybe_downcast": [
                    "self",
                    "blocks",
                    "downcast"
                ],
                "_can_hold_element": [
                    "self",
                    "element"
                ],
                "replace": [
                    "self",
                    "to_replace",
                    "value",
                    "inplace",
                    "regex",
                    "convert"
                ],
                "_replace_single": [
                    "self",
                    "to_replace",
                    "value",
                    "inplace",
                    "regex",
                    "convert",
                    "mask"
                ],
                "_replace_coerce": [
                    "self",
                    "to_replace",
                    "value",
                    "inplace",
                    "regex",
                    "convert",
                    "mask"
                ]
            },
            "CategoricalBlock": {
                "__init__": [
                    "self",
                    "values",
                    "placement",
                    "ndim"
                ],
                "_holder": [
                    "self"
                ],
                "replace": [
                    "self",
                    "to_replace",
                    "value",
                    "inplace",
                    "regex",
                    "convert"
                ]
            }
        },
        "pandas.core.internals.concat": {
            "concatenate_block_managers": [
                "mgrs_indexers",
                "axes",
                "concat_axis",
                "copy"
            ],
            "_get_mgr_concatenation_plan": [
                "mgr",
                "indexers"
            ],
            "_concatenate_join_units": [
                "join_units",
                "concat_axis",
                "copy"
            ],
            "_get_empty_dtype_and_na": [
                "join_units"
            ],
            "_is_uniform_join_units": [
                "join_units"
            ],
            "_is_uniform_reindex": [
                "join_units"
            ],
            "_trim_join_unit": [
                "join_unit",
                "length"
            ],
            "_combine_concat_plans": [
                "plans",
                "concat_axis"
            ],
            "JoinUnit": {
                "__init__": [
                    "self",
                    "block",
                    "shape",
                    "indexers"
                ],
                "__repr__": [
                    "self"
                ],
                "needs_filling": [
                    "self"
                ],
                "dtype": [
                    "self"
                ],
                "is_na": [
                    "self"
                ],
                "get_reindexed_values": [
                    "self",
                    "empty_dtype",
                    "upcasted_na"
                ]
            }
        },
        "pandas.core.internals": {},
        "pandas.core.ops.invalid": {
            "invalid_comparison": [
                "left",
                "right",
                "op"
            ],
            "make_invalid_op": [
                "name"
            ]
        },
        "pandas.core.ops.mask_ops": {
            "kleene_or": [
                "left",
                "right",
                "left_mask",
                "right_mask"
            ],
            "kleene_xor": [
                "left",
                "right",
                "left_mask",
                "right_mask"
            ],
            "kleene_and": [
                "left",
                "right",
                "left_mask",
                "right_mask"
            ],
            "raise_for_nan": [
                "value",
                "method"
            ]
        },
        "pandas.core.ops.common": {
            "unpack_zerodim_and_defer": [
                "name"
            ],
            "_unpack_zerodim_and_defer": [
                "method",
                "name"
            ]
        },
        "pandas.core.ops.docstrings": {
            "_make_flex_doc": [
                "op_name",
                "typ"
            ]
        },
        "pandas.core.ops.array_ops": {
            "comp_method_OBJECT_ARRAY": [
                "op",
                "x",
                "y"
            ],
            "masked_arith_op": [
                "x",
                "y",
                "op"
            ],
            "na_arithmetic_op": [
                "left",
                "right",
                "op",
                "is_cmp"
            ],
            "arithmetic_op": [
                "left",
                "right",
                "op"
            ],
            "comparison_op": [
                "left",
                "right",
                "op"
            ],
            "na_logical_op": [
                "x",
                "y",
                "op"
            ],
            "logical_op": [
                "left",
                "right",
                "op"
            ],
            "get_array_op": [
                "op"
            ],
            "maybe_upcast_datetimelike_array": [
                "obj"
            ],
            "maybe_upcast_for_op": [
                "obj",
                "shape"
            ]
        },
        "pandas.core.ops.roperator": {
            "radd": [
                "left",
                "right"
            ],
            "rsub": [
                "left",
                "right"
            ],
            "rmul": [
                "left",
                "right"
            ],
            "rdiv": [
                "left",
                "right"
            ],
            "rtruediv": [
                "left",
                "right"
            ],
            "rfloordiv": [
                "left",
                "right"
            ],
            "rmod": [
                "left",
                "right"
            ],
            "rdivmod": [
                "left",
                "right"
            ],
            "rpow": [
                "left",
                "right"
            ],
            "rand_": [
                "left",
                "right"
            ],
            "ror_": [
                "left",
                "right"
            ],
            "rxor": [
                "left",
                "right"
            ]
        },
        "pandas.core.ops.methods": {
            "_get_method_wrappers": [
                "cls"
            ],
            "add_special_arithmetic_methods": [
                "cls"
            ],
            "add_flex_arithmetic_methods": [
                "cls"
            ],
            "_create_methods": [
                "cls",
                "arith_method",
                "comp_method",
                "bool_method",
                "special"
            ],
            "_add_methods": [
                "cls",
                "new_methods"
            ]
        },
        "pandas.core.ops.dispatch": {
            "should_extension_dispatch": [
                "left",
                "right"
            ]
        },
        "pandas.core.ops.missing": {
            "fill_zeros": [
                "result",
                "x",
                "y"
            ],
            "mask_zero_div_zero": [
                "x",
                "y",
                "result"
            ],
            "dispatch_fill_zeros": [
                "op",
                "left",
                "right",
                "result"
            ]
        },
        "pandas.core.ops": {
            "get_op_result_name": [
                "left",
                "right"
            ],
            "_maybe_match_name": [
                "a",
                "b"
            ],
            "_get_frame_op_default_axis": [
                "name"
            ],
            "_get_op_name": [
                "op",
                "special"
            ],
            "fill_binop": [
                "left",
                "right",
                "fill_value"
            ],
            "dispatch_to_series": [
                "left",
                "right",
                "func",
                "axis"
            ],
            "_align_method_SERIES": [
                "left",
                "right",
                "align_asobject"
            ],
            "_arith_method_SERIES": [
                "cls",
                "op",
                "special"
            ],
            "_comp_method_SERIES": [
                "cls",
                "op",
                "special"
            ],
            "_bool_method_SERIES": [
                "cls",
                "op",
                "special"
            ],
            "_flex_method_SERIES": [
                "cls",
                "op",
                "special"
            ],
            "_align_method_FRAME": [
                "left",
                "right",
                "axis",
                "flex",
                "level"
            ],
            "_should_reindex_frame_op": [
                "left",
                "right",
                "op",
                "axis",
                "default_axis",
                "fill_value",
                "level"
            ],
            "_frame_arith_method_with_reindex": [
                "left",
                "right",
                "op"
            ],
            "_maybe_align_series_as_frame": [
                "frame",
                "series",
                "axis"
            ],
            "_arith_method_FRAME": [
                "cls",
                "op",
                "special"
            ],
            "_flex_comp_method_FRAME": [
                "cls",
                "op",
                "special"
            ],
            "_comp_method_FRAME": [
                "cls",
                "op",
                "special"
            ]
        },
        "pandas.core.groupby.categorical": {
            "recode_for_groupby": [
                "c",
                "sort",
                "observed"
            ],
            "recode_from_groupby": [
                "c",
                "sort",
                "ci"
            ]
        },
        "pandas.core.groupby.generic": {
            "generate_property": [
                "name",
                "klass"
            ],
            "pin_allowlisted_properties": [
                "klass",
                "allowlist"
            ],
            "_recast_datetimelike_result": [
                "result"
            ],
            "SeriesGroupBy": {
                "_iterate_slices": [
                    "self"
                ],
                "_selection_name": [
                    "self"
                ],
                "apply": [
                    "self",
                    "func"
                ],
                "aggregate": [
                    "self",
                    "func"
                ],
                "_aggregate_multiple_funcs": [
                    "self",
                    "arg"
                ],
                "_wrap_series_output": [
                    "self",
                    "output",
                    "index"
                ],
                "_wrap_aggregated_output": [
                    "self",
                    "output",
                    "index"
                ],
                "_wrap_transformed_output": [
                    "self",
                    "output"
                ],
                "_wrap_applied_output": [
                    "self",
                    "keys",
                    "values",
                    "not_indexed_same"
                ],
                "_aggregate_named": [
                    "self",
                    "func"
                ],
                "transform": [
                    "self",
                    "func"
                ],
                "_transform_general": [
                    "self",
                    "func"
                ],
                "_transform_fast": [
                    "self",
                    "result"
                ],
                "filter": [
                    "self",
                    "func",
                    "dropna"
                ],
                "nunique": [
                    "self",
                    "dropna"
                ],
                "describe": [
                    "self"
                ],
                "value_counts": [
                    "self",
                    "normalize",
                    "sort",
                    "ascending",
                    "bins",
                    "dropna"
                ],
                "count": [
                    "self"
                ],
                "_apply_to_column_groupbys": [
                    "self",
                    "func"
                ],
                "pct_change": [
                    "self",
                    "periods",
                    "fill_method",
                    "limit",
                    "freq"
                ]
            },
            "DataFrameGroupBy": {
                "aggregate": [
                    "self",
                    "func"
                ],
                "_iterate_slices": [
                    "self"
                ],
                "_cython_agg_general": [
                    "self",
                    "how",
                    "alt",
                    "numeric_only",
                    "min_count"
                ],
                "_cython_agg_blocks": [
                    "self",
                    "how",
                    "alt",
                    "numeric_only",
                    "min_count"
                ],
                "_aggregate_frame": [
                    "self",
                    "func"
                ],
                "_aggregate_item_by_item": [
                    "self",
                    "func"
                ],
                "_wrap_applied_output": [
                    "self",
                    "keys",
                    "values",
                    "not_indexed_same"
                ],
                "_transform_general": [
                    "self",
                    "func"
                ],
                "transform": [
                    "self",
                    "func"
                ],
                "_transform_fast": [
                    "self",
                    "result"
                ],
                "_define_paths": [
                    "self",
                    "func"
                ],
                "_choose_path": [
                    "self",
                    "fast_path",
                    "slow_path",
                    "group"
                ],
                "_transform_item_by_item": [
                    "self",
                    "obj",
                    "wrapper"
                ],
                "filter": [
                    "self",
                    "func",
                    "dropna"
                ],
                "__getitem__": [
                    "self",
                    "key"
                ],
                "_gotitem": [
                    "self",
                    "key",
                    "ndim",
                    "subset"
                ],
                "_wrap_frame_output": [
                    "self",
                    "result",
                    "obj"
                ],
                "_get_data_to_aggregate": [
                    "self"
                ],
                "_insert_inaxis_grouper_inplace": [
                    "self",
                    "result"
                ],
                "_wrap_aggregated_output": [
                    "self",
                    "output",
                    "index"
                ],
                "_wrap_transformed_output": [
                    "self",
                    "output"
                ],
                "_wrap_agged_blocks": [
                    "self",
                    "blocks",
                    "items"
                ],
                "_iterate_column_groupbys": [
                    "self"
                ],
                "_apply_to_column_groupbys": [
                    "self",
                    "func"
                ],
                "count": [
                    "self"
                ],
                "nunique": [
                    "self",
                    "dropna"
                ]
            }
        },
        "pandas.core.groupby.grouper": {
            "get_grouper": [
                "obj",
                "key",
                "axis",
                "level",
                "sort",
                "observed",
                "mutated",
                "validate",
                "dropna"
            ],
            "_is_label_like": [
                "val"
            ],
            "_convert_grouper": [
                "axis",
                "grouper"
            ],
            "Grouper": {
                "__new__": [
                    "cls"
                ],
                "__init__": [
                    "self",
                    "key",
                    "level",
                    "freq",
                    "axis",
                    "sort",
                    "dropna"
                ],
                "ax": [
                    "self"
                ],
                "_get_grouper": [
                    "self",
                    "obj",
                    "validate"
                ],
                "_set_grouper": [
                    "self",
                    "obj",
                    "sort"
                ],
                "groups": [
                    "self"
                ],
                "__repr__": [
                    "self"
                ]
            },
            "Grouping": {
                "__init__": [
                    "self",
                    "index",
                    "grouper",
                    "obj",
                    "name",
                    "level",
                    "sort",
                    "observed",
                    "in_axis",
                    "dropna"
                ],
                "__repr__": [
                    "self"
                ],
                "__iter__": [
                    "self"
                ],
                "ngroups": [
                    "self"
                ],
                "indices": [
                    "self"
                ],
                "codes": [
                    "self"
                ],
                "result_index": [
                    "self"
                ],
                "group_index": [
                    "self"
                ],
                "_make_codes": [
                    "self"
                ],
                "groups": [
                    "self"
                ]
            }
        },
        "pandas.core.groupby.ops": {
            "_is_indexed_like": [
                "obj",
                "axes"
            ],
            "get_splitter": [
                "data",
                "labels",
                "ngroups",
                "axis"
            ],
            "BaseGrouper": {
                "__init__": [
                    "self",
                    "axis",
                    "groupings",
                    "sort",
                    "group_keys",
                    "mutated",
                    "indexer"
                ],
                "groupings": [
                    "self"
                ],
                "shape": [
                    "self"
                ],
                "__iter__": [
                    "self"
                ],
                "nkeys": [
                    "self"
                ],
                "get_iterator": [
                    "self",
                    "data",
                    "axis"
                ],
                "_get_splitter": [
                    "self",
                    "data",
                    "axis"
                ],
                "_get_grouper": [
                    "self"
                ],
                "_get_group_keys": [
                    "self"
                ],
                "apply": [
                    "self",
                    "f",
                    "data",
                    "axis"
                ],
                "indices": [
                    "self"
                ],
                "codes": [
                    "self"
                ],
                "levels": [
                    "self"
                ],
                "names": [
                    "self"
                ],
                "size": [
                    "self"
                ],
                "groups": [
                    "self"
                ],
                "is_monotonic": [
                    "self"
                ],
                "group_info": [
                    "self"
                ],
                "codes_info": [
                    "self"
                ],
                "_get_compressed_codes": [
                    "self"
                ],
                "ngroups": [
                    "self"
                ],
                "reconstructed_codes": [
                    "self"
                ],
                "result_index": [
                    "self"
                ],
                "get_group_levels": [
                    "self"
                ],
                "_is_builtin_func": [
                    "self",
                    "arg"
                ],
                "_get_cython_function": [
                    "self",
                    "kind",
                    "how",
                    "values",
                    "is_numeric"
                ],
                "_get_cython_func_and_vals": [
                    "self",
                    "kind",
                    "how",
                    "values",
                    "is_numeric"
                ],
                "_cython_operation": [
                    "self",
                    "kind",
                    "values",
                    "how",
                    "axis",
                    "min_count"
                ],
                "aggregate": [
                    "self",
                    "values",
                    "how",
                    "axis",
                    "min_count"
                ],
                "transform": [
                    "self",
                    "values",
                    "how",
                    "axis"
                ],
                "_aggregate": [
                    "self",
                    "result",
                    "counts",
                    "values",
                    "comp_ids",
                    "agg_func",
                    "min_count"
                ],
                "_transform": [
                    "self",
                    "result",
                    "values",
                    "comp_ids",
                    "transform_func",
                    "is_datetimelike"
                ],
                "agg_series": [
                    "self",
                    "obj",
                    "func"
                ],
                "_aggregate_series_fast": [
                    "self",
                    "obj",
                    "func"
                ],
                "_aggregate_series_pure_python": [
                    "self",
                    "obj",
                    "func"
                ]
            },
            "BinGrouper": {
                "__init__": [
                    "self",
                    "bins",
                    "binlabels",
                    "filter_empty",
                    "mutated",
                    "indexer"
                ],
                "groups": [
                    "self"
                ],
                "nkeys": [
                    "self"
                ],
                "_get_grouper": [
                    "self"
                ],
                "get_iterator": [
                    "self",
                    "data",
                    "axis"
                ],
                "indices": [
                    "self"
                ],
                "group_info": [
                    "self"
                ],
                "reconstructed_codes": [
                    "self"
                ],
                "result_index": [
                    "self"
                ],
                "levels": [
                    "self"
                ],
                "names": [
                    "self"
                ],
                "groupings": [
                    "self"
                ],
                "agg_series": [
                    "self",
                    "obj",
                    "func"
                ]
            },
            "DataSplitter": {
                "__init__": [
                    "self",
                    "data",
                    "labels",
                    "ngroups",
                    "axis"
                ],
                "slabels": [
                    "self"
                ],
                "sort_idx": [
                    "self"
                ],
                "__iter__": [
                    "self"
                ],
                "_get_sorted_data": [
                    "self"
                ],
                "_chop": [
                    "self",
                    "sdata",
                    "slice_obj"
                ]
            },
            "SeriesSplitter": {
                "_chop": [
                    "self",
                    "sdata",
                    "slice_obj"
                ]
            },
            "FrameSplitter": {
                "fast_apply": [
                    "self",
                    "f",
                    "sdata",
                    "names"
                ],
                "_chop": [
                    "self",
                    "sdata",
                    "slice_obj"
                ]
            }
        },
        "pandas.core.groupby.groupby": {
            "_group_selection_context": [
                "groupby"
            ],
            "get_groupby": [
                "obj",
                "by",
                "axis",
                "level",
                "grouper",
                "exclusions",
                "selection",
                "as_index",
                "sort",
                "group_keys",
                "squeeze",
                "observed",
                "mutated",
                "dropna"
            ],
            "GroupByPlot": {
                "__init__": [
                    "self",
                    "groupby"
                ],
                "__call__": [
                    "self"
                ],
                "__getattr__": [
                    "self",
                    "name"
                ]
            },
            "_GroupBy": {
                "__init__": [
                    "self",
                    "obj",
                    "keys",
                    "axis",
                    "level",
                    "grouper",
                    "exclusions",
                    "selection",
                    "as_index",
                    "sort",
                    "group_keys",
                    "squeeze",
                    "observed",
                    "mutated",
                    "dropna"
                ],
                "__len__": [
                    "self"
                ],
                "__repr__": [
                    "self"
                ],
                "_assure_grouper": [
                    "self"
                ],
                "groups": [
                    "self"
                ],
                "ngroups": [
                    "self"
                ],
                "indices": [
                    "self"
                ],
                "_get_indices": [
                    "self",
                    "names"
                ],
                "_get_index": [
                    "self",
                    "name"
                ],
                "_selected_obj": [
                    "self"
                ],
                "_reset_group_selection": [
                    "self"
                ],
                "_set_group_selection": [
                    "self"
                ],
                "_set_result_index_ordered": [
                    "self",
                    "result"
                ],
                "_dir_additions": [
                    "self"
                ],
                "__getattr__": [
                    "self",
                    "attr"
                ],
                "pipe": [
                    "self",
                    "func"
                ],
                "_make_wrapper": [
                    "self",
                    "name"
                ],
                "get_group": [
                    "self",
                    "name",
                    "obj"
                ],
                "__iter__": [
                    "self"
                ],
                "apply": [
                    "self",
                    "func"
                ],
                "_python_apply_general": [
                    "self",
                    "f",
                    "data"
                ],
                "_iterate_slices": [
                    "self"
                ],
                "transform": [
                    "self",
                    "func"
                ],
                "_cumcount_array": [
                    "self",
                    "ascending"
                ],
                "_transform_should_cast": [
                    "self",
                    "func_nm"
                ],
                "_cython_transform": [
                    "self",
                    "how",
                    "numeric_only"
                ],
                "_wrap_aggregated_output": [
                    "self",
                    "output",
                    "index"
                ],
                "_wrap_transformed_output": [
                    "self",
                    "output"
                ],
                "_wrap_applied_output": [
                    "self",
                    "keys",
                    "values",
                    "not_indexed_same"
                ],
                "_agg_general": [
                    "self",
                    "numeric_only",
                    "min_count"
                ],
                "_cython_agg_general": [
                    "self",
                    "how",
                    "alt",
                    "numeric_only",
                    "min_count"
                ],
                "_python_agg_general": [
                    "self",
                    "func"
                ],
                "_concat_objects": [
                    "self",
                    "keys",
                    "values",
                    "not_indexed_same"
                ],
                "_apply_filter": [
                    "self",
                    "indices",
                    "dropna"
                ]
            },
            "GroupBy": {
                "_obj_1d_constructor": [
                    "self"
                ],
                "_bool_agg": [
                    "self",
                    "val_test",
                    "skipna"
                ],
                "any": [
                    "self",
                    "skipna"
                ],
                "all": [
                    "self",
                    "skipna"
                ],
                "count": [
                    "self"
                ],
                "mean": [
                    "self",
                    "numeric_only"
                ],
                "median": [
                    "self",
                    "numeric_only"
                ],
                "std": [
                    "self",
                    "ddof"
                ],
                "var": [
                    "self",
                    "ddof"
                ],
                "sem": [
                    "self",
                    "ddof"
                ],
                "size": [
                    "self"
                ],
                "sum": [
                    "self",
                    "numeric_only",
                    "min_count"
                ],
                "prod": [
                    "self",
                    "numeric_only",
                    "min_count"
                ],
                "min": [
                    "self",
                    "numeric_only",
                    "min_count"
                ],
                "max": [
                    "self",
                    "numeric_only",
                    "min_count"
                ],
                "first": [
                    "self",
                    "numeric_only",
                    "min_count"
                ],
                "last": [
                    "self",
                    "numeric_only",
                    "min_count"
                ],
                "ohlc": [
                    "self"
                ],
                "describe": [
                    "self"
                ],
                "resample": [
                    "self",
                    "rule"
                ],
                "rolling": [
                    "self"
                ],
                "expanding": [
                    "self"
                ],
                "_fill": [
                    "self",
                    "direction",
                    "limit"
                ],
                "pad": [
                    "self",
                    "limit"
                ],
                "backfill": [
                    "self",
                    "limit"
                ],
                "nth": [
                    "self",
                    "n",
                    "dropna"
                ],
                "quantile": [
                    "self",
                    "q",
                    "interpolation"
                ],
                "ngroup": [
                    "self",
                    "ascending"
                ],
                "cumcount": [
                    "self",
                    "ascending"
                ],
                "rank": [
                    "self",
                    "method",
                    "ascending",
                    "na_option",
                    "pct",
                    "axis"
                ],
                "cumprod": [
                    "self",
                    "axis"
                ],
                "cumsum": [
                    "self",
                    "axis"
                ],
                "cummin": [
                    "self",
                    "axis"
                ],
                "cummax": [
                    "self",
                    "axis"
                ],
                "_get_cythonized_result": [
                    "self",
                    "how",
                    "cython_dtype",
                    "aggregate",
                    "numeric_only",
                    "needs_counts",
                    "needs_values",
                    "needs_2d",
                    "min_count",
                    "needs_mask",
                    "needs_ngroups",
                    "result_is_index",
                    "pre_processing",
                    "post_processing"
                ],
                "shift": [
                    "self",
                    "periods",
                    "freq",
                    "axis",
                    "fill_value"
                ],
                "pct_change": [
                    "self",
                    "periods",
                    "fill_method",
                    "limit",
                    "freq",
                    "axis"
                ],
                "head": [
                    "self",
                    "n"
                ],
                "tail": [
                    "self",
                    "n"
                ],
                "_reindex_output": [
                    "self",
                    "output",
                    "fill_value"
                ],
                "sample": [
                    "self",
                    "n",
                    "frac",
                    "replace",
                    "weights",
                    "random_state"
                ]
            }
        },
        "pandas.core.groupby.base": {
            "GroupByMixin": {
                "_gotitem": [
                    "self",
                    "key",
                    "ndim",
                    "subset"
                ]
            }
        },
        "pandas.core.groupby": {},
        "pandas.core.computation.scope": {
            "ensure_scope": [
                "level",
                "global_dict",
                "local_dict",
                "resolvers",
                "target"
            ],
            "_replacer": [
                "x"
            ],
            "_raw_hex_id": [
                "obj"
            ],
            "_get_pretty_string": [
                "obj"
            ],
            "Scope": {
                "__init__": [
                    "self",
                    "level",
                    "global_dict",
                    "local_dict",
                    "resolvers",
                    "target"
                ],
                "__repr__": [
                    "self"
                ],
                "has_resolvers": [
                    "self"
                ],
                "resolve": [
                    "self",
                    "key",
                    "is_local"
                ],
                "swapkey": [
                    "self",
                    "old_key",
                    "new_key",
                    "new_value"
                ],
                "_get_vars": [
                    "self",
                    "stack",
                    "scopes"
                ],
                "_update": [
                    "self",
                    "level"
                ],
                "add_tmp": [
                    "self",
                    "value"
                ],
                "ntemps": [
                    "self"
                ],
                "full_scope": [
                    "self"
                ]
            }
        },
        "pandas.core.computation.common": {
            "_ensure_decoded": [
                "s"
            ],
            "result_type_many": []
        },
        "pandas.core.computation.pytables": {
            "_validate_where": [
                "w"
            ],
            "maybe_expression": [
                "s"
            ],
            "PyTablesScope": {
                "__init__": [
                    "self",
                    "level",
                    "global_dict",
                    "local_dict",
                    "queryables"
                ]
            },
            "Term": {
                "__new__": [
                    "cls",
                    "name",
                    "env",
                    "side",
                    "encoding"
                ],
                "__init__": [
                    "self",
                    "name",
                    "env",
                    "side",
                    "encoding"
                ],
                "_resolve_name": [
                    "self"
                ],
                "value": [
                    "self"
                ]
            },
            "Constant": {
                "__init__": [
                    "self",
                    "value",
                    "env",
                    "side",
                    "encoding"
                ],
                "_resolve_name": [
                    "self"
                ]
            },
            "BinOp": {
                "__init__": [
                    "self",
                    "op",
                    "lhs",
                    "rhs",
                    "queryables",
                    "encoding"
                ],
                "_disallow_scalar_only_bool_ops": [
                    "self"
                ],
                "prune": [
                    "self",
                    "klass"
                ],
                "conform": [
                    "self",
                    "rhs"
                ],
                "is_valid": [
                    "self"
                ],
                "is_in_table": [
                    "self"
                ],
                "kind": [
                    "self"
                ],
                "meta": [
                    "self"
                ],
                "metadata": [
                    "self"
                ],
                "generate": [
                    "self",
                    "v"
                ],
                "convert_value": [
                    "self",
                    "v"
                ],
                "convert_values": [
                    "self"
                ]
            },
            "FilterBinOp": {
                "__repr__": [
                    "self"
                ],
                "invert": [
                    "self"
                ],
                "format": [
                    "self"
                ],
                "evaluate": [
                    "self"
                ],
                "generate_filter_op": [
                    "self",
                    "invert"
                ]
            },
            "JointFilterBinOp": {
                "format": [
                    "self"
                ],
                "evaluate": [
                    "self"
                ]
            },
            "ConditionBinOp": {
                "__repr__": [
                    "self"
                ],
                "invert": [
                    "self"
                ],
                "format": [
                    "self"
                ],
                "evaluate": [
                    "self"
                ]
            },
            "JointConditionBinOp": {
                "evaluate": [
                    "self"
                ]
            },
            "UnaryOp": {
                "prune": [
                    "self",
                    "klass"
                ]
            },
            "PyTablesExprVisitor": {
                "__init__": [
                    "self",
                    "env",
                    "engine",
                    "parser"
                ],
                "visit_UnaryOp": [
                    "self",
                    "node"
                ],
                "visit_Index": [
                    "self",
                    "node"
                ],
                "visit_Assign": [
                    "self",
                    "node"
                ],
                "visit_Subscript": [
                    "self",
                    "node"
                ],
                "visit_Attribute": [
                    "self",
                    "node"
                ],
                "translate_In": [
                    "self",
                    "op"
                ],
                "_rewrite_membership_op": [
                    "self",
                    "node",
                    "left",
                    "right"
                ]
            },
            "PyTablesExpr": {
                "__init__": [
                    "self",
                    "where",
                    "queryables",
                    "encoding",
                    "scope_level"
                ],
                "__repr__": [
                    "self"
                ],
                "evaluate": [
                    "self"
                ]
            },
            "TermValue": {
                "__init__": [
                    "self",
                    "value",
                    "converted",
                    "kind"
                ],
                "tostring": [
                    "self",
                    "encoding"
                ]
            }
        },
        "pandas.core.computation.parsing": {
            "create_valid_python_identifier": [
                "name"
            ],
            "clean_backtick_quoted_toks": [
                "tok"
            ],
            "clean_column_name": [
                "name"
            ],
            "tokenize_backtick_quoted_string": [
                "token_generator",
                "source",
                "string_start"
            ],
            "tokenize_string": [
                "source"
            ]
        },
        "pandas.core.computation.align": {
            "_align_core_single_unary_op": [
                "term"
            ],
            "_zip_axes_from_type": [
                "typ",
                "new_axes"
            ],
            "_any_pandas_objects": [
                "terms"
            ],
            "_filter_special_cases": [
                "f"
            ],
            "_align_core": [
                "terms"
            ],
            "align_terms": [
                "terms"
            ],
            "reconstruct_object": [
                "typ",
                "obj",
                "axes",
                "dtype"
            ]
        },
        "pandas.core.computation.engines": {
            "_check_ne_builtin_clash": [
                "expr"
            ],
            "NumExprClobberingError": {},
            "AbstractEngine": {
                "__init__": [
                    "self",
                    "expr"
                ],
                "convert": [
                    "self"
                ],
                "evaluate": [
                    "self"
                ],
                "_is_aligned": [
                    "self"
                ],
                "_evaluate": [
                    "self"
                ]
            },
            "NumExprEngine": {
                "_evaluate": [
                    "self"
                ]
            },
            "PythonEngine": {
                "evaluate": [
                    "self"
                ],
                "_evaluate": [
                    "self"
                ]
            }
        },
        "pandas.core.computation.expressions": {
            "set_use_numexpr": [
                "v"
            ],
            "set_numexpr_threads": [
                "n"
            ],
            "_evaluate_standard": [
                "op",
                "op_str",
                "a",
                "b"
            ],
            "_can_use_numexpr": [
                "op",
                "op_str",
                "a",
                "b",
                "dtype_check"
            ],
            "_evaluate_numexpr": [
                "op",
                "op_str",
                "a",
                "b"
            ],
            "_where_standard": [
                "cond",
                "a",
                "b"
            ],
            "_where_numexpr": [
                "cond",
                "a",
                "b"
            ],
            "_has_bool_dtype": [
                "x"
            ],
            "_bool_arith_check": [
                "op_str",
                "a",
                "b",
                "not_allowed",
                "unsupported"
            ],
            "evaluate": [
                "op",
                "a",
                "b",
                "use_numexpr"
            ],
            "where": [
                "cond",
                "a",
                "b",
                "use_numexpr"
            ],
            "set_test_mode": [
                "v"
            ],
            "_store_test_result": [
                "used_numexpr"
            ],
            "get_test_result": []
        },
        "pandas.core.computation.ops": {
            "_in": [
                "x",
                "y"
            ],
            "_not_in": [
                "x",
                "y"
            ],
            "_cast_inplace": [
                "terms",
                "acceptable_dtypes",
                "dtype"
            ],
            "is_term": [
                "obj"
            ],
            "isnumeric": [
                "dtype"
            ],
            "UndefinedVariableError": {
                "__init__": [
                    "self",
                    "name",
                    "is_local"
                ]
            },
            "Term": {
                "__new__": [
                    "cls",
                    "name",
                    "env",
                    "side",
                    "encoding"
                ],
                "__init__": [
                    "self",
                    "name",
                    "env",
                    "side",
                    "encoding"
                ],
                "local_name": [
                    "self"
                ],
                "__repr__": [
                    "self"
                ],
                "__call__": [
                    "self"
                ],
                "evaluate": [
                    "self"
                ],
                "_resolve_name": [
                    "self"
                ],
                "update": [
                    "self",
                    "value"
                ],
                "is_scalar": [
                    "self"
                ],
                "type": [
                    "self"
                ],
                "raw": [
                    "self"
                ],
                "is_datetime": [
                    "self"
                ],
                "value": [
                    "self",
                    "new_value"
                ],
                "name": [
                    "self"
                ],
                "ndim": [
                    "self"
                ]
            },
            "Constant": {
                "__init__": [
                    "self",
                    "value",
                    "env",
                    "side",
                    "encoding"
                ],
                "_resolve_name": [
                    "self"
                ],
                "name": [
                    "self"
                ],
                "__repr__": [
                    "self"
                ]
            },
            "Op": {
                "__init__": [
                    "self",
                    "op",
                    "operands",
                    "encoding"
                ],
                "__iter__": [
                    "self"
                ],
                "__repr__": [
                    "self"
                ],
                "return_type": [
                    "self"
                ],
                "has_invalid_return_type": [
                    "self"
                ],
                "operand_types": [
                    "self"
                ],
                "is_scalar": [
                    "self"
                ],
                "is_datetime": [
                    "self"
                ]
            },
            "BinOp": {
                "__init__": [
                    "self",
                    "op",
                    "lhs",
                    "rhs"
                ],
                "__call__": [
                    "self",
                    "env"
                ],
                "evaluate": [
                    "self",
                    "env",
                    "engine",
                    "parser",
                    "term_type",
                    "eval_in_python"
                ],
                "convert_values": [
                    "self"
                ],
                "_disallow_scalar_only_bool_ops": [
                    "self"
                ]
            },
            "Div": {
                "__init__": [
                    "self",
                    "lhs",
                    "rhs"
                ]
            },
            "UnaryOp": {
                "__init__": [
                    "self",
                    "op",
                    "operand"
                ],
                "__call__": [
                    "self",
                    "env"
                ],
                "__repr__": [
                    "self"
                ],
                "return_type": [
                    "self"
                ]
            },
            "MathCall": {
                "__init__": [
                    "self",
                    "func",
                    "args"
                ],
                "__call__": [
                    "self",
                    "env"
                ],
                "__repr__": [
                    "self"
                ]
            },
            "FuncNode": {
                "__init__": [
                    "self",
                    "name"
                ],
                "__call__": [
                    "self"
                ]
            }
        },
        "pandas.core.computation.check": {},
        "pandas.core.computation.expr": {
            "_rewrite_assign": [
                "tok"
            ],
            "_replace_booleans": [
                "tok"
            ],
            "_replace_locals": [
                "tok"
            ],
            "_compose2": [
                "f",
                "g"
            ],
            "_compose": [],
            "_preparse": [
                "source",
                "f"
            ],
            "_is_type": [
                "t"
            ],
            "_filter_nodes": [
                "superclass",
                "all_nodes"
            ],
            "_node_not_implemented": [
                "node_name"
            ],
            "disallow": [
                "nodes"
            ],
            "_op_maker": [
                "op_class",
                "op_symbol"
            ],
            "add_ops": [
                "op_classes"
            ],
            "BaseExprVisitor": {
                "__init__": [
                    "self",
                    "env",
                    "engine",
                    "parser",
                    "preparser"
                ],
                "visit": [
                    "self",
                    "node"
                ],
                "visit_Module": [
                    "self",
                    "node"
                ],
                "visit_Expr": [
                    "self",
                    "node"
                ],
                "_rewrite_membership_op": [
                    "self",
                    "node",
                    "left",
                    "right"
                ],
                "_maybe_transform_eq_ne": [
                    "self",
                    "node",
                    "left",
                    "right"
                ],
                "_maybe_downcast_constants": [
                    "self",
                    "left",
                    "right"
                ],
                "_maybe_eval": [
                    "self",
                    "binop",
                    "eval_in_python"
                ],
                "_maybe_evaluate_binop": [
                    "self",
                    "op",
                    "op_class",
                    "lhs",
                    "rhs",
                    "eval_in_python",
                    "maybe_eval_in_python"
                ],
                "visit_BinOp": [
                    "self",
                    "node"
                ],
                "visit_Div": [
                    "self",
                    "node"
                ],
                "visit_UnaryOp": [
                    "self",
                    "node"
                ],
                "visit_Name": [
                    "self",
                    "node"
                ],
                "visit_NameConstant": [
                    "self",
                    "node"
                ],
                "visit_Num": [
                    "self",
                    "node"
                ],
                "visit_Constant": [
                    "self",
                    "node"
                ],
                "visit_Str": [
                    "self",
                    "node"
                ],
                "visit_List": [
                    "self",
                    "node"
                ],
                "visit_Index": [
                    "self",
                    "node"
                ],
                "visit_Subscript": [
                    "self",
                    "node"
                ],
                "visit_Slice": [
                    "self",
                    "node"
                ],
                "visit_Assign": [
                    "self",
                    "node"
                ],
                "visit_Attribute": [
                    "self",
                    "node"
                ],
                "visit_Call": [
                    "self",
                    "node",
                    "side"
                ],
                "translate_In": [
                    "self",
                    "op"
                ],
                "visit_Compare": [
                    "self",
                    "node"
                ],
                "_try_visit_binop": [
                    "self",
                    "bop"
                ],
                "visit_BoolOp": [
                    "self",
                    "node"
                ]
            },
            "PandasExprVisitor": {
                "__init__": [
                    "self",
                    "env",
                    "engine",
                    "parser",
                    "preparser"
                ]
            },
            "PythonExprVisitor": {
                "__init__": [
                    "self",
                    "env",
                    "engine",
                    "parser",
                    "preparser"
                ]
            },
            "Expr": {
                "__init__": [
                    "self",
                    "expr",
                    "engine",
                    "parser",
                    "env",
                    "level"
                ],
                "assigner": [
                    "self"
                ],
                "__call__": [
                    "self"
                ],
                "__repr__": [
                    "self"
                ],
                "__len__": [
                    "self"
                ],
                "parse": [
                    "self"
                ],
                "names": [
                    "self"
                ]
            }
        },
        "pandas.core.computation.eval": {
            "_check_engine": [
                "engine"
            ],
            "_check_parser": [
                "parser"
            ],
            "_check_resolvers": [
                "resolvers"
            ],
            "_check_expression": [
                "expr"
            ],
            "_convert_expression": [
                "expr"
            ],
            "_check_for_locals": [
                "expr",
                "stack_level",
                "parser"
            ],
            "eval": [
                "expr",
                "parser",
                "engine",
                "truediv",
                "local_dict",
                "global_dict",
                "resolvers",
                "level",
                "target",
                "inplace"
            ]
        },
        "pandas.core.computation.api": {},
        "pandas.core.computation": {},
        "pandas.core.window.expanding": {
            "Expanding": {
                "__init__": [
                    "self",
                    "obj",
                    "min_periods",
                    "center",
                    "axis"
                ],
                "_constructor": [
                    "self"
                ],
                "_get_window": [
                    "self",
                    "other"
                ],
                "aggregate": [
                    "self",
                    "func"
                ],
                "count": [
                    "self"
                ],
                "apply": [
                    "self",
                    "func",
                    "raw",
                    "engine",
                    "engine_kwargs",
                    "args",
                    "kwargs"
                ],
                "sum": [
                    "self"
                ],
                "max": [
                    "self"
                ],
                "min": [
                    "self"
                ],
                "mean": [
                    "self"
                ],
                "median": [
                    "self"
                ],
                "std": [
                    "self",
                    "ddof"
                ],
                "var": [
                    "self",
                    "ddof"
                ],
                "skew": [
                    "self"
                ],
                "kurt": [
                    "self"
                ],
                "quantile": [
                    "self",
                    "quantile",
                    "interpolation"
                ],
                "cov": [
                    "self",
                    "other",
                    "pairwise",
                    "ddof"
                ],
                "corr": [
                    "self",
                    "other",
                    "pairwise"
                ]
            },
            "ExpandingGroupby": {
                "_constructor": [
                    "self"
                ]
            }
        },
        "pandas.core.window.rolling": {
            "calculate_center_offset": [
                "window"
            ],
            "calculate_min_periods": [
                "window",
                "min_periods",
                "num_values",
                "required_min_periods",
                "floor"
            ],
            "get_weighted_roll_func": [
                "cfunc"
            ],
            "_Window": {
                "__init__": [
                    "self",
                    "obj",
                    "window",
                    "min_periods",
                    "center",
                    "win_type",
                    "axis",
                    "on",
                    "closed"
                ],
                "_constructor": [
                    "self"
                ],
                "is_datetimelike": [
                    "self"
                ],
                "_on": [
                    "self"
                ],
                "is_freq_type": [
                    "self"
                ],
                "validate": [
                    "self"
                ],
                "_validate_get_window_bounds_signature": [
                    "window"
                ],
                "_create_blocks": [
                    "self",
                    "obj"
                ],
                "_gotitem": [
                    "self",
                    "key",
                    "ndim",
                    "subset"
                ],
                "__getattr__": [
                    "self",
                    "attr"
                ],
                "_dir_additions": [
                    "self"
                ],
                "_get_win_type": [
                    "self",
                    "kwargs"
                ],
                "_get_window": [
                    "self",
                    "other",
                    "win_type"
                ],
                "_window_type": [
                    "self"
                ],
                "__repr__": [
                    "self"
                ],
                "__iter__": [
                    "self"
                ],
                "_prep_values": [
                    "self",
                    "values"
                ],
                "_wrap_result": [
                    "self",
                    "result",
                    "block",
                    "obj"
                ],
                "_wrap_results": [
                    "self",
                    "results",
                    "blocks",
                    "obj",
                    "exclude"
                ],
                "_center_window": [
                    "self",
                    "result",
                    "window"
                ],
                "_get_roll_func": [
                    "self",
                    "func_name"
                ],
                "_get_cython_func_type": [
                    "self",
                    "func"
                ],
                "_get_window_indexer": [
                    "self",
                    "window"
                ],
                "_apply": [
                    "self",
                    "func",
                    "center",
                    "require_min_periods",
                    "floor",
                    "is_weighted",
                    "name",
                    "use_numba_cache"
                ],
                "aggregate": [
                    "self",
                    "func"
                ]
            },
            "Window": {
                "validate": [
                    "self"
                ],
                "_get_win_type": [
                    "self",
                    "kwargs"
                ],
                "_get_window": [
                    "self",
                    "other",
                    "win_type"
                ],
                "aggregate": [
                    "self",
                    "func"
                ],
                "sum": [
                    "self"
                ],
                "mean": [
                    "self"
                ],
                "var": [
                    "self",
                    "ddof"
                ],
                "std": [
                    "self",
                    "ddof"
                ]
            },
            "_Rolling": {
                "_constructor": [
                    "self"
                ]
            },
            "_Rolling_and_Expanding": {
                "count": [
                    "self"
                ],
                "apply": [
                    "self",
                    "func",
                    "raw",
                    "engine",
                    "engine_kwargs",
                    "args",
                    "kwargs"
                ],
                "_generate_cython_apply_func": [
                    "self",
                    "args",
                    "kwargs",
                    "raw",
                    "offset",
                    "func"
                ],
                "sum": [
                    "self"
                ],
                "max": [
                    "self"
                ],
                "min": [
                    "self"
                ],
                "mean": [
                    "self"
                ],
                "median": [
                    "self"
                ],
                "std": [
                    "self",
                    "ddof"
                ],
                "var": [
                    "self",
                    "ddof"
                ],
                "skew": [
                    "self"
                ],
                "kurt": [
                    "self"
                ],
                "quantile": [
                    "self",
                    "quantile",
                    "interpolation"
                ],
                "cov": [
                    "self",
                    "other",
                    "pairwise",
                    "ddof"
                ],
                "corr": [
                    "self",
                    "other",
                    "pairwise"
                ]
            },
            "Rolling": {
                "is_datetimelike": [
                    "self"
                ],
                "_on": [
                    "self"
                ],
                "validate": [
                    "self"
                ],
                "_validate_monotonic": [
                    "self"
                ],
                "_validate_freq": [
                    "self"
                ],
                "aggregate": [
                    "self",
                    "func"
                ],
                "count": [
                    "self"
                ],
                "apply": [
                    "self",
                    "func",
                    "raw",
                    "engine",
                    "engine_kwargs",
                    "args",
                    "kwargs"
                ],
                "sum": [
                    "self"
                ],
                "max": [
                    "self"
                ],
                "min": [
                    "self"
                ],
                "mean": [
                    "self"
                ],
                "median": [
                    "self"
                ],
                "std": [
                    "self",
                    "ddof"
                ],
                "var": [
                    "self",
                    "ddof"
                ],
                "skew": [
                    "self"
                ],
                "kurt": [
                    "self"
                ],
                "quantile": [
                    "self",
                    "quantile",
                    "interpolation"
                ],
                "cov": [
                    "self",
                    "other",
                    "pairwise",
                    "ddof"
                ],
                "corr": [
                    "self",
                    "other",
                    "pairwise"
                ]
            },
            "RollingGroupby": {
                "_apply": [
                    "self",
                    "func",
                    "center",
                    "require_min_periods",
                    "floor",
                    "is_weighted",
                    "name",
                    "use_numba_cache"
                ],
                "_constructor": [
                    "self"
                ],
                "_create_blocks": [
                    "self",
                    "obj"
                ],
                "_get_cython_func_type": [
                    "self",
                    "func"
                ],
                "_get_window_indexer": [
                    "self",
                    "window"
                ],
                "_gotitem": [
                    "self",
                    "key",
                    "ndim",
                    "subset"
                ],
                "_validate_monotonic": [
                    "self"
                ]
            }
        },
        "pandas.core.window.ewm": {
            "get_center_of_mass": [
                "comass",
                "span",
                "halflife",
                "alpha"
            ],
            "ExponentialMovingWindow": {
                "__init__": [
                    "self",
                    "obj",
                    "com",
                    "span",
                    "halflife",
                    "alpha",
                    "min_periods",
                    "adjust",
                    "ignore_na",
                    "axis",
                    "times"
                ],
                "_constructor": [
                    "self"
                ],
                "aggregate": [
                    "self",
                    "func"
                ],
                "_apply": [
                    "self",
                    "func"
                ],
                "mean": [
                    "self"
                ],
                "std": [
                    "self",
                    "bias"
                ],
                "var": [
                    "self",
                    "bias"
                ],
                "cov": [
                    "self",
                    "other",
                    "pairwise",
                    "bias"
                ],
                "corr": [
                    "self",
                    "other",
                    "pairwise"
                ]
            }
        },
        "pandas.core.window.common": {
            "_dispatch": [
                "name"
            ],
            "_flex_binary_moment": [
                "arg1",
                "arg2",
                "f",
                "pairwise"
            ],
            "zsqrt": [
                "x"
            ],
            "prep_binary": [
                "arg1",
                "arg2"
            ],
            "WindowGroupByMixin": {
                "__init__": [
                    "self",
                    "obj"
                ],
                "_apply": [
                    "self",
                    "func",
                    "center",
                    "require_min_periods",
                    "floor",
                    "is_weighted",
                    "name",
                    "use_numba_cache"
                ]
            }
        },
        "pandas.core.window.indexers": {
            "BaseIndexer": {
                "__init__": [
                    "self",
                    "index_array",
                    "window_size"
                ],
                "get_window_bounds": [
                    "self",
                    "num_values",
                    "min_periods",
                    "center",
                    "closed"
                ]
            },
            "FixedWindowIndexer": {
                "get_window_bounds": [
                    "self",
                    "num_values",
                    "min_periods",
                    "center",
                    "closed"
                ]
            },
            "VariableWindowIndexer": {
                "get_window_bounds": [
                    "self",
                    "num_values",
                    "min_periods",
                    "center",
                    "closed"
                ]
            },
            "VariableOffsetWindowIndexer": {
                "__init__": [
                    "self",
                    "index_array",
                    "window_size",
                    "index",
                    "offset"
                ],
                "get_window_bounds": [
                    "self",
                    "num_values",
                    "min_periods",
                    "center",
                    "closed"
                ]
            },
            "ExpandingIndexer": {
                "get_window_bounds": [
                    "self",
                    "num_values",
                    "min_periods",
                    "center",
                    "closed"
                ]
            },
            "FixedForwardWindowIndexer": {
                "get_window_bounds": [
                    "self",
                    "num_values",
                    "min_periods",
                    "center",
                    "closed"
                ]
            },
            "GroupbyRollingIndexer": {
                "__init__": [
                    "self",
                    "index_array",
                    "window_size",
                    "groupby_indicies",
                    "rolling_indexer",
                    "indexer_kwargs"
                ],
                "get_window_bounds": [
                    "self",
                    "num_values",
                    "min_periods",
                    "center",
                    "closed"
                ]
            }
        },
        "pandas.core.window.numba_": {
            "generate_numba_apply_func": [
                "args",
                "kwargs",
                "func",
                "engine_kwargs"
            ]
        },
        "pandas.core.window": {},
        "pandas.core.sparse.api": {},
        "pandas.core.sparse": {},
        "pandas.core.util.numba_": {
            "maybe_use_numba": [
                "engine"
            ],
            "set_use_numba": [
                "enable"
            ],
            "check_kwargs_and_nopython": [
                "kwargs",
                "nopython"
            ],
            "get_jit_arguments": [
                "engine_kwargs"
            ],
            "jit_user_function": [
                "func",
                "nopython",
                "nogil",
                "parallel"
            ],
            "split_for_numba": [
                "arg"
            ],
            "validate_udf": [
                "func"
            ],
            "generate_numba_func": [
                "func",
                "engine_kwargs",
                "kwargs",
                "cache_key_str"
            ]
        },
        "pandas.core.util.hashing": {
            "_combine_hash_arrays": [
                "arrays",
                "num_items"
            ],
            "hash_pandas_object": [
                "obj",
                "index",
                "encoding",
                "hash_key",
                "categorize"
            ],
            "hash_tuples": [
                "vals",
                "encoding",
                "hash_key"
            ],
            "_hash_categorical": [
                "c",
                "encoding",
                "hash_key"
            ],
            "hash_array": [
                "vals",
                "encoding",
                "hash_key",
                "categorize"
            ]
        },
        "pandas.core.util": {},
        "pandas.core.tools.times": {
            "to_time": [
                "arg",
                "format",
                "infer_time_format",
                "errors"
            ],
            "_guess_time_format_for_array": [
                "arr"
            ]
        },
        "pandas.core.tools.timedeltas": {
            "to_timedelta": [
                "arg",
                "unit",
                "errors"
            ],
            "_coerce_scalar_to_timedelta_type": [
                "r",
                "unit",
                "errors"
            ],
            "_convert_listlike": [
                "arg",
                "unit",
                "errors",
                "name"
            ]
        },
        "pandas.core.tools.datetimes": {
            "_guess_datetime_format_for_array": [
                "arr"
            ],
            "should_cache": [
                "arg",
                "unique_share",
                "check_count"
            ],
            "_maybe_cache": [
                "arg",
                "format",
                "cache",
                "convert_listlike"
            ],
            "_box_as_indexlike": [
                "dt_array",
                "utc",
                "name"
            ],
            "_convert_and_box_cache": [
                "arg",
                "cache_array",
                "name"
            ],
            "_return_parsed_timezone_results": [
                "result",
                "timezones",
                "tz",
                "name"
            ],
            "_convert_listlike_datetimes": [
                "arg",
                "format",
                "name",
                "tz",
                "unit",
                "errors",
                "infer_datetime_format",
                "dayfirst",
                "yearfirst",
                "exact"
            ],
            "_adjust_to_origin": [
                "arg",
                "origin",
                "unit"
            ],
            "to_datetime": [
                "arg",
                "errors",
                "dayfirst",
                "yearfirst",
                "utc",
                "format",
                "exact",
                "unit",
                "infer_datetime_format",
                "origin",
                "cache"
            ],
            "_assemble_from_unit_mappings": [
                "arg",
                "errors",
                "tz"
            ],
            "_attempt_YYYYMMDD": [
                "arg",
                "errors"
            ],
            "to_time": [
                "arg",
                "format",
                "infer_time_format",
                "errors"
            ]
        },
        "pandas.core.tools.numeric": {
            "to_numeric": [
                "arg",
                "errors",
                "downcast"
            ]
        },
        "pandas.core.tools": {},
        "pandas.core.array_algos.masked_reductions": {
            "_sumprod": [
                "func",
                "values",
                "mask",
                "skipna",
                "min_count"
            ],
            "sum": [
                "values",
                "mask",
                "skipna",
                "min_count"
            ],
            "prod": [
                "values",
                "mask",
                "skipna",
                "min_count"
            ],
            "_minmax": [
                "func",
                "values",
                "mask",
                "skipna"
            ],
            "min": [
                "values",
                "mask",
                "skipna"
            ],
            "max": [
                "values",
                "mask",
                "skipna"
            ]
        },
        "pandas.core.array_algos.transforms": {
            "shift": [
                "values",
                "periods",
                "axis",
                "fill_value"
            ]
        },
        "pandas.core.array_algos": {},
        "pandas.core.dtypes.generic": {
            "create_pandas_abc_type": [
                "name",
                "attr",
                "comp"
            ]
        },
        "pandas.core.dtypes.common": {
            "ensure_float": [
                "arr"
            ],
            "ensure_str": [
                "value"
            ],
            "ensure_int_or_float": [
                "arr",
                "copy"
            ],
            "ensure_python_int": [
                "value"
            ],
            "classes": [],
            "classes_and_not_datetimelike": [],
            "is_object_dtype": [
                "arr_or_dtype"
            ],
            "is_sparse": [
                "arr"
            ],
            "is_scipy_sparse": [
                "arr"
            ],
            "is_categorical": [
                "arr"
            ],
            "is_datetime64_dtype": [
                "arr_or_dtype"
            ],
            "is_datetime64tz_dtype": [
                "arr_or_dtype"
            ],
            "is_timedelta64_dtype": [
                "arr_or_dtype"
            ],
            "is_period_dtype": [
                "arr_or_dtype"
            ],
            "is_interval_dtype": [
                "arr_or_dtype"
            ],
            "is_categorical_dtype": [
                "arr_or_dtype"
            ],
            "is_string_dtype": [
                "arr_or_dtype"
            ],
            "is_dtype_equal": [
                "source",
                "target"
            ],
            "is_any_int_dtype": [
                "arr_or_dtype"
            ],
            "is_integer_dtype": [
                "arr_or_dtype"
            ],
            "is_signed_integer_dtype": [
                "arr_or_dtype"
            ],
            "is_unsigned_integer_dtype": [
                "arr_or_dtype"
            ],
            "is_int64_dtype": [
                "arr_or_dtype"
            ],
            "is_datetime64_any_dtype": [
                "arr_or_dtype"
            ],
            "is_datetime64_ns_dtype": [
                "arr_or_dtype"
            ],
            "is_timedelta64_ns_dtype": [
                "arr_or_dtype"
            ],
            "is_datetime_or_timedelta_dtype": [
                "arr_or_dtype"
            ],
            "is_numeric_v_string_like": [
                "a",
                "b"
            ],
            "is_datetimelike_v_numeric": [
                "a",
                "b"
            ],
            "needs_i8_conversion": [
                "arr_or_dtype"
            ],
            "is_numeric_dtype": [
                "arr_or_dtype"
            ],
            "is_string_like_dtype": [
                "arr_or_dtype"
            ],
            "is_float_dtype": [
                "arr_or_dtype"
            ],
            "is_bool_dtype": [
                "arr_or_dtype"
            ],
            "is_extension_type": [
                "arr"
            ],
            "is_extension_array_dtype": [
                "arr_or_dtype"
            ],
            "is_complex_dtype": [
                "arr_or_dtype"
            ],
            "_is_dtype": [
                "arr_or_dtype",
                "condition"
            ],
            "_get_dtype": [
                "arr_or_dtype"
            ],
            "_is_dtype_type": [
                "arr_or_dtype",
                "condition"
            ],
            "infer_dtype_from_object": [
                "dtype"
            ],
            "_validate_date_like_dtype": [
                "dtype"
            ],
            "pandas_dtype": [
                "dtype"
            ]
        },
        "pandas.core.dtypes.inference": {
            "is_number": [
                "obj"
            ],
            "_iterable_not_string": [
                "obj"
            ],
            "is_file_like": [
                "obj"
            ],
            "is_re": [
                "obj"
            ],
            "is_re_compilable": [
                "obj"
            ],
            "is_array_like": [
                "obj"
            ],
            "is_nested_list_like": [
                "obj"
            ],
            "is_dict_like": [
                "obj"
            ],
            "is_named_tuple": [
                "obj"
            ],
            "is_hashable": [
                "obj"
            ],
            "is_sequence": [
                "obj"
            ],
            "is_dataclass": [
                "item"
            ]
        },
        "pandas.core.dtypes.concat": {
            "get_dtype_kinds": [
                "l"
            ],
            "_cast_to_common_type": [
                "arr",
                "dtype"
            ],
            "concat_compat": [
                "to_concat",
                "axis"
            ],
            "union_categoricals": [
                "to_union",
                "sort_categories",
                "ignore_order"
            ],
            "_concatenate_2d": [
                "to_concat",
                "axis"
            ],
            "concat_datetime": [
                "to_concat",
                "axis",
                "typs"
            ],
            "_wrap_datetimelike": [
                "arr"
            ]
        },
        "pandas.core.dtypes.dtypes": {
            "PandasExtensionDtype": {
                "__str__": [
                    "self"
                ],
                "__repr__": [
                    "self"
                ],
                "__hash__": [
                    "self"
                ],
                "__getstate__": [
                    "self"
                ],
                "reset_cache": [
                    "cls"
                ]
            },
            "CategoricalDtypeType": {},
            "CategoricalDtype": {
                "__init__": [
                    "self",
                    "categories",
                    "ordered"
                ],
                "_from_fastpath": [
                    "cls",
                    "categories",
                    "ordered"
                ],
                "_from_categorical_dtype": [
                    "cls",
                    "dtype",
                    "categories",
                    "ordered"
                ],
                "_from_values_or_dtype": [
                    "cls",
                    "values",
                    "categories",
                    "ordered",
                    "dtype"
                ],
                "construct_from_string": [
                    "cls",
                    "string"
                ],
                "_finalize": [
                    "self",
                    "categories",
                    "ordered",
                    "fastpath"
                ],
                "__setstate__": [
                    "self",
                    "state"
                ],
                "__hash__": [
                    "self"
                ],
                "__eq__": [
                    "self",
                    "other"
                ],
                "__repr__": [
                    "self"
                ],
                "_hash_categories": [
                    "categories",
                    "ordered"
                ],
                "construct_array_type": [
                    "cls"
                ],
                "validate_ordered": [
                    "ordered"
                ],
                "validate_categories": [
                    "categories",
                    "fastpath"
                ],
                "update_dtype": [
                    "self",
                    "dtype"
                ],
                "categories": [
                    "self"
                ],
                "ordered": [
                    "self"
                ],
                "_is_boolean": [
                    "self"
                ],
                "_get_common_dtype": [
                    "self",
                    "dtypes"
                ]
            },
            "DatetimeTZDtype": {
                "__init__": [
                    "self",
                    "unit",
                    "tz"
                ],
                "unit": [
                    "self"
                ],
                "tz": [
                    "self"
                ],
                "construct_array_type": [
                    "cls"
                ],
                "construct_from_string": [
                    "cls",
                    "string"
                ],
                "__str__": [
                    "self"
                ],
                "name": [
                    "self"
                ],
                "__hash__": [
                    "self"
                ],
                "__eq__": [
                    "self",
                    "other"
                ],
                "__setstate__": [
                    "self",
                    "state"
                ]
            },
            "PeriodDtype": {
                "__new__": [
                    "cls",
                    "freq"
                ],
                "__reduce__": [
                    "self"
                ],
                "freq": [
                    "self"
                ],
                "_parse_dtype_strict": [
                    "cls",
                    "freq"
                ],
                "construct_from_string": [
                    "cls",
                    "string"
                ],
                "__str__": [
                    "self"
                ],
                "name": [
                    "self"
                ],
                "na_value": [
                    "self"
                ],
                "__hash__": [
                    "self"
                ],
                "__eq__": [
                    "self",
                    "other"
                ],
                "__setstate__": [
                    "self",
                    "state"
                ],
                "is_dtype": [
                    "cls",
                    "dtype"
                ],
                "construct_array_type": [
                    "cls"
                ],
                "__from_arrow__": [
                    "self",
                    "array"
                ]
            },
            "IntervalDtype": {
                "__new__": [
                    "cls",
                    "subtype"
                ],
                "subtype": [
                    "self"
                ],
                "construct_array_type": [
                    "cls"
                ],
                "construct_from_string": [
                    "cls",
                    "string"
                ],
                "type": [
                    "self"
                ],
                "__str__": [
                    "self"
                ],
                "__hash__": [
                    "self"
                ],
                "__eq__": [
                    "self",
                    "other"
                ],
                "__setstate__": [
                    "self",
                    "state"
                ],
                "is_dtype": [
                    "cls",
                    "dtype"
                ],
                "__from_arrow__": [
                    "self",
                    "array"
                ]
            }
        },
        "pandas.core.dtypes.cast": {
            "maybe_convert_platform": [
                "values"
            ],
            "is_nested_object": [
                "obj"
            ],
            "maybe_downcast_to_dtype": [
                "result",
                "dtype"
            ],
            "maybe_downcast_numeric": [
                "result",
                "dtype",
                "do_round"
            ],
            "maybe_cast_result": [
                "result",
                "obj",
                "numeric_only",
                "how"
            ],
            "maybe_cast_result_dtype": [
                "dtype",
                "how"
            ],
            "maybe_cast_to_extension_array": [
                "cls",
                "obj",
                "dtype"
            ],
            "maybe_upcast_putmask": [
                "result",
                "mask",
                "other"
            ],
            "maybe_promote": [
                "dtype",
                "fill_value"
            ],
            "_ensure_dtype_type": [
                "value",
                "dtype"
            ],
            "infer_dtype_from": [
                "val",
                "pandas_dtype"
            ],
            "infer_dtype_from_scalar": [
                "val",
                "pandas_dtype"
            ],
            "infer_dtype_from_array": [
                "arr",
                "pandas_dtype"
            ],
            "maybe_infer_dtype_type": [
                "element"
            ],
            "maybe_upcast": [
                "values",
                "fill_value",
                "dtype",
                "copy"
            ],
            "invalidate_string_dtypes": [
                "dtype_set"
            ],
            "coerce_indexer_dtype": [
                "indexer",
                "categories"
            ],
            "coerce_to_dtypes": [
                "result",
                "dtypes"
            ],
            "astype_nansafe": [
                "arr",
                "dtype",
                "copy",
                "skipna"
            ],
            "maybe_convert_objects": [
                "values",
                "convert_numeric"
            ],
            "soft_convert_objects": [
                "values",
                "datetime",
                "numeric",
                "timedelta",
                "coerce",
                "copy"
            ],
            "convert_dtypes": [
                "input_array",
                "convert_string",
                "convert_integer",
                "convert_boolean"
            ],
            "maybe_castable": [
                "arr"
            ],
            "maybe_infer_to_datetimelike": [
                "value",
                "convert_dates"
            ],
            "maybe_cast_to_datetime": [
                "value",
                "dtype",
                "errors"
            ],
            "find_common_type": [
                "types"
            ],
            "cast_scalar_to_array": [
                "shape",
                "value",
                "dtype"
            ],
            "construct_1d_arraylike_from_scalar": [
                "value",
                "length",
                "dtype"
            ],
            "construct_1d_object_array_from_listlike": [
                "values"
            ],
            "construct_1d_ndarray_preserving_na": [
                "values",
                "dtype",
                "copy"
            ],
            "maybe_cast_to_integer_array": [
                "arr",
                "dtype",
                "copy"
            ],
            "convert_scalar_for_putitemlike": [
                "scalar",
                "dtype"
            ],
            "validate_numeric_casting": [
                "dtype",
                "value"
            ]
        },
        "pandas.core.dtypes.base": {
            "register_extension_dtype": [
                "cls"
            ],
            "ExtensionDtype": {
                "__str__": [
                    "self"
                ],
                "__eq__": [
                    "self",
                    "other"
                ],
                "__hash__": [
                    "self"
                ],
                "__ne__": [
                    "self",
                    "other"
                ],
                "na_value": [
                    "self"
                ],
                "type": [
                    "self"
                ],
                "kind": [
                    "self"
                ],
                "name": [
                    "self"
                ],
                "names": [
                    "self"
                ],
                "construct_array_type": [
                    "cls"
                ],
                "construct_from_string": [
                    "cls",
                    "string"
                ],
                "is_dtype": [
                    "cls",
                    "dtype"
                ],
                "_is_numeric": [
                    "self"
                ],
                "_is_boolean": [
                    "self"
                ],
                "_get_common_dtype": [
                    "self",
                    "dtypes"
                ]
            },
            "Registry": {
                "__init__": [
                    "self"
                ],
                "register": [
                    "self",
                    "dtype"
                ],
                "find": [
                    "self",
                    "dtype"
                ]
            }
        },
        "pandas.core.dtypes.api": {},
        "pandas.core.dtypes.missing": {
            "isna": [
                "obj"
            ],
            "_isna": [
                "obj",
                "inf_as_na"
            ],
            "_use_inf_as_na": [
                "key"
            ],
            "_isna_ndarraylike": [
                "obj",
                "inf_as_na"
            ],
            "_isna_string_dtype": [
                "values",
                "dtype",
                "inf_as_na"
            ],
            "notna": [
                "obj"
            ],
            "_isna_compat": [
                "arr",
                "fill_value"
            ],
            "array_equivalent": [
                "left",
                "right",
                "strict_nan",
                "dtype_equal"
            ],
            "_array_equivalent_float": [
                "left",
                "right"
            ],
            "_array_equivalent_datetimelike": [
                "left",
                "right"
            ],
            "_array_equivalent_object": [
                "left",
                "right",
                "strict_nan"
            ],
            "_infer_fill_value": [
                "val"
            ],
            "_maybe_fill": [
                "arr",
                "fill_value"
            ],
            "na_value_for_dtype": [
                "dtype",
                "compat"
            ],
            "remove_na_arraylike": [
                "arr"
            ],
            "is_valid_nat_for_dtype": [
                "obj",
                "dtype"
            ]
        },
        "pandas.core.dtypes": {},
        "pandas.core.indexes.extension": {
            "inherit_from_data": [
                "name",
                "delegate",
                "cache",
                "wrap"
            ],
            "inherit_names": [
                "names",
                "delegate",
                "cache",
                "wrap"
            ],
            "_make_wrapped_comparison_op": [
                "opname"
            ],
            "make_wrapped_arith_op": [
                "opname"
            ],
            "_wrap_arithmetic_op": [
                "self",
                "other",
                "result"
            ],
            "_maybe_unwrap_index": [
                "obj"
            ],
            "ExtensionIndex": {
                "__getitem__": [
                    "self",
                    "key"
                ],
                "_get_engine_target": [
                    "self"
                ],
                "repeat": [
                    "self",
                    "repeats",
                    "axis"
                ],
                "insert": [
                    "self",
                    "loc",
                    "item"
                ],
                "_get_unique_index": [
                    "self",
                    "dropna"
                ],
                "map": [
                    "self",
                    "mapper",
                    "na_action"
                ],
                "astype": [
                    "self",
                    "dtype",
                    "copy"
                ]
            }
        },
        "pandas.core.indexes.category": {
            "CategoricalIndex": {
                "_engine_type": [
                    "self"
                ],
                "__new__": [
                    "cls",
                    "data",
                    "categories",
                    "ordered",
                    "dtype",
                    "copy",
                    "name"
                ],
                "_create_from_codes": [
                    "self",
                    "codes",
                    "dtype",
                    "name"
                ],
                "_simple_new": [
                    "cls",
                    "values",
                    "name"
                ],
                "_shallow_copy": [
                    "self",
                    "values",
                    "name"
                ],
                "_is_dtype_compat": [
                    "self",
                    "other"
                ],
                "equals": [
                    "self",
                    "other"
                ],
                "_formatter_func": [
                    "self"
                ],
                "_format_attrs": [
                    "self"
                ],
                "_format_with_header": [
                    "self",
                    "header",
                    "na_rep"
                ],
                "inferred_type": [
                    "self"
                ],
                "values": [
                    "self"
                ],
                "_has_complex_internals": [
                    "self"
                ],
                "__contains__": [
                    "self",
                    "key"
                ],
                "astype": [
                    "self",
                    "dtype",
                    "copy"
                ],
                "_isnan": [
                    "self"
                ],
                "fillna": [
                    "self",
                    "value",
                    "downcast"
                ],
                "_engine": [
                    "self"
                ],
                "unique": [
                    "self",
                    "level"
                ],
                "duplicated": [
                    "self",
                    "keep"
                ],
                "_to_safe_for_reshape": [
                    "self"
                ],
                "_maybe_cast_indexer": [
                    "self",
                    "key"
                ],
                "where": [
                    "self",
                    "cond",
                    "other"
                ],
                "reindex": [
                    "self",
                    "target",
                    "method",
                    "level",
                    "limit",
                    "tolerance"
                ],
                "_reindex_non_unique": [
                    "self",
                    "target"
                ],
                "get_indexer": [
                    "self",
                    "target",
                    "method",
                    "limit",
                    "tolerance"
                ],
                "get_indexer_non_unique": [
                    "self",
                    "target"
                ],
                "_convert_list_indexer": [
                    "self",
                    "keyarr"
                ],
                "_convert_arr_indexer": [
                    "self",
                    "keyarr"
                ],
                "_convert_index_indexer": [
                    "self",
                    "keyarr"
                ],
                "take_nd": [
                    "self"
                ],
                "_maybe_cast_slice_bound": [
                    "self",
                    "label",
                    "side",
                    "kind"
                ],
                "map": [
                    "self",
                    "mapper"
                ],
                "delete": [
                    "self",
                    "loc"
                ],
                "insert": [
                    "self",
                    "loc",
                    "item"
                ],
                "_concat": [
                    "self",
                    "to_concat",
                    "name"
                ],
                "_delegate_method": [
                    "self",
                    "name"
                ],
                "_wrap_joined_index": [
                    "self",
                    "joined",
                    "other"
                ]
            }
        },
        "pandas.core.indexes.interval": {
            "_get_next_label": [
                "label"
            ],
            "_get_prev_label": [
                "label"
            ],
            "_new_IntervalIndex": [
                "cls",
                "d"
            ],
            "_is_valid_endpoint": [
                "endpoint"
            ],
            "_is_type_compatible": [
                "a",
                "b"
            ],
            "interval_range": [
                "start",
                "end",
                "periods",
                "freq",
                "name",
                "closed"
            ],
            "SetopCheck": {
                "__init__": [
                    "self",
                    "op_name"
                ],
                "__call__": [
                    "self",
                    "setop"
                ]
            },
            "IntervalIndex": {
                "__new__": [
                    "cls",
                    "data",
                    "closed",
                    "dtype",
                    "copy",
                    "name",
                    "verify_integrity"
                ],
                "_simple_new": [
                    "cls",
                    "array",
                    "name"
                ],
                "from_breaks": [
                    "cls",
                    "breaks",
                    "closed",
                    "name",
                    "copy",
                    "dtype"
                ],
                "from_arrays": [
                    "cls",
                    "left",
                    "right",
                    "closed",
                    "name",
                    "copy",
                    "dtype"
                ],
                "from_tuples": [
                    "cls",
                    "data",
                    "closed",
                    "name",
                    "copy",
                    "dtype"
                ],
                "_shallow_copy": [
                    "self",
                    "values",
                    "name"
                ],
                "_isnan": [
                    "self"
                ],
                "_engine": [
                    "self"
                ],
                "__contains__": [
                    "self",
                    "key"
                ],
                "_multiindex": [
                    "self"
                ],
                "values": [
                    "self"
                ],
                "_has_complex_internals": [
                    "self"
                ],
                "__array_wrap__": [
                    "self",
                    "result",
                    "context"
                ],
                "__reduce__": [
                    "self"
                ],
                "astype": [
                    "self",
                    "dtype",
                    "copy"
                ],
                "inferred_type": [
                    "self"
                ],
                "memory_usage": [
                    "self",
                    "deep"
                ],
                "is_monotonic_decreasing": [
                    "self"
                ],
                "is_unique": [
                    "self"
                ],
                "is_overlapping": [
                    "self"
                ],
                "_should_fallback_to_positional": [
                    "self"
                ],
                "_maybe_cast_slice_bound": [
                    "self",
                    "label",
                    "side",
                    "kind"
                ],
                "_convert_list_indexer": [
                    "self",
                    "keyarr"
                ],
                "_can_reindex": [
                    "self",
                    "indexer"
                ],
                "_needs_i8_conversion": [
                    "self",
                    "key"
                ],
                "_maybe_convert_i8": [
                    "self",
                    "key"
                ],
                "_check_method": [
                    "self",
                    "method"
                ],
                "_searchsorted_monotonic": [
                    "self",
                    "label",
                    "side",
                    "exclude_label"
                ],
                "get_loc": [
                    "self",
                    "key",
                    "method",
                    "tolerance"
                ],
                "get_indexer": [
                    "self",
                    "target",
                    "method",
                    "limit",
                    "tolerance"
                ],
                "get_indexer_non_unique": [
                    "self",
                    "target"
                ],
                "get_indexer_for": [
                    "self",
                    "target"
                ],
                "_convert_slice_indexer": [
                    "self",
                    "key",
                    "kind"
                ],
                "where": [
                    "self",
                    "cond",
                    "other"
                ],
                "delete": [
                    "self",
                    "loc"
                ],
                "insert": [
                    "self",
                    "loc",
                    "item"
                ],
                "take": [
                    "self",
                    "indices",
                    "axis",
                    "allow_fill",
                    "fill_value"
                ],
                "_format_with_header": [
                    "self",
                    "header",
                    "na_rep"
                ],
                "_format_native_types": [
                    "self",
                    "na_rep",
                    "quoting"
                ],
                "_format_data": [
                    "self",
                    "name"
                ],
                "_format_attrs": [
                    "self"
                ],
                "_format_space": [
                    "self"
                ],
                "argsort": [
                    "self"
                ],
                "equals": [
                    "self",
                    "other"
                ],
                "intersection": [
                    "self",
                    "other",
                    "sort"
                ],
                "_intersection_unique": [
                    "self",
                    "other"
                ],
                "_intersection_non_unique": [
                    "self",
                    "other"
                ],
                "_setop": [
                    "op_name",
                    "sort"
                ],
                "is_all_dates": [
                    "self"
                ],
                "__lt__": [
                    "self",
                    "other"
                ],
                "__le__": [
                    "self",
                    "other"
                ],
                "__gt__": [
                    "self",
                    "other"
                ],
                "__ge__": [
                    "self",
                    "other"
                ]
            }
        },
        "pandas.core.indexes.accessors": {
            "Properties": {
                "__init__": [
                    "self",
                    "data",
                    "orig"
                ],
                "_get_values": [
                    "self"
                ],
                "_delegate_property_get": [
                    "self",
                    "name"
                ],
                "_delegate_property_set": [
                    "self",
                    "name",
                    "value"
                ],
                "_delegate_method": [
                    "self",
                    "name"
                ]
            },
            "DatetimeProperties": {
                "to_pydatetime": [
                    "self"
                ],
                "freq": [
                    "self"
                ],
                "isocalendar": [
                    "self"
                ],
                "weekofyear": [
                    "self"
                ]
            },
            "TimedeltaProperties": {
                "to_pytimedelta": [
                    "self"
                ],
                "components": [
                    "self"
                ],
                "freq": [
                    "self"
                ]
            },
            "PeriodProperties": {},
            "CombinedDatetimelikeProperties": {
                "__new__": [
                    "cls",
                    "data"
                ]
            }
        },
        "pandas.core.indexes.multi": {
            "_sparsify": [
                "label_list",
                "start",
                "sentinel"
            ],
            "_get_na_rep": [
                "dtype"
            ],
            "maybe_droplevels": [
                "index",
                "key"
            ],
            "_coerce_indexer_frozen": [
                "array_like",
                "categories",
                "copy"
            ],
            "MultiIndexUIntEngine": {
                "_codes_to_ints": [
                    "self",
                    "codes"
                ]
            },
            "MultiIndexPyIntEngine": {
                "_codes_to_ints": [
                    "self",
                    "codes"
                ]
            },
            "MultiIndex": {
                "__new__": [
                    "cls",
                    "levels",
                    "codes",
                    "sortorder",
                    "names",
                    "dtype",
                    "copy",
                    "name",
                    "verify_integrity",
                    "_set_identity"
                ],
                "_validate_codes": [
                    "self",
                    "level",
                    "code"
                ],
                "_verify_integrity": [
                    "self",
                    "codes",
                    "levels"
                ],
                "from_arrays": [
                    "cls",
                    "arrays",
                    "sortorder",
                    "names"
                ],
                "from_tuples": [
                    "cls",
                    "tuples",
                    "sortorder",
                    "names"
                ],
                "from_product": [
                    "cls",
                    "iterables",
                    "sortorder",
                    "names"
                ],
                "from_frame": [
                    "cls",
                    "df",
                    "sortorder",
                    "names"
                ],
                "_values": [
                    "self"
                ],
                "values": [
                    "self"
                ],
                "array": [
                    "self"
                ],
                "shape": [
                    "self"
                ],
                "__len__": [
                    "self"
                ],
                "levels": [
                    "self"
                ],
                "_set_levels": [
                    "self",
                    "levels",
                    "level",
                    "copy",
                    "validate",
                    "verify_integrity"
                ],
                "set_levels": [
                    "self",
                    "levels",
                    "level",
                    "inplace",
                    "verify_integrity"
                ],
                "nlevels": [
                    "self"
                ],
                "levshape": [
                    "self"
                ],
                "codes": [
                    "self"
                ],
                "_set_codes": [
                    "self",
                    "codes",
                    "level",
                    "copy",
                    "validate",
                    "verify_integrity"
                ],
                "set_codes": [
                    "self",
                    "codes",
                    "level",
                    "inplace",
                    "verify_integrity"
                ],
                "_engine": [
                    "self"
                ],
                "_constructor": [
                    "self"
                ],
                "_shallow_copy": [
                    "self",
                    "values",
                    "name",
                    "levels",
                    "codes",
                    "dtype",
                    "sortorder",
                    "names",
                    "_set_identity"
                ],
                "symmetric_difference": [
                    "self",
                    "other",
                    "result_name",
                    "sort"
                ],
                "copy": [
                    "self",
                    "names",
                    "dtype",
                    "levels",
                    "codes",
                    "deep",
                    "name",
                    "_set_identity"
                ],
                "__array__": [
                    "self",
                    "dtype"
                ],
                "view": [
                    "self",
                    "cls"
                ],
                "__contains__": [
                    "self",
                    "key"
                ],
                "dtype": [
                    "self"
                ],
                "_is_memory_usage_qualified": [
                    "self"
                ],
                "memory_usage": [
                    "self",
                    "deep"
                ],
                "nbytes": [
                    "self"
                ],
                "_nbytes": [
                    "self",
                    "deep"
                ],
                "_formatter_func": [
                    "self",
                    "tup"
                ],
                "_format_data": [
                    "self",
                    "name"
                ],
                "_format_attrs": [
                    "self"
                ],
                "_format_native_types": [
                    "self",
                    "na_rep"
                ],
                "format": [
                    "self",
                    "name",
                    "formatter",
                    "na_rep",
                    "names",
                    "space",
                    "sparsify",
                    "adjoin"
                ],
                "_get_names": [
                    "self"
                ],
                "_set_names": [
                    "self",
                    "names",
                    "level",
                    "validate"
                ],
                "_get_grouper_for_level": [
                    "self",
                    "mapper",
                    "level"
                ],
                "inferred_type": [
                    "self"
                ],
                "_get_level_number": [
                    "self",
                    "level"
                ],
                "_has_complex_internals": [
                    "self"
                ],
                "is_monotonic_increasing": [
                    "self"
                ],
                "is_monotonic_decreasing": [
                    "self"
                ],
                "_inferred_type_levels": [
                    "self"
                ],
                "duplicated": [
                    "self",
                    "keep"
                ],
                "fillna": [
                    "self",
                    "value",
                    "downcast"
                ],
                "dropna": [
                    "self",
                    "how"
                ],
                "_get_level_values": [
                    "self",
                    "level",
                    "unique"
                ],
                "get_level_values": [
                    "self",
                    "level"
                ],
                "unique": [
                    "self",
                    "level"
                ],
                "_to_safe_for_reshape": [
                    "self"
                ],
                "to_frame": [
                    "self",
                    "index",
                    "name"
                ],
                "to_flat_index": [
                    "self"
                ],
                "is_all_dates": [
                    "self"
                ],
                "is_lexsorted": [
                    "self"
                ],
                "lexsort_depth": [
                    "self"
                ],
                "_lexsort_depth": [
                    "self"
                ],
                "_sort_levels_monotonic": [
                    "self"
                ],
                "remove_unused_levels": [
                    "self"
                ],
                "__reduce__": [
                    "self"
                ],
                "__getitem__": [
                    "self",
                    "key"
                ],
                "take": [
                    "self",
                    "indices",
                    "axis",
                    "allow_fill",
                    "fill_value"
                ],
                "_assert_take_fillable": [
                    "self",
                    "values",
                    "indices",
                    "allow_fill",
                    "fill_value",
                    "na_value"
                ],
                "append": [
                    "self",
                    "other"
                ],
                "argsort": [
                    "self"
                ],
                "repeat": [
                    "self",
                    "repeats",
                    "axis"
                ],
                "where": [
                    "self",
                    "cond",
                    "other"
                ],
                "drop": [
                    "self",
                    "codes",
                    "level",
                    "errors"
                ],
                "_drop_from_level": [
                    "self",
                    "codes",
                    "level",
                    "errors"
                ],
                "swaplevel": [
                    "self",
                    "i",
                    "j"
                ],
                "reorder_levels": [
                    "self",
                    "order"
                ],
                "_get_codes_for_sorting": [
                    "self"
                ],
                "sortlevel": [
                    "self",
                    "level",
                    "ascending",
                    "sort_remaining"
                ],
                "reindex": [
                    "self",
                    "target",
                    "method",
                    "level",
                    "limit",
                    "tolerance"
                ],
                "_check_indexing_error": [
                    "self",
                    "key"
                ],
                "_should_fallback_to_positional": [
                    "self"
                ],
                "_get_values_for_loc": [
                    "self",
                    "series",
                    "loc",
                    "key"
                ],
                "_convert_listlike_indexer": [
                    "self",
                    "keyarr"
                ],
                "_get_partial_string_timestamp_match_key": [
                    "self",
                    "key"
                ],
                "get_indexer": [
                    "self",
                    "target",
                    "method",
                    "limit",
                    "tolerance"
                ],
                "get_indexer_non_unique": [
                    "self",
                    "target"
                ],
                "get_slice_bound": [
                    "self",
                    "label",
                    "side",
                    "kind"
                ],
                "slice_locs": [
                    "self",
                    "start",
                    "end",
                    "step",
                    "kind"
                ],
                "_partial_tup_index": [
                    "self",
                    "tup",
                    "side"
                ],
                "_get_loc_single_level_index": [
                    "self",
                    "level_index",
                    "key"
                ],
                "get_loc": [
                    "self",
                    "key",
                    "method"
                ],
                "get_loc_level": [
                    "self",
                    "key",
                    "level",
                    "drop_level"
                ],
                "_get_level_indexer": [
                    "self",
                    "key",
                    "level",
                    "indexer"
                ],
                "get_locs": [
                    "self",
                    "seq"
                ],
                "_reorder_indexer": [
                    "self",
                    "seq",
                    "indexer"
                ],
                "truncate": [
                    "self",
                    "before",
                    "after"
                ],
                "equals": [
                    "self",
                    "other"
                ],
                "equal_levels": [
                    "self",
                    "other"
                ],
                "union": [
                    "self",
                    "other",
                    "sort"
                ],
                "intersection": [
                    "self",
                    "other",
                    "sort"
                ],
                "difference": [
                    "self",
                    "other",
                    "sort"
                ],
                "_convert_can_do_setop": [
                    "self",
                    "other"
                ],
                "astype": [
                    "self",
                    "dtype",
                    "copy"
                ],
                "insert": [
                    "self",
                    "loc",
                    "item"
                ],
                "delete": [
                    "self",
                    "loc"
                ],
                "_wrap_joined_index": [
                    "self",
                    "joined",
                    "other"
                ],
                "isin": [
                    "self",
                    "values",
                    "level"
                ]
            }
        },
        "pandas.core.indexes.datetimelike": {
            "_join_i8_wrapper": [
                "joinf",
                "with_indexers"
            ],
            "DatetimeIndexOpsMixin": {
                "is_all_dates": [
                    "self"
                ],
                "values": [
                    "self"
                ],
                "__array_wrap__": [
                    "self",
                    "result",
                    "context"
                ],
                "equals": [
                    "self",
                    "other"
                ],
                "__contains__": [
                    "self",
                    "key"
                ],
                "sort_values": [
                    "self",
                    "return_indexer",
                    "ascending",
                    "key"
                ],
                "take": [
                    "self",
                    "indices",
                    "axis",
                    "allow_fill",
                    "fill_value"
                ],
                "searchsorted": [
                    "self",
                    "value",
                    "side",
                    "sorter"
                ],
                "_convert_tolerance": [
                    "self",
                    "tolerance",
                    "target"
                ],
                "tolist": [
                    "self"
                ],
                "min": [
                    "self",
                    "axis",
                    "skipna"
                ],
                "argmin": [
                    "self",
                    "axis",
                    "skipna"
                ],
                "max": [
                    "self",
                    "axis",
                    "skipna"
                ],
                "argmax": [
                    "self",
                    "axis",
                    "skipna"
                ],
                "format": [
                    "self",
                    "name",
                    "formatter",
                    "na_rep",
                    "date_format"
                ],
                "_format_with_header": [
                    "self",
                    "header",
                    "na_rep",
                    "date_format"
                ],
                "_formatter_func": [
                    "self"
                ],
                "_format_attrs": [
                    "self"
                ],
                "_validate_partial_date_slice": [
                    "self",
                    "reso"
                ],
                "_parsed_string_to_bounds": [
                    "self",
                    "reso",
                    "parsed"
                ],
                "_partial_date_slice": [
                    "self",
                    "reso",
                    "parsed",
                    "use_lhs",
                    "use_rhs"
                ],
                "isin": [
                    "self",
                    "values",
                    "level"
                ],
                "where": [
                    "self",
                    "cond",
                    "other"
                ],
                "_summary": [
                    "self",
                    "name"
                ],
                "shift": [
                    "self",
                    "periods",
                    "freq"
                ],
                "delete": [
                    "self",
                    "loc"
                ],
                "_wrap_joined_index": [
                    "self",
                    "joined",
                    "other"
                ],
                "_convert_arr_indexer": [
                    "self",
                    "keyarr"
                ]
            },
            "DatetimeTimedeltaMixin": {
                "_with_freq": [
                    "self",
                    "freq"
                ],
                "_shallow_copy": [
                    "self",
                    "values",
                    "name"
                ],
                "difference": [
                    "self",
                    "other",
                    "sort"
                ],
                "intersection": [
                    "self",
                    "other",
                    "sort"
                ],
                "_can_fast_intersect": [
                    "self",
                    "other"
                ],
                "_can_fast_union": [
                    "self",
                    "other"
                ],
                "_fast_union": [
                    "self",
                    "other",
                    "sort"
                ],
                "_union": [
                    "self",
                    "other",
                    "sort"
                ],
                "join": [
                    "self",
                    "other",
                    "how",
                    "level",
                    "return_indexers",
                    "sort"
                ],
                "_maybe_utc_convert": [
                    "self",
                    "other"
                ],
                "_is_convertible_to_index_for_join": [
                    "cls",
                    "other"
                ],
                "insert": [
                    "self",
                    "loc",
                    "item"
                ]
            }
        },
        "pandas.core.indexes.timedeltas": {
            "timedelta_range": [
                "start",
                "end",
                "periods",
                "freq",
                "name",
                "closed"
            ],
            "TimedeltaIndex": {
                "__new__": [
                    "cls",
                    "data",
                    "unit",
                    "freq",
                    "closed",
                    "dtype",
                    "copy",
                    "name"
                ],
                "_simple_new": [
                    "cls",
                    "values",
                    "name"
                ],
                "_formatter_func": [
                    "self"
                ],
                "astype": [
                    "self",
                    "dtype",
                    "copy"
                ],
                "_is_comparable_dtype": [
                    "self",
                    "dtype"
                ],
                "get_loc": [
                    "self",
                    "key",
                    "method",
                    "tolerance"
                ],
                "_maybe_cast_slice_bound": [
                    "self",
                    "label",
                    "side",
                    "kind"
                ],
                "is_type_compatible": [
                    "self",
                    "typ"
                ],
                "inferred_type": [
                    "self"
                ]
            }
        },
        "pandas.core.indexes.frozen": {
            "FrozenList": {
                "union": [
                    "self",
                    "other"
                ],
                "difference": [
                    "self",
                    "other"
                ],
                "__getitem__": [
                    "self",
                    "n"
                ],
                "__radd__": [
                    "self",
                    "other"
                ],
                "__eq__": [
                    "self",
                    "other"
                ],
                "__mul__": [
                    "self",
                    "other"
                ],
                "__reduce__": [
                    "self"
                ],
                "__hash__": [
                    "self"
                ],
                "_disabled": [
                    "self"
                ],
                "__str__": [
                    "self"
                ],
                "__repr__": [
                    "self"
                ]
            }
        },
        "pandas.core.indexes.period": {
            "_new_PeriodIndex": [
                "cls"
            ],
            "period_range": [
                "start",
                "end",
                "periods",
                "freq",
                "name"
            ],
            "PeriodIndex": {
                "asfreq": [
                    "self",
                    "freq",
                    "how"
                ],
                "__new__": [
                    "cls",
                    "data",
                    "ordinal",
                    "freq",
                    "tz",
                    "dtype",
                    "copy",
                    "name"
                ],
                "_simple_new": [
                    "cls",
                    "values",
                    "name"
                ],
                "values": [
                    "self"
                ],
                "_has_complex_internals": [
                    "self"
                ],
                "_shallow_copy": [
                    "self",
                    "values",
                    "name"
                ],
                "_maybe_convert_timedelta": [
                    "self",
                    "other"
                ],
                "_is_comparable_dtype": [
                    "self",
                    "dtype"
                ],
                "_mpl_repr": [
                    "self"
                ],
                "_formatter_func": [
                    "self"
                ],
                "__contains__": [
                    "self",
                    "key"
                ],
                "_int64index": [
                    "self"
                ],
                "__array_wrap__": [
                    "self",
                    "result",
                    "context"
                ],
                "asof_locs": [
                    "self",
                    "where",
                    "mask"
                ],
                "astype": [
                    "self",
                    "dtype",
                    "copy",
                    "how"
                ],
                "is_full": [
                    "self"
                ],
                "inferred_type": [
                    "self"
                ],
                "get_indexer": [
                    "self",
                    "target",
                    "method",
                    "limit",
                    "tolerance"
                ],
                "get_indexer_non_unique": [
                    "self",
                    "target"
                ],
                "get_loc": [
                    "self",
                    "key",
                    "method",
                    "tolerance"
                ],
                "_maybe_cast_slice_bound": [
                    "self",
                    "label",
                    "side",
                    "kind"
                ],
                "_parsed_string_to_bounds": [
                    "self",
                    "reso",
                    "parsed"
                ],
                "_validate_partial_date_slice": [
                    "self",
                    "reso"
                ],
                "_get_string_slice": [
                    "self",
                    "key",
                    "use_lhs",
                    "use_rhs"
                ],
                "insert": [
                    "self",
                    "loc",
                    "item"
                ],
                "join": [
                    "self",
                    "other",
                    "how",
                    "level",
                    "return_indexers",
                    "sort"
                ],
                "_assert_can_do_setop": [
                    "self",
                    "other"
                ],
                "_setop": [
                    "self",
                    "other",
                    "sort",
                    "opname"
                ],
                "intersection": [
                    "self",
                    "other",
                    "sort"
                ],
                "difference": [
                    "self",
                    "other",
                    "sort"
                ],
                "_union": [
                    "self",
                    "other",
                    "sort"
                ],
                "memory_usage": [
                    "self",
                    "deep"
                ]
            }
        },
        "pandas.core.indexes.range": {
            "RangeIndex": {
                "__new__": [
                    "cls",
                    "start",
                    "stop",
                    "step",
                    "dtype",
                    "copy",
                    "name"
                ],
                "from_range": [
                    "cls",
                    "data",
                    "name",
                    "dtype"
                ],
                "_simple_new": [
                    "cls",
                    "values",
                    "name"
                ],
                "_constructor": [
                    "self"
                ],
                "_data": [
                    "self"
                ],
                "_int64index": [
                    "self"
                ],
                "_get_data_as_items": [
                    "self"
                ],
                "__reduce__": [
                    "self"
                ],
                "_format_attrs": [
                    "self"
                ],
                "_format_data": [
                    "self",
                    "name"
                ],
                "start": [
                    "self"
                ],
                "_start": [
                    "self"
                ],
                "stop": [
                    "self"
                ],
                "_stop": [
                    "self"
                ],
                "step": [
                    "self"
                ],
                "_step": [
                    "self"
                ],
                "nbytes": [
                    "self"
                ],
                "memory_usage": [
                    "self",
                    "deep"
                ],
                "dtype": [
                    "self"
                ],
                "is_unique": [
                    "self"
                ],
                "is_monotonic_increasing": [
                    "self"
                ],
                "is_monotonic_decreasing": [
                    "self"
                ],
                "has_duplicates": [
                    "self"
                ],
                "__contains__": [
                    "self",
                    "key"
                ],
                "get_loc": [
                    "self",
                    "key",
                    "method",
                    "tolerance"
                ],
                "get_indexer": [
                    "self",
                    "target",
                    "method",
                    "limit",
                    "tolerance"
                ],
                "tolist": [
                    "self"
                ],
                "_shallow_copy": [
                    "self",
                    "values",
                    "name"
                ],
                "copy": [
                    "self",
                    "name",
                    "deep",
                    "dtype"
                ],
                "_minmax": [
                    "self",
                    "meth"
                ],
                "min": [
                    "self",
                    "axis",
                    "skipna"
                ],
                "max": [
                    "self",
                    "axis",
                    "skipna"
                ],
                "argsort": [
                    "self"
                ],
                "equals": [
                    "self",
                    "other"
                ],
                "intersection": [
                    "self",
                    "other",
                    "sort"
                ],
                "_min_fitting_element": [
                    "self",
                    "lower_limit"
                ],
                "_max_fitting_element": [
                    "self",
                    "upper_limit"
                ],
                "_extended_gcd": [
                    "self",
                    "a",
                    "b"
                ],
                "_union": [
                    "self",
                    "other",
                    "sort"
                ],
                "join": [
                    "self",
                    "other",
                    "how",
                    "level",
                    "return_indexers",
                    "sort"
                ],
                "_concat": [
                    "self",
                    "indexes",
                    "name"
                ],
                "__len__": [
                    "self"
                ],
                "size": [
                    "self"
                ],
                "__getitem__": [
                    "self",
                    "key"
                ],
                "__floordiv__": [
                    "self",
                    "other"
                ],
                "all": [
                    "self"
                ],
                "any": [
                    "self"
                ],
                "_add_numeric_methods_binary": [
                    "cls"
                ]
            }
        },
        "pandas.core.indexes.datetimes": {
            "_new_DatetimeIndex": [
                "cls",
                "d"
            ],
            "date_range": [
                "start",
                "end",
                "periods",
                "freq",
                "tz",
                "normalize",
                "name",
                "closed"
            ],
            "bdate_range": [
                "start",
                "end",
                "periods",
                "freq",
                "tz",
                "normalize",
                "name",
                "weekmask",
                "holidays",
                "closed"
            ],
            "_time_to_micros": [
                "time_obj"
            ],
            "DatetimeIndex": {
                "tz_localize": [
                    "self",
                    "tz",
                    "ambiguous",
                    "nonexistent"
                ],
                "to_period": [
                    "self",
                    "freq"
                ],
                "__new__": [
                    "cls",
                    "data",
                    "freq",
                    "tz",
                    "normalize",
                    "closed",
                    "ambiguous",
                    "dayfirst",
                    "yearfirst",
                    "dtype",
                    "copy",
                    "name"
                ],
                "_simple_new": [
                    "cls",
                    "values",
                    "name"
                ],
                "_is_dates_only": [
                    "self"
                ],
                "__reduce__": [
                    "self"
                ],
                "_convert_for_op": [
                    "self",
                    "value"
                ],
                "_is_comparable_dtype": [
                    "self",
                    "dtype"
                ],
                "_mpl_repr": [
                    "self"
                ],
                "_formatter_func": [
                    "self"
                ],
                "union_many": [
                    "self",
                    "others"
                ],
                "_get_time_micros": [
                    "self"
                ],
                "to_series": [
                    "self",
                    "keep_tz",
                    "index",
                    "name"
                ],
                "snap": [
                    "self",
                    "freq"
                ],
                "_parsed_string_to_bounds": [
                    "self",
                    "reso",
                    "parsed"
                ],
                "_validate_partial_date_slice": [
                    "self",
                    "reso"
                ],
                "get_loc": [
                    "self",
                    "key",
                    "method",
                    "tolerance"
                ],
                "_maybe_cast_for_get_loc": [
                    "self",
                    "key"
                ],
                "_maybe_cast_slice_bound": [
                    "self",
                    "label",
                    "side",
                    "kind"
                ],
                "_get_string_slice": [
                    "self",
                    "key",
                    "use_lhs",
                    "use_rhs"
                ],
                "slice_indexer": [
                    "self",
                    "start",
                    "end",
                    "step",
                    "kind"
                ],
                "is_type_compatible": [
                    "self",
                    "typ"
                ],
                "inferred_type": [
                    "self"
                ],
                "indexer_at_time": [
                    "self",
                    "time",
                    "asof"
                ],
                "indexer_between_time": [
                    "self",
                    "start_time",
                    "end_time",
                    "include_start",
                    "include_end"
                ]
            }
        },
        "pandas.core.indexes.base": {
            "_make_comparison_op": [
                "op",
                "cls"
            ],
            "_make_arithmetic_op": [
                "op",
                "cls"
            ],
            "_new_Index": [
                "cls",
                "d"
            ],
            "ensure_index_from_sequences": [
                "sequences",
                "names"
            ],
            "ensure_index": [
                "index_like",
                "copy"
            ],
            "ensure_has_len": [
                "seq"
            ],
            "trim_front": [
                "strings"
            ],
            "_validate_join_method": [
                "method"
            ],
            "default_index": [
                "n"
            ],
            "maybe_extract_name": [
                "name",
                "obj",
                "cls"
            ],
            "_maybe_cast_with_dtype": [
                "data",
                "dtype",
                "copy"
            ],
            "_maybe_cast_data_without_dtype": [
                "subarr"
            ],
            "_try_convert_to_int_array": [
                "data",
                "copy",
                "dtype"
            ],
            "_maybe_asobject": [
                "dtype",
                "klass",
                "data",
                "copy",
                "name"
            ],
            "Index": {
                "_left_indexer_unique": [
                    "self",
                    "left",
                    "right"
                ],
                "_left_indexer": [
                    "self",
                    "left",
                    "right"
                ],
                "_inner_indexer": [
                    "self",
                    "left",
                    "right"
                ],
                "_outer_indexer": [
                    "self",
                    "left",
                    "right"
                ],
                "__new__": [
                    "cls",
                    "data",
                    "dtype",
                    "copy",
                    "name",
                    "tupleize_cols"
                ],
                "asi8": [
                    "self"
                ],
                "_simple_new": [
                    "cls",
                    "values",
                    "name"
                ],
                "_constructor": [
                    "self"
                ],
                "_get_attributes_dict": [
                    "self"
                ],
                "_shallow_copy": [
                    "self",
                    "values",
                    "name"
                ],
                "is_": [
                    "self",
                    "other"
                ],
                "_reset_identity": [
                    "self"
                ],
                "_cleanup": [
                    "self"
                ],
                "_engine": [
                    "self"
                ],
                "__len__": [
                    "self"
                ],
                "__array__": [
                    "self",
                    "dtype"
                ],
                "__array_wrap__": [
                    "self",
                    "result",
                    "context"
                ],
                "dtype": [
                    "self"
                ],
                "ravel": [
                    "self",
                    "order"
                ],
                "view": [
                    "self",
                    "cls"
                ],
                "astype": [
                    "self",
                    "dtype",
                    "copy"
                ],
                "take": [
                    "self",
                    "indices",
                    "axis",
                    "allow_fill",
                    "fill_value"
                ],
                "_assert_take_fillable": [
                    "self",
                    "values",
                    "indices",
                    "allow_fill",
                    "fill_value",
                    "na_value"
                ],
                "repeat": [
                    "self",
                    "repeats",
                    "axis"
                ],
                "copy": [
                    "self",
                    "name",
                    "deep",
                    "dtype",
                    "names"
                ],
                "__copy__": [
                    "self"
                ],
                "__deepcopy__": [
                    "self",
                    "memo"
                ],
                "__repr__": [
                    "self"
                ],
                "_format_space": [
                    "self"
                ],
                "_formatter_func": [
                    "self"
                ],
                "_format_data": [
                    "self",
                    "name"
                ],
                "_format_attrs": [
                    "self"
                ],
                "_mpl_repr": [
                    "self"
                ],
                "format": [
                    "self",
                    "name",
                    "formatter",
                    "na_rep"
                ],
                "_format_with_header": [
                    "self",
                    "header",
                    "na_rep"
                ],
                "to_native_types": [
                    "self",
                    "slicer"
                ],
                "_format_native_types": [
                    "self",
                    "na_rep",
                    "quoting"
                ],
                "_summary": [
                    "self",
                    "name"
                ],
                "to_flat_index": [
                    "self"
                ],
                "to_series": [
                    "self",
                    "index",
                    "name"
                ],
                "to_frame": [
                    "self",
                    "index",
                    "name"
                ],
                "name": [
                    "self",
                    "value"
                ],
                "_validate_names": [
                    "self",
                    "name",
                    "names",
                    "deep"
                ],
                "_get_names": [
                    "self"
                ],
                "_set_names": [
                    "self",
                    "values",
                    "level"
                ],
                "set_names": [
                    "self",
                    "names",
                    "level",
                    "inplace"
                ],
                "rename": [
                    "self",
                    "name",
                    "inplace"
                ],
                "nlevels": [
                    "self"
                ],
                "_sort_levels_monotonic": [
                    "self"
                ],
                "_validate_index_level": [
                    "self",
                    "level"
                ],
                "_get_level_number": [
                    "self",
                    "level"
                ],
                "sortlevel": [
                    "self",
                    "level",
                    "ascending",
                    "sort_remaining"
                ],
                "_get_level_values": [
                    "self",
                    "level"
                ],
                "droplevel": [
                    "self",
                    "level"
                ],
                "_get_grouper_for_level": [
                    "self",
                    "mapper",
                    "level"
                ],
                "is_monotonic": [
                    "self"
                ],
                "is_monotonic_increasing": [
                    "self"
                ],
                "is_monotonic_decreasing": [
                    "self"
                ],
                "_is_strictly_monotonic_increasing": [
                    "self"
                ],
                "_is_strictly_monotonic_decreasing": [
                    "self"
                ],
                "is_unique": [
                    "self"
                ],
                "has_duplicates": [
                    "self"
                ],
                "is_boolean": [
                    "self"
                ],
                "is_integer": [
                    "self"
                ],
                "is_floating": [
                    "self"
                ],
                "is_numeric": [
                    "self"
                ],
                "is_object": [
                    "self"
                ],
                "is_categorical": [
                    "self"
                ],
                "is_interval": [
                    "self"
                ],
                "is_mixed": [
                    "self"
                ],
                "holds_integer": [
                    "self"
                ],
                "inferred_type": [
                    "self"
                ],
                "is_all_dates": [
                    "self"
                ],
                "__reduce__": [
                    "self"
                ],
                "_isnan": [
                    "self"
                ],
                "_nan_idxs": [
                    "self"
                ],
                "hasnans": [
                    "self"
                ],
                "isna": [
                    "self"
                ],
                "notna": [
                    "self"
                ],
                "fillna": [
                    "self",
                    "value",
                    "downcast"
                ],
                "dropna": [
                    "self",
                    "how"
                ],
                "unique": [
                    "self",
                    "level"
                ],
                "drop_duplicates": [
                    "self",
                    "keep"
                ],
                "duplicated": [
                    "self",
                    "keep"
                ],
                "_get_unique_index": [
                    "self",
                    "dropna"
                ],
                "__add__": [
                    "self",
                    "other"
                ],
                "__radd__": [
                    "self",
                    "other"
                ],
                "__iadd__": [
                    "self",
                    "other"
                ],
                "__sub__": [
                    "self",
                    "other"
                ],
                "__rsub__": [
                    "self",
                    "other"
                ],
                "__and__": [
                    "self",
                    "other"
                ],
                "__or__": [
                    "self",
                    "other"
                ],
                "__xor__": [
                    "self",
                    "other"
                ],
                "__nonzero__": [
                    "self"
                ],
                "_get_reconciled_name_object": [
                    "self",
                    "other"
                ],
                "_union_incompatible_dtypes": [
                    "self",
                    "other",
                    "sort"
                ],
                "_is_compatible_with_other": [
                    "self",
                    "other"
                ],
                "_validate_sort_keyword": [
                    "self",
                    "sort"
                ],
                "union": [
                    "self",
                    "other",
                    "sort"
                ],
                "_union": [
                    "self",
                    "other",
                    "sort"
                ],
                "_wrap_setop_result": [
                    "self",
                    "other",
                    "result"
                ],
                "intersection": [
                    "self",
                    "other",
                    "sort"
                ],
                "difference": [
                    "self",
                    "other",
                    "sort"
                ],
                "symmetric_difference": [
                    "self",
                    "other",
                    "result_name",
                    "sort"
                ],
                "_assert_can_do_setop": [
                    "self",
                    "other"
                ],
                "_convert_can_do_setop": [
                    "self",
                    "other"
                ],
                "get_loc": [
                    "self",
                    "key",
                    "method",
                    "tolerance"
                ],
                "get_indexer": [
                    "self",
                    "target",
                    "method",
                    "limit",
                    "tolerance"
                ],
                "_convert_tolerance": [
                    "self",
                    "tolerance",
                    "target"
                ],
                "_get_fill_indexer": [
                    "self",
                    "target",
                    "method",
                    "limit",
                    "tolerance"
                ],
                "_get_fill_indexer_searchsorted": [
                    "self",
                    "target",
                    "method",
                    "limit"
                ],
                "_get_nearest_indexer": [
                    "self",
                    "target",
                    "limit",
                    "tolerance"
                ],
                "_filter_indexer_tolerance": [
                    "self",
                    "target",
                    "indexer",
                    "tolerance"
                ],
                "_get_partial_string_timestamp_match_key": [
                    "self",
                    "key"
                ],
                "_validate_positional_slice": [
                    "self",
                    "key"
                ],
                "_convert_slice_indexer": [
                    "self",
                    "key",
                    "kind"
                ],
                "_convert_listlike_indexer": [
                    "self",
                    "keyarr"
                ],
                "_convert_arr_indexer": [
                    "self",
                    "keyarr"
                ],
                "_convert_index_indexer": [
                    "self",
                    "keyarr"
                ],
                "_convert_list_indexer": [
                    "self",
                    "keyarr"
                ],
                "_invalid_indexer": [
                    "self",
                    "form",
                    "key"
                ],
                "_can_reindex": [
                    "self",
                    "indexer"
                ],
                "reindex": [
                    "self",
                    "target",
                    "method",
                    "level",
                    "limit",
                    "tolerance"
                ],
                "_reindex_non_unique": [
                    "self",
                    "target"
                ],
                "join": [
                    "self",
                    "other",
                    "how",
                    "level",
                    "return_indexers",
                    "sort"
                ],
                "_join_multi": [
                    "self",
                    "other",
                    "how",
                    "return_indexers"
                ],
                "_join_non_unique": [
                    "self",
                    "other",
                    "how",
                    "return_indexers"
                ],
                "_join_level": [
                    "self",
                    "other",
                    "level",
                    "how",
                    "return_indexers",
                    "keep_order"
                ],
                "_join_monotonic": [
                    "self",
                    "other",
                    "how",
                    "return_indexers"
                ],
                "_wrap_joined_index": [
                    "self",
                    "joined",
                    "other"
                ],
                "values": [
                    "self"
                ],
                "array": [
                    "self"
                ],
                "_values": [
                    "self"
                ],
                "_get_engine_target": [
                    "self"
                ],
                "memory_usage": [
                    "self",
                    "deep"
                ],
                "where": [
                    "self",
                    "cond",
                    "other"
                ],
                "_scalar_data_error": [
                    "cls",
                    "data"
                ],
                "_string_data_error": [
                    "cls",
                    "data"
                ],
                "_coerce_scalar_to_index": [
                    "self",
                    "item"
                ],
                "_to_safe_for_reshape": [
                    "self"
                ],
                "_convert_for_op": [
                    "self",
                    "value"
                ],
                "_assert_can_do_op": [
                    "self",
                    "value"
                ],
                "_has_complex_internals": [
                    "self"
                ],
                "_is_memory_usage_qualified": [
                    "self"
                ],
                "is_type_compatible": [
                    "self",
                    "kind"
                ],
                "__contains__": [
                    "self",
                    "key"
                ],
                "__hash__": [
                    "self"
                ],
                "__setitem__": [
                    "self",
                    "key",
                    "value"
                ],
                "__getitem__": [
                    "self",
                    "key"
                ],
                "_can_hold_identifiers_and_holds_name": [
                    "self",
                    "name"
                ],
                "append": [
                    "self",
                    "other"
                ],
                "_concat": [
                    "self",
                    "to_concat",
                    "name"
                ],
                "putmask": [
                    "self",
                    "mask",
                    "value"
                ],
                "equals": [
                    "self",
                    "other"
                ],
                "identical": [
                    "self",
                    "other"
                ],
                "asof": [
                    "self",
                    "label"
                ],
                "asof_locs": [
                    "self",
                    "where",
                    "mask"
                ],
                "sort_values": [
                    "self",
                    "return_indexer",
                    "ascending",
                    "key"
                ],
                "sort": [
                    "self"
                ],
                "shift": [
                    "self",
                    "periods",
                    "freq"
                ],
                "argsort": [
                    "self"
                ],
                "get_value": [
                    "self",
                    "series",
                    "key"
                ],
                "_check_indexing_error": [
                    "self",
                    "key"
                ],
                "_should_fallback_to_positional": [
                    "self"
                ],
                "_get_values_for_loc": [
                    "self",
                    "series",
                    "loc",
                    "key"
                ],
                "set_value": [
                    "self",
                    "arr",
                    "key",
                    "value"
                ],
                "get_indexer_non_unique": [
                    "self",
                    "target"
                ],
                "get_indexer_for": [
                    "self",
                    "target"
                ],
                "_maybe_promote": [
                    "self",
                    "other"
                ],
                "_is_comparable_dtype": [
                    "self",
                    "dtype"
                ],
                "groupby": [
                    "self",
                    "values"
                ],
                "map": [
                    "self",
                    "mapper",
                    "na_action"
                ],
                "_transform_index": [
                    "self",
                    "func",
                    "level"
                ],
                "isin": [
                    "self",
                    "values",
                    "level"
                ],
                "_get_string_slice": [
                    "self",
                    "key",
                    "use_lhs",
                    "use_rhs"
                ],
                "slice_indexer": [
                    "self",
                    "start",
                    "end",
                    "step",
                    "kind"
                ],
                "_maybe_cast_indexer": [
                    "self",
                    "key"
                ],
                "_validate_indexer": [
                    "self",
                    "form",
                    "key",
                    "kind"
                ],
                "_maybe_cast_slice_bound": [
                    "self",
                    "label",
                    "side",
                    "kind"
                ],
                "_searchsorted_monotonic": [
                    "self",
                    "label",
                    "side"
                ],
                "get_slice_bound": [
                    "self",
                    "label",
                    "side",
                    "kind"
                ],
                "slice_locs": [
                    "self",
                    "start",
                    "end",
                    "step",
                    "kind"
                ],
                "delete": [
                    "self",
                    "loc"
                ],
                "insert": [
                    "self",
                    "loc",
                    "item"
                ],
                "drop": [
                    "self",
                    "labels",
                    "errors"
                ],
                "_add_comparison_methods": [
                    "cls"
                ],
                "_add_numeric_methods_add_sub_disabled": [
                    "cls"
                ],
                "_add_numeric_methods_disabled": [
                    "cls"
                ],
                "_add_numeric_methods_binary": [
                    "cls"
                ],
                "_add_numeric_methods_unary": [
                    "cls"
                ],
                "_add_numeric_methods": [
                    "cls"
                ],
                "_add_logical_methods": [
                    "cls"
                ],
                "_add_logical_methods_disabled": [
                    "cls"
                ],
                "shape": [
                    "self"
                ]
            }
        },
        "pandas.core.indexes.api": {
            "get_objs_combined_axis": [
                "objs",
                "intersect",
                "axis",
                "sort",
                "copy"
            ],
            "_get_distinct_objs": [
                "objs"
            ],
            "_get_combined_index": [
                "indexes",
                "intersect",
                "sort",
                "copy"
            ],
            "union_indexes": [
                "indexes",
                "sort"
            ],
            "_sanitize_and_check": [
                "indexes"
            ],
            "get_consensus_names": [
                "indexes"
            ],
            "all_indexes_same": [
                "indexes"
            ]
        },
        "pandas.core.indexes.numeric": {
            "NumericIndex": {
                "__new__": [
                    "cls",
                    "data",
                    "dtype",
                    "copy",
                    "name"
                ],
                "_validate_dtype": [
                    "cls",
                    "dtype"
                ],
                "_maybe_cast_slice_bound": [
                    "self",
                    "label",
                    "side",
                    "kind"
                ],
                "_shallow_copy": [
                    "self",
                    "values",
                    "name"
                ],
                "_convert_for_op": [
                    "self",
                    "value"
                ],
                "_convert_tolerance": [
                    "self",
                    "tolerance",
                    "target"
                ],
                "_assert_safe_casting": [
                    "cls",
                    "data",
                    "subarr"
                ],
                "is_all_dates": [
                    "self"
                ],
                "insert": [
                    "self",
                    "loc",
                    "item"
                ],
                "_union": [
                    "self",
                    "other",
                    "sort"
                ]
            },
            "IntegerIndex": {
                "__contains__": [
                    "self",
                    "key"
                ],
                "inferred_type": [
                    "self"
                ],
                "asi8": [
                    "self"
                ]
            },
            "Int64Index": {
                "_wrap_joined_index": [
                    "self",
                    "joined",
                    "other"
                ],
                "_assert_safe_casting": [
                    "cls",
                    "data",
                    "subarr"
                ],
                "_is_compatible_with_other": [
                    "self",
                    "other"
                ]
            },
            "UInt64Index": {
                "_convert_arr_indexer": [
                    "self",
                    "keyarr"
                ],
                "_convert_index_indexer": [
                    "self",
                    "keyarr"
                ],
                "_wrap_joined_index": [
                    "self",
                    "joined",
                    "other"
                ],
                "_assert_safe_casting": [
                    "cls",
                    "data",
                    "subarr"
                ],
                "_is_compatible_with_other": [
                    "self",
                    "other"
                ]
            },
            "Float64Index": {
                "inferred_type": [
                    "self"
                ],
                "astype": [
                    "self",
                    "dtype",
                    "copy"
                ],
                "_should_fallback_to_positional": [
                    "self"
                ],
                "_convert_slice_indexer": [
                    "self",
                    "key",
                    "kind"
                ],
                "_format_native_types": [
                    "self",
                    "na_rep",
                    "float_format",
                    "decimal",
                    "quoting"
                ],
                "__contains__": [
                    "self",
                    "other"
                ],
                "get_loc": [
                    "self",
                    "key",
                    "method",
                    "tolerance"
                ],
                "is_unique": [
                    "self"
                ],
                "isin": [
                    "self",
                    "values",
                    "level"
                ],
                "_is_compatible_with_other": [
                    "self",
                    "other"
                ]
            }
        },
        "pandas.core.indexes": {},
        "pandas.core.reshape.melt": {
            "melt": [
                "frame",
                "id_vars",
                "value_vars",
                "var_name",
                "value_name",
                "col_level",
                "ignore_index"
            ],
            "lreshape": [
                "data",
                "groups",
                "dropna",
                "label"
            ],
            "wide_to_long": [
                "df",
                "stubnames",
                "i",
                "j",
                "sep",
                "suffix"
            ]
        },
        "pandas.core.reshape.pivot": {
            "pivot_table": [
                "data",
                "values",
                "index",
                "columns",
                "aggfunc",
                "fill_value",
                "margins",
                "dropna",
                "margins_name",
                "observed"
            ],
            "_add_margins": [
                "table",
                "data",
                "values",
                "rows",
                "cols",
                "aggfunc",
                "observed",
                "margins_name",
                "fill_value"
            ],
            "_compute_grand_margin": [
                "data",
                "values",
                "aggfunc",
                "margins_name"
            ],
            "_generate_marginal_results": [
                "table",
                "data",
                "values",
                "rows",
                "cols",
                "aggfunc",
                "observed",
                "margins_name"
            ],
            "_generate_marginal_results_without_values": [
                "table",
                "data",
                "rows",
                "cols",
                "aggfunc",
                "observed",
                "margins_name"
            ],
            "_convert_by": [
                "by"
            ],
            "pivot": [
                "data",
                "index",
                "columns",
                "values"
            ],
            "crosstab": [
                "index",
                "columns",
                "values",
                "rownames",
                "colnames",
                "aggfunc",
                "margins",
                "margins_name",
                "dropna",
                "normalize"
            ],
            "_normalize": [
                "table",
                "normalize",
                "margins",
                "margins_name"
            ],
            "_get_names": [
                "arrs",
                "names",
                "prefix"
            ]
        },
        "pandas.core.reshape.merge": {
            "merge": [
                "left",
                "right",
                "how",
                "on",
                "left_on",
                "right_on",
                "left_index",
                "right_index",
                "sort",
                "suffixes",
                "copy",
                "indicator",
                "validate"
            ],
            "_groupby_and_merge": [
                "by",
                "on",
                "left",
                "right",
                "merge_pieces"
            ],
            "merge_ordered": [
                "left",
                "right",
                "on",
                "left_on",
                "right_on",
                "left_by",
                "right_by",
                "fill_method",
                "suffixes",
                "how"
            ],
            "merge_asof": [
                "left",
                "right",
                "on",
                "left_on",
                "right_on",
                "left_index",
                "right_index",
                "by",
                "left_by",
                "right_by",
                "suffixes",
                "tolerance",
                "allow_exact_matches",
                "direction"
            ],
            "_get_join_indexers": [
                "left_keys",
                "right_keys",
                "sort",
                "how"
            ],
            "_restore_dropped_levels_multijoin": [
                "left",
                "right",
                "dropped_level_names",
                "join_index",
                "lindexer",
                "rindexer"
            ],
            "_asof_function": [
                "direction"
            ],
            "_asof_by_function": [
                "direction"
            ],
            "_get_cython_type_upcast": [
                "dtype"
            ],
            "_get_multiindex_indexer": [
                "join_keys",
                "index",
                "sort"
            ],
            "_get_single_indexer": [
                "join_key",
                "index",
                "sort"
            ],
            "_left_join_on_index": [
                "left_ax",
                "right_ax",
                "join_keys",
                "sort"
            ],
            "_right_outer_join": [
                "x",
                "y",
                "max_groups"
            ],
            "_factorize_keys": [
                "lk",
                "rk",
                "sort",
                "how"
            ],
            "_sort_labels": [
                "uniques",
                "left",
                "right"
            ],
            "_get_join_keys": [
                "llab",
                "rlab",
                "shape",
                "sort"
            ],
            "_should_fill": [
                "lname",
                "rname"
            ],
            "_any": [
                "x"
            ],
            "_validate_operand": [
                "obj"
            ],
            "_items_overlap_with_suffix": [
                "left",
                "right",
                "suffixes"
            ],
            "_MergeOperation": {
                "__init__": [
                    "self",
                    "left",
                    "right",
                    "how",
                    "on",
                    "left_on",
                    "right_on",
                    "axis",
                    "left_index",
                    "right_index",
                    "sort",
                    "suffixes",
                    "copy",
                    "indicator",
                    "validate"
                ],
                "get_result": [
                    "self"
                ],
                "_indicator_pre_merge": [
                    "self",
                    "left",
                    "right"
                ],
                "_indicator_post_merge": [
                    "self",
                    "result"
                ],
                "_maybe_restore_index_levels": [
                    "self",
                    "result"
                ],
                "_maybe_add_join_keys": [
                    "self",
                    "result",
                    "left_indexer",
                    "right_indexer"
                ],
                "_get_join_indexers": [
                    "self"
                ],
                "_get_join_info": [
                    "self"
                ],
                "_create_join_index": [
                    "self",
                    "index",
                    "other_index",
                    "indexer",
                    "other_indexer",
                    "how"
                ],
                "_get_merge_keys": [
                    "self"
                ],
                "_maybe_coerce_merge_keys": [
                    "self"
                ],
                "_validate_specification": [
                    "self"
                ],
                "_validate": [
                    "self",
                    "validate"
                ]
            },
            "_OrderedMerge": {
                "__init__": [
                    "self",
                    "left",
                    "right",
                    "on",
                    "left_on",
                    "right_on",
                    "left_index",
                    "right_index",
                    "axis",
                    "suffixes",
                    "copy",
                    "fill_method",
                    "how"
                ],
                "get_result": [
                    "self"
                ]
            },
            "_AsOfMerge": {
                "__init__": [
                    "self",
                    "left",
                    "right",
                    "on",
                    "left_on",
                    "right_on",
                    "left_index",
                    "right_index",
                    "by",
                    "left_by",
                    "right_by",
                    "axis",
                    "suffixes",
                    "copy",
                    "fill_method",
                    "how",
                    "tolerance",
                    "allow_exact_matches",
                    "direction"
                ],
                "_validate_specification": [
                    "self"
                ],
                "_get_merge_keys": [
                    "self"
                ],
                "_get_join_indexers": [
                    "self"
                ]
            }
        },
        "pandas.core.reshape.tile": {
            "cut": [
                "x",
                "bins",
                "right",
                "labels",
                "retbins",
                "precision",
                "include_lowest",
                "duplicates",
                "ordered"
            ],
            "qcut": [
                "x",
                "q",
                "labels",
                "retbins",
                "precision",
                "duplicates"
            ],
            "_bins_to_cuts": [
                "x",
                "bins",
                "right",
                "labels",
                "precision",
                "include_lowest",
                "dtype",
                "duplicates",
                "ordered"
            ],
            "_coerce_to_type": [
                "x"
            ],
            "_convert_bin_to_numeric_type": [
                "bins",
                "dtype"
            ],
            "_convert_bin_to_datelike_type": [
                "bins",
                "dtype"
            ],
            "_format_labels": [
                "bins",
                "precision",
                "right",
                "include_lowest",
                "dtype"
            ],
            "_preprocess_for_cut": [
                "x"
            ],
            "_postprocess_for_cut": [
                "fac",
                "bins",
                "retbins",
                "dtype",
                "original"
            ],
            "_round_frac": [
                "x",
                "precision"
            ],
            "_infer_precision": [
                "base_precision",
                "bins"
            ]
        },
        "pandas.core.reshape.util": {
            "cartesian_product": [
                "X"
            ],
            "_tile_compat": [
                "arr",
                "num"
            ]
        },
        "pandas.core.reshape.concat": {
            "concat": [
                "objs",
                "axis",
                "join",
                "ignore_index",
                "keys",
                "levels",
                "names",
                "verify_integrity",
                "sort",
                "copy"
            ],
            "_concat_indexes": [
                "indexes"
            ],
            "_make_concat_multiindex": [
                "indexes",
                "keys",
                "levels",
                "names"
            ],
            "_Concatenator": {
                "__init__": [
                    "self",
                    "objs",
                    "axis",
                    "join",
                    "keys",
                    "levels",
                    "names",
                    "ignore_index",
                    "verify_integrity",
                    "copy",
                    "sort"
                ],
                "get_result": [
                    "self"
                ],
                "_get_result_dim": [
                    "self"
                ],
                "_get_new_axes": [
                    "self"
                ],
                "_get_comb_axis": [
                    "self",
                    "i"
                ],
                "_get_concat_axis": [
                    "self"
                ],
                "_maybe_check_integrity": [
                    "self",
                    "concat_index"
                ]
            }
        },
        "pandas.core.reshape.reshape": {
            "_unstack_multiple": [
                "data",
                "clocs",
                "fill_value"
            ],
            "unstack": [
                "obj",
                "level",
                "fill_value"
            ],
            "_unstack_frame": [
                "obj",
                "level",
                "fill_value"
            ],
            "_unstack_extension_series": [
                "series",
                "level",
                "fill_value"
            ],
            "stack": [
                "frame",
                "level",
                "dropna"
            ],
            "stack_multiple": [
                "frame",
                "level",
                "dropna"
            ],
            "_stack_multi_columns": [
                "frame",
                "level_num",
                "dropna"
            ],
            "get_dummies": [
                "data",
                "prefix",
                "prefix_sep",
                "dummy_na",
                "columns",
                "sparse",
                "drop_first",
                "dtype"
            ],
            "_get_dummies_1d": [
                "data",
                "prefix",
                "prefix_sep",
                "dummy_na",
                "sparse",
                "drop_first",
                "dtype"
            ],
            "_reorder_for_extension_array_stack": [
                "arr",
                "n_rows",
                "n_columns"
            ],
            "_Unstacker": {
                "__init__": [
                    "self",
                    "index",
                    "level",
                    "constructor"
                ],
                "_indexer_and_to_sort": [
                    "self"
                ],
                "sorted_labels": [
                    "self"
                ],
                "_make_sorted_values": [
                    "self",
                    "values"
                ],
                "_make_selectors": [
                    "self"
                ],
                "get_result": [
                    "self",
                    "values",
                    "value_columns",
                    "fill_value"
                ],
                "get_new_values": [
                    "self",
                    "values",
                    "fill_value"
                ],
                "get_new_columns": [
                    "self",
                    "value_columns"
                ],
                "new_index": [
                    "self"
                ]
            }
        },
        "pandas.core.reshape.api": {},
        "pandas.core.reshape": {},
        "pandas.arrays": {},
        "pandas._config.localization": {
            "set_locale": [
                "new_locale",
                "lc_var"
            ],
            "can_set_locale": [
                "lc",
                "lc_var"
            ],
            "_valid_locales": [
                "locales",
                "normalize"
            ],
            "_default_locale_getter": [],
            "get_locales": [
                "prefix",
                "normalize",
                "locale_getter"
            ]
        },
        "pandas._config.display": {
            "detect_console_encoding": []
        },
        "pandas._config.dates": {},
        "pandas._config.config": {
            "_get_single_key": [
                "pat",
                "silent"
            ],
            "_get_option": [
                "pat",
                "silent"
            ],
            "_set_option": [],
            "_describe_option": [
                "pat",
                "_print_desc"
            ],
            "_reset_option": [
                "pat",
                "silent"
            ],
            "get_default_val": [
                "pat"
            ],
            "register_option": [
                "key",
                "defval",
                "doc",
                "validator",
                "cb"
            ],
            "deprecate_option": [
                "key",
                "msg",
                "rkey",
                "removal_ver"
            ],
            "_select_options": [
                "pat"
            ],
            "_get_root": [
                "key"
            ],
            "_is_deprecated": [
                "key"
            ],
            "_get_deprecated_option": [
                "key"
            ],
            "_get_registered_option": [
                "key"
            ],
            "_translate_key": [
                "key"
            ],
            "_warn_if_deprecated": [
                "key"
            ],
            "_build_option_description": [
                "k"
            ],
            "pp_options_list": [
                "keys",
                "width",
                "_print"
            ],
            "config_prefix": [
                "prefix"
            ],
            "is_type_factory": [
                "_type"
            ],
            "is_instance_factory": [
                "_type"
            ],
            "is_one_of_factory": [
                "legal_values"
            ],
            "is_nonnegative_int": [
                "value"
            ],
            "is_callable": [
                "obj"
            ],
            "OptionError": {},
            "DictWrapper": {
                "__init__": [
                    "self",
                    "d",
                    "prefix"
                ],
                "__setattr__": [
                    "self",
                    "key",
                    "val"
                ],
                "__getattr__": [
                    "self",
                    "key"
                ],
                "__dir__": [
                    "self"
                ]
            },
            "CallableDynamicDoc": {
                "__init__": [
                    "self",
                    "func",
                    "doc_tmpl"
                ],
                "__call__": [
                    "self"
                ],
                "__doc__": [
                    "self"
                ]
            },
            "option_context": {
                "__init__": [
                    "self"
                ],
                "__enter__": [
                    "self"
                ],
                "__exit__": [
                    "self"
                ]
            }
        },
        "pandas._config": {},
        "pandas.tests.test_errors": {
            "test_exception_importable": [
                "exc"
            ],
            "test_catch_oob": [],
            "test_AbstractMethodError_classmethod": [],
            "Foo": {
                "classmethod": [
                    "cls"
                ],
                "property": [
                    "self"
                ],
                "method": [
                    "self"
                ]
            }
        },
        "pandas.tests.test_sorting": {
            "test_decons": [],
            "TestSorting": {
                "test_int64_overflow": [
                    "self"
                ],
                "test_int64_overflow_moar": [
                    "self"
                ],
                "test_lexsort_indexer": [
                    "self"
                ],
                "test_nargsort": [
                    "self"
                ]
            },
            "TestMerge": {
                "test_int64_overflow_issues": [
                    "self"
                ]
            },
            "TestSafeSort": {
                "test_basic_sort": [
                    "self"
                ],
                "test_codes": [
                    "self",
                    "verify"
                ],
                "test_codes_out_of_bound": [
                    "self",
                    "na_sentinel"
                ],
                "test_mixed_integer": [
                    "self"
                ],
                "test_mixed_integer_from_list": [
                    "self"
                ],
                "test_unsortable": [
                    "self"
                ],
                "test_exceptions": [
                    "self"
                ],
                "test_extension_array": [
                    "self"
                ],
                "test_extension_array_codes": [
                    "self",
                    "verify",
                    "na_sentinel"
                ]
            }
        },
        "pandas.tests.test_optional_dependency": {
            "test_import_optional": [],
            "test_xlrd_version_fallback": [],
            "test_bad_version": [
                "monkeypatch"
            ],
            "test_no_version_raises": [
                "monkeypatch"
            ]
        },
        "pandas.tests.test_lib": {
            "test_cache_readonly_preserve_docstrings": [],
            "TestMisc": {
                "test_max_len_string_array": [
                    "self"
                ],
                "test_fast_unique_multiple_list_gen_sort": [
                    "self"
                ],
                "test_fast_unique_multiple_unsortable_runtimewarning": [
                    "self"
                ]
            },
            "TestIndexing": {
                "test_maybe_indices_to_slice_left_edge": [
                    "self"
                ],
                "test_maybe_indices_to_slice_right_edge": [
                    "self"
                ],
                "test_maybe_indices_to_slice_both_edges": [
                    "self"
                ],
                "test_maybe_indices_to_slice_middle": [
                    "self"
                ],
                "test_maybe_booleans_to_slice": [
                    "self"
                ],
                "test_get_reverse_indexer": [
                    "self"
                ]
            }
        },
        "pandas.tests.test_expressions": {
            "TestExpressions": {
                "setup_method": [
                    "self",
                    "method"
                ],
                "teardown_method": [
                    "self",
                    "method"
                ],
                "run_arithmetic": [
                    "self",
                    "df",
                    "other"
                ],
                "run_binary": [
                    "self",
                    "df",
                    "other"
                ],
                "run_frame": [
                    "self",
                    "df",
                    "other",
                    "run_binary"
                ],
                "test_arithmetic": [
                    "self",
                    "df"
                ],
                "test_invalid": [
                    "self"
                ],
                "test_binary_ops": [
                    "self",
                    "opname",
                    "op_str",
                    "left",
                    "right"
                ],
                "test_comparison_ops": [
                    "self",
                    "opname",
                    "op_str",
                    "left",
                    "right"
                ],
                "test_where": [
                    "self",
                    "cond",
                    "df"
                ],
                "test_bool_ops_raise_on_arithmetic": [
                    "self",
                    "op_str",
                    "opname"
                ],
                "test_bool_ops_warn_on_arithmetic": [
                    "self",
                    "op_str",
                    "opname"
                ],
                "test_bool_ops_column_name_dtype": [
                    "self",
                    "test_input",
                    "expected"
                ],
                "test_frame_series_axis": [
                    "self",
                    "axis",
                    "arith"
                ]
            }
        },
        "pandas.tests.test_aggregation": {
            "test_maybe_mangle_lambdas_passthrough": [],
            "test_maybe_mangle_lambdas_listlike": [],
            "test_maybe_mangle_lambdas": [],
            "test_maybe_mangle_lambdas_args": [],
            "test_maybe_mangle_lambdas_named": [],
            "test_make_unique": [
                "order",
                "expected_reorder"
            ]
        },
        "pandas.tests.test_nanops": {
            "skipna": [
                "request"
            ],
            "test_use_bottleneck": [],
            "test_numpy_ops": [
                "numpy_op",
                "expected"
            ],
            "test_nanops_independent_of_mask_param": [
                "operation"
            ],
            "TestnanopsDataFrame": {
                "setup_method": [
                    "self",
                    "method"
                ],
                "teardown_method": [
                    "self",
                    "method"
                ],
                "check_results": [
                    "self",
                    "targ",
                    "res",
                    "axis",
                    "check_dtype"
                ],
                "check_fun_data": [
                    "self",
                    "testfunc",
                    "targfunc",
                    "testarval",
                    "targarval",
                    "skipna",
                    "check_dtype",
                    "empty_targfunc"
                ],
                "check_fun": [
                    "self",
                    "testfunc",
                    "targfunc",
                    "testar",
                    "skipna",
                    "empty_targfunc"
                ],
                "check_funs": [
                    "self",
                    "testfunc",
                    "targfunc",
                    "skipna",
                    "allow_complex",
                    "allow_all_nan",
                    "allow_date",
                    "allow_tdelta",
                    "allow_obj"
                ],
                "_badobj_wrap": [
                    "self",
                    "value",
                    "func",
                    "allow_complex"
                ],
                "test_nan_funcs": [
                    "self",
                    "nan_op",
                    "np_op",
                    "skipna"
                ],
                "test_nansum": [
                    "self",
                    "skipna"
                ],
                "test_nanmean": [
                    "self",
                    "skipna"
                ],
                "test_nanmean_overflow": [
                    "self"
                ],
                "test_returned_dtype": [
                    "self",
                    "dtype"
                ],
                "test_nanmedian": [
                    "self",
                    "skipna"
                ],
                "test_nanvar": [
                    "self",
                    "ddof",
                    "skipna"
                ],
                "test_nanstd": [
                    "self",
                    "ddof",
                    "skipna"
                ],
                "test_nansem": [
                    "self",
                    "ddof",
                    "skipna"
                ],
                "test_nanops_with_warnings": [
                    "self",
                    "nan_op",
                    "np_op",
                    "skipna"
                ],
                "_argminmax_wrap": [
                    "self",
                    "value",
                    "axis",
                    "func"
                ],
                "test_nanargmax": [
                    "self",
                    "skipna"
                ],
                "test_nanargmin": [
                    "self",
                    "skipna"
                ],
                "_skew_kurt_wrap": [
                    "self",
                    "values",
                    "axis",
                    "func"
                ],
                "test_nanskew": [
                    "self",
                    "skipna"
                ],
                "test_nankurt": [
                    "self",
                    "skipna"
                ],
                "test_nanprod": [
                    "self",
                    "skipna"
                ],
                "check_nancorr_nancov_2d": [
                    "self",
                    "checkfun",
                    "targ0",
                    "targ1"
                ],
                "check_nancorr_nancov_1d": [
                    "self",
                    "checkfun",
                    "targ0",
                    "targ1"
                ],
                "test_nancorr": [
                    "self"
                ],
                "test_nancorr_pearson": [
                    "self"
                ],
                "test_nancorr_kendall": [
                    "self"
                ],
                "test_nancorr_spearman": [
                    "self"
                ],
                "test_invalid_method": [
                    "self"
                ],
                "test_nancov": [
                    "self"
                ],
                "check_nancomp": [
                    "self",
                    "checkfun",
                    "targ0"
                ],
                "test_nan_comparison": [
                    "self",
                    "op",
                    "nanop"
                ],
                "check_bool": [
                    "self",
                    "func",
                    "value",
                    "correct"
                ],
                "test__has_infs": [
                    "self"
                ],
                "test__bn_ok_dtype": [
                    "self"
                ]
            },
            "TestEnsureNumeric": {
                "test_numeric_values": [
                    "self"
                ],
                "test_ndarray": [
                    "self"
                ],
                "test_convertable_values": [
                    "self"
                ],
                "test_non_convertable_values": [
                    "self"
                ]
            },
            "TestNanvarFixedValues": {
                "setup_method": [
                    "self",
                    "method"
                ],
                "test_nanvar_all_finite": [
                    "self"
                ],
                "test_nanvar_nans": [
                    "self"
                ],
                "test_nanstd_nans": [
                    "self"
                ],
                "test_nanvar_axis": [
                    "self"
                ],
                "test_nanvar_ddof": [
                    "self"
                ],
                "test_ground_truth": [
                    "self"
                ],
                "test_nanstd_roundoff": [
                    "self"
                ],
                "prng": [
                    "self"
                ]
            },
            "TestNanskewFixedValues": {
                "setup_method": [
                    "self",
                    "method"
                ],
                "test_constant_series": [
                    "self"
                ],
                "test_all_finite": [
                    "self"
                ],
                "test_ground_truth": [
                    "self"
                ],
                "test_axis": [
                    "self"
                ],
                "test_nans": [
                    "self"
                ],
                "test_nans_skipna": [
                    "self"
                ],
                "prng": [
                    "self"
                ]
            },
            "TestNankurtFixedValues": {
                "setup_method": [
                    "self",
                    "method"
                ],
                "test_constant_series": [
                    "self"
                ],
                "test_all_finite": [
                    "self"
                ],
                "test_ground_truth": [
                    "self"
                ],
                "test_axis": [
                    "self"
                ],
                "test_nans": [
                    "self"
                ],
                "test_nans_skipna": [
                    "self"
                ],
                "prng": [
                    "self"
                ]
            },
            "TestDatetime64NaNOps": {
                "test_nanmean": [
                    "self",
                    "tz"
                ]
            }
        },
        "pandas.tests.test_strings": {
            "assert_series_or_index_equal": [
                "left",
                "right"
            ],
            "any_string_method": [
                "request"
            ],
            "any_allowed_skipna_inferred_dtype": [
                "request"
            ],
            "test_string_array": [
                "any_string_method"
            ],
            "test_string_array_numeric_integer_array": [
                "method",
                "expected"
            ],
            "test_string_array_boolean_array": [
                "method",
                "expected"
            ],
            "test_string_array_extract": [],
            "test_cat_different_classes": [
                "klass"
            ],
            "TestStringMethods": {
                "test_api": [
                    "self"
                ],
                "test_api_mi_raises": [
                    "self"
                ],
                "test_api_per_dtype": [
                    "self",
                    "index_or_series",
                    "dtype",
                    "any_skipna_inferred_dtype"
                ],
                "test_api_per_method": [
                    "self",
                    "index_or_series",
                    "dtype",
                    "any_allowed_skipna_inferred_dtype",
                    "any_string_method",
                    "request"
                ],
                "test_api_for_categorical": [
                    "self",
                    "any_string_method"
                ],
                "test_iter": [
                    "self"
                ],
                "test_iter_empty": [
                    "self"
                ],
                "test_iter_single_element": [
                    "self"
                ],
                "test_iter_object_try_string": [
                    "self"
                ],
                "test_str_cat_name": [
                    "self",
                    "index_or_series",
                    "other"
                ],
                "test_str_cat": [
                    "self",
                    "index_or_series"
                ],
                "test_str_cat_raises_intuitive_error": [
                    "self",
                    "index_or_series"
                ],
                "test_str_cat_categorical": [
                    "self",
                    "index_or_series",
                    "dtype_caller",
                    "dtype_target",
                    "sep"
                ],
                "test_str_cat_wrong_dtype_raises": [
                    "self",
                    "box",
                    "data"
                ],
                "test_str_cat_mixed_inputs": [
                    "self",
                    "index_or_series"
                ],
                "test_str_cat_align_indexed": [
                    "self",
                    "index_or_series",
                    "join"
                ],
                "test_str_cat_align_mixed_inputs": [
                    "self",
                    "join"
                ],
                "test_str_cat_all_na": [
                    "self",
                    "index_or_series",
                    "index_or_series2"
                ],
                "test_str_cat_special_cases": [
                    "self"
                ],
                "test_cat_on_filtered_index": [
                    "self"
                ],
                "test_count": [
                    "self"
                ],
                "test_contains": [
                    "self"
                ],
                "test_contains_for_object_category": [
                    "self"
                ],
                "test_startswith": [
                    "self"
                ],
                "test_endswith": [
                    "self"
                ],
                "test_title": [
                    "self"
                ],
                "test_lower_upper": [
                    "self"
                ],
                "test_capitalize": [
                    "self"
                ],
                "test_swapcase": [
                    "self"
                ],
                "test_casemethods": [
                    "self"
                ],
                "test_replace": [
                    "self"
                ],
                "test_replace_callable": [
                    "self"
                ],
                "test_replace_compiled_regex": [
                    "self"
                ],
                "test_replace_literal": [
                    "self"
                ],
                "test_repeat": [
                    "self"
                ],
                "test_repeat_with_null": [
                    "self"
                ],
                "test_match": [
                    "self"
                ],
                "test_fullmatch": [
                    "self"
                ],
                "test_extract_expand_None": [
                    "self"
                ],
                "test_extract_expand_unspecified": [
                    "self"
                ],
                "test_extract_expand_False": [
                    "self"
                ],
                "test_extract_expand_True": [
                    "self"
                ],
                "test_extract_series": [
                    "self"
                ],
                "test_extract_optional_groups": [
                    "self"
                ],
                "test_extract_single_group_returns_frame": [
                    "self"
                ],
                "test_extractall": [
                    "self"
                ],
                "test_extractall_single_group": [
                    "self"
                ],
                "test_extractall_single_group_with_quantifier": [
                    "self"
                ],
                "test_extractall_no_matches": [
                    "self",
                    "data",
                    "names"
                ],
                "test_extractall_stringindex": [
                    "self"
                ],
                "test_extractall_errors": [
                    "self"
                ],
                "test_extract_index_one_two_groups": [
                    "self"
                ],
                "test_extractall_same_as_extract": [
                    "self"
                ],
                "test_extractall_same_as_extract_subject_index": [
                    "self"
                ],
                "test_empty_str_methods": [
                    "self"
                ],
                "test_empty_str_methods_to_frame": [
                    "self"
                ],
                "test_ismethods": [
                    "self"
                ],
                "test_isnumeric": [
                    "self"
                ],
                "test_get_dummies": [
                    "self"
                ],
                "test_get_dummies_with_name_dummy": [
                    "self"
                ],
                "test_join": [
                    "self"
                ],
                "test_len": [
                    "self"
                ],
                "test_findall": [
                    "self"
                ],
                "test_find": [
                    "self"
                ],
                "test_find_nan": [
                    "self"
                ],
                "test_index": [
                    "self"
                ],
                "test_pad": [
                    "self"
                ],
                "test_pad_fillchar": [
                    "self"
                ],
                "test_pad_width": [
                    "self",
                    "f"
                ],
                "test_translate": [
                    "self"
                ],
                "test_center_ljust_rjust": [
                    "self"
                ],
                "test_center_ljust_rjust_fillchar": [
                    "self"
                ],
                "test_zfill": [
                    "self"
                ],
                "test_split": [
                    "self"
                ],
                "test_rsplit": [
                    "self"
                ],
                "test_split_blank_string": [
                    "self"
                ],
                "test_split_noargs": [
                    "self"
                ],
                "test_split_maxsplit": [
                    "self"
                ],
                "test_split_no_pat_with_nonzero_n": [
                    "self"
                ],
                "test_split_to_dataframe": [
                    "self"
                ],
                "test_split_to_multiindex_expand": [
                    "self"
                ],
                "test_rsplit_to_dataframe_expand": [
                    "self"
                ],
                "test_rsplit_to_multiindex_expand": [
                    "self"
                ],
                "test_split_nan_expand": [
                    "self"
                ],
                "test_split_with_name": [
                    "self"
                ],
                "test_partition_series": [
                    "self"
                ],
                "test_partition_index": [
                    "self"
                ],
                "test_partition_to_dataframe": [
                    "self"
                ],
                "test_partition_with_name": [
                    "self"
                ],
                "test_partition_sep_kwarg": [
                    "self"
                ],
                "test_pipe_failures": [
                    "self"
                ],
                "test_slice": [
                    "self",
                    "start",
                    "stop",
                    "step",
                    "expected"
                ],
                "test_slice_replace": [
                    "self"
                ],
                "test_strip_lstrip_rstrip": [
                    "self"
                ],
                "test_strip_lstrip_rstrip_mixed": [
                    "self"
                ],
                "test_strip_lstrip_rstrip_args": [
                    "self"
                ],
                "test_wrap": [
                    "self"
                ],
                "test_get": [
                    "self"
                ],
                "test_get_complex": [
                    "self"
                ],
                "test_get_complex_nested": [
                    "self",
                    "to_type"
                ],
                "test_contains_moar": [
                    "self"
                ],
                "test_contains_nan": [
                    "self"
                ],
                "test_replace_moar": [
                    "self"
                ],
                "test_string_slice_get_syntax": [
                    "self"
                ],
                "test_string_slice_out_of_bounds": [
                    "self"
                ],
                "test_match_findall_flags": [
                    "self"
                ],
                "test_encode_decode": [
                    "self"
                ],
                "test_encode_decode_errors": [
                    "self"
                ],
                "test_normalize": [
                    "self"
                ],
                "test_index_str_accessor_visibility": [
                    "self"
                ],
                "test_str_accessor_no_new_attributes": [
                    "self"
                ],
                "test_method_on_bytes": [
                    "self"
                ],
                "test_casefold": [
                    "self"
                ]
            }
        },
        "pandas.tests.test_downstream": {
            "import_module": [
                "name"
            ],
            "df": [],
            "test_dask": [
                "df"
            ],
            "test_xarray": [
                "df"
            ],
            "test_xarray_cftimeindex_nearest": [],
            "test_oo_optimizable": [],
            "test_statsmodels": [],
            "test_scikit_learn": [
                "df"
            ],
            "test_seaborn": [],
            "test_pandas_gbq": [
                "df"
            ],
            "test_pandas_datareader": [],
            "test_geopandas": [],
            "test_pyarrow": [
                "df"
            ],
            "test_missing_required_dependency": []
        },
        "pandas.tests.test_register_accessor": {
            "ensure_removed": [
                "obj",
                "attr"
            ],
            "test_register": [
                "obj",
                "registrar"
            ],
            "test_accessor_works": [],
            "test_overwrite_warns": [],
            "test_raises_attribute_error": [],
            "MyAccessor": {
                "__init__": [
                    "self",
                    "obj"
                ],
                "prop": [
                    "self"
                ],
                "method": [
                    "self"
                ]
            }
        },
        "pandas.tests.test_algos": {
            "test_quantile": [],
            "test_unique_label_indices": [],
            "test_pad_backfill_object_segfault": [],
            "test_is_lexsorted": [],
            "test_groupsort_indexer": [],
            "test_infinity_sort": [],
            "test_infinity_against_nan": [],
            "test_ensure_platform_int": [],
            "test_int64_add_overflow": [],
            "TestFactorize": {
                "test_basic": [
                    "self"
                ],
                "test_mixed": [
                    "self"
                ],
                "test_datelike": [
                    "self"
                ],
                "test_factorize_nan": [
                    "self"
                ],
                "test_factorize_tuple_list": [
                    "self",
                    "data",
                    "expected_codes",
                    "expected_uniques"
                ],
                "test_complex_sorting": [
                    "self"
                ],
                "test_float64_factorize": [
                    "self",
                    "writable"
                ],
                "test_uint64_factorize": [
                    "self",
                    "writable"
                ],
                "test_int64_factorize": [
                    "self",
                    "writable"
                ],
                "test_string_factorize": [
                    "self",
                    "writable"
                ],
                "test_object_factorize": [
                    "self",
                    "writable"
                ],
                "test_deprecate_order": [
                    "self"
                ],
                "test_parametrized_factorize_na_value_default": [
                    "self",
                    "data"
                ],
                "test_parametrized_factorize_na_value": [
                    "self",
                    "data",
                    "na_value"
                ],
                "test_factorize_na_sentinel": [
                    "self",
                    "sort",
                    "na_sentinel",
                    "data",
                    "uniques"
                ],
                "test_object_factorize_dropna": [
                    "self",
                    "data",
                    "dropna",
                    "expected_codes",
                    "expected_uniques"
                ],
                "test_int_factorize_dropna": [
                    "self",
                    "data",
                    "dropna",
                    "expected_codes",
                    "expected_uniques"
                ]
            },
            "TestUnique": {
                "test_ints": [
                    "self"
                ],
                "test_objects": [
                    "self"
                ],
                "test_object_refcount_bug": [
                    "self"
                ],
                "test_on_index_object": [
                    "self"
                ],
                "test_dtype_preservation": [
                    "self",
                    "any_numpy_dtype"
                ],
                "test_datetime64_dtype_array_returned": [
                    "self"
                ],
                "test_datetime_non_ns": [
                    "self"
                ],
                "test_timedelta_non_ns": [
                    "self"
                ],
                "test_timedelta64_dtype_array_returned": [
                    "self"
                ],
                "test_uint64_overflow": [
                    "self"
                ],
                "test_nan_in_object_array": [
                    "self"
                ],
                "test_categorical": [
                    "self"
                ],
                "test_datetime64tz_aware": [
                    "self"
                ],
                "test_order_of_appearance": [
                    "self"
                ],
                "test_tuple_with_strings": [
                    "self",
                    "arg",
                    "expected"
                ],
                "test_obj_none_preservation": [
                    "self"
                ],
                "test_signed_zero": [
                    "self"
                ],
                "test_different_nans": [
                    "self"
                ],
                "test_first_nan_kept": [
                    "self"
                ],
                "test_do_not_mangle_na_values": [
                    "self",
                    "unique_nulls_fixture",
                    "unique_nulls_fixture2"
                ]
            },
            "TestIsin": {
                "test_invalid": [
                    "self"
                ],
                "test_basic": [
                    "self"
                ],
                "test_i8": [
                    "self"
                ],
                "test_large": [
                    "self"
                ],
                "test_categorical_from_codes": [
                    "self"
                ],
                "test_categorical_isin": [
                    "self"
                ],
                "test_same_nan_is_in": [
                    "self"
                ],
                "test_same_object_is_in": [
                    "self"
                ],
                "test_different_nans": [
                    "self"
                ],
                "test_no_cast": [
                    "self"
                ],
                "test_empty": [
                    "self",
                    "empty"
                ],
                "test_different_nan_objects": [
                    "self"
                ],
                "test_different_nans_as_float64": [
                    "self"
                ],
                "test_isin_int_df_string_search": [
                    "self"
                ],
                "test_isin_nan_df_string_search": [
                    "self"
                ],
                "test_isin_float_df_string_search": [
                    "self"
                ]
            },
            "TestValueCounts": {
                "test_value_counts": [
                    "self"
                ],
                "test_value_counts_bins": [
                    "self"
                ],
                "test_value_counts_dtypes": [
                    "self"
                ],
                "test_value_counts_nat": [
                    "self"
                ],
                "test_value_counts_datetime_outofbounds": [
                    "self"
                ],
                "test_categorical": [
                    "self"
                ],
                "test_categorical_nans": [
                    "self"
                ],
                "test_categorical_zeroes": [
                    "self"
                ],
                "test_dropna": [
                    "self"
                ],
                "test_value_counts_normalized": [
                    "self"
                ],
                "test_value_counts_uint64": [
                    "self"
                ]
            },
            "TestDuplicated": {
                "test_duplicated_with_nas": [
                    "self"
                ],
                "test_numeric_object_likes": [
                    "self",
                    "case"
                ],
                "test_datetime_likes": [
                    "self"
                ],
                "test_unique_index": [
                    "self"
                ],
                "test_unique_tuples": [
                    "self",
                    "arr",
                    "unique"
                ]
            },
            "GroupVarTestMixin": {
                "test_group_var_generic_1d": [
                    "self"
                ],
                "test_group_var_generic_1d_flat_labels": [
                    "self"
                ],
                "test_group_var_generic_2d_all_finite": [
                    "self"
                ],
                "test_group_var_generic_2d_some_nan": [
                    "self"
                ],
                "test_group_var_constant": [
                    "self"
                ]
            },
            "TestGroupVarFloat64": {
                "test_group_var_large_inputs": [
                    "self"
                ]
            },
            "TestGroupVarFloat32": {},
            "TestHashTable": {
                "test_string_hashtable_set_item_signature": [
                    "self"
                ],
                "test_lookup_nan": [
                    "self",
                    "writable"
                ],
                "test_add_signed_zeros": [
                    "self"
                ],
                "test_add_different_nans": [
                    "self"
                ],
                "test_lookup_overflow": [
                    "self",
                    "writable"
                ],
                "test_get_unique": [
                    "self"
                ],
                "test_vector_resize": [
                    "self",
                    "writable",
                    "htable",
                    "uniques",
                    "dtype",
                    "safely_resizes",
                    "nvals"
                ],
                "test_hashtable_unique": [
                    "self",
                    "htable",
                    "tm_dtype",
                    "writable"
                ],
                "test_hashtable_factorize": [
                    "self",
                    "htable",
                    "tm_dtype",
                    "writable"
                ],
                "test_hashtable_large_sizehint": [
                    "self",
                    "hashtable"
                ]
            },
            "TestRank": {
                "test_scipy_compat": [
                    "self"
                ],
                "test_basic": [
                    "self"
                ],
                "test_uint64_overflow": [
                    "self"
                ],
                "test_too_many_ndims": [
                    "self"
                ],
                "test_pct_max_many_rows": [
                    "self",
                    "values"
                ]
            },
            "TestTseriesUtil": {
                "test_combineFunc": [
                    "self"
                ],
                "test_reindex": [
                    "self"
                ],
                "test_isna": [
                    "self"
                ],
                "test_groupby": [
                    "self"
                ],
                "test_groupby_withnull": [
                    "self"
                ],
                "test_backfill": [
                    "self"
                ],
                "test_pad": [
                    "self"
                ]
            },
            "TestMode": {
                "test_no_mode": [
                    "self"
                ],
                "test_mode_single": [
                    "self"
                ],
                "test_number_mode": [
                    "self"
                ],
                "test_strobj_mode": [
                    "self"
                ],
                "test_datelike_mode": [
                    "self"
                ],
                "test_timedelta_mode": [
                    "self"
                ],
                "test_mixed_dtype": [
                    "self"
                ],
                "test_uint64_overflow": [
                    "self"
                ],
                "test_categorical": [
                    "self"
                ],
                "test_index": [
                    "self"
                ]
            }
        },
        "pandas.tests.test_join": {
            "test_left_join_indexer_unique": [],
            "test_left_outer_join_bug": [],
            "test_inner_join_indexer": [],
            "test_outer_join_indexer": [],
            "test_left_join_indexer": [],
            "test_left_join_indexer2": [],
            "test_outer_join_indexer2": [],
            "test_inner_join_indexer2": [],
            "test_merge_join_categorical_multiindex": [],
            "TestIndexer": {
                "test_outer_join_indexer": [
                    "self",
                    "dtype"
                ]
            }
        },
        "pandas.tests.test_common": {
            "test_get_callable_name": [],
            "test_any_none": [],
            "test_all_not_none": [],
            "test_random_state": [],
            "test_maybe_match_name": [
                "left",
                "right",
                "expected"
            ],
            "test_dict_compat": [],
            "test_standardize_mapping": [],
            "test_git_version": [],
            "test_version_tag": []
        },
        "pandas.tests.test_take": {
            "writeable": [
                "request"
            ],
            "dtype_can_hold_na": [
                "request"
            ],
            "dtype_fill_out_dtype": [
                "request"
            ],
            "TestTake": {
                "test_1d_with_out": [
                    "self",
                    "dtype_can_hold_na",
                    "writeable"
                ],
                "test_1d_fill_nonna": [
                    "self",
                    "dtype_fill_out_dtype"
                ],
                "test_2d_with_out": [
                    "self",
                    "dtype_can_hold_na",
                    "writeable"
                ],
                "test_2d_fill_nonna": [
                    "self",
                    "dtype_fill_out_dtype"
                ],
                "test_3d_with_out": [
                    "self",
                    "dtype_can_hold_na"
                ],
                "test_3d_fill_nonna": [
                    "self",
                    "dtype_fill_out_dtype"
                ],
                "test_1d_other_dtypes": [
                    "self"
                ],
                "test_2d_other_dtypes": [
                    "self"
                ],
                "test_1d_bool": [
                    "self"
                ],
                "test_2d_bool": [
                    "self"
                ],
                "test_2d_float32": [
                    "self"
                ],
                "test_2d_datetime64": [
                    "self"
                ],
                "test_take_axis_0": [
                    "self"
                ],
                "test_take_axis_1": [
                    "self"
                ]
            },
            "TestExtensionTake": {
                "test_bounds_check_large": [
                    "self"
                ],
                "test_bounds_check_small": [
                    "self"
                ],
                "test_take_empty": [
                    "self",
                    "allow_fill"
                ],
                "test_take_na_empty": [
                    "self"
                ],
                "test_take_coerces_list": [
                    "self"
                ]
            }
        },
        "pandas.tests": {},
        "pandas.tests.test_multilevel": {
            "Base": {
                "setup_method": [
                    "self",
                    "method"
                ]
            },
            "TestMultiLevel": {
                "test_append": [
                    "self"
                ],
                "test_dataframe_constructor": [
                    "self"
                ],
                "test_series_constructor": [
                    "self"
                ],
                "test_reindex_level": [
                    "self"
                ],
                "test_binops_level": [
                    "self"
                ],
                "test_pickle": [
                    "self"
                ],
                "test_reindex": [
                    "self"
                ],
                "test_reindex_preserve_levels": [
                    "self"
                ],
                "test_repr_to_string": [
                    "self"
                ],
                "test_repr_name_coincide": [
                    "self"
                ],
                "test_delevel_infer_dtype": [
                    "self"
                ],
                "test_reset_index_with_drop": [
                    "self"
                ],
                "test_count_level": [
                    "self"
                ],
                "test_count_index_with_nan": [
                    "self"
                ],
                "test_count_level_series": [
                    "self"
                ],
                "test_count_level_corner": [
                    "self"
                ],
                "test_get_level_number_out_of_bounds": [
                    "self"
                ],
                "test_unstack": [
                    "self"
                ],
                "test_unstack_partial": [
                    "self",
                    "result_rows",
                    "result_columns",
                    "index_product",
                    "expected_row"
                ],
                "test_unstack_multiple_no_empty_columns": [
                    "self"
                ],
                "test_stack": [
                    "self"
                ],
                "test_unstack_odd_failure": [
                    "self"
                ],
                "test_stack_mixed_dtype": [
                    "self"
                ],
                "test_unstack_bug": [
                    "self"
                ],
                "test_stack_unstack_preserve_names": [
                    "self"
                ],
                "test_stack_unstack_wrong_level_name": [
                    "self",
                    "method"
                ],
                "test_unused_level_raises": [
                    "self"
                ],
                "test_unstack_level_name": [
                    "self"
                ],
                "test_stack_level_name": [
                    "self"
                ],
                "test_stack_unstack_multiple": [
                    "self"
                ],
                "test_stack_names_and_numbers": [
                    "self"
                ],
                "test_stack_multiple_out_of_bounds": [
                    "self"
                ],
                "test_unstack_period_series": [
                    "self"
                ],
                "test_unstack_period_frame": [
                    "self"
                ],
                "test_stack_multiple_bug": [
                    "self"
                ],
                "test_stack_dropna": [
                    "self"
                ],
                "test_unstack_multiple_hierarchical": [
                    "self"
                ],
                "test_groupby_transform": [
                    "self"
                ],
                "test_unstack_sparse_keyspace": [
                    "self"
                ],
                "test_unstack_unobserved_keys": [
                    "self"
                ],
                "test_unstack_number_of_levels_larger_than_int32": [
                    "self"
                ],
                "test_stack_order_with_unsorted_levels": [
                    "self"
                ],
                "test_stack_unstack_unordered_multiindex": [
                    "self"
                ],
                "test_groupby_corner": [
                    "self"
                ],
                "test_groupby_level_no_obs": [
                    "self"
                ],
                "test_join": [
                    "self"
                ],
                "test_swaplevel": [
                    "self"
                ],
                "test_insert_index": [
                    "self"
                ],
                "test_alignment": [
                    "self"
                ],
                "test_count": [
                    "self"
                ],
                "test_series_group_min_max": [
                    "self",
                    "op",
                    "level",
                    "skipna",
                    "sort"
                ],
                "test_frame_group_ops": [
                    "self",
                    "op",
                    "level",
                    "axis",
                    "skipna",
                    "sort"
                ],
                "test_stat_op_corner": [
                    "self"
                ],
                "test_frame_any_all_group": [
                    "self"
                ],
                "test_series_any_timedelta": [
                    "self"
                ],
                "test_std_var_pass_ddof": [
                    "self"
                ],
                "test_frame_series_agg_multiple_levels": [
                    "self"
                ],
                "test_groupby_multilevel": [
                    "self"
                ],
                "test_groupby_multilevel_with_transform": [
                    "self"
                ],
                "test_multilevel_consolidate": [
                    "self"
                ],
                "test_loc_preserve_names": [
                    "self"
                ],
                "test_unstack_preserve_types": [
                    "self"
                ],
                "test_unstack_group_index_overflow": [
                    "self"
                ],
                "test_to_html": [
                    "self"
                ],
                "test_level_with_tuples": [
                    "self"
                ],
                "test_mixed_depth_pop": [
                    "self"
                ],
                "test_reindex_level_partial_selection": [
                    "self"
                ],
                "test_unicode_repr_level_names": [
                    "self"
                ],
                "test_join_segfault": [
                    "self"
                ],
                "test_frame_dict_constructor_empty_series": [
                    "self"
                ],
                "test_empty_frame_groupby_dtypes_consistency": [
                    "self",
                    "d"
                ],
                "test_multiindex_na_repr": [
                    "self"
                ],
                "test_assign_index_sequences": [
                    "self"
                ],
                "test_duplicate_groupby_issues": [
                    "self"
                ],
                "test_duplicate_mi": [
                    "self"
                ],
                "test_multiindex_set_index": [
                    "self"
                ],
                "test_set_index_datetime": [
                    "self"
                ],
                "test_reset_index_datetime": [
                    "self"
                ],
                "test_reset_index_period": [
                    "self"
                ],
                "test_reset_index_multiindex_columns": [
                    "self"
                ],
                "test_set_index_period": [
                    "self"
                ],
                "test_repeat": [
                    "self"
                ],
                "test_subsets_multiindex_dtype": [
                    "self"
                ]
            },
            "TestSorted": {
                "test_sort_index_preserve_levels": [
                    "self"
                ],
                "test_sorting_repr_8017": [
                    "self"
                ],
                "test_sort_non_lexsorted": [
                    "self"
                ],
                "test_multilevel_index_loc_order": [
                    "self",
                    "dim",
                    "keys",
                    "expected"
                ]
            }
        },
        "pandas.tests.resample.test_base": {
            "create_index": [
                "_index_factory"
            ],
            "test_asfreq": [
                "series_and_frame",
                "freq",
                "create_index"
            ],
            "test_asfreq_fill_value": [
                "series",
                "create_index"
            ],
            "test_resample_interpolate": [
                "frame"
            ],
            "test_raises_on_non_datetimelike_index": [],
            "test_resample_empty_series": [
                "freq",
                "empty_series_dti",
                "resample_method"
            ],
            "test_resample_count_empty_series": [
                "freq",
                "empty_series_dti",
                "resample_method"
            ],
            "test_resample_empty_dataframe": [
                "empty_frame_dti",
                "freq",
                "resample_method"
            ],
            "test_resample_count_empty_dataframe": [
                "freq",
                "empty_frame_dti"
            ],
            "test_resample_size_empty_dataframe": [
                "freq",
                "empty_frame_dti"
            ],
            "test_resample_empty_dtypes": [
                "index",
                "dtype",
                "resample_method"
            ],
            "test_apply_to_empty_series": [
                "empty_series_dti"
            ],
            "test_resampler_is_iterable": [
                "series"
            ],
            "test_resample_quantile": [
                "series"
            ]
        },
        "pandas.tests.resample.test_deprecated": {
            "_index_factory": [],
            "create_index": [
                "_index_factory"
            ],
            "test_deprecating_on_loffset_and_base": [],
            "test_resample_loffset_arg_type": [
                "frame",
                "create_index",
                "arg"
            ],
            "test_resample_loffset": [
                "loffset"
            ],
            "test_resample_loffset_upsample": [],
            "test_resample_loffset_count": [],
            "test_resample_base": [],
            "test_resample_float_base": [],
            "test_loffset_returns_datetimeindex": [
                "frame",
                "kind",
                "agg_arg"
            ],
            "test_resample_with_non_zero_base": [
                "start",
                "end",
                "start_freq",
                "end_freq",
                "base",
                "offset"
            ],
            "test_resample_base_with_timedeltaindex": []
        },
        "pandas.tests.resample.test_time_grouper": {
            "test_apply": [],
            "test_count": [],
            "test_numpy_reduction": [],
            "test_apply_iteration": [],
            "test_fails_on_no_datetime_index": [
                "name",
                "func"
            ],
            "test_aaa_group_order": [],
            "test_aggregate_normal": [
                "resample_method"
            ],
            "test_resample_entirely_nat_window": [
                "method",
                "method_args",
                "unit"
            ],
            "test_aggregate_with_nat": [
                "func",
                "fill_value"
            ],
            "test_aggregate_with_nat_size": [],
            "test_repr": [],
            "test_upsample_sum": [
                "method",
                "method_args",
                "expected_values"
            ]
        },
        "pandas.tests.resample.test_datetime_index": {
            "_index_factory": [],
            "_index_freq": [],
            "_static_values": [
                "index"
            ],
            "test_custom_grouper": [
                "index"
            ],
            "test_resample_basic": [
                "series",
                "closed",
                "expected"
            ],
            "test_resample_integerarray": [],
            "test_resample_basic_grouper": [
                "series"
            ],
            "test_resample_string_kwargs": [
                "series",
                "keyword",
                "value"
            ],
            "test_resample_how": [
                "series",
                "downsample_method"
            ],
            "test_resample_how_ohlc": [
                "series"
            ],
            "test_numpy_compat": [
                "func"
            ],
            "test_resample_how_callables": [],
            "test_resample_rounding": [],
            "test_resample_basic_from_daily": [],
            "test_resample_upsampling_picked_but_not_correct": [],
            "test_resample_frame_basic": [],
            "test_resample_upsample": [],
            "test_resample_how_method": [],
            "test_resample_extra_index_point": [],
            "test_upsample_with_limit": [],
            "test_nearest_upsample_with_limit": [
                "tz_aware_fixture",
                "freq",
                "rule"
            ],
            "test_resample_ohlc": [
                "series"
            ],
            "test_resample_ohlc_result": [],
            "test_resample_ohlc_dataframe": [],
            "test_resample_dup_index": [],
            "test_resample_reresample": [],
            "test_resample_timestamp_to_period": [
                "simple_date_range_series"
            ],
            "test_ohlc_5min": [],
            "test_downsample_non_unique": [],
            "test_asfreq_non_unique": [],
            "test_resample_axis1": [],
            "test_resample_anchored_ticks": [],
            "test_resample_single_group": [],
            "test_resample_offset": [],
            "test_resample_origin": [],
            "test_resample_bad_origin": [
                "origin"
            ],
            "test_resample_bad_offset": [
                "offset"
            ],
            "test_resample_origin_prime_freq": [],
            "test_resample_origin_with_tz": [],
            "test_resample_origin_epoch_with_tz_day_vs_24h": [],
            "test_resample_origin_with_day_freq_on_dst": [],
            "test_resample_daily_anchored": [],
            "test_resample_to_period_monthly_buglet": [],
            "test_period_with_agg": [],
            "test_resample_segfault": [],
            "test_resample_dtype_preservation": [],
            "test_resample_dtype_coercion": [],
            "test_weekly_resample_buglet": [],
            "test_monthly_resample_error": [],
            "test_nanosecond_resample_error": [],
            "test_resample_anchored_intraday": [
                "simple_date_range_series"
            ],
            "test_resample_anchored_monthstart": [
                "simple_date_range_series"
            ],
            "test_resample_anchored_multiday": [],
            "test_corner_cases": [
                "simple_period_range_series",
                "simple_date_range_series"
            ],
            "test_anchored_lowercase_buglet": [],
            "test_upsample_apply_functions": [],
            "test_resample_not_monotonic": [],
            "test_resample_median_bug_1688": [],
            "test_how_lambda_functions": [
                "simple_date_range_series"
            ],
            "test_resample_unequal_times": [],
            "test_resample_consistency": [],
            "test_resample_timegrouper": [],
            "test_resample_nunique": [],
            "test_resample_nunique_preserves_column_level_names": [],
            "test_resample_nunique_with_date_gap": [],
            "test_resample_group_info": [
                "n",
                "k"
            ],
            "test_resample_size": [],
            "test_resample_across_dst": [],
            "test_groupby_with_dst_time_change": [],
            "test_resample_dst_anchor": [],
            "test_downsample_across_dst": [],
            "test_downsample_across_dst_weekly": [],
            "test_downsample_dst_at_midnight": [],
            "test_resample_with_nat": [],
            "test_resample_datetime_values": [],
            "test_resample_apply_with_additional_args": [
                "series"
            ],
            "test_resample_equivalent_offsets": [
                "n1",
                "freq1",
                "n2",
                "freq2",
                "k"
            ],
            "test_get_timestamp_range_edges": [
                "first",
                "last",
                "freq",
                "exp_first",
                "exp_last"
            ],
            "test_resample_apply_product": []
        },
        "pandas.tests.resample.test_period_index": {
            "_index_factory": [],
            "_series_name": [],
            "TestPeriodIndex": {
                "test_asfreq": [
                    "self",
                    "series_and_frame",
                    "freq",
                    "kind"
                ],
                "test_asfreq_fill_value": [
                    "self",
                    "series"
                ],
                "test_selection": [
                    "self",
                    "index",
                    "freq",
                    "kind",
                    "kwargs"
                ],
                "test_annual_upsample_cases": [
                    "self",
                    "targ",
                    "conv",
                    "meth",
                    "month",
                    "simple_period_range_series"
                ],
                "test_basic_downsample": [
                    "self",
                    "simple_period_range_series"
                ],
                "test_not_subperiod": [
                    "self",
                    "simple_period_range_series",
                    "rule",
                    "expected_error_msg"
                ],
                "test_basic_upsample": [
                    "self",
                    "freq",
                    "simple_period_range_series"
                ],
                "test_upsample_with_limit": [
                    "self"
                ],
                "test_annual_upsample": [
                    "self",
                    "simple_period_range_series"
                ],
                "test_quarterly_upsample": [
                    "self",
                    "month",
                    "target",
                    "convention",
                    "simple_period_range_series"
                ],
                "test_monthly_upsample": [
                    "self",
                    "target",
                    "convention",
                    "simple_period_range_series"
                ],
                "test_resample_basic": [
                    "self"
                ],
                "test_resample_count": [
                    "self",
                    "freq",
                    "expected_vals"
                ],
                "test_resample_same_freq": [
                    "self",
                    "resample_method"
                ],
                "test_resample_incompat_freq": [
                    "self"
                ],
                "test_with_local_timezone_pytz": [
                    "self"
                ],
                "test_resample_with_pytz": [
                    "self"
                ],
                "test_with_local_timezone_dateutil": [
                    "self"
                ],
                "test_resample_nonexistent_time_bin_edge": [
                    "self"
                ],
                "test_resample_ambiguous_time_bin_edge": [
                    "self"
                ],
                "test_fill_method_and_how_upsample": [
                    "self"
                ],
                "test_weekly_upsample": [
                    "self",
                    "day",
                    "target",
                    "convention",
                    "simple_period_range_series"
                ],
                "test_resample_to_timestamps": [
                    "self",
                    "simple_period_range_series"
                ],
                "test_resample_to_quarterly": [
                    "self",
                    "simple_period_range_series"
                ],
                "test_resample_fill_missing": [
                    "self"
                ],
                "test_cant_fill_missing_dups": [
                    "self"
                ],
                "test_resample_5minute": [
                    "self",
                    "freq",
                    "kind"
                ],
                "test_upsample_daily_business_daily": [
                    "self",
                    "simple_period_range_series"
                ],
                "test_resample_irregular_sparse": [
                    "self"
                ],
                "test_resample_weekly_all_na": [
                    "self"
                ],
                "test_resample_tz_localized": [
                    "self"
                ],
                "test_closed_left_corner": [
                    "self"
                ],
                "test_quarterly_resampling": [
                    "self"
                ],
                "test_resample_weekly_bug_1726": [
                    "self"
                ],
                "test_resample_with_dst_time_change": [
                    "self"
                ],
                "test_resample_bms_2752": [
                    "self"
                ],
                "test_default_right_closed_label": [
                    "self"
                ],
                "test_default_left_closed_label": [
                    "self"
                ],
                "test_all_values_single_bin": [
                    "self"
                ],
                "test_evenly_divisible_with_no_extra_bins": [
                    "self"
                ],
                "test_upsampling_ohlc": [
                    "self",
                    "freq",
                    "period_mult",
                    "kind"
                ],
                "test_resample_with_nat": [
                    "self",
                    "periods",
                    "values",
                    "freq",
                    "expected_values"
                ],
                "test_resample_with_only_nat": [
                    "self"
                ],
                "test_resample_with_offset": [
                    "self",
                    "start",
                    "end",
                    "start_freq",
                    "end_freq",
                    "offset"
                ],
                "test_get_period_range_edges": [
                    "self",
                    "first",
                    "last",
                    "freq",
                    "exp_first",
                    "exp_last"
                ],
                "test_sum_min_count": [
                    "self"
                ]
            }
        },
        "pandas.tests.resample.test_resample_api": {
            "test_frame": [],
            "test_str": [],
            "test_api": [],
            "test_groupby_resample_api": [],
            "test_groupby_resample_on_api": [],
            "test_pipe": [
                "test_frame"
            ],
            "test_getitem": [
                "test_frame"
            ],
            "test_select_bad_cols": [
                "key",
                "test_frame"
            ],
            "test_attribute_access": [
                "test_frame"
            ],
            "test_api_compat_before_use": [],
            "tests_skip_nuisance": [
                "test_frame"
            ],
            "test_downsample_but_actually_upsampling": [],
            "test_combined_up_downsampling_of_irregular": [],
            "test_transform": [],
            "test_fillna": [],
            "test_apply_without_aggregation": [],
            "test_agg_consistency": [],
            "test_agg": [],
            "test_agg_misc": [],
            "test_agg_nested_dicts": [],
            "test_try_aggregate_non_existing_column": [],
            "test_selection_api_validation": [],
            "test_agg_with_datetime_index_list_agg_func": [
                "col_name"
            ],
            "test_resample_agg_readonly": []
        },
        "pandas.tests.resample.test_timedelta": {
            "test_asfreq_bug": [],
            "test_resample_with_nat": [],
            "test_resample_as_freq_with_subperiod": [],
            "test_resample_with_timedeltas": [],
            "test_resample_single_period_timedelta": [],
            "test_resample_timedelta_idempotency": [],
            "test_resample_offset_with_timedeltaindex": [],
            "test_resample_categorical_data_with_timedeltaindex": [],
            "test_resample_timedelta_values": [],
            "test_resample_timedelta_edge_case": [
                "start",
                "end",
                "freq",
                "resample_freq"
            ]
        },
        "pandas.tests.resample.test_resampler_grouper": {
            "test_deferred_with_groupby": [],
            "test_getitem": [],
            "test_getitem_multiple": [],
            "test_groupby_resample_on_api_with_getitem": [],
            "test_groupby_with_origin": [],
            "test_nearest": [],
            "test_methods": [],
            "test_apply": [],
            "test_apply_with_mutated_index": [],
            "test_apply_columns_multilevel": [],
            "test_resample_groupby_with_label": [],
            "test_consistency_with_window": [],
            "test_median_duplicate_columns": []
        },
        "pandas.tests.resample.conftest": {
            "downsample_method": [
                "request"
            ],
            "upsample_method": [
                "request"
            ],
            "resample_method": [
                "request"
            ],
            "simple_date_range_series": [],
            "simple_period_range_series": [],
            "_index_start": [],
            "_index_end": [],
            "_index_freq": [],
            "_index_name": [],
            "index": [
                "_index_factory",
                "_index_start",
                "_index_end",
                "_index_freq",
                "_index_name"
            ],
            "_static_values": [
                "index"
            ],
            "_series_name": [],
            "series": [
                "index",
                "_series_name",
                "_static_values"
            ],
            "empty_series_dti": [
                "series"
            ],
            "frame": [
                "index",
                "_series_name",
                "_static_values"
            ],
            "empty_frame_dti": [
                "series"
            ],
            "series_and_frame": [
                "request",
                "series",
                "frame"
            ]
        },
        "pandas.tests.resample": {},
        "pandas.tests.arrays.test_period": {
            "test_registered": [],
            "test_period_array_ok": [
                "data",
                "freq",
                "expected"
            ],
            "test_period_array_readonly_object": [],
            "test_from_datetime64_freq_changes": [],
            "test_period_array_raises": [
                "data",
                "freq",
                "msg"
            ],
            "test_period_array_non_period_series_raies": [],
            "test_period_array_freq_mismatch": [],
            "test_asi8": [],
            "test_take_raises": [],
            "test_astype": [
                "dtype"
            ],
            "test_astype_copies": [],
            "test_astype_categorical": [],
            "test_astype_period": [],
            "test_astype_datetime": [
                "other"
            ],
            "test_fillna_raises": [],
            "test_fillna_copies": [],
            "test_setitem": [
                "key",
                "value",
                "expected"
            ],
            "test_setitem_raises_incompatible_freq": [],
            "test_setitem_raises_length": [],
            "test_setitem_raises_type": [],
            "test_sub_period": [],
            "test_where_different_freq_raises": [
                "other"
            ],
            "test_repr_small": [],
            "test_repr_large": [],
            "test_arrow_extension_type": [],
            "test_arrow_array": [
                "data",
                "freq"
            ],
            "test_arrow_array_missing": [],
            "test_arrow_table_roundtrip": [],
            "test_arrow_table_roundtrip_without_metadata": [],
            "TestReductions": {
                "test_min_max": [
                    "self"
                ],
                "test_min_max_empty": [
                    "self",
                    "skipna"
                ]
            }
        },
        "pandas.tests.arrays.test_timedeltas": {
            "TestTimedeltaArrayConstructor": {
                "test_only_1dim_accepted": [
                    "self"
                ],
                "test_freq_validation": [
                    "self"
                ],
                "test_non_array_raises": [
                    "self"
                ],
                "test_other_type_raises": [
                    "self"
                ],
                "test_incorrect_dtype_raises": [
                    "self"
                ],
                "test_copy": [
                    "self"
                ]
            },
            "TestTimedeltaArray": {
                "test_np_sum": [
                    "self"
                ],
                "test_from_sequence_dtype": [
                    "self"
                ],
                "test_abs": [
                    "self"
                ],
                "test_neg": [
                    "self"
                ],
                "test_neg_freq": [
                    "self"
                ],
                "test_astype_int": [
                    "self",
                    "dtype"
                ],
                "test_setitem_clears_freq": [
                    "self"
                ],
                "test_setitem_objects": [
                    "self",
                    "obj"
                ],
                "test_searchsorted_invalid_types": [
                    "self",
                    "other",
                    "index"
                ]
            },
            "TestReductions": {
                "test_reductions_empty": [
                    "self",
                    "name",
                    "skipna"
                ],
                "test_min_max": [
                    "self"
                ],
                "test_sum": [
                    "self"
                ],
                "test_npsum": [
                    "self"
                ],
                "test_std": [
                    "self"
                ],
                "test_median": [
                    "self"
                ]
            }
        },
        "pandas.tests.arrays.test_datetimes": {
            "TestDatetimeArrayConstructor": {
                "test_from_sequence_invalid_type": [
                    "self"
                ],
                "test_only_1dim_accepted": [
                    "self"
                ],
                "test_freq_validation": [
                    "self"
                ],
                "test_mixing_naive_tzaware_raises": [
                    "self",
                    "meth"
                ],
                "test_from_pandas_array": [
                    "self"
                ],
                "test_mismatched_timezone_raises": [
                    "self"
                ],
                "test_non_array_raises": [
                    "self"
                ],
                "test_bool_dtype_raises": [
                    "self"
                ],
                "test_incorrect_dtype_raises": [
                    "self"
                ],
                "test_freq_infer_raises": [
                    "self"
                ],
                "test_copy": [
                    "self"
                ]
            },
            "TestDatetimeArrayComparisons": {
                "test_cmp_dt64_arraylike_tznaive": [
                    "self",
                    "all_compare_operators"
                ]
            },
            "TestDatetimeArray": {
                "test_astype_to_same": [
                    "self"
                ],
                "test_astype_copies": [
                    "self",
                    "dtype",
                    "other"
                ],
                "test_astype_int": [
                    "self",
                    "dtype"
                ],
                "test_tz_setter_raises": [
                    "self"
                ],
                "test_setitem_different_tz_raises": [
                    "self"
                ],
                "test_setitem_clears_freq": [
                    "self"
                ],
                "test_setitem_objects": [
                    "self",
                    "obj"
                ],
                "test_repeat_preserves_tz": [
                    "self"
                ],
                "test_value_counts_preserves_tz": [
                    "self"
                ],
                "test_fillna_preserves_tz": [
                    "self",
                    "method"
                ],
                "test_array_interface_tz": [
                    "self"
                ],
                "test_array_interface": [
                    "self"
                ],
                "test_searchsorted_different_tz": [
                    "self",
                    "index"
                ],
                "test_searchsorted_tzawareness_compat": [
                    "self",
                    "index"
                ],
                "test_searchsorted_invalid_types": [
                    "self",
                    "other",
                    "index"
                ],
                "test_shift_fill_value": [
                    "self"
                ],
                "test_shift_value_tzawareness_mismatch": [
                    "self"
                ]
            },
            "TestSequenceToDT64NS": {
                "test_tz_dtype_mismatch_raises": [
                    "self"
                ],
                "test_tz_dtype_matches": [
                    "self"
                ]
            },
            "TestReductions": {
                "test_min_max": [
                    "self",
                    "tz"
                ],
                "test_min_max_empty": [
                    "self",
                    "skipna",
                    "tz"
                ]
            }
        },
        "pandas.tests.arrays.test_array": {
            "test_array": [
                "data",
                "dtype",
                "expected"
            ],
            "test_array_copy": [],
            "test_array_inference": [
                "data",
                "expected"
            ],
            "test_array_inference_fails": [
                "data"
            ],
            "test_nd_raises": [
                "data"
            ],
            "test_scalar_raises": [],
            "test_array_unboxes": [
                "index_or_series"
            ],
            "registry_without_decimal": [],
            "test_array_not_registered": [
                "registry_without_decimal"
            ],
            "DecimalDtype2": {
                "construct_array_type": [
                    "cls"
                ]
            },
            "DecimalArray2": {
                "_from_sequence": [
                    "cls",
                    "scalars",
                    "dtype",
                    "copy"
                ]
            },
            "TestArrayAnalytics": {
                "test_searchsorted": [
                    "self",
                    "string_dtype"
                ],
                "test_searchsorted_numeric_dtypes_scalar": [
                    "self",
                    "any_real_dtype"
                ],
                "test_searchsorted_numeric_dtypes_vector": [
                    "self",
                    "any_real_dtype"
                ],
                "test_search_sorted_datetime64_scalar": [
                    "self",
                    "arr",
                    "val"
                ],
                "test_searchsorted_sorter": [
                    "self",
                    "any_real_dtype"
                ]
            }
        },
        "pandas.tests.arrays.test_datetimelike": {
            "period_index": [
                "request"
            ],
            "datetime_index": [
                "request"
            ],
            "timedelta_index": [
                "request"
            ],
            "test_casting_nat_setitem_array": [
                "array",
                "casting_nats"
            ],
            "test_invalid_nat_setitem_array": [
                "array",
                "non_casting_nats"
            ],
            "test_to_numpy_extra": [
                "array"
            ],
            "test_searchsorted_datetimelike_with_listlike": [
                "values",
                "klass",
                "as_index"
            ],
            "test_searchsorted_datetimelike_with_listlike_invalid_dtype": [
                "values",
                "arg"
            ],
            "test_period_index_construction_from_strings": [
                "klass"
            ],
            "SharedTests": {
                "arr1d": [
                    "self"
                ],
                "test_compare_len1_raises": [
                    "self"
                ],
                "test_compare_categorical_dtype": [
                    "self",
                    "arr1d",
                    "as_index",
                    "reverse",
                    "ordered"
                ],
                "test_take": [
                    "self"
                ],
                "test_take_fill_raises": [
                    "self",
                    "fill_value"
                ],
                "test_take_fill": [
                    "self"
                ],
                "test_concat_same_type": [
                    "self"
                ],
                "test_unbox_scalar": [
                    "self"
                ],
                "test_check_compatible_with": [
                    "self"
                ],
                "test_scalar_from_string": [
                    "self"
                ],
                "test_reduce_invalid": [
                    "self"
                ],
                "test_fillna_method_doesnt_change_orig": [
                    "self",
                    "method"
                ],
                "test_searchsorted": [
                    "self"
                ],
                "test_getitem_2d": [
                    "self",
                    "arr1d"
                ],
                "test_setitem": [
                    "self"
                ],
                "test_setitem_str_array": [
                    "self",
                    "arr1d"
                ],
                "test_setitem_categorical": [
                    "self",
                    "arr1d",
                    "as_index"
                ],
                "test_setitem_raises": [
                    "self"
                ],
                "test_setitem_numeric_raises": [
                    "self",
                    "arr1d",
                    "box"
                ],
                "test_inplace_arithmetic": [
                    "self"
                ],
                "test_shift_fill_int_deprecated": [
                    "self"
                ]
            },
            "TestDatetimeArray": {
                "arr1d": [
                    "self",
                    "tz_naive_fixture"
                ],
                "test_round": [
                    "self",
                    "tz_naive_fixture"
                ],
                "test_array_interface": [
                    "self",
                    "datetime_index"
                ],
                "test_array_object_dtype": [
                    "self",
                    "tz_naive_fixture"
                ],
                "test_array_tz": [
                    "self",
                    "tz_naive_fixture"
                ],
                "test_array_i8_dtype": [
                    "self",
                    "tz_naive_fixture"
                ],
                "test_from_array_keeps_base": [
                    "self"
                ],
                "test_from_dti": [
                    "self",
                    "tz_naive_fixture"
                ],
                "test_astype_object": [
                    "self",
                    "tz_naive_fixture"
                ],
                "test_to_perioddelta": [
                    "self",
                    "datetime_index",
                    "freqstr"
                ],
                "test_to_period": [
                    "self",
                    "datetime_index",
                    "freqstr"
                ],
                "test_bool_properties": [
                    "self",
                    "datetime_index",
                    "propname"
                ],
                "test_int_properties": [
                    "self",
                    "datetime_index",
                    "propname"
                ],
                "test_take_fill_valid": [
                    "self",
                    "datetime_index",
                    "tz_naive_fixture"
                ],
                "test_concat_same_type_invalid": [
                    "self",
                    "datetime_index"
                ],
                "test_concat_same_type_different_freq": [
                    "self"
                ],
                "test_strftime": [
                    "self",
                    "datetime_index"
                ],
                "test_strftime_nat": [
                    "self"
                ]
            },
            "TestTimedeltaArray": {
                "test_from_tdi": [
                    "self"
                ],
                "test_astype_object": [
                    "self"
                ],
                "test_to_pytimedelta": [
                    "self",
                    "timedelta_index"
                ],
                "test_total_seconds": [
                    "self",
                    "timedelta_index"
                ],
                "test_int_properties": [
                    "self",
                    "timedelta_index",
                    "propname"
                ],
                "test_array_interface": [
                    "self",
                    "timedelta_index"
                ],
                "test_take_fill_valid": [
                    "self",
                    "timedelta_index"
                ]
            },
            "TestPeriodArray": {
                "arr1d": [
                    "self",
                    "period_index"
                ],
                "test_from_pi": [
                    "self",
                    "period_index"
                ],
                "test_astype_object": [
                    "self",
                    "period_index"
                ],
                "test_take_fill_valid": [
                    "self",
                    "period_index"
                ],
                "test_to_timestamp": [
                    "self",
                    "how",
                    "period_index"
                ],
                "test_to_timestamp_out_of_bounds": [
                    "self"
                ],
                "test_bool_properties": [
                    "self",
                    "period_index",
                    "propname"
                ],
                "test_int_properties": [
                    "self",
                    "period_index",
                    "propname"
                ],
                "test_array_interface": [
                    "self",
                    "period_index"
                ],
                "test_strftime": [
                    "self",
                    "period_index"
                ],
                "test_strftime_nat": [
                    "self"
                ]
            }
        },
        "pandas.tests.arrays.test_numpy": {
            "any_numpy_array": [
                "request"
            ],
            "test_is_numeric": [
                "dtype",
                "expected"
            ],
            "test_is_boolean": [
                "dtype",
                "expected"
            ],
            "test_repr": [],
            "test_constructor_from_string": [],
            "test_constructor_no_coercion": [],
            "test_series_constructor_with_copy": [],
            "test_series_constructor_with_astype": [],
            "test_from_sequence_dtype": [],
            "test_constructor_copy": [],
            "test_constructor_with_data": [
                "any_numpy_array"
            ],
            "test_to_numpy": [],
            "test_setitem_series": [],
            "test_setitem": [
                "any_numpy_array"
            ],
            "test_bad_reduce_raises": [],
            "test_validate_reduction_keyword_args": [],
            "test_ufunc": [],
            "test_basic_binop": [],
            "test_setitem_object_typecode": [
                "dtype"
            ],
            "test_setitem_no_coercion": [],
            "test_setitem_preserves_views": []
        },
        "pandas.tests.arrays": {},
        "pandas.tests.arrays.interval.test_ops": {
            "constructor": [
                "request"
            ],
            "start_shift": [
                "request"
            ],
            "TestOverlaps": {
                "test_overlaps_interval": [
                    "self",
                    "constructor",
                    "start_shift",
                    "closed",
                    "other_closed"
                ],
                "test_overlaps_interval_container": [
                    "self",
                    "constructor",
                    "other_constructor"
                ],
                "test_overlaps_na": [
                    "self",
                    "constructor",
                    "start_shift"
                ],
                "test_overlaps_invalid_type": [
                    "self",
                    "constructor",
                    "other"
                ]
            }
        },
        "pandas.tests.arrays.interval.test_interval": {
            "left_right_dtypes": [
                "request"
            ],
            "test_repr": [],
            "test_arrow_extension_type": [],
            "test_arrow_array": [],
            "test_arrow_array_missing": [],
            "test_arrow_table_roundtrip": [
                "breaks"
            ],
            "test_arrow_table_roundtrip_without_metadata": [
                "breaks"
            ],
            "TestAttributes": {
                "test_is_empty": [
                    "self",
                    "constructor",
                    "left",
                    "right",
                    "closed"
                ]
            },
            "TestMethods": {
                "test_set_closed": [
                    "self",
                    "closed",
                    "new_closed"
                ],
                "test_where_raises": [
                    "self",
                    "other"
                ],
                "test_shift": [
                    "self"
                ],
                "test_shift_datetime": [
                    "self"
                ]
            },
            "TestSetitem": {
                "test_set_na": [
                    "self",
                    "left_right_dtypes"
                ]
            }
        },
        "pandas.tests.arrays.interval": {},
        "pandas.tests.arrays.categorical.test_sorting": {
            "TestCategoricalSort": {
                "test_argsort": [
                    "self"
                ],
                "test_numpy_argsort": [
                    "self"
                ],
                "test_sort_values": [
                    "self"
                ],
                "test_sort_values_na_position": [
                    "self"
                ]
            }
        },
        "pandas.tests.arrays.categorical.test_replace": {
            "test_replace": [
                "to_replace",
                "value",
                "expected",
                "flip_categories"
            ]
        },
        "pandas.tests.arrays.categorical.test_operators": {
            "TestCategoricalOpsWithFactor": {
                "test_categories_none_comparisons": [
                    "self"
                ],
                "test_comparisons": [
                    "self"
                ]
            },
            "TestCategoricalOps": {
                "test_compare_frame": [
                    "self"
                ],
                "test_compare_frame_raises": [
                    "self",
                    "all_compare_operators"
                ],
                "test_datetime_categorical_comparison": [
                    "self"
                ],
                "test_reflected_comparison_with_scalars": [
                    "self"
                ],
                "test_comparison_with_unknown_scalars": [
                    "self"
                ],
                "test_comparison_of_ordered_categorical_with_nan_to_scalar": [
                    "self",
                    "compare_operators_no_eq_ne"
                ],
                "test_comparison_of_ordered_categorical_with_nan_to_listlike": [
                    "self",
                    "compare_operators_no_eq_ne"
                ],
                "test_comparisons": [
                    "self",
                    "data",
                    "reverse",
                    "base"
                ],
                "test_unordered_different_order_equal": [
                    "self",
                    "ctor"
                ],
                "test_unordered_different_categories_raises": [
                    "self"
                ],
                "test_compare_different_lengths": [
                    "self"
                ],
                "test_compare_unordered_different_order": [
                    "self"
                ],
                "test_numeric_like_ops": [
                    "self"
                ],
                "test_contains": [
                    "self"
                ],
                "test_contains_interval": [
                    "self",
                    "item",
                    "expected"
                ],
                "test_contains_list": [
                    "self"
                ]
            }
        },
        "pandas.tests.arrays.categorical.common": {
            "TestCategorical": {
                "setup_method": [
                    "self",
                    "method"
                ]
            }
        },
        "pandas.tests.arrays.categorical.test_algos": {
            "test_factorize": [
                "categories",
                "ordered"
            ],
            "test_factorized_sort": [],
            "test_factorized_sort_ordered": [],
            "test_isin_cats": [],
            "test_replace": [
                "to_replace",
                "value",
                "result",
                "expected_error_msg"
            ],
            "test_isin_empty": [
                "empty"
            ],
            "test_diff": [],
            "TestTake": {
                "test_take_default_allow_fill": [
                    "self"
                ],
                "test_take_positive_no_warning": [
                    "self"
                ],
                "test_take_bounds": [
                    "self",
                    "allow_fill"
                ],
                "test_take_empty": [
                    "self",
                    "allow_fill"
                ],
                "test_positional_take": [
                    "self",
                    "ordered"
                ],
                "test_positional_take_unobserved": [
                    "self",
                    "ordered"
                ],
                "test_take_allow_fill": [
                    "self"
                ],
                "test_take_fill_with_negative_one": [
                    "self"
                ],
                "test_take_fill_value": [
                    "self"
                ],
                "test_take_fill_value_new_raises": [
                    "self"
                ],
                "test_take_nd_deprecated": [
                    "self"
                ]
            }
        },
        "pandas.tests.arrays.categorical.test_api": {
            "TestCategoricalAPI": {
                "test_ordered_api": [
                    "self"
                ],
                "test_set_ordered": [
                    "self"
                ],
                "test_rename_categories": [
                    "self"
                ],
                "test_rename_categories_wrong_length_raises": [
                    "self",
                    "new_categories"
                ],
                "test_rename_categories_series": [
                    "self"
                ],
                "test_rename_categories_dict": [
                    "self"
                ],
                "test_reorder_categories": [
                    "self"
                ],
                "test_reorder_categories_raises": [
                    "self",
                    "new_categories"
                ],
                "test_add_categories": [
                    "self"
                ],
                "test_add_categories_existing_raises": [
                    "self"
                ],
                "test_set_categories": [
                    "self"
                ],
                "test_to_dense_deprecated": [
                    "self"
                ],
                "test_set_categories_many": [
                    "self",
                    "values",
                    "categories",
                    "new_categories",
                    "ordered"
                ],
                "test_set_categories_rename_less": [
                    "self"
                ],
                "test_set_categories_private": [
                    "self"
                ],
                "test_remove_categories": [
                    "self"
                ],
                "test_remove_categories_raises": [
                    "self",
                    "removals"
                ],
                "test_remove_unused_categories": [
                    "self"
                ]
            },
            "TestCategoricalAPIWithFactor": {
                "test_describe": [
                    "self"
                ],
                "test_set_categories_inplace": [
                    "self"
                ]
            },
            "TestPrivateCategoricalAPI": {
                "test_codes_immutable": [
                    "self"
                ],
                "test_recode_to_categories": [
                    "self",
                    "codes",
                    "old",
                    "new",
                    "expected"
                ],
                "test_recode_to_categories_large": [
                    "self"
                ]
            }
        },
        "pandas.tests.arrays.categorical.test_subclass": {
            "TestCategoricalSubclassing": {
                "test_constructor": [
                    "self"
                ],
                "test_from_codes": [
                    "self"
                ],
                "test_map": [
                    "self"
                ]
            }
        },
        "pandas.tests.arrays.categorical.test_repr": {
            "TestCategoricalReprWithFactor": {
                "test_print": [
                    "self"
                ]
            },
            "TestCategoricalRepr": {
                "test_big_print": [
                    "self"
                ],
                "test_empty_print": [
                    "self"
                ],
                "test_print_none_width": [
                    "self"
                ],
                "test_unicode_print": [
                    "self"
                ],
                "test_categorical_repr": [
                    "self"
                ],
                "test_categorical_repr_ordered": [
                    "self"
                ],
                "test_categorical_repr_datetime": [
                    "self"
                ],
                "test_categorical_repr_datetime_ordered": [
                    "self"
                ],
                "test_categorical_repr_int_with_nan": [
                    "self"
                ],
                "test_categorical_repr_period": [
                    "self"
                ],
                "test_categorical_repr_period_ordered": [
                    "self"
                ],
                "test_categorical_repr_timedelta": [
                    "self"
                ],
                "test_categorical_repr_timedelta_ordered": [
                    "self"
                ],
                "test_categorical_index_repr": [
                    "self"
                ],
                "test_categorical_index_repr_ordered": [
                    "self"
                ],
                "test_categorical_index_repr_datetime": [
                    "self"
                ],
                "test_categorical_index_repr_datetime_ordered": [
                    "self"
                ],
                "test_categorical_index_repr_period": [
                    "self"
                ],
                "test_categorical_index_repr_period_ordered": [
                    "self"
                ],
                "test_categorical_index_repr_timedelta": [
                    "self"
                ],
                "test_categorical_index_repr_timedelta_ordered": [
                    "self"
                ],
                "test_categorical_str_repr": [
                    "self"
                ]
            }
        },
        "pandas.tests.arrays.categorical.test_constructors": {
            "TestCategoricalConstructors": {
                "test_validate_ordered": [
                    "self"
                ],
                "test_constructor_empty": [
                    "self"
                ],
                "test_constructor_empty_boolean": [
                    "self"
                ],
                "test_constructor_tuples": [
                    "self"
                ],
                "test_constructor_tuples_datetimes": [
                    "self"
                ],
                "test_constructor_unsortable": [
                    "self"
                ],
                "test_constructor_interval": [
                    "self"
                ],
                "test_constructor": [
                    "self"
                ],
                "test_constructor_with_existing_categories": [
                    "self"
                ],
                "test_constructor_not_sequence": [
                    "self"
                ],
                "test_constructor_with_null": [
                    "self"
                ],
                "test_constructor_with_index": [
                    "self"
                ],
                "test_constructor_with_generator": [
                    "self"
                ],
                "test_constructor_with_datetimelike": [
                    "self",
                    "dtl"
                ],
                "test_constructor_from_index_series_datetimetz": [
                    "self"
                ],
                "test_constructor_from_index_series_timedelta": [
                    "self"
                ],
                "test_constructor_from_index_series_period": [
                    "self"
                ],
                "test_constructor_invariant": [
                    "self",
                    "values"
                ],
                "test_constructor_with_dtype": [
                    "self",
                    "ordered"
                ],
                "test_constructor_dtype_and_others_raises": [
                    "self"
                ],
                "test_constructor_str_category": [
                    "self",
                    "categories",
                    "ordered"
                ],
                "test_constructor_str_unknown": [
                    "self"
                ],
                "test_constructor_np_strs": [
                    "self"
                ],
                "test_constructor_from_categorical_with_dtype": [
                    "self"
                ],
                "test_constructor_from_categorical_with_unknown_dtype": [
                    "self"
                ],
                "test_constructor_from_categorical_string": [
                    "self"
                ],
                "test_constructor_with_categorical_categories": [
                    "self"
                ],
                "test_construction_with_null": [
                    "self",
                    "klass",
                    "nulls_fixture"
                ],
                "test_from_codes_empty": [
                    "self"
                ],
                "test_from_codes_too_few_categories": [
                    "self"
                ],
                "test_from_codes_non_int_codes": [
                    "self"
                ],
                "test_from_codes_non_unique_categories": [
                    "self"
                ],
                "test_from_codes_nan_cat_included": [
                    "self"
                ],
                "test_from_codes_too_negative": [
                    "self"
                ],
                "test_from_codes": [
                    "self"
                ],
                "test_from_codes_with_categorical_categories": [
                    "self",
                    "klass"
                ],
                "test_from_codes_with_non_unique_categorical_categories": [
                    "self",
                    "klass"
                ],
                "test_from_codes_with_nan_code": [
                    "self"
                ],
                "test_from_codes_with_float": [
                    "self",
                    "codes"
                ],
                "test_from_codes_with_dtype_raises": [
                    "self"
                ],
                "test_from_codes_neither": [
                    "self"
                ],
                "test_from_codes_with_nullable_int": [
                    "self"
                ],
                "test_from_codes_with_nullable_int_na_raises": [
                    "self"
                ],
                "test_from_inferred_categories": [
                    "self",
                    "dtype"
                ],
                "test_from_inferred_categories_sorts": [
                    "self",
                    "dtype"
                ],
                "test_from_inferred_categories_dtype": [
                    "self"
                ],
                "test_from_inferred_categories_coerces": [
                    "self"
                ],
                "test_construction_with_ordered": [
                    "self",
                    "ordered"
                ],
                "test_constructor_imaginary": [
                    "self"
                ],
                "test_constructor_string_and_tuples": [
                    "self"
                ],
                "test_interval": [
                    "self"
                ]
            }
        },
        "pandas.tests.arrays.categorical.test_warnings": {
            "TestCategoricalWarnings": {}
        },
        "pandas.tests.arrays.categorical.test_dtypes": {
            "TestCategoricalDtypes": {
                "test_is_equal_dtype": [
                    "self"
                ],
                "test_set_dtype_same": [
                    "self"
                ],
                "test_set_dtype_new_categories": [
                    "self"
                ],
                "test_set_dtype_many": [
                    "self",
                    "values",
                    "categories",
                    "new_categories",
                    "ordered"
                ],
                "test_set_dtype_no_overlap": [
                    "self"
                ],
                "test_codes_dtypes": [
                    "self"
                ],
                "test_astype": [
                    "self",
                    "ordered"
                ],
                "test_astype_category": [
                    "self",
                    "dtype_ordered",
                    "cat_ordered"
                ],
                "test_iter_python_types": [
                    "self"
                ],
                "test_iter_python_types_datetime": [
                    "self"
                ]
            }
        },
        "pandas.tests.arrays.categorical.test_indexing": {
            "test_mask_with_boolean": [
                "index"
            ],
            "test_mask_with_boolean_na_treated_as_false": [
                "index"
            ],
            "non_coercible_categorical": [
                "monkeypatch"
            ],
            "test_series_at": [
                "non_coercible_categorical"
            ],
            "TestCategoricalIndexingWithFactor": {
                "test_getitem": [
                    "self"
                ],
                "test_setitem": [
                    "self"
                ],
                "test_setitem_same_but_unordered": [
                    "self",
                    "other"
                ],
                "test_setitem_different_unordered_raises": [
                    "self",
                    "other"
                ],
                "test_setitem_same_ordered_rasies": [
                    "self",
                    "other"
                ]
            },
            "TestCategoricalIndexing": {
                "test_getitem_slice": [
                    "self"
                ],
                "test_getitem_listlike": [
                    "self"
                ],
                "test_periodindex": [
                    "self"
                ],
                "test_categories_assignments": [
                    "self"
                ],
                "test_categories_assignments_wrong_length_raises": [
                    "self",
                    "new_categories"
                ],
                "test_get_indexer_non_unique": [
                    "self",
                    "idx_values",
                    "key_values",
                    "key_class"
                ],
                "test_where_unobserved_nan": [
                    "self"
                ],
                "test_where_unobserved_categories": [
                    "self"
                ],
                "test_where_other_categorical": [
                    "self"
                ],
                "test_where_new_category_raises": [
                    "self"
                ],
                "test_where_ordered_differs_rasies": [
                    "self"
                ]
            }
        },
        "pandas.tests.arrays.categorical.conftest": {
            "allow_fill": [
                "request"
            ]
        },
        "pandas.tests.arrays.categorical.test_analytics": {
            "TestCategoricalAnalytics": {
                "test_min_max_not_ordered_raises": [
                    "self",
                    "aggregation"
                ],
                "test_min_max_ordered": [
                    "self"
                ],
                "test_min_max_ordered_empty": [
                    "self",
                    "categories",
                    "expected",
                    "aggregation"
                ],
                "test_min_max_with_nan": [
                    "self",
                    "values",
                    "categories",
                    "function",
                    "skipna"
                ],
                "test_min_max_only_nan": [
                    "self",
                    "function",
                    "skipna"
                ],
                "test_deprecate_numeric_only_min_max": [
                    "self",
                    "method"
                ],
                "test_numpy_min_max_raises": [
                    "self",
                    "method"
                ],
                "test_numpy_min_max_unsupported_kwargs_raises": [
                    "self",
                    "method",
                    "kwarg"
                ],
                "test_numpy_min_max_axis_equals_none": [
                    "self",
                    "method",
                    "expected"
                ],
                "test_mode": [
                    "self",
                    "values",
                    "categories",
                    "exp_mode"
                ],
                "test_searchsorted": [
                    "self",
                    "ordered"
                ],
                "test_unique": [
                    "self"
                ],
                "test_unique_ordered": [
                    "self"
                ],
                "test_unique_index_series": [
                    "self"
                ],
                "test_shift": [
                    "self"
                ],
                "test_nbytes": [
                    "self"
                ],
                "test_memory_usage": [
                    "self"
                ],
                "test_map": [
                    "self"
                ],
                "test_validate_inplace_raises": [
                    "self",
                    "value"
                ],
                "test_isna": [
                    "self"
                ]
            }
        },
        "pandas.tests.arrays.categorical.test_missing": {
            "TestCategoricalMissing": {
                "test_na_flags_int_categories": [
                    "self"
                ],
                "test_nan_handling": [
                    "self"
                ],
                "test_set_dtype_nans": [
                    "self"
                ],
                "test_set_item_nan": [
                    "self"
                ],
                "test_fillna_raises": [
                    "self",
                    "fillna_kwargs",
                    "msg"
                ],
                "test_fillna_iterable_category": [
                    "self",
                    "named"
                ],
                "test_fillna_array": [
                    "self"
                ],
                "test_use_inf_as_na": [
                    "self",
                    "values",
                    "expected"
                ],
                "test_use_inf_as_na_outside_context": [
                    "self",
                    "values",
                    "expected"
                ]
            }
        },
        "pandas.tests.arrays.categorical": {},
        "pandas.tests.arrays.string_.test_string": {
            "test_repr": [],
            "test_none_to_nan": [],
            "test_setitem_validates": [],
            "test_setitem_with_scalar_string": [],
            "test_string_methods": [
                "input",
                "method"
            ],
            "test_astype_roundtrip": [],
            "test_add": [],
            "test_add_2d": [],
            "test_add_sequence": [],
            "test_mul": [],
            "test_add_strings": [],
            "test_add_frame": [],
            "test_comparison_methods_scalar": [
                "all_compare_operators"
            ],
            "test_comparison_methods_array": [
                "all_compare_operators"
            ],
            "test_constructor_raises": [],
            "test_from_sequence_no_mutate": [
                "copy"
            ],
            "test_astype_int": [],
            "test_reduce": [
                "skipna"
            ],
            "test_min_max": [
                "method",
                "skipna"
            ],
            "test_min_max_numpy": [
                "method",
                "arr"
            ],
            "test_reduce_missing": [
                "skipna"
            ],
            "test_arrow_array": [],
            "test_arrow_roundtrip": [],
            "test_value_counts_na": [],
            "test_use_inf_as_na": [
                "values",
                "expected"
            ],
            "test_memory_usage": []
        },
        "pandas.tests.arrays.string_": {},
        "pandas.tests.arrays.masked.test_arithmetic": {
            "data": [
                "request"
            ],
            "check_skip": [
                "data",
                "op_name"
            ],
            "test_array_scalar_like_equivalence": [
                "data",
                "all_arithmetic_operators"
            ],
            "test_array_NA": [
                "data",
                "all_arithmetic_operators"
            ],
            "test_numpy_array_equivalence": [
                "data",
                "all_arithmetic_operators"
            ],
            "test_frame": [
                "data",
                "all_arithmetic_operators"
            ],
            "test_series": [
                "data",
                "all_arithmetic_operators"
            ],
            "test_error_invalid_object": [
                "data",
                "all_arithmetic_operators"
            ],
            "test_error_len_mismatch": [
                "data",
                "all_arithmetic_operators"
            ]
        },
        "pandas.tests.arrays.masked.test_arrow_compat": {
            "data": [
                "request"
            ],
            "test_arrow_array": [
                "data"
            ],
            "test_arrow_roundtrip": [
                "data"
            ],
            "test_arrow_from_arrow_uint": []
        },
        "pandas.tests.arrays.masked": {},
        "pandas.tests.arrays.boolean.test_construction": {
            "data": [],
            "test_boolean_array_constructor": [],
            "test_boolean_array_constructor_copy": [],
            "test_to_boolean_array": [],
            "test_to_boolean_array_all_none": [],
            "test_to_boolean_array_missing_indicators": [
                "a",
                "b"
            ],
            "test_to_boolean_array_error": [
                "values"
            ],
            "test_to_boolean_array_from_integer_array": [],
            "test_to_boolean_array_from_float_array": [],
            "test_to_boolean_array_integer_like": [],
            "test_coerce_to_array": [],
            "test_coerce_to_array_from_boolean_array": [],
            "test_coerce_to_numpy_array": [],
            "test_to_boolean_array_from_strings": [],
            "test_to_boolean_array_from_strings_invalid_string": [],
            "test_to_numpy": [
                "box"
            ],
            "test_to_numpy_copy": []
        },
        "pandas.tests.arrays.boolean.test_function": {
            "data": [],
            "test_ufuncs_binary": [
                "ufunc"
            ],
            "test_ufuncs_unary": [
                "ufunc"
            ],
            "test_ufunc_reduce_raises": [
                "values"
            ],
            "test_value_counts_na": [],
            "test_diff": []
        },
        "pandas.tests.arrays.boolean.test_reduction": {
            "data": [],
            "test_any_all": [
                "values",
                "exp_any",
                "exp_all",
                "exp_any_noskip",
                "exp_all_noskip"
            ],
            "test_reductions_return_types": [
                "dropna",
                "data",
                "all_numeric_reductions"
            ]
        },
        "pandas.tests.arrays.boolean.test_ops": {
            "TestUnaryOps": {
                "test_invert": [
                    "self"
                ]
            }
        },
        "pandas.tests.arrays.boolean.test_astype": {
            "test_astype": [],
            "test_astype_to_boolean_array": [],
            "test_astype_to_integer_array": []
        },
        "pandas.tests.arrays.boolean.test_repr": {
            "test_repr": []
        },
        "pandas.tests.arrays.boolean.test_indexing": {
            "test_setitem_missing_values": [
                "na"
            ]
        },
        "pandas.tests.arrays.boolean.test_arithmetic": {
            "data": [],
            "left_array": [],
            "right_array": [],
            "test_add_mul": [
                "left_array",
                "right_array",
                "opname",
                "exp"
            ],
            "test_sub": [
                "left_array",
                "right_array"
            ],
            "test_div": [
                "left_array",
                "right_array"
            ],
            "test_op_int8": [
                "left_array",
                "right_array",
                "opname"
            ],
            "test_error_invalid_values": [
                "data",
                "all_arithmetic_operators"
            ]
        },
        "pandas.tests.arrays.boolean.test_comparison": {
            "data": [],
            "TestComparisonOps": {
                "_compare_other": [
                    "self",
                    "data",
                    "op_name",
                    "other"
                ],
                "test_compare_scalar": [
                    "self",
                    "data",
                    "all_compare_operators"
                ],
                "test_compare_array": [
                    "self",
                    "data",
                    "all_compare_operators"
                ],
                "test_scalar": [
                    "self",
                    "other",
                    "all_compare_operators"
                ],
                "test_array": [
                    "self",
                    "all_compare_operators"
                ]
            }
        },
        "pandas.tests.arrays.boolean.test_logical": {
            "TestLogicalOps": {
                "test_numpy_scalars_ok": [
                    "self",
                    "all_logical_operators"
                ],
                "get_op_from_name": [
                    "self",
                    "op_name"
                ],
                "test_empty_ok": [
                    "self",
                    "all_logical_operators"
                ],
                "test_logical_length_mismatch_raises": [
                    "self",
                    "all_logical_operators"
                ],
                "test_logical_nan_raises": [
                    "self",
                    "all_logical_operators"
                ],
                "test_non_bool_or_na_other_raises": [
                    "self",
                    "other",
                    "all_logical_operators"
                ],
                "test_kleene_or": [
                    "self"
                ],
                "test_kleene_or_scalar": [
                    "self",
                    "other",
                    "expected"
                ],
                "test_kleene_and": [
                    "self"
                ],
                "test_kleene_and_scalar": [
                    "self",
                    "other",
                    "expected"
                ],
                "test_kleene_xor": [
                    "self"
                ],
                "test_kleene_xor_scalar": [
                    "self",
                    "other",
                    "expected"
                ],
                "test_no_masked_assumptions": [
                    "self",
                    "other",
                    "all_logical_operators"
                ]
            }
        },
        "pandas.tests.arrays.boolean": {},
        "pandas.tests.arrays.integer.test_construction": {
            "test_uses_pandas_na": [],
            "test_from_dtype_from_float": [
                "data"
            ],
            "test_conversions": [
                "data_missing"
            ],
            "test_integer_array_constructor": [],
            "test_integer_array_constructor_none_is_nan": [
                "a",
                "b"
            ],
            "test_integer_array_constructor_copy": [],
            "test_to_integer_array_error": [
                "values"
            ],
            "test_to_integer_array_inferred_dtype": [],
            "test_to_integer_array_dtype_keyword": [],
            "test_to_integer_array_float": [],
            "test_to_integer_array_bool": [
                "bool_values",
                "int_values",
                "target_dtype",
                "expected_dtype"
            ],
            "test_to_integer_array": [
                "values",
                "to_dtype",
                "result_dtype"
            ]
        },
        "pandas.tests.arrays.integer.test_function": {
            "test_ufuncs_single_int": [
                "ufunc"
            ],
            "test_ufuncs_single_float": [
                "ufunc"
            ],
            "test_ufuncs_binary_int": [
                "ufunc"
            ],
            "test_ufunc_reduce_raises": [
                "values"
            ],
            "test_stat_method": [
                "pandasmethname",
                "kwargs"
            ],
            "test_value_counts_na": [],
            "test_value_counts_empty": [],
            "test_integer_array_sum": [
                "skipna",
                "min_count"
            ],
            "test_integer_array_numpy_sum": [
                "values",
                "expected"
            ],
            "test_dataframe_reductions": [
                "op"
            ]
        },
        "pandas.tests.arrays.integer.test_repr": {
            "test_dtypes": [
                "dtype"
            ],
            "test_repr_dtype": [
                "dtype",
                "expected"
            ],
            "test_repr_array": [],
            "test_repr_array_long": [],
            "test_frame_repr": [
                "data_missing"
            ]
        },
        "pandas.tests.arrays.integer.test_dtypes": {
            "test_dtypes": [
                "dtype"
            ],
            "test_preserve_dtypes": [
                "op"
            ],
            "test_astype_nansafe": [],
            "test_construct_index": [
                "all_data",
                "dropna"
            ],
            "test_astype_index": [
                "all_data",
                "dropna"
            ],
            "test_astype": [
                "all_data"
            ],
            "test_astype_copy": [],
            "test_astype_to_larger_numpy": [],
            "test_astype_specific_casting": [
                "dtype"
            ],
            "test_astype_dt64": [],
            "test_construct_cast_invalid": [
                "dtype"
            ],
            "test_to_numpy_na_nan": [
                "in_series"
            ],
            "test_to_numpy_dtype": [
                "dtype",
                "in_series"
            ],
            "test_to_numpy_na_raises": [
                "dtype"
            ],
            "test_astype_str": [],
            "test_astype_boolean": []
        },
        "pandas.tests.arrays.integer.test_indexing": {
            "test_array_setitem_nullable_boolean_mask": [],
            "test_array_setitem": []
        },
        "pandas.tests.arrays.integer.conftest": {
            "dtype": [
                "request"
            ],
            "data": [
                "dtype"
            ],
            "data_missing": [
                "dtype"
            ],
            "all_data": [
                "request",
                "data",
                "data_missing"
            ]
        },
        "pandas.tests.arrays.integer.test_arithmetic": {
            "test_add_mul": [
                "dtype",
                "opname",
                "exp"
            ],
            "test_sub": [
                "dtype"
            ],
            "test_div": [
                "dtype"
            ],
            "test_divide_by_zero": [
                "zero",
                "negative"
            ],
            "test_floordiv": [
                "dtype"
            ],
            "test_mod": [
                "dtype"
            ],
            "test_pow_scalar": [],
            "test_pow_array": [],
            "test_rpow_one_to_na": [],
            "test_numpy_zero_dim_ndarray": [
                "other"
            ],
            "test_error_invalid_values": [
                "data",
                "all_arithmetic_operators"
            ],
            "test_arith_coerce_scalar": [
                "data",
                "all_arithmetic_operators"
            ],
            "test_arithmetic_conversion": [
                "all_arithmetic_operators",
                "other"
            ],
            "test_cross_type_arithmetic": [],
            "test_reduce_to_float": [
                "op"
            ]
        },
        "pandas.tests.arrays.integer.test_comparison": {
            "test_equals": [],
            "TestComparisonOps": {
                "_compare_other": [
                    "self",
                    "data",
                    "op_name",
                    "other"
                ],
                "test_scalar": [
                    "self",
                    "other",
                    "all_compare_operators"
                ],
                "test_array": [
                    "self",
                    "all_compare_operators"
                ],
                "test_compare_with_booleanarray": [
                    "self",
                    "all_compare_operators"
                ],
                "test_no_shared_mask": [
                    "self",
                    "data"
                ],
                "test_compare_to_string": [
                    "self",
                    "any_nullable_int_dtype"
                ],
                "test_compare_to_int": [
                    "self",
                    "any_nullable_int_dtype",
                    "all_compare_operators"
                ]
            }
        },
        "pandas.tests.arrays.integer": {},
        "pandas.tests.arrays.integer.test_concat": {
            "test_concat_series": [
                "to_concat_dtypes",
                "result_dtype"
            ],
            "test_concat_series_with_numpy": [
                "to_concat_dtypes",
                "result_dtype"
            ]
        },
        "pandas.tests.arrays.sparse.test_combine_concat": {
            "test_concat_with_non_sparse": [
                "other",
                "expected_dtype"
            ],
            "TestSparseArrayConcat": {
                "test_basic": [
                    "self",
                    "kind"
                ],
                "test_uses_first_kind": [
                    "self",
                    "kind"
                ]
            }
        },
        "pandas.tests.arrays.sparse.test_dtype": {
            "test_inferred_dtype": [
                "dtype",
                "fill_value"
            ],
            "test_from_sparse_dtype": [],
            "test_from_sparse_dtype_fill_value": [],
            "test_equal": [
                "dtype",
                "fill_value"
            ],
            "test_nans_equal": [],
            "test_not_equal": [
                "a",
                "b"
            ],
            "test_construct_from_string_raises": [],
            "test_is_numeric": [
                "dtype",
                "expected"
            ],
            "test_str_uses_object": [],
            "test_construct_from_string": [
                "string",
                "expected"
            ],
            "test_hash_equal": [
                "a",
                "b",
                "expected"
            ],
            "test_parse_subtype": [
                "string",
                "expected"
            ],
            "test_construct_from_string_fill_value_raises": [
                "string"
            ],
            "test_update_dtype": [
                "original",
                "dtype",
                "expected"
            ],
            "test_update_dtype_raises": [
                "original",
                "dtype",
                "expected_error_msg"
            ],
            "test_repr": []
        },
        "pandas.tests.arrays.sparse.test_array": {
            "kind": [
                "request"
            ],
            "test_setting_fill_value_fillna_still_works": [],
            "test_setting_fill_value_updates": [],
            "test_first_fill_value_loc": [
                "arr",
                "loc"
            ],
            "test_unique_na_fill": [
                "arr",
                "fill_value"
            ],
            "test_unique_all_sparse": [],
            "test_map": [],
            "test_map_missing": [],
            "test_dropna": [
                "fill_value"
            ],
            "TestSparseArray": {
                "setup_method": [
                    "self",
                    "method"
                ],
                "test_constructor_dtype": [
                    "self"
                ],
                "test_constructor_dtype_str": [
                    "self"
                ],
                "test_constructor_sparse_dtype": [
                    "self"
                ],
                "test_constructor_sparse_dtype_str": [
                    "self"
                ],
                "test_constructor_object_dtype": [
                    "self"
                ],
                "test_constructor_na_dtype": [
                    "self",
                    "dtype"
                ],
                "test_constructor_warns_when_losing_timezone": [
                    "self"
                ],
                "test_constructor_spindex_dtype": [
                    "self"
                ],
                "test_constructor_spindex_dtype_scalar": [
                    "self",
                    "sparse_index"
                ],
                "test_constructor_spindex_dtype_scalar_broadcasts": [
                    "self"
                ],
                "test_constructor_inferred_fill_value": [
                    "self",
                    "data",
                    "fill_value"
                ],
                "test_from_spmatrix": [
                    "self",
                    "size",
                    "format"
                ],
                "test_from_spmatrix_including_explicit_zero": [
                    "self",
                    "format"
                ],
                "test_from_spmatrix_raises": [
                    "self"
                ],
                "test_scalar_with_index_infer_dtype": [
                    "self",
                    "scalar",
                    "dtype"
                ],
                "test_get_item": [
                    "self"
                ],
                "test_take_scalar_raises": [
                    "self"
                ],
                "test_take": [
                    "self"
                ],
                "test_take_all_empty": [
                    "self"
                ],
                "test_take_fill_value": [
                    "self"
                ],
                "test_take_negative": [
                    "self"
                ],
                "test_shift_fill_value": [
                    "self",
                    "fill_value"
                ],
                "test_bad_take": [
                    "self"
                ],
                "test_take_filling": [
                    "self"
                ],
                "test_take_filling_fill_value": [
                    "self"
                ],
                "test_take_filling_all_nan": [
                    "self"
                ],
                "test_set_item": [
                    "self"
                ],
                "test_constructor_from_too_large_array": [
                    "self"
                ],
                "test_constructor_from_sparse": [
                    "self"
                ],
                "test_constructor_copy": [
                    "self"
                ],
                "test_constructor_bool": [
                    "self"
                ],
                "test_constructor_bool_fill_value": [
                    "self"
                ],
                "test_constructor_float32": [
                    "self"
                ],
                "test_astype": [
                    "self"
                ],
                "test_astype_bool": [
                    "self"
                ],
                "test_astype_all": [
                    "self",
                    "any_real_dtype"
                ],
                "test_astype_more": [
                    "self",
                    "array",
                    "dtype",
                    "expected"
                ],
                "test_astype_nan_raises": [
                    "self"
                ],
                "test_set_fill_value": [
                    "self"
                ],
                "test_set_fill_invalid_non_scalar": [
                    "self",
                    "val"
                ],
                "test_copy": [
                    "self"
                ],
                "test_values_asarray": [
                    "self"
                ],
                "test_shape": [
                    "self",
                    "data",
                    "shape",
                    "dtype"
                ],
                "test_dense_repr": [
                    "self",
                    "vals",
                    "fill_value"
                ],
                "test_getitem": [
                    "self"
                ],
                "test_getitem_arraylike_mask": [
                    "self"
                ],
                "test_getslice": [
                    "self"
                ],
                "test_getslice_tuple": [
                    "self"
                ],
                "test_boolean_slice_empty": [
                    "self"
                ],
                "test_binary_operators": [
                    "self",
                    "op"
                ],
                "test_pickle": [
                    "self"
                ],
                "test_generator_warnings": [
                    "self"
                ],
                "test_fillna": [
                    "self"
                ],
                "test_fillna_overlap": [
                    "self"
                ],
                "test_nonzero": [
                    "self"
                ]
            },
            "TestSparseArrayAnalytics": {
                "test_all": [
                    "self",
                    "data",
                    "pos",
                    "neg"
                ],
                "test_numpy_all": [
                    "self",
                    "data",
                    "pos",
                    "neg"
                ],
                "test_any": [
                    "self",
                    "data",
                    "pos",
                    "neg"
                ],
                "test_numpy_any": [
                    "self",
                    "data",
                    "pos",
                    "neg"
                ],
                "test_sum": [
                    "self"
                ],
                "test_sum_min_count": [
                    "self",
                    "arr",
                    "fill_value",
                    "min_count",
                    "expected"
                ],
                "test_numpy_sum": [
                    "self"
                ],
                "test_cumsum": [
                    "self",
                    "data",
                    "expected",
                    "numpy"
                ],
                "test_mean": [
                    "self"
                ],
                "test_numpy_mean": [
                    "self"
                ],
                "test_ufunc": [
                    "self"
                ],
                "test_ufunc_args": [
                    "self"
                ],
                "test_modf": [
                    "self",
                    "fill_value"
                ],
                "test_nbytes_integer": [
                    "self"
                ],
                "test_nbytes_block": [
                    "self"
                ],
                "test_asarray_datetime64": [
                    "self"
                ],
                "test_density": [
                    "self"
                ],
                "test_npoints": [
                    "self"
                ]
            },
            "TestAccessor": {
                "test_get_attributes": [
                    "self",
                    "attr"
                ],
                "test_from_coo": [
                    "self"
                ],
                "test_to_coo": [
                    "self"
                ],
                "test_non_sparse_raises": [
                    "self"
                ]
            }
        },
        "pandas.tests.arrays.sparse.test_libsparse": {
            "check_cases": [
                "_check_case"
            ],
            "TestSparseIndexUnion": {
                "test_index_make_union": [
                    "self"
                ],
                "test_int_index_make_union": [
                    "self"
                ]
            },
            "TestSparseIndexIntersect": {
                "test_intersect": [
                    "self"
                ],
                "test_intersect_empty": [
                    "self"
                ],
                "test_intersect_identical": [
                    "self"
                ]
            },
            "TestSparseIndexCommon": {
                "test_int_internal": [
                    "self"
                ],
                "test_block_internal": [
                    "self"
                ],
                "test_lookup": [
                    "self"
                ],
                "test_lookup_array": [
                    "self"
                ],
                "test_lookup_basics": [
                    "self"
                ]
            },
            "TestBlockIndex": {
                "test_block_internal": [
                    "self"
                ],
                "test_make_block_boundary": [
                    "self"
                ],
                "test_equals": [
                    "self"
                ],
                "test_check_integrity": [
                    "self"
                ],
                "test_to_int_index": [
                    "self"
                ],
                "test_to_block_index": [
                    "self"
                ]
            },
            "TestIntIndex": {
                "test_check_integrity": [
                    "self"
                ],
                "test_int_internal": [
                    "self"
                ],
                "test_equals": [
                    "self"
                ],
                "test_to_block_index": [
                    "self"
                ],
                "test_to_int_index": [
                    "self"
                ]
            },
            "TestSparseOperators": {
                "_op_tests": [
                    "self",
                    "sparse_op",
                    "python_op"
                ],
                "test_op": [
                    "self",
                    "opname"
                ]
            }
        },
        "pandas.tests.arrays.sparse.test_accessor": {
            "TestSeriesAccessor": {
                "test_to_dense": [
                    "self"
                ]
            },
            "TestFrameAccessor": {
                "test_accessor_raises": [
                    "self"
                ],
                "test_from_spmatrix": [
                    "self",
                    "format",
                    "labels",
                    "dtype"
                ],
                "test_from_spmatrix_including_explicit_zero": [
                    "self",
                    "format"
                ],
                "test_from_spmatrix_columns": [
                    "self",
                    "columns"
                ],
                "test_to_coo": [
                    "self"
                ],
                "test_to_dense": [
                    "self"
                ],
                "test_density": [
                    "self"
                ],
                "test_series_from_coo": [
                    "self",
                    "dtype",
                    "dense_index"
                ],
                "test_series_from_coo_incorrect_format_raises": [
                    "self"
                ],
                "test_with_column_named_sparse": [
                    "self"
                ]
            }
        },
        "pandas.tests.arrays.sparse.test_arithmetics": {
            "kind": [
                "request"
            ],
            "mix": [
                "request"
            ],
            "test_with_list": [
                "op"
            ],
            "test_with_dataframe": [],
            "test_with_zerodim_ndarray": [],
            "test_ufuncs": [
                "ufunc",
                "arr"
            ],
            "test_binary_ufuncs": [
                "ufunc",
                "a",
                "b"
            ],
            "test_ndarray_inplace": [],
            "test_sparray_inplace": [],
            "test_invert": [
                "fill_value"
            ],
            "test_unary_op": [
                "op",
                "fill_value"
            ],
            "TestSparseArrayArithmetics": {
                "_assert": [
                    "self",
                    "a",
                    "b"
                ],
                "_check_numeric_ops": [
                    "self",
                    "a",
                    "b",
                    "a_dense",
                    "b_dense",
                    "mix",
                    "op"
                ],
                "_check_bool_result": [
                    "self",
                    "res"
                ],
                "_check_comparison_ops": [
                    "self",
                    "a",
                    "b",
                    "a_dense",
                    "b_dense"
                ],
                "_check_logical_ops": [
                    "self",
                    "a",
                    "b",
                    "a_dense",
                    "b_dense"
                ],
                "test_float_scalar": [
                    "self",
                    "kind",
                    "mix",
                    "all_arithmetic_functions",
                    "fill_value",
                    "scalar"
                ],
                "test_float_scalar_comparison": [
                    "self",
                    "kind"
                ],
                "test_float_same_index": [
                    "self",
                    "kind",
                    "mix",
                    "all_arithmetic_functions"
                ],
                "test_float_same_index_comparison": [
                    "self",
                    "kind"
                ],
                "test_float_array": [
                    "self",
                    "kind",
                    "mix",
                    "all_arithmetic_functions"
                ],
                "test_float_array_different_kind": [
                    "self",
                    "mix",
                    "all_arithmetic_functions"
                ],
                "test_float_array_comparison": [
                    "self",
                    "kind"
                ],
                "test_int_array": [
                    "self",
                    "kind",
                    "mix",
                    "all_arithmetic_functions"
                ],
                "test_int_array_comparison": [
                    "self",
                    "kind"
                ],
                "test_bool_same_index": [
                    "self",
                    "kind",
                    "fill_value"
                ],
                "test_bool_array_logical": [
                    "self",
                    "kind",
                    "fill_value"
                ],
                "test_mixed_array_float_int": [
                    "self",
                    "kind",
                    "mix",
                    "all_arithmetic_functions"
                ],
                "test_mixed_array_comparison": [
                    "self",
                    "kind"
                ],
                "test_xor": [
                    "self"
                ]
            }
        },
        "pandas.tests.arrays.sparse": {},
        "pandas.tests.scalar.test_nat": {
            "test_nat_fields": [
                "nat",
                "idx"
            ],
            "test_nat_vector_field_access": [],
            "test_identity": [
                "klass",
                "value"
            ],
            "test_equality": [
                "klass",
                "value"
            ],
            "test_round_nat": [
                "klass",
                "method",
                "freq"
            ],
            "test_nat_methods_raise": [
                "method"
            ],
            "test_nat_methods_nan": [
                "method"
            ],
            "test_nat_methods_nat": [
                "method"
            ],
            "test_nat_iso_format": [
                "get_nat"
            ],
            "test_missing_public_nat_methods": [
                "klass",
                "expected"
            ],
            "_get_overlap_public_nat_methods": [
                "klass",
                "as_tuple"
            ],
            "test_overlap_public_nat_methods": [
                "klass",
                "expected"
            ],
            "test_nat_doc_strings": [
                "compare"
            ],
            "test_nat_arithmetic_scalar": [
                "op_name",
                "value",
                "val_type"
            ],
            "test_nat_rfloordiv_timedelta": [
                "val",
                "expected"
            ],
            "test_nat_arithmetic_index": [
                "op_name",
                "value"
            ],
            "test_nat_arithmetic_td64_vector": [
                "op_name",
                "box"
            ],
            "test_nat_arithmetic_ndarray": [
                "dtype",
                "op",
                "out_dtype"
            ],
            "test_nat_pinned_docstrings": [],
            "test_to_numpy_alias": [],
            "test_nat_comparisons": [
                "compare_operators_no_eq_ne",
                "other"
            ],
            "test_nat_addsub_tdlike_scalar": [
                "obj"
            ],
            "test_pickle": []
        },
        "pandas.tests.scalar.test_na_scalar": {
            "test_singleton": [],
            "test_repr": [],
            "test_format": [],
            "test_truthiness": [],
            "test_hashable": [],
            "test_arithmetic_ops": [
                "all_arithmetic_functions"
            ],
            "test_comparison_ops": [],
            "test_pow_special": [
                "value",
                "asarray"
            ],
            "test_rpow_special": [
                "value",
                "asarray"
            ],
            "test_rpow_minus_one": [
                "value",
                "asarray"
            ],
            "test_unary_ops": [],
            "test_logical_and": [],
            "test_logical_or": [],
            "test_logical_xor": [],
            "test_logical_not": [],
            "test_arithmetic_ndarray": [
                "shape",
                "all_arithmetic_functions"
            ],
            "test_is_scalar": [],
            "test_isna": [],
            "test_series_isna": [],
            "test_ufunc": [],
            "test_ufunc_raises": [],
            "test_binary_input_not_dunder": [],
            "test_divmod_ufunc": [],
            "test_integer_hash_collision_dict": [],
            "test_integer_hash_collision_set": [],
            "test_pickle_roundtrip": [],
            "test_pickle_roundtrip_pandas": [],
            "test_pickle_roundtrip_containers": [
                "as_frame",
                "values",
                "dtype"
            ]
        },
        "pandas.tests.scalar": {},
        "pandas.tests.scalar.interval.test_ops": {
            "start_shift": [
                "request"
            ],
            "TestOverlaps": {
                "test_overlaps_self": [
                    "self",
                    "start_shift",
                    "closed"
                ],
                "test_overlaps_nested": [
                    "self",
                    "start_shift",
                    "closed",
                    "other_closed"
                ],
                "test_overlaps_disjoint": [
                    "self",
                    "start_shift",
                    "closed",
                    "other_closed"
                ],
                "test_overlaps_endpoint": [
                    "self",
                    "start_shift",
                    "closed",
                    "other_closed"
                ],
                "test_overlaps_invalid_type": [
                    "self",
                    "other"
                ]
            }
        },
        "pandas.tests.scalar.interval.test_interval": {
            "interval": [],
            "TestInterval": {
                "test_properties": [
                    "self",
                    "interval"
                ],
                "test_repr": [
                    "self",
                    "interval"
                ],
                "test_contains": [
                    "self",
                    "interval"
                ],
                "test_equal": [
                    "self"
                ],
                "test_comparison": [
                    "self"
                ],
                "test_hash": [
                    "self",
                    "interval"
                ],
                "test_length": [
                    "self",
                    "left",
                    "right",
                    "expected"
                ],
                "test_length_timestamp": [
                    "self",
                    "tz",
                    "left",
                    "right",
                    "expected"
                ],
                "test_is_empty": [
                    "self",
                    "left",
                    "right",
                    "closed"
                ],
                "test_construct_errors": [
                    "self",
                    "left",
                    "right"
                ],
                "test_math_add": [
                    "self",
                    "closed"
                ],
                "test_math_sub": [
                    "self",
                    "closed"
                ],
                "test_math_mult": [
                    "self",
                    "closed"
                ],
                "test_math_div": [
                    "self",
                    "closed"
                ],
                "test_math_floordiv": [
                    "self",
                    "closed"
                ],
                "test_constructor_errors": [
                    "self"
                ],
                "test_constructor_errors_tz": [
                    "self",
                    "tz_left",
                    "tz_right"
                ]
            }
        },
        "pandas.tests.scalar.interval.test_arithmetic": {
            "test_time_interval_add_subtract_timedelta": [
                "interval",
                "delta",
                "method"
            ],
            "test_numeric_interval_add_timedelta_raises": [
                "interval",
                "delta"
            ]
        },
        "pandas.tests.scalar.interval": {},
        "pandas.tests.scalar.period.test_period": {
            "test_period_immutable": [],
            "test_small_year_parsing": [],
            "test_negone_ordinals": [],
            "TestPeriodConstruction": {
                "test_construction": [
                    "self"
                ],
                "test_construction_bday": [
                    "self"
                ],
                "test_construction_quarter": [
                    "self"
                ],
                "test_construction_month": [
                    "self"
                ],
                "test_period_constructor_offsets": [
                    "self"
                ],
                "test_invalid_arguments": [
                    "self"
                ],
                "test_constructor_corner": [
                    "self"
                ],
                "test_constructor_infer_freq": [
                    "self"
                ],
                "test_multiples": [
                    "self"
                ],
                "test_period_cons_quarterly": [
                    "self",
                    "month"
                ],
                "test_period_cons_annual": [
                    "self",
                    "month"
                ],
                "test_period_cons_weekly": [
                    "self",
                    "num",
                    "day"
                ],
                "test_period_from_ordinal": [
                    "self"
                ],
                "test_construct_from_nat_string_and_freq": [
                    "self",
                    "freq"
                ],
                "test_period_cons_nat": [
                    "self"
                ],
                "test_period_cons_mult": [
                    "self"
                ],
                "test_period_cons_combined": [
                    "self"
                ]
            },
            "TestPeriodMethods": {
                "test_round_trip": [
                    "self"
                ],
                "test_hash": [
                    "self"
                ],
                "test_to_timestamp_tz_arg": [
                    "self",
                    "tzstr"
                ],
                "test_to_timestamp_tz_arg_dateutil": [
                    "self",
                    "tzstr"
                ],
                "test_to_timestamp_tz_arg_dateutil_from_string": [
                    "self"
                ],
                "test_to_timestamp_mult": [
                    "self"
                ],
                "test_to_timestamp": [
                    "self"
                ],
                "test_to_timestamp_business_end": [
                    "self"
                ],
                "test_to_timestamp_microsecond": [
                    "self",
                    "ts",
                    "expected",
                    "freq"
                ],
                "test_repr": [
                    "self"
                ],
                "test_repr_nat": [
                    "self"
                ],
                "test_millisecond_repr": [
                    "self"
                ],
                "test_microsecond_repr": [
                    "self"
                ],
                "test_strftime": [
                    "self"
                ]
            },
            "TestPeriodProperties": {
                "test_is_leap_year": [
                    "self",
                    "freq"
                ],
                "test_quarterly_negative_ordinals": [
                    "self"
                ],
                "test_freq_str": [
                    "self"
                ],
                "test_period_deprecated_freq": [
                    "self"
                ],
                "test_start_time": [
                    "self"
                ],
                "test_end_time": [
                    "self"
                ],
                "test_end_time_business_friday": [
                    "self"
                ],
                "test_anchor_week_end_time": [
                    "self"
                ],
                "test_properties_annually": [
                    "self"
                ],
                "test_properties_quarterly": [
                    "self"
                ],
                "test_properties_monthly": [
                    "self"
                ],
                "test_properties_weekly": [
                    "self"
                ],
                "test_properties_weekly_legacy": [
                    "self"
                ],
                "test_properties_daily": [
                    "self"
                ],
                "test_properties_hourly": [
                    "self"
                ],
                "test_properties_minutely": [
                    "self"
                ],
                "test_properties_secondly": [
                    "self"
                ]
            },
            "TestPeriodField": {
                "test_get_period_field_array_raises_on_out_of_range": [
                    "self"
                ]
            },
            "TestPeriodComparisons": {
                "test_comparison_same_period_different_object": [
                    "self"
                ],
                "test_comparison_same_freq": [
                    "self"
                ],
                "test_comparison_mismatched_freq": [
                    "self"
                ],
                "test_comparison_invalid_type": [
                    "self"
                ],
                "test_sort_periods": [
                    "self"
                ],
                "test_period_cmp_nat": [
                    "self"
                ]
            },
            "TestArithmetic": {
                "test_sub_delta": [
                    "self"
                ],
                "test_add_integer": [
                    "self"
                ],
                "test_add_sub_nat": [
                    "self"
                ],
                "test_add_invalid": [
                    "self"
                ],
                "test_add_timestamp_raises": [
                    "self",
                    "rbox",
                    "lbox"
                ],
                "test_sub": [
                    "self"
                ],
                "test_sub_n_gt_1_ticks": [
                    "self",
                    "tick_classes",
                    "n"
                ],
                "test_sub_n_gt_1_offsets": [
                    "self",
                    "offset",
                    "kwd_name",
                    "n",
                    "normalize"
                ],
                "test_add_offset": [
                    "self"
                ],
                "test_sub_offset": [
                    "self"
                ],
                "test_period_addsub_nat": [
                    "self",
                    "freq"
                ],
                "test_period_ops_offset": [
                    "self"
                ]
            }
        },
        "pandas.tests.scalar.period.test_asfreq": {
            "TestFreqConversion": {
                "test_asfreq_near_zero": [
                    "self",
                    "freq"
                ],
                "test_asfreq_near_zero_weekly": [
                    "self"
                ],
                "test_to_timestamp_out_of_bounds": [
                    "self"
                ],
                "test_asfreq_corner": [
                    "self"
                ],
                "test_conv_annual": [
                    "self"
                ],
                "test_conv_quarterly": [
                    "self"
                ],
                "test_conv_monthly": [
                    "self"
                ],
                "test_conv_weekly": [
                    "self"
                ],
                "test_conv_weekly_legacy": [
                    "self"
                ],
                "test_conv_business": [
                    "self"
                ],
                "test_conv_daily": [
                    "self"
                ],
                "test_conv_hourly": [
                    "self"
                ],
                "test_conv_minutely": [
                    "self"
                ],
                "test_conv_secondly": [
                    "self"
                ],
                "test_conv_microsecond": [
                    "self"
                ],
                "test_asfreq_mult": [
                    "self"
                ],
                "test_asfreq_combined": [
                    "self"
                ],
                "test_asfreq_MS": [
                    "self"
                ]
            }
        },
        "pandas.tests.scalar.period": {},
        "pandas.tests.scalar.timedelta.test_formats": {
            "test_repr": [
                "td",
                "expected_repr"
            ],
            "test_isoformat": [
                "td",
                "expected_iso"
            ]
        },
        "pandas.tests.scalar.timedelta.test_constructors": {
            "test_construction": [],
            "test_td_construction_with_np_dtypes": [
                "npdtype",
                "item"
            ],
            "test_td_from_repr_roundtrip": [
                "val"
            ],
            "test_overflow_on_construction": [],
            "test_iso_constructor": [
                "fmt",
                "exp"
            ],
            "test_iso_constructor_raises": [
                "fmt"
            ],
            "test_td_constructor_on_nanoseconds": [
                "constructed_td",
                "conversion"
            ],
            "test_td_constructor_value_error": [],
            "test_timedelta_constructor_identity": [],
            "test_string_with_unit": [
                "constructor",
                "value",
                "unit",
                "expectation"
            ]
        },
        "pandas.tests.scalar.timedelta.test_timedelta": {
            "test_truthiness": [
                "value",
                "expected"
            ],
            "test_timedelta_attribute_precision": [],
            "TestTimedeltaUnaryOps": {
                "test_unary_ops": [
                    "self"
                ]
            },
            "TestTimedeltas": {
                "test_rounding_on_int_unit_construction": [
                    "self",
                    "unit",
                    "value",
                    "expected"
                ],
                "test_total_seconds_scalar": [
                    "self"
                ],
                "test_conversion": [
                    "self"
                ],
                "test_fields": [
                    "self"
                ],
                "test_iso_conversion": [
                    "self"
                ],
                "test_nat_converters": [
                    "self"
                ],
                "test_unit_parser": [
                    "self",
                    "units",
                    "np_unit",
                    "wrapper"
                ],
                "test_unit_m_y_raises": [
                    "self",
                    "unit"
                ],
                "test_numeric_conversions": [
                    "self"
                ],
                "test_timedelta_conversions": [
                    "self"
                ],
                "test_to_numpy_alias": [
                    "self"
                ],
                "test_round": [
                    "self",
                    "freq",
                    "s1",
                    "s2"
                ],
                "test_round_invalid": [
                    "self"
                ],
                "test_contains": [
                    "self"
                ],
                "test_identity": [
                    "self"
                ],
                "test_short_format_converters": [
                    "self"
                ],
                "test_full_format_converters": [
                    "self"
                ],
                "test_pickle": [
                    "self"
                ],
                "test_timedelta_hash_equality": [
                    "self"
                ],
                "test_implementation_limits": [
                    "self"
                ],
                "test_total_seconds_precision": [
                    "self"
                ],
                "test_resolution_string": [
                    "self"
                ],
                "test_resolution_deprecated": [
                    "self"
                ]
            }
        },
        "pandas.tests.scalar.timedelta.test_arithmetic": {
            "test_ops_notimplemented": [],
            "test_ops_error_str": [],
            "TestTimedeltaAdditionSubtraction": {
                "test_td_add_sub_ten_seconds": [
                    "self",
                    "ten_seconds"
                ],
                "test_td_add_sub_one_day_ten_seconds": [
                    "self",
                    "one_day_ten_secs"
                ],
                "test_td_add_datetimelike_scalar": [
                    "self",
                    "op"
                ],
                "test_td_add_timestamp_overflow": [
                    "self"
                ],
                "test_td_add_td": [
                    "self",
                    "op"
                ],
                "test_td_add_pytimedelta": [
                    "self",
                    "op"
                ],
                "test_td_add_timedelta64": [
                    "self",
                    "op"
                ],
                "test_td_add_offset": [
                    "self",
                    "op"
                ],
                "test_td_sub_td": [
                    "self"
                ],
                "test_td_sub_pytimedelta": [
                    "self"
                ],
                "test_td_sub_timedelta64": [
                    "self"
                ],
                "test_td_sub_nat": [
                    "self"
                ],
                "test_td_sub_td64_nat": [
                    "self"
                ],
                "test_td_sub_offset": [
                    "self"
                ],
                "test_td_add_sub_numeric_raises": [
                    "self"
                ],
                "test_td_rsub_nat": [
                    "self"
                ],
                "test_td_rsub_offset": [
                    "self"
                ],
                "test_td_sub_timedeltalike_object_dtype_array": [
                    "self"
                ],
                "test_td_sub_mixed_most_timedeltalike_object_dtype_array": [
                    "self"
                ],
                "test_td_rsub_mixed_most_timedeltalike_object_dtype_array": [
                    "self"
                ],
                "test_td_add_timedeltalike_object_dtype_array": [
                    "self",
                    "op"
                ],
                "test_td_add_mixed_timedeltalike_object_dtype_array": [
                    "self",
                    "op"
                ],
                "test_ops_ndarray": [
                    "self"
                ]
            },
            "TestTimedeltaMultiplicationDivision": {
                "test_td_mul_nat": [
                    "self",
                    "op",
                    "td_nat"
                ],
                "test_td_mul_nan": [
                    "self",
                    "op",
                    "nan"
                ],
                "test_td_mul_scalar": [
                    "self",
                    "op"
                ],
                "test_td_div_timedeltalike_scalar": [
                    "self"
                ],
                "test_td_div_td64_non_nano": [
                    "self"
                ],
                "test_td_div_numeric_scalar": [
                    "self"
                ],
                "test_td_div_nan": [
                    "self",
                    "nan"
                ],
                "test_td_rdiv_timedeltalike_scalar": [
                    "self"
                ],
                "test_td_rdiv_na_scalar": [
                    "self"
                ],
                "test_td_rdiv_ndarray": [
                    "self"
                ],
                "test_td_floordiv_timedeltalike_scalar": [
                    "self"
                ],
                "test_td_floordiv_null_scalar": [
                    "self"
                ],
                "test_td_floordiv_offsets": [
                    "self"
                ],
                "test_td_floordiv_invalid_scalar": [
                    "self"
                ],
                "test_td_floordiv_numeric_scalar": [
                    "self"
                ],
                "test_td_floordiv_timedeltalike_array": [
                    "self"
                ],
                "test_td_floordiv_numeric_series": [
                    "self"
                ],
                "test_td_rfloordiv_timedeltalike_scalar": [
                    "self"
                ],
                "test_td_rfloordiv_null_scalar": [
                    "self"
                ],
                "test_td_rfloordiv_offsets": [
                    "self"
                ],
                "test_td_rfloordiv_invalid_scalar": [
                    "self"
                ],
                "test_td_rfloordiv_numeric_scalar": [
                    "self"
                ],
                "test_td_rfloordiv_timedeltalike_array": [
                    "self"
                ],
                "test_td_rfloordiv_intarray": [
                    "self"
                ],
                "test_td_rfloordiv_numeric_series": [
                    "self"
                ],
                "test_mod_timedeltalike": [
                    "self"
                ],
                "test_mod_timedelta64_nat": [
                    "self"
                ],
                "test_mod_timedelta64": [
                    "self"
                ],
                "test_mod_offset": [
                    "self"
                ],
                "test_mod_numeric": [
                    "self"
                ],
                "test_mod_invalid": [
                    "self"
                ],
                "test_rmod_pytimedelta": [
                    "self"
                ],
                "test_rmod_timedelta64": [
                    "self"
                ],
                "test_rmod_invalid": [
                    "self"
                ],
                "test_divmod_numeric": [
                    "self"
                ],
                "test_divmod": [
                    "self"
                ],
                "test_divmod_offset": [
                    "self"
                ],
                "test_divmod_invalid": [
                    "self"
                ],
                "test_rdivmod_pytimedelta": [
                    "self"
                ],
                "test_rdivmod_offset": [
                    "self"
                ],
                "test_rdivmod_invalid": [
                    "self"
                ],
                "test_td_op_timedelta_timedeltalike_array": [
                    "self",
                    "op",
                    "arr"
                ]
            },
            "TestTimedeltaComparison": {
                "test_compare_tick": [
                    "self",
                    "tick_classes"
                ],
                "test_comparison_object_array": [
                    "self"
                ],
                "test_compare_timedelta_ndarray": [
                    "self"
                ],
                "test_compare_td64_ndarray": [
                    "self"
                ],
                "test_compare_custom_object": [
                    "self"
                ],
                "test_compare_unknown_type": [
                    "self",
                    "val"
                ]
            }
        },
        "pandas.tests.scalar.timedelta": {},
        "pandas.tests.scalar.timestamp.test_timezones": {
            "TestTimestampTZOperations": {
                "test_tz_localize_pushes_out_of_bounds": [
                    "self"
                ],
                "test_tz_localize_ambiguous_bool": [
                    "self"
                ],
                "test_tz_localize_ambiguous": [
                    "self"
                ],
                "test_tz_localize_nonexistent": [
                    "self",
                    "stamp",
                    "tz"
                ],
                "test_tz_localize_ambiguous_raise": [
                    "self"
                ],
                "test_tz_localize_nonexistent_invalid_arg": [
                    "self"
                ],
                "test_tz_localize_roundtrip": [
                    "self",
                    "stamp",
                    "tz_aware_fixture"
                ],
                "test_tz_localize_ambiguous_compat": [
                    "self"
                ],
                "test_timestamp_tz_localize": [
                    "self",
                    "tz"
                ],
                "test_timestamp_tz_localize_nonexistent_shift": [
                    "self",
                    "start_ts",
                    "tz",
                    "end_ts",
                    "shift",
                    "tz_type"
                ],
                "test_timestamp_tz_localize_nonexistent_shift_invalid": [
                    "self",
                    "offset",
                    "tz_type"
                ],
                "test_timestamp_tz_localize_nonexistent_NaT": [
                    "self",
                    "tz"
                ],
                "test_timestamp_tz_localize_nonexistent_raise": [
                    "self",
                    "tz"
                ],
                "test_tz_convert_roundtrip": [
                    "self",
                    "stamp",
                    "tz_aware_fixture"
                ],
                "test_astimezone": [
                    "self",
                    "tzstr"
                ],
                "test_tz_convert_utc_with_system_utc": [
                    "self"
                ],
                "test_timestamp_constructor_tz_utc": [
                    "self"
                ],
                "test_timestamp_to_datetime_tzoffset": [
                    "self"
                ],
                "test_timestamp_constructor_near_dst_boundary": [
                    "self"
                ],
                "test_timestamp_constructed_by_date_and_tz": [
                    "self",
                    "tz"
                ],
                "test_timestamp_add_timedelta_push_over_dst_boundary": [
                    "self",
                    "tz"
                ],
                "test_timestamp_timetz_equivalent_with_datetime_tz": [
                    "self",
                    "tz_naive_fixture"
                ]
            }
        },
        "pandas.tests.scalar.timestamp.test_timestamp": {
            "test_dt_subclass_add_timedelta": [
                "lh",
                "rh"
            ],
            "TestTimestampProperties": {
                "test_properties_business": [
                    "self"
                ],
                "test_fields": [
                    "self"
                ],
                "test_names": [
                    "self",
                    "data",
                    "time_locale"
                ],
                "test_is_leap_year": [
                    "self",
                    "tz_naive_fixture"
                ],
                "test_woy_boundary": [
                    "self"
                ],
                "test_resolution": [
                    "self"
                ]
            },
            "TestTimestamp": {
                "test_tz": [
                    "self"
                ],
                "test_utc_z_designator": [
                    "self"
                ],
                "test_asm8": [
                    "self"
                ],
                "test_class_ops_pytz": [
                    "self"
                ],
                "test_class_ops_dateutil": [
                    "self"
                ],
                "test_basics_nanos": [
                    "self"
                ],
                "test_unit": [
                    "self",
                    "value",
                    "check_kwargs"
                ],
                "test_roundtrip": [
                    "self"
                ],
                "test_hash_equivalent": [
                    "self"
                ],
                "test_tz_conversion_freq": [
                    "self",
                    "tz_naive_fixture"
                ]
            },
            "TestTimestampNsOperations": {
                "test_nanosecond_string_parsing": [
                    "self"
                ],
                "test_nanosecond_timestamp": [
                    "self"
                ]
            },
            "TestTimestampToJulianDate": {
                "test_compare_1700": [
                    "self"
                ],
                "test_compare_2000": [
                    "self"
                ],
                "test_compare_2100": [
                    "self"
                ],
                "test_compare_hour01": [
                    "self"
                ],
                "test_compare_hour13": [
                    "self"
                ]
            },
            "TestTimestampConversion": {
                "test_conversion": [
                    "self"
                ],
                "test_to_pydatetime_nonzero_nano": [
                    "self"
                ],
                "test_timestamp_to_datetime": [
                    "self"
                ],
                "test_timestamp_to_datetime_dateutil": [
                    "self"
                ],
                "test_timestamp_to_datetime_explicit_pytz": [
                    "self"
                ],
                "test_timestamp_to_datetime_explicit_dateutil": [
                    "self"
                ],
                "test_to_datetime_bijective": [
                    "self"
                ],
                "test_to_period_tz_warning": [
                    "self"
                ],
                "test_to_numpy_alias": [
                    "self"
                ]
            },
            "SubDatetime": {}
        },
        "pandas.tests.scalar.timestamp.test_comparisons": {
            "test_rich_comparison_with_unsupported_type": [],
            "TestTimestampComparison": {
                "test_comparison_dt64_ndarray": [
                    "self"
                ],
                "test_comparison_dt64_ndarray_tzaware": [
                    "self",
                    "reverse",
                    "all_compare_operators"
                ],
                "test_comparison_object_array": [
                    "self"
                ],
                "test_comparison": [
                    "self"
                ],
                "test_compare_invalid": [
                    "self"
                ],
                "test_cant_compare_tz_naive_w_aware": [
                    "self",
                    "utc_fixture"
                ],
                "test_timestamp_compare_scalars": [
                    "self"
                ],
                "test_timestamp_compare_with_early_datetime": [
                    "self"
                ],
                "test_compare_zerodim_array": [
                    "self"
                ]
            }
        },
        "pandas.tests.scalar.timestamp.test_unary_ops": {
            "TestTimestampUnaryOps": {
                "test_round_frequencies": [
                    "self",
                    "timestamp",
                    "freq",
                    "expected"
                ],
                "test_round_tzaware": [
                    "self"
                ],
                "test_round_30min": [
                    "self"
                ],
                "test_round_subsecond": [
                    "self"
                ],
                "test_round_nonstandard_freq": [
                    "self"
                ],
                "test_round_invalid_arg": [
                    "self"
                ],
                "test_ceil_floor_edge": [
                    "self",
                    "test_input",
                    "rounder",
                    "freq",
                    "expected"
                ],
                "test_round_minute_freq": [
                    "self",
                    "test_input",
                    "freq",
                    "expected",
                    "rounder"
                ],
                "test_ceil": [
                    "self"
                ],
                "test_floor": [
                    "self"
                ],
                "test_round_dst_border_ambiguous": [
                    "self",
                    "method"
                ],
                "test_round_dst_border_nonexistent": [
                    "self",
                    "method",
                    "ts_str",
                    "freq"
                ],
                "test_round_int64": [
                    "self",
                    "timestamp",
                    "freq"
                ],
                "test_replace_naive": [
                    "self"
                ],
                "test_replace_aware": [
                    "self",
                    "tz_aware_fixture"
                ],
                "test_replace_preserves_nanos": [
                    "self",
                    "tz_aware_fixture"
                ],
                "test_replace_multiple": [
                    "self",
                    "tz_aware_fixture"
                ],
                "test_replace_invalid_kwarg": [
                    "self",
                    "tz_aware_fixture"
                ],
                "test_replace_integer_args": [
                    "self",
                    "tz_aware_fixture"
                ],
                "test_replace_tzinfo_equiv_tz_localize_none": [
                    "self"
                ],
                "test_replace_tzinfo": [
                    "self"
                ],
                "test_replace_across_dst": [
                    "self",
                    "tz",
                    "normalize"
                ],
                "test_replace_dst_border": [
                    "self"
                ],
                "test_replace_dst_fold": [
                    "self",
                    "fold",
                    "tz"
                ],
                "test_normalize": [
                    "self",
                    "tz_naive_fixture",
                    "arg"
                ],
                "test_timestamp": [
                    "self"
                ]
            }
        },
        "pandas.tests.scalar.timestamp.test_constructors": {
            "test_constructor_ambigous_dst": [],
            "test_constructor_before_dst_switch": [
                "epoch"
            ],
            "test_timestamp_constructor_identity": [],
            "test_constructor_missing_keyword": [
                "kwargs"
            ],
            "TestTimestampConstructors": {
                "test_constructor": [
                    "self"
                ],
                "test_constructor_with_stringoffset": [
                    "self"
                ],
                "test_constructor_invalid": [
                    "self"
                ],
                "test_constructor_invalid_tz": [
                    "self"
                ],
                "test_constructor_strptime": [
                    "self"
                ],
                "test_constructor_tz_or_tzinfo": [
                    "self"
                ],
                "test_constructor_positional": [
                    "self"
                ],
                "test_constructor_keyword": [
                    "self"
                ],
                "test_constructor_fromordinal": [
                    "self"
                ],
                "test_constructor_nanosecond": [
                    "self",
                    "result"
                ],
                "test_constructor_invalid_Z0_isostring": [
                    "self",
                    "z"
                ],
                "test_invalid_date_kwarg_with_string_input": [
                    "self",
                    "arg"
                ],
                "test_out_of_bounds_integer_value": [
                    "self"
                ],
                "test_out_of_bounds_value": [
                    "self"
                ],
                "test_out_of_bounds_string": [
                    "self"
                ],
                "test_barely_out_of_bounds": [
                    "self"
                ],
                "test_bounds_with_different_units": [
                    "self"
                ],
                "test_min_valid": [
                    "self"
                ],
                "test_max_valid": [
                    "self"
                ],
                "test_now": [
                    "self"
                ],
                "test_today": [
                    "self"
                ],
                "test_disallow_setting_tz": [
                    "self",
                    "tz"
                ],
                "test_construct_timestamp_near_dst": [
                    "self",
                    "offset"
                ],
                "test_construct_with_different_string_format": [
                    "self",
                    "arg"
                ],
                "test_construct_timestamp_preserve_original_frequency": [
                    "self"
                ],
                "test_constructor_invalid_frequency": [
                    "self"
                ],
                "test_raise_tz_and_tzinfo_in_datetime_input": [
                    "self",
                    "box"
                ],
                "test_dont_convert_dateutil_utc_to_pytz_utc": [
                    "self"
                ],
                "test_constructor_subclassed_datetime": [
                    "self"
                ],
                "test_constructor_fromisocalendar": [
                    "self"
                ]
            }
        },
        "pandas.tests.scalar.timestamp.test_rendering": {
            "TestTimestampRendering": {
                "test_repr": [
                    "self",
                    "date",
                    "freq",
                    "tz"
                ],
                "test_repr_utcoffset": [
                    "self"
                ],
                "test_timestamp_repr_pre1900": [
                    "self"
                ],
                "test_pprint": [
                    "self"
                ],
                "test_to_timestamp_repr_is_code": [
                    "self"
                ]
            }
        },
        "pandas.tests.scalar.timestamp.test_arithmetic": {
            "TestTimestampArithmetic": {
                "test_overflow_offset": [
                    "self"
                ],
                "test_overflow_offset_raises": [
                    "self"
                ],
                "test_overflow_timestamp_raises": [
                    "self"
                ],
                "test_delta_preserve_nanos": [
                    "self"
                ],
                "test_rsub_dtscalars": [
                    "self",
                    "tz_naive_fixture"
                ],
                "test_timestamp_sub_datetime": [
                    "self"
                ],
                "test_addition_subtraction_types": [
                    "self"
                ],
                "test_addition_subtraction_preserve_frequency": [
                    "self",
                    "freq",
                    "td",
                    "td64"
                ],
                "test_radd_tdscalar": [
                    "self",
                    "td"
                ],
                "test_timestamp_add_timedelta64_unit": [
                    "self",
                    "other",
                    "expected_difference"
                ],
                "test_add_int_with_freq": [
                    "self",
                    "ts",
                    "other"
                ],
                "test_addsub_m8ndarray": [
                    "self",
                    "shape"
                ],
                "test_addsub_m8ndarray_tzaware": [
                    "self",
                    "shape"
                ]
            }
        },
        "pandas.tests.scalar.timestamp": {},
        "pandas.tests.series.test_timeseries": {
            "TestTimeSeries": {
                "test_timeseries_coercion": [
                    "self"
                ],
                "test_contiguous_boolean_preserve_freq": [
                    "self"
                ],
                "test_promote_datetime_date": [
                    "self"
                ],
                "test_groupby_count_dateparseerror": [
                    "self"
                ],
                "test_series_map_box_timedelta": [
                    "self"
                ],
                "test_asfreq_resample_set_correct_freq": [
                    "self"
                ],
                "test_view_tz": [
                    "self"
                ],
                "test_asarray_object_dt64": [
                    "self",
                    "tz"
                ],
                "test_asarray_tz_naive": [
                    "self"
                ],
                "test_asarray_tz_aware": [
                    "self"
                ]
            }
        },
        "pandas.tests.series.test_datetime_values": {
            "test_week_and_weekofyear_are_deprecated": [],
            "TestSeriesDatetimeValues": {
                "test_dt_namespace_accessor": [
                    "self"
                ],
                "test_dt_round": [
                    "self",
                    "method",
                    "dates"
                ],
                "test_dt_round_tz": [
                    "self"
                ],
                "test_dt_round_tz_ambiguous": [
                    "self",
                    "method"
                ],
                "test_dt_round_tz_nonexistent": [
                    "self",
                    "method",
                    "ts_str",
                    "freq"
                ],
                "test_dt_namespace_accessor_categorical": [
                    "self"
                ],
                "test_dt_tz_localize_categorical": [
                    "self",
                    "tz_aware_fixture"
                ],
                "test_dt_tz_convert_categorical": [
                    "self",
                    "tz_aware_fixture"
                ],
                "test_dt_other_accessors_categorical": [
                    "self",
                    "accessor"
                ],
                "test_dt_accessor_no_new_attributes": [
                    "self"
                ],
                "test_dt_accessor_datetime_name_accessors": [
                    "self",
                    "time_locale"
                ],
                "test_strftime": [
                    "self"
                ],
                "test_strftime_nat": [
                    "self",
                    "data"
                ],
                "test_valid_dt_with_missing_values": [
                    "self"
                ],
                "test_dt_accessor_api": [
                    "self"
                ],
                "test_dt_accessor_invalid": [
                    "self",
                    "ser"
                ],
                "test_dt_accessor_updates_on_inplace": [
                    "self"
                ],
                "test_date_tz": [
                    "self"
                ],
                "test_dt_timetz_accessor": [
                    "self",
                    "tz_naive_fixture"
                ],
                "test_setitem_with_string_index": [
                    "self"
                ],
                "test_setitem_with_different_tz": [
                    "self"
                ],
                "test_isocalendar": [
                    "self",
                    "input_series",
                    "expected_output"
                ]
            }
        },
        "pandas.tests.series.test_ufunc": {
            "arrays_for_binary_ufunc": [],
            "test_unary_ufunc": [
                "ufunc",
                "sparse"
            ],
            "test_binary_ufunc_with_array": [
                "flip",
                "sparse",
                "ufunc",
                "arrays_for_binary_ufunc"
            ],
            "test_binary_ufunc_with_index": [
                "flip",
                "sparse",
                "ufunc",
                "arrays_for_binary_ufunc"
            ],
            "test_binary_ufunc_with_series": [
                "flip",
                "shuffle",
                "sparse",
                "ufunc",
                "arrays_for_binary_ufunc"
            ],
            "test_binary_ufunc_scalar": [
                "ufunc",
                "sparse",
                "flip",
                "arrays_for_binary_ufunc"
            ],
            "test_multiple_output_binary_ufuncs": [
                "ufunc",
                "sparse",
                "shuffle",
                "arrays_for_binary_ufunc"
            ],
            "test_multiple_output_ufunc": [
                "sparse",
                "arrays_for_binary_ufunc"
            ],
            "test_binary_ufunc_drops_series_name": [
                "ufunc",
                "sparse",
                "arrays_for_binary_ufunc"
            ],
            "test_object_series_ok": [],
            "test_reduce": [
                "values"
            ],
            "test_binary_ufunc_other_types": [
                "type_"
            ],
            "test_object_dtype_ok": [],
            "test_outer": []
        },
        "pandas.tests.series.test_validate": {
            "test_validate_bool_args": [
                "string_series",
                "func",
                "inplace"
            ]
        },
        "pandas.tests.series.test_internals": {
            "test_hasnans_uncached_for_series": [],
            "TestSeriesInternals": {
                "test_convert": [
                    "self"
                ],
                "test_convert_no_arg_error": [
                    "self"
                ],
                "test_convert_preserve_bool": [
                    "self"
                ],
                "test_convert_preserve_all_bool": [
                    "self"
                ],
                "test_constructor_no_pandas_array": [
                    "self"
                ],
                "test_astype_no_pandas_dtype": [
                    "self"
                ],
                "test_from_array": [
                    "self"
                ],
                "test_from_list_dtype": [
                    "self"
                ]
            }
        },
        "pandas.tests.series.test_combine_concat": {
            "TestSeriesConcat": {
                "test_concat_empty_series_dtypes_match_roundtrips": [
                    "self",
                    "dtype"
                ],
                "test_concat_empty_series_dtypes_roundtrips": [
                    "self"
                ],
                "test_concat_empty_series_dtypes": [
                    "self",
                    "left",
                    "right",
                    "expected"
                ],
                "test_concat_empty_series_dtypes_triple": [
                    "self"
                ],
                "test_concat_empty_series_dtype_category_with_array": [
                    "self"
                ],
                "test_concat_empty_series_dtypes_sparse": [
                    "self"
                ]
            }
        },
        "pandas.tests.series.test_period": {
            "TestSeriesPeriod": {
                "setup_method": [
                    "self",
                    "method"
                ],
                "test_auto_conversion": [
                    "self"
                ],
                "test_isna": [
                    "self"
                ],
                "test_dropna": [
                    "self"
                ],
                "test_NaT_scalar": [
                    "self"
                ],
                "test_NaT_cast": [
                    "self"
                ],
                "test_set_none": [
                    "self"
                ],
                "test_set_nan": [
                    "self"
                ],
                "test_intercept_astype_object": [
                    "self"
                ],
                "test_end_time_timevalues": [
                    "self",
                    "input_vals"
                ],
                "test_to_period": [
                    "self",
                    "input_vals"
                ]
            }
        },
        "pandas.tests.series.test_operators": {
            "TestSeriesLogicalOps": {
                "test_bool_operators_with_nas": [
                    "self",
                    "bool_op"
                ],
                "test_logical_operators_bool_dtype_with_empty": [
                    "self"
                ],
                "test_logical_operators_nans": [
                    "self",
                    "left",
                    "right",
                    "op",
                    "expected"
                ],
                "test_logical_operators_int_dtype_with_int_dtype": [
                    "self"
                ],
                "test_logical_operators_int_dtype_with_int_scalar": [
                    "self"
                ],
                "test_logical_operators_int_dtype_with_float": [
                    "self"
                ],
                "test_logical_operators_int_dtype_with_str": [
                    "self"
                ],
                "test_logical_operators_int_dtype_with_bool": [
                    "self"
                ],
                "test_logical_operators_int_dtype_with_object": [
                    "self"
                ],
                "test_logical_operators_bool_dtype_with_int": [
                    "self"
                ],
                "test_logical_ops_bool_dtype_with_ndarray": [
                    "self"
                ],
                "test_logical_operators_int_dtype_with_bool_dtype_and_reindex": [
                    "self"
                ],
                "test_scalar_na_logical_ops_corners": [
                    "self"
                ],
                "test_scalar_na_logical_ops_corners_aligns": [
                    "self"
                ],
                "test_logical_ops_with_index": [
                    "self",
                    "op"
                ],
                "test_reversed_xor_with_index_returns_index": [
                    "self"
                ],
                "test_reversed_logical_op_with_index_returns_series": [
                    "self",
                    "op"
                ],
                "test_reverse_ops_with_index": [
                    "self",
                    "op",
                    "expected"
                ],
                "test_logical_ops_label_based": [
                    "self"
                ],
                "test_logical_ops_df_compat": [
                    "self"
                ]
            },
            "TestSeriesUnaryOps": {
                "test_neg": [
                    "self"
                ],
                "test_invert": [
                    "self"
                ]
            }
        },
        "pandas.tests.series.test_alter_axes": {
            "TestSeriesAlterAxes": {
                "test_setindex": [
                    "self",
                    "string_series"
                ],
                "test_set_name_attribute": [
                    "self"
                ],
                "test_set_name": [
                    "self"
                ],
                "test_set_index_makes_timeseries": [
                    "self"
                ]
            }
        },
        "pandas.tests.series.test_timezones": {
            "TestSeriesTimezones": {
                "test_dateutil_tzoffset_support": [
                    "self"
                ],
                "test_tz_localize_convert_copy_inplace_mutate": [
                    "self",
                    "copy",
                    "method",
                    "tz"
                ]
            }
        },
        "pandas.tests.series.test_reductions": {
            "test_reductions_td64_with_nat": []
        },
        "pandas.tests.series.test_cumulative": {
            "_check_accum_op": [
                "name",
                "series",
                "check_dtype"
            ],
            "TestSeriesCumulativeOps": {
                "test_cumsum": [
                    "self",
                    "datetime_series"
                ],
                "test_cumprod": [
                    "self",
                    "datetime_series"
                ],
                "test_cummin": [
                    "self",
                    "datetime_series"
                ],
                "test_cummax": [
                    "self",
                    "datetime_series"
                ],
                "test_cummin_datetime64": [
                    "self",
                    "tz"
                ],
                "test_cummax_datetime64": [
                    "self",
                    "tz"
                ],
                "test_cummin_timedelta64": [
                    "self"
                ],
                "test_cummax_timedelta64": [
                    "self"
                ],
                "test_cummethods_bool": [
                    "self"
                ]
            }
        },
        "pandas.tests.series.test_api": {
            "TestSeriesMisc": {
                "test_scalarop_preserve_name": [
                    "self",
                    "datetime_series"
                ],
                "test_copy_name": [
                    "self",
                    "datetime_series"
                ],
                "test_copy_index_name_checking": [
                    "self",
                    "datetime_series"
                ],
                "test_append_preserve_name": [
                    "self",
                    "datetime_series"
                ],
                "test_binop_maybe_preserve_name": [
                    "self",
                    "datetime_series"
                ],
                "test_getitem_preserve_name": [
                    "self",
                    "datetime_series"
                ],
                "test_pickle_datetimes": [
                    "self",
                    "datetime_series"
                ],
                "test_pickle_strings": [
                    "self",
                    "string_series"
                ],
                "_pickle_roundtrip": [
                    "self",
                    "obj"
                ],
                "test_constructor_dict": [
                    "self"
                ],
                "test_constructor_subclass_dict": [
                    "self",
                    "dict_subclass"
                ],
                "test_constructor_ordereddict": [
                    "self"
                ],
                "test_constructor_dict_multiindex": [
                    "self"
                ],
                "test_constructor_dict_timedelta_index": [
                    "self"
                ],
                "test_sparse_accessor_updates_on_inplace": [
                    "self"
                ],
                "test_tab_completion": [
                    "self"
                ],
                "test_tab_completion_with_categorical": [
                    "self"
                ],
                "test_index_tab_completion": [
                    "self",
                    "index"
                ],
                "test_not_hashable": [
                    "self"
                ],
                "test_contains": [
                    "self",
                    "datetime_series"
                ],
                "test_iter_datetimes": [
                    "self",
                    "datetime_series"
                ],
                "test_iter_strings": [
                    "self",
                    "string_series"
                ],
                "test_keys": [
                    "self",
                    "datetime_series"
                ],
                "test_values": [
                    "self",
                    "datetime_series"
                ],
                "test_iteritems_datetimes": [
                    "self",
                    "datetime_series"
                ],
                "test_iteritems_strings": [
                    "self",
                    "string_series"
                ],
                "test_items_datetimes": [
                    "self",
                    "datetime_series"
                ],
                "test_items_strings": [
                    "self",
                    "string_series"
                ],
                "test_raise_on_info": [
                    "self"
                ],
                "test_copy": [
                    "self"
                ],
                "test_copy_tzaware": [
                    "self"
                ],
                "test_axis_alias": [
                    "self"
                ],
                "test_class_axis": [
                    "self"
                ],
                "test_numpy_unique": [
                    "self",
                    "datetime_series"
                ],
                "test_item": [
                    "self"
                ],
                "test_ndarray_compat": [
                    "self"
                ],
                "test_str_accessor_updates_on_inplace": [
                    "self"
                ],
                "test_str_attribute": [
                    "self"
                ],
                "test_empty_method": [
                    "self"
                ],
                "test_integer_series_size": [
                    "self"
                ],
                "test_attrs": [
                    "self"
                ]
            },
            "TestCategoricalSeries": {
                "test_getname_categorical_accessor": [
                    "self",
                    "method"
                ],
                "test_cat_accessor": [
                    "self"
                ],
                "test_cat_accessor_api": [
                    "self"
                ],
                "test_cat_accessor_no_new_attributes": [
                    "self"
                ],
                "test_cat_accessor_updates_on_inplace": [
                    "self"
                ],
                "test_categorical_delegations": [
                    "self"
                ],
                "test_dt_accessor_api_for_categorical": [
                    "self"
                ]
            }
        },
        "pandas.tests.series.test_subclass": {
            "TestSeriesSubclassing": {
                "test_indexing_sliced": [
                    "self"
                ],
                "test_to_frame": [
                    "self"
                ],
                "test_subclass_unstack": [
                    "self"
                ],
                "test_subclass_empty_repr": [
                    "self"
                ],
                "test_asof": [
                    "self"
                ],
                "test_explode": [
                    "self"
                ],
                "test_equals": [
                    "self"
                ]
            }
        },
        "pandas.tests.series.test_io": {
            "TestSeriesToCSV": {
                "read_csv": [
                    "self",
                    "path"
                ],
                "test_from_csv": [
                    "self",
                    "datetime_series",
                    "string_series"
                ],
                "test_to_csv": [
                    "self",
                    "datetime_series"
                ],
                "test_to_csv_unicode_index": [
                    "self"
                ],
                "test_to_csv_float_format": [
                    "self"
                ],
                "test_to_csv_list_entries": [
                    "self"
                ],
                "test_to_csv_path_is_none": [
                    "self"
                ],
                "test_to_csv_compression": [
                    "self",
                    "s",
                    "encoding",
                    "compression"
                ],
                "test_to_csv_interval_index": [
                    "self"
                ]
            },
            "TestSeriesIO": {
                "test_to_frame": [
                    "self",
                    "datetime_series"
                ],
                "test_timeseries_periodindex": [
                    "self"
                ],
                "test_pickle_preserve_name": [
                    "self"
                ],
                "_pickle_roundtrip_name": [
                    "self",
                    "obj"
                ],
                "test_to_frame_expanddim": [
                    "self"
                ]
            }
        },
        "pandas.tests.series.test_repr": {
            "TestSeriesRepr": {
                "test_multilevel_name_print": [
                    "self"
                ],
                "test_name_printing": [
                    "self"
                ],
                "test_repr": [
                    "self",
                    "datetime_series",
                    "string_series",
                    "object_series"
                ],
                "test_tidy_repr": [
                    "self"
                ],
                "test_repr_bool_fails": [
                    "self",
                    "capsys"
                ],
                "test_repr_name_iterable_indexable": [
                    "self"
                ],
                "test_repr_should_return_str": [
                    "self"
                ],
                "test_repr_max_rows": [
                    "self"
                ],
                "test_unicode_string_with_unicode": [
                    "self"
                ],
                "test_str_to_bytes_raises": [
                    "self"
                ],
                "test_timeseries_repr_object_dtype": [
                    "self"
                ],
                "test_latex_repr": [
                    "self"
                ],
                "test_index_repr_in_frame_with_nan": [
                    "self"
                ],
                "test_format_pre_1900_dates": [
                    "self"
                ],
                "test_series_repr_nat": [
                    "self"
                ]
            },
            "TestCategoricalRepr": {
                "test_categorical_repr_unicode": [
                    "self"
                ],
                "test_categorical_repr": [
                    "self"
                ],
                "test_categorical_series_repr": [
                    "self"
                ],
                "test_categorical_series_repr_ordered": [
                    "self"
                ],
                "test_categorical_series_repr_datetime": [
                    "self"
                ],
                "test_categorical_series_repr_datetime_ordered": [
                    "self"
                ],
                "test_categorical_series_repr_period": [
                    "self"
                ],
                "test_categorical_series_repr_period_ordered": [
                    "self"
                ],
                "test_categorical_series_repr_timedelta": [
                    "self"
                ],
                "test_categorical_series_repr_timedelta_ordered": [
                    "self"
                ]
            }
        },
        "pandas.tests.series.test_constructors": {
            "TestSeriesConstructors": {
                "test_empty_constructor": [
                    "self",
                    "constructor",
                    "check_index_type"
                ],
                "test_invalid_dtype": [
                    "self"
                ],
                "test_invalid_compound_dtype": [
                    "self"
                ],
                "test_scalar_conversion": [
                    "self"
                ],
                "test_constructor": [
                    "self",
                    "datetime_series"
                ],
                "test_constructor_empty": [
                    "self",
                    "input_class"
                ],
                "test_constructor_nan": [
                    "self",
                    "input_arg"
                ],
                "test_constructor_dtype_only": [
                    "self",
                    "dtype",
                    "index"
                ],
                "test_constructor_no_data_index_order": [
                    "self"
                ],
                "test_constructor_no_data_string_type": [
                    "self"
                ],
                "test_constructor_string_element_string_type": [
                    "self",
                    "item"
                ],
                "test_constructor_dtype_str_na_values": [
                    "self",
                    "string_dtype"
                ],
                "test_constructor_series": [
                    "self"
                ],
                "test_constructor_iterable": [
                    "self"
                ],
                "test_constructor_sequence": [
                    "self"
                ],
                "test_constructor_single_str": [
                    "self"
                ],
                "test_constructor_list_like": [
                    "self"
                ],
                "test_constructor_index_dtype": [
                    "self",
                    "dtype"
                ],
                "test_constructor_list_str": [
                    "self",
                    "input_vals",
                    "string_dtype"
                ],
                "test_constructor_list_str_na": [
                    "self",
                    "string_dtype"
                ],
                "test_constructor_generator": [
                    "self"
                ],
                "test_constructor_map": [
                    "self"
                ],
                "test_constructor_categorical": [
                    "self"
                ],
                "test_constructor_categorical_with_coercion": [
                    "self"
                ],
                "test_constructor_categorical_dtype": [
                    "self"
                ],
                "test_constructor_categorical_string": [
                    "self"
                ],
                "test_categorical_sideeffects_free": [
                    "self"
                ],
                "test_unordered_compare_equal": [
                    "self"
                ],
                "test_constructor_maskedarray": [
                    "self"
                ],
                "test_constructor_maskedarray_hardened": [
                    "self"
                ],
                "test_series_ctor_plus_datetimeindex": [
                    "self"
                ],
                "test_constructor_default_index": [
                    "self"
                ],
                "test_constructor_index_mismatch": [
                    "self",
                    "input"
                ],
                "test_constructor_numpy_scalar": [
                    "self"
                ],
                "test_constructor_broadcast_list": [
                    "self"
                ],
                "test_constructor_corner": [
                    "self"
                ],
                "test_constructor_sanitize": [
                    "self"
                ],
                "test_constructor_copy": [
                    "self"
                ],
                "test_constructor_limit_copies": [
                    "self",
                    "index"
                ],
                "test_constructor_pass_none": [
                    "self"
                ],
                "test_constructor_pass_nan_nat": [
                    "self"
                ],
                "test_constructor_cast": [
                    "self"
                ],
                "test_constructor_unsigned_dtype_overflow": [
                    "self",
                    "uint_dtype"
                ],
                "test_constructor_coerce_float_fail": [
                    "self",
                    "any_int_dtype"
                ],
                "test_constructor_coerce_float_valid": [
                    "self",
                    "float_dtype"
                ],
                "test_constructor_dtype_no_cast": [
                    "self"
                ],
                "test_constructor_datelike_coercion": [
                    "self"
                ],
                "test_constructor_datetimes_with_nulls": [
                    "self"
                ],
                "test_constructor_dtype_datetime64": [
                    "self"
                ],
                "test_constructor_with_datetime_tz": [
                    "self"
                ],
                "test_construction_to_datetimelike_unit": [
                    "self",
                    "arr_dtype",
                    "dtype",
                    "unit"
                ],
                "test_constructor_with_naive_string_and_datetimetz_dtype": [
                    "self",
                    "arg"
                ],
                "test_constructor_datetime64_bigendian": [
                    "self"
                ],
                "test_construction_interval": [
                    "self",
                    "interval_constructor"
                ],
                "test_constructor_infer_interval": [
                    "self",
                    "data_constructor"
                ],
                "test_constructor_interval_mixed_closed": [
                    "self",
                    "data_constructor"
                ],
                "test_construction_consistency": [
                    "self"
                ],
                "test_constructor_infer_period": [
                    "self",
                    "data_constructor"
                ],
                "test_constructor_period_incompatible_frequency": [
                    "self"
                ],
                "test_constructor_periodindex": [
                    "self"
                ],
                "test_constructor_dict": [
                    "self"
                ],
                "test_constructor_dict_list_value_explicit_dtype": [
                    "self"
                ],
                "test_constructor_dict_order": [
                    "self"
                ],
                "test_constructor_dict_nan_key": [
                    "self",
                    "value"
                ],
                "test_constructor_dict_datetime64_index": [
                    "self"
                ],
                "test_constructor_dict_tuple_indexer": [
                    "self"
                ],
                "test_constructor_mapping": [
                    "self",
                    "non_dict_mapping_subclass"
                ],
                "test_constructor_list_of_tuples": [
                    "self"
                ],
                "test_constructor_tuple_of_tuples": [
                    "self"
                ],
                "test_constructor_dict_of_tuples": [
                    "self"
                ],
                "test_constructor_set": [
                    "self"
                ],
                "test_fromDict": [
                    "self"
                ],
                "test_fromValue": [
                    "self",
                    "datetime_series"
                ],
                "test_constructor_dtype_timedelta64": [
                    "self"
                ],
                "test_constructor_mixed_tz": [
                    "self"
                ],
                "test_NaT_scalar": [
                    "self"
                ],
                "test_NaT_cast": [
                    "self"
                ],
                "test_constructor_name_hashable": [
                    "self"
                ],
                "test_constructor_name_unhashable": [
                    "self"
                ],
                "test_auto_conversion": [
                    "self"
                ],
                "test_convert_non_ns": [
                    "self"
                ],
                "test_constructor_cant_cast_datetimelike": [
                    "self",
                    "index"
                ],
                "test_constructor_cast_object": [
                    "self",
                    "index"
                ],
                "test_constructor_generic_timestamp_no_frequency": [
                    "self",
                    "dtype",
                    "request"
                ],
                "test_constructor_generic_timestamp_bad_frequency": [
                    "self",
                    "dtype",
                    "msg"
                ],
                "test_constructor_range_dtype": [
                    "self",
                    "dtype"
                ],
                "test_constructor_tz_mixed_data": [
                    "self"
                ],
                "test_constructor_data_aware_dtype_naive": [
                    "self",
                    "tz_aware_fixture"
                ],
                "test_constructor_datetime64": [
                    "self"
                ],
                "test_constructor_datetimelike_scalar_to_string_dtype": [
                    "self"
                ]
            }
        },
        "pandas.tests.series.test_dtypes": {
            "TestSeriesDtypes": {
                "test_dt64_series_astype_object": [
                    "self"
                ],
                "test_td64_series_astype_object": [
                    "self"
                ],
                "test_astype": [
                    "self",
                    "dtype"
                ],
                "test_dtype": [
                    "self",
                    "datetime_series"
                ],
                "test_astype_cast_nan_inf_int": [
                    "self",
                    "dtype",
                    "value"
                ],
                "test_astype_cast_object_int_fail": [
                    "self",
                    "dtype"
                ],
                "test_astype_cast_object_int": [
                    "self"
                ],
                "test_astype_datetime": [
                    "self"
                ],
                "test_astype_datetime64tz": [
                    "self"
                ],
                "test_astype_str_map": [
                    "self",
                    "dtype",
                    "series"
                ],
                "test_astype_str_cast_dt64": [
                    "self"
                ],
                "test_astype_str_cast_td64": [
                    "self"
                ],
                "test_astype_unicode": [
                    "self"
                ],
                "test_astype_dict_like": [
                    "self",
                    "dtype_class"
                ],
                "test_astype_categories_raises": [
                    "self"
                ],
                "test_astype_from_categorical": [
                    "self"
                ],
                "test_astype_categorical_to_other": [
                    "self"
                ],
                "test_astype_categorical_to_categorical": [
                    "self",
                    "name",
                    "dtype_ordered",
                    "series_ordered"
                ],
                "test_astype_bool_missing_to_categorical": [
                    "self"
                ],
                "test_astype_categoricaldtype": [
                    "self"
                ],
                "test_astype_generic_timestamp_no_frequency": [
                    "self",
                    "dtype",
                    "request"
                ],
                "test_astype_empty_constructor_equality": [
                    "self",
                    "dtype"
                ],
                "test_arg_for_errors_in_astype": [
                    "self"
                ],
                "test_intercept_astype_object": [
                    "self"
                ],
                "test_series_to_categorical": [
                    "self"
                ],
                "test_infer_objects_series": [
                    "self"
                ],
                "test_values_compatibility": [
                    "self",
                    "data"
                ],
                "test_reindex_astype_order_consistency": [
                    "self"
                ]
            }
        },
        "pandas.tests.series.test_duplicates": {
            "test_nunique": [],
            "test_unique": [],
            "test_unique_data_ownership": [],
            "test_is_unique": [
                "data",
                "expected"
            ],
            "test_is_unique_class_ne": [
                "capsys"
            ]
        },
        "pandas.tests.series.conftest": {
            "string_series": [],
            "object_series": []
        },
        "pandas.tests.series.test_arithmetic": {
            "_permute": [
                "obj"
            ],
            "TestSeriesFlexArithmetic": {
                "test_flex_method_equivalence": [
                    "self",
                    "opname",
                    "ts"
                ],
                "test_flex_method_subclass_metadata_preservation": [
                    "self",
                    "all_arithmetic_operators"
                ],
                "test_flex_add_scalar_fill_value": [
                    "self"
                ],
                "test_operators_combine": [
                    "self",
                    "op",
                    "equiv_op",
                    "fv"
                ]
            },
            "TestSeriesArithmetic": {
                "test_add_series_with_period_index": [
                    "self"
                ],
                "test_string_addition": [
                    "self",
                    "target_add",
                    "input_value",
                    "expected_value"
                ],
                "test_divmod": [
                    "self"
                ],
                "test_series_integer_mod": [
                    "self",
                    "index"
                ],
                "test_add_with_duplicate_index": [
                    "self"
                ],
                "test_add_na_handling": [
                    "self"
                ],
                "test_add_corner_cases": [
                    "self",
                    "datetime_series"
                ],
                "test_mul_empty_int_corner_case": [
                    "self"
                ],
                "test_sub_datetimelike_align": [
                    "self"
                ]
            },
            "TestSeriesFlexComparison": {
                "test_comparison_flex_basic": [
                    "self"
                ],
                "test_comparison_flex_alignment": [
                    "self"
                ],
                "test_comparison_flex_alignment_fill": [
                    "self"
                ]
            },
            "TestSeriesComparison": {
                "test_comparison_different_length": [
                    "self"
                ],
                "test_ser_flex_cmp_return_dtypes": [
                    "self",
                    "opname"
                ],
                "test_ser_flex_cmp_return_dtypes_empty": [
                    "self",
                    "opname"
                ],
                "test_ser_cmp_result_names": [
                    "self",
                    "names",
                    "op"
                ],
                "test_comparisons": [
                    "self"
                ],
                "test_categorical_comparisons": [
                    "self"
                ],
                "test_unequal_categorical_comparison_raises_type_error": [
                    "self"
                ],
                "test_comparison_tuples": [
                    "self"
                ],
                "test_comparison_operators_with_nas": [
                    "self"
                ],
                "test_ne": [
                    "self"
                ],
                "test_comp_ops_df_compat": [
                    "self"
                ],
                "test_compare_series_interval_keyword": [
                    "self"
                ]
            },
            "TestTimeSeriesArithmetic": {
                "test_series_add_tz_mismatch_converts_to_utc_duplicate": [
                    "self"
                ],
                "test_series_add_tz_mismatch_converts_to_utc": [
                    "self"
                ],
                "test_series_add_aware_naive_raises": [
                    "self"
                ],
                "test_datetime_understood": [
                    "self"
                ]
            }
        },
        "pandas.tests.series.test_analytics": {
            "TestSeriesAnalytics": {
                "test_prod_numpy16_bug": [
                    "self"
                ],
                "test_matmul": [
                    "self"
                ],
                "test_ptp": [
                    "self"
                ],
                "test_repeat": [
                    "self"
                ],
                "test_numpy_repeat": [
                    "self"
                ],
                "test_is_monotonic": [
                    "self"
                ],
                "test_validate_any_all_out_keepdims_raises": [
                    "self",
                    "kwargs",
                    "func"
                ],
                "test_validate_sum_initial": [
                    "self"
                ],
                "test_validate_median_initial": [
                    "self"
                ],
                "test_validate_stat_keepdims": [
                    "self"
                ],
                "test_td64_summation_overflow": [
                    "self"
                ]
            }
        },
        "pandas.tests.series.test_missing": {
            "TestSeriesMissingData": {
                "test_timedelta_fillna": [
                    "self"
                ],
                "test_datetime64_fillna": [
                    "self"
                ],
                "test_datetime64_tz_fillna": [
                    "self",
                    "tz"
                ],
                "test_fillna_dt64tz_with_method": [
                    "self"
                ],
                "test_fillna_consistency": [
                    "self"
                ],
                "test_datetime64tz_fillna_round_issue": [
                    "self"
                ],
                "test_fillna_downcast": [
                    "self"
                ],
                "test_fillna_int": [
                    "self"
                ],
                "test_categorical_nan_equality": [
                    "self"
                ],
                "test_categorical_nan_handling": [
                    "self"
                ],
                "test_fillna_nat": [
                    "self"
                ],
                "test_isna_for_inf": [
                    "self"
                ],
                "test_isnull_for_inf_deprecated": [
                    "self"
                ],
                "test_fillna": [
                    "self",
                    "datetime_series"
                ],
                "test_fillna_bug": [
                    "self"
                ],
                "test_fillna_invalid_method": [
                    "self",
                    "datetime_series"
                ],
                "test_ffill": [
                    "self"
                ],
                "test_ffill_mixed_dtypes_without_missing_data": [
                    "self"
                ],
                "test_bfill": [
                    "self"
                ],
                "test_timedelta64_nan": [
                    "self"
                ],
                "test_dropna_empty": [
                    "self"
                ],
                "test_datetime64_tz_dropna": [
                    "self"
                ],
                "test_dropna_no_nan": [
                    "self"
                ],
                "test_dropna_intervals": [
                    "self"
                ],
                "test_valid": [
                    "self",
                    "datetime_series"
                ],
                "test_isna": [
                    "self"
                ],
                "test_notna": [
                    "self"
                ],
                "test_pad_nan": [
                    "self"
                ],
                "test_pad_require_monotonicity": [
                    "self"
                ],
                "test_dropna_preserve_name": [
                    "self",
                    "datetime_series"
                ],
                "test_series_fillna_limit": [
                    "self"
                ],
                "test_series_pad_backfill_limit": [
                    "self"
                ]
            }
        },
        "pandas.tests.series": {},
        "pandas.tests.series.test_block_internals": {
            "TestSeriesBlockInternals": {
                "test_setitem_invalidates_datetime_index_freq": [
                    "self"
                ],
                "test_dt64tz_setitem_does_not_mutate_dti": [
                    "self"
                ]
            }
        },
        "pandas.tests.series.apply.test_apply_relabeling": {
            "TestNamedAggregation": {
                "test_relabel_no_duplicated_method": [
                    "self"
                ],
                "test_relabel_duplicated_method": [
                    "self"
                ]
            }
        },
        "pandas.tests.series.apply.test_series_apply": {
            "TestSeriesApply": {
                "test_apply": [
                    "self",
                    "datetime_series"
                ],
                "test_apply_same_length_inference_bug": [
                    "self"
                ],
                "test_apply_dont_convert_dtype": [
                    "self"
                ],
                "test_with_string_args": [
                    "self",
                    "datetime_series"
                ],
                "test_apply_args": [
                    "self"
                ],
                "test_series_map_box_timestamps": [
                    "self"
                ],
                "test_apply_box": [
                    "self"
                ],
                "test_apply_datetimetz": [
                    "self"
                ],
                "test_apply_dict_depr": [
                    "self"
                ],
                "test_apply_categorical": [
                    "self"
                ],
                "test_apply_categorical_with_nan_values": [
                    "self",
                    "series"
                ],
                "test_apply_empty_integer_series_with_datetime_index": [
                    "self"
                ]
            },
            "TestSeriesAggregate": {
                "test_transform": [
                    "self",
                    "string_series"
                ],
                "test_transform_and_agg_error": [
                    "self",
                    "string_series"
                ],
                "test_demo": [
                    "self"
                ],
                "test_multiple_aggregators_with_dict_api": [
                    "self"
                ],
                "test_agg_apply_evaluate_lambdas_the_same": [
                    "self",
                    "string_series"
                ],
                "test_with_nested_series": [
                    "self",
                    "datetime_series"
                ],
                "test_replicate_describe": [
                    "self",
                    "string_series"
                ],
                "test_reduce": [
                    "self",
                    "string_series"
                ],
                "test_non_callable_aggregates": [
                    "self"
                ],
                "test_agg_cython_table": [
                    "self",
                    "series",
                    "func",
                    "expected"
                ],
                "test_agg_cython_table_transform": [
                    "self",
                    "series",
                    "func",
                    "expected"
                ],
                "test_agg_cython_table_raises": [
                    "self",
                    "series",
                    "func",
                    "expected"
                ],
                "test_transform_none_to_type": [
                    "self"
                ]
            },
            "TestSeriesMap": {
                "test_map": [
                    "self",
                    "datetime_series"
                ],
                "test_map_empty": [
                    "self",
                    "index"
                ],
                "test_map_compat": [
                    "self"
                ],
                "test_map_int": [
                    "self"
                ],
                "test_map_type_inference": [
                    "self"
                ],
                "test_map_decimal": [
                    "self",
                    "string_series"
                ],
                "test_map_na_exclusion": [
                    "self"
                ],
                "test_map_dict_with_tuple_keys": [
                    "self"
                ],
                "test_map_counter": [
                    "self"
                ],
                "test_map_defaultdict": [
                    "self"
                ],
                "test_map_dict_na_key": [
                    "self"
                ],
                "test_map_dict_subclass_with_missing": [
                    "self"
                ],
                "test_map_dict_subclass_without_missing": [
                    "self"
                ],
                "test_map_abc_mapping": [
                    "self",
                    "non_dict_mapping_subclass"
                ],
                "test_map_abc_mapping_with_missing": [
                    "self",
                    "non_dict_mapping_subclass"
                ],
                "test_map_box": [
                    "self"
                ],
                "test_map_categorical": [
                    "self"
                ],
                "test_map_datetimetz": [
                    "self"
                ],
                "test_map_missing_mixed": [
                    "self",
                    "vals",
                    "mapping",
                    "exp"
                ],
                "test_apply_series_on_date_time_index_aware_series": [
                    "self",
                    "dti",
                    "exp"
                ],
                "test_apply_scaler_on_date_time_index_aware_series": [
                    "self"
                ],
                "test_map_float_to_string_precision": [
                    "self"
                ],
                "test_map_with_invalid_na_action_raises": [
                    "self"
                ],
                "test_apply_to_timedelta": [
                    "self"
                ]
            }
        },
        "pandas.tests.series.apply": {},
        "pandas.tests.series.methods.test_clip": {
            "TestSeriesClip": {
                "test_clip": [
                    "self",
                    "datetime_series"
                ],
                "test_clip_types_and_nulls": [
                    "self"
                ],
                "test_clip_with_na_args": [
                    "self"
                ],
                "test_clip_against_series": [
                    "self"
                ],
                "test_clip_against_list_like": [
                    "self",
                    "inplace",
                    "upper"
                ],
                "test_clip_with_datetimes": [
                    "self"
                ]
            }
        },
        "pandas.tests.series.methods.test_asof": {
            "TestSeriesAsof": {
                "test_basic": [
                    "self"
                ],
                "test_scalar": [
                    "self"
                ],
                "test_with_nan": [
                    "self"
                ],
                "test_periodindex": [
                    "self"
                ],
                "test_errors": [
                    "self"
                ],
                "test_all_nans": [
                    "self"
                ]
            }
        },
        "pandas.tests.series.methods.test_value_counts": {
            "TestSeriesValueCounts": {
                "test_value_counts_datetime": [
                    "self"
                ],
                "test_value_counts_datetime_tz": [
                    "self"
                ],
                "test_value_counts_period": [
                    "self"
                ],
                "test_value_counts_categorical_ordered": [
                    "self"
                ],
                "test_value_counts_categorical_not_ordered": [
                    "self"
                ],
                "test_value_counts_categorical": [
                    "self"
                ],
                "test_value_counts_categorical_with_nan": [
                    "self"
                ],
                "test_value_counts_bool_with_nan": [
                    "self",
                    "ser",
                    "dropna",
                    "exp"
                ]
            }
        },
        "pandas.tests.series.methods.test_rank": {
            "test_rank_dense_pct": [
                "dtype",
                "ser",
                "exp"
            ],
            "test_rank_min_pct": [
                "dtype",
                "ser",
                "exp"
            ],
            "test_rank_max_pct": [
                "dtype",
                "ser",
                "exp"
            ],
            "test_rank_average_pct": [
                "dtype",
                "ser",
                "exp"
            ],
            "test_rank_first_pct": [
                "dtype",
                "ser",
                "exp"
            ],
            "test_pct_max_many_rows": [],
            "TestSeriesRank": {
                "test_rank": [
                    "self",
                    "datetime_series"
                ],
                "test_rank_categorical": [
                    "self"
                ],
                "test_rank_signature": [
                    "self"
                ],
                "test_rank_inf": [
                    "self",
                    "contents",
                    "dtype"
                ],
                "test_rank_tie_methods": [
                    "self"
                ],
                "test_rank_tie_methods_on_infs_nans": [
                    "self",
                    "method",
                    "na_option",
                    "ascending"
                ],
                "test_rank_desc_mix_nans_infs": [
                    "self"
                ],
                "test_rank_methods_series": [
                    "self"
                ],
                "test_rank_dense_method": [
                    "self"
                ],
                "test_rank_descending": [
                    "self"
                ],
                "test_rank_int": [
                    "self"
                ],
                "test_rank_object_bug": [
                    "self"
                ],
                "test_rank_modify_inplace": [
                    "self"
                ]
            }
        },
        "pandas.tests.series.methods.test_tz_convert": {
            "TestTZConvert": {
                "test_series_tz_convert": [
                    "self"
                ],
                "test_series_tz_convert_to_utc": [
                    "self"
                ]
            }
        },
        "pandas.tests.series.methods.test_at_time": {
            "TestAtTime": {
                "test_localized_at_time": [
                    "self",
                    "tzstr"
                ],
                "test_at_time": [
                    "self"
                ],
                "test_at_time_raises": [
                    "self"
                ]
            }
        },
        "pandas.tests.series.methods.test_between_time": {
            "TestBetweenTime": {
                "test_localized_between_time": [
                    "self",
                    "tzstr"
                ],
                "test_between_time": [
                    "self"
                ],
                "test_between_time_raises": [
                    "self"
                ],
                "test_between_time_types": [
                    "self"
                ],
                "test_between_time_formats": [
                    "self"
                ],
                "test_between_time_axis": [
                    "self"
                ]
            }
        },
        "pandas.tests.series.methods.test_tz_localize": {
            "TestTZLocalize": {
                "test_series_tz_localize": [
                    "self"
                ],
                "test_series_tz_localize_ambiguous_bool": [
                    "self"
                ],
                "test_series_tz_localize_nonexistent": [
                    "self",
                    "tz",
                    "method",
                    "exp"
                ],
                "test_series_tz_localize_empty": [
                    "self",
                    "tzstr"
                ]
            }
        },
        "pandas.tests.series.methods.test_compare": {
            "test_compare_axis": [
                "align_axis"
            ],
            "test_compare_various_formats": [
                "keep_shape",
                "keep_equal"
            ],
            "test_compare_with_equal_nulls": [],
            "test_compare_with_non_equal_nulls": [],
            "test_compare_multi_index": [],
            "test_compare_unaligned_objects": []
        },
        "pandas.tests.series.methods.test_unstack": {
            "test_unstack": [],
            "test_unstack_tuplename_in_multiindex": [],
            "test_unstack_mixed_type_name_in_multiindex": [
                "unstack_idx",
                "expected_values",
                "expected_index",
                "expected_columns"
            ],
            "test_unstack_multi_index_categorical_values": []
        },
        "pandas.tests.series.methods.test_replace": {
            "TestSeriesReplace": {
                "test_replace": [
                    "self",
                    "datetime_series"
                ],
                "test_replace_gh5319": [
                    "self"
                ],
                "test_replace_timedelta_td64": [
                    "self"
                ],
                "test_replace_with_single_list": [
                    "self"
                ],
                "test_replace_with_empty_list": [
                    "self"
                ],
                "test_replace_mixed_types": [
                    "self"
                ],
                "test_replace_bool_with_string_no_op": [
                    "self"
                ],
                "test_replace_bool_with_string": [
                    "self"
                ],
                "test_replace_bool_with_bool": [
                    "self"
                ],
                "test_replace_with_dict_with_bool_keys": [
                    "self"
                ],
                "test_replace2": [
                    "self"
                ],
                "test_replace_with_dictlike_and_string_dtype": [
                    "self"
                ],
                "test_replace_with_empty_dictlike": [
                    "self"
                ],
                "test_replace_string_with_number": [
                    "self"
                ],
                "test_replace_replacer_equals_replacement": [
                    "self"
                ],
                "test_replace_unicode_with_number": [
                    "self"
                ],
                "test_replace_mixed_types_with_string": [
                    "self"
                ],
                "test_replace_categorical": [
                    "self",
                    "categorical",
                    "numeric"
                ],
                "test_replace_categorical_single": [
                    "self"
                ],
                "test_replace_with_no_overflowerror": [
                    "self"
                ],
                "test_replace_commutative": [
                    "self",
                    "ser",
                    "to_replace",
                    "exp"
                ],
                "test_replace_no_cast": [
                    "self",
                    "ser",
                    "exp"
                ],
                "test_replace_invalid_to_replace": [
                    "self"
                ],
                "test_replace_only_one_dictlike_arg": [
                    "self"
                ],
                "test_replace_extension_other": [
                    "self"
                ],
                "test_replace_with_compiled_regex": [
                    "self"
                ]
            }
        },
        "pandas.tests.series.methods.test_reindex_like": {
            "test_reindex_like": [
                "datetime_series"
            ],
            "test_reindex_like_nearest": []
        },
        "pandas.tests.series.methods.test_reset_index": {
            "test_reset_index_dtypes_on_empty_series_with_multiindex": [
                "array",
                "dtype"
            ],
            "TestResetIndex": {
                "test_reset_index": [
                    "self"
                ],
                "test_reset_index_name": [
                    "self"
                ],
                "test_reset_index_level": [
                    "self"
                ],
                "test_reset_index_range": [
                    "self"
                ],
                "test_reset_index_drop_errors": [
                    "self"
                ]
            }
        },
        "pandas.tests.series.methods.test_searchsorted": {
            "TestSeriesSearchSorted": {
                "test_searchsorted": [
                    "self"
                ],
                "test_searchsorted_numeric_dtypes_scalar": [
                    "self"
                ],
                "test_searchsorted_numeric_dtypes_vector": [
                    "self"
                ],
                "test_searchsorted_datetime64_scalar": [
                    "self"
                ],
                "test_searchsorted_datetime64_scalar_mixed_timezones": [
                    "self"
                ],
                "test_searchsorted_datetime64_list": [
                    "self"
                ],
                "test_searchsorted_sorter": [
                    "self"
                ]
            }
        },
        "pandas.tests.series.methods.test_quantile": {
            "TestSeriesQuantile": {
                "test_quantile": [
                    "self",
                    "datetime_series"
                ],
                "test_quantile_multi": [
                    "self",
                    "datetime_series"
                ],
                "test_quantile_interpolation": [
                    "self",
                    "datetime_series"
                ],
                "test_quantile_interpolation_dtype": [
                    "self"
                ],
                "test_quantile_nan": [
                    "self"
                ],
                "test_quantile_box": [
                    "self",
                    "case"
                ],
                "test_datetime_timedelta_quantiles": [
                    "self"
                ],
                "test_quantile_nat": [
                    "self"
                ],
                "test_quantile_sparse": [
                    "self",
                    "values",
                    "dtype"
                ],
                "test_quantile_empty": [
                    "self"
                ]
            }
        },
        "pandas.tests.series.methods.test_to_period": {
            "TestToPeriod": {
                "test_to_period": [
                    "self"
                ],
                "test_to_period_raises": [
                    "self",
                    "index"
                ]
            }
        },
        "pandas.tests.series.methods.test_append": {
            "TestSeriesAppend": {
                "test_append": [
                    "self",
                    "datetime_series",
                    "string_series",
                    "object_series"
                ],
                "test_append_many": [
                    "self",
                    "datetime_series"
                ],
                "test_append_duplicates": [
                    "self"
                ],
                "test_append_tuples": [
                    "self"
                ],
                "test_append_dataframe_raises": [
                    "self"
                ]
            },
            "TestSeriesAppendWithDatetimeIndex": {
                "test_append": [
                    "self"
                ],
                "test_append_tz": [
                    "self"
                ],
                "test_append_tz_explicit_pytz": [
                    "self"
                ],
                "test_append_tz_dateutil": [
                    "self"
                ],
                "test_series_append_aware": [
                    "self"
                ],
                "test_series_append_aware_naive": [
                    "self"
                ],
                "test_series_append_dst": [
                    "self"
                ]
            }
        },
        "pandas.tests.series.methods.test_interpolate": {
            "nontemporal_method": [
                "request"
            ],
            "interp_methods_ind": [
                "request"
            ],
            "TestSeriesInterpolateData": {
                "test_interpolate": [
                    "self",
                    "datetime_series",
                    "string_series"
                ],
                "test_interpolate_time_raises_for_non_timeseries": [
                    "self"
                ],
                "test_interpolate_cubicspline": [
                    "self"
                ],
                "test_interpolate_pchip": [
                    "self"
                ],
                "test_interpolate_akima": [
                    "self"
                ],
                "test_interpolate_piecewise_polynomial": [
                    "self"
                ],
                "test_interpolate_from_derivatives": [
                    "self"
                ],
                "test_interpolate_corners": [
                    "self",
                    "kwargs"
                ],
                "test_interpolate_index_values": [
                    "self"
                ],
                "test_interpolate_non_ts": [
                    "self"
                ],
                "test_nan_interpolate": [
                    "self",
                    "kwargs"
                ],
                "test_nan_irregular_index": [
                    "self"
                ],
                "test_nan_str_index": [
                    "self"
                ],
                "test_interp_quad": [
                    "self"
                ],
                "test_interp_scipy_basic": [
                    "self"
                ],
                "test_interp_limit": [
                    "self"
                ],
                "test_interpolate_invalid_nonpositive_limit": [
                    "self",
                    "nontemporal_method",
                    "limit"
                ],
                "test_interpolate_invalid_float_limit": [
                    "self",
                    "nontemporal_method"
                ],
                "test_interp_invalid_method": [
                    "self",
                    "invalid_method"
                ],
                "test_interp_limit_forward": [
                    "self"
                ],
                "test_interp_unlimited": [
                    "self"
                ],
                "test_interp_limit_bad_direction": [
                    "self"
                ],
                "test_interp_limit_area": [
                    "self"
                ],
                "test_interp_limit_direction_raises": [
                    "self",
                    "method",
                    "limit_direction",
                    "expected"
                ],
                "test_interp_limit_direction": [
                    "self"
                ],
                "test_interp_limit_to_ends": [
                    "self"
                ],
                "test_interp_limit_before_ends": [
                    "self"
                ],
                "test_interp_all_good": [
                    "self"
                ],
                "test_interp_multiIndex": [
                    "self",
                    "check_scipy"
                ],
                "test_interp_nonmono_raise": [
                    "self"
                ],
                "test_interp_datetime64": [
                    "self",
                    "method",
                    "tz_naive_fixture"
                ],
                "test_interp_pad_datetime64tz_values": [
                    "self"
                ],
                "test_interp_limit_no_nans": [
                    "self"
                ],
                "test_no_order": [
                    "self",
                    "method"
                ],
                "test_interpolate_spline_invalid_order": [
                    "self",
                    "order"
                ],
                "test_spline": [
                    "self"
                ],
                "test_spline_extrapolate": [
                    "self"
                ],
                "test_spline_smooth": [
                    "self"
                ],
                "test_spline_interpolation": [
                    "self"
                ],
                "test_interp_timedelta64": [
                    "self"
                ],
                "test_series_interpolate_method_values": [
                    "self"
                ],
                "test_series_interpolate_intraday": [
                    "self"
                ],
                "test_interp_non_timedelta_index": [
                    "self",
                    "interp_methods_ind",
                    "ind"
                ],
                "test_interpolate_timedelta_index": [
                    "self",
                    "interp_methods_ind"
                ],
                "test_interpolate_unsorted_index": [
                    "self",
                    "ascending",
                    "expected_values"
                ]
            }
        },
        "pandas.tests.series.methods.test_pct_change": {
            "test_pct_change_with_duplicated_indices": [
                "fill_method"
            ],
            "TestSeriesPctChange": {
                "test_pct_change": [
                    "self",
                    "datetime_series"
                ],
                "test_pct_change_with_duplicate_axis": [
                    "self"
                ],
                "test_pct_change_shift_over_nas": [
                    "self"
                ],
                "test_pct_change_periods_freq": [
                    "self",
                    "freq",
                    "periods",
                    "fill_method",
                    "limit",
                    "datetime_series"
                ]
            }
        },
        "pandas.tests.series.methods.test_drop": {
            "test_drop_unique_and_non_unique_index": [
                "data",
                "index",
                "axis",
                "drop_labels",
                "expected_data",
                "expected_index"
            ],
            "test_drop_exception_raised": [
                "data",
                "index",
                "drop_labels",
                "axis",
                "error_type",
                "error_desc"
            ],
            "test_drop_with_ignore_errors": [],
            "test_drop_empty_list": [
                "index",
                "drop_labels"
            ],
            "test_drop_non_empty_list": [
                "data",
                "index",
                "drop_labels"
            ]
        },
        "pandas.tests.series.methods.test_update": {
            "TestUpdate": {
                "test_update": [
                    "self"
                ],
                "test_update_dtypes": [
                    "self",
                    "other",
                    "dtype",
                    "expected"
                ],
                "test_update_from_non_series": [
                    "self",
                    "series",
                    "other",
                    "expected"
                ],
                "test_update_extension_array_series": [
                    "self",
                    "result",
                    "target",
                    "expected"
                ]
            }
        },
        "pandas.tests.series.methods.test_rename_axis": {
            "TestSeriesRenameAxis": {
                "test_rename_axis_mapper": [
                    "self"
                ],
                "test_rename_axis_inplace": [
                    "self",
                    "datetime_series"
                ],
                "test_rename_axis_none": [
                    "self",
                    "kwargs"
                ]
            }
        },
        "pandas.tests.series.methods.test_combine": {
            "TestCombine": {
                "test_combine_scalar": [
                    "self"
                ]
            }
        },
        "pandas.tests.series.methods.test_to_timestamp": {
            "TestToTimestamp": {
                "test_to_timestamp": [
                    "self"
                ],
                "test_to_timestamp_raises": [
                    "self",
                    "index"
                ]
            }
        },
        "pandas.tests.series.methods.test_nlargest": {
            "s_main_dtypes": [],
            "s_main_dtypes_split": [
                "request",
                "s_main_dtypes"
            ],
            "assert_check_nselect_boundary": [
                "vals",
                "dtype",
                "method"
            ],
            "TestSeriesNLargestNSmallest": {
                "test_nlargest_error": [
                    "self",
                    "r"
                ],
                "test_nsmallest_nlargest": [
                    "self",
                    "s_main_dtypes_split"
                ],
                "test_nlargest_misc": [
                    "self"
                ],
                "test_nlargest_n": [
                    "self",
                    "n"
                ],
                "test_nlargest_boundary_integer": [
                    "self",
                    "nselect_method",
                    "any_int_dtype"
                ],
                "test_nlargest_boundary_float": [
                    "self",
                    "nselect_method",
                    "float_dtype"
                ],
                "test_nlargest_boundary_datetimelike": [
                    "self",
                    "nselect_method",
                    "dtype"
                ],
                "test_nlargest_duplicate_keep_all_ties": [
                    "self"
                ],
                "test_nlargest_boolean": [
                    "self",
                    "data",
                    "expected"
                ]
            }
        },
        "pandas.tests.series.methods.test_sort_values": {
            "TestSeriesSortValues": {
                "test_sort_values": [
                    "self",
                    "datetime_series"
                ],
                "test_sort_values_categorical": [
                    "self"
                ],
                "test_sort_values_ignore_index": [
                    "self",
                    "inplace",
                    "original_list",
                    "sorted_list",
                    "ignore_index",
                    "output_index"
                ]
            },
            "TestSeriesSortingKey": {
                "test_sort_values_key": [
                    "self"
                ],
                "test_sort_values_key_nan": [
                    "self"
                ]
            }
        },
        "pandas.tests.series.methods.test_astype": {
            "TestAstype": {
                "test_astype_dt64_to_str": [
                    "self"
                ],
                "test_astype_dt64tz_to_str": [
                    "self"
                ]
            }
        },
        "pandas.tests.series.methods.test_sort_index": {
            "TestSeriesSortIndex": {
                "test_sort_index_name": [
                    "self",
                    "datetime_series"
                ],
                "test_sort_index": [
                    "self",
                    "datetime_series"
                ],
                "test_sort_index_inplace": [
                    "self",
                    "datetime_series"
                ],
                "test_sort_index_level": [
                    "self"
                ],
                "test_sort_index_multiindex": [
                    "self",
                    "level"
                ],
                "test_sort_index_kind": [
                    "self"
                ],
                "test_sort_index_na_position": [
                    "self"
                ],
                "test_sort_index_intervals": [
                    "self"
                ],
                "test_sort_index_ignore_index": [
                    "self",
                    "inplace",
                    "original_list",
                    "sorted_list",
                    "ascending",
                    "ignore_index",
                    "output_index"
                ],
                "test_sort_index_ascending_list": [
                    "self"
                ]
            },
            "TestSeriesSortIndexKey": {
                "test_sort_index_multiindex_key": [
                    "self"
                ],
                "test_sort_index_multiindex_key_multi_level": [
                    "self"
                ],
                "test_sort_index_key": [
                    "self"
                ],
                "test_sort_index_key_int": [
                    "self"
                ],
                "test_sort_index_kind_key": [
                    "self",
                    "sort_by_key"
                ],
                "test_sort_index_kind_neg_key": [
                    "self"
                ],
                "test_sort_index_na_position_key": [
                    "self",
                    "sort_by_key"
                ],
                "test_changes_length_raises": [
                    "self"
                ],
                "test_sort_values_key_type": [
                    "self"
                ]
            }
        },
        "pandas.tests.series.methods.test_round": {
            "TestSeriesRound": {
                "test_round": [
                    "self",
                    "datetime_series"
                ],
                "test_round_numpy": [
                    "self"
                ],
                "test_round_numpy_with_nan": [
                    "self"
                ],
                "test_round_builtin": [
                    "self"
                ],
                "test_round_nat": [
                    "self",
                    "method",
                    "freq"
                ]
            }
        },
        "pandas.tests.series.methods.test_truncate": {
            "TestTruncate": {
                "test_truncate": [
                    "self",
                    "datetime_series"
                ],
                "test_truncate_nonsortedindex": [
                    "self"
                ],
                "test_truncate_decreasing_index": [
                    "self",
                    "before",
                    "after",
                    "indices",
                    "klass"
                ],
                "test_truncate_datetimeindex_tz": [
                    "self"
                ],
                "test_truncate_periodindex": [
                    "self"
                ],
                "test_truncate_multiindex": [
                    "self"
                ],
                "test_truncate_one_element_series": [
                    "self"
                ]
            }
        },
        "pandas.tests.series.methods.test_shift": {
            "TestShift": {
                "test_shift": [
                    "self",
                    "datetime_series"
                ],
                "test_shift2": [
                    "self"
                ],
                "test_shift_fill_value": [
                    "self"
                ],
                "test_shift_categorical_fill_value": [
                    "self"
                ],
                "test_shift_dst": [
                    "self"
                ],
                "test_tshift": [
                    "self",
                    "datetime_series"
                ],
                "test_tshift_deprecated": [
                    "self",
                    "datetime_series"
                ],
                "test_period_index_series_shift_with_freq": [
                    "self"
                ],
                "test_datetime_series_shift_with_freq": [
                    "self",
                    "datetime_series"
                ],
                "test_period_index_series_shift_with_freq_error": [
                    "self"
                ],
                "test_datetime_series_shift_with_freq_error": [
                    "self",
                    "datetime_series"
                ],
                "test_shift_int": [
                    "self",
                    "datetime_series"
                ],
                "test_shift_object_non_scalar_fill": [
                    "self"
                ],
                "test_shift_categorical": [
                    "self"
                ],
                "test_shift_dt64values_int_fill_deprecated": [
                    "self"
                ],
                "test_shift_preserve_freqstr": [
                    "self",
                    "periods"
                ],
                "test_shift_non_writable_array": [
                    "self",
                    "input_data",
                    "output_data"
                ]
            }
        },
        "pandas.tests.series.methods.test_align": {
            "test_align": [
                "datetime_series",
                "first_slice",
                "second_slice",
                "join_type",
                "fill"
            ],
            "test_align_fill_method": [
                "datetime_series",
                "first_slice",
                "second_slice",
                "join_type",
                "method",
                "limit"
            ],
            "test_align_nocopy": [
                "datetime_series"
            ],
            "test_align_same_index": [
                "datetime_series"
            ],
            "test_align_multiindex": [],
            "test_align_with_dataframe_method": [
                "method"
            ],
            "test_align_dt64tzindex_mismatched_tzs": [],
            "test_align_periodindex": [
                "join_type"
            ]
        },
        "pandas.tests.series.methods.test_combine_first": {
            "TestCombineFirst": {
                "test_combine_first_period_datetime": [
                    "self"
                ],
                "test_combine_first_name": [
                    "self",
                    "datetime_series"
                ],
                "test_combine_first": [
                    "self"
                ],
                "test_combine_first_dt64": [
                    "self"
                ],
                "test_combine_first_dt_tz_values": [
                    "self",
                    "tz_naive_fixture"
                ]
            }
        },
        "pandas.tests.series.methods.test_fillna": {
            "TestSeriesFillNA": {
                "test_fillna_pytimedelta": [
                    "self"
                ],
                "test_fillna_period": [
                    "self"
                ],
                "test_fillna_dt64_timestamp": [
                    "self"
                ],
                "test_fillna_dt64_non_nao": [
                    "self"
                ],
                "test_fillna_numeric_inplace": [
                    "self"
                ],
                "test_fillna_categorical": [
                    "self",
                    "fill_value",
                    "expected_output"
                ],
                "test_fillna_categorical_with_new_categories": [
                    "self",
                    "fill_value",
                    "expected_output"
                ],
                "test_fillna_categorical_raises": [
                    "self"
                ],
                "test_fillna_listlike_invalid": [
                    "self"
                ],
                "test_fillna_method_and_limit_invalid": [
                    "self"
                ]
            }
        },
        "pandas.tests.series.methods.test_argsort": {
            "TestSeriesArgsort": {
                "_check_accum_op": [
                    "self",
                    "name",
                    "ser",
                    "check_dtype"
                ],
                "test_argsort": [
                    "self",
                    "datetime_series"
                ],
                "test_argsort_stable": [
                    "self"
                ],
                "test_argsort_preserve_name": [
                    "self",
                    "datetime_series"
                ]
            }
        },
        "pandas.tests.series.methods.test_autocorr": {
            "TestAutoCorr": {
                "test_autocorr": [
                    "self",
                    "datetime_series"
                ]
            }
        },
        "pandas.tests.series.methods.test_to_dict": {
            "TestSeriesToDict": {
                "test_to_dict": [
                    "self",
                    "mapping",
                    "datetime_series"
                ]
            }
        },
        "pandas.tests.series.methods.test_describe": {
            "TestSeriesDescribe": {
                "test_describe": [
                    "self"
                ],
                "test_describe_empty_object": [
                    "self"
                ],
                "test_describe_with_tz": [
                    "self",
                    "tz_naive_fixture"
                ],
                "test_describe_with_tz_warns": [
                    "self"
                ],
                "test_datetime_is_numeric_includes_datetime": [
                    "self"
                ]
            }
        },
        "pandas.tests.series.methods.test_head_tail": {
            "test_head_tail": [
                "string_series"
            ]
        },
        "pandas.tests.series.methods.test_droplevel": {
            "TestDropLevel": {
                "test_droplevel": [
                    "self"
                ]
            }
        },
        "pandas.tests.series.methods.test_equals": {
            "test_equals": [
                "arr",
                "idx"
            ],
            "test_equals_list_array": [],
            "test_equals_false_negative": []
        },
        "pandas.tests.series.methods.test_between": {
            "TestBetween": {
                "test_between": [
                    "self"
                ],
                "test_between_datetime_values": [
                    "self"
                ],
                "test_between_period_values": [
                    "self"
                ]
            }
        },
        "pandas.tests.series.methods.test_duplicated": {
            "test_duplicated_keep": [
                "keep",
                "expected"
            ],
            "test_duplicated_nan_none": [
                "keep",
                "expected"
            ]
        },
        "pandas.tests.series.methods.test_diff": {
            "TestSeriesDiff": {
                "test_diff_np": [
                    "self"
                ],
                "test_diff_int": [
                    "self"
                ],
                "test_diff_tz": [
                    "self"
                ],
                "test_diff_bool": [
                    "self",
                    "input",
                    "output",
                    "diff"
                ],
                "test_diff_object_dtype": [
                    "self"
                ]
            }
        },
        "pandas.tests.series.methods.test_drop_duplicates": {
            "test_drop_duplicates": [
                "any_numpy_dtype",
                "keep",
                "expected"
            ],
            "test_drop_duplicates_bool": [
                "keep",
                "expected"
            ],
            "test_drop_duplicates_no_duplicates": [
                "any_numpy_dtype",
                "keep",
                "values"
            ],
            "TestSeriesDropDuplicates": {
                "test_drop_duplicates_categorical_non_bool": [
                    "self",
                    "dtype",
                    "ordered"
                ],
                "test_drop_duplicates_categorical_bool": [
                    "self",
                    "ordered"
                ]
            }
        },
        "pandas.tests.series.methods.test_asfreq": {
            "TestAsFreq": {
                "test_asfreq_ts": [
                    "self"
                ],
                "test_tz_aware_asfreq": [
                    "self",
                    "tz"
                ],
                "test_asfreq": [
                    "self"
                ],
                "test_asfreq_datetimeindex_empty_series": [
                    "self"
                ],
                "test_asfreq_keep_index_name": [
                    "self"
                ],
                "test_asfreq_normalize": [
                    "self"
                ]
            }
        },
        "pandas.tests.series.methods.test_cov_corr": {
            "TestSeriesCov": {
                "test_cov": [
                    "self",
                    "datetime_series"
                ],
                "test_cov_ddof": [
                    "self",
                    "test_ddof"
                ]
            },
            "TestSeriesCorr": {
                "test_corr": [
                    "self",
                    "datetime_series"
                ],
                "test_corr_rank": [
                    "self"
                ],
                "test_corr_invalid_method": [
                    "self"
                ],
                "test_corr_callable_method": [
                    "self",
                    "datetime_series"
                ]
            }
        },
        "pandas.tests.series.methods.test_isin": {
            "TestSeriesIsIn": {
                "test_isin": [
                    "self"
                ],
                "test_isin_with_string_scalar": [
                    "self"
                ],
                "test_isin_with_i8": [
                    "self"
                ],
                "test_isin_empty": [
                    "self",
                    "empty"
                ]
            }
        },
        "pandas.tests.series.methods.test_count": {
            "TestSeriesCount": {
                "test_count": [
                    "self",
                    "datetime_series"
                ],
                "test_count_categorical": [
                    "self"
                ]
            }
        },
        "pandas.tests.series.methods.test_convert_dtypes": {
            "TestSeriesConvertDtypes": {
                "test_convert_dtypes": [
                    "self",
                    "data",
                    "maindtype",
                    "params",
                    "answerdict"
                ],
                "test_convert_string_dtype": [
                    "self"
                ],
                "test_convert_bool_dtype": [
                    "self"
                ]
            }
        },
        "pandas.tests.series.methods": {},
        "pandas.tests.series.methods.test_explode": {
            "test_basic": [],
            "test_mixed_type": [],
            "test_empty": [],
            "test_nested_lists": [],
            "test_multi_index": [],
            "test_large": [],
            "test_invert_array": [],
            "non_object_dtype": [
                "s"
            ],
            "test_typical_usecase": [],
            "test_nested_EA": [],
            "test_duplicate_index": [],
            "test_ignore_index": []
        },
        "pandas.tests.series.methods.test_first_and_last": {
            "TestFirst": {
                "test_first_subset": [
                    "self"
                ],
                "test_first_raises": [
                    "self"
                ],
                "test_last_subset": [
                    "self"
                ],
                "test_last_raises": [
                    "self"
                ]
            }
        },
        "pandas.tests.series.methods.test_rename": {
            "TestRename": {
                "test_rename": [
                    "self",
                    "datetime_series"
                ],
                "test_rename_by_series": [
                    "self"
                ],
                "test_rename_set_name": [
                    "self"
                ],
                "test_rename_set_name_inplace": [
                    "self"
                ],
                "test_rename_axis_supported": [
                    "self"
                ],
                "test_rename_inplace": [
                    "self",
                    "datetime_series"
                ],
                "test_rename_with_custom_indexer": [
                    "self"
                ],
                "test_rename_with_custom_indexer_inplace": [
                    "self"
                ],
                "test_rename_callable": [
                    "self"
                ]
            }
        },
        "pandas.tests.series.indexing.test_delitem": {
            "TestSeriesDelItem": {
                "test_delitem": [
                    "self"
                ],
                "test_delitem_object_index": [
                    "self"
                ],
                "test_delitem_missing_key": [
                    "self"
                ]
            }
        },
        "pandas.tests.series.indexing.test_loc": {
            "test_loc_uint64": [
                "val",
                "expected"
            ],
            "test_loc_getitem": [
                "string_series",
                "datetime_series"
            ],
            "test_loc_getitem_not_monotonic": [
                "datetime_series"
            ],
            "test_loc_getitem_setitem_integer_slice_keyerrors": [],
            "test_loc_getitem_iterator": [
                "string_series"
            ],
            "test_loc_setitem_boolean": [
                "string_series"
            ],
            "test_loc_setitem_corner": [
                "string_series"
            ],
            "test_basic_setitem_with_labels": [
                "datetime_series"
            ]
        },
        "pandas.tests.series.indexing.test_boolean": {
            "test_getitem_boolean": [
                "string_series"
            ],
            "test_getitem_boolean_empty": [],
            "test_getitem_boolean_object": [
                "string_series"
            ],
            "test_getitem_setitem_boolean_corner": [
                "datetime_series"
            ],
            "test_setitem_boolean": [
                "string_series"
            ],
            "test_get_set_boolean_different_order": [
                "string_series"
            ]
        },
        "pandas.tests.series.indexing.test_getitem": {
            "test_getitem_generator": [
                "string_series"
            ],
            "test_getitem_ndim_deprecated": [],
            "TestSeriesGetitemScalars": {
                "test_getitem_regression": [
                    "self"
                ],
                "test_getitem_pydatetime_tz": [
                    "self",
                    "tzstr"
                ],
                "test_string_index_alias_tz_aware": [
                    "self",
                    "tz"
                ]
            },
            "TestSeriesGetitemSlices": {
                "test_getitem_slice_2d": [
                    "self",
                    "datetime_series"
                ],
                "test_getitem_median_slice_bug": [
                    "self"
                ]
            },
            "TestSeriesGetitemListLike": {
                "test_getitem_no_matches": [
                    "self",
                    "box"
                ],
                "test_getitem_intlist_intindex_periodvalues": [
                    "self"
                ],
                "test_getitem_intlist_intervalindex_non_int": [
                    "self",
                    "box"
                ],
                "test_getitem_intlist_multiindex_numeric_level": [
                    "self",
                    "dtype",
                    "box"
                ]
            }
        },
        "pandas.tests.series.indexing.test_datetime": {
            "test_fancy_getitem": [],
            "test_fancy_setitem": [],
            "test_dti_reset_index_round_trip": [],
            "test_series_set_value": [],
            "test_slice_locs_indexerror": [],
            "test_slicing_datetimes": [],
            "test_getitem_setitem_datetime_tz_pytz": [],
            "test_getitem_setitem_datetime_tz_dateutil": [],
            "test_getitem_setitem_datetimeindex": [],
            "test_getitem_setitem_periodindex": [],
            "test_datetime_indexing": [],
            "dups": [],
            "test_constructor": [
                "dups"
            ],
            "test_is_unique_monotonic": [
                "dups"
            ],
            "test_index_unique": [
                "dups"
            ],
            "test_duplicate_dates_indexing": [
                "dups"
            ],
            "test_range_slice": [],
            "test_groupby_average_dup_values": [
                "dups"
            ],
            "test_indexing_over_size_cutoff": [],
            "test_indexing_over_size_cutoff_period_index": [
                "monkeypatch"
            ],
            "test_indexing_unordered": [],
            "test_indexing": [],
            "test_setitem_tuple_with_datetimetz": []
        },
        "pandas.tests.series.indexing.test_where": {
            "test_where_unsafe_int": [
                "sint_dtype"
            ],
            "test_where_unsafe_float": [
                "float_dtype"
            ],
            "test_where_unsafe_upcast": [
                "dtype",
                "expected_dtype"
            ],
            "test_where_unsafe": [],
            "test_where": [],
            "test_where_error": [],
            "test_where_array_like": [
                "klass"
            ],
            "test_where_invalid_input": [
                "cond"
            ],
            "test_where_ndframe_align": [],
            "test_where_setitem_invalid": [],
            "test_broadcast": [
                "size",
                "mask",
                "item",
                "box"
            ],
            "test_where_inplace": [],
            "test_where_dups": [],
            "test_where_numeric_with_string": [],
            "test_where_timedelta_coerce": [],
            "test_where_datetime_conversion": [],
            "test_where_dt_tz_values": [
                "tz_naive_fixture"
            ],
            "test_where_sparse": [],
            "test_where_empty_series_and_empty_cond_having_non_bool_dtypes": []
        },
        "pandas.tests.series.indexing.test_alter_index": {
            "test_reindex": [
                "datetime_series",
                "string_series"
            ],
            "test_reindex_nan": [],
            "test_reindex_series_add_nat": [],
            "test_reindex_with_datetimes": [],
            "test_reindex_corner": [
                "datetime_series"
            ],
            "test_reindex_pad": [],
            "test_reindex_nearest": [],
            "test_reindex_backfill": [],
            "test_reindex_int": [
                "datetime_series"
            ],
            "test_reindex_bool": [
                "datetime_series"
            ],
            "test_reindex_bool_pad": [
                "datetime_series"
            ],
            "test_reindex_categorical": [],
            "test_reindex_fill_value": [],
            "test_reindex_datetimeindexes_tz_naive_and_aware": [],
            "test_reindex_empty_series_tz_dtype": []
        },
        "pandas.tests.series.indexing.test_mask": {
            "test_mask": [],
            "test_mask_inplace": []
        },
        "pandas.tests.series.indexing.test_xs": {
            "test_xs_datetimelike_wrapping": []
        },
        "pandas.tests.series.indexing.test_setitem": {
            "TestSetitemDT64Values": {
                "test_setitem_none_nan": [
                    "self"
                ]
            }
        },
        "pandas.tests.series.indexing.test_callable": {
            "test_getitem_callable": [],
            "test_setitem_callable": [],
            "test_setitem_other_callable": []
        },
        "pandas.tests.series.indexing.test_indexing": {
            "test_basic_indexing": [],
            "test_basic_getitem_with_labels": [
                "datetime_series"
            ],
            "test_getitem_setitem_ellipsis": [],
            "test_getitem_get": [
                "datetime_series",
                "string_series",
                "object_series"
            ],
            "test_getitem_fancy": [
                "string_series",
                "object_series"
            ],
            "test_type_promotion": [],
            "test_getitem_with_duplicates_indices": [
                "result_1",
                "duplicate_item",
                "expected_1"
            ],
            "test_getitem_out_of_bounds": [
                "datetime_series"
            ],
            "test_getitem_setitem_integers": [],
            "test_getitem_box_float64": [
                "datetime_series"
            ],
            "test_series_box_timestamp": [],
            "test_series_box_timedelta": [],
            "test_getitem_ambiguous_keyerror": [],
            "test_getitem_unordered_dup": [],
            "test_getitem_dups_with_missing": [],
            "test_getitem_dups": [],
            "test_setitem_ambiguous_keyerror": [],
            "test_getitem_dataframe": [],
            "test_setitem": [
                "datetime_series",
                "string_series"
            ],
            "test_setitem_empty_series": [],
            "test_setitem_dtypes": [],
            "test_set_value": [
                "datetime_series",
                "string_series"
            ],
            "test_setslice": [
                "datetime_series"
            ],
            "test_2d_to_1d_assignment_raises": [],
            "test_basic_getitem_setitem_corner": [
                "datetime_series"
            ],
            "test_setitem_with_tz": [
                "tz"
            ],
            "test_setitem_with_tz_dst": [],
            "test_categorical_assigning_ops": [],
            "test_getitem_categorical_str": [],
            "test_slice": [
                "string_series",
                "object_series"
            ],
            "test_slice_can_reorder_not_uniquely_indexed": [],
            "test_loc_setitem": [
                "string_series"
            ],
            "test_setitem_na": [],
            "test_timedelta_assignment": [],
            "test_dt64_series_assign_nat": [
                "nat_val",
                "should_cast",
                "tz"
            ],
            "test_td64_series_assign_nat": [
                "nat_val",
                "should_cast"
            ],
            "test_append_timedelta_does_not_cast": [
                "td"
            ],
            "test_underlying_data_conversion": [],
            "test_preserve_refs": [
                "datetime_series"
            ],
            "test_cast_on_putmask": [],
            "test_type_promote_putmask": [],
            "test_multilevel_preserve_name": [],
            "test_setitem_scalar_into_readonly_backing_data": [],
            "test_setitem_slice_into_readonly_backing_data": [],
            "test_pop": [],
            "test_uint_drop": [
                "any_int_dtype"
            ],
            "test_getitem_unrecognized_scalar": [],
            "test_slice_with_zero_step_raises": [
                "index"
            ],
            "test_slice_with_negative_step": [
                "index"
            ]
        },
        "pandas.tests.series.indexing.test_take": {
            "test_take": [],
            "test_take_categorical": []
        },
        "pandas.tests.series.indexing.test_get": {
            "test_get": [],
            "test_get_nan": [],
            "test_get_nan_multiple": [],
            "test_get_with_default": [],
            "test_get2": [
                "arr"
            ]
        },
        "pandas.tests.series.indexing.test_multiindex": {
            "test_access_none_value_in_multiindex": []
        },
        "pandas.tests.series.indexing": {},
        "pandas.tests.series.indexing.test_iloc": {
            "test_iloc": [],
            "test_iloc_nonunique": []
        },
        "pandas.tests.series.indexing.test_numeric": {
            "test_slice_float64": [],
            "test_getitem_negative_out_of_bounds": [],
            "test_getitem_setitem_slice_bug": [],
            "test_getitem_setitem_slice_integers": [],
            "test_setitem_float_labels": [],
            "test_slice_float_get_set": [
                "datetime_series"
            ],
            "test_slice_floats2": [],
            "test_int_indexing": [],
            "test_getitem_int64": [
                "datetime_series"
            ]
        },
        "pandas.tests.extension.test_boolean": {
            "make_data": [],
            "dtype": [],
            "data": [
                "dtype"
            ],
            "data_for_twos": [
                "dtype"
            ],
            "data_missing": [
                "dtype"
            ],
            "data_for_sorting": [
                "dtype"
            ],
            "data_missing_for_sorting": [
                "dtype"
            ],
            "na_cmp": [],
            "na_value": [],
            "data_for_grouping": [
                "dtype"
            ],
            "TestDtype": {},
            "TestInterface": {},
            "TestConstructors": {},
            "TestGetitem": {},
            "TestSetitem": {},
            "TestMissing": {},
            "TestArithmeticOps": {
                "check_opname": [
                    "self",
                    "s",
                    "op_name",
                    "other",
                    "exc"
                ],
                "_check_op": [
                    "self",
                    "s",
                    "op",
                    "other",
                    "op_name",
                    "exc"
                ],
                "_check_divmod_op": [
                    "self",
                    "s",
                    "op",
                    "other",
                    "exc"
                ],
                "test_error": [
                    "self",
                    "data",
                    "all_arithmetic_operators"
                ],
                "test_arith_frame_with_scalar": [
                    "self",
                    "data",
                    "all_arithmetic_operators",
                    "request"
                ]
            },
            "TestComparisonOps": {
                "check_opname": [
                    "self",
                    "s",
                    "op_name",
                    "other",
                    "exc"
                ],
                "_compare_other": [
                    "self",
                    "s",
                    "data",
                    "op_name",
                    "other"
                ],
                "test_compare_scalar": [
                    "self",
                    "data",
                    "all_compare_operators"
                ],
                "test_compare_array": [
                    "self",
                    "data",
                    "all_compare_operators"
                ]
            },
            "TestReshaping": {},
            "TestMethods": {
                "test_factorize": [
                    "self",
                    "data_for_grouping",
                    "na_sentinel"
                ],
                "test_combine_le": [
                    "self",
                    "data_repeated"
                ],
                "test_searchsorted": [
                    "self",
                    "data_for_sorting",
                    "as_series"
                ],
                "test_value_counts": [
                    "self",
                    "all_data",
                    "dropna"
                ],
                "test_argmin_argmax": [
                    "self",
                    "data_for_sorting",
                    "data_missing_for_sorting"
                ]
            },
            "TestCasting": {},
            "TestGroupby": {
                "test_grouping_grouper": [
                    "self",
                    "data_for_grouping"
                ],
                "test_groupby_extension_agg": [
                    "self",
                    "as_index",
                    "data_for_grouping"
                ],
                "test_groupby_extension_no_sort": [
                    "self",
                    "data_for_grouping"
                ],
                "test_groupby_extension_transform": [
                    "self",
                    "data_for_grouping"
                ],
                "test_groupby_extension_apply": [
                    "self",
                    "data_for_grouping",
                    "groupby_apply_op"
                ],
                "test_groupby_apply_identity": [
                    "self",
                    "data_for_grouping"
                ],
                "test_in_numeric_groupby": [
                    "self",
                    "data_for_grouping"
                ],
                "test_groupby_sum_mincount": [
                    "self",
                    "data_for_grouping",
                    "min_count"
                ]
            },
            "TestNumericReduce": {
                "check_reduce": [
                    "self",
                    "s",
                    "op_name",
                    "skipna"
                ]
            },
            "TestBooleanReduce": {},
            "TestPrinting": {},
            "TestUnaryOps": {},
            "TestParsing": {}
        },
        "pandas.tests.extension.test_period": {
            "dtype": [],
            "data": [
                "dtype"
            ],
            "data_for_twos": [
                "dtype"
            ],
            "data_for_sorting": [
                "dtype"
            ],
            "data_missing": [
                "dtype"
            ],
            "data_missing_for_sorting": [
                "dtype"
            ],
            "data_for_grouping": [
                "dtype"
            ],
            "na_value": [],
            "BasePeriodTests": {},
            "TestPeriodDtype": {},
            "TestConstructors": {},
            "TestGetitem": {},
            "TestMethods": {
                "test_combine_add": [
                    "self",
                    "data_repeated"
                ]
            },
            "TestInterface": {},
            "TestArithmeticOps": {
                "test_arith_frame_with_scalar": [
                    "self",
                    "data",
                    "all_arithmetic_operators"
                ],
                "test_arith_series_with_scalar": [
                    "self",
                    "data",
                    "all_arithmetic_operators"
                ],
                "test_arith_series_with_array": [
                    "self",
                    "data",
                    "all_arithmetic_operators"
                ],
                "_check_divmod_op": [
                    "self",
                    "s",
                    "op",
                    "other",
                    "exc"
                ],
                "test_add_series_with_extension_array": [
                    "self",
                    "data"
                ],
                "test_error": [
                    "self"
                ],
                "test_direct_arith_with_series_returns_not_implemented": [
                    "self",
                    "data"
                ]
            },
            "TestCasting": {},
            "TestComparisonOps": {
                "_compare_other": [
                    "self",
                    "s",
                    "data",
                    "op_name",
                    "other"
                ]
            },
            "TestMissing": {},
            "TestReshaping": {},
            "TestSetitem": {},
            "TestGroupby": {},
            "TestPrinting": {},
            "TestParsing": {
                "test_EA_types": [
                    "self",
                    "engine",
                    "data"
                ]
            }
        },
        "pandas.tests.extension.test_external_block": {
            "df": [],
            "test_concat_axis1": [
                "df"
            ],
            "CustomBlock": {
                "concat_same_type": [
                    "self",
                    "to_concat",
                    "placement"
                ]
            }
        },
        "pandas.tests.extension.test_datetime": {
            "dtype": [
                "request"
            ],
            "data": [
                "dtype"
            ],
            "data_missing": [
                "dtype"
            ],
            "data_for_sorting": [
                "dtype"
            ],
            "data_missing_for_sorting": [
                "dtype"
            ],
            "data_for_grouping": [
                "dtype"
            ],
            "na_cmp": [],
            "na_value": [],
            "BaseDatetimeTests": {},
            "TestDatetimeDtype": {},
            "TestConstructors": {},
            "TestGetitem": {},
            "TestMethods": {
                "test_value_counts": [
                    "self",
                    "all_data",
                    "dropna"
                ],
                "test_combine_add": [
                    "self",
                    "data_repeated"
                ]
            },
            "TestInterface": {
                "test_array_interface": [
                    "self",
                    "data"
                ]
            },
            "TestArithmeticOps": {
                "test_arith_frame_with_scalar": [
                    "self",
                    "data",
                    "all_arithmetic_operators"
                ],
                "test_arith_series_with_scalar": [
                    "self",
                    "data",
                    "all_arithmetic_operators"
                ],
                "test_add_series_with_extension_array": [
                    "self",
                    "data"
                ],
                "test_arith_series_with_array": [
                    "self",
                    "data",
                    "all_arithmetic_operators"
                ],
                "test_error": [
                    "self",
                    "data",
                    "all_arithmetic_operators"
                ],
                "test_divmod_series_array": [
                    "self"
                ]
            },
            "TestCasting": {},
            "TestComparisonOps": {
                "_compare_other": [
                    "self",
                    "s",
                    "data",
                    "op_name",
                    "other"
                ]
            },
            "TestMissing": {},
            "TestReshaping": {
                "test_concat": [
                    "self",
                    "data",
                    "in_frame"
                ],
                "test_concat_mixed_dtypes": [
                    "self",
                    "data"
                ],
                "test_unstack": [
                    "self",
                    "obj"
                ]
            },
            "TestSetitem": {},
            "TestGroupby": {},
            "TestPrinting": {}
        },
        "pandas.tests.extension.test_integer": {
            "make_data": [],
            "dtype": [
                "request"
            ],
            "data": [
                "dtype"
            ],
            "data_for_twos": [
                "dtype"
            ],
            "data_missing": [
                "dtype"
            ],
            "data_for_sorting": [
                "dtype"
            ],
            "data_missing_for_sorting": [
                "dtype"
            ],
            "na_cmp": [],
            "na_value": [],
            "data_for_grouping": [
                "dtype"
            ],
            "TestDtype": {
                "test_is_dtype_unboxes_dtype": [
                    "self"
                ]
            },
            "TestArithmeticOps": {
                "check_opname": [
                    "self",
                    "s",
                    "op_name",
                    "other",
                    "exc"
                ],
                "_check_op": [
                    "self",
                    "s",
                    "op",
                    "other",
                    "op_name",
                    "exc"
                ],
                "_check_divmod_op": [
                    "self",
                    "s",
                    "op",
                    "other",
                    "exc"
                ],
                "test_error": [
                    "self",
                    "data",
                    "all_arithmetic_operators"
                ]
            },
            "TestComparisonOps": {
                "_check_op": [
                    "self",
                    "s",
                    "op",
                    "other",
                    "op_name",
                    "exc"
                ],
                "check_opname": [
                    "self",
                    "s",
                    "op_name",
                    "other",
                    "exc"
                ],
                "_compare_other": [
                    "self",
                    "s",
                    "data",
                    "op_name",
                    "other"
                ]
            },
            "TestInterface": {},
            "TestConstructors": {},
            "TestReshaping": {},
            "TestGetitem": {},
            "TestSetitem": {},
            "TestMissing": {},
            "TestMethods": {
                "test_value_counts": [
                    "self",
                    "all_data",
                    "dropna"
                ]
            },
            "TestCasting": {},
            "TestGroupby": {},
            "TestNumericReduce": {
                "check_reduce": [
                    "self",
                    "s",
                    "op_name",
                    "skipna"
                ]
            },
            "TestBooleanReduce": {},
            "TestPrinting": {},
            "TestParsing": {}
        },
        "pandas.tests.extension.test_categorical": {
            "make_data": [],
            "dtype": [],
            "data": [],
            "data_missing": [],
            "data_for_sorting": [],
            "data_missing_for_sorting": [],
            "na_value": [],
            "data_for_grouping": [],
            "TestDtype": {},
            "TestInterface": {
                "test_memory_usage": [
                    "self",
                    "data"
                ]
            },
            "TestConstructors": {},
            "TestReshaping": {
                "test_concat_with_reindex": [
                    "self",
                    "data"
                ]
            },
            "TestGetitem": {
                "test_getitem_scalar": [
                    "self",
                    "data"
                ]
            },
            "TestSetitem": {},
            "TestMissing": {
                "test_fillna_limit_pad": [
                    "self",
                    "data_missing"
                ],
                "test_fillna_limit_backfill": [
                    "self",
                    "data_missing"
                ]
            },
            "TestReduce": {},
            "TestMethods": {
                "test_value_counts": [
                    "self",
                    "all_data",
                    "dropna"
                ],
                "test_combine_add": [
                    "self",
                    "data_repeated"
                ],
                "test_fillna_length_mismatch": [
                    "self",
                    "data_missing"
                ],
                "test_searchsorted": [
                    "self",
                    "data_for_sorting"
                ]
            },
            "TestCasting": {
                "test_cast_nan_to_int": [
                    "self",
                    "cls",
                    "values"
                ],
                "test_cast_category_to_extension_dtype": [
                    "self",
                    "expected"
                ],
                "test_consistent_casting": [
                    "self",
                    "dtype",
                    "expected"
                ]
            },
            "TestArithmeticOps": {
                "test_arith_frame_with_scalar": [
                    "self",
                    "data",
                    "all_arithmetic_operators"
                ],
                "test_arith_series_with_scalar": [
                    "self",
                    "data",
                    "all_arithmetic_operators"
                ],
                "test_add_series_with_extension_array": [
                    "self",
                    "data"
                ],
                "test_divmod_series_array": [
                    "self"
                ],
                "_check_divmod_op": [
                    "self",
                    "s",
                    "op",
                    "other",
                    "exc"
                ]
            },
            "TestComparisonOps": {
                "_compare_other": [
                    "self",
                    "s",
                    "data",
                    "op_name",
                    "other"
                ],
                "test_not_equal_with_na": [
                    "self",
                    "categories"
                ]
            },
            "TestParsing": {}
        },
        "pandas.tests.extension.test_interval": {
            "make_data": [],
            "dtype": [],
            "data": [],
            "data_missing": [],
            "data_for_sorting": [],
            "data_missing_for_sorting": [],
            "na_value": [],
            "data_for_grouping": [],
            "BaseInterval": {},
            "TestDtype": {},
            "TestCasting": {},
            "TestConstructors": {},
            "TestGetitem": {},
            "TestGrouping": {},
            "TestInterface": {
                "test_view": [
                    "self",
                    "data"
                ]
            },
            "TestReduce": {},
            "TestMethods": {
                "test_combine_add": [
                    "self",
                    "data_repeated"
                ],
                "test_fillna_length_mismatch": [
                    "self",
                    "data_missing"
                ]
            },
            "TestMissing": {
                "test_fillna_limit_pad": [
                    "self"
                ],
                "test_fillna_series_method": [
                    "self"
                ],
                "test_fillna_limit_backfill": [
                    "self"
                ],
                "test_fillna_series": [
                    "self"
                ],
                "test_non_scalar_raises": [
                    "self",
                    "data_missing"
                ]
            },
            "TestReshaping": {},
            "TestSetitem": {
                "test_setitem_preserves_views": [
                    "self",
                    "data"
                ]
            },
            "TestPrinting": {
                "test_array_repr": [
                    "self",
                    "data",
                    "size"
                ]
            },
            "TestParsing": {
                "test_EA_types": [
                    "self",
                    "engine",
                    "data"
                ]
            }
        },
        "pandas.tests.extension.test_numpy": {
            "dtype": [
                "request"
            ],
            "allow_in_pandas": [
                "monkeypatch"
            ],
            "data": [
                "allow_in_pandas",
                "dtype"
            ],
            "data_missing": [
                "allow_in_pandas",
                "dtype"
            ],
            "na_value": [],
            "na_cmp": [],
            "data_for_sorting": [
                "allow_in_pandas",
                "dtype"
            ],
            "data_missing_for_sorting": [
                "allow_in_pandas",
                "dtype"
            ],
            "data_for_grouping": [
                "allow_in_pandas",
                "dtype"
            ],
            "skip_numpy_object": [
                "dtype"
            ],
            "BaseNumPyTests": {},
            "TestCasting": {
                "test_astype_str": [
                    "self",
                    "data"
                ],
                "test_astype_string": [
                    "self",
                    "data"
                ]
            },
            "TestConstructors": {
                "test_from_dtype": [
                    "self",
                    "data"
                ],
                "test_array_from_scalars": [
                    "self",
                    "data"
                ],
                "test_series_constructor_scalar_with_index": [
                    "self",
                    "data",
                    "dtype"
                ]
            },
            "TestDtype": {
                "test_check_dtype": [
                    "self",
                    "data"
                ]
            },
            "TestGetitem": {
                "test_getitem_scalar": [
                    "self",
                    "data"
                ],
                "test_take_series": [
                    "self",
                    "data"
                ],
                "test_loc_iloc_frame_single_dtype": [
                    "self",
                    "data",
                    "request"
                ]
            },
            "TestGroupby": {
                "test_groupby_extension_apply": [
                    "self",
                    "data_for_grouping",
                    "groupby_apply_op",
                    "request"
                ]
            },
            "TestInterface": {
                "test_array_interface": [
                    "self",
                    "data"
                ]
            },
            "TestMethods": {
                "test_value_counts": [
                    "self",
                    "all_data",
                    "dropna"
                ],
                "test_value_counts_with_normalize": [
                    "self",
                    "data"
                ],
                "test_combine_le": [
                    "self",
                    "data_repeated"
                ],
                "test_combine_add": [
                    "self",
                    "data_repeated"
                ],
                "test_shift_fill_value": [
                    "self",
                    "data"
                ],
                "test_unique": [
                    "self",
                    "data",
                    "box",
                    "method"
                ],
                "test_fillna_copy_frame": [
                    "self",
                    "data_missing"
                ],
                "test_fillna_copy_series": [
                    "self",
                    "data_missing"
                ],
                "test_hash_pandas_object_works": [
                    "self",
                    "data",
                    "as_frame"
                ],
                "test_searchsorted": [
                    "self",
                    "data_for_sorting",
                    "as_series"
                ],
                "test_where_series": [
                    "self",
                    "data",
                    "na_value",
                    "as_frame"
                ],
                "test_repeat": [
                    "self",
                    "data",
                    "repeats",
                    "as_series",
                    "use_numpy"
                ],
                "test_diff": [
                    "self",
                    "data",
                    "periods"
                ],
                "test_equals": [
                    "self",
                    "data",
                    "na_value",
                    "as_series",
                    "box"
                ]
            },
            "TestArithmetics": {
                "test_divmod_series_array": [
                    "self",
                    "data"
                ],
                "test_error": [
                    "self",
                    "data",
                    "all_arithmetic_operators"
                ],
                "test_arith_series_with_scalar": [
                    "self",
                    "data",
                    "all_arithmetic_operators"
                ],
                "test_arith_series_with_array": [
                    "self",
                    "data",
                    "all_arithmetic_operators"
                ]
            },
            "TestPrinting": {
                "test_series_repr": [
                    "self",
                    "data"
                ]
            },
            "TestNumericReduce": {
                "check_reduce": [
                    "self",
                    "s",
                    "op_name",
                    "skipna"
                ]
            },
            "TestBooleanReduce": {},
            "TestMissing": {
                "test_fillna_scalar": [
                    "self",
                    "data_missing"
                ],
                "test_fillna_series_method": [
                    "self",
                    "data_missing",
                    "fillna_method"
                ],
                "test_fillna_series": [
                    "self",
                    "data_missing"
                ],
                "test_fillna_frame": [
                    "self",
                    "data_missing"
                ]
            },
            "TestReshaping": {
                "test_concat_mixed_dtypes": [
                    "self",
                    "data"
                ],
                "test_concat": [
                    "self",
                    "data",
                    "in_frame"
                ],
                "test_concat_all_na_block": [
                    "self",
                    "data_missing",
                    "in_frame"
                ],
                "test_merge": [
                    "self",
                    "data",
                    "na_value"
                ],
                "test_merge_on_extension_array": [
                    "self",
                    "data"
                ],
                "test_merge_on_extension_array_duplicates": [
                    "self",
                    "data"
                ],
                "test_transpose": [
                    "self",
                    "data"
                ]
            },
            "TestSetitem": {
                "test_setitem_scalar_series": [
                    "self",
                    "data",
                    "box_in_series"
                ],
                "test_setitem_sequence": [
                    "self",
                    "data",
                    "box_in_series"
                ],
                "test_setitem_sequence_mismatched_length_raises": [
                    "self",
                    "data",
                    "as_array"
                ],
                "test_setitem_sequence_broadcasts": [
                    "self",
                    "data",
                    "box_in_series"
                ],
                "test_setitem_loc_scalar_mixed": [
                    "self",
                    "data"
                ],
                "test_setitem_loc_scalar_multiple_homogoneous": [
                    "self",
                    "data"
                ],
                "test_setitem_iloc_scalar_mixed": [
                    "self",
                    "data"
                ],
                "test_setitem_iloc_scalar_multiple_homogoneous": [
                    "self",
                    "data"
                ],
                "test_setitem_mask_broadcast": [
                    "self",
                    "data",
                    "setter"
                ],
                "test_setitem_scalar_key_sequence_raise": [
                    "self",
                    "data"
                ],
                "test_setitem_mask": [
                    "self",
                    "data",
                    "mask",
                    "box_in_series"
                ],
                "test_setitem_mask_raises": [
                    "self",
                    "data",
                    "box_in_series"
                ],
                "test_setitem_integer_array": [
                    "self",
                    "data",
                    "idx",
                    "box_in_series"
                ],
                "test_setitem_integer_with_missing_raises": [
                    "self",
                    "data",
                    "idx",
                    "box_in_series"
                ],
                "test_setitem_slice": [
                    "self",
                    "data",
                    "box_in_series"
                ],
                "test_setitem_loc_iloc_slice": [
                    "self",
                    "data"
                ]
            },
            "TestParsing": {}
        },
        "pandas.tests.extension.test_string": {
            "dtype": [],
            "data": [],
            "data_missing": [],
            "data_for_sorting": [],
            "data_missing_for_sorting": [],
            "na_value": [],
            "data_for_grouping": [],
            "TestDtype": {},
            "TestInterface": {},
            "TestConstructors": {},
            "TestReshaping": {},
            "TestGetitem": {},
            "TestSetitem": {},
            "TestMissing": {},
            "TestNoReduce": {
                "test_reduce_series_numeric": [
                    "self",
                    "data",
                    "all_numeric_reductions",
                    "skipna"
                ]
            },
            "TestMethods": {
                "test_value_counts": [
                    "self",
                    "all_data",
                    "dropna"
                ]
            },
            "TestCasting": {},
            "TestComparisonOps": {
                "_compare_other": [
                    "self",
                    "s",
                    "data",
                    "op_name",
                    "other"
                ],
                "test_compare_scalar": [
                    "self",
                    "data",
                    "all_compare_operators"
                ]
            },
            "TestParsing": {},
            "TestPrinting": {},
            "TestGroupBy": {}
        },
        "pandas.tests.extension.test_common": {
            "test_astype": [],
            "test_astype_no_copy": [],
            "test_is_extension_array_dtype": [
                "dtype"
            ],
            "DummyDtype": {},
            "DummyArray": {
                "__init__": [
                    "self",
                    "data"
                ],
                "__array__": [
                    "self",
                    "dtype"
                ],
                "dtype": [
                    "self"
                ],
                "astype": [
                    "self",
                    "dtype",
                    "copy"
                ]
            },
            "TestExtensionArrayDtype": {
                "test_is_extension_array_dtype": [
                    "self",
                    "values"
                ],
                "test_is_not_extension_array_dtype": [
                    "self",
                    "values"
                ]
            }
        },
        "pandas.tests.extension.conftest": {
            "dtype": [],
            "data": [],
            "data_for_twos": [],
            "data_missing": [],
            "all_data": [
                "request",
                "data",
                "data_missing"
            ],
            "data_repeated": [
                "data"
            ],
            "data_for_sorting": [],
            "data_missing_for_sorting": [],
            "na_cmp": [],
            "na_value": [],
            "data_for_grouping": [],
            "box_in_series": [
                "request"
            ],
            "groupby_apply_op": [
                "request"
            ],
            "as_frame": [
                "request"
            ],
            "as_series": [
                "request"
            ],
            "use_numpy": [
                "request"
            ],
            "fillna_method": [
                "request"
            ],
            "as_array": [
                "request"
            ]
        },
        "pandas.tests.extension.test_sparse": {
            "make_data": [
                "fill_value"
            ],
            "dtype": [],
            "data": [
                "request"
            ],
            "data_for_twos": [
                "request"
            ],
            "data_missing": [
                "request"
            ],
            "data_repeated": [
                "request"
            ],
            "data_for_sorting": [
                "request"
            ],
            "data_missing_for_sorting": [
                "request"
            ],
            "na_value": [],
            "na_cmp": [],
            "data_for_grouping": [
                "request"
            ],
            "BaseSparseTests": {
                "_check_unsupported": [
                    "self",
                    "data"
                ],
                "test_ravel": [
                    "self",
                    "data"
                ]
            },
            "TestDtype": {
                "test_array_type_with_arg": [
                    "self",
                    "data",
                    "dtype"
                ]
            },
            "TestInterface": {
                "test_no_values_attribute": [
                    "self",
                    "data"
                ],
                "test_copy": [
                    "self",
                    "data"
                ],
                "test_view": [
                    "self",
                    "data"
                ]
            },
            "TestConstructors": {},
            "TestReshaping": {
                "test_concat_mixed_dtypes": [
                    "self",
                    "data"
                ],
                "test_concat_columns": [
                    "self",
                    "data",
                    "na_value"
                ],
                "test_concat_extension_arrays_copy_false": [
                    "self",
                    "data",
                    "na_value"
                ],
                "test_align": [
                    "self",
                    "data",
                    "na_value"
                ],
                "test_align_frame": [
                    "self",
                    "data",
                    "na_value"
                ],
                "test_align_series_frame": [
                    "self",
                    "data",
                    "na_value"
                ],
                "test_merge": [
                    "self",
                    "data",
                    "na_value"
                ]
            },
            "TestGetitem": {
                "test_get": [
                    "self",
                    "data"
                ],
                "test_reindex": [
                    "self",
                    "data",
                    "na_value"
                ]
            },
            "TestMissing": {
                "test_isna": [
                    "self",
                    "data_missing"
                ],
                "test_fillna_limit_pad": [
                    "self",
                    "data_missing"
                ],
                "test_fillna_limit_backfill": [
                    "self",
                    "data_missing"
                ],
                "test_fillna_series_method": [
                    "self",
                    "data_missing"
                ],
                "test_fillna_series": [
                    "self"
                ],
                "test_fillna_frame": [
                    "self",
                    "data_missing"
                ]
            },
            "TestMethods": {
                "test_combine_le": [
                    "self",
                    "data_repeated"
                ],
                "test_fillna_copy_frame": [
                    "self",
                    "data_missing"
                ],
                "test_fillna_copy_series": [
                    "self",
                    "data_missing"
                ],
                "test_fillna_length_mismatch": [
                    "self",
                    "data_missing"
                ],
                "test_where_series": [
                    "self",
                    "data",
                    "na_value"
                ],
                "test_combine_first": [
                    "self",
                    "data"
                ],
                "test_searchsorted": [
                    "self",
                    "data_for_sorting",
                    "as_series"
                ],
                "test_shift_0_periods": [
                    "self",
                    "data"
                ],
                "test_argmin_argmax_all_na": [
                    "self",
                    "method",
                    "data",
                    "na_value"
                ],
                "test_equals": [
                    "self",
                    "data",
                    "na_value",
                    "as_series",
                    "box"
                ]
            },
            "TestCasting": {
                "test_astype_object_series": [
                    "self",
                    "all_data"
                ],
                "test_astype_object_frame": [
                    "self",
                    "all_data"
                ],
                "test_astype_str": [
                    "self",
                    "data"
                ],
                "test_astype_string": [
                    "self",
                    "data"
                ]
            },
            "TestArithmeticOps": {
                "_skip_if_different_combine": [
                    "self",
                    "data"
                ],
                "test_error": [
                    "self",
                    "data",
                    "all_arithmetic_operators"
                ],
                "test_arith_series_with_scalar": [
                    "self",
                    "data",
                    "all_arithmetic_operators"
                ],
                "test_arith_series_with_array": [
                    "self",
                    "data",
                    "all_arithmetic_operators"
                ]
            },
            "TestComparisonOps": {
                "_compare_other": [
                    "self",
                    "s",
                    "data",
                    "op_name",
                    "other"
                ]
            },
            "TestPrinting": {
                "test_array_repr": [
                    "self",
                    "data",
                    "size"
                ]
            },
            "TestParsing": {
                "test_EA_types": [
                    "self",
                    "engine",
                    "data"
                ]
            }
        },
        "pandas.tests.extension": {},
        "pandas.tests.extension.list.test_list": {
            "dtype": [],
            "data": [],
            "test_to_csv": [
                "data"
            ]
        },
        "pandas.tests.extension.list": {},
        "pandas.tests.extension.list.array": {
            "make_data": [],
            "ListDtype": {
                "construct_array_type": [
                    "cls"
                ]
            },
            "ListArray": {
                "__init__": [
                    "self",
                    "values",
                    "dtype",
                    "copy"
                ],
                "_from_sequence": [
                    "cls",
                    "scalars",
                    "dtype",
                    "copy"
                ],
                "__getitem__": [
                    "self",
                    "item"
                ],
                "__len__": [
                    "self"
                ],
                "isna": [
                    "self"
                ],
                "take": [
                    "self",
                    "indexer",
                    "allow_fill",
                    "fill_value"
                ],
                "copy": [
                    "self"
                ],
                "astype": [
                    "self",
                    "dtype",
                    "copy"
                ],
                "_concat_same_type": [
                    "cls",
                    "to_concat"
                ]
            }
        },
        "pandas.tests.extension.decimal.test_decimal": {
            "dtype": [],
            "data": [],
            "data_for_twos": [],
            "data_missing": [],
            "data_for_sorting": [],
            "data_missing_for_sorting": [],
            "na_cmp": [],
            "na_value": [],
            "data_for_grouping": [],
            "test_series_constructor_coerce_data_to_extension_dtype_raises": [],
            "test_series_constructor_with_dtype": [],
            "test_dataframe_constructor_with_dtype": [],
            "test_astype_dispatches": [
                "frame"
            ],
            "test_combine_from_sequence_raises": [],
            "test_scalar_ops_from_sequence_raises": [
                "class_"
            ],
            "test_divmod_array": [
                "reverse",
                "expected_div",
                "expected_mod"
            ],
            "test_ufunc_fallback": [
                "data"
            ],
            "test_array_ufunc": [],
            "test_array_ufunc_series": [],
            "test_array_ufunc_series_scalar_other": [],
            "test_array_ufunc_series_defer": [],
            "test_groupby_agg": [],
            "test_groupby_agg_ea_method": [
                "monkeypatch"
            ],
            "test_indexing_no_materialize": [
                "monkeypatch"
            ],
            "test_to_numpy_keyword": [],
            "BaseDecimal": {
                "assert_series_equal": [
                    "cls",
                    "left",
                    "right"
                ],
                "assert_frame_equal": [
                    "cls",
                    "left",
                    "right"
                ]
            },
            "TestDtype": {
                "test_hashable": [
                    "self",
                    "dtype"
                ]
            },
            "TestInterface": {},
            "TestConstructors": {
                "test_from_dtype": [
                    "self",
                    "data"
                ]
            },
            "TestReshaping": {},
            "TestGetitem": {
                "test_take_na_value_other_decimal": [
                    "self"
                ]
            },
            "TestMissing": {},
            "Reduce": {
                "check_reduce": [
                    "self",
                    "s",
                    "op_name",
                    "skipna"
                ]
            },
            "TestNumericReduce": {},
            "TestBooleanReduce": {},
            "TestMethods": {
                "test_value_counts": [
                    "self",
                    "all_data",
                    "dropna"
                ],
                "test_value_counts_with_normalize": [
                    "self",
                    "data"
                ]
            },
            "TestCasting": {},
            "TestGroupby": {
                "test_groupby_apply_identity": [
                    "self",
                    "data_for_grouping"
                ]
            },
            "TestSetitem": {},
            "TestPrinting": {
                "test_series_repr": [
                    "self",
                    "data"
                ]
            },
            "TestArithmeticOps": {
                "check_opname": [
                    "self",
                    "s",
                    "op_name",
                    "other",
                    "exc"
                ],
                "test_arith_series_with_array": [
                    "self",
                    "data",
                    "all_arithmetic_operators"
                ],
                "_check_divmod_op": [
                    "self",
                    "s",
                    "op",
                    "other",
                    "exc"
                ],
                "test_error": [
                    "self"
                ]
            },
            "TestComparisonOps": {
                "check_opname": [
                    "self",
                    "s",
                    "op_name",
                    "other",
                    "exc"
                ],
                "_compare_other": [
                    "self",
                    "s",
                    "data",
                    "op_name",
                    "other"
                ],
                "test_compare_scalar": [
                    "self",
                    "data",
                    "all_compare_operators"
                ],
                "test_compare_array": [
                    "self",
                    "data",
                    "all_compare_operators"
                ]
            },
            "DecimalArrayWithoutFromSequence": {
                "_from_sequence": [
                    "cls",
                    "scalars",
                    "dtype",
                    "copy"
                ]
            },
            "DecimalArrayWithoutCoercion": {
                "_create_arithmetic_method": [
                    "cls",
                    "op"
                ]
            }
        },
        "pandas.tests.extension.decimal": {},
        "pandas.tests.extension.decimal.array": {
            "to_decimal": [
                "values",
                "context"
            ],
            "make_data": [],
            "DecimalDtype": {
                "__init__": [
                    "self",
                    "context"
                ],
                "__repr__": [
                    "self"
                ],
                "construct_array_type": [
                    "cls"
                ],
                "_is_numeric": [
                    "self"
                ]
            },
            "DecimalArray": {
                "__init__": [
                    "self",
                    "values",
                    "dtype",
                    "copy",
                    "context"
                ],
                "dtype": [
                    "self"
                ],
                "_from_sequence": [
                    "cls",
                    "scalars",
                    "dtype",
                    "copy"
                ],
                "_from_sequence_of_strings": [
                    "cls",
                    "strings",
                    "dtype",
                    "copy"
                ],
                "_from_factorized": [
                    "cls",
                    "values",
                    "original"
                ],
                "to_numpy": [
                    "self",
                    "dtype",
                    "copy",
                    "na_value",
                    "decimals"
                ],
                "__array_ufunc__": [
                    "self",
                    "ufunc",
                    "method"
                ],
                "__getitem__": [
                    "self",
                    "item"
                ],
                "take": [
                    "self",
                    "indexer",
                    "allow_fill",
                    "fill_value"
                ],
                "copy": [
                    "self"
                ],
                "astype": [
                    "self",
                    "dtype",
                    "copy"
                ],
                "__setitem__": [
                    "self",
                    "key",
                    "value"
                ],
                "__len__": [
                    "self"
                ],
                "nbytes": [
                    "self"
                ],
                "isna": [
                    "self"
                ],
                "_na_value": [
                    "self"
                ],
                "_formatter": [
                    "self",
                    "boxed"
                ],
                "_concat_same_type": [
                    "cls",
                    "to_concat"
                ],
                "_reduce": [
                    "self",
                    "name",
                    "skipna"
                ]
            }
        },
        "pandas.tests.extension.base.casting": {
            "BaseCastingTests": {
                "test_astype_object_series": [
                    "self",
                    "all_data"
                ],
                "test_astype_object_frame": [
                    "self",
                    "all_data"
                ],
                "test_tolist": [
                    "self",
                    "data"
                ],
                "test_astype_str": [
                    "self",
                    "data"
                ],
                "test_astype_string": [
                    "self",
                    "data"
                ],
                "test_to_numpy": [
                    "self",
                    "data"
                ],
                "test_astype_empty_dataframe": [
                    "self",
                    "dtype"
                ]
            }
        },
        "pandas.tests.extension.base.getitem": {
            "BaseGetitemTests": {
                "test_iloc_series": [
                    "self",
                    "data"
                ],
                "test_iloc_frame": [
                    "self",
                    "data"
                ],
                "test_iloc_frame_single_block": [
                    "self",
                    "data"
                ],
                "test_loc_series": [
                    "self",
                    "data"
                ],
                "test_loc_frame": [
                    "self",
                    "data"
                ],
                "test_loc_iloc_frame_single_dtype": [
                    "self",
                    "data"
                ],
                "test_getitem_scalar": [
                    "self",
                    "data"
                ],
                "test_getitem_scalar_na": [
                    "self",
                    "data_missing",
                    "na_cmp",
                    "na_value"
                ],
                "test_getitem_empty": [
                    "self",
                    "data"
                ],
                "test_getitem_mask": [
                    "self",
                    "data"
                ],
                "test_getitem_mask_raises": [
                    "self",
                    "data"
                ],
                "test_getitem_boolean_array_mask": [
                    "self",
                    "data"
                ],
                "test_getitem_boolean_na_treated_as_false": [
                    "self",
                    "data"
                ],
                "test_getitem_integer_array": [
                    "self",
                    "data",
                    "idx"
                ],
                "test_getitem_integer_with_missing_raises": [
                    "self",
                    "data",
                    "idx"
                ],
                "test_getitem_slice": [
                    "self",
                    "data"
                ],
                "test_get": [
                    "self",
                    "data"
                ],
                "test_take_sequence": [
                    "self",
                    "data"
                ],
                "test_take": [
                    "self",
                    "data",
                    "na_value",
                    "na_cmp"
                ],
                "test_take_empty": [
                    "self",
                    "data",
                    "na_value",
                    "na_cmp"
                ],
                "test_take_negative": [
                    "self",
                    "data"
                ],
                "test_take_non_na_fill_value": [
                    "self",
                    "data_missing"
                ],
                "test_take_pandas_style_negative_raises": [
                    "self",
                    "data",
                    "na_value"
                ],
                "test_take_out_of_bounds_raises": [
                    "self",
                    "data",
                    "allow_fill"
                ],
                "test_take_series": [
                    "self",
                    "data"
                ],
                "test_reindex": [
                    "self",
                    "data",
                    "na_value"
                ],
                "test_reindex_non_na_fill_value": [
                    "self",
                    "data_missing"
                ],
                "test_loc_len1": [
                    "self",
                    "data"
                ],
                "test_item": [
                    "self",
                    "data"
                ]
            }
        },
        "pandas.tests.extension.base.setitem": {
            "BaseSetitemTests": {
                "test_setitem_scalar_series": [
                    "self",
                    "data",
                    "box_in_series"
                ],
                "test_setitem_sequence": [
                    "self",
                    "data",
                    "box_in_series"
                ],
                "test_setitem_sequence_mismatched_length_raises": [
                    "self",
                    "data",
                    "as_array"
                ],
                "test_setitem_empty_indxer": [
                    "self",
                    "data",
                    "box_in_series"
                ],
                "test_setitem_sequence_broadcasts": [
                    "self",
                    "data",
                    "box_in_series"
                ],
                "test_setitem_scalar": [
                    "self",
                    "data",
                    "setter"
                ],
                "test_setitem_loc_scalar_mixed": [
                    "self",
                    "data"
                ],
                "test_setitem_loc_scalar_single": [
                    "self",
                    "data"
                ],
                "test_setitem_loc_scalar_multiple_homogoneous": [
                    "self",
                    "data"
                ],
                "test_setitem_iloc_scalar_mixed": [
                    "self",
                    "data"
                ],
                "test_setitem_iloc_scalar_single": [
                    "self",
                    "data"
                ],
                "test_setitem_iloc_scalar_multiple_homogoneous": [
                    "self",
                    "data"
                ],
                "test_setitem_mask": [
                    "self",
                    "data",
                    "mask",
                    "box_in_series"
                ],
                "test_setitem_mask_raises": [
                    "self",
                    "data",
                    "box_in_series"
                ],
                "test_setitem_mask_boolean_array_with_na": [
                    "self",
                    "data",
                    "box_in_series"
                ],
                "test_setitem_integer_array": [
                    "self",
                    "data",
                    "idx",
                    "box_in_series"
                ],
                "test_setitem_integer_with_missing_raises": [
                    "self",
                    "data",
                    "idx",
                    "box_in_series"
                ],
                "test_setitem_mask_aligned": [
                    "self",
                    "data",
                    "as_callable",
                    "setter"
                ],
                "test_setitem_mask_broadcast": [
                    "self",
                    "data",
                    "setter"
                ],
                "test_setitem_expand_columns": [
                    "self",
                    "data"
                ],
                "test_setitem_expand_with_extension": [
                    "self",
                    "data"
                ],
                "test_setitem_frame_invalid_length": [
                    "self",
                    "data"
                ],
                "test_setitem_tuple_index": [
                    "self",
                    "data"
                ],
                "test_setitem_slice": [
                    "self",
                    "data",
                    "box_in_series"
                ],
                "test_setitem_loc_iloc_slice": [
                    "self",
                    "data"
                ],
                "test_setitem_slice_mismatch_length_raises": [
                    "self",
                    "data"
                ],
                "test_setitem_slice_array": [
                    "self",
                    "data"
                ],
                "test_setitem_scalar_key_sequence_raise": [
                    "self",
                    "data"
                ],
                "test_setitem_preserves_views": [
                    "self",
                    "data"
                ],
                "test_setitem_dataframe_column_with_index": [
                    "self",
                    "data"
                ],
                "test_setitem_dataframe_column_without_index": [
                    "self",
                    "data"
                ],
                "test_setitem_series_with_index": [
                    "self",
                    "data"
                ],
                "test_setitem_series_without_index": [
                    "self",
                    "data"
                ]
            }
        },
        "pandas.tests.extension.base.interface": {
            "BaseInterfaceTests": {
                "test_len": [
                    "self",
                    "data"
                ],
                "test_size": [
                    "self",
                    "data"
                ],
                "test_ndim": [
                    "self",
                    "data"
                ],
                "test_can_hold_na_valid": [
                    "self",
                    "data"
                ],
                "test_memory_usage": [
                    "self",
                    "data"
                ],
                "test_array_interface": [
                    "self",
                    "data"
                ],
                "test_is_extension_array_dtype": [
                    "self",
                    "data"
                ],
                "test_no_values_attribute": [
                    "self",
                    "data"
                ],
                "test_is_numeric_honored": [
                    "self",
                    "data"
                ],
                "test_isna_extension_array": [
                    "self",
                    "data_missing"
                ],
                "test_copy": [
                    "self",
                    "data"
                ],
                "test_view": [
                    "self",
                    "data"
                ]
            }
        },
        "pandas.tests.extension.base.printing": {
            "BasePrintingTests": {
                "test_array_repr": [
                    "self",
                    "data",
                    "size"
                ],
                "test_array_repr_unicode": [
                    "self",
                    "data"
                ],
                "test_series_repr": [
                    "self",
                    "data"
                ],
                "test_dataframe_repr": [
                    "self",
                    "data"
                ],
                "test_dtype_name_in_info": [
                    "self",
                    "data"
                ]
            }
        },
        "pandas.tests.extension.base.io": {
            "BaseParsingTests": {
                "test_EA_types": [
                    "self",
                    "engine",
                    "data"
                ]
            }
        },
        "pandas.tests.extension.base.reduce": {
            "BaseReduceTests": {
                "check_reduce": [
                    "self",
                    "s",
                    "op_name",
                    "skipna"
                ]
            },
            "BaseNoReduceTests": {
                "test_reduce_series_numeric": [
                    "self",
                    "data",
                    "all_numeric_reductions",
                    "skipna"
                ],
                "test_reduce_series_boolean": [
                    "self",
                    "data",
                    "all_boolean_reductions",
                    "skipna"
                ]
            },
            "BaseNumericReduceTests": {
                "test_reduce_series": [
                    "self",
                    "data",
                    "all_numeric_reductions",
                    "skipna"
                ]
            },
            "BaseBooleanReduceTests": {
                "test_reduce_series": [
                    "self",
                    "data",
                    "all_boolean_reductions",
                    "skipna"
                ]
            }
        },
        "pandas.tests.extension.base.ops": {
            "BaseOpsUtil": {
                "get_op_from_name": [
                    "self",
                    "op_name"
                ],
                "check_opname": [
                    "self",
                    "s",
                    "op_name",
                    "other",
                    "exc"
                ],
                "_check_op": [
                    "self",
                    "s",
                    "op",
                    "other",
                    "op_name",
                    "exc"
                ],
                "_check_divmod_op": [
                    "self",
                    "s",
                    "op",
                    "other",
                    "exc"
                ]
            },
            "BaseArithmeticOpsTests": {
                "test_arith_series_with_scalar": [
                    "self",
                    "data",
                    "all_arithmetic_operators"
                ],
                "test_arith_frame_with_scalar": [
                    "self",
                    "data",
                    "all_arithmetic_operators"
                ],
                "test_arith_series_with_array": [
                    "self",
                    "data",
                    "all_arithmetic_operators"
                ],
                "test_divmod": [
                    "self",
                    "data"
                ],
                "test_divmod_series_array": [
                    "self",
                    "data",
                    "data_for_twos"
                ],
                "test_add_series_with_extension_array": [
                    "self",
                    "data"
                ],
                "test_error": [
                    "self",
                    "data",
                    "all_arithmetic_operators"
                ],
                "test_direct_arith_with_series_returns_not_implemented": [
                    "self",
                    "data"
                ]
            },
            "BaseComparisonOpsTests": {
                "_compare_other": [
                    "self",
                    "s",
                    "data",
                    "op_name",
                    "other"
                ],
                "test_compare_scalar": [
                    "self",
                    "data",
                    "all_compare_operators"
                ],
                "test_compare_array": [
                    "self",
                    "data",
                    "all_compare_operators"
                ],
                "test_direct_arith_with_series_returns_not_implemented": [
                    "self",
                    "data"
                ]
            },
            "BaseUnaryOpsTests": {
                "test_invert": [
                    "self",
                    "data"
                ]
            }
        },
        "pandas.tests.extension.base.constructors": {
            "BaseConstructorsTests": {
                "test_from_sequence_from_cls": [
                    "self",
                    "data"
                ],
                "test_array_from_scalars": [
                    "self",
                    "data"
                ],
                "test_series_constructor": [
                    "self",
                    "data"
                ],
                "test_series_constructor_no_data_with_index": [
                    "self",
                    "dtype",
                    "na_value"
                ],
                "test_series_constructor_scalar_na_with_index": [
                    "self",
                    "dtype",
                    "na_value"
                ],
                "test_series_constructor_scalar_with_index": [
                    "self",
                    "data",
                    "dtype"
                ],
                "test_dataframe_constructor_from_dict": [
                    "self",
                    "data",
                    "from_series"
                ],
                "test_dataframe_from_series": [
                    "self",
                    "data"
                ],
                "test_series_given_mismatched_index_raises": [
                    "self",
                    "data"
                ],
                "test_from_dtype": [
                    "self",
                    "data"
                ],
                "test_pandas_array": [
                    "self",
                    "data"
                ],
                "test_pandas_array_dtype": [
                    "self",
                    "data"
                ],
                "test_construct_empty_dataframe": [
                    "self",
                    "dtype"
                ]
            }
        },
        "pandas.tests.extension.base.reshaping": {
            "BaseReshapingTests": {
                "test_concat": [
                    "self",
                    "data",
                    "in_frame"
                ],
                "test_concat_all_na_block": [
                    "self",
                    "data_missing",
                    "in_frame"
                ],
                "test_concat_mixed_dtypes": [
                    "self",
                    "data"
                ],
                "test_concat_columns": [
                    "self",
                    "data",
                    "na_value"
                ],
                "test_concat_extension_arrays_copy_false": [
                    "self",
                    "data",
                    "na_value"
                ],
                "test_concat_with_reindex": [
                    "self",
                    "data"
                ],
                "test_align": [
                    "self",
                    "data",
                    "na_value"
                ],
                "test_align_frame": [
                    "self",
                    "data",
                    "na_value"
                ],
                "test_align_series_frame": [
                    "self",
                    "data",
                    "na_value"
                ],
                "test_set_frame_expand_regular_with_extension": [
                    "self",
                    "data"
                ],
                "test_set_frame_expand_extension_with_regular": [
                    "self",
                    "data"
                ],
                "test_set_frame_overwrite_object": [
                    "self",
                    "data"
                ],
                "test_merge": [
                    "self",
                    "data",
                    "na_value"
                ],
                "test_merge_on_extension_array": [
                    "self",
                    "data"
                ],
                "test_merge_on_extension_array_duplicates": [
                    "self",
                    "data"
                ],
                "test_stack": [
                    "self",
                    "data",
                    "columns"
                ],
                "test_unstack": [
                    "self",
                    "data",
                    "index",
                    "obj"
                ],
                "test_ravel": [
                    "self",
                    "data"
                ],
                "test_transpose": [
                    "self",
                    "data"
                ]
            }
        },
        "pandas.tests.extension.base.groupby": {
            "BaseGroupbyTests": {
                "test_grouping_grouper": [
                    "self",
                    "data_for_grouping"
                ],
                "test_groupby_extension_agg": [
                    "self",
                    "as_index",
                    "data_for_grouping"
                ],
                "test_groupby_extension_no_sort": [
                    "self",
                    "data_for_grouping"
                ],
                "test_groupby_extension_transform": [
                    "self",
                    "data_for_grouping"
                ],
                "test_groupby_extension_apply": [
                    "self",
                    "data_for_grouping",
                    "groupby_apply_op"
                ],
                "test_groupby_apply_identity": [
                    "self",
                    "data_for_grouping"
                ],
                "test_in_numeric_groupby": [
                    "self",
                    "data_for_grouping"
                ]
            }
        },
        "pandas.tests.extension.base.base": {
            "BaseExtensionTests": {
                "assert_equal": [
                    "cls",
                    "left",
                    "right"
                ],
                "assert_series_equal": [
                    "cls",
                    "left",
                    "right"
                ],
                "assert_frame_equal": [
                    "cls",
                    "left",
                    "right"
                ],
                "assert_extension_array_equal": [
                    "cls",
                    "left",
                    "right"
                ]
            }
        },
        "pandas.tests.extension.base.methods": {
            "BaseMethodsTests": {
                "test_value_counts": [
                    "self",
                    "all_data",
                    "dropna"
                ],
                "test_value_counts_with_normalize": [
                    "self",
                    "data"
                ],
                "test_count": [
                    "self",
                    "data_missing"
                ],
                "test_series_count": [
                    "self",
                    "data_missing"
                ],
                "test_apply_simple_series": [
                    "self",
                    "data"
                ],
                "test_argsort": [
                    "self",
                    "data_for_sorting"
                ],
                "test_argsort_missing_array": [
                    "self",
                    "data_missing_for_sorting"
                ],
                "test_argsort_missing": [
                    "self",
                    "data_missing_for_sorting"
                ],
                "test_argmin_argmax": [
                    "self",
                    "data_for_sorting",
                    "data_missing_for_sorting",
                    "na_value"
                ],
                "test_argmin_argmax_empty_array": [
                    "self",
                    "method",
                    "data"
                ],
                "test_argmin_argmax_all_na": [
                    "self",
                    "method",
                    "data",
                    "na_value"
                ],
                "test_nargsort": [
                    "self",
                    "data_missing_for_sorting",
                    "na_position",
                    "expected"
                ],
                "test_sort_values": [
                    "self",
                    "data_for_sorting",
                    "ascending",
                    "sort_by_key"
                ],
                "test_sort_values_missing": [
                    "self",
                    "data_missing_for_sorting",
                    "ascending",
                    "sort_by_key"
                ],
                "test_sort_values_frame": [
                    "self",
                    "data_for_sorting",
                    "ascending"
                ],
                "test_unique": [
                    "self",
                    "data",
                    "box",
                    "method"
                ],
                "test_factorize": [
                    "self",
                    "data_for_grouping",
                    "na_sentinel"
                ],
                "test_factorize_equivalence": [
                    "self",
                    "data_for_grouping",
                    "na_sentinel"
                ],
                "test_factorize_empty": [
                    "self",
                    "data"
                ],
                "test_fillna_copy_frame": [
                    "self",
                    "data_missing"
                ],
                "test_fillna_copy_series": [
                    "self",
                    "data_missing"
                ],
                "test_fillna_length_mismatch": [
                    "self",
                    "data_missing"
                ],
                "test_combine_le": [
                    "self",
                    "data_repeated"
                ],
                "test_combine_add": [
                    "self",
                    "data_repeated"
                ],
                "test_combine_first": [
                    "self",
                    "data"
                ],
                "test_container_shift": [
                    "self",
                    "data",
                    "frame",
                    "periods",
                    "indices"
                ],
                "test_shift_0_periods": [
                    "self",
                    "data"
                ],
                "test_diff": [
                    "self",
                    "data",
                    "periods"
                ],
                "test_shift_non_empty_array": [
                    "self",
                    "data",
                    "periods",
                    "indices"
                ],
                "test_shift_empty_array": [
                    "self",
                    "data",
                    "periods"
                ],
                "test_shift_zero_copies": [
                    "self",
                    "data"
                ],
                "test_shift_fill_value": [
                    "self",
                    "data"
                ],
                "test_not_hashable": [
                    "self",
                    "data"
                ],
                "test_hash_pandas_object_works": [
                    "self",
                    "data",
                    "as_frame"
                ],
                "test_searchsorted": [
                    "self",
                    "data_for_sorting",
                    "as_series"
                ],
                "test_where_series": [
                    "self",
                    "data",
                    "na_value",
                    "as_frame"
                ],
                "test_repeat": [
                    "self",
                    "data",
                    "repeats",
                    "as_series",
                    "use_numpy"
                ],
                "test_repeat_raises": [
                    "self",
                    "data",
                    "repeats",
                    "kwargs",
                    "error",
                    "msg",
                    "use_numpy"
                ],
                "test_equals": [
                    "self",
                    "data",
                    "na_value",
                    "as_series",
                    "box"
                ]
            }
        },
        "pandas.tests.extension.base.dtype": {
            "BaseDtypeTests": {
                "test_name": [
                    "self",
                    "dtype"
                ],
                "test_kind": [
                    "self",
                    "dtype"
                ],
                "test_construct_from_string_own_name": [
                    "self",
                    "dtype"
                ],
                "test_is_dtype_from_name": [
                    "self",
                    "dtype"
                ],
                "test_is_dtype_unboxes_dtype": [
                    "self",
                    "data",
                    "dtype"
                ],
                "test_is_dtype_from_self": [
                    "self",
                    "dtype"
                ],
                "test_is_dtype_other_input": [
                    "self",
                    "dtype"
                ],
                "test_is_not_string_type": [
                    "self",
                    "dtype"
                ],
                "test_is_not_object_type": [
                    "self",
                    "dtype"
                ],
                "test_eq_with_str": [
                    "self",
                    "dtype"
                ],
                "test_eq_with_numpy_object": [
                    "self",
                    "dtype"
                ],
                "test_eq_with_self": [
                    "self",
                    "dtype"
                ],
                "test_array_type": [
                    "self",
                    "data",
                    "dtype"
                ],
                "test_check_dtype": [
                    "self",
                    "data"
                ],
                "test_hashable": [
                    "self",
                    "dtype"
                ],
                "test_str": [
                    "self",
                    "dtype"
                ],
                "test_eq": [
                    "self",
                    "dtype"
                ],
                "test_construct_from_string": [
                    "self",
                    "dtype"
                ],
                "test_construct_from_string_another_type_raises": [
                    "self",
                    "dtype"
                ],
                "test_construct_from_string_wrong_type_raises": [
                    "self",
                    "dtype"
                ],
                "test_get_common_dtype": [
                    "self",
                    "dtype"
                ]
            }
        },
        "pandas.tests.extension.base.missing": {
            "BaseMissingTests": {
                "test_isna": [
                    "self",
                    "data_missing"
                ],
                "test_dropna_array": [
                    "self",
                    "data_missing"
                ],
                "test_dropna_series": [
                    "self",
                    "data_missing"
                ],
                "test_dropna_frame": [
                    "self",
                    "data_missing"
                ],
                "test_fillna_scalar": [
                    "self",
                    "data_missing"
                ],
                "test_fillna_limit_pad": [
                    "self",
                    "data_missing"
                ],
                "test_fillna_limit_backfill": [
                    "self",
                    "data_missing"
                ],
                "test_fillna_series": [
                    "self",
                    "data_missing"
                ],
                "test_fillna_series_method": [
                    "self",
                    "data_missing",
                    "fillna_method"
                ],
                "test_fillna_frame": [
                    "self",
                    "data_missing"
                ],
                "test_fillna_fill_other": [
                    "self",
                    "data"
                ],
                "test_use_inf_as_na_no_effect": [
                    "self",
                    "data_missing"
                ]
            }
        },
        "pandas.tests.extension.base": {},
        "pandas.tests.extension.json.test_json": {
            "dtype": [],
            "data": [],
            "data_missing": [],
            "data_for_sorting": [],
            "data_missing_for_sorting": [],
            "na_value": [
                "dtype"
            ],
            "na_cmp": [],
            "data_for_grouping": [],
            "BaseJSON": {
                "assert_series_equal": [
                    "cls",
                    "left",
                    "right"
                ],
                "assert_frame_equal": [
                    "cls",
                    "left",
                    "right"
                ]
            },
            "TestDtype": {},
            "TestInterface": {
                "test_custom_asserts": [
                    "self"
                ]
            },
            "TestConstructors": {
                "test_from_dtype": [
                    "self",
                    "data"
                ],
                "test_series_constructor_no_data_with_index": [
                    "self",
                    "dtype",
                    "na_value"
                ],
                "test_series_constructor_scalar_na_with_index": [
                    "self",
                    "dtype",
                    "na_value"
                ],
                "test_series_constructor_scalar_with_index": [
                    "self",
                    "data",
                    "dtype"
                ]
            },
            "TestReshaping": {
                "test_stack": [
                    "self"
                ],
                "test_unstack": [
                    "self",
                    "data",
                    "index"
                ]
            },
            "TestGetitem": {},
            "TestMissing": {
                "test_fillna_series": [
                    "self"
                ],
                "test_fillna_frame": [
                    "self"
                ]
            },
            "TestReduce": {},
            "TestMethods": {
                "test_value_counts": [
                    "self",
                    "all_data",
                    "dropna"
                ],
                "test_value_counts_with_normalize": [
                    "self",
                    "data"
                ],
                "test_sort_values_frame": [
                    "self"
                ],
                "test_argsort": [
                    "self",
                    "data_for_sorting"
                ],
                "test_argsort_missing": [
                    "self",
                    "data_missing_for_sorting"
                ],
                "test_sort_values": [
                    "self",
                    "data_for_sorting",
                    "ascending",
                    "sort_by_key"
                ],
                "test_sort_values_missing": [
                    "self",
                    "data_missing_for_sorting",
                    "ascending",
                    "sort_by_key"
                ],
                "test_combine_le": [
                    "self",
                    "data_repeated"
                ],
                "test_combine_add": [
                    "self",
                    "data_repeated"
                ],
                "test_combine_first": [
                    "self",
                    "data"
                ],
                "test_hash_pandas_object_works": [
                    "self",
                    "data",
                    "kind"
                ],
                "test_where_series": [
                    "self",
                    "data",
                    "na_value"
                ],
                "test_searchsorted": [
                    "self",
                    "data_for_sorting"
                ],
                "test_equals": [
                    "self",
                    "data",
                    "na_value",
                    "as_series"
                ]
            },
            "TestCasting": {
                "test_astype_str": [
                    "self"
                ]
            },
            "TestGroupby": {
                "test_groupby_extension_transform": [
                    "self"
                ],
                "test_groupby_extension_apply": [
                    "self"
                ],
                "test_groupby_extension_agg": [
                    "self",
                    "as_index",
                    "data_for_grouping"
                ]
            },
            "TestArithmeticOps": {
                "test_error": [
                    "self",
                    "data",
                    "all_arithmetic_operators"
                ],
                "test_add_series_with_extension_array": [
                    "self",
                    "data"
                ],
                "test_divmod_series_array": [
                    "self"
                ],
                "_check_divmod_op": [
                    "self",
                    "s",
                    "op",
                    "other",
                    "exc"
                ]
            },
            "TestComparisonOps": {},
            "TestPrinting": {}
        },
        "pandas.tests.extension.json": {},
        "pandas.tests.extension.json.array": {
            "make_data": [],
            "JSONDtype": {
                "construct_array_type": [
                    "cls"
                ]
            },
            "JSONArray": {
                "__init__": [
                    "self",
                    "values",
                    "dtype",
                    "copy"
                ],
                "_from_sequence": [
                    "cls",
                    "scalars",
                    "dtype",
                    "copy"
                ],
                "_from_factorized": [
                    "cls",
                    "values",
                    "original"
                ],
                "__getitem__": [
                    "self",
                    "item"
                ],
                "__setitem__": [
                    "self",
                    "key",
                    "value"
                ],
                "__len__": [
                    "self"
                ],
                "__eq__": [
                    "self",
                    "other"
                ],
                "__ne__": [
                    "self",
                    "other"
                ],
                "__array__": [
                    "self",
                    "dtype"
                ],
                "nbytes": [
                    "self"
                ],
                "isna": [
                    "self"
                ],
                "take": [
                    "self",
                    "indexer",
                    "allow_fill",
                    "fill_value"
                ],
                "copy": [
                    "self"
                ],
                "astype": [
                    "self",
                    "dtype",
                    "copy"
                ],
                "unique": [
                    "self"
                ],
                "_concat_same_type": [
                    "cls",
                    "to_concat"
                ],
                "_values_for_factorize": [
                    "self"
                ],
                "_values_for_argsort": [
                    "self"
                ]
            }
        },
        "pandas.tests.extension.arrow.arrays": {
            "ArrowBoolDtype": {
                "construct_array_type": [
                    "cls"
                ],
                "_is_boolean": [
                    "self"
                ]
            },
            "ArrowStringDtype": {
                "construct_array_type": [
                    "cls"
                ]
            },
            "ArrowExtensionArray": {
                "from_scalars": [
                    "cls",
                    "values"
                ],
                "from_array": [
                    "cls",
                    "arr"
                ],
                "_from_sequence": [
                    "cls",
                    "scalars",
                    "dtype",
                    "copy"
                ],
                "__repr__": [
                    "self"
                ],
                "__getitem__": [
                    "self",
                    "item"
                ],
                "__len__": [
                    "self"
                ],
                "astype": [
                    "self",
                    "dtype",
                    "copy"
                ],
                "dtype": [
                    "self"
                ],
                "_boolean_op": [
                    "self",
                    "other",
                    "op"
                ],
                "__eq__": [
                    "self",
                    "other"
                ],
                "__and__": [
                    "self",
                    "other"
                ],
                "__or__": [
                    "self",
                    "other"
                ],
                "nbytes": [
                    "self"
                ],
                "isna": [
                    "self"
                ],
                "take": [
                    "self",
                    "indices",
                    "allow_fill",
                    "fill_value"
                ],
                "copy": [
                    "self"
                ],
                "_concat_same_type": [
                    "cls",
                    "to_concat"
                ],
                "__invert__": [
                    "self"
                ],
                "_reduce": [
                    "self",
                    "name",
                    "skipna"
                ],
                "any": [
                    "self",
                    "axis",
                    "out"
                ],
                "all": [
                    "self",
                    "axis",
                    "out"
                ]
            },
            "ArrowBoolArray": {
                "__init__": [
                    "self",
                    "values"
                ]
            },
            "ArrowStringArray": {
                "__init__": [
                    "self",
                    "values"
                ]
            }
        },
        "pandas.tests.extension.arrow.test_string": {
            "test_constructor_from_list": []
        },
        "pandas.tests.extension.arrow.test_bool": {
            "dtype": [],
            "data": [],
            "data_missing": [],
            "test_basic_equals": [
                "data"
            ],
            "test_is_bool_dtype": [
                "data"
            ],
            "BaseArrowTests": {},
            "TestDtype": {
                "test_array_type_with_arg": [
                    "self",
                    "data",
                    "dtype"
                ]
            },
            "TestInterface": {
                "test_copy": [
                    "self",
                    "data"
                ],
                "test_view": [
                    "self",
                    "data"
                ]
            },
            "TestConstructors": {
                "test_from_dtype": [
                    "self",
                    "data"
                ],
                "test_from_sequence_from_cls": [
                    "self",
                    "data"
                ],
                "test_series_constructor_no_data_with_index": [
                    "self",
                    "dtype",
                    "na_value"
                ],
                "test_series_constructor_scalar_na_with_index": [
                    "self",
                    "dtype",
                    "na_value"
                ],
                "test_construct_empty_dataframe": [
                    "self",
                    "dtype"
                ]
            },
            "TestReduce": {
                "test_reduce_series_boolean": [
                    "self"
                ]
            },
            "TestReduceBoolean": {}
        },
        "pandas.tests.extension.arrow": {},
        "pandas.tests.internals.test_internals": {
            "mgr": [],
            "assert_block_equal": [
                "left",
                "right"
            ],
            "get_numeric_mat": [
                "shape"
            ],
            "create_block": [
                "typestr",
                "placement",
                "item_shape",
                "num_offset"
            ],
            "create_single_mgr": [
                "typestr",
                "num_rows"
            ],
            "create_mgr": [
                "descr",
                "item_shape"
            ],
            "test_holder": [
                "typestr",
                "holder"
            ],
            "test_validate_ndim": [],
            "test_block_shape": [],
            "test_make_block_no_pandas_array": [],
            "test_dataframe_not_equal": [],
            "test_missing_unicode_key": [],
            "test_set_change_dtype_slice": [],
            "test_interleave_non_unique_cols": [],
            "test_single_block_manager_fastpath_deprecated": [],
            "TestBlock": {
                "setup_method": [
                    "self",
                    "method"
                ],
                "test_constructor": [
                    "self"
                ],
                "test_pickle": [
                    "self"
                ],
                "test_mgr_locs": [
                    "self"
                ],
                "test_attrs": [
                    "self"
                ],
                "test_copy": [
                    "self"
                ],
                "test_delete": [
                    "self"
                ]
            },
            "TestBlockManager": {
                "test_attrs": [
                    "self"
                ],
                "test_is_mixed_dtype": [
                    "self"
                ],
                "test_duplicate_ref_loc_failure": [
                    "self"
                ],
                "test_pickle": [
                    "self",
                    "mgr"
                ],
                "test_non_unique_pickle": [
                    "self",
                    "mgr_string"
                ],
                "test_categorical_block_pickle": [
                    "self"
                ],
                "test_iget": [
                    "self"
                ],
                "test_set": [
                    "self"
                ],
                "test_set_change_dtype": [
                    "self",
                    "mgr"
                ],
                "test_copy": [
                    "self",
                    "mgr"
                ],
                "test_sparse": [
                    "self"
                ],
                "test_sparse_mixed": [
                    "self"
                ],
                "test_as_array_float": [
                    "self",
                    "mgr_string",
                    "dtype"
                ],
                "test_as_array_int_bool": [
                    "self",
                    "mgr_string",
                    "dtype"
                ],
                "test_as_array_datetime": [
                    "self"
                ],
                "test_as_array_datetime_tz": [
                    "self"
                ],
                "test_astype": [
                    "self",
                    "t"
                ],
                "test_convert": [
                    "self"
                ],
                "test_invalid_ea_block": [
                    "self"
                ],
                "test_interleave": [
                    "self"
                ],
                "test_interleave_dtype": [
                    "self",
                    "mgr_string",
                    "dtype"
                ],
                "test_consolidate_ordering_issues": [
                    "self",
                    "mgr"
                ],
                "test_reindex_items": [
                    "self"
                ],
                "test_get_numeric_data": [
                    "self"
                ],
                "test_get_bool_data": [
                    "self"
                ],
                "test_unicode_repr_doesnt_raise": [
                    "self"
                ],
                "test_equals": [
                    "self",
                    "mgr_string"
                ],
                "test_equals_block_order_different_dtypes": [
                    "self",
                    "mgr_string"
                ],
                "test_single_mgr_ctor": [
                    "self"
                ],
                "test_validate_bool_args": [
                    "self",
                    "value"
                ]
            },
            "TestIndexing": {
                "test_get_slice": [
                    "self",
                    "mgr"
                ],
                "test_take": [
                    "self",
                    "mgr"
                ],
                "test_reindex_axis": [
                    "self",
                    "fill_value",
                    "mgr"
                ],
                "test_reindex_indexer": [
                    "self",
                    "fill_value",
                    "mgr"
                ]
            },
            "TestBlockPlacement": {
                "test_slice_len": [
                    "self",
                    "slc",
                    "expected"
                ],
                "test_zero_step_raises": [
                    "self",
                    "slc"
                ],
                "test_unbounded_slice_raises": [
                    "self",
                    "slc"
                ],
                "test_not_slice_like_slices": [
                    "self",
                    "slc"
                ],
                "test_array_to_slice_conversion": [
                    "self",
                    "arr",
                    "slc"
                ],
                "test_not_slice_like_arrays": [
                    "self",
                    "arr"
                ],
                "test_slice_iter": [
                    "self",
                    "slc",
                    "expected"
                ],
                "test_slice_to_array_conversion": [
                    "self",
                    "slc",
                    "arr"
                ],
                "test_blockplacement_add": [
                    "self"
                ],
                "test_blockplacement_add_int": [
                    "self",
                    "val",
                    "inc",
                    "expected"
                ],
                "test_blockplacement_add_int_raises": [
                    "self",
                    "val"
                ]
            },
            "DummyElement": {
                "__init__": [
                    "self",
                    "value",
                    "dtype"
                ],
                "__array__": [
                    "self"
                ],
                "__str__": [
                    "self"
                ],
                "__repr__": [
                    "self"
                ],
                "astype": [
                    "self",
                    "dtype",
                    "copy"
                ],
                "view": [
                    "self",
                    "dtype"
                ],
                "any": [
                    "self",
                    "axis"
                ]
            },
            "TestCanHoldElement": {
                "test_datetime_block_can_hold_element": [
                    "self"
                ],
                "test_binop_other": [
                    "self",
                    "op",
                    "value",
                    "dtype"
                ]
            },
            "TestShouldStore": {
                "test_should_store_categorical": [
                    "self"
                ]
            }
        },
        "pandas.tests.internals": {},
        "pandas.tests.api.test_api": {
            "test_datetime": [],
            "test_sparsearray": [],
            "test_np": [],
            "Base": {
                "check": [
                    "self",
                    "namespace",
                    "expected",
                    "ignored"
                ]
            },
            "TestPDApi": {
                "test_api": [
                    "self"
                ],
                "test_depr": [
                    "self"
                ]
            },
            "TestApi": {
                "test_api": [
                    "self"
                ]
            },
            "TestTesting": {
                "test_testing": [
                    "self"
                ],
                "test_util_testing_deprecated": [
                    "self"
                ],
                "test_util_testing_deprecated_direct": [
                    "self"
                ],
                "test_util_in_top_level": [
                    "self"
                ]
            }
        },
        "pandas.tests.api.test_types": {
            "TestTypes": {
                "test_types": [
                    "self"
                ],
                "test_deprecated_from_api_types": [
                    "self"
                ]
            }
        },
        "pandas.tests.api": {},
        "pandas.tests.groupby.test_pipe": {
            "test_pipe": [],
            "test_pipe_args": []
        },
        "pandas.tests.groupby.test_value_counts": {
            "seed_df": [
                "seed_nans",
                "n",
                "m"
            ],
            "test_series_groupby_value_counts": [
                "df",
                "keys",
                "bins",
                "n",
                "m",
                "isort",
                "normalize",
                "sort",
                "ascending",
                "dropna"
            ],
            "test_series_groupby_value_counts_with_grouper": []
        },
        "pandas.tests.groupby.test_rank": {
            "test_rank_apply": [],
            "test_rank_args": [
                "grps",
                "vals",
                "ties_method",
                "ascending",
                "pct",
                "exp"
            ],
            "test_infs_n_nans": [
                "grps",
                "vals",
                "ties_method",
                "ascending",
                "na_option",
                "exp"
            ],
            "test_rank_args_missing": [
                "grps",
                "vals",
                "ties_method",
                "ascending",
                "na_option",
                "pct",
                "exp"
            ],
            "test_rank_resets_each_group": [
                "pct",
                "exp"
            ],
            "test_rank_avg_even_vals": [],
            "test_rank_object_raises": [
                "ties_method",
                "ascending",
                "na_option",
                "pct",
                "vals"
            ],
            "test_rank_naoption_raises": [
                "ties_method",
                "ascending",
                "na_option",
                "pct",
                "vals"
            ],
            "test_rank_empty_group": [],
            "test_rank_zero_div": [
                "input_key",
                "input_value",
                "output_value"
            ]
        },
        "pandas.tests.groupby.test_apply_mutate": {
            "test_mutate_groups": [],
            "test_no_mutate_but_looks_like": [],
            "test_apply_function_with_indexing": []
        },
        "pandas.tests.groupby.test_groupby": {
            "test_repr": [],
            "test_basic": [
                "dtype"
            ],
            "test_groupby_nonobject_dtype": [
                "mframe",
                "df_mixed_floats"
            ],
            "test_groupby_return_type": [],
            "test_inconsistent_return_type": [],
            "test_pass_args_kwargs": [
                "ts",
                "tsframe"
            ],
            "test_len": [],
            "test_basic_regression": [],
            "test_with_na_groups": [
                "dtype"
            ],
            "test_indices_concatenation_order": [],
            "test_attr_wrapper": [
                "ts"
            ],
            "test_frame_groupby": [
                "tsframe"
            ],
            "test_frame_groupby_columns": [
                "tsframe"
            ],
            "test_frame_set_name_single": [
                "df"
            ],
            "test_multi_func": [
                "df"
            ],
            "test_multi_key_multiple_functions": [
                "df"
            ],
            "test_frame_multi_key_function_list": [],
            "test_groupby_multiple_columns": [
                "df",
                "op"
            ],
            "test_as_index_select_column": [],
            "test_groupby_as_index_select_column_sum_empty_df": [],
            "test_groupby_as_index_agg": [
                "df"
            ],
            "test_ops_not_as_index": [
                "reduction_func"
            ],
            "test_as_index_series_return_frame": [
                "df"
            ],
            "test_as_index_series_column_slice_raises": [
                "df"
            ],
            "test_groupby_as_index_cython": [
                "df"
            ],
            "test_groupby_as_index_series_scalar": [
                "df"
            ],
            "test_groupby_as_index_corner": [
                "df",
                "ts"
            ],
            "test_groupby_multiple_key": [
                "df"
            ],
            "test_groupby_multi_corner": [
                "df"
            ],
            "test_omit_nuisance": [
                "df"
            ],
            "test_omit_nuisance_python_multiple": [
                "three_group"
            ],
            "test_empty_groups_corner": [
                "mframe"
            ],
            "test_nonsense_func": [],
            "test_wrap_aggregated_output_multindex": [
                "mframe"
            ],
            "test_groupby_level_apply": [
                "mframe"
            ],
            "test_groupby_level_mapper": [
                "mframe"
            ],
            "test_groupby_level_nonmulti": [],
            "test_groupby_complex": [],
            "test_groupby_series_indexed_differently": [],
            "test_groupby_with_hier_columns": [],
            "test_grouping_ndarray": [
                "df"
            ],
            "test_groupby_wrong_multi_labels": [],
            "test_groupby_series_with_name": [
                "df"
            ],
            "test_seriesgroupby_name_attr": [
                "df"
            ],
            "test_consistency_name": [],
            "test_groupby_name_propagation": [
                "df"
            ],
            "test_groupby_nonstring_columns": [],
            "test_groupby_mixed_type_columns": [],
            "test_cython_grouper_series_bug_noncontig": [],
            "test_series_grouper_noncontig_index": [],
            "test_convert_objects_leave_decimal_alone": [],
            "test_groupby_dtype_inference_empty": [],
            "test_groupby_list_infer_array_like": [
                "df"
            ],
            "test_groupby_keys_same_size_as_index": [],
            "test_groupby_one_row": [],
            "test_groupby_nat_exclude": [],
            "test_groupby_2d_malformed": [],
            "test_int32_overflow": [],
            "test_groupby_sort_multi": [],
            "test_dont_clobber_name_column": [],
            "test_skip_group_keys": [],
            "test_no_nonsense_name": [
                "float_frame"
            ],
            "test_multifunc_sum_bug": [],
            "test_handle_dict_return_value": [
                "df"
            ],
            "test_set_group_name": [
                "df",
                "grouper"
            ],
            "test_group_name_available_in_inference_pass": [],
            "test_no_dummy_key_names": [
                "df"
            ],
            "test_groupby_sort_multiindex_series": [],
            "test_groupby_reindex_inside_function": [],
            "test_groupby_multiindex_missing_pair": [],
            "test_groupby_multiindex_not_lexsorted": [],
            "test_index_label_overlaps_location": [],
            "test_transform_doesnt_clobber_ints": [],
            "test_groupby_preserves_sort": [
                "sort_column",
                "group_column"
            ],
            "test_group_shift_with_null_key": [],
            "test_group_shift_with_fill_value": [],
            "test_group_shift_lose_timezone": [],
            "test_pivot_table_values_key_error": [],
            "test_empty_dataframe_groupby": [],
            "test_tuple_as_grouping": [],
            "test_tuple_correct_keyerror": [],
            "test_groupby_agg_ohlc_non_first": [],
            "test_groupby_multiindex_nat": [],
            "test_groupby_empty_list_raises": [],
            "test_groupby_multiindex_series_keys_len_equal_group_axis": [],
            "test_groupby_groups_in_BaseGrouper": [],
            "test_groupby_axis_1": [
                "group_name"
            ],
            "test_shift_bfill_ffill_tz": [
                "tz_naive_fixture",
                "op",
                "expected"
            ],
            "test_ffill_missing_arguments": [],
            "test_groupby_only_none_group": [],
            "test_groupby_duplicate_index": [],
            "test_bool_aggs_dup_column_labels": [
                "bool_agg_func"
            ],
            "test_dup_labels_output_shape": [
                "groupby_func",
                "idx"
            ],
            "test_groupby_crash_on_nunique": [
                "axis"
            ],
            "test_groupby_list_level": [],
            "test_groups_repr_truncates": [
                "max_seq_items",
                "expected"
            ]
        },
        "pandas.tests.groupby.test_sample": {
            "test_groupby_sample_balanced_groups_shape": [
                "n",
                "frac"
            ],
            "test_groupby_sample_unbalanced_groups_shape": [],
            "test_groupby_sample_index_value_spans_groups": [],
            "test_groupby_sample_n_and_frac_raises": [],
            "test_groupby_sample_frac_gt_one_without_replacement_raises": [],
            "test_groupby_sample_invalid_n_raises": [
                "n"
            ],
            "test_groupby_sample_oversample": [],
            "test_groupby_sample_without_n_or_frac": [],
            "test_groupby_sample_with_weights": []
        },
        "pandas.tests.groupby.test_size": {
            "test_size": [
                "df",
                "by"
            ],
            "test_size_sort": [
                "df",
                "sort",
                "by"
            ],
            "test_size_series_dataframe": [],
            "test_size_groupby_all_null": [],
            "test_size_period_index": [],
            "test_size_on_categorical": [
                "as_index"
            ]
        },
        "pandas.tests.groupby.test_function": {
            "numpy_dtypes_for_minmax": [
                "request"
            ],
            "test_groupby_bool_aggs": [
                "agg_func",
                "skipna",
                "vals"
            ],
            "test_max_min_non_numeric": [],
            "test_min_date_with_nans": [],
            "test_intercept_builtin_sum": [],
            "test_builtins_apply": [
                "keys",
                "f"
            ],
            "test_arg_passthru": [],
            "test_non_cython_api": [],
            "test_cython_api2": [],
            "test_cython_median": [],
            "test_median_empty_bins": [
                "observed"
            ],
            "test_groupby_non_arithmetic_agg_types": [
                "dtype",
                "method",
                "data"
            ],
            "test_groupby_non_arithmetic_agg_int_like_precision": [
                "i"
            ],
            "test_idxmin_idxmax_returns_int_types": [
                "func",
                "values"
            ],
            "test_fill_consistency": [],
            "test_groupby_cumprod": [],
            "scipy_sem": [],
            "test_ops_general": [
                "op",
                "targop"
            ],
            "test_max_nan_bug": [],
            "test_nlargest": [],
            "test_nlargest_mi_grouper": [],
            "test_nsmallest": [],
            "test_numpy_compat": [
                "func"
            ],
            "test_cummin": [
                "numpy_dtypes_for_minmax"
            ],
            "test_cummin_all_nan_column": [],
            "test_cummax": [
                "numpy_dtypes_for_minmax"
            ],
            "test_cummax_all_nan_column": [],
            "test_is_monotonic_increasing": [
                "in_vals",
                "out_vals"
            ],
            "test_is_monotonic_decreasing": [
                "in_vals",
                "out_vals"
            ],
            "test_apply_describe_bug": [
                "mframe"
            ],
            "test_series_describe_multikey": [],
            "test_series_describe_single": [],
            "test_series_index_name": [
                "df"
            ],
            "test_frame_describe_multikey": [
                "tsframe"
            ],
            "test_frame_describe_tupleindex": [],
            "test_frame_describe_unstacked_format": [],
            "test_groupby_mean_no_overflow": [],
            "test_apply_to_nullable_integer_returns_float": [
                "values",
                "function"
            ],
            "test_groupby_sum_below_mincount_nullable_integer": []
        },
        "pandas.tests.groupby.test_quantile": {
            "test_quantile": [
                "interpolation",
                "a_vals",
                "b_vals",
                "q"
            ],
            "test_quantile_array": [],
            "test_quantile_array2": [],
            "test_quantile_array_no_sort": [],
            "test_quantile_array_multiple_levels": [],
            "test_groupby_quantile_with_arraylike_q_and_int_columns": [
                "frame_size",
                "groupby",
                "q"
            ],
            "test_quantile_raises": [],
            "test_quantile_out_of_bounds_q_raises": [],
            "test_quantile_missing_group_values_no_segfaults": [],
            "test_quantile_missing_group_values_correct_results": [
                "key",
                "val",
                "expected_key",
                "expected_val"
            ],
            "test_groupby_quantile_nullable_array": [
                "values",
                "q"
            ],
            "test_groupby_quantile_skips_invalid_dtype": [
                "q"
            ]
        },
        "pandas.tests.groupby.test_apply": {
            "test_apply_issues": [],
            "test_apply_trivial": [],
            "test_apply_trivial_fail": [],
            "test_fast_apply": [],
            "test_group_apply_once_per_group": [
                "df",
                "group_names"
            ],
            "test_group_apply_once_per_group2": [
                "capsys"
            ],
            "test_apply_fast_slow_identical": [],
            "test_groupby_apply_identity_maybecopy_index_identical": [
                "func"
            ],
            "test_apply_with_mixed_dtype": [],
            "test_groupby_as_index_apply": [
                "df"
            ],
            "test_apply_concat_preserve_names": [
                "three_group"
            ],
            "test_apply_series_to_frame": [],
            "test_apply_series_yield_constant": [
                "df"
            ],
            "test_apply_frame_yield_constant": [
                "df"
            ],
            "test_apply_frame_to_series": [
                "df"
            ],
            "test_apply_frame_concat_series": [],
            "test_apply_transform": [
                "ts"
            ],
            "test_apply_multikey_corner": [
                "tsframe"
            ],
            "test_apply_chunk_view": [],
            "test_apply_no_name_column_conflict": [],
            "test_apply_typecast_fail": [],
            "test_apply_multiindex_fail": [],
            "test_apply_corner": [
                "tsframe"
            ],
            "test_apply_without_copy": [],
            "test_apply_with_duplicated_non_sorted_axis": [
                "test_series"
            ],
            "test_apply_reindex_values": [],
            "test_apply_corner_cases": [],
            "test_apply_numeric_coercion_when_datetime": [],
            "test_apply_aggregating_timedelta_and_datetime": [],
            "test_time_field_bug": [],
            "test_gb_apply_list_of_unequal_len_arrays": [],
            "test_groupby_apply_all_none": [],
            "test_groupby_apply_none_first": [],
            "test_groupby_apply_return_empty_chunk": [],
            "test_apply_with_mixed_types": [],
            "test_func_returns_object": [],
            "test_apply_datetime_issue": [
                "group_column_dtlike"
            ],
            "test_apply_series_return_dataframe_groups": [],
            "test_apply_multi_level_name": [
                "category"
            ],
            "test_groupby_apply_datetime_result_dtypes": [],
            "test_apply_index_has_complex_internals": [
                "index"
            ],
            "test_apply_function_returns_non_pandas_non_scalar": [
                "function",
                "expected_values"
            ],
            "test_apply_function_returns_numpy_array": [],
            "test_apply_function_index_return": [
                "function"
            ],
            "test_apply_function_with_indexing": [],
            "test_apply_function_with_indexing_return_column": [],
            "test_apply_with_timezones_aware": []
        },
        "pandas.tests.groupby.test_categorical": {
            "cartesian_product_for_groupers": [
                "result",
                "args",
                "names"
            ],
            "test_apply_use_categorical_name": [
                "df"
            ],
            "test_basic": [],
            "test_level_get_group": [
                "observed"
            ],
            "test_apply": [
                "ordered"
            ],
            "test_observed": [
                "observed"
            ],
            "test_observed_codes_remap": [
                "observed"
            ],
            "test_observed_perf": [],
            "test_observed_groups": [
                "observed"
            ],
            "test_observed_groups_with_nan": [
                "observed"
            ],
            "test_observed_nth": [],
            "test_dataframe_categorical_with_nan": [
                "observed"
            ],
            "test_dataframe_categorical_ordered_observed_sort": [
                "ordered",
                "observed",
                "sort"
            ],
            "test_datetime": [],
            "test_categorical_index": [],
            "test_describe_categorical_columns": [],
            "test_unstack_categorical": [],
            "test_bins_unequal_len": [],
            "test_as_index": [],
            "test_preserve_categories": [],
            "test_preserve_categorical_dtype": [],
            "test_preserve_on_ordered_ops": [
                "func",
                "values"
            ],
            "test_categorical_no_compress": [],
            "test_groupby_empty_with_category": [],
            "test_sort": [],
            "test_sort2": [],
            "test_sort_datetimelike": [],
            "test_empty_sum": [],
            "test_empty_prod": [],
            "test_groupby_multiindex_categorical_datetime": [],
            "test_groupby_agg_observed_true_single_column": [
                "as_index",
                "expected"
            ],
            "test_shift": [
                "fill_value"
            ],
            "df_cat": [
                "df"
            ],
            "test_seriesgroupby_observed_true": [
                "df_cat",
                "operation",
                "kwargs"
            ],
            "test_seriesgroupby_observed_false_or_none": [
                "df_cat",
                "observed",
                "operation"
            ],
            "test_seriesgroupby_observed_apply_dict": [
                "df_cat",
                "observed",
                "index",
                "data"
            ],
            "test_groupby_categorical_series_dataframe_consistent": [
                "df_cat"
            ],
            "test_groupby_categorical_axis_1": [
                "code"
            ],
            "test_groupby_cat_preserves_structure": [
                "observed",
                "ordered"
            ],
            "test_get_nonexistent_category": [],
            "test_series_groupby_on_2_categoricals_unobserved": [
                "reduction_func",
                "observed",
                "request"
            ],
            "test_series_groupby_on_2_categoricals_unobserved_zeroes_or_nans": [
                "reduction_func",
                "request"
            ],
            "test_dataframe_groupby_on_2_categoricals_when_observed_is_true": [
                "reduction_func"
            ],
            "test_dataframe_groupby_on_2_categoricals_when_observed_is_false": [
                "reduction_func",
                "observed",
                "request"
            ],
            "test_series_groupby_categorical_aggregation_getitem": [],
            "test_groupby_agg_categorical_columns": [
                "func",
                "expected_values"
            ],
            "test_groupby_agg_non_numeric": [],
            "test_groupy_first_returned_categorical_instead_of_dataframe": [
                "func"
            ],
            "test_read_only_category_no_sort": [],
            "test_sorted_missing_category_values": [],
            "test_agg_cython_category_not_implemented_fallback": [],
            "test_aggregate_categorical_lost_index": [
                "func"
            ],
            "test_aggregate_categorical_with_isnan": [],
            "test_categorical_transform": [],
            "test_series_groupby_first_on_categorical_col_grouped_on_2_categoricals": [
                "func",
                "observed"
            ],
            "test_df_groupby_first_on_categorical_col_grouped_on_2_categoricals": [
                "func",
                "observed"
            ]
        },
        "pandas.tests.groupby.test_groupby_subclass": {
            "test_groupby_preserves_subclass": [
                "obj",
                "groupby_func"
            ],
            "test_groupby_resample_preserves_subclass": [
                "obj"
            ]
        },
        "pandas.tests.groupby.test_groupby_dropna": {
            "test_groupby_dropna_multi_index_dataframe_nan_in_one_group": [
                "dropna",
                "tuples",
                "outputs",
                "nulls_fixture"
            ],
            "test_groupby_dropna_multi_index_dataframe_nan_in_two_groups": [
                "dropna",
                "tuples",
                "outputs",
                "nulls_fixture",
                "nulls_fixture2"
            ],
            "test_groupby_dropna_normal_index_dataframe": [
                "dropna",
                "idx",
                "outputs"
            ],
            "test_groupby_dropna_series_level": [
                "dropna",
                "idx",
                "expected"
            ],
            "test_groupby_dropna_series_by": [
                "dropna",
                "expected"
            ],
            "test_groupby_dropna_multi_index_dataframe_agg": [
                "dropna",
                "tuples",
                "outputs"
            ],
            "test_groupby_dropna_datetime_like_data": [
                "dropna",
                "values",
                "datetime1",
                "datetime2",
                "unique_nulls_fixture",
                "unique_nulls_fixture2"
            ]
        },
        "pandas.tests.groupby.test_timegrouper": {
            "TestGroupBy": {
                "test_groupby_with_timegrouper": [
                    "self"
                ],
                "test_groupby_with_timegrouper_methods": [
                    "self",
                    "should_sort"
                ],
                "test_timegrouper_with_reg_groups": [
                    "self"
                ],
                "test_timegrouper_with_reg_groups_freq": [
                    "self",
                    "freq"
                ],
                "test_timegrouper_get_group": [
                    "self"
                ],
                "test_timegrouper_apply_return_type_series": [
                    "self"
                ],
                "test_timegrouper_apply_return_type_value": [
                    "self"
                ],
                "test_groupby_groups_datetimeindex": [
                    "self"
                ],
                "test_groupby_groups_datetimeindex_tz": [
                    "self"
                ],
                "test_frame_datetime64_handling_groupby": [
                    "self"
                ],
                "test_groupby_multi_timezone": [
                    "self"
                ],
                "test_groupby_groups_periods": [
                    "self"
                ],
                "test_groupby_first_datetime64": [
                    "self"
                ],
                "test_groupby_max_datetime64": [
                    "self"
                ],
                "test_groupby_datetime64_32_bit": [
                    "self"
                ],
                "test_groupby_with_timezone_selection": [
                    "self"
                ],
                "test_timezone_info": [
                    "self"
                ],
                "test_datetime_count": [
                    "self"
                ],
                "test_first_last_max_min_on_time_data": [
                    "self"
                ],
                "test_nunique_with_timegrouper_and_nat": [
                    "self"
                ],
                "test_scalar_call_versus_list_call": [
                    "self"
                ],
                "test_grouper_period_index": [
                    "self"
                ]
            }
        },
        "pandas.tests.groupby.test_nunique": {
            "test_series_groupby_nunique": [
                "n",
                "m",
                "sort",
                "dropna"
            ],
            "test_nunique": [],
            "test_nunique_with_object": [],
            "test_nunique_with_empty_series": [],
            "test_nunique_with_timegrouper": [],
            "test_nunique_with_NaT": [
                "key",
                "data",
                "dropna",
                "expected"
            ],
            "test_nunique_preserves_column_level_names": [],
            "test_nunique_transform_with_datetime": []
        },
        "pandas.tests.groupby.test_allowlist": {
            "df_allowlist_fixture": [
                "request"
            ],
            "s_allowlist_fixture": [
                "request"
            ],
            "mframe": [],
            "df": [],
            "df_letters": [],
            "test_groupby_allowlist": [
                "df_letters",
                "allowlist"
            ],
            "check_allowlist": [
                "obj",
                "df",
                "m"
            ],
            "test_groupby_series_allowlist": [
                "df_letters",
                "s_allowlist_fixture"
            ],
            "test_groupby_frame_allowlist": [
                "df_letters",
                "df_allowlist_fixture"
            ],
            "raw_frame": [],
            "test_regression_allowlist_methods": [
                "raw_frame",
                "op",
                "level",
                "axis",
                "skipna",
                "sort"
            ],
            "test_groupby_blocklist": [
                "df_letters"
            ],
            "test_tab_completion": [
                "mframe"
            ],
            "test_groupby_function_rename": [
                "mframe"
            ],
            "test_groupby_selection_with_methods": [
                "df"
            ],
            "test_all_methods_categorized": [
                "mframe"
            ]
        },
        "pandas.tests.groupby.test_nth": {
            "test_first_last_nth": [
                "df"
            ],
            "test_first_last_with_na_object": [
                "method",
                "nulls_fixture"
            ],
            "test_nth_with_na_object": [
                "index",
                "nulls_fixture"
            ],
            "test_first_last_with_None": [
                "method"
            ],
            "test_first_last_nth_dtypes": [
                "df_mixed_floats"
            ],
            "test_first_last_nth_nan_dtype": [],
            "test_first_strings_timestamps": [],
            "test_nth": [],
            "test_nth_multi_index": [
                "three_group"
            ],
            "test_first_last_tz": [
                "data",
                "expected_first",
                "expected_last"
            ],
            "test_first_last_tz_multi_column": [
                "method",
                "ts",
                "alpha"
            ],
            "test_first_last_extension_array_keeps_dtype": [
                "values",
                "function"
            ],
            "test_nth_multi_index_as_expected": [],
            "test_groupby_head_tail": [],
            "test_group_selection_cache": [],
            "test_nth_empty": [],
            "test_nth_column_order": [],
            "test_nth_nan_in_grouper": [
                "dropna"
            ]
        },
        "pandas.tests.groupby.test_filters": {
            "test_filter_series": [],
            "test_filter_single_column_df": [],
            "test_filter_multi_column_df": [],
            "test_filter_mixed_df": [],
            "test_filter_out_all_groups": [],
            "test_filter_out_no_groups": [],
            "test_filter_out_all_groups_in_df": [],
            "test_filter_condition_raises": [],
            "test_filter_with_axis_in_groupby": [],
            "test_filter_bad_shapes": [],
            "test_filter_nan_is_false": [],
            "test_filter_against_workaround": [],
            "test_filter_using_len": [],
            "test_filter_maintains_ordering": [],
            "test_filter_multiple_timestamp": [],
            "test_filter_and_transform_with_non_unique_int_index": [],
            "test_filter_and_transform_with_multiple_non_unique_int_index": [],
            "test_filter_and_transform_with_non_unique_float_index": [],
            "test_filter_and_transform_with_non_unique_timestamp_index": [],
            "test_filter_and_transform_with_non_unique_string_index": [],
            "test_filter_has_access_to_grouped_cols": [],
            "test_filter_enforces_scalarness": [],
            "test_filter_non_bool_raises": [],
            "test_filter_dropna_with_empty_groups": []
        },
        "pandas.tests.groupby.test_counting": {
            "test_groupby_timedelta_cython_count": [],
            "test_count": [],
            "test_count_non_nulls": [],
            "test_count_object": [],
            "test_count_cross_type": [],
            "test_lower_int_prec_count": [],
            "test_count_uses_size_on_exception": [],
            "TestCounting": {
                "test_cumcount": [
                    "self"
                ],
                "test_cumcount_empty": [
                    "self"
                ],
                "test_cumcount_dupe_index": [
                    "self"
                ],
                "test_cumcount_mi": [
                    "self"
                ],
                "test_cumcount_groupby_not_col": [
                    "self"
                ],
                "test_ngroup": [
                    "self"
                ],
                "test_ngroup_distinct": [
                    "self"
                ],
                "test_ngroup_one_group": [
                    "self"
                ],
                "test_ngroup_empty": [
                    "self"
                ],
                "test_ngroup_series_matches_frame": [
                    "self"
                ],
                "test_ngroup_dupe_index": [
                    "self"
                ],
                "test_ngroup_mi": [
                    "self"
                ],
                "test_ngroup_groupby_not_col": [
                    "self"
                ],
                "test_ngroup_descending": [
                    "self"
                ],
                "test_ngroup_matches_cumcount": [
                    "self"
                ],
                "test_ngroup_cumcount_pair": [
                    "self"
                ],
                "test_ngroup_respects_groupby_order": [
                    "self"
                ],
                "test_count_with_datetimelike": [
                    "self",
                    "datetimelike"
                ],
                "test_count_with_only_nans_in_first_group": [
                    "self"
                ],
                "test_count_groupby_column_with_nan_in_groupby_column": [
                    "self"
                ]
            }
        },
        "pandas.tests.groupby.test_bin_groupby": {
            "test_series_grouper": [],
            "test_series_grouper_requires_nonempty_raises": [],
            "test_series_bin_grouper": [],
            "assert_block_lengths": [
                "x"
            ],
            "cumsum_max": [
                "x"
            ],
            "test_mgr_locs_updated": [
                "func"
            ],
            "test_generate_bins": [
                "binner",
                "closed",
                "expected"
            ],
            "test_group_ohlc": [],
            "TestMoments": {}
        },
        "pandas.tests.groupby.conftest": {
            "mframe": [],
            "df": [],
            "ts": [],
            "tsd": [],
            "tsframe": [
                "tsd"
            ],
            "df_mixed_floats": [],
            "three_group": [],
            "reduction_func": [
                "request"
            ],
            "transformation_func": [
                "request"
            ],
            "groupby_func": [
                "request"
            ],
            "parallel": [
                "request"
            ],
            "nogil": [
                "request"
            ],
            "nopython": [
                "request"
            ]
        },
        "pandas.tests.groupby.test_index_as_string": {
            "frame": [
                "request"
            ],
            "series": [],
            "test_grouper_index_level_as_string": [
                "frame",
                "key_strs",
                "groupers"
            ],
            "test_grouper_index_level_as_string_series": [
                "series",
                "levels"
            ]
        },
        "pandas.tests.groupby.test_grouping": {
            "TestSelection": {
                "test_select_bad_cols": [
                    "self"
                ],
                "test_groupby_duplicated_column_errormsg": [
                    "self"
                ],
                "test_column_select_via_attr": [
                    "self",
                    "df"
                ],
                "test_getitem_list_of_columns": [
                    "self"
                ],
                "test_getitem_numeric_column_names": [
                    "self"
                ],
                "test_getitem_single_list_of_columns": [
                    "self",
                    "df"
                ],
                "test_getitem_single_column": [
                    "self"
                ]
            },
            "TestGrouping": {
                "test_grouper_index_types": [
                    "self"
                ],
                "test_grouper_multilevel_freq": [
                    "self"
                ],
                "test_grouper_creation_bug": [
                    "self"
                ],
                "test_grouper_column_and_index": [
                    "self"
                ],
                "test_groupby_levels_and_columns": [
                    "self"
                ],
                "test_groupby_categorical_index_and_columns": [
                    "self",
                    "observed"
                ],
                "test_grouper_getting_correct_binner": [
                    "self"
                ],
                "test_grouper_iter": [
                    "self",
                    "df"
                ],
                "test_empty_groups": [
                    "self",
                    "df"
                ],
                "test_groupby_grouper": [
                    "self",
                    "df"
                ],
                "test_groupby_dict_mapping": [
                    "self"
                ],
                "test_groupby_grouper_f_sanity_checked": [
                    "self"
                ],
                "test_grouping_error_on_multidim_input": [
                    "self",
                    "df"
                ],
                "test_multiindex_passthru": [
                    "self"
                ],
                "test_multiindex_negative_level": [
                    "self",
                    "mframe"
                ],
                "test_multifunc_select_col_integer_cols": [
                    "self",
                    "df"
                ],
                "test_multiindex_columns_empty_level": [
                    "self"
                ],
                "test_groupby_multiindex_tuple": [
                    "self"
                ],
                "test_groupby_level": [
                    "self",
                    "sort",
                    "mframe",
                    "df"
                ],
                "test_groupby_level_index_names": [
                    "self",
                    "axis"
                ],
                "test_groupby_level_with_nas": [
                    "self",
                    "sort"
                ],
                "test_groupby_args": [
                    "self",
                    "mframe"
                ],
                "test_level_preserve_order": [
                    "self",
                    "sort",
                    "labels",
                    "mframe"
                ],
                "test_grouping_labels": [
                    "self",
                    "mframe"
                ],
                "test_list_grouper_with_nat": [
                    "self"
                ],
                "test_evaluate_with_empty_groups": [
                    "self",
                    "func",
                    "expected"
                ],
                "test_groupby_empty": [
                    "self"
                ],
                "test_groupby_level_index_value_all_na": [
                    "self"
                ],
                "test_groupby_multiindex_level_empty": [
                    "self"
                ]
            },
            "TestGetGroup": {
                "test_get_group": [
                    "self"
                ],
                "test_get_group_empty_bins": [
                    "self",
                    "observed"
                ],
                "test_get_group_grouped_by_tuple": [
                    "self"
                ],
                "test_groupby_with_empty": [
                    "self"
                ],
                "test_groupby_with_single_column": [
                    "self"
                ],
                "test_gb_key_len_equal_axis_len": [
                    "self"
                ]
            },
            "TestIteration": {
                "test_groups": [
                    "self",
                    "df"
                ],
                "test_grouping_is_iterable": [
                    "self",
                    "tsframe"
                ],
                "test_multi_iter": [
                    "self"
                ],
                "test_multi_iter_frame": [
                    "self",
                    "three_group"
                ],
                "test_dictify": [
                    "self",
                    "df"
                ],
                "test_groupby_with_small_elem": [
                    "self"
                ],
                "test_grouping_string_repr": [
                    "self"
                ]
            }
        },
        "pandas.tests.groupby": {},
        "pandas.tests.groupby.aggregate.test_other": {
            "test_agg_api": [],
            "test_agg_datetimes_mixed": [],
            "test_agg_period_index": [],
            "test_agg_dict_parameter_cast_result_dtypes": [],
            "test_agg_cast_results_dtypes": [],
            "test_aggregate_float64_no_int64": [],
            "test_aggregate_api_consistency": [],
            "test_agg_dict_renaming_deprecation": [],
            "test_agg_compat": [],
            "test_agg_nested_dicts": [],
            "test_agg_item_by_item_raise_typeerror": [],
            "test_series_agg_multikey": [],
            "test_series_agg_multi_pure_python": [],
            "test_agg_consistency": [],
            "test_agg_callables": [],
            "test_agg_over_numpy_arrays": [],
            "test_agg_tzaware_non_datetime_result": [],
            "test_agg_timezone_round_trip": [],
            "test_sum_uint64_overflow": [],
            "test_agg_structs_dataframe": [
                "structure",
                "expected"
            ],
            "test_agg_structs_series": [
                "structure",
                "expected"
            ],
            "test_agg_category_nansum": [
                "observed"
            ],
            "test_agg_list_like_func": [],
            "test_agg_lambda_with_timezone": [],
            "test_groupby_agg_err_catching": [
                "err_cls"
            ]
        },
        "pandas.tests.groupby.aggregate.test_cython": {
            "test_cythonized_aggers": [
                "op_name"
            ],
            "test_cython_agg_boolean": [],
            "test_cython_agg_nothing_to_agg": [],
            "test_cython_agg_nothing_to_agg_with_dates": [],
            "test_cython_agg_frame_columns": [],
            "test_cython_agg_return_dict": [],
            "test_cython_fail_agg": [],
            "test__cython_agg_general": [
                "op",
                "targop"
            ],
            "test_cython_agg_empty_buckets": [
                "op",
                "targop",
                "observed"
            ],
            "test_cython_agg_empty_buckets_nanops": [
                "observed"
            ],
            "test_cython_with_timestamp_and_nat": [
                "op",
                "data"
            ]
        },
        "pandas.tests.groupby.aggregate.test_aggregate": {
            "test_groupby_agg_no_extra_calls": [],
            "test_agg_regression1": [
                "tsframe"
            ],
            "test_agg_must_agg": [
                "df"
            ],
            "test_agg_ser_multi_key": [
                "df"
            ],
            "test_groupby_aggregation_mixed_dtype": [],
            "test_groupby_aggregation_multi_level_column": [],
            "test_agg_apply_corner": [
                "ts",
                "tsframe"
            ],
            "test_agg_grouping_is_list_tuple": [
                "ts"
            ],
            "test_agg_python_multiindex": [
                "mframe"
            ],
            "test_aggregate_str_func": [
                "tsframe",
                "groupbyfunc"
            ],
            "test_aggregate_item_by_item": [
                "df"
            ],
            "test_wrap_agg_out": [
                "three_group"
            ],
            "test_agg_multiple_functions_maintain_order": [
                "df"
            ],
            "test_agg_multiple_functions_same_name": [],
            "test_agg_multiple_functions_same_name_with_ohlc_present": [],
            "test_multiple_functions_tuples_and_non_tuples": [
                "df"
            ],
            "test_more_flexible_frame_multi_function": [
                "df"
            ],
            "test_multi_function_flexible_mix": [
                "df"
            ],
            "test_groupby_agg_coercing_bools": [],
            "test_bool_agg_dtype": [
                "op"
            ],
            "test_order_aggregate_multiple_funcs": [],
            "test_uint64_type_handling": [
                "dtype",
                "how"
            ],
            "test_func_duplicates_raises": [],
            "test_agg_index_has_complex_internals": [
                "index"
            ],
            "test_agg_split_block": [],
            "test_agg_split_object_part_datetime": [],
            "test_agg_relabel_multiindex_column": [
                "agg_col1",
                "agg_col2",
                "agg_col3",
                "agg_result1",
                "agg_result2",
                "agg_result3"
            ],
            "test_agg_relabel_multiindex_raises_not_exist": [],
            "test_agg_relabel_multiindex_duplicates": [],
            "test_groupby_aggregate_empty_key": [
                "kwargs"
            ],
            "test_groupby_aggregate_empty_key_empty_return": [],
            "test_grouby_agg_loses_results_with_as_index_false_relabel": [],
            "test_grouby_agg_loses_results_with_as_index_false_relabel_multiindex": [],
            "test_multiindex_custom_func": [
                "func"
            ],
            "myfunc": [
                "s"
            ],
            "test_lambda_named_agg": [
                "func"
            ],
            "test_aggregate_mixed_types": [],
            "test_aggregate_udf_na_extension_type": [],
            "test_groupby_aggregate_period_column": [
                "func"
            ],
            "test_groupby_aggregate_period_frame": [
                "func"
            ],
            "test_groupby_get_by_index": [],
            "test_nonagg_agg": [],
            "TestNamedAggregationSeries": {
                "test_series_named_agg": [
                    "self"
                ],
                "test_no_args_raises": [
                    "self"
                ],
                "test_series_named_agg_duplicates_no_raises": [
                    "self"
                ],
                "test_mangled": [
                    "self"
                ],
                "test_named_agg_nametuple": [
                    "self",
                    "inp"
                ]
            },
            "TestNamedAggregationDataFrame": {
                "test_agg_relabel": [
                    "self"
                ],
                "test_agg_relabel_non_identifier": [
                    "self"
                ],
                "test_duplicate_no_raises": [
                    "self"
                ],
                "test_agg_relabel_with_level": [
                    "self"
                ],
                "test_agg_relabel_other_raises": [
                    "self"
                ],
                "test_missing_raises": [
                    "self"
                ],
                "test_agg_namedtuple": [
                    "self"
                ],
                "test_mangled": [
                    "self"
                ]
            },
            "TestLambdaMangling": {
                "test_basic": [
                    "self"
                ],
                "test_mangle_series_groupby": [
                    "self"
                ],
                "test_with_kwargs": [
                    "self"
                ],
                "test_agg_with_one_lambda": [
                    "self"
                ],
                "test_agg_multiple_lambda": [
                    "self"
                ]
            }
        },
        "pandas.tests.groupby.aggregate.test_numba": {
            "test_correct_function_signature": [],
            "test_check_nopython_kwargs": [],
            "test_numba_vs_cython": [
                "jit",
                "pandas_obj",
                "nogil",
                "parallel",
                "nopython"
            ],
            "test_cache": [
                "jit",
                "pandas_obj",
                "nogil",
                "parallel",
                "nopython"
            ],
            "test_use_global_config": []
        },
        "pandas.tests.groupby.aggregate": {},
        "pandas.tests.groupby.transform.test_transform": {
            "assert_fp_equal": [
                "a",
                "b"
            ],
            "test_transform": [],
            "test_transform_fast": [],
            "test_transform_broadcast": [
                "tsframe",
                "ts"
            ],
            "test_transform_axis": [
                "tsframe"
            ],
            "test_transform_dtype": [],
            "test_transform_bug": [],
            "test_transform_numeric_to_boolean": [],
            "test_transform_datetime_to_timedelta": [],
            "test_transform_datetime_to_numeric": [],
            "test_transform_casting": [],
            "test_transform_multiple": [
                "ts"
            ],
            "test_dispatch_transform": [
                "tsframe"
            ],
            "test_transform_transformation_func": [
                "transformation_func"
            ],
            "test_transform_select_columns": [
                "df"
            ],
            "test_transform_exclude_nuisance": [
                "df"
            ],
            "test_transform_function_aliases": [
                "df"
            ],
            "test_series_fast_transform_date": [],
            "test_transform_length": [],
            "test_transform_coercion": [],
            "test_groupby_transform_with_int": [],
            "test_groupby_transform_with_nan_group": [],
            "test_transform_mixed_type": [],
            "_check_cython_group_transform_cumulative": [
                "pd_op",
                "np_op",
                "dtype"
            ],
            "test_cython_group_transform_cumsum": [
                "any_real_dtype"
            ],
            "test_cython_group_transform_cumprod": [],
            "test_cython_group_transform_algos": [],
            "test_cython_transform_series": [
                "op",
                "args",
                "targop"
            ],
            "test_groupby_cum_skipna": [
                "op",
                "skipna",
                "input",
                "exp"
            ],
            "test_cython_transform_frame": [
                "op",
                "args",
                "targop"
            ],
            "test_transform_with_non_scalar_group": [],
            "test_transform_numeric_ret": [
                "cols",
                "exp",
                "comp_func",
                "agg_func",
                "request"
            ],
            "test_group_fill_methods": [
                "mix_groupings",
                "as_series",
                "val1",
                "val2",
                "fill_method",
                "limit",
                "exp_vals"
            ],
            "test_pad_stable_sorting": [
                "fill_method"
            ],
            "test_pct_change": [
                "test_series",
                "freq",
                "periods",
                "fill_method",
                "limit"
            ],
            "test_ffill_bfill_non_unique_multilevel": [
                "func",
                "expected_status"
            ],
            "test_any_all_np_func": [
                "func"
            ],
            "test_groupby_transform_rename": [],
            "test_groupby_transform_timezone_column": [
                "func"
            ],
            "test_groupby_transform_with_datetimes": [
                "func",
                "values"
            ],
            "test_transform_absent_categories": [
                "func"
            ],
            "test_ffill_not_in_axis": [
                "func",
                "key",
                "val"
            ],
            "test_transform_invalid_name_raises": [],
            "test_transform_agg_by_name": [
                "reduction_func",
                "obj"
            ],
            "test_transform_lambda_with_datetimetz": [],
            "test_transform_fastpath_raises": [],
            "test_transform_lambda_indexing": [],
            "test_categorical_and_not_categorical_key": [
                "observed"
            ]
        },
        "pandas.tests.groupby.transform.test_numba": {
            "test_correct_function_signature": [],
            "test_check_nopython_kwargs": [],
            "test_numba_vs_cython": [
                "jit",
                "pandas_obj",
                "nogil",
                "parallel",
                "nopython"
            ],
            "test_cache": [
                "jit",
                "pandas_obj",
                "nogil",
                "parallel",
                "nopython"
            ],
            "test_use_global_config": []
        },
        "pandas.tests.groupby.transform": {},
        "pandas.tests.reductions.test_reductions": {
            "get_objs": [],
            "TestReductions": {
                "test_ops": [
                    "self",
                    "opname",
                    "obj"
                ],
                "test_nanminmax": [
                    "self",
                    "opname",
                    "dtype",
                    "val",
                    "index_or_series"
                ],
                "test_nanargminmax": [
                    "self",
                    "opname",
                    "index_or_series"
                ],
                "test_nanops_empty_object": [
                    "self",
                    "opname",
                    "index_or_series",
                    "dtype"
                ],
                "test_argminmax": [
                    "self"
                ],
                "test_same_tz_min_max_axis_1": [
                    "self",
                    "op",
                    "expected_col"
                ],
                "test_numpy_reduction_with_tz_aware_dtype": [
                    "self",
                    "tz_aware_fixture",
                    "func"
                ]
            },
            "TestIndexReductions": {
                "test_max_min_range": [
                    "self",
                    "start",
                    "stop",
                    "step"
                ],
                "test_minmax_timedelta64": [
                    "self"
                ],
                "test_minmax_timedelta_empty_or_na": [
                    "self",
                    "op"
                ],
                "test_numpy_minmax_timedelta64": [
                    "self"
                ],
                "test_timedelta_ops": [
                    "self"
                ],
                "test_invalid_td64_reductions": [
                    "self",
                    "opname"
                ],
                "test_minmax_tz": [
                    "self",
                    "tz_naive_fixture"
                ],
                "test_minmax_nat_datetime64": [
                    "self",
                    "op"
                ],
                "test_numpy_minmax_integer": [
                    "self"
                ],
                "test_numpy_minmax_range": [
                    "self"
                ],
                "test_numpy_minmax_datetime64": [
                    "self"
                ],
                "test_minmax_period": [
                    "self"
                ],
                "test_numpy_minmax_period": [
                    "self"
                ],
                "test_min_max_categorical": [
                    "self"
                ]
            },
            "TestSeriesReductions": {
                "test_sum_inf": [
                    "self"
                ],
                "test_empty": [
                    "self",
                    "method",
                    "unit",
                    "use_bottleneck",
                    "dtype"
                ],
                "test_empty_multi": [
                    "self",
                    "method",
                    "unit"
                ],
                "test_ops_consistency_on_empty": [
                    "self",
                    "method"
                ],
                "test_nansum_buglet": [
                    "self"
                ],
                "test_sum_overflow": [
                    "self",
                    "use_bottleneck"
                ],
                "test_empty_timeseries_reductions_return_nat": [
                    "self"
                ],
                "test_numpy_argmin": [
                    "self"
                ],
                "test_numpy_argmax": [
                    "self"
                ],
                "test_idxmin": [
                    "self"
                ],
                "test_idxmax": [
                    "self"
                ],
                "test_all_any": [
                    "self"
                ],
                "test_all_any_params": [
                    "self"
                ],
                "test_all_any_boolean": [
                    "self"
                ],
                "test_timedelta64_analytics": [
                    "self"
                ],
                "test_assert_idxminmax_raises": [
                    "self",
                    "test_input",
                    "error_type"
                ],
                "test_idxminmax_with_inf": [
                    "self"
                ]
            },
            "TestDatetime64SeriesReductions": {
                "test_minmax_nat_series": [
                    "self",
                    "nat_ser"
                ],
                "test_minmax_nat_dataframe": [
                    "self",
                    "nat_df"
                ],
                "test_min_max": [
                    "self"
                ],
                "test_min_max_series": [
                    "self"
                ]
            },
            "TestCategoricalSeriesReductions": {
                "test_min_max_unordered_raises": [
                    "self",
                    "function"
                ],
                "test_min_max_ordered": [
                    "self",
                    "values",
                    "categories",
                    "function"
                ],
                "test_min_max_ordered_with_nan_only": [
                    "self",
                    "function",
                    "skipna"
                ],
                "test_min_max_skipna": [
                    "self",
                    "function",
                    "skipna"
                ]
            },
            "TestSeriesMode": {
                "test_mode_empty": [
                    "self",
                    "dropna",
                    "expected"
                ],
                "test_mode_numerical": [
                    "self",
                    "dropna",
                    "data",
                    "expected",
                    "dt"
                ],
                "test_mode_numerical_nan": [
                    "self",
                    "dropna",
                    "expected"
                ],
                "test_mode_str_obj": [
                    "self",
                    "dropna",
                    "expected1",
                    "expected2",
                    "expected3"
                ],
                "test_mode_mixeddtype": [
                    "self",
                    "dropna",
                    "expected1",
                    "expected2"
                ],
                "test_mode_datetime": [
                    "self",
                    "dropna",
                    "expected1",
                    "expected2"
                ],
                "test_mode_timedelta": [
                    "self",
                    "dropna",
                    "expected1",
                    "expected2"
                ],
                "test_mode_category": [
                    "self",
                    "dropna",
                    "expected1",
                    "expected2",
                    "expected3"
                ],
                "test_mode_intoverflow": [
                    "self",
                    "dropna",
                    "expected1",
                    "expected2"
                ],
                "test_mode_sortwarning": [
                    "self"
                ]
            }
        },
        "pandas.tests.reductions.test_stat_reductions": {
            "TestDatetimeLikeStatReductions": {
                "test_dt64_mean": [
                    "self",
                    "tz_naive_fixture",
                    "box"
                ],
                "test_period_mean": [
                    "self",
                    "box"
                ],
                "test_td64_mean": [
                    "self",
                    "box"
                ]
            },
            "TestSeriesStatReductions": {
                "_check_stat_op": [
                    "self",
                    "name",
                    "alternate",
                    "string_series_",
                    "check_objects",
                    "check_allna"
                ],
                "test_sum": [
                    "self"
                ],
                "test_mean": [
                    "self"
                ],
                "test_median": [
                    "self"
                ],
                "test_prod": [
                    "self"
                ],
                "test_min": [
                    "self"
                ],
                "test_max": [
                    "self"
                ],
                "test_var_std": [
                    "self"
                ],
                "test_sem": [
                    "self"
                ],
                "test_skew": [
                    "self"
                ],
                "test_kurt": [
                    "self"
                ]
            }
        },
        "pandas.tests.reductions": {},
        "pandas.tests.base.test_value_counts": {
            "test_value_counts": [
                "index_or_series_obj"
            ],
            "test_value_counts_null": [
                "null_obj",
                "index_or_series_obj"
            ],
            "test_value_counts_inferred": [
                "index_or_series"
            ],
            "test_value_counts_bins": [
                "index_or_series"
            ],
            "test_value_counts_datetime64": [
                "index_or_series"
            ]
        },
        "pandas.tests.base.common": {
            "allow_na_ops": [
                "obj"
            ]
        },
        "pandas.tests.base.test_transpose": {
            "test_transpose": [
                "index_or_series_obj"
            ],
            "test_transpose_non_default_axes": [
                "index_or_series_obj"
            ],
            "test_numpy_transpose": [
                "index_or_series_obj"
            ]
        },
        "pandas.tests.base.test_factorize": {
            "test_factorize": [
                "index_or_series_obj",
                "sort"
            ]
        },
        "pandas.tests.base.test_fillna": {
            "test_fillna": [
                "index_or_series_obj"
            ],
            "test_fillna_null": [
                "null_obj",
                "index_or_series_obj"
            ]
        },
        "pandas.tests.base.test_unique": {
            "test_unique": [
                "index_or_series_obj"
            ],
            "test_unique_null": [
                "null_obj",
                "index_or_series_obj"
            ],
            "test_nunique": [
                "index_or_series_obj"
            ],
            "test_nunique_null": [
                "null_obj",
                "index_or_series_obj"
            ],
            "test_unique_bad_unicode": [
                "idx_or_series_w_bad_unicode"
            ]
        },
        "pandas.tests.base.test_constructors": {
            "constructor": [
                "request"
            ],
            "TestPandasDelegate": {
                "setup_method": [
                    "self",
                    "method"
                ],
                "test_invalid_delegation": [
                    "self"
                ],
                "test_memory_usage": [
                    "self"
                ]
            },
            "TestNoNewAttributesMixin": {
                "test_mixin": [
                    "self"
                ]
            },
            "TestConstruction": {
                "test_constructor_datetime_outofbound": [
                    "self",
                    "a",
                    "klass"
                ],
                "test_constructor_datetime_nonns": [
                    "self",
                    "constructor"
                ]
            }
        },
        "pandas.tests.base.test_misc": {
            "test_binary_ops_docstring": [
                "klass",
                "op_name",
                "op"
            ],
            "test_none_comparison": [
                "series_with_simple_index"
            ],
            "test_ndarray_compat_properties": [
                "index_or_series_obj"
            ],
            "test_memory_usage": [
                "index_or_series_obj"
            ],
            "test_memory_usage_components_series": [
                "series_with_simple_index"
            ],
            "test_memory_usage_components_narrow_series": [
                "narrow_series"
            ],
            "test_searchsorted": [
                "index_or_series_obj"
            ],
            "test_access_by_position": [
                "index"
            ],
            "test_get_indexer_non_unique_dtype_mismatch": []
        },
        "pandas.tests.base.test_conversion": {
            "test_values_consistent": [
                "array",
                "expected_type",
                "dtype"
            ],
            "test_numpy_array": [
                "arr"
            ],
            "test_numpy_array_all_dtypes": [
                "any_numpy_dtype"
            ],
            "test_array": [
                "array",
                "attr",
                "index_or_series"
            ],
            "test_array_multiindex_raises": [],
            "test_to_numpy": [
                "array",
                "expected",
                "index_or_series"
            ],
            "test_to_numpy_copy": [
                "arr",
                "as_series"
            ],
            "test_to_numpy_dtype": [
                "as_series"
            ],
            "test_to_numpy_na_value_numpy_dtype": [
                "index_or_series",
                "values",
                "dtype",
                "na_value",
                "expected"
            ],
            "test_to_numpy_kwargs_raises": [],
            "test_to_numpy_dataframe_na_value": [
                "data",
                "dtype",
                "na_value"
            ],
            "test_to_numpy_dataframe_single_block": [
                "data",
                "expected"
            ],
            "test_to_numpy_dataframe_single_block_no_mutate": [],
            "TestToIterable": {
                "test_iterable": [
                    "self",
                    "index_or_series",
                    "method",
                    "dtype",
                    "rdtype"
                ],
                "test_iterable_object_and_category": [
                    "self",
                    "index_or_series",
                    "method",
                    "dtype",
                    "rdtype",
                    "obj"
                ],
                "test_iterable_items": [
                    "self",
                    "dtype",
                    "rdtype"
                ],
                "test_iterable_map": [
                    "self",
                    "index_or_series",
                    "dtype",
                    "rdtype"
                ],
                "test_categorial_datetimelike": [
                    "self",
                    "method"
                ],
                "test_iter_box": [
                    "self"
                ]
            }
        },
        "pandas.tests.base.test_drop_duplicates": {
            "test_drop_duplicates_series_vs_dataframe": []
        },
        "pandas.tests.base": {},
        "pandas.tests.generic.test_frame": {
            "TestDataFrame": {
                "test_rename_mi": [
                    "self"
                ],
                "test_set_axis_name": [
                    "self",
                    "func"
                ],
                "test_set_axis_name_mi": [
                    "self",
                    "func"
                ],
                "test_nonzero_single_element": [
                    "self"
                ],
                "test_get_numeric_data_preserve_dtype": [
                    "self"
                ],
                "test_metadata_propagation_indiv": [
                    "self"
                ],
                "test_set_attribute": [
                    "self"
                ],
                "test_deepcopy_empty": [
                    "self"
                ]
            },
            "TestDataFrame2": {
                "test_validate_bool_args": [
                    "self",
                    "value"
                ],
                "test_unexpected_keyword": [
                    "self"
                ]
            }
        },
        "pandas.tests.generic.test_to_xarray": {
            "TestDataFrameToXArray": {
                "test_to_xarray_index_types": [
                    "self",
                    "index"
                ],
                "test_to_xarray": [
                    "self"
                ]
            },
            "TestSeriesToXArray": {
                "test_to_xarray_index_types": [
                    "self",
                    "index"
                ],
                "test_to_xarray": [
                    "self"
                ]
            }
        },
        "pandas.tests.generic.test_generic": {
            "Generic": {
                "_ndim": [
                    "self"
                ],
                "_axes": [
                    "self"
                ],
                "_construct": [
                    "self",
                    "shape",
                    "value",
                    "dtype"
                ],
                "_compare": [
                    "self",
                    "result",
                    "expected"
                ],
                "test_rename": [
                    "self"
                ],
                "test_get_numeric_data": [
                    "self"
                ],
                "test_nonzero": [
                    "self"
                ],
                "test_downcast": [
                    "self"
                ],
                "test_constructor_compound_dtypes": [
                    "self"
                ],
                "check_metadata": [
                    "self",
                    "x",
                    "y"
                ],
                "test_metadata_propagation": [
                    "self"
                ],
                "test_head_tail": [
                    "self",
                    "index"
                ],
                "test_sample": [
                    "self"
                ],
                "test_sample_upsampling_without_replacement": [
                    "self"
                ],
                "test_sample_is_copy": [
                    "self"
                ],
                "test_size_compat": [
                    "self"
                ],
                "test_split_compat": [
                    "self"
                ],
                "test_stat_unexpected_keyword": [
                    "self"
                ],
                "test_api_compat": [
                    "self",
                    "func"
                ],
                "test_stat_non_defaults_args": [
                    "self"
                ],
                "test_truncate_out_of_bounds": [
                    "self"
                ],
                "test_copy_and_deepcopy": [
                    "self",
                    "shape",
                    "func"
                ],
                "test_pct_change": [
                    "self",
                    "periods",
                    "fill_method",
                    "limit",
                    "exp"
                ]
            },
            "TestNDFrame": {
                "test_sample": [
                    "sel"
                ],
                "test_sample_random_state": [
                    "self",
                    "func_str",
                    "arg"
                ],
                "test_squeeze": [
                    "self"
                ],
                "test_numpy_squeeze": [
                    "self"
                ],
                "test_transpose": [
                    "self"
                ],
                "test_numpy_transpose": [
                    "self"
                ],
                "test_take": [
                    "self"
                ],
                "test_take_invalid_kwargs": [
                    "self"
                ],
                "test_depr_take_kwarg_is_copy": [
                    "self",
                    "is_copy"
                ],
                "test_equals": [
                    "self"
                ],
                "test_pipe": [
                    "self"
                ],
                "test_pipe_tuple": [
                    "self"
                ],
                "test_pipe_tuple_error": [
                    "self"
                ],
                "test_axis_classmethods": [
                    "self",
                    "box"
                ],
                "test_axis_names_deprecated": [
                    "self",
                    "box"
                ],
                "test_axis_numbers_deprecated": [
                    "self",
                    "box"
                ]
            }
        },
        "pandas.tests.generic.test_finalize": {
            "idfn": [
                "x"
            ],
            "ndframe_method": [
                "request"
            ],
            "test_finalize_called": [
                "ndframe_method"
            ],
            "test_binops": [
                "args",
                "annotate",
                "all_arithmetic_functions"
            ],
            "test_string_method": [
                "method"
            ],
            "test_datetime_method": [
                "method"
            ],
            "test_datetime_property": [
                "attr"
            ],
            "test_timedelta_property": [
                "attr"
            ],
            "test_timedelta_methods": [
                "method"
            ],
            "test_categorical_accessor": [
                "method"
            ],
            "test_groupby": [
                "obj",
                "method"
            ]
        },
        "pandas.tests.generic.test_series": {
            "TestSeries": {
                "test_rename_mi": [
                    "self"
                ],
                "test_set_axis_name_mi": [
                    "self",
                    "func"
                ],
                "test_set_axis_name_raises": [
                    "self"
                ],
                "test_get_numeric_data_preserve_dtype": [
                    "self"
                ],
                "test_nonzero_single_element": [
                    "self"
                ],
                "test_metadata_propagation_indiv": [
                    "self"
                ]
            },
            "TestSeries2": {
                "test_shift_always_copy": [
                    "self",
                    "s",
                    "shift_size"
                ],
                "test_datetime_shift_always_copy": [
                    "self",
                    "move_by_freq"
                ]
            }
        },
        "pandas.tests.generic.test_label_or_level_utils": {
            "df": [],
            "df_levels": [
                "request",
                "df"
            ],
            "df_ambig": [
                "df"
            ],
            "df_duplabels": [
                "df"
            ],
            "get_labels_levels": [
                "df_levels"
            ],
            "assert_label_reference": [
                "frame",
                "labels",
                "axis"
            ],
            "assert_level_reference": [
                "frame",
                "levels",
                "axis"
            ],
            "test_is_level_or_label_reference_df_simple": [
                "df_levels",
                "axis"
            ],
            "test_is_level_reference_df_ambig": [
                "df_ambig",
                "axis"
            ],
            "test_is_level_reference_series_simple_axis0": [
                "df"
            ],
            "test_is_level_reference_series_axis1_error": [
                "df"
            ],
            "test_check_label_or_level_ambiguity_df": [
                "df_ambig",
                "axis"
            ],
            "test_check_label_or_level_ambiguity_series": [
                "df"
            ],
            "test_check_label_or_level_ambiguity_series_axis1_error": [
                "df"
            ],
            "assert_label_values": [
                "frame",
                "labels",
                "axis"
            ],
            "assert_level_values": [
                "frame",
                "levels",
                "axis"
            ],
            "test_get_label_or_level_values_df_simple": [
                "df_levels",
                "axis"
            ],
            "test_get_label_or_level_values_df_ambig": [
                "df_ambig",
                "axis"
            ],
            "test_get_label_or_level_values_df_duplabels": [
                "df_duplabels",
                "axis"
            ],
            "test_get_label_or_level_values_series_axis0": [
                "df"
            ],
            "test_get_label_or_level_values_series_axis1_error": [
                "df"
            ],
            "assert_labels_dropped": [
                "frame",
                "labels",
                "axis"
            ],
            "assert_levels_dropped": [
                "frame",
                "levels",
                "axis"
            ],
            "test_drop_labels_or_levels_df": [
                "df_levels",
                "axis"
            ],
            "test_drop_labels_or_levels_series": [
                "df"
            ]
        },
        "pandas.tests.generic": {},
        "pandas.tests.generic.methods.test_set_axis": {
            "SharedSetAxisTests": {
                "obj": [
                    "self"
                ],
                "test_set_axis": [
                    "self",
                    "obj"
                ],
                "test_set_axis_inplace_axis": [
                    "self",
                    "axis",
                    "obj"
                ],
                "test_set_axis_unnamed_kwarg_warns": [
                    "self",
                    "obj"
                ],
                "test_set_axis_invalid_axis_name": [
                    "self",
                    "axis",
                    "obj"
                ]
            },
            "TestDataFrameSetAxis": {
                "obj": [
                    "self"
                ]
            },
            "TestSeriesSetAxis": {
                "obj": [
                    "self"
                ]
            }
        },
        "pandas.tests.generic.methods.test_reorder_levels": {
            "TestReorderLevels": {
                "test_reorder_levels": [
                    "self",
                    "klass"
                ],
                "test_reorder_levels_swaplevel_equivalence": [
                    "self",
                    "multiindex_year_month_day_dataframe_random_data"
                ]
            }
        },
        "pandas.tests.generic.methods.test_first_valid_index": {
            "TestFirstValidIndex": {
                "test_first_valid_index_single_nan": [
                    "self",
                    "klass"
                ],
                "test_first_valid_index_empty": [
                    "self",
                    "empty"
                ],
                "test_first_last_valid_frame": [
                    "self",
                    "data",
                    "idx",
                    "expected_first",
                    "expected_last"
                ],
                "test_first_last_valid": [
                    "self",
                    "index_func"
                ],
                "test_first_last_valid_all_nan": [
                    "self",
                    "index_func"
                ],
                "test_first_last_valid_preserves_freq": [
                    "self"
                ]
            }
        },
        "pandas.tests.generic.methods.test_dot": {
            "DotSharedTests": {
                "obj": [
                    "self"
                ],
                "other": [
                    "self"
                ],
                "expected": [
                    "self",
                    "obj",
                    "other"
                ],
                "reduced_dim_assert": [
                    "cls",
                    "result",
                    "expected"
                ],
                "test_dot_equiv_values_dot": [
                    "self",
                    "obj",
                    "other",
                    "expected"
                ],
                "test_dot_2d_ndarray": [
                    "self",
                    "obj",
                    "other",
                    "expected"
                ],
                "test_dot_1d_ndarray": [
                    "self",
                    "obj",
                    "expected"
                ],
                "test_dot_series": [
                    "self",
                    "obj",
                    "other",
                    "expected"
                ],
                "test_dot_series_alignment": [
                    "self",
                    "obj",
                    "other",
                    "expected"
                ],
                "test_dot_aligns": [
                    "self",
                    "obj",
                    "other",
                    "expected"
                ],
                "test_dot_shape_mismatch": [
                    "self",
                    "obj"
                ],
                "test_dot_misaligned": [
                    "self",
                    "obj",
                    "other"
                ]
            },
            "TestSeriesDot": {
                "obj": [
                    "self"
                ],
                "other": [
                    "self"
                ],
                "expected": [
                    "self",
                    "obj",
                    "other"
                ],
                "reduced_dim_assert": [
                    "cls",
                    "result",
                    "expected"
                ]
            },
            "TestDataFrameDot": {
                "obj": [
                    "self"
                ],
                "other": [
                    "self"
                ],
                "expected": [
                    "self",
                    "obj",
                    "other"
                ],
                "reduced_dim_assert": [
                    "cls",
                    "result",
                    "expected"
                ]
            }
        },
        "pandas.tests.generic.methods": {},
        "pandas.tests.io.test_spss": {
            "test_spss_labelled_num": [
                "datapath"
            ],
            "test_spss_labelled_num_na": [
                "datapath"
            ],
            "test_spss_labelled_str": [
                "datapath"
            ],
            "test_spss_umlauts": [
                "datapath"
            ],
            "test_spss_usecols": [
                "datapath"
            ]
        },
        "pandas.tests.io.test_clipboard": {
            "build_kwargs": [
                "sep",
                "excel"
            ],
            "df": [
                "request"
            ],
            "mock_clipboard": [
                "monkeypatch",
                "request"
            ],
            "test_mock_clipboard": [
                "mock_clipboard"
            ],
            "test_raw_roundtrip": [
                "data"
            ],
            "TestClipboard": {
                "check_round_trip_frame": [
                    "self",
                    "data",
                    "excel",
                    "sep",
                    "encoding"
                ],
                "test_round_trip_frame": [
                    "self",
                    "df"
                ],
                "test_round_trip_frame_sep": [
                    "self",
                    "df",
                    "sep"
                ],
                "test_round_trip_frame_string": [
                    "self",
                    "df"
                ],
                "test_excel_sep_warning": [
                    "self",
                    "df"
                ],
                "test_copy_delim_warning": [
                    "self",
                    "df"
                ],
                "test_clipboard_copy_tabs_default": [
                    "self",
                    "sep",
                    "excel",
                    "df",
                    "request",
                    "mock_clipboard"
                ],
                "test_clipboard_copy_strings": [
                    "self",
                    "sep",
                    "excel",
                    "df"
                ],
                "test_read_clipboard_infer_excel": [
                    "self",
                    "request",
                    "mock_clipboard"
                ],
                "test_invalid_encoding": [
                    "self",
                    "df"
                ],
                "test_round_trip_valid_encodings": [
                    "self",
                    "enc",
                    "df"
                ]
            }
        },
        "pandas.tests.io.test_gcs": {
            "test_read_csv_gcs": [
                "monkeypatch"
            ],
            "test_to_csv_gcs": [
                "monkeypatch"
            ],
            "test_to_parquet_gcs_new_file": [
                "monkeypatch",
                "tmpdir"
            ],
            "test_gcs_not_present_exception": []
        },
        "pandas.tests.io.test_sql": {
            "date_format": [
                "dt"
            ],
            "format_query": [
                "sql"
            ],
            "tquery": [
                "query",
                "con",
                "cur"
            ],
            "MixInBase": {
                "teardown_method": [
                    "self",
                    "method"
                ]
            },
            "MySQLMixIn": {
                "drop_table": [
                    "self",
                    "table_name"
                ],
                "_get_all_tables": [
                    "self"
                ],
                "_close_conn": [
                    "self"
                ]
            },
            "SQLiteMixIn": {
                "drop_table": [
                    "self",
                    "table_name"
                ],
                "_get_all_tables": [
                    "self"
                ],
                "_close_conn": [
                    "self"
                ]
            },
            "SQLAlchemyMixIn": {
                "drop_table": [
                    "self",
                    "table_name"
                ],
                "_get_all_tables": [
                    "self"
                ],
                "_close_conn": [
                    "self"
                ]
            },
            "PandasSQLTest": {
                "_get_exec": [
                    "self"
                ],
                "load_iris_data": [
                    "self",
                    "datapath",
                    "request"
                ],
                "_load_iris_view": [
                    "self"
                ],
                "_check_iris_loaded_frame": [
                    "self",
                    "iris_frame"
                ],
                "_load_test1_data": [
                    "self"
                ],
                "_load_test2_data": [
                    "self"
                ],
                "_load_test3_data": [
                    "self"
                ],
                "_load_raw_sql": [
                    "self"
                ],
                "_count_rows": [
                    "self",
                    "table_name"
                ],
                "_read_sql_iris": [
                    "self"
                ],
                "_read_sql_iris_parameter": [
                    "self"
                ],
                "_read_sql_iris_named_parameter": [
                    "self"
                ],
                "_read_sql_iris_no_parameter_with_percent": [
                    "self"
                ],
                "_to_sql": [
                    "self",
                    "method"
                ],
                "_to_sql_empty": [
                    "self"
                ],
                "_to_sql_fail": [
                    "self"
                ],
                "_to_sql_replace": [
                    "self"
                ],
                "_to_sql_append": [
                    "self"
                ],
                "_to_sql_method_callable": [
                    "self"
                ],
                "_roundtrip": [
                    "self"
                ],
                "_execute_sql": [
                    "self"
                ],
                "_to_sql_save_index": [
                    "self"
                ],
                "_transaction_test": [
                    "self"
                ]
            },
            "_TestSQLApi": {
                "setup_connect": [
                    "self"
                ],
                "setup_method": [
                    "self",
                    "load_iris_data"
                ],
                "load_test_data_and_sql": [
                    "self"
                ],
                "test_read_sql_iris": [
                    "self"
                ],
                "test_read_sql_view": [
                    "self"
                ],
                "test_to_sql": [
                    "self"
                ],
                "test_to_sql_fail": [
                    "self"
                ],
                "test_to_sql_replace": [
                    "self"
                ],
                "test_to_sql_append": [
                    "self"
                ],
                "test_to_sql_type_mapping": [
                    "self"
                ],
                "test_to_sql_series": [
                    "self"
                ],
                "test_roundtrip": [
                    "self"
                ],
                "test_roundtrip_chunksize": [
                    "self"
                ],
                "test_execute_sql": [
                    "self"
                ],
                "test_date_parsing": [
                    "self"
                ],
                "test_date_and_index": [
                    "self"
                ],
                "test_timedelta": [
                    "self"
                ],
                "test_complex_raises": [
                    "self"
                ],
                "test_to_sql_index_label": [
                    "self",
                    "index_name",
                    "index_label",
                    "expected"
                ],
                "test_to_sql_index_label_multiindex": [
                    "self"
                ],
                "test_multiindex_roundtrip": [
                    "self"
                ],
                "test_integer_col_names": [
                    "self"
                ],
                "test_get_schema": [
                    "self"
                ],
                "test_get_schema_dtypes": [
                    "self"
                ],
                "test_get_schema_keys": [
                    "self"
                ],
                "test_chunksize_read": [
                    "self"
                ],
                "test_categorical": [
                    "self"
                ],
                "test_unicode_column_name": [
                    "self"
                ],
                "test_escaped_table_name": [
                    "self"
                ]
            },
            "TestSQLApi": {
                "connect": [
                    "self"
                ],
                "test_read_table_columns": [
                    "self"
                ],
                "test_read_table_index_col": [
                    "self"
                ],
                "test_read_sql_delegate": [
                    "self"
                ],
                "test_not_reflect_all_tables": [
                    "self"
                ],
                "test_warning_case_insensitive_table_name": [
                    "self"
                ],
                "_get_index_columns": [
                    "self",
                    "tbl_name"
                ],
                "test_sqlalchemy_type_mapping": [
                    "self"
                ],
                "test_database_uri_string": [
                    "self"
                ],
                "_make_iris_table_metadata": [
                    "self"
                ],
                "test_query_by_text_obj": [
                    "self"
                ],
                "test_query_by_select_obj": [
                    "self"
                ]
            },
            "_EngineToConnMixin": {
                "setup_method": [
                    "self",
                    "load_iris_data"
                ]
            },
            "TestSQLApiConn": {},
            "TestSQLiteFallbackApi": {
                "connect": [
                    "self",
                    "database"
                ],
                "test_sql_open_close": [
                    "self"
                ],
                "test_con_string_import_error": [
                    "self"
                ],
                "test_read_sql_delegate": [
                    "self"
                ],
                "test_safe_names_warning": [
                    "self"
                ],
                "test_get_schema2": [
                    "self"
                ],
                "_get_sqlite_column_type": [
                    "self",
                    "schema",
                    "column"
                ],
                "test_sqlite_type_mapping": [
                    "self"
                ]
            },
            "_TestSQLAlchemy": {
                "setup_class": [
                    "cls"
                ],
                "load_test_data_and_sql": [
                    "self"
                ],
                "setup_method": [
                    "self",
                    "load_iris_data"
                ],
                "setup_import": [
                    "cls"
                ],
                "setup_driver": [
                    "cls"
                ],
                "connect": [
                    "cls"
                ],
                "setup_connect": [
                    "self"
                ],
                "test_read_sql": [
                    "self"
                ],
                "test_read_sql_parameter": [
                    "self"
                ],
                "test_read_sql_named_parameter": [
                    "self"
                ],
                "test_to_sql": [
                    "self"
                ],
                "test_to_sql_empty": [
                    "self"
                ],
                "test_to_sql_fail": [
                    "self"
                ],
                "test_to_sql_replace": [
                    "self"
                ],
                "test_to_sql_append": [
                    "self"
                ],
                "test_to_sql_method_multi": [
                    "self"
                ],
                "test_to_sql_method_callable": [
                    "self"
                ],
                "test_create_table": [
                    "self"
                ],
                "test_drop_table": [
                    "self"
                ],
                "test_roundtrip": [
                    "self"
                ],
                "test_execute_sql": [
                    "self"
                ],
                "test_read_table": [
                    "self"
                ],
                "test_read_table_columns": [
                    "self"
                ],
                "test_read_table_absent_raises": [
                    "self"
                ],
                "test_default_type_conversion": [
                    "self"
                ],
                "test_bigint": [
                    "self"
                ],
                "test_default_date_load": [
                    "self"
                ],
                "test_datetime_with_timezone": [
                    "self"
                ],
                "test_datetime_with_timezone_roundtrip": [
                    "self"
                ],
                "test_out_of_bounds_datetime": [
                    "self"
                ],
                "test_naive_datetimeindex_roundtrip": [
                    "self"
                ],
                "test_date_parsing": [
                    "self"
                ],
                "test_datetime": [
                    "self"
                ],
                "test_datetime_NaT": [
                    "self"
                ],
                "test_datetime_date": [
                    "self"
                ],
                "test_datetime_time": [
                    "self"
                ],
                "test_mixed_dtype_insert": [
                    "self"
                ],
                "test_nan_numeric": [
                    "self"
                ],
                "test_nan_fullcolumn": [
                    "self"
                ],
                "test_nan_string": [
                    "self"
                ],
                "_get_index_columns": [
                    "self",
                    "tbl_name"
                ],
                "test_to_sql_save_index": [
                    "self"
                ],
                "test_transactions": [
                    "self"
                ],
                "test_get_schema_create_table": [
                    "self"
                ],
                "test_dtype": [
                    "self"
                ],
                "test_notna_dtype": [
                    "self"
                ],
                "test_double_precision": [
                    "self"
                ],
                "test_connectable_issue_example": [
                    "self"
                ],
                "test_to_sql_with_negative_npinf": [
                    "self",
                    "input"
                ],
                "test_temporary_table": [
                    "self"
                ]
            },
            "_TestSQLAlchemyConn": {
                "test_transactions": [
                    "self"
                ]
            },
            "_TestSQLiteAlchemy": {
                "connect": [
                    "cls"
                ],
                "setup_driver": [
                    "cls"
                ],
                "test_default_type_conversion": [
                    "self"
                ],
                "test_default_date_load": [
                    "self"
                ],
                "test_bigint_warning": [
                    "self"
                ]
            },
            "_TestMySQLAlchemy": {
                "connect": [
                    "cls"
                ],
                "setup_driver": [
                    "cls"
                ],
                "test_default_type_conversion": [
                    "self"
                ],
                "test_read_procedure": [
                    "self"
                ]
            },
            "_TestPostgreSQLAlchemy": {
                "connect": [
                    "cls"
                ],
                "setup_driver": [
                    "cls"
                ],
                "test_schema_support": [
                    "self"
                ],
                "test_copy_from_callable_insertion_method": [
                    "self"
                ]
            },
            "TestMySQLAlchemy": {},
            "TestMySQLAlchemyConn": {},
            "TestPostgreSQLAlchemy": {},
            "TestPostgreSQLAlchemyConn": {},
            "TestSQLiteAlchemy": {},
            "TestSQLiteAlchemyConn": {},
            "TestSQLiteFallback": {
                "connect": [
                    "cls"
                ],
                "setup_connect": [
                    "self"
                ],
                "load_test_data_and_sql": [
                    "self"
                ],
                "setup_method": [
                    "self",
                    "load_iris_data"
                ],
                "test_read_sql": [
                    "self"
                ],
                "test_read_sql_parameter": [
                    "self"
                ],
                "test_read_sql_named_parameter": [
                    "self"
                ],
                "test_to_sql": [
                    "self"
                ],
                "test_to_sql_empty": [
                    "self"
                ],
                "test_to_sql_fail": [
                    "self"
                ],
                "test_to_sql_replace": [
                    "self"
                ],
                "test_to_sql_append": [
                    "self"
                ],
                "test_to_sql_method_multi": [
                    "self"
                ],
                "test_create_and_drop_table": [
                    "self"
                ],
                "test_roundtrip": [
                    "self"
                ],
                "test_execute_sql": [
                    "self"
                ],
                "test_datetime_date": [
                    "self"
                ],
                "test_datetime_time": [
                    "self"
                ],
                "_get_index_columns": [
                    "self",
                    "tbl_name"
                ],
                "test_to_sql_save_index": [
                    "self"
                ],
                "test_transactions": [
                    "self"
                ],
                "_get_sqlite_column_type": [
                    "self",
                    "table",
                    "column"
                ],
                "test_dtype": [
                    "self"
                ],
                "test_notna_dtype": [
                    "self"
                ],
                "test_illegal_names": [
                    "self"
                ]
            },
            "TestXSQLite": {
                "setup_method": [
                    "self",
                    "request",
                    "datapath"
                ],
                "test_basic": [
                    "self"
                ],
                "test_write_row_by_row": [
                    "self"
                ],
                "test_execute": [
                    "self"
                ],
                "test_schema": [
                    "self"
                ],
                "test_execute_fail": [
                    "self"
                ],
                "test_execute_closed_connection": [
                    "self"
                ],
                "test_na_roundtrip": [
                    "self"
                ],
                "_check_roundtrip": [
                    "self",
                    "frame"
                ],
                "test_keyword_as_column_names": [
                    "self"
                ],
                "test_onecolumn_of_integer": [
                    "self"
                ],
                "test_if_exists": [
                    "self"
                ]
            },
            "TestXMySQL": {
                "setup_class": [
                    "cls"
                ],
                "setup_method": [
                    "self",
                    "request",
                    "datapath"
                ],
                "test_basic": [
                    "self"
                ],
                "test_write_row_by_row": [
                    "self"
                ],
                "test_chunksize_read_type": [
                    "self"
                ],
                "test_execute": [
                    "self"
                ],
                "test_schema": [
                    "self"
                ],
                "test_execute_fail": [
                    "self"
                ],
                "test_execute_closed_connection": [
                    "self",
                    "request",
                    "datapath"
                ],
                "test_na_roundtrip": [
                    "self"
                ],
                "_check_roundtrip": [
                    "self",
                    "frame"
                ],
                "test_keyword_as_column_names": [
                    "self"
                ],
                "test_if_exists": [
                    "self"
                ]
            }
        },
        "pandas.tests.io.test_date_converters": {
            "test_parse_date_time": [],
            "test_parse_date_fields": [],
            "test_parse_all_fields": []
        },
        "pandas.tests.io.test_s3": {
            "test_streaming_s3_objects": [],
            "test_read_without_creds_from_pub_bucket": [],
            "test_read_with_creds_from_pub_bucke": []
        },
        "pandas.tests.io.test_stata": {
            "mixed_frame": [],
            "dirpath": [
                "datapath"
            ],
            "parsed_114": [
                "dirpath"
            ],
            "test_backward_compat": [
                "version",
                "datapath"
            ],
            "test_compression": [
                "compression",
                "version",
                "use_dict",
                "infer"
            ],
            "test_compression_dict": [
                "method",
                "file_ext"
            ],
            "test_chunked_categorical": [
                "version"
            ],
            "test_chunked_categorical_partial": [
                "dirpath"
            ],
            "test_iterator_errors": [
                "dirpath"
            ],
            "test_iterator_value_labels": [],
            "TestStata": {
                "setup_method": [
                    "self",
                    "datapath"
                ],
                "read_dta": [
                    "self",
                    "file"
                ],
                "read_csv": [
                    "self",
                    "file"
                ],
                "test_read_empty_dta": [
                    "self",
                    "version"
                ],
                "test_read_dta1": [
                    "self",
                    "file"
                ],
                "test_read_dta2": [
                    "self"
                ],
                "test_read_dta3": [
                    "self",
                    "file"
                ],
                "test_read_dta4": [
                    "self",
                    "file"
                ],
                "test_read_dta12": [
                    "self"
                ],
                "test_read_dta18": [
                    "self"
                ],
                "test_read_write_dta5": [
                    "self"
                ],
                "test_write_dta6": [
                    "self"
                ],
                "test_read_write_dta10": [
                    "self",
                    "version"
                ],
                "test_stata_doc_examples": [
                    "self"
                ],
                "test_write_preserves_original": [
                    "self"
                ],
                "test_encoding": [
                    "self",
                    "version"
                ],
                "test_read_write_dta11": [
                    "self"
                ],
                "test_read_write_dta12": [
                    "self",
                    "version"
                ],
                "test_read_write_dta13": [
                    "self"
                ],
                "test_read_write_reread_dta14": [
                    "self",
                    "file",
                    "parsed_114",
                    "version"
                ],
                "test_read_write_reread_dta15": [
                    "self",
                    "file"
                ],
                "test_timestamp_and_label": [
                    "self",
                    "version"
                ],
                "test_invalid_timestamp": [
                    "self",
                    "version"
                ],
                "test_numeric_column_names": [
                    "self"
                ],
                "test_nan_to_missing_value": [
                    "self",
                    "version"
                ],
                "test_no_index": [
                    "self"
                ],
                "test_string_no_dates": [
                    "self"
                ],
                "test_large_value_conversion": [
                    "self"
                ],
                "test_dates_invalid_column": [
                    "self"
                ],
                "test_105": [
                    "self"
                ],
                "test_value_labels_old_format": [
                    "self"
                ],
                "test_date_export_formats": [
                    "self"
                ],
                "test_write_missing_strings": [
                    "self"
                ],
                "test_bool_uint": [
                    "self",
                    "byteorder",
                    "version"
                ],
                "test_variable_labels": [
                    "self"
                ],
                "test_minimal_size_col": [
                    "self"
                ],
                "test_excessively_long_string": [
                    "self"
                ],
                "test_missing_value_generator": [
                    "self"
                ],
                "test_missing_value_conversion": [
                    "self",
                    "file"
                ],
                "test_big_dates": [
                    "self"
                ],
                "test_dtype_conversion": [
                    "self"
                ],
                "test_drop_column": [
                    "self"
                ],
                "test_categorical_writing": [
                    "self",
                    "version"
                ],
                "test_categorical_warnings_and_errors": [
                    "self"
                ],
                "test_categorical_with_stata_missing_values": [
                    "self",
                    "version"
                ],
                "test_categorical_order": [
                    "self",
                    "file"
                ],
                "test_categorical_sorting": [
                    "self",
                    "file"
                ],
                "test_categorical_ordering": [
                    "self",
                    "file"
                ],
                "test_read_chunks_117": [
                    "self",
                    "file",
                    "chunksize",
                    "convert_categoricals",
                    "convert_dates"
                ],
                "_convert_categorical": [
                    "from_frame"
                ],
                "test_iterator": [
                    "self"
                ],
                "test_read_chunks_115": [
                    "self",
                    "file",
                    "chunksize",
                    "convert_categoricals",
                    "convert_dates"
                ],
                "test_read_chunks_columns": [
                    "self"
                ],
                "test_write_variable_labels": [
                    "self",
                    "version",
                    "mixed_frame"
                ],
                "test_invalid_variable_labels": [
                    "self",
                    "version",
                    "mixed_frame"
                ],
                "test_invalid_variable_label_encoding": [
                    "self",
                    "version",
                    "mixed_frame"
                ],
                "test_write_variable_label_errors": [
                    "self",
                    "mixed_frame"
                ],
                "test_default_date_conversion": [
                    "self"
                ],
                "test_unsupported_type": [
                    "self"
                ],
                "test_unsupported_datetype": [
                    "self"
                ],
                "test_repeated_column_labels": [
                    "self"
                ],
                "test_stata_111": [
                    "self"
                ],
                "test_out_of_range_double": [
                    "self"
                ],
                "test_out_of_range_float": [
                    "self"
                ],
                "test_path_pathlib": [
                    "self"
                ],
                "test_pickle_path_localpath": [
                    "self"
                ],
                "test_value_labels_iterator": [
                    "self",
                    "write_index"
                ],
                "test_set_index": [
                    "self"
                ],
                "test_date_parsing_ignores_format_details": [
                    "self",
                    "column"
                ],
                "test_writer_117": [
                    "self"
                ],
                "test_convert_strl_name_swap": [
                    "self"
                ],
                "test_invalid_date_conversion": [
                    "self"
                ],
                "test_nonfile_writing": [
                    "self",
                    "version"
                ],
                "test_gzip_writing": [
                    "self"
                ],
                "test_unicode_dta_118": [
                    "self"
                ],
                "test_mixed_string_strl": [
                    "self"
                ],
                "test_all_none_exception": [
                    "self",
                    "version"
                ],
                "test_invalid_file_not_written": [
                    "self",
                    "version"
                ],
                "test_strl_latin1": [
                    "self"
                ],
                "test_encoding_latin1_118": [
                    "self"
                ],
                "test_stata_119": [
                    "self"
                ],
                "test_utf8_writer": [
                    "self",
                    "version"
                ],
                "test_writer_118_exceptions": [
                    "self"
                ]
            }
        },
        "pandas.tests.io.test_feather": {
            "TestFeather": {
                "check_error_on_write": [
                    "self",
                    "df",
                    "exc"
                ],
                "check_round_trip": [
                    "self",
                    "df",
                    "expected",
                    "write_kwargs"
                ],
                "test_error": [
                    "self"
                ],
                "test_basic": [
                    "self"
                ],
                "test_duplicate_columns": [
                    "self"
                ],
                "test_stringify_columns": [
                    "self"
                ],
                "test_read_columns": [
                    "self"
                ],
                "read_columns_different_order": [
                    "self"
                ],
                "test_unsupported_other": [
                    "self"
                ],
                "test_rw_use_threads": [
                    "self"
                ],
                "test_write_with_index": [
                    "self"
                ],
                "test_path_pathlib": [
                    "self"
                ],
                "test_path_localpath": [
                    "self"
                ],
                "test_passthrough_keywords": [
                    "self"
                ],
                "test_http_path": [
                    "self",
                    "feather_file"
                ]
            }
        },
        "pandas.tests.io.test_orc": {
            "dirpath": [
                "datapath"
            ],
            "test_orc_reader_empty": [
                "dirpath"
            ],
            "test_orc_reader_basic": [
                "dirpath"
            ],
            "test_orc_reader_decimal": [
                "dirpath"
            ],
            "test_orc_reader_date_low": [
                "dirpath"
            ],
            "test_orc_reader_date_high": [
                "dirpath"
            ],
            "test_orc_reader_snappy_compressed": [
                "dirpath"
            ]
        },
        "pandas.tests.io.test_parquet": {
            "engine": [
                "request"
            ],
            "pa": [],
            "fp": [],
            "df_compat": [],
            "df_cross_compat": [],
            "df_full": [],
            "check_round_trip": [
                "df",
                "engine",
                "path",
                "write_kwargs",
                "read_kwargs",
                "expected",
                "check_names",
                "check_like",
                "repeat"
            ],
            "test_invalid_engine": [
                "df_compat"
            ],
            "test_options_py": [
                "df_compat",
                "pa"
            ],
            "test_options_fp": [
                "df_compat",
                "fp"
            ],
            "test_options_auto": [
                "df_compat",
                "fp",
                "pa"
            ],
            "test_options_get_engine": [
                "fp",
                "pa"
            ],
            "test_get_engine_auto_error_message": [],
            "test_cross_engine_pa_fp": [
                "df_cross_compat",
                "pa",
                "fp"
            ],
            "test_cross_engine_fp_pa": [
                "df_cross_compat",
                "pa",
                "fp"
            ],
            "Base": {
                "check_error_on_write": [
                    "self",
                    "df",
                    "engine",
                    "exc"
                ]
            },
            "TestBasic": {
                "test_error": [
                    "self",
                    "engine"
                ],
                "test_columns_dtypes": [
                    "self",
                    "engine"
                ],
                "test_columns_dtypes_invalid": [
                    "self",
                    "engine"
                ],
                "test_compression": [
                    "self",
                    "engine",
                    "compression"
                ],
                "test_read_columns": [
                    "self",
                    "engine"
                ],
                "test_write_index": [
                    "self",
                    "engine"
                ],
                "test_write_multiindex": [
                    "self",
                    "pa"
                ],
                "test_write_column_multiindex": [
                    "self",
                    "engine"
                ],
                "test_multiindex_with_columns": [
                    "self",
                    "pa"
                ],
                "test_write_ignoring_index": [
                    "self",
                    "engine"
                ]
            },
            "TestParquetPyArrow": {
                "test_basic": [
                    "self",
                    "pa",
                    "df_full"
                ],
                "test_basic_subset_columns": [
                    "self",
                    "pa",
                    "df_full"
                ],
                "test_duplicate_columns": [
                    "self",
                    "pa"
                ],
                "test_unsupported": [
                    "self",
                    "pa"
                ],
                "test_categorical": [
                    "self",
                    "pa"
                ],
                "test_s3_roundtrip_explicit_fs": [
                    "self",
                    "df_compat",
                    "s3_resource",
                    "pa"
                ],
                "test_s3_roundtrip": [
                    "self",
                    "df_compat",
                    "s3_resource",
                    "pa"
                ],
                "test_s3_roundtrip_for_dir": [
                    "self",
                    "df_compat",
                    "s3_resource",
                    "pa",
                    "partition_col"
                ],
                "test_parquet_read_from_url": [
                    "self",
                    "df_compat"
                ],
                "test_read_file_like_obj_support": [
                    "self",
                    "df_compat"
                ],
                "test_expand_user": [
                    "self",
                    "df_compat",
                    "monkeypatch"
                ],
                "test_partition_cols_supported": [
                    "self",
                    "pa",
                    "df_full"
                ],
                "test_partition_cols_string": [
                    "self",
                    "pa",
                    "df_full"
                ],
                "test_empty_dataframe": [
                    "self",
                    "pa"
                ],
                "test_write_with_schema": [
                    "self",
                    "pa"
                ],
                "test_additional_extension_arrays": [
                    "self",
                    "pa"
                ],
                "test_additional_extension_types": [
                    "self",
                    "pa"
                ],
                "test_timestamp_nanoseconds": [
                    "self",
                    "pa"
                ],
                "test_filter_row_groups": [
                    "self",
                    "pa"
                ]
            },
            "TestParquetFastParquet": {
                "test_basic": [
                    "self",
                    "fp",
                    "df_full"
                ],
                "test_duplicate_columns": [
                    "self",
                    "fp"
                ],
                "test_bool_with_none": [
                    "self",
                    "fp"
                ],
                "test_unsupported": [
                    "self",
                    "fp"
                ],
                "test_categorical": [
                    "self",
                    "fp"
                ],
                "test_filter_row_groups": [
                    "self",
                    "fp"
                ],
                "test_s3_roundtrip": [
                    "self",
                    "df_compat",
                    "s3_resource",
                    "fp"
                ],
                "test_partition_cols_supported": [
                    "self",
                    "fp",
                    "df_full"
                ],
                "test_partition_cols_string": [
                    "self",
                    "fp",
                    "df_full"
                ],
                "test_partition_on_supported": [
                    "self",
                    "fp",
                    "df_full"
                ],
                "test_error_on_using_partition_cols_and_partition_on": [
                    "self",
                    "fp",
                    "df_full"
                ],
                "test_empty_dataframe": [
                    "self",
                    "fp"
                ]
            }
        },
        "pandas.tests.io.test_gbq": {
            "_skip_if_no_project_id": [],
            "_skip_if_no_private_key_path": [],
            "_in_travis_environment": [],
            "_get_project_id": [],
            "_get_private_key_path": [],
            "_get_credentials": [],
            "_get_client": [],
            "generate_rand_str": [
                "length"
            ],
            "make_mixed_dataframe_v2": [
                "test_size"
            ],
            "test_read_gbq_without_deprecated_kwargs": [
                "monkeypatch"
            ],
            "test_read_gbq_with_new_kwargs": [
                "monkeypatch"
            ],
            "test_read_gbq_without_new_kwargs": [
                "monkeypatch"
            ],
            "test_read_gbq_progress_bar_type_kwarg": [
                "monkeypatch",
                "progress_bar"
            ],
            "TestToGBQIntegrationWithServiceAccountKeyPath": {
                "gbq_dataset": [
                    "self"
                ],
                "test_roundtrip": [
                    "self",
                    "gbq_dataset"
                ],
                "test_gbq_if_exists": [
                    "self",
                    "if_exists",
                    "expected_num_rows",
                    "expectation",
                    "gbq_dataset"
                ]
            }
        },
        "pandas.tests.io.test_common": {
            "mmap_file": [
                "datapath"
            ],
            "test_is_fsspec_url": [],
            "CustomFSPath": {
                "__init__": [
                    "self",
                    "path"
                ],
                "__fspath__": [
                    "self"
                ]
            },
            "TestCommonIOCapabilities": {
                "test_expand_user": [
                    "self"
                ],
                "test_expand_user_normal_path": [
                    "self"
                ],
                "test_stringify_path_pathlib": [
                    "self"
                ],
                "test_stringify_path_localpath": [
                    "self"
                ],
                "test_stringify_path_fspath": [
                    "self"
                ],
                "test_infer_compression_from_path": [
                    "self",
                    "extension",
                    "expected",
                    "path_type"
                ],
                "test_get_filepath_or_buffer_with_path": [
                    "self"
                ],
                "test_get_filepath_or_buffer_with_buffer": [
                    "self"
                ],
                "test_iterator": [
                    "self"
                ],
                "test_read_non_existent": [
                    "self",
                    "reader",
                    "module",
                    "error_class",
                    "fn_ext"
                ],
                "test_read_expands_user_home_dir": [
                    "self",
                    "reader",
                    "module",
                    "error_class",
                    "fn_ext",
                    "monkeypatch"
                ],
                "test_read_fspath_all": [
                    "self",
                    "reader",
                    "module",
                    "path",
                    "datapath"
                ],
                "test_write_fspath_all": [
                    "self",
                    "writer_name",
                    "writer_kwargs",
                    "module"
                ],
                "test_write_fspath_hdf5": [
                    "self"
                ]
            },
            "TestMMapWrapper": {
                "test_constructor_bad_file": [
                    "self",
                    "mmap_file"
                ],
                "test_get_attr": [
                    "self",
                    "mmap_file"
                ],
                "test_next": [
                    "self",
                    "mmap_file"
                ],
                "test_unknown_engine": [
                    "self"
                ]
            }
        },
        "pandas.tests.io.generate_legacy_storage_files": {
            "_create_sp_series": [],
            "_create_sp_tsseries": [],
            "_create_sp_frame": [],
            "create_data": [],
            "create_pickle_data": [],
            "platform_name": [],
            "write_legacy_pickles": [
                "output_dir"
            ],
            "write_legacy_file": []
        },
        "pandas.tests.io.test_fsspec": {
            "cleared_fs": [],
            "test_read_csv": [
                "cleared_fs"
            ],
            "test_reasonable_error": [
                "monkeypatch",
                "cleared_fs"
            ],
            "test_to_csv": [
                "cleared_fs"
            ],
            "test_to_parquet_new_file": [
                "monkeypatch",
                "cleared_fs"
            ],
            "test_from_s3_csv": [
                "s3_resource",
                "tips_file"
            ],
            "test_s3_protocols": [
                "s3_resource",
                "tips_file",
                "protocol"
            ],
            "test_s3_parquet": [
                "s3_resource"
            ],
            "test_not_present_exception": []
        },
        "pandas.tests.io.conftest": {
            "tips_file": [
                "datapath"
            ],
            "jsonl_file": [
                "datapath"
            ],
            "salaries_table": [
                "datapath"
            ],
            "feather_file": [
                "datapath"
            ],
            "s3_resource": [
                "tips_file",
                "jsonl_file",
                "feather_file"
            ]
        },
        "pandas.tests.io.test_pickle": {
            "current_pickle_data": [],
            "compare_element": [
                "result",
                "expected",
                "typ",
                "version"
            ],
            "compare": [
                "data",
                "vf",
                "version"
            ],
            "compare_series_ts": [
                "result",
                "expected",
                "typ",
                "version"
            ],
            "compare_series_dt_tz": [
                "result",
                "expected",
                "typ",
                "version"
            ],
            "compare_series_cat": [
                "result",
                "expected",
                "typ",
                "version"
            ],
            "compare_frame_dt_mixed_tzs": [
                "result",
                "expected",
                "typ",
                "version"
            ],
            "compare_frame_cat_onecol": [
                "result",
                "expected",
                "typ",
                "version"
            ],
            "compare_frame_cat_and_float": [
                "result",
                "expected",
                "typ",
                "version"
            ],
            "compare_index_period": [
                "result",
                "expected",
                "typ",
                "version"
            ],
            "legacy_pickle": [
                "request",
                "datapath"
            ],
            "test_pickles": [
                "current_pickle_data",
                "legacy_pickle"
            ],
            "test_round_trip_current": [
                "current_pickle_data"
            ],
            "test_pickle_path_pathlib": [],
            "test_pickle_path_localpath": [],
            "test_legacy_sparse_warning": [
                "datapath"
            ],
            "get_random_path": [],
            "test_unicode_decode_error": [
                "datapath",
                "pickle_file",
                "excols"
            ],
            "test_pickle_buffer_roundtrip": [],
            "test_pickle_generalurl_read": [
                "monkeypatch",
                "mockurl"
            ],
            "test_pickle_fsspec_roundtrip": [],
            "test_read_pickle_with_subclass": [],
            "TestCompression": {
                "compress_file": [
                    "self",
                    "src_path",
                    "dest_path",
                    "compression"
                ],
                "test_write_explicit": [
                    "self",
                    "compression",
                    "get_random_path"
                ],
                "test_write_explicit_bad": [
                    "self",
                    "compression",
                    "get_random_path"
                ],
                "test_write_infer": [
                    "self",
                    "ext",
                    "get_random_path"
                ],
                "test_read_explicit": [
                    "self",
                    "compression",
                    "get_random_path"
                ],
                "test_read_infer": [
                    "self",
                    "ext",
                    "get_random_path"
                ]
            },
            "TestProtocol": {
                "test_read": [
                    "self",
                    "protocol",
                    "get_random_path"
                ]
            },
            "MyTz": {
                "__init__": [
                    "self"
                ]
            }
        },
        "pandas.tests.io": {},
        "pandas.tests.io.test_compression": {
            "test_compression_size": [
                "obj",
                "method",
                "compression_only"
            ],
            "test_compression_size_fh": [
                "obj",
                "method",
                "compression_only"
            ],
            "test_dataframe_compression_defaults_to_infer": [
                "write_method",
                "write_kwargs",
                "read_method",
                "compression_only"
            ],
            "test_series_compression_defaults_to_infer": [
                "write_method",
                "write_kwargs",
                "read_method",
                "read_kwargs",
                "compression_only"
            ],
            "test_compression_warning": [
                "compression_only"
            ],
            "test_with_missing_lzma": [],
            "test_with_missing_lzma_runtime": [],
            "test_gzip_compression_level": [
                "obj",
                "method"
            ],
            "test_bzip_compression_level": [
                "obj",
                "method"
            ]
        },
        "pandas.tests.io.test_html": {
            "html_encoding_file": [
                "request",
                "datapath"
            ],
            "assert_framelist_equal": [
                "list1",
                "list2"
            ],
            "test_bs4_version_fails": [
                "monkeypatch",
                "datapath"
            ],
            "test_invalid_flavor": [],
            "test_same_ordering": [
                "datapath"
            ],
            "TestReadHtml": {
                "set_files": [
                    "self",
                    "datapath"
                ],
                "set_defaults": [
                    "self",
                    "flavor",
                    "request"
                ],
                "test_to_html_compat": [
                    "self"
                ],
                "test_banklist_url_positional_match": [
                    "self"
                ],
                "test_banklist_url": [
                    "self"
                ],
                "test_spam_url": [
                    "self"
                ],
                "test_banklist": [
                    "self"
                ],
                "test_spam": [
                    "self"
                ],
                "test_spam_no_match": [
                    "self"
                ],
                "test_banklist_no_match": [
                    "self"
                ],
                "test_spam_header": [
                    "self"
                ],
                "test_skiprows_int": [
                    "self"
                ],
                "test_skiprows_range": [
                    "self"
                ],
                "test_skiprows_list": [
                    "self"
                ],
                "test_skiprows_set": [
                    "self"
                ],
                "test_skiprows_slice": [
                    "self"
                ],
                "test_skiprows_slice_short": [
                    "self"
                ],
                "test_skiprows_slice_long": [
                    "self"
                ],
                "test_skiprows_ndarray": [
                    "self"
                ],
                "test_skiprows_invalid": [
                    "self"
                ],
                "test_index": [
                    "self"
                ],
                "test_header_and_index_no_types": [
                    "self"
                ],
                "test_header_and_index_with_types": [
                    "self"
                ],
                "test_infer_types": [
                    "self"
                ],
                "test_string_io": [
                    "self"
                ],
                "test_string": [
                    "self"
                ],
                "test_file_like": [
                    "self"
                ],
                "test_bad_url_protocol": [
                    "self"
                ],
                "test_invalid_url": [
                    "self"
                ],
                "test_file_url": [
                    "self"
                ],
                "test_invalid_table_attrs": [
                    "self"
                ],
                "_bank_data": [
                    "self"
                ],
                "test_multiindex_header": [
                    "self"
                ],
                "test_multiindex_index": [
                    "self"
                ],
                "test_multiindex_header_index": [
                    "self"
                ],
                "test_multiindex_header_skiprows_tuples": [
                    "self"
                ],
                "test_multiindex_header_skiprows": [
                    "self"
                ],
                "test_multiindex_header_index_skiprows": [
                    "self"
                ],
                "test_regex_idempotency": [
                    "self"
                ],
                "test_negative_skiprows": [
                    "self"
                ],
                "test_multiple_matches": [
                    "self"
                ],
                "test_python_docs_table": [
                    "self"
                ],
                "test_empty_tables": [
                    "self"
                ],
                "test_multiple_tbody": [
                    "self"
                ],
                "test_header_and_one_column": [
                    "self"
                ],
                "test_thead_without_tr": [
                    "self"
                ],
                "test_tfoot_read": [
                    "self"
                ],
                "test_parse_header_of_non_string_column": [
                    "self"
                ],
                "test_banklist_header": [
                    "self",
                    "datapath"
                ],
                "test_gold_canyon": [
                    "self"
                ],
                "test_different_number_of_cols": [
                    "self"
                ],
                "test_colspan_rowspan_1": [
                    "self"
                ],
                "test_colspan_rowspan_copy_values": [
                    "self"
                ],
                "test_colspan_rowspan_both_not_1": [
                    "self"
                ],
                "test_rowspan_at_end_of_row": [
                    "self"
                ],
                "test_rowspan_only_rows": [
                    "self"
                ],
                "test_header_inferred_from_rows_with_only_th": [
                    "self"
                ],
                "test_parse_dates_list": [
                    "self"
                ],
                "test_parse_dates_combine": [
                    "self"
                ],
                "test_wikipedia_states_table": [
                    "self",
                    "datapath"
                ],
                "test_wikipedia_states_multiindex": [
                    "self",
                    "datapath"
                ],
                "test_parser_error_on_empty_header_row": [
                    "self"
                ],
                "test_decimal_rows": [
                    "self"
                ],
                "test_bool_header_arg": [
                    "self"
                ],
                "test_converters": [
                    "self"
                ],
                "test_na_values": [
                    "self"
                ],
                "test_keep_default_na": [
                    "self"
                ],
                "test_preserve_empty_rows": [
                    "self"
                ],
                "test_ignore_empty_rows_when_inferring_header": [
                    "self"
                ],
                "test_multiple_header_rows": [
                    "self"
                ],
                "test_works_on_valid_markup": [
                    "self",
                    "datapath"
                ],
                "test_fallback_success": [
                    "self",
                    "datapath"
                ],
                "test_to_html_timestamp": [
                    "self"
                ],
                "test_displayed_only": [
                    "self",
                    "displayed_only",
                    "exp0",
                    "exp1"
                ],
                "test_encode": [
                    "self",
                    "html_encoding_file"
                ],
                "test_parse_failure_unseekable": [
                    "self"
                ],
                "test_parse_failure_rewinds": [
                    "self"
                ],
                "test_importcheck_thread_safety": [
                    "self",
                    "datapath"
                ]
            }
        },
        "pandas.tests.io.parser.test_na_values": {
            "test_string_nas": [
                "all_parsers"
            ],
            "test_detect_string_na": [
                "all_parsers"
            ],
            "test_non_string_na_values": [
                "all_parsers",
                "data",
                "na_values"
            ],
            "test_default_na_values": [
                "all_parsers"
            ],
            "test_custom_na_values": [
                "all_parsers",
                "na_values"
            ],
            "test_bool_na_values": [
                "all_parsers"
            ],
            "test_na_value_dict": [
                "all_parsers"
            ],
            "test_na_value_dict_multi_index": [
                "all_parsers",
                "index_col",
                "expected"
            ],
            "test_na_values_keep_default": [
                "all_parsers",
                "kwargs",
                "expected"
            ],
            "test_no_na_values_no_keep_default": [
                "all_parsers"
            ],
            "test_no_keep_default_na_dict_na_values": [
                "all_parsers"
            ],
            "test_no_keep_default_na_dict_na_scalar_values": [
                "all_parsers"
            ],
            "test_no_keep_default_na_dict_na_values_diff_reprs": [
                "all_parsers",
                "col_zero_na_values"
            ],
            "test_na_values_na_filter_override": [
                "all_parsers",
                "na_filter",
                "row_data"
            ],
            "test_na_trailing_columns": [
                "all_parsers"
            ],
            "test_na_values_scalar": [
                "all_parsers",
                "na_values",
                "row_data"
            ],
            "test_na_values_dict_aliasing": [
                "all_parsers"
            ],
            "test_na_values_dict_col_index": [
                "all_parsers"
            ],
            "test_na_values_uint64": [
                "all_parsers",
                "data",
                "kwargs",
                "expected"
            ],
            "test_empty_na_values_no_default_with_index": [
                "all_parsers"
            ],
            "test_no_na_filter_on_index": [
                "all_parsers",
                "na_filter",
                "index_data"
            ],
            "test_inf_na_values_with_int_index": [
                "all_parsers"
            ],
            "test_na_values_with_dtype_str_and_na_filter": [
                "all_parsers",
                "na_filter"
            ],
            "test_cast_NA_to_bool_raises_error": [
                "all_parsers",
                "data",
                "na_values"
            ],
            "test_str_nan_dropped": [
                "all_parsers"
            ]
        },
        "pandas.tests.io.parser.test_c_parser_only": {
            "test_buffer_overflow": [
                "c_parser_only",
                "malformed"
            ],
            "test_buffer_rd_bytes": [
                "c_parser_only"
            ],
            "test_delim_whitespace_custom_terminator": [
                "c_parser_only"
            ],
            "test_dtype_and_names_error": [
                "c_parser_only"
            ],
            "test_unsupported_dtype": [
                "c_parser_only",
                "match",
                "kwargs"
            ],
            "test_precise_conversion": [
                "c_parser_only"
            ],
            "test_usecols_dtypes": [
                "c_parser_only"
            ],
            "test_disable_bool_parsing": [
                "c_parser_only"
            ],
            "test_custom_lineterminator": [
                "c_parser_only"
            ],
            "test_parse_ragged_csv": [
                "c_parser_only"
            ],
            "test_tokenize_CR_with_quoting": [
                "c_parser_only"
            ],
            "test_grow_boundary_at_cap": [
                "c_parser_only"
            ],
            "test_parse_trim_buffers": [
                "c_parser_only"
            ],
            "test_internal_null_byte": [
                "c_parser_only"
            ],
            "test_read_nrows_large": [
                "c_parser_only"
            ],
            "test_float_precision_round_trip_with_text": [
                "c_parser_only"
            ],
            "test_large_difference_in_columns": [
                "c_parser_only"
            ],
            "test_data_after_quote": [
                "c_parser_only"
            ],
            "test_comment_whitespace_delimited": [
                "c_parser_only",
                "capsys"
            ],
            "test_file_like_no_next": [
                "c_parser_only"
            ],
            "test_buffer_rd_bytes_bad_unicode": [
                "c_parser_only"
            ],
            "test_read_tarfile": [
                "c_parser_only",
                "csv_dir_path",
                "tar_suffix"
            ],
            "test_bytes_exceed_2gb": [
                "c_parser_only"
            ],
            "test_chunk_whitespace_on_boundary": [
                "c_parser_only"
            ],
            "test_file_handles_mmap": [
                "c_parser_only",
                "csv1"
            ],
            "test_file_binary_mode": [
                "c_parser_only"
            ],
            "test_unix_style_breaks": [
                "c_parser_only"
            ]
        },
        "pandas.tests.io.parser.test_index_col": {
            "test_index_col_named": [
                "all_parsers",
                "with_header"
            ],
            "test_index_col_named2": [
                "all_parsers"
            ],
            "test_index_col_is_true": [
                "all_parsers"
            ],
            "test_infer_index_col": [
                "all_parsers"
            ],
            "test_index_col_empty_data": [
                "all_parsers",
                "index_col",
                "kwargs"
            ],
            "test_empty_with_index_col_false": [
                "all_parsers"
            ],
            "test_multi_index_naming": [
                "all_parsers",
                "index_names"
            ],
            "test_multi_index_naming_not_all_at_beginning": [
                "all_parsers"
            ],
            "test_no_multi_index_level_names_empty": [
                "all_parsers"
            ],
            "test_header_with_index_col": [
                "all_parsers"
            ]
        },
        "pandas.tests.io.parser.test_quoting": {
            "test_bad_quote_char": [
                "all_parsers",
                "kwargs",
                "msg"
            ],
            "test_bad_quoting": [
                "all_parsers",
                "quoting",
                "msg"
            ],
            "test_quote_char_basic": [
                "all_parsers"
            ],
            "test_quote_char_various": [
                "all_parsers",
                "quote_char"
            ],
            "test_null_quote_char": [
                "all_parsers",
                "quoting",
                "quote_char"
            ],
            "test_quoting_various": [
                "all_parsers",
                "kwargs",
                "exp_data"
            ],
            "test_double_quote": [
                "all_parsers",
                "doublequote",
                "exp_data"
            ],
            "test_quotechar_unicode": [
                "all_parsers",
                "quotechar"
            ],
            "test_unbalanced_quoting": [
                "all_parsers",
                "balanced"
            ]
        },
        "pandas.tests.io.parser.test_comment": {
            "test_comment": [
                "all_parsers",
                "na_values"
            ],
            "test_line_comment": [
                "all_parsers",
                "read_kwargs"
            ],
            "test_comment_skiprows": [
                "all_parsers"
            ],
            "test_comment_header": [
                "all_parsers"
            ],
            "test_comment_skiprows_header": [
                "all_parsers"
            ],
            "test_custom_comment_char": [
                "all_parsers",
                "comment_char"
            ],
            "test_comment_first_line": [
                "all_parsers",
                "header"
            ]
        },
        "pandas.tests.io.parser.test_unsupported": {
            "python_engine": [
                "request"
            ],
            "TestUnsupportedFeatures": {
                "test_mangle_dupe_cols_false": [
                    "self"
                ],
                "test_c_engine": [
                    "self"
                ],
                "test_python_engine": [
                    "self",
                    "python_engine"
                ],
                "test_python_engine_file_no_next": [
                    "self",
                    "python_engine"
                ]
            }
        },
        "pandas.tests.io.parser.test_header": {
            "test_read_with_bad_header": [
                "all_parsers"
            ],
            "test_negative_header": [
                "all_parsers"
            ],
            "test_negative_multi_index_header": [
                "all_parsers",
                "header"
            ],
            "test_bool_header_arg": [
                "all_parsers",
                "header"
            ],
            "test_no_header_prefix": [
                "all_parsers"
            ],
            "test_header_with_index_col": [
                "all_parsers"
            ],
            "test_header_not_first_line": [
                "all_parsers"
            ],
            "test_header_multi_index": [
                "all_parsers"
            ],
            "test_header_multi_index_invalid": [
                "all_parsers",
                "kwargs",
                "msg"
            ],
            "test_header_multi_index_common_format1": [
                "all_parsers",
                "kwargs"
            ],
            "test_header_multi_index_common_format2": [
                "all_parsers",
                "kwargs"
            ],
            "test_header_multi_index_common_format3": [
                "all_parsers",
                "kwargs"
            ],
            "test_header_multi_index_common_format_malformed1": [
                "all_parsers"
            ],
            "test_header_multi_index_common_format_malformed2": [
                "all_parsers"
            ],
            "test_header_multi_index_common_format_malformed3": [
                "all_parsers"
            ],
            "test_header_names_backward_compat": [
                "all_parsers",
                "data",
                "header"
            ],
            "test_read_only_header_no_rows": [
                "all_parsers",
                "kwargs"
            ],
            "test_no_header": [
                "all_parsers",
                "kwargs",
                "names"
            ],
            "test_non_int_header": [
                "all_parsers",
                "header"
            ],
            "test_singleton_header": [
                "all_parsers"
            ],
            "test_mangles_multi_index": [
                "all_parsers",
                "data",
                "expected"
            ],
            "test_multi_index_unnamed": [
                "all_parsers",
                "index_col",
                "columns"
            ],
            "test_read_csv_multiindex_columns": [
                "all_parsers"
            ]
        },
        "pandas.tests.io.parser.test_usecols": {
            "test_raise_on_mixed_dtype_usecols": [
                "all_parsers"
            ],
            "test_usecols": [
                "all_parsers",
                "usecols"
            ],
            "test_usecols_with_names": [
                "all_parsers"
            ],
            "test_usecols_relative_to_names": [
                "all_parsers",
                "names",
                "usecols"
            ],
            "test_usecols_relative_to_names2": [
                "all_parsers"
            ],
            "test_usecols_name_length_conflict": [
                "all_parsers"
            ],
            "test_usecols_single_string": [
                "all_parsers"
            ],
            "test_usecols_index_col_false": [
                "all_parsers",
                "data"
            ],
            "test_usecols_index_col_conflict": [
                "all_parsers",
                "usecols",
                "index_col"
            ],
            "test_usecols_index_col_conflict2": [
                "all_parsers"
            ],
            "test_usecols_implicit_index_col": [
                "all_parsers"
            ],
            "test_usecols_regex_sep": [
                "all_parsers"
            ],
            "test_usecols_with_whitespace": [
                "all_parsers"
            ],
            "test_usecols_with_integer_like_header": [
                "all_parsers",
                "usecols",
                "expected"
            ],
            "test_usecols_with_parse_dates": [
                "all_parsers",
                "usecols"
            ],
            "test_usecols_with_parse_dates2": [
                "all_parsers"
            ],
            "test_usecols_with_parse_dates3": [
                "all_parsers"
            ],
            "test_usecols_with_parse_dates4": [
                "all_parsers"
            ],
            "test_usecols_with_parse_dates_and_names": [
                "all_parsers",
                "usecols",
                "names"
            ],
            "test_usecols_with_unicode_strings": [
                "all_parsers"
            ],
            "test_usecols_with_single_byte_unicode_strings": [
                "all_parsers"
            ],
            "test_usecols_with_mixed_encoding_strings": [
                "all_parsers",
                "usecols"
            ],
            "test_usecols_with_multi_byte_characters": [
                "all_parsers",
                "usecols"
            ],
            "test_empty_usecols": [
                "all_parsers"
            ],
            "test_np_array_usecols": [
                "all_parsers"
            ],
            "test_callable_usecols": [
                "all_parsers",
                "usecols",
                "expected"
            ],
            "test_incomplete_first_row": [
                "all_parsers",
                "usecols"
            ],
            "test_uneven_length_cols": [
                "all_parsers",
                "data",
                "usecols",
                "kwargs",
                "expected"
            ],
            "test_raises_on_usecols_names_mismatch": [
                "all_parsers",
                "usecols",
                "kwargs",
                "expected",
                "msg"
            ],
            "test_usecols_subset_names_mismatch_orig_columns": [
                "all_parsers",
                "usecols",
                "request"
            ]
        },
        "pandas.tests.io.parser.test_python_parser_only": {
            "test_default_separator": [
                "python_parser_only"
            ],
            "test_invalid_skipfooter_non_int": [
                "python_parser_only",
                "skipfooter"
            ],
            "test_invalid_skipfooter_negative": [
                "python_parser_only"
            ],
            "test_sniff_delimiter": [
                "python_parser_only",
                "kwargs"
            ],
            "test_sniff_delimiter_comment": [
                "python_parser_only"
            ],
            "test_sniff_delimiter_encoding": [
                "python_parser_only",
                "encoding"
            ],
            "test_single_line": [
                "python_parser_only"
            ],
            "test_skipfooter": [
                "python_parser_only",
                "kwargs"
            ],
            "test_decompression_regex_sep": [
                "python_parser_only",
                "csv1",
                "compression",
                "klass"
            ],
            "test_read_csv_buglet_4x_multi_index": [
                "python_parser_only"
            ],
            "test_read_csv_buglet_4x_multi_index2": [
                "python_parser_only"
            ],
            "test_skipfooter_with_decimal": [
                "python_parser_only",
                "add_footer"
            ],
            "test_encoding_non_utf8_multichar_sep": [
                "python_parser_only",
                "sep",
                "encoding"
            ],
            "test_multi_char_sep_quotes": [
                "python_parser_only",
                "quoting"
            ],
            "test_none_delimiter": [
                "python_parser_only",
                "capsys"
            ],
            "test_skipfooter_bad_row": [
                "python_parser_only",
                "data",
                "skipfooter"
            ],
            "test_malformed_skipfooter": [
                "python_parser_only"
            ]
        },
        "pandas.tests.io.parser.test_mangle_dupes": {
            "test_basic": [
                "all_parsers",
                "kwargs"
            ],
            "test_basic_names": [
                "all_parsers"
            ],
            "test_basic_names_raise": [
                "all_parsers"
            ],
            "test_thorough_mangle_columns": [
                "all_parsers",
                "data",
                "expected"
            ],
            "test_thorough_mangle_names": [
                "all_parsers",
                "data",
                "names",
                "expected"
            ],
            "test_mangled_unnamed_placeholders": [
                "all_parsers"
            ]
        },
        "pandas.tests.io.parser.test_skiprows": {
            "test_skip_rows_bug": [
                "all_parsers",
                "skiprows"
            ],
            "test_deep_skip_rows": [
                "all_parsers"
            ],
            "test_skip_rows_blank": [
                "all_parsers"
            ],
            "test_skip_row_with_newline": [
                "all_parsers",
                "data",
                "kwargs",
                "expected"
            ],
            "test_skip_row_with_quote": [
                "all_parsers"
            ],
            "test_skip_row_with_newline_and_quote": [
                "all_parsers",
                "data",
                "exp_data"
            ],
            "test_skiprows_lineterminator": [
                "all_parsers",
                "line_terminator"
            ],
            "test_skiprows_infield_quote": [
                "all_parsers"
            ],
            "test_skip_rows_callable": [
                "all_parsers",
                "kwargs",
                "expected"
            ],
            "test_skip_rows_skip_all": [
                "all_parsers"
            ],
            "test_skip_rows_bad_callable": [
                "all_parsers"
            ]
        },
        "pandas.tests.io.parser.test_read_fwf": {
            "test_basic": [],
            "test_colspecs": [],
            "test_widths": [],
            "test_non_space_filler": [],
            "test_over_specified": [],
            "test_under_specified": [],
            "test_read_csv_compat": [],
            "test_bytes_io_input": [],
            "test_fwf_colspecs_is_list_or_tuple": [],
            "test_fwf_colspecs_is_list_or_tuple_of_two_element_tuples": [],
            "test_fwf_colspecs_none": [
                "colspecs",
                "exp_data"
            ],
            "test_fwf_colspecs_infer_nrows": [
                "infer_nrows",
                "exp_data"
            ],
            "test_fwf_regression": [],
            "test_fwf_for_uint8": [],
            "test_fwf_comment": [
                "comment"
            ],
            "test_fwf_thousands": [
                "thousands"
            ],
            "test_bool_header_arg": [
                "header"
            ],
            "test_full_file": [],
            "test_full_file_with_missing": [],
            "test_full_file_with_spaces": [],
            "test_full_file_with_spaces_and_missing": [],
            "test_messed_up_data": [],
            "test_multiple_delimiters": [],
            "test_variable_width_unicode": [],
            "test_dtype": [
                "dtype"
            ],
            "test_skiprows_inference": [],
            "test_skiprows_by_index_inference": [],
            "test_skiprows_inference_empty": [],
            "test_whitespace_preservation": [],
            "test_default_delimiter": [],
            "test_fwf_compression": [
                "compression_only",
                "infer"
            ]
        },
        "pandas.tests.io.parser.test_dialect": {
            "custom_dialect": [],
            "test_dialect": [
                "all_parsers"
            ],
            "test_dialect_str": [
                "all_parsers"
            ],
            "test_invalid_dialect": [
                "all_parsers"
            ],
            "test_dialect_conflict_except_delimiter": [
                "all_parsers",
                "custom_dialect",
                "arg",
                "value"
            ],
            "test_dialect_conflict_delimiter": [
                "all_parsers",
                "custom_dialect",
                "kwargs",
                "warning_klass"
            ]
        },
        "pandas.tests.io.parser.test_multi_thread": {
            "_construct_dataframe": [
                "num_rows"
            ],
            "test_multi_thread_string_io_read_csv": [
                "all_parsers"
            ],
            "_generate_multi_thread_dataframe": [
                "parser",
                "path",
                "num_rows",
                "num_tasks"
            ],
            "test_multi_thread_path_multipart_read_csv": [
                "all_parsers"
            ]
        },
        "pandas.tests.io.parser.test_parse_dates": {
            "test_separator_date_conflict": [
                "all_parsers"
            ],
            "test_multiple_date_col_custom": [
                "all_parsers",
                "keep_date_col"
            ],
            "test_concat_date_col_fail": [
                "container",
                "dim"
            ],
            "test_multiple_date_col": [
                "all_parsers",
                "keep_date_col"
            ],
            "test_date_col_as_index_col": [
                "all_parsers"
            ],
            "test_multiple_date_cols_int_cast": [
                "all_parsers"
            ],
            "test_multiple_date_col_timestamp_parse": [
                "all_parsers"
            ],
            "test_multiple_date_cols_with_header": [
                "all_parsers"
            ],
            "test_multiple_date_col_name_collision": [
                "all_parsers",
                "data",
                "parse_dates",
                "msg"
            ],
            "test_date_parser_int_bug": [
                "all_parsers"
            ],
            "test_nat_parse": [
                "all_parsers"
            ],
            "test_csv_custom_parser": [
                "all_parsers"
            ],
            "test_parse_dates_implicit_first_col": [
                "all_parsers"
            ],
            "test_parse_dates_string": [
                "all_parsers"
            ],
            "test_yy_format_with_year_first": [
                "all_parsers",
                "parse_dates"
            ],
            "test_parse_dates_column_list": [
                "all_parsers",
                "parse_dates"
            ],
            "test_multi_index_parse_dates": [
                "all_parsers",
                "index_col"
            ],
            "test_parse_dates_custom_euro_format": [
                "all_parsers",
                "kwargs"
            ],
            "test_parse_tz_aware": [
                "all_parsers"
            ],
            "test_multiple_date_cols_index": [
                "all_parsers",
                "parse_dates",
                "index_col"
            ],
            "test_multiple_date_cols_chunked": [
                "all_parsers"
            ],
            "test_multiple_date_col_named_index_compat": [
                "all_parsers"
            ],
            "test_multiple_date_col_multiple_index_compat": [
                "all_parsers"
            ],
            "test_read_with_parse_dates_scalar_non_bool": [
                "all_parsers",
                "kwargs"
            ],
            "test_read_with_parse_dates_invalid_type": [
                "all_parsers",
                "parse_dates"
            ],
            "test_bad_date_parse": [
                "all_parsers",
                "cache_dates",
                "value"
            ],
            "test_parse_dates_empty_string": [
                "all_parsers"
            ],
            "test_parse_dates_no_convert_thousands": [
                "all_parsers",
                "data",
                "kwargs",
                "expected"
            ],
            "test_parse_date_time_multi_level_column_name": [
                "all_parsers"
            ],
            "test_parse_date_time": [
                "all_parsers",
                "data",
                "kwargs",
                "expected"
            ],
            "test_parse_date_fields": [
                "all_parsers"
            ],
            "test_parse_date_all_fields": [
                "all_parsers"
            ],
            "test_datetime_fractional_seconds": [
                "all_parsers"
            ],
            "test_generic": [
                "all_parsers"
            ],
            "test_date_parser_resolution_if_not_ns": [
                "all_parsers"
            ],
            "test_parse_date_column_with_empty_string": [
                "all_parsers"
            ],
            "test_parse_date_float": [
                "all_parsers",
                "data",
                "expected",
                "parse_dates"
            ],
            "test_parse_timezone": [
                "all_parsers"
            ],
            "test_invalid_parse_delimited_date": [
                "all_parsers",
                "date_string"
            ],
            "test_parse_delimited_date_swap": [
                "all_parsers",
                "date_string",
                "dayfirst",
                "expected"
            ],
            "_helper_hypothesis_delimited_date": [
                "call",
                "date_string"
            ],
            "test_hypothesis_delimited_date": [
                "date_format",
                "dayfirst",
                "delimiter",
                "test_datetime"
            ],
            "test_missing_parse_dates_column_raises": [
                "all_parsers",
                "names",
                "usecols",
                "parse_dates",
                "missing_cols"
            ]
        },
        "pandas.tests.io.parser.test_common": {
            "test_override_set_noconvert_columns": [],
            "test_empty_decimal_marker": [
                "all_parsers"
            ],
            "test_bad_stream_exception": [
                "all_parsers",
                "csv_dir_path"
            ],
            "test_read_csv_local": [
                "all_parsers",
                "csv1"
            ],
            "test_1000_sep": [
                "all_parsers"
            ],
            "test_squeeze": [
                "all_parsers"
            ],
            "test_malformed": [
                "all_parsers"
            ],
            "test_malformed_chunks": [
                "all_parsers",
                "nrows"
            ],
            "test_unnamed_columns": [
                "all_parsers"
            ],
            "test_csv_mixed_type": [
                "all_parsers"
            ],
            "test_read_csv_low_memory_no_rows_with_index": [
                "all_parsers"
            ],
            "test_read_csv_dataframe": [
                "all_parsers",
                "csv1"
            ],
            "test_read_csv_no_index_name": [
                "all_parsers",
                "csv_dir_path"
            ],
            "test_read_csv_wrong_num_columns": [
                "all_parsers"
            ],
            "test_read_duplicate_index_explicit": [
                "all_parsers"
            ],
            "test_read_duplicate_index_implicit": [
                "all_parsers"
            ],
            "test_parse_bool": [
                "all_parsers",
                "data",
                "kwargs",
                "expected"
            ],
            "test_int_conversion": [
                "all_parsers"
            ],
            "test_read_nrows": [
                "all_parsers",
                "nrows"
            ],
            "test_read_nrows_bad": [
                "all_parsers",
                "nrows"
            ],
            "test_read_chunksize_with_index": [
                "all_parsers",
                "index_col"
            ],
            "test_read_chunksize_bad": [
                "all_parsers",
                "chunksize"
            ],
            "test_read_chunksize_and_nrows": [
                "all_parsers",
                "chunksize"
            ],
            "test_read_chunksize_and_nrows_changing_size": [
                "all_parsers"
            ],
            "test_get_chunk_passed_chunksize": [
                "all_parsers"
            ],
            "test_read_chunksize_compat": [
                "all_parsers",
                "kwargs"
            ],
            "test_read_chunksize_jagged_names": [
                "all_parsers"
            ],
            "test_read_data_list": [
                "all_parsers"
            ],
            "test_iterator": [
                "all_parsers"
            ],
            "test_iterator2": [
                "all_parsers"
            ],
            "test_reader_list": [
                "all_parsers"
            ],
            "test_reader_list_skiprows": [
                "all_parsers"
            ],
            "test_iterator_stop_on_chunksize": [
                "all_parsers"
            ],
            "test_iterator_skipfooter_errors": [
                "all_parsers",
                "kwargs"
            ],
            "test_nrows_skipfooter_errors": [
                "all_parsers"
            ],
            "test_pass_names_with_index": [
                "all_parsers",
                "data",
                "kwargs",
                "expected"
            ],
            "test_multi_index_no_level_names": [
                "all_parsers",
                "index_col"
            ],
            "test_multi_index_no_level_names_implicit": [
                "all_parsers"
            ],
            "test_multi_index_blank_df": [
                "all_parsers",
                "data",
                "expected",
                "header",
                "round_trip"
            ],
            "test_no_unnamed_index": [
                "all_parsers"
            ],
            "test_read_csv_parse_simple_list": [
                "all_parsers"
            ],
            "test_url": [
                "all_parsers",
                "csv_dir_path"
            ],
            "test_local_file": [
                "all_parsers",
                "csv_dir_path"
            ],
            "test_path_path_lib": [
                "all_parsers"
            ],
            "test_path_local_path": [
                "all_parsers"
            ],
            "test_nonexistent_path": [
                "all_parsers"
            ],
            "test_no_permission": [
                "all_parsers"
            ],
            "test_missing_trailing_delimiters": [
                "all_parsers"
            ],
            "test_skip_initial_space": [
                "all_parsers"
            ],
            "test_trailing_delimiters": [
                "all_parsers"
            ],
            "test_escapechar": [
                "all_parsers"
            ],
            "test_int64_min_issues": [
                "all_parsers"
            ],
            "test_parse_integers_above_fp_precision": [
                "all_parsers"
            ],
            "test_chunks_have_consistent_numerical_type": [
                "all_parsers"
            ],
            "test_warn_if_chunks_have_mismatched_type": [
                "all_parsers"
            ],
            "test_integer_overflow_bug": [
                "all_parsers",
                "sep"
            ],
            "test_catch_too_many_names": [
                "all_parsers"
            ],
            "test_ignore_leading_whitespace": [
                "all_parsers"
            ],
            "test_chunk_begins_with_newline_whitespace": [
                "all_parsers"
            ],
            "test_empty_with_index": [
                "all_parsers"
            ],
            "test_empty_with_multi_index": [
                "all_parsers"
            ],
            "test_empty_with_reversed_multi_index": [
                "all_parsers"
            ],
            "test_float_parser": [
                "all_parsers"
            ],
            "test_scientific_no_exponent": [
                "all_parsers"
            ],
            "test_int64_overflow": [
                "all_parsers",
                "conv"
            ],
            "test_int64_uint64_range": [
                "all_parsers",
                "val"
            ],
            "test_outside_int64_uint64_range": [
                "all_parsers",
                "val"
            ],
            "test_numeric_range_too_wide": [
                "all_parsers",
                "exp_data"
            ],
            "test_empty_with_nrows_chunksize": [
                "all_parsers",
                "iterator"
            ],
            "test_eof_states": [
                "all_parsers",
                "data",
                "kwargs",
                "expected",
                "msg"
            ],
            "test_uneven_lines_with_usecols": [
                "all_parsers",
                "usecols"
            ],
            "test_read_empty_with_usecols": [
                "all_parsers",
                "data",
                "kwargs",
                "expected"
            ],
            "test_trailing_spaces": [
                "all_parsers",
                "kwargs",
                "expected"
            ],
            "test_raise_on_sep_with_delim_whitespace": [
                "all_parsers"
            ],
            "test_single_char_leading_whitespace": [
                "all_parsers",
                "delim_whitespace"
            ],
            "test_empty_lines": [
                "all_parsers",
                "sep",
                "skip_blank_lines",
                "exp_data"
            ],
            "test_whitespace_lines": [
                "all_parsers"
            ],
            "test_whitespace_regex_separator": [
                "all_parsers",
                "data",
                "expected"
            ],
            "test_verbose_read": [
                "all_parsers",
                "capsys"
            ],
            "test_verbose_read2": [
                "all_parsers",
                "capsys"
            ],
            "test_iteration_open_handle": [
                "all_parsers"
            ],
            "test_1000_sep_with_decimal": [
                "all_parsers",
                "data",
                "thousands",
                "decimal"
            ],
            "test_euro_decimal_format": [
                "all_parsers"
            ],
            "test_inf_parsing": [
                "all_parsers",
                "na_filter"
            ],
            "test_infinity_parsing": [
                "all_parsers",
                "na_filter"
            ],
            "test_raise_on_no_columns": [
                "all_parsers",
                "nrows"
            ],
            "test_memory_map": [
                "all_parsers",
                "csv_dir_path"
            ],
            "test_null_byte_char": [
                "all_parsers"
            ],
            "test_temporary_file": [
                "all_parsers"
            ],
            "test_internal_eof_byte": [
                "all_parsers"
            ],
            "test_internal_eof_byte_to_file": [
                "all_parsers"
            ],
            "test_sub_character": [
                "all_parsers",
                "csv_dir_path"
            ],
            "test_file_handle_string_io": [
                "all_parsers"
            ],
            "test_file_handles_with_open": [
                "all_parsers",
                "csv1"
            ],
            "test_invalid_file_buffer_class": [
                "all_parsers"
            ],
            "test_invalid_file_buffer_mock": [
                "all_parsers"
            ],
            "test_valid_file_buffer_seems_invalid": [
                "all_parsers"
            ],
            "test_error_bad_lines": [
                "all_parsers",
                "kwargs",
                "warn_kwargs"
            ],
            "test_warn_bad_lines": [
                "all_parsers",
                "capsys"
            ],
            "test_suppress_error_output": [
                "all_parsers",
                "capsys"
            ],
            "test_filename_with_special_chars": [
                "all_parsers",
                "filename"
            ],
            "test_read_csv_memory_growth_chunksize": [
                "all_parsers"
            ],
            "test_read_csv_raises_on_header_prefix": [
                "all_parsers"
            ],
            "test_unexpected_keyword_parameter_exception": [
                "all_parsers"
            ],
            "test_read_table_same_signature_as_read_csv": [
                "all_parsers"
            ],
            "test_read_table_equivalency_to_read_csv": [
                "all_parsers"
            ],
            "test_first_row_bom": [
                "all_parsers"
            ],
            "test_integer_precision": [
                "all_parsers"
            ],
            "test_file_descriptor_leak": [
                "all_parsers"
            ],
            "test_blank_lines_between_header_and_data_rows": [
                "all_parsers",
                "nrows"
            ],
            "test_no_header_two_extra_columns": [
                "all_parsers"
            ],
            "test_read_csv_names_not_accepting_sets": [
                "all_parsers"
            ],
            "test_read_csv_with_use_inf_as_na": [
                "all_parsers"
            ]
        },
        "pandas.tests.io.parser.test_textreader": {
            "assert_array_dicts_equal": [
                "left",
                "right"
            ],
            "TestTextReader": {
                "setup_method": [
                    "self",
                    "datapath"
                ],
                "test_file_handle": [
                    "self"
                ],
                "test_string_filename": [
                    "self"
                ],
                "test_file_handle_mmap": [
                    "self"
                ],
                "test_StringIO": [
                    "self"
                ],
                "test_string_factorize": [
                    "self"
                ],
                "test_skipinitialspace": [
                    "self"
                ],
                "test_parse_booleans": [
                    "self"
                ],
                "test_delimit_whitespace": [
                    "self"
                ],
                "test_embedded_newline": [
                    "self"
                ],
                "test_euro_decimal": [
                    "self"
                ],
                "test_integer_thousands": [
                    "self"
                ],
                "test_integer_thousands_alt": [
                    "self"
                ],
                "test_skip_bad_lines": [
                    "self",
                    "capsys"
                ],
                "test_header_not_enough_lines": [
                    "self"
                ],
                "test_escapechar": [
                    "self"
                ],
                "test_eof_has_eol": [
                    "self"
                ],
                "test_na_substitution": [
                    "self"
                ],
                "test_numpy_string_dtype": [
                    "self"
                ],
                "test_pass_dtype": [
                    "self"
                ],
                "test_usecols": [
                    "self"
                ],
                "test_cr_delimited": [
                    "self"
                ],
                "test_empty_field_eof": [
                    "self"
                ],
                "test_empty_csv_input": [
                    "self"
                ]
            }
        },
        "pandas.tests.io.parser.test_dtypes": {
            "test_dtype_all_columns": [
                "all_parsers",
                "dtype",
                "check_orig"
            ],
            "test_dtype_all_columns_empty": [
                "all_parsers"
            ],
            "test_dtype_per_column": [
                "all_parsers"
            ],
            "test_invalid_dtype_per_column": [
                "all_parsers"
            ],
            "test_categorical_dtype": [
                "all_parsers",
                "dtype"
            ],
            "test_categorical_dtype_single": [
                "all_parsers",
                "dtype"
            ],
            "test_categorical_dtype_unsorted": [
                "all_parsers"
            ],
            "test_categorical_dtype_missing": [
                "all_parsers"
            ],
            "test_categorical_dtype_high_cardinality_numeric": [
                "all_parsers"
            ],
            "test_categorical_dtype_latin1": [
                "all_parsers",
                "csv_dir_path"
            ],
            "test_categorical_dtype_utf16": [
                "all_parsers",
                "csv_dir_path"
            ],
            "test_categorical_dtype_chunksize_infer_categories": [
                "all_parsers"
            ],
            "test_categorical_dtype_chunksize_explicit_categories": [
                "all_parsers"
            ],
            "test_categorical_category_dtype": [
                "all_parsers",
                "categories",
                "ordered"
            ],
            "test_categorical_category_dtype_unsorted": [
                "all_parsers"
            ],
            "test_categorical_coerces_numeric": [
                "all_parsers"
            ],
            "test_categorical_coerces_datetime": [
                "all_parsers"
            ],
            "test_categorical_coerces_timestamp": [
                "all_parsers"
            ],
            "test_categorical_coerces_timedelta": [
                "all_parsers"
            ],
            "test_categorical_dtype_coerces_boolean": [
                "all_parsers",
                "data"
            ],
            "test_categorical_unexpected_categories": [
                "all_parsers"
            ],
            "test_empty_pass_dtype": [
                "all_parsers"
            ],
            "test_empty_with_index_pass_dtype": [
                "all_parsers"
            ],
            "test_empty_with_multi_index_pass_dtype": [
                "all_parsers"
            ],
            "test_empty_with_mangled_column_pass_dtype_by_names": [
                "all_parsers"
            ],
            "test_empty_with_mangled_column_pass_dtype_by_indexes": [
                "all_parsers"
            ],
            "test_empty_with_dup_column_pass_dtype_by_indexes": [
                "all_parsers"
            ],
            "test_empty_with_dup_column_pass_dtype_by_indexes_raises": [
                "all_parsers"
            ],
            "test_raise_on_passed_int_dtype_with_nas": [
                "all_parsers"
            ],
            "test_dtype_with_converters": [
                "all_parsers"
            ],
            "test_empty_dtype": [
                "all_parsers",
                "dtype",
                "expected"
            ],
            "test_numeric_dtype": [
                "all_parsers",
                "dtype"
            ],
            "test_boolean_dtype": [
                "all_parsers"
            ]
        },
        "pandas.tests.io.parser.test_network": {
            "test_compressed_urls": [
                "salaries_table",
                "compress_type",
                "extension",
                "mode",
                "engine"
            ],
            "check_compressed_urls": [
                "salaries_table",
                "compression",
                "extension",
                "mode",
                "engine"
            ],
            "tips_df": [
                "datapath"
            ],
            "TestS3": {
                "test_parse_public_s3_bucket": [
                    "self",
                    "tips_df"
                ],
                "test_parse_public_s3n_bucket": [
                    "self",
                    "tips_df"
                ],
                "test_parse_public_s3a_bucket": [
                    "self",
                    "tips_df"
                ],
                "test_parse_public_s3_bucket_nrows": [
                    "self",
                    "tips_df"
                ],
                "test_parse_public_s3_bucket_chunked": [
                    "self",
                    "tips_df"
                ],
                "test_parse_public_s3_bucket_chunked_python": [
                    "self",
                    "tips_df"
                ],
                "test_parse_public_s3_bucket_python": [
                    "self",
                    "tips_df"
                ],
                "test_infer_s3_compression": [
                    "self",
                    "tips_df"
                ],
                "test_parse_public_s3_bucket_nrows_python": [
                    "self",
                    "tips_df"
                ],
                "test_read_s3_fails": [
                    "self"
                ],
                "test_write_s3_csv_fails": [
                    "self",
                    "tips_df"
                ],
                "test_write_s3_parquet_fails": [
                    "self",
                    "tips_df"
                ],
                "test_read_csv_handles_boto_s3_object": [
                    "self",
                    "s3_resource",
                    "tips_file"
                ],
                "test_read_csv_chunked_download": [
                    "self",
                    "s3_resource",
                    "caplog"
                ],
                "test_read_s3_with_hash_in_key": [
                    "self",
                    "tips_df"
                ],
                "test_read_feather_s3_file_path": [
                    "self",
                    "feather_file"
                ]
            }
        },
        "pandas.tests.io.parser.test_converters": {
            "test_converters_type_must_be_dict": [
                "all_parsers"
            ],
            "test_converters": [
                "all_parsers",
                "column",
                "converter"
            ],
            "test_converters_no_implicit_conv": [
                "all_parsers"
            ],
            "test_converters_euro_decimal_format": [
                "all_parsers"
            ],
            "test_converters_corner_with_nans": [
                "all_parsers"
            ],
            "test_converter_index_col_bug": [
                "all_parsers"
            ]
        },
        "pandas.tests.io.parser.conftest": {
            "csv_dir_path": [
                "datapath"
            ],
            "csv1": [
                "datapath"
            ],
            "all_parsers": [
                "request"
            ],
            "c_parser_only": [
                "request"
            ],
            "python_parser_only": [
                "request"
            ],
            "utf_value": [
                "request"
            ],
            "encoding_fmt": [
                "request"
            ],
            "BaseParser": {
                "update_kwargs": [
                    "self",
                    "kwargs"
                ],
                "read_csv": [
                    "self"
                ],
                "read_table": [
                    "self"
                ]
            },
            "CParser": {},
            "CParserHighMemory": {},
            "CParserLowMemory": {},
            "PythonParser": {}
        },
        "pandas.tests.io.parser": {},
        "pandas.tests.io.parser.test_compression": {
            "buffer": [
                "request"
            ],
            "parser_and_data": [
                "all_parsers",
                "csv1"
            ],
            "test_zip": [
                "parser_and_data",
                "compression"
            ],
            "test_zip_error_multiple_files": [
                "parser_and_data",
                "compression"
            ],
            "test_zip_error_no_files": [
                "parser_and_data"
            ],
            "test_zip_error_invalid_zip": [
                "parser_and_data"
            ],
            "test_compression": [
                "parser_and_data",
                "compression_only",
                "buffer",
                "filename"
            ],
            "test_infer_compression": [
                "all_parsers",
                "csv1",
                "buffer",
                "ext"
            ],
            "test_compression_utf_encoding": [
                "all_parsers",
                "csv_dir_path",
                "utf_value",
                "encoding_fmt"
            ],
            "test_invalid_compression": [
                "all_parsers",
                "invalid_compression"
            ]
        },
        "pandas.tests.io.parser.test_encoding": {
            "test_bytes_io_input": [
                "all_parsers"
            ],
            "test_read_csv_unicode": [
                "all_parsers"
            ],
            "test_utf16_bom_skiprows": [
                "all_parsers",
                "sep",
                "encoding"
            ],
            "test_utf16_example": [
                "all_parsers",
                "csv_dir_path"
            ],
            "test_unicode_encoding": [
                "all_parsers",
                "csv_dir_path"
            ],
            "test_utf8_bom": [
                "all_parsers",
                "data",
                "kwargs",
                "expected"
            ],
            "test_read_csv_utf_aliases": [
                "all_parsers",
                "utf_value",
                "encoding_fmt"
            ],
            "test_binary_mode_file_buffers": [
                "all_parsers",
                "csv_dir_path",
                "file_path",
                "encoding",
                "datapath"
            ],
            "test_encoding_temp_file": [
                "all_parsers",
                "utf_value",
                "encoding_fmt",
                "pass_encoding"
            ],
            "test_encoding_named_temp_file": [
                "all_parsers"
            ]
        },
        "pandas.tests.io.excel.test_writers": {
            "path": [
                "ext"
            ],
            "set_engine": [
                "engine",
                "ext"
            ],
            "TestRoundTrip": {
                "test_read_one_empty_col_no_header": [
                    "self",
                    "ext",
                    "header",
                    "expected"
                ],
                "test_read_one_empty_col_with_header": [
                    "self",
                    "ext",
                    "header",
                    "expected"
                ],
                "test_set_column_names_in_parameter": [
                    "self",
                    "ext"
                ],
                "test_creating_and_reading_multiple_sheets": [
                    "self",
                    "ext"
                ],
                "test_read_excel_multiindex_empty_level": [
                    "self",
                    "ext"
                ],
                "test_excel_multindex_roundtrip": [
                    "self",
                    "ext",
                    "c_idx_names",
                    "r_idx_names",
                    "c_idx_levels",
                    "r_idx_levels"
                ],
                "test_read_excel_parse_dates": [
                    "self",
                    "ext"
                ],
                "test_multiindex_interval_datetimes": [
                    "self",
                    "ext"
                ]
            },
            "TestExcelWriter": {
                "test_excel_sheet_size": [
                    "self",
                    "path"
                ],
                "test_excel_sheet_by_name_raise": [
                    "self",
                    "path",
                    "engine"
                ],
                "test_excel_writer_context_manager": [
                    "self",
                    "frame",
                    "path"
                ],
                "test_roundtrip": [
                    "self",
                    "frame",
                    "path"
                ],
                "test_mixed": [
                    "self",
                    "frame",
                    "path"
                ],
                "test_ts_frame": [
                    "self",
                    "tsframe",
                    "path"
                ],
                "test_basics_with_nan": [
                    "self",
                    "frame",
                    "path"
                ],
                "test_int_types": [
                    "self",
                    "np_type",
                    "path"
                ],
                "test_float_types": [
                    "self",
                    "np_type",
                    "path"
                ],
                "test_bool_types": [
                    "self",
                    "np_type",
                    "path"
                ],
                "test_inf_roundtrip": [
                    "self",
                    "path"
                ],
                "test_sheets": [
                    "self",
                    "frame",
                    "tsframe",
                    "path"
                ],
                "test_colaliases": [
                    "self",
                    "frame",
                    "path"
                ],
                "test_roundtrip_indexlabels": [
                    "self",
                    "merge_cells",
                    "frame",
                    "path"
                ],
                "test_excel_roundtrip_indexname": [
                    "self",
                    "merge_cells",
                    "path"
                ],
                "test_excel_roundtrip_datetime": [
                    "self",
                    "merge_cells",
                    "tsframe",
                    "path"
                ],
                "test_excel_date_datetime_format": [
                    "self",
                    "engine",
                    "ext",
                    "path"
                ],
                "test_to_excel_interval_no_labels": [
                    "self",
                    "path"
                ],
                "test_to_excel_interval_labels": [
                    "self",
                    "path"
                ],
                "test_to_excel_timedelta": [
                    "self",
                    "path"
                ],
                "test_to_excel_periodindex": [
                    "self",
                    "tsframe",
                    "path"
                ],
                "test_to_excel_multiindex": [
                    "self",
                    "merge_cells",
                    "frame",
                    "path"
                ],
                "test_to_excel_multiindex_nan_label": [
                    "self",
                    "merge_cells",
                    "path"
                ],
                "test_to_excel_multiindex_cols": [
                    "self",
                    "merge_cells",
                    "frame",
                    "path"
                ],
                "test_to_excel_multiindex_dates": [
                    "self",
                    "merge_cells",
                    "tsframe",
                    "path"
                ],
                "test_to_excel_multiindex_no_write_index": [
                    "self",
                    "path"
                ],
                "test_to_excel_float_format": [
                    "self",
                    "path"
                ],
                "test_to_excel_output_encoding": [
                    "self",
                    "ext"
                ],
                "test_to_excel_unicode_filename": [
                    "self",
                    "ext",
                    "path"
                ],
                "test_excel_010_hemstring": [
                    "self",
                    "merge_cells",
                    "c_idx_nlevels",
                    "r_idx_nlevels",
                    "use_headers",
                    "path"
                ],
                "test_duplicated_columns": [
                    "self",
                    "path"
                ],
                "test_swapped_columns": [
                    "self",
                    "path"
                ],
                "test_invalid_columns": [
                    "self",
                    "path"
                ],
                "test_write_subset_columns": [
                    "self",
                    "path",
                    "to_excel_index",
                    "read_excel_index_col"
                ],
                "test_comment_arg": [
                    "self",
                    "path"
                ],
                "test_comment_default": [
                    "self",
                    "path"
                ],
                "test_comment_used": [
                    "self",
                    "path"
                ],
                "test_comment_empty_line": [
                    "self",
                    "path"
                ],
                "test_datetimes": [
                    "self",
                    "path"
                ],
                "test_bytes_io": [
                    "self",
                    "engine"
                ],
                "test_write_lists_dict": [
                    "self",
                    "path"
                ],
                "test_render_as_column_name": [
                    "self",
                    "path"
                ],
                "test_true_and_false_value_options": [
                    "self",
                    "path"
                ],
                "test_freeze_panes": [
                    "self",
                    "path"
                ],
                "test_path_path_lib": [
                    "self",
                    "engine",
                    "ext"
                ],
                "test_path_local_path": [
                    "self",
                    "engine",
                    "ext"
                ],
                "test_merged_cell_custom_objects": [
                    "self",
                    "merge_cells",
                    "path"
                ],
                "test_raise_when_saving_timezones": [
                    "self",
                    "dtype",
                    "tz_aware_fixture",
                    "path"
                ]
            },
            "TestExcelWriterEngineTests": {
                "test_ExcelWriter_dispatch": [
                    "self",
                    "klass",
                    "ext"
                ],
                "test_ExcelWriter_dispatch_raises": [
                    "self"
                ],
                "test_register_writer": [
                    "self"
                ]
            },
            "TestFSPath": {
                "test_excelfile_fspath": [
                    "self"
                ],
                "test_excelwriter_fspath": [
                    "self"
                ]
            }
        },
        "pandas.tests.io.excel.test_odf": {
            "cd_and_set_engine": [
                "monkeypatch",
                "datapath"
            ],
            "test_read_invalid_types_raises": [],
            "test_read_writer_table": [],
            "test_nonexistent_sheetname_raises": [
                "read_ext"
            ]
        },
        "pandas.tests.io.excel.test_openpyxl": {
            "test_to_excel_styleconverter": [
                "ext"
            ],
            "test_write_cells_merge_styled": [
                "ext"
            ],
            "test_write_append_mode": [
                "ext",
                "mode",
                "expected"
            ],
            "test_to_excel_with_openpyxl_engine": [
                "ext",
                "tmpdir"
            ]
        },
        "pandas.tests.io.excel.test_readers": {
            "ignore_xlrd_time_clock_warning": [],
            "_is_valid_engine_ext_pair": [
                "engine",
                "read_ext"
            ],
            "_transfer_marks": [
                "engine",
                "read_ext"
            ],
            "engine_and_read_ext": [
                "request"
            ],
            "engine": [
                "engine_and_read_ext"
            ],
            "read_ext": [
                "engine_and_read_ext"
            ],
            "TestReaders": {
                "cd_and_set_engine": [
                    "self",
                    "engine",
                    "datapath",
                    "monkeypatch"
                ],
                "test_usecols_int": [
                    "self",
                    "read_ext",
                    "df_ref"
                ],
                "test_usecols_list": [
                    "self",
                    "read_ext",
                    "df_ref"
                ],
                "test_usecols_str": [
                    "self",
                    "read_ext",
                    "df_ref"
                ],
                "test_usecols_diff_positional_int_columns_order": [
                    "self",
                    "read_ext",
                    "usecols",
                    "df_ref"
                ],
                "test_usecols_diff_positional_str_columns_order": [
                    "self",
                    "read_ext",
                    "usecols",
                    "df_ref"
                ],
                "test_read_excel_without_slicing": [
                    "self",
                    "read_ext",
                    "df_ref"
                ],
                "test_usecols_excel_range_str": [
                    "self",
                    "read_ext",
                    "df_ref"
                ],
                "test_usecols_excel_range_str_invalid": [
                    "self",
                    "read_ext"
                ],
                "test_index_col_label_error": [
                    "self",
                    "read_ext"
                ],
                "test_index_col_empty": [
                    "self",
                    "read_ext"
                ],
                "test_index_col_with_unnamed": [
                    "self",
                    "read_ext",
                    "index_col"
                ],
                "test_usecols_pass_non_existent_column": [
                    "self",
                    "read_ext"
                ],
                "test_usecols_wrong_type": [
                    "self",
                    "read_ext"
                ],
                "test_excel_stop_iterator": [
                    "self",
                    "read_ext"
                ],
                "test_excel_cell_error_na": [
                    "self",
                    "read_ext"
                ],
                "test_excel_table": [
                    "self",
                    "read_ext",
                    "df_ref"
                ],
                "test_reader_special_dtypes": [
                    "self",
                    "read_ext"
                ],
                "test_reader_converters": [
                    "self",
                    "read_ext"
                ],
                "test_reader_dtype": [
                    "self",
                    "read_ext"
                ],
                "test_reader_dtype_str": [
                    "self",
                    "read_ext",
                    "dtype",
                    "expected"
                ],
                "test_reader_spaces": [
                    "self",
                    "read_ext"
                ],
                "test_reading_all_sheets": [
                    "self",
                    "read_ext"
                ],
                "test_reading_multiple_specific_sheets": [
                    "self",
                    "read_ext"
                ],
                "test_reading_all_sheets_with_blank": [
                    "self",
                    "read_ext"
                ],
                "test_read_excel_blank": [
                    "self",
                    "read_ext"
                ],
                "test_read_excel_blank_with_header": [
                    "self",
                    "read_ext"
                ],
                "test_date_conversion_overflow": [
                    "self",
                    "read_ext"
                ],
                "test_sheet_name": [
                    "self",
                    "read_ext",
                    "df_ref"
                ],
                "test_excel_read_buffer": [
                    "self",
                    "read_ext"
                ],
                "test_bad_engine_raises": [
                    "self",
                    "read_ext"
                ],
                "test_read_from_http_url": [
                    "self",
                    "read_ext"
                ],
                "test_read_from_s3_url": [
                    "self",
                    "read_ext",
                    "s3_resource"
                ],
                "test_read_from_file_url": [
                    "self",
                    "read_ext",
                    "datapath"
                ],
                "test_read_from_pathlib_path": [
                    "self",
                    "read_ext"
                ],
                "test_read_from_py_localpath": [
                    "self",
                    "read_ext"
                ],
                "test_close_from_py_localpath": [
                    "self",
                    "read_ext"
                ],
                "test_reader_seconds": [
                    "self",
                    "read_ext"
                ],
                "test_read_excel_multiindex": [
                    "self",
                    "read_ext"
                ],
                "test_read_excel_multiindex_header_only": [
                    "self",
                    "read_ext"
                ],
                "test_excel_old_index_format": [
                    "self",
                    "read_ext"
                ],
                "test_read_excel_bool_header_arg": [
                    "self",
                    "read_ext"
                ],
                "test_read_excel_skiprows_list": [
                    "self",
                    "read_ext"
                ],
                "test_read_excel_nrows": [
                    "self",
                    "read_ext"
                ],
                "test_read_excel_nrows_greater_than_nrows_in_file": [
                    "self",
                    "read_ext"
                ],
                "test_read_excel_nrows_non_integer_parameter": [
                    "self",
                    "read_ext"
                ],
                "test_read_excel_squeeze": [
                    "self",
                    "read_ext"
                ],
                "test_deprecated_kwargs": [
                    "self",
                    "read_ext"
                ],
                "test_no_header_with_list_index_col": [
                    "self",
                    "read_ext"
                ]
            },
            "TestExcelFileRead": {
                "cd_and_set_engine": [
                    "self",
                    "engine",
                    "datapath",
                    "monkeypatch"
                ],
                "test_excel_passes_na": [
                    "self",
                    "read_ext"
                ],
                "test_excel_passes_na_filter": [
                    "self",
                    "read_ext",
                    "na_filter"
                ],
                "test_excel_table_sheet_by_index": [
                    "self",
                    "read_ext",
                    "df_ref"
                ],
                "test_sheet_name": [
                    "self",
                    "read_ext",
                    "df_ref"
                ],
                "test_excel_read_buffer": [
                    "self",
                    "engine",
                    "read_ext"
                ],
                "test_reader_closes_file": [
                    "self",
                    "engine",
                    "read_ext"
                ],
                "test_conflicting_excel_engines": [
                    "self",
                    "read_ext"
                ],
                "test_excel_read_binary": [
                    "self",
                    "engine",
                    "read_ext"
                ],
                "test_excel_high_surrogate": [
                    "self",
                    "engine"
                ],
                "test_header_with_index_col": [
                    "self",
                    "engine",
                    "filename"
                ],
                "test_read_datetime_multiindex": [
                    "self",
                    "engine",
                    "read_ext"
                ]
            }
        },
        "pandas.tests.io.excel.test_style": {
            "test_styler_to_excel": [
                "engine"
            ]
        },
        "pandas.tests.io.excel.test_xlrd": {
            "skip_ods_and_xlsb_files": [
                "read_ext"
            ],
            "test_read_xlrd_book": [
                "read_ext",
                "frame"
            ],
            "test_excel_table_sheet_by_index": [
                "datapath",
                "read_ext"
            ]
        },
        "pandas.tests.io.excel.test_xlwt": {
            "test_excel_raise_error_on_multiindex_columns_and_no_index": [
                "ext"
            ],
            "test_excel_multiindex_columns_and_index_true": [
                "ext"
            ],
            "test_excel_multiindex_index": [
                "ext"
            ],
            "test_to_excel_styleconverter": [
                "ext"
            ],
            "test_write_append_mode_raises": [
                "ext"
            ]
        },
        "pandas.tests.io.excel.test_odswriter": {
            "test_write_append_mode_raises": [
                "ext"
            ]
        },
        "pandas.tests.io.excel.test_xlsxwriter": {
            "test_column_format": [
                "ext"
            ],
            "test_write_append_mode_raises": [
                "ext"
            ]
        },
        "pandas.tests.io.excel.conftest": {
            "frame": [
                "float_frame"
            ],
            "tsframe": [],
            "merge_cells": [
                "request"
            ],
            "df_ref": [
                "datapath"
            ],
            "read_ext": [
                "request"
            ],
            "check_for_file_leaks": []
        },
        "pandas.tests.io.excel": {},
        "pandas.tests.io.formats.test_css": {
            "assert_resolves": [
                "css",
                "props",
                "inherited"
            ],
            "assert_same_resolution": [
                "css1",
                "css2",
                "inherited"
            ],
            "test_css_parse_normalisation": [
                "name",
                "norm",
                "abnorm"
            ],
            "test_css_parse_invalid": [
                "invalid_css",
                "remainder"
            ],
            "test_css_side_shorthands": [
                "shorthand",
                "expansions"
            ],
            "test_css_precedence": [
                "style",
                "inherited",
                "equiv"
            ],
            "test_css_none_absent": [
                "style",
                "equiv"
            ],
            "test_css_absolute_font_size": [
                "size",
                "relative_to",
                "resolved"
            ],
            "test_css_relative_font_size": [
                "size",
                "relative_to",
                "resolved"
            ]
        },
        "pandas.tests.io.formats.test_format": {
            "filepath_or_buffer_id": [
                "request"
            ],
            "filepath_or_buffer": [
                "filepath_or_buffer_id",
                "tmp_path"
            ],
            "assert_filepath_or_buffer_equals": [
                "filepath_or_buffer",
                "filepath_or_buffer_id",
                "encoding"
            ],
            "curpath": [],
            "has_info_repr": [
                "df"
            ],
            "has_non_verbose_info_repr": [
                "df"
            ],
            "has_horizontally_truncated_repr": [
                "df"
            ],
            "has_vertically_truncated_repr": [
                "df"
            ],
            "has_truncated_repr": [
                "df"
            ],
            "has_doubly_truncated_repr": [
                "df"
            ],
            "has_expanded_repr": [
                "df"
            ],
            "gen_series_formatting": [],
            "_three_digit_exp": [],
            "test_format_percentiles": [],
            "test_format_percentiles_integer_idx": [],
            "test_repr_html_ipython_config": [
                "ip"
            ],
            "test_filepath_or_buffer_arg": [
                "method",
                "filepath_or_buffer",
                "assert_filepath_or_buffer_equals",
                "encoding",
                "data",
                "filepath_or_buffer_id"
            ],
            "test_filepath_or_buffer_bad_arg_raises": [
                "float_frame",
                "method"
            ],
            "TestDataFrameFormatting": {
                "test_repr_embedded_ndarray": [
                    "self"
                ],
                "test_eng_float_formatter": [
                    "self",
                    "float_frame"
                ],
                "test_show_null_counts": [
                    "self"
                ],
                "test_repr_tuples": [
                    "self"
                ],
                "test_repr_truncation": [
                    "self"
                ],
                "test_repr_deprecation_negative_int": [
                    "self"
                ],
                "test_repr_chop_threshold": [
                    "self"
                ],
                "test_repr_chop_threshold_column_below": [
                    "self"
                ],
                "test_repr_obeys_max_seq_limit": [
                    "self"
                ],
                "test_repr_set": [
                    "self"
                ],
                "test_repr_is_valid_construction_code": [
                    "self"
                ],
                "test_repr_should_return_str": [
                    "self"
                ],
                "test_repr_no_backslash": [
                    "self"
                ],
                "test_expand_frame_repr": [
                    "self"
                ],
                "test_repr_non_interactive": [
                    "self"
                ],
                "test_repr_truncates_terminal_size": [
                    "self",
                    "monkeypatch"
                ],
                "test_repr_truncates_terminal_size_full": [
                    "self",
                    "monkeypatch"
                ],
                "test_repr_truncation_column_size": [
                    "self"
                ],
                "test_repr_max_columns_max_rows": [
                    "self"
                ],
                "test_repr_min_rows": [
                    "self"
                ],
                "test_str_max_colwidth": [
                    "self"
                ],
                "test_to_string_truncate": [
                    "self"
                ],
                "test_auto_detect": [
                    "self"
                ],
                "test_to_string_repr_unicode": [
                    "self"
                ],
                "test_to_string_unicode_columns": [
                    "self",
                    "float_frame"
                ],
                "test_to_string_utf8_columns": [
                    "self"
                ],
                "test_to_string_unicode_two": [
                    "self"
                ],
                "test_to_string_unicode_three": [
                    "self"
                ],
                "test_to_string_with_formatters": [
                    "self"
                ],
                "test_to_string_with_datetime64_monthformatter": [
                    "self"
                ],
                "test_to_string_with_datetime64_hourformatter": [
                    "self"
                ],
                "test_to_string_with_formatters_unicode": [
                    "self"
                ],
                "test_east_asian_unicode_false": [
                    "self"
                ],
                "test_east_asian_unicode_true": [
                    "self"
                ],
                "test_to_string_buffer_all_unicode": [
                    "self"
                ],
                "test_to_string_with_col_space": [
                    "self"
                ],
                "test_to_string_with_column_specific_col_space_raises": [
                    "self"
                ],
                "test_to_string_with_column_specific_col_space": [
                    "self"
                ],
                "test_to_string_truncate_indices": [
                    "self"
                ],
                "test_to_string_truncate_multilevel": [
                    "self"
                ],
                "test_truncate_with_different_dtypes": [
                    "self"
                ],
                "test_truncate_with_different_dtypes_multiindex": [
                    "self"
                ],
                "test_datetimelike_frame": [
                    "self"
                ],
                "test_datetimeindex_highprecision": [
                    "self",
                    "start_date"
                ],
                "test_nonunicode_nonascii_alignment": [
                    "self"
                ],
                "test_unicode_problem_decoding_as_ascii": [
                    "self"
                ],
                "test_string_repr_encoding": [
                    "self",
                    "datapath"
                ],
                "test_repr_corner": [
                    "self"
                ],
                "test_frame_info_encoding": [
                    "self"
                ],
                "test_wide_repr": [
                    "self"
                ],
                "test_wide_repr_wide_columns": [
                    "self"
                ],
                "test_wide_repr_named": [
                    "self"
                ],
                "test_wide_repr_multiindex": [
                    "self"
                ],
                "test_wide_repr_multiindex_cols": [
                    "self"
                ],
                "test_wide_repr_unicode": [
                    "self"
                ],
                "test_wide_repr_wide_long_columns": [
                    "self"
                ],
                "test_long_series": [
                    "self"
                ],
                "test_index_with_nan": [
                    "self"
                ],
                "test_to_string": [
                    "self"
                ],
                "test_to_string_no_header": [
                    "self"
                ],
                "test_to_string_specified_header": [
                    "self"
                ],
                "test_to_string_no_index": [
                    "self"
                ],
                "test_to_string_line_width_no_index": [
                    "self"
                ],
                "test_to_string_float_formatting": [
                    "self"
                ],
                "test_to_string_float_format_no_fixed_width": [
                    "self"
                ],
                "test_to_string_small_float_values": [
                    "self"
                ],
                "test_to_string_float_index": [
                    "self"
                ],
                "test_to_string_complex_float_formatting": [
                    "self"
                ],
                "test_to_string_ascii_error": [
                    "self"
                ],
                "test_to_string_int_formatting": [
                    "self"
                ],
                "test_to_string_index_formatter": [
                    "self"
                ],
                "test_to_string_left_justify_cols": [
                    "self"
                ],
                "test_to_string_format_na": [
                    "self"
                ],
                "test_to_string_format_inf": [
                    "self"
                ],
                "test_to_string_decimal": [
                    "self"
                ],
                "test_to_string_line_width": [
                    "self"
                ],
                "test_show_dimensions": [
                    "self"
                ],
                "test_repr_html": [
                    "self",
                    "float_frame"
                ],
                "test_repr_html_mathjax": [
                    "self"
                ],
                "test_repr_html_wide": [
                    "self"
                ],
                "test_repr_html_wide_multiindex_cols": [
                    "self"
                ],
                "test_repr_html_long": [
                    "self"
                ],
                "test_repr_html_float": [
                    "self"
                ],
                "test_repr_html_long_multiindex": [
                    "self"
                ],
                "test_repr_html_long_and_wide": [
                    "self"
                ],
                "test_info_repr": [
                    "self"
                ],
                "test_info_repr_max_cols": [
                    "self"
                ],
                "test_info_repr_html": [
                    "self"
                ],
                "test_fake_qtconsole_repr_html": [
                    "self",
                    "float_frame"
                ],
                "test_pprint_pathological_object": [
                    "self"
                ],
                "test_float_trim_zeros": [
                    "self"
                ],
                "test_dict_entries": [
                    "self"
                ],
                "test_categorical_columns": [
                    "self"
                ],
                "test_period": [
                    "self"
                ]
            },
            "TestSeriesFormatting": {
                "setup_method": [
                    "self",
                    "method"
                ],
                "test_repr_unicode": [
                    "self"
                ],
                "test_to_string": [
                    "self"
                ],
                "test_freq_name_separation": [
                    "self"
                ],
                "test_to_string_mixed": [
                    "self"
                ],
                "test_to_string_float_na_spacing": [
                    "self"
                ],
                "test_to_string_without_index": [
                    "self"
                ],
                "test_unicode_name_in_footer": [
                    "self"
                ],
                "test_east_asian_unicode_series": [
                    "self"
                ],
                "test_float_trim_zeros": [
                    "self"
                ],
                "test_datetimeindex": [
                    "self"
                ],
                "test_datetimeindex_highprecision": [
                    "self",
                    "start_date"
                ],
                "test_timedelta64": [
                    "self"
                ],
                "test_mixed_datetime64": [
                    "self"
                ],
                "test_period": [
                    "self"
                ],
                "test_max_multi_index_display": [
                    "self"
                ],
                "test_consistent_format": [
                    "self"
                ],
                "chck_ncols": [
                    "self",
                    "s"
                ],
                "test_format_explicit": [
                    "self"
                ],
                "test_ncols": [
                    "self"
                ],
                "test_max_rows_eq_one": [
                    "self"
                ],
                "test_truncate_ndots": [
                    "self"
                ],
                "test_show_dimensions": [
                    "self"
                ],
                "test_repr_min_rows": [
                    "self"
                ],
                "test_to_string_name": [
                    "self"
                ],
                "test_to_string_dtype": [
                    "self"
                ],
                "test_to_string_length": [
                    "self"
                ],
                "test_to_string_na_rep": [
                    "self"
                ],
                "test_to_string_float_format": [
                    "self"
                ],
                "test_to_string_header": [
                    "self"
                ],
                "test_to_string_multindex_header": [
                    "self"
                ]
            },
            "TestGenericArrayFormatter": {
                "test_1d_array": [
                    "self"
                ],
                "test_2d_array": [
                    "self"
                ],
                "test_3d_array": [
                    "self"
                ],
                "test_2d_extension_type": [
                    "self"
                ]
            },
            "TestFloatArrayFormatter": {
                "test_misc": [
                    "self"
                ],
                "test_format": [
                    "self"
                ],
                "test_output_display_precision_trailing_zeroes": [
                    "self"
                ],
                "test_output_significant_digits": [
                    "self"
                ],
                "test_too_long": [
                    "self"
                ]
            },
            "TestRepr_timedelta64": {
                "test_none": [
                    "self"
                ],
                "test_sub_day": [
                    "self"
                ],
                "test_long": [
                    "self"
                ],
                "test_all": [
                    "self"
                ]
            },
            "TestTimedelta64Formatter": {
                "test_days": [
                    "self"
                ],
                "test_days_neg": [
                    "self"
                ],
                "test_subdays": [
                    "self"
                ],
                "test_subdays_neg": [
                    "self"
                ],
                "test_zero": [
                    "self"
                ]
            },
            "TestDatetime64Formatter": {
                "test_mixed": [
                    "self"
                ],
                "test_dates": [
                    "self"
                ],
                "test_date_nanos": [
                    "self"
                ],
                "test_dates_display": [
                    "self"
                ],
                "test_datetime64formatter_yearmonth": [
                    "self"
                ],
                "test_datetime64formatter_hoursecond": [
                    "self"
                ]
            },
            "TestNaTFormatting": {
                "test_repr": [
                    "self"
                ],
                "test_str": [
                    "self"
                ]
            },
            "TestDatetimeIndexFormat": {
                "test_datetime": [
                    "self"
                ],
                "test_date": [
                    "self"
                ],
                "test_date_tz": [
                    "self"
                ],
                "test_date_explicit_date_format": [
                    "self"
                ]
            },
            "TestDatetimeIndexUnicode": {
                "test_dates": [
                    "self"
                ],
                "test_mixed": [
                    "self"
                ]
            },
            "TestStringRepTimestamp": {
                "test_no_tz": [
                    "self"
                ],
                "test_tz_pytz": [
                    "self"
                ],
                "test_tz_dateutil": [
                    "self"
                ],
                "test_nat_representations": [
                    "self"
                ]
            }
        },
        "pandas.tests.io.formats.test_to_html": {
            "expected_html": [
                "datapath",
                "name"
            ],
            "biggie_df_fixture": [
                "request"
            ],
            "justify": [
                "request"
            ],
            "test_to_html_with_col_space": [
                "col_space"
            ],
            "test_to_html_with_column_specific_col_space_raises": [],
            "test_to_html_with_column_specific_col_space": [],
            "test_to_html_with_empty_string_label": [],
            "test_to_html_unicode": [
                "df",
                "expected",
                "datapath"
            ],
            "test_to_html_encoding": [
                "float_frame",
                "tmp_path"
            ],
            "test_to_html_decimal": [
                "datapath"
            ],
            "test_to_html_escaped": [
                "kwargs",
                "string",
                "expected",
                "datapath"
            ],
            "test_to_html_multiindex_index_false": [
                "index_is_named",
                "datapath"
            ],
            "test_to_html_multiindex_sparsify": [
                "multi_sparse",
                "expected",
                "datapath"
            ],
            "test_to_html_multiindex_odd_even_truncate": [
                "max_rows",
                "expected",
                "datapath"
            ],
            "test_to_html_formatters": [
                "df",
                "formatters",
                "expected",
                "datapath"
            ],
            "test_to_html_regression_GH6098": [],
            "test_to_html_truncate": [
                "datapath"
            ],
            "test_html_invalid_formatters_arg_raises": [
                "size"
            ],
            "test_to_html_truncate_formatter": [
                "datapath"
            ],
            "test_to_html_truncate_multi_index": [
                "sparsify",
                "expected",
                "datapath"
            ],
            "test_to_html_border": [
                "option",
                "result",
                "expected"
            ],
            "test_to_html": [
                "biggie_df_fixture"
            ],
            "test_to_html_empty_dataframe": [
                "biggie_df_fixture"
            ],
            "test_to_html_filename": [
                "biggie_df_fixture",
                "tmpdir"
            ],
            "test_to_html_with_no_bold": [],
            "test_to_html_columns_arg": [
                "float_frame"
            ],
            "test_to_html_multiindex": [
                "columns",
                "justify",
                "expected",
                "datapath"
            ],
            "test_to_html_justify": [
                "justify",
                "datapath"
            ],
            "test_to_html_invalid_justify": [
                "justify"
            ],
            "test_to_html_index": [
                "datapath"
            ],
            "test_to_html_with_classes": [
                "classes",
                "datapath"
            ],
            "test_to_html_no_index_max_rows": [
                "datapath"
            ],
            "test_to_html_multiindex_max_cols": [
                "datapath"
            ],
            "test_to_html_multi_indexes_index_false": [
                "datapath"
            ],
            "test_to_html_basic_alignment": [
                "datapath",
                "row_index",
                "row_type",
                "column_index",
                "column_type",
                "index",
                "header",
                "index_names"
            ],
            "test_to_html_alignment_with_truncation": [
                "datapath",
                "row_index",
                "row_type",
                "column_index",
                "column_type",
                "index",
                "header",
                "index_names"
            ],
            "test_to_html_truncation_index_false_max_rows": [
                "datapath",
                "index"
            ],
            "test_to_html_truncation_index_false_max_cols": [
                "datapath",
                "index",
                "col_index_named",
                "expected_output"
            ],
            "test_to_html_notebook_has_style": [
                "notebook"
            ],
            "test_to_html_with_index_names_false": [],
            "test_to_html_with_id": [],
            "test_to_html_float_format_no_fixed_width": [
                "value",
                "float_format",
                "expected",
                "datapath"
            ],
            "test_to_html_render_links": [
                "render_links",
                "expected",
                "datapath"
            ],
            "test_ignore_display_max_colwidth": [
                "method",
                "expected",
                "max_colwidth"
            ],
            "test_to_html_invalid_classes_type": [
                "classes"
            ],
            "test_to_html_round_column_headers": [],
            "test_to_html_with_col_space_units": [
                "unit"
            ],
            "test_html_repr_min_rows_default": [
                "datapath"
            ],
            "test_html_repr_min_rows": [
                "datapath",
                "max_rows",
                "min_rows",
                "expected"
            ]
        },
        "pandas.tests.io.formats.test_to_latex": {
            "TestToLatex": {
                "test_to_latex_filename": [
                    "self",
                    "float_frame"
                ],
                "test_to_latex": [
                    "self",
                    "float_frame"
                ],
                "test_to_latex_format": [
                    "self",
                    "float_frame"
                ],
                "test_to_latex_empty": [
                    "self"
                ],
                "test_to_latex_with_formatters": [
                    "self"
                ],
                "test_to_latex_multiindex": [
                    "self"
                ],
                "test_to_latex_multiindex_dupe_level": [
                    "self"
                ],
                "test_to_latex_multicolumnrow": [
                    "self"
                ],
                "test_to_latex_escape": [
                    "self"
                ],
                "test_to_latex_special_escape": [
                    "self"
                ],
                "test_to_latex_longtable": [
                    "self"
                ],
                "test_to_latex_caption_label": [
                    "self"
                ],
                "test_to_latex_longtable_caption_label": [
                    "self"
                ],
                "test_to_latex_escape_special_chars": [
                    "self"
                ],
                "test_to_latex_no_header": [
                    "self"
                ],
                "test_to_latex_specified_header": [
                    "self"
                ],
                "test_to_latex_decimal": [
                    "self",
                    "float_frame"
                ],
                "test_to_latex_series": [
                    "self"
                ],
                "test_to_latex_bold_rows": [
                    "self"
                ],
                "test_to_latex_no_bold_rows": [
                    "self"
                ],
                "test_to_latex_multiindex_names": [
                    "self",
                    "name0",
                    "name1",
                    "axes"
                ],
                "test_to_latex_multiindex_nans": [
                    "self",
                    "one_row"
                ],
                "test_to_latex_non_string_index": [
                    "self"
                ],
                "test_to_latex_midrule_location": [
                    "self"
                ],
                "test_to_latex_multiindex_empty_name": [
                    "self"
                ],
                "test_to_latex_float_format_no_fixed_width": [
                    "self"
                ],
                "test_to_latex_multindex_header": [
                    "self"
                ]
            }
        },
        "pandas.tests.io.formats.test_info": {
            "datetime_frame": [],
            "test_info_categorical_column": [],
            "test_info": [
                "float_frame",
                "datetime_frame"
            ],
            "test_info_verbose": [],
            "test_info_memory": [],
            "test_info_wide": [],
            "test_info_duplicate_columns": [],
            "test_info_duplicate_columns_shows_correct_dtypes": [],
            "test_info_shows_column_dtypes": [],
            "test_info_max_cols": [],
            "test_info_memory_usage": [],
            "test_info_memory_usage_deep_not_pypy": [],
            "test_info_memory_usage_deep_pypy": [],
            "test_usage_via_getsizeof": [],
            "test_info_memory_usage_qualified": [],
            "test_info_memory_usage_bug_on_multiindex": [],
            "test_info_categorical": []
        },
        "pandas.tests.io.formats.test_to_csv": {
            "TestToCSV": {
                "test_to_csv_with_single_column": [
                    "self"
                ],
                "test_to_csv_defualt_encoding": [
                    "self"
                ],
                "test_to_csv_quotechar": [
                    "self"
                ],
                "test_to_csv_doublequote": [
                    "self"
                ],
                "test_to_csv_escapechar": [
                    "self"
                ],
                "test_csv_to_string": [
                    "self"
                ],
                "test_to_csv_decimal": [
                    "self"
                ],
                "test_to_csv_float_format": [
                    "self"
                ],
                "test_to_csv_na_rep": [
                    "self"
                ],
                "test_to_csv_date_format": [
                    "self"
                ],
                "test_to_csv_multi_index": [
                    "self"
                ],
                "test_to_csv_single_level_multi_index": [
                    "self",
                    "ind",
                    "expected",
                    "klass"
                ],
                "test_to_csv_string_array_ascii": [
                    "self"
                ],
                "test_to_csv_string_array_utf8": [
                    "self"
                ],
                "test_to_csv_string_with_lf": [
                    "self"
                ],
                "test_to_csv_string_with_crlf": [
                    "self"
                ],
                "test_to_csv_stdout_file": [
                    "self",
                    "capsys"
                ],
                "test_to_csv_write_to_open_file": [
                    "self"
                ],
                "test_to_csv_write_to_open_file_with_newline_py3": [
                    "self"
                ],
                "test_to_csv_compression": [
                    "self",
                    "compression_only",
                    "read_infer",
                    "to_infer"
                ],
                "test_to_csv_compression_dict": [
                    "self",
                    "compression_only"
                ],
                "test_to_csv_compression_dict_no_method_raises": [
                    "self"
                ],
                "test_to_csv_zip_arguments": [
                    "self",
                    "compression",
                    "archive_name"
                ],
                "test_to_csv_na_rep_long_string": [
                    "self",
                    "df_new_type"
                ],
                "test_to_csv_timedelta_precision": [
                    "self"
                ],
                "test_na_rep_truncated": [
                    "self"
                ],
                "test_to_csv_errors": [
                    "self",
                    "errors"
                ]
            }
        },
        "pandas.tests.io.formats.test_eng_formatting": {
            "TestEngFormatter": {
                "test_eng_float_formatter": [
                    "self"
                ],
                "compare": [
                    "self",
                    "formatter",
                    "input",
                    "output"
                ],
                "compare_all": [
                    "self",
                    "formatter",
                    "in_out"
                ],
                "test_exponents_with_eng_prefix": [
                    "self"
                ],
                "test_exponents_without_eng_prefix": [
                    "self"
                ],
                "test_rounding": [
                    "self"
                ],
                "test_nan": [
                    "self"
                ],
                "test_inf": [
                    "self"
                ]
            }
        },
        "pandas.tests.io.formats.test_style": {
            "test_block_names": [],
            "test_from_custom_template": [
                "tmpdir"
            ],
            "TestStyler": {
                "setup_method": [
                    "self",
                    "method"
                ],
                "test_init_non_pandas": [
                    "self"
                ],
                "test_init_series": [
                    "self"
                ],
                "test_repr_html_ok": [
                    "self"
                ],
                "test_repr_html_mathjax": [
                    "self"
                ],
                "test_update_ctx": [
                    "self"
                ],
                "test_update_ctx_flatten_multi": [
                    "self"
                ],
                "test_update_ctx_flatten_multi_traliing_semi": [
                    "self"
                ],
                "test_copy": [
                    "self"
                ],
                "test_deepcopy": [
                    "self"
                ],
                "test_clear": [
                    "self"
                ],
                "test_render": [
                    "self"
                ],
                "test_render_empty_dfs": [
                    "self"
                ],
                "test_render_double": [
                    "self"
                ],
                "test_set_properties": [
                    "self"
                ],
                "test_set_properties_subset": [
                    "self"
                ],
                "test_empty_index_name_doesnt_display": [
                    "self"
                ],
                "test_index_name": [
                    "self"
                ],
                "test_multiindex_name": [
                    "self"
                ],
                "test_numeric_columns": [
                    "self"
                ],
                "test_apply_axis": [
                    "self"
                ],
                "test_apply_subset": [
                    "self"
                ],
                "test_applymap_subset": [
                    "self"
                ],
                "test_applymap_subset_multiindex": [
                    "self"
                ],
                "test_applymap_subset_multiindex_code": [
                    "self"
                ],
                "test_where_with_one_style": [
                    "self"
                ],
                "test_where_subset": [
                    "self"
                ],
                "test_where_subset_compare_with_applymap": [
                    "self"
                ],
                "test_empty": [
                    "self"
                ],
                "test_duplicate": [
                    "self"
                ],
                "test_bar_align_left": [
                    "self"
                ],
                "test_bar_align_left_0points": [
                    "self"
                ],
                "test_bar_align_mid_pos_and_neg": [
                    "self"
                ],
                "test_bar_align_mid_all_pos": [
                    "self"
                ],
                "test_bar_align_mid_all_neg": [
                    "self"
                ],
                "test_bar_align_zero_pos_and_neg": [
                    "self"
                ],
                "test_bar_align_left_axis_none": [
                    "self"
                ],
                "test_bar_align_zero_axis_none": [
                    "self"
                ],
                "test_bar_align_mid_axis_none": [
                    "self"
                ],
                "test_bar_align_mid_vmin": [
                    "self"
                ],
                "test_bar_align_mid_vmax": [
                    "self"
                ],
                "test_bar_align_mid_vmin_vmax_wide": [
                    "self"
                ],
                "test_bar_align_mid_vmin_vmax_clipping": [
                    "self"
                ],
                "test_bar_align_mid_nans": [
                    "self"
                ],
                "test_bar_align_zero_nans": [
                    "self"
                ],
                "test_bar_bad_align_raises": [
                    "self"
                ],
                "test_format_with_na_rep": [
                    "self"
                ],
                "test_init_with_na_rep": [
                    "self"
                ],
                "test_set_na_rep": [
                    "self"
                ],
                "test_format_non_numeric_na": [
                    "self"
                ],
                "test_format_with_bad_na_rep": [
                    "self"
                ],
                "test_highlight_null": [
                    "self",
                    "null_color"
                ],
                "test_highlight_null_subset": [
                    "self"
                ],
                "test_nonunique_raises": [
                    "self"
                ],
                "test_caption": [
                    "self"
                ],
                "test_uuid": [
                    "self"
                ],
                "test_unique_id": [
                    "self"
                ],
                "test_table_styles": [
                    "self"
                ],
                "test_table_attributes": [
                    "self"
                ],
                "test_precision": [
                    "self"
                ],
                "test_apply_none": [
                    "self"
                ],
                "test_trim": [
                    "self"
                ],
                "test_highlight_max": [
                    "self"
                ],
                "test_export": [
                    "self"
                ],
                "test_display_format": [
                    "self"
                ],
                "test_display_format_raises": [
                    "self"
                ],
                "test_display_set_precision": [
                    "self"
                ],
                "test_display_subset": [
                    "self"
                ],
                "test_display_dict": [
                    "self"
                ],
                "test_bad_apply_shape": [
                    "self"
                ],
                "test_apply_bad_return": [
                    "self"
                ],
                "test_apply_bad_labels": [
                    "self"
                ],
                "test_get_level_lengths": [
                    "self"
                ],
                "test_get_level_lengths_un_sorted": [
                    "self"
                ],
                "test_mi_sparse": [
                    "self"
                ],
                "test_mi_sparse_disabled": [
                    "self"
                ],
                "test_mi_sparse_index_names": [
                    "self"
                ],
                "test_mi_sparse_column_names": [
                    "self"
                ],
                "test_hide_single_index": [
                    "self"
                ],
                "test_hide_multiindex": [
                    "self"
                ],
                "test_hide_columns_single_level": [
                    "self"
                ],
                "test_hide_columns_mult_levels": [
                    "self"
                ],
                "test_pipe": [
                    "self"
                ],
                "test_no_cell_ids": [
                    "self"
                ]
            },
            "TestStylerMatplotlibDep": {
                "test_background_gradient": [
                    "self"
                ],
                "test_text_color_threshold": [
                    "self",
                    "c_map",
                    "expected"
                ],
                "test_text_color_threshold_raises": [
                    "self",
                    "text_color_threshold"
                ],
                "test_background_gradient_axis": [
                    "self"
                ],
                "test_background_gradient_vmin_vmax": [
                    "self"
                ],
                "test_background_gradient_int64": [
                    "self"
                ]
            }
        },
        "pandas.tests.io.formats.test_to_excel": {
            "test_css_to_excel": [
                "css",
                "expected"
            ],
            "test_css_to_excel_multiple": [],
            "test_css_to_excel_inherited": [
                "css",
                "inherited",
                "expected"
            ],
            "test_css_to_excel_good_colors": [
                "input_color",
                "output_color"
            ],
            "test_css_to_excel_bad_colors": [
                "input_color"
            ]
        },
        "pandas.tests.io.formats.test_printing": {
            "test_adjoin": [],
            "test_repr_binary_type": [],
            "TestFormattBase": {
                "test_adjoin": [
                    "self"
                ],
                "test_adjoin_unicode": [
                    "self"
                ],
                "test_justify": [
                    "self"
                ],
                "test_east_asian_len": [
                    "self"
                ],
                "test_ambiguous_width": [
                    "self"
                ]
            },
            "TestTableSchemaRepr": {
                "setup_class": [
                    "cls"
                ],
                "test_publishes": [
                    "self"
                ],
                "test_publishes_not_implemented": [
                    "self"
                ],
                "test_config_on": [
                    "self"
                ],
                "test_config_default_off": [
                    "self"
                ],
                "test_enable_data_resource_formatter": [
                    "self"
                ]
            }
        },
        "pandas.tests.io.formats.test_to_markdown": {
            "test_simple": [],
            "test_other_tablefmt": [],
            "test_other_headers": [],
            "test_series": [],
            "test_no_buf": [
                "capsys"
            ],
            "test_index": [
                "index",
                "showindex"
            ]
        },
        "pandas.tests.io.formats.test_console": {
            "test_detect_console_encoding_from_stdout_stdin": [
                "monkeypatch",
                "empty",
                "filled"
            ],
            "test_detect_console_encoding_fallback_to_locale": [
                "monkeypatch",
                "encoding"
            ],
            "test_detect_console_encoding_fallback_to_default": [
                "monkeypatch",
                "std",
                "locale"
            ],
            "MockEncoding": {
                "__init__": [
                    "self",
                    "encoding"
                ],
                "encoding": [
                    "self"
                ],
                "raise_or_return": [
                    "val"
                ]
            }
        },
        "pandas.tests.io.formats": {},
        "pandas.tests.io.json.test_ujson": {
            "_clean_dict": [
                "d"
            ],
            "orient": [
                "request"
            ],
            "numpy": [
                "request"
            ],
            "get_int32_compat_dtype": [
                "numpy",
                "orient"
            ],
            "TestUltraJSONTests": {
                "test_encode_decimal": [
                    "self"
                ],
                "test_encode_string_conversion": [
                    "self",
                    "ensure_ascii"
                ],
                "test_double_long_numbers": [
                    "self",
                    "long_number"
                ],
                "test_encode_non_c_locale": [
                    "self"
                ],
                "test_decimal_decode_test_precise": [
                    "self"
                ],
                "test_encode_double_tiny_exponential": [
                    "self"
                ],
                "test_encode_dict_with_unicode_keys": [
                    "self",
                    "unicode_key"
                ],
                "test_encode_double_conversion": [
                    "self",
                    "double_input"
                ],
                "test_encode_with_decimal": [
                    "self"
                ],
                "test_encode_array_of_nested_arrays": [
                    "self"
                ],
                "test_encode_array_of_doubles": [
                    "self"
                ],
                "test_double_precision": [
                    "self"
                ],
                "test_invalid_double_precision": [
                    "self",
                    "invalid_val"
                ],
                "test_encode_string_conversion2": [
                    "self"
                ],
                "test_encode_unicode_conversion": [
                    "self",
                    "unicode_input"
                ],
                "test_encode_control_escaping": [
                    "self"
                ],
                "test_encode_unicode_surrogate_pair": [
                    "self"
                ],
                "test_encode_unicode_4bytes_utf8": [
                    "self"
                ],
                "test_encode_unicode_4bytes_utf8highest": [
                    "self"
                ],
                "test_encode_array_in_array": [
                    "self"
                ],
                "test_encode_num_conversion": [
                    "self",
                    "num_input"
                ],
                "test_encode_list_conversion": [
                    "self"
                ],
                "test_encode_dict_conversion": [
                    "self"
                ],
                "test_encode_builtin_values_conversion": [
                    "self",
                    "builtin_value"
                ],
                "test_encode_datetime_conversion": [
                    "self"
                ],
                "test_encode_date_conversion": [
                    "self"
                ],
                "test_encode_time_conversion_basic": [
                    "self",
                    "test"
                ],
                "test_encode_time_conversion_pytz": [
                    "self"
                ],
                "test_encode_time_conversion_dateutil": [
                    "self"
                ],
                "test_encode_as_null": [
                    "self",
                    "decoded_input"
                ],
                "test_datetime_units": [
                    "self"
                ],
                "test_encode_to_utf8": [
                    "self"
                ],
                "test_decode_from_unicode": [
                    "self"
                ],
                "test_encode_recursion_max": [
                    "self"
                ],
                "test_decode_jibberish": [
                    "self"
                ],
                "test_decode_broken_json": [
                    "self",
                    "broken_json"
                ],
                "test_decode_depth_too_big": [
                    "self",
                    "too_big_char"
                ],
                "test_decode_bad_string": [
                    "self",
                    "bad_string"
                ],
                "test_decode_broken_json_leak": [
                    "self",
                    "broken_json"
                ],
                "test_decode_invalid_dict": [
                    "self",
                    "invalid_dict"
                ],
                "test_decode_numeric_int": [
                    "self",
                    "numeric_int_as_str"
                ],
                "test_encode_null_character": [
                    "self"
                ],
                "test_decode_null_character": [
                    "self"
                ],
                "test_encode_list_long_conversion": [
                    "self"
                ],
                "test_encode_long_conversion": [
                    "self"
                ],
                "test_dumps_ints_larger_than_maxsize": [
                    "self",
                    "bigNum"
                ],
                "test_decode_numeric_int_exp": [
                    "self",
                    "int_exp"
                ],
                "test_loads_non_str_bytes_raises": [
                    "self"
                ],
                "test_decode_number_with_32bit_sign_bit": [
                    "self",
                    "val"
                ],
                "test_encode_big_escape": [
                    "self"
                ],
                "test_decode_big_escape": [
                    "self"
                ],
                "test_to_dict": [
                    "self"
                ],
                "test_default_handler": [
                    "self"
                ]
            },
            "TestNumpyJSONTests": {
                "test_bool": [
                    "self",
                    "bool_input"
                ],
                "test_bool_array": [
                    "self"
                ],
                "test_int": [
                    "self",
                    "any_int_dtype"
                ],
                "test_int_array": [
                    "self",
                    "any_int_dtype"
                ],
                "test_int_max": [
                    "self",
                    "any_int_dtype"
                ],
                "test_float": [
                    "self",
                    "float_dtype"
                ],
                "test_float_array": [
                    "self",
                    "float_dtype"
                ],
                "test_float_max": [
                    "self",
                    "float_dtype"
                ],
                "test_array_basic": [
                    "self"
                ],
                "test_array_reshaped": [
                    "self",
                    "shape"
                ],
                "test_array_list": [
                    "self"
                ],
                "test_array_float": [
                    "self"
                ],
                "test_0d_array": [
                    "self"
                ],
                "test_array_numpy_except": [
                    "self",
                    "bad_input",
                    "exc_type",
                    "kwargs"
                ],
                "test_array_numpy_labelled": [
                    "self"
                ]
            },
            "TestPandasJSONTests": {
                "test_dataframe": [
                    "self",
                    "orient",
                    "numpy"
                ],
                "test_dataframe_nested": [
                    "self",
                    "orient"
                ],
                "test_dataframe_numpy_labelled": [
                    "self",
                    "orient"
                ],
                "test_series": [
                    "self",
                    "orient",
                    "numpy"
                ],
                "test_series_nested": [
                    "self",
                    "orient"
                ],
                "test_index": [
                    "self"
                ],
                "test_datetime_index": [
                    "self"
                ],
                "test_decode_invalid_array": [
                    "self",
                    "invalid_arr"
                ],
                "test_decode_array": [
                    "self",
                    "arr"
                ],
                "test_decode_extreme_numbers": [
                    "self",
                    "extreme_num"
                ],
                "test_decode_too_extreme_numbers": [
                    "self",
                    "too_extreme_num"
                ],
                "test_decode_with_trailing_whitespaces": [
                    "self"
                ],
                "test_decode_with_trailing_non_whitespaces": [
                    "self"
                ],
                "test_decode_array_with_big_int": [
                    "self"
                ],
                "test_decode_floating_point": [
                    "self",
                    "sign",
                    "float_number"
                ],
                "test_encode_big_set": [
                    "self"
                ],
                "test_encode_empty_set": [
                    "self"
                ],
                "test_encode_set": [
                    "self"
                ],
                "test_encode_timedelta_iso": [
                    "self",
                    "td"
                ]
            }
        },
        "pandas.tests.io.json.test_normalize": {
            "deep_nested": [],
            "state_data": [],
            "author_missing_data": [],
            "missing_metadata": [],
            "max_level_test_input_data": [],
            "TestJSONNormalize": {
                "test_simple_records": [
                    "self"
                ],
                "test_simple_normalize": [
                    "self",
                    "state_data"
                ],
                "test_empty_array": [
                    "self"
                ],
                "test_simple_normalize_with_separator": [
                    "self",
                    "deep_nested"
                ],
                "test_value_array_record_prefix": [
                    "self"
                ],
                "test_nested_object_record_path": [
                    "self"
                ],
                "test_more_deeply_nested": [
                    "self",
                    "deep_nested"
                ],
                "test_shallow_nested": [
                    "self"
                ],
                "test_nested_meta_path_with_nested_record_path": [
                    "self",
                    "state_data"
                ],
                "test_meta_name_conflict": [
                    "self"
                ],
                "test_meta_parameter_not_modified": [
                    "self"
                ],
                "test_record_prefix": [
                    "self",
                    "state_data"
                ],
                "test_non_ascii_key": [
                    "self"
                ],
                "test_missing_field": [
                    "self",
                    "author_missing_data"
                ],
                "test_max_level_with_records_path": [
                    "self",
                    "max_level",
                    "expected"
                ],
                "test_nested_flattening_consistent": [
                    "self"
                ],
                "test_nonetype_record_path": [
                    "self",
                    "nulls_fixture"
                ],
                "test_non_list_record_path_errors": [
                    "self",
                    "value"
                ],
                "test_meta_non_iterable": [
                    "self"
                ]
            },
            "TestNestedToRecord": {
                "test_flat_stays_flat": [
                    "self"
                ],
                "test_one_level_deep_flattens": [
                    "self"
                ],
                "test_nested_flattens": [
                    "self"
                ],
                "test_json_normalize_errors": [
                    "self",
                    "missing_metadata"
                ],
                "test_missing_meta": [
                    "self",
                    "missing_metadata"
                ],
                "test_donot_drop_nonevalues": [
                    "self"
                ],
                "test_nonetype_top_level_bottom_level": [
                    "self"
                ],
                "test_nonetype_multiple_levels": [
                    "self"
                ],
                "test_with_max_level": [
                    "self",
                    "max_level",
                    "expected",
                    "max_level_test_input_data"
                ],
                "test_with_large_max_level": [
                    "self"
                ],
                "test_deprecated_import": [
                    "self"
                ],
                "test_series_non_zero_index": [
                    "self"
                ]
            }
        },
        "pandas.tests.io.json.test_json_table_schema": {
            "TestBuildSchema": {
                "setup_method": [
                    "self",
                    "method"
                ],
                "test_build_table_schema": [
                    "self"
                ],
                "test_series": [
                    "self"
                ],
                "test_series_unnamed": [
                    "self"
                ],
                "test_multiindex": [
                    "self"
                ]
            },
            "TestTableSchemaType": {
                "test_as_json_table_type_int_data": [
                    "self",
                    "int_type"
                ],
                "test_as_json_table_type_float_data": [
                    "self",
                    "float_type"
                ],
                "test_as_json_table_type_bool_data": [
                    "self",
                    "bool_type"
                ],
                "test_as_json_table_type_date_data": [
                    "self",
                    "date_data"
                ],
                "test_as_json_table_type_string_data": [
                    "self",
                    "str_data"
                ],
                "test_as_json_table_type_categorical_data": [
                    "self",
                    "cat_data"
                ],
                "test_as_json_table_type_int_dtypes": [
                    "self",
                    "int_dtype"
                ],
                "test_as_json_table_type_float_dtypes": [
                    "self",
                    "float_dtype"
                ],
                "test_as_json_table_type_bool_dtypes": [
                    "self",
                    "bool_dtype"
                ],
                "test_as_json_table_type_date_dtypes": [
                    "self",
                    "date_dtype"
                ],
                "test_as_json_table_type_timedelta_dtypes": [
                    "self",
                    "td_dtype"
                ],
                "test_as_json_table_type_string_dtypes": [
                    "self",
                    "str_dtype"
                ],
                "test_as_json_table_type_categorical_dtypes": [
                    "self"
                ]
            },
            "TestTableOrient": {
                "setup_method": [
                    "self",
                    "method"
                ],
                "test_build_series": [
                    "self"
                ],
                "test_read_json_from_to_json_results": [
                    "self"
                ],
                "test_to_json": [
                    "self"
                ],
                "test_to_json_float_index": [
                    "self"
                ],
                "test_to_json_period_index": [
                    "self"
                ],
                "test_to_json_categorical_index": [
                    "self"
                ],
                "test_date_format_raises": [
                    "self"
                ],
                "test_convert_pandas_type_to_json_field_int": [
                    "self",
                    "index_or_series"
                ],
                "test_convert_pandas_type_to_json_field_float": [
                    "self",
                    "index_or_series"
                ],
                "test_convert_pandas_type_to_json_field_datetime": [
                    "self",
                    "dt_args",
                    "extra_exp",
                    "wrapper"
                ],
                "test_convert_pandas_type_to_json_period_range": [
                    "self"
                ],
                "test_convert_pandas_type_to_json_field_categorical": [
                    "self",
                    "kind",
                    "ordered"
                ],
                "test_convert_json_field_to_pandas_type": [
                    "self",
                    "inp",
                    "exp"
                ],
                "test_convert_json_field_to_pandas_type_raises": [
                    "self",
                    "inp"
                ],
                "test_categorical": [
                    "self"
                ],
                "test_set_names_unset": [
                    "self",
                    "idx",
                    "nm",
                    "prop"
                ],
                "test_warns_non_roundtrippable_names": [
                    "self",
                    "idx"
                ],
                "test_timestamp_in_columns": [
                    "self"
                ],
                "test_overlapping_names": [
                    "self",
                    "case"
                ],
                "test_mi_falsey_name": [
                    "self"
                ]
            },
            "TestTableOrientReader": {
                "test_read_json_table_orient": [
                    "self",
                    "index_nm",
                    "vals",
                    "recwarn"
                ],
                "test_read_json_table_orient_raises": [
                    "self",
                    "index_nm",
                    "vals",
                    "recwarn"
                ],
                "test_comprehensive": [
                    "self"
                ],
                "test_multiindex": [
                    "self",
                    "index_names"
                ],
                "test_empty_frame_roundtrip": [
                    "self"
                ]
            }
        },
        "pandas.tests.io.json.test_deprecated_kwargs": {
            "test_deprecated_kwargs": [],
            "test_good_kwargs": []
        },
        "pandas.tests.io.json.test_pandas": {
            "assert_json_roundtrip_equal": [
                "result",
                "expected",
                "orient"
            ],
            "TestPandasContainer": {
                "setup": [
                    "self"
                ],
                "datetime_series": [
                    "self"
                ],
                "datetime_frame": [
                    "self"
                ],
                "test_frame_double_encoded_labels": [
                    "self",
                    "orient"
                ],
                "test_frame_non_unique_index": [
                    "self",
                    "orient"
                ],
                "test_frame_non_unique_index_raises": [
                    "self",
                    "orient"
                ],
                "test_frame_non_unique_columns": [
                    "self",
                    "orient",
                    "data"
                ],
                "test_frame_non_unique_columns_raises": [
                    "self",
                    "orient"
                ],
                "test_frame_default_orient": [
                    "self",
                    "float_frame"
                ],
                "test_roundtrip_simple": [
                    "self",
                    "orient",
                    "convert_axes",
                    "numpy",
                    "dtype",
                    "float_frame"
                ],
                "test_roundtrip_intframe": [
                    "self",
                    "orient",
                    "convert_axes",
                    "numpy",
                    "dtype",
                    "int_frame"
                ],
                "test_roundtrip_str_axes": [
                    "self",
                    "orient",
                    "convert_axes",
                    "numpy",
                    "dtype"
                ],
                "test_roundtrip_categorical": [
                    "self",
                    "orient",
                    "convert_axes",
                    "numpy"
                ],
                "test_roundtrip_empty": [
                    "self",
                    "orient",
                    "convert_axes",
                    "numpy",
                    "empty_frame"
                ],
                "test_roundtrip_timestamp": [
                    "self",
                    "orient",
                    "convert_axes",
                    "numpy",
                    "datetime_frame"
                ],
                "test_roundtrip_mixed": [
                    "self",
                    "orient",
                    "convert_axes",
                    "numpy"
                ],
                "test_frame_from_json_bad_data_raises": [
                    "self",
                    "data",
                    "msg",
                    "orient"
                ],
                "test_frame_from_json_missing_data": [
                    "self",
                    "orient",
                    "convert_axes",
                    "numpy",
                    "dtype"
                ],
                "test_frame_infinity": [
                    "self",
                    "orient",
                    "inf",
                    "dtype"
                ],
                "test_frame_to_json_float_precision": [
                    "self",
                    "value",
                    "precision",
                    "expected_val"
                ],
                "test_frame_to_json_except": [
                    "self"
                ],
                "test_frame_empty": [
                    "self"
                ],
                "test_frame_empty_mixedtype": [
                    "self"
                ],
                "test_frame_mixedtype_orient": [
                    "self"
                ],
                "test_v12_compat": [
                    "self",
                    "datapath"
                ],
                "test_blocks_compat_GH9037": [
                    "self"
                ],
                "test_frame_nonprintable_bytes": [
                    "self"
                ],
                "test_label_overflow": [
                    "self"
                ],
                "test_series_non_unique_index": [
                    "self"
                ],
                "test_series_default_orient": [
                    "self",
                    "string_series"
                ],
                "test_series_roundtrip_simple": [
                    "self",
                    "orient",
                    "numpy",
                    "string_series"
                ],
                "test_series_roundtrip_object": [
                    "self",
                    "orient",
                    "numpy",
                    "dtype",
                    "object_series"
                ],
                "test_series_roundtrip_empty": [
                    "self",
                    "orient",
                    "numpy",
                    "empty_series"
                ],
                "test_series_roundtrip_timeseries": [
                    "self",
                    "orient",
                    "numpy",
                    "datetime_series"
                ],
                "test_series_roundtrip_numeric": [
                    "self",
                    "orient",
                    "numpy",
                    "dtype"
                ],
                "test_series_to_json_except": [
                    "self"
                ],
                "test_series_from_json_precise_float": [
                    "self"
                ],
                "test_series_with_dtype": [
                    "self"
                ],
                "test_series_with_dtype_datetime": [
                    "self",
                    "dtype",
                    "expected"
                ],
                "test_frame_from_json_precise_float": [
                    "self"
                ],
                "test_typ": [
                    "self"
                ],
                "test_reconstruction_index": [
                    "self"
                ],
                "test_path": [
                    "self",
                    "float_frame",
                    "int_frame",
                    "datetime_frame"
                ],
                "test_axis_dates": [
                    "self",
                    "datetime_series",
                    "datetime_frame"
                ],
                "test_convert_dates": [
                    "self",
                    "datetime_series",
                    "datetime_frame"
                ],
                "test_date_index_and_values": [
                    "self",
                    "date_format",
                    "as_object",
                    "date_typ"
                ],
                "test_convert_dates_infer": [
                    "self",
                    "infer_word"
                ],
                "test_date_format_frame": [
                    "self",
                    "date",
                    "date_unit",
                    "datetime_frame"
                ],
                "test_date_format_frame_raises": [
                    "self",
                    "datetime_frame"
                ],
                "test_date_format_series": [
                    "self",
                    "date",
                    "date_unit",
                    "datetime_series"
                ],
                "test_date_format_series_raises": [
                    "self",
                    "datetime_series"
                ],
                "test_date_unit": [
                    "self",
                    "unit",
                    "datetime_frame"
                ],
                "test_weird_nested_json": [
                    "self"
                ],
                "test_doc_example": [
                    "self"
                ],
                "test_misc_example": [
                    "self"
                ],
                "test_round_trip_exception_": [
                    "self"
                ],
                "test_url": [
                    "self",
                    "field",
                    "dtype"
                ],
                "test_timedelta": [
                    "self"
                ],
                "test_mixed_timedelta_datetime": [
                    "self"
                ],
                "test_timedelta_to_json": [
                    "self",
                    "as_object",
                    "date_format",
                    "timedelta_typ"
                ],
                "test_default_handler": [
                    "self"
                ],
                "test_default_handler_indirect": [
                    "self"
                ],
                "test_default_handler_numpy_unsupported_dtype": [
                    "self"
                ],
                "test_default_handler_raises": [
                    "self"
                ],
                "test_categorical": [
                    "self"
                ],
                "test_datetime_tz": [
                    "self"
                ],
                "test_sparse": [
                    "self"
                ],
                "test_tz_is_utc": [
                    "self",
                    "ts"
                ],
                "test_tz_range_is_utc": [
                    "self",
                    "tz_range"
                ],
                "test_read_inline_jsonl": [
                    "self"
                ],
                "test_read_s3_jsonl": [
                    "self",
                    "s3_resource"
                ],
                "test_read_local_jsonl": [
                    "self"
                ],
                "test_read_jsonl_unicode_chars": [
                    "self"
                ],
                "test_to_json_large_numbers": [
                    "self",
                    "bigNum"
                ],
                "test_read_json_large_numbers": [
                    "self",
                    "bigNum"
                ],
                "test_read_json_large_numbers2": [
                    "self"
                ],
                "test_to_jsonl": [
                    "self"
                ],
                "test_latin_encoding": [
                    "self"
                ],
                "test_data_frame_size_after_to_json": [
                    "self"
                ],
                "test_from_json_to_json_table_index_and_columns": [
                    "self",
                    "index",
                    "columns"
                ],
                "test_from_json_to_json_table_dtypes": [
                    "self"
                ],
                "test_read_json_table_dtype_raises": [
                    "self",
                    "dtype"
                ],
                "test_read_json_table_convert_axes_raises": [
                    "self"
                ],
                "test_index_false_to_json_split": [
                    "self",
                    "data",
                    "expected"
                ],
                "test_index_false_to_json_table": [
                    "self",
                    "data"
                ],
                "test_index_false_error_to_json": [
                    "self",
                    "orient"
                ],
                "test_index_false_from_json_to_json": [
                    "self",
                    "orient",
                    "index"
                ],
                "test_read_timezone_information": [
                    "self"
                ],
                "test_timedelta_as_label": [
                    "self",
                    "date_format",
                    "key"
                ],
                "test_tuple_labels": [
                    "self",
                    "orient",
                    "expected"
                ],
                "test_to_json_indent": [
                    "self",
                    "indent"
                ],
                "test_json_indent_all_orients": [
                    "self",
                    "orient",
                    "expected"
                ],
                "test_json_negative_indent_raises": [
                    "self"
                ],
                "test_emca_262_nan_inf_support": [
                    "self"
                ],
                "test_deprecate_numpy_argument_read_json": [
                    "self"
                ],
                "test_frame_int_overflow": [
                    "self"
                ],
                "test_json_multiindex": [
                    "self",
                    "dataframe",
                    "expected"
                ],
                "test_to_s3": [
                    "self",
                    "s3_resource"
                ],
                "test_json_pandas_na": [
                    "self"
                ],
                "test_json_pandas_nulls": [
                    "self",
                    "nulls_fixture"
                ],
                "test_readjson_bool_series": [
                    "self"
                ]
            }
        },
        "pandas.tests.io.json.test_readlines": {
            "lines_json_df": [],
            "test_read_jsonl": [],
            "test_read_jsonl_unicode_chars": [],
            "test_to_jsonl": [],
            "test_readjson_chunks": [
                "lines_json_df",
                "chunksize"
            ],
            "test_readjson_chunksize_requires_lines": [
                "lines_json_df"
            ],
            "test_readjson_chunks_series": [],
            "test_readjson_each_chunk": [
                "lines_json_df"
            ],
            "test_readjson_chunks_from_file": [],
            "test_readjson_chunks_closes": [
                "chunksize"
            ],
            "test_readjson_invalid_chunksize": [
                "lines_json_df",
                "chunksize"
            ],
            "test_readjson_chunks_multiple_empty_lines": [
                "chunksize"
            ],
            "test_readjson_unicode": [
                "monkeypatch"
            ],
            "test_readjson_nrows": [
                "nrows"
            ],
            "test_readjson_nrows_chunks": [
                "nrows",
                "chunksize"
            ],
            "test_readjson_nrows_requires_lines": [],
            "test_readjson_lines_chunks_fileurl": [
                "datapath"
            ]
        },
        "pandas.tests.io.json.conftest": {
            "orient": [
                "request"
            ]
        },
        "pandas.tests.io.json": {},
        "pandas.tests.io.json.test_compression": {
            "test_compression_roundtrip": [
                "compression"
            ],
            "test_read_zipped_json": [
                "datapath"
            ],
            "test_with_s3_url": [
                "compression",
                "s3_resource"
            ],
            "test_lines_with_compression": [
                "compression"
            ],
            "test_chunksize_with_compression": [
                "compression"
            ],
            "test_write_unsupported_compression_type": [],
            "test_read_unsupported_compression_type": [],
            "test_to_json_compression": [
                "compression_only",
                "read_infer",
                "to_infer"
            ]
        },
        "pandas.tests.io.pytables.test_pytables_missing": {
            "test_pytables_raises": []
        },
        "pandas.tests.io.pytables.common": {
            "safe_remove": [
                "path"
            ],
            "safe_close": [
                "store"
            ],
            "create_tempfile": [
                "path"
            ],
            "ensure_clean_store": [
                "path",
                "mode",
                "complevel",
                "complib",
                "fletcher32"
            ],
            "ensure_clean_path": [
                "path"
            ],
            "_maybe_remove": [
                "store",
                "key"
            ]
        },
        "pandas.tests.io.pytables.test_timezones": {
            "_compare_with_tz": [
                "a",
                "b"
            ],
            "test_append_with_timezones_dateutil": [
                "setup_path"
            ],
            "test_append_with_timezones_pytz": [
                "setup_path"
            ],
            "test_tseries_select_index_column": [
                "setup_path"
            ],
            "test_timezones_fixed": [
                "setup_path"
            ],
            "test_fixed_offset_tz": [
                "setup_path"
            ],
            "test_store_timezone": [
                "setup_path"
            ],
            "test_legacy_datetimetz_object": [
                "datapath",
                "setup_path"
            ],
            "test_dst_transitions": [
                "setup_path"
            ],
            "test_read_with_where_tz_aware_index": [
                "setup_path"
            ],
            "test_py2_created_with_datetimez": [
                "datapath",
                "setup_path"
            ]
        },
        "pandas.tests.io.pytables.test_store": {
            "TestHDFStore": {
                "test_format_type": [
                    "self",
                    "setup_path"
                ],
                "test_format_kwarg_in_constructor": [
                    "self",
                    "setup_path"
                ],
                "test_context": [
                    "self",
                    "setup_path"
                ],
                "test_conv_read_write": [
                    "self",
                    "setup_path"
                ],
                "test_long_strings": [
                    "self",
                    "setup_path"
                ],
                "test_api": [
                    "self",
                    "setup_path"
                ],
                "test_api_default_format": [
                    "self",
                    "setup_path"
                ],
                "test_keys": [
                    "self",
                    "setup_path"
                ],
                "test_no_track_times": [
                    "self",
                    "setup_path"
                ],
                "test_non_pandas_keys": [
                    "self",
                    "setup_path"
                ],
                "test_keys_illegal_include_keyword_value": [
                    "self",
                    "setup_path"
                ],
                "test_keys_ignore_hdf_softlink": [
                    "self",
                    "setup_path"
                ],
                "test_iter_empty": [
                    "self",
                    "setup_path"
                ],
                "test_repr": [
                    "self",
                    "setup_path"
                ],
                "test_contains": [
                    "self",
                    "setup_path"
                ],
                "test_versioning": [
                    "self",
                    "setup_path"
                ],
                "test_mode": [
                    "self",
                    "setup_path"
                ],
                "test_reopen_handle": [
                    "self",
                    "setup_path"
                ],
                "test_open_args": [
                    "self",
                    "setup_path"
                ],
                "test_flush": [
                    "self",
                    "setup_path"
                ],
                "test_get": [
                    "self",
                    "setup_path"
                ],
                "test_walk": [
                    "self",
                    "where",
                    "expected",
                    "setup_path"
                ],
                "test_getattr": [
                    "self",
                    "setup_path"
                ],
                "test_put": [
                    "self",
                    "setup_path"
                ],
                "test_put_string_index": [
                    "self",
                    "setup_path"
                ],
                "test_put_compression": [
                    "self",
                    "setup_path"
                ],
                "test_put_compression_blosc": [
                    "self",
                    "setup_path"
                ],
                "test_complibs_default_settings": [
                    "self",
                    "setup_path"
                ],
                "test_complibs": [
                    "self",
                    "setup_path"
                ],
                "test_put_integer": [
                    "self",
                    "setup_path"
                ],
                "test_put_mixed_type": [
                    "self",
                    "setup_path"
                ],
                "test_append": [
                    "self",
                    "setup_path"
                ],
                "test_append_series": [
                    "self",
                    "setup_path"
                ],
                "test_store_index_types": [
                    "self",
                    "setup_path"
                ],
                "test_encoding": [
                    "self",
                    "setup_path"
                ],
                "test_latin_encoding": [
                    "self",
                    "setup_path",
                    "dtype",
                    "val"
                ],
                "test_append_some_nans": [
                    "self",
                    "setup_path"
                ],
                "test_append_all_nans": [
                    "self",
                    "setup_path"
                ],
                "test_read_missing_key_close_store": [
                    "self",
                    "setup_path"
                ],
                "test_read_missing_key_opened_store": [
                    "self",
                    "setup_path"
                ],
                "test_append_frame_column_oriented": [
                    "self",
                    "setup_path"
                ],
                "test_append_with_different_block_ordering": [
                    "self",
                    "setup_path"
                ],
                "test_append_with_strings": [
                    "self",
                    "setup_path"
                ],
                "test_append_with_empty_string": [
                    "self",
                    "setup_path"
                ],
                "test_to_hdf_with_min_itemsize": [
                    "self",
                    "setup_path"
                ],
                "test_to_hdf_errors": [
                    "self",
                    "format",
                    "setup_path"
                ],
                "test_append_with_data_columns": [
                    "self",
                    "setup_path"
                ],
                "test_create_table_index": [
                    "self",
                    "setup_path"
                ],
                "test_create_table_index_data_columns_argument": [
                    "self",
                    "setup_path"
                ],
                "test_append_hierarchical": [
                    "self",
                    "setup_path"
                ],
                "test_column_multiindex": [
                    "self",
                    "setup_path"
                ],
                "test_store_multiindex": [
                    "self",
                    "setup_path"
                ],
                "test_select_columns_in_where": [
                    "self",
                    "setup_path"
                ],
                "test_mi_data_columns": [
                    "self",
                    "setup_path"
                ],
                "test_pass_spec_to_storer": [
                    "self",
                    "setup_path"
                ],
                "test_append_misc": [
                    "self",
                    "setup_path"
                ],
                "test_append_raise": [
                    "self",
                    "setup_path"
                ],
                "test_table_index_incompatible_dtypes": [
                    "self",
                    "setup_path"
                ],
                "test_table_values_dtypes_roundtrip": [
                    "self",
                    "setup_path"
                ],
                "test_table_mixed_dtypes": [
                    "self",
                    "setup_path"
                ],
                "test_unimplemented_dtypes_table_columns": [
                    "self",
                    "setup_path"
                ],
                "test_calendar_roundtrip_issue": [
                    "self",
                    "setup_path"
                ],
                "test_roundtrip_tz_aware_index": [
                    "self",
                    "setup_path"
                ],
                "test_append_with_timedelta": [
                    "self",
                    "setup_path"
                ],
                "test_remove": [
                    "self",
                    "setup_path"
                ],
                "test_invalid_terms": [
                    "self",
                    "setup_path"
                ],
                "test_same_name_scoping": [
                    "self",
                    "setup_path"
                ],
                "test_series": [
                    "self",
                    "setup_path"
                ],
                "test_float_index": [
                    "self",
                    "setup_path"
                ],
                "test_tuple_index": [
                    "self",
                    "setup_path"
                ],
                "test_index_types": [
                    "self",
                    "setup_path"
                ],
                "test_timeseries_preepoch": [
                    "self",
                    "setup_path"
                ],
                "test_frame": [
                    "self",
                    "compression",
                    "setup_path"
                ],
                "test_empty_series_frame": [
                    "self",
                    "setup_path"
                ],
                "test_empty_series": [
                    "self",
                    "dtype",
                    "setup_path"
                ],
                "test_can_serialize_dates": [
                    "self",
                    "setup_path"
                ],
                "test_store_hierarchical": [
                    "self",
                    "setup_path"
                ],
                "test_store_index_name": [
                    "self",
                    "setup_path"
                ],
                "test_store_index_name_with_tz": [
                    "self",
                    "setup_path"
                ],
                "test_store_index_name_numpy_str": [
                    "self",
                    "table_format",
                    "setup_path"
                ],
                "test_store_series_name": [
                    "self",
                    "setup_path"
                ],
                "test_store_mixed": [
                    "self",
                    "compression",
                    "setup_path"
                ],
                "test_select_with_dups": [
                    "self",
                    "setup_path"
                ],
                "test_overwrite_node": [
                    "self",
                    "setup_path"
                ],
                "test_select": [
                    "self",
                    "setup_path"
                ],
                "test_select_dtypes": [
                    "self",
                    "setup_path"
                ],
                "test_select_with_many_inputs": [
                    "self",
                    "setup_path"
                ],
                "test_select_iterator": [
                    "self",
                    "setup_path"
                ],
                "test_select_iterator_complete_8014": [
                    "self",
                    "setup_path"
                ],
                "test_select_iterator_non_complete_8014": [
                    "self",
                    "setup_path"
                ],
                "test_select_iterator_many_empty_frames": [
                    "self",
                    "setup_path"
                ],
                "test_retain_index_attributes": [
                    "self",
                    "setup_path"
                ],
                "test_retain_index_attributes2": [
                    "self",
                    "setup_path"
                ],
                "test_frame_select": [
                    "self",
                    "setup_path"
                ],
                "test_frame_select_complex": [
                    "self",
                    "setup_path"
                ],
                "test_frame_select_complex2": [
                    "self",
                    "setup_path"
                ],
                "test_invalid_filtering": [
                    "self",
                    "setup_path"
                ],
                "test_string_select": [
                    "self",
                    "setup_path"
                ],
                "test_read_column": [
                    "self",
                    "setup_path"
                ],
                "test_coordinates": [
                    "self",
                    "setup_path"
                ],
                "test_append_to_multiple": [
                    "self",
                    "setup_path"
                ],
                "test_append_to_multiple_dropna": [
                    "self",
                    "setup_path"
                ],
                "test_append_to_multiple_dropna_false": [
                    "self",
                    "setup_path"
                ],
                "test_append_to_multiple_min_itemsize": [
                    "self",
                    "setup_path"
                ],
                "test_select_as_multiple": [
                    "self",
                    "setup_path"
                ],
                "test_nan_selection_bug_4858": [
                    "self",
                    "setup_path"
                ],
                "test_start_stop_table": [
                    "self",
                    "setup_path"
                ],
                "test_start_stop_multiple": [
                    "self",
                    "setup_path"
                ],
                "test_start_stop_fixed": [
                    "self",
                    "setup_path"
                ],
                "test_select_filter_corner": [
                    "self",
                    "setup_path"
                ],
                "test_path_pathlib": [
                    "self",
                    "setup_path"
                ],
                "test_contiguous_mixed_data_table": [
                    "self",
                    "start",
                    "stop",
                    "setup_path"
                ],
                "test_path_pathlib_hdfstore": [
                    "self",
                    "setup_path"
                ],
                "test_pickle_path_localpath": [
                    "self",
                    "setup_path"
                ],
                "test_path_localpath_hdfstore": [
                    "self",
                    "setup_path"
                ],
                "_check_roundtrip": [
                    "self",
                    "obj",
                    "comparator",
                    "path",
                    "compression"
                ],
                "_check_double_roundtrip": [
                    "self",
                    "obj",
                    "comparator",
                    "path",
                    "compression"
                ],
                "_check_roundtrip_table": [
                    "self",
                    "obj",
                    "comparator",
                    "path",
                    "compression"
                ],
                "test_multiple_open_close": [
                    "self",
                    "setup_path"
                ],
                "test_pytables_native_read": [
                    "self",
                    "datapath",
                    "setup_path"
                ],
                "test_pytables_native2_read": [
                    "self",
                    "datapath",
                    "setup_path"
                ],
                "test_legacy_table_fixed_format_read_py2": [
                    "self",
                    "datapath",
                    "setup_path"
                ],
                "test_legacy_table_fixed_format_read_datetime_py2": [
                    "self",
                    "datapath",
                    "setup_path"
                ],
                "test_legacy_table_read_py2": [
                    "self",
                    "datapath",
                    "setup_path"
                ],
                "test_copy": [
                    "self",
                    "setup_path"
                ],
                "test_store_datetime_fractional_secs": [
                    "self",
                    "setup_path"
                ],
                "test_tseries_indices_series": [
                    "self",
                    "setup_path"
                ],
                "test_tseries_indices_frame": [
                    "self",
                    "setup_path"
                ],
                "test_unicode_index": [
                    "self",
                    "setup_path"
                ],
                "test_unicode_longer_encoded": [
                    "self",
                    "setup_path"
                ],
                "test_store_datetime_mixed": [
                    "self",
                    "setup_path"
                ],
                "test_append_with_diff_col_name_types_raises_value_error": [
                    "self",
                    "setup_path"
                ],
                "test_query_with_nested_special_character": [
                    "self",
                    "setup_path"
                ],
                "test_categorical": [
                    "self",
                    "setup_path"
                ],
                "test_categorical_conversion": [
                    "self",
                    "setup_path"
                ],
                "test_categorical_nan_only_columns": [
                    "self",
                    "setup_path"
                ],
                "test_duplicate_column_name": [
                    "self",
                    "setup_path"
                ],
                "test_round_trip_equals": [
                    "self",
                    "setup_path"
                ],
                "test_preserve_timedeltaindex_type": [
                    "self",
                    "setup_path"
                ],
                "test_columns_multiindex_modified": [
                    "self",
                    "setup_path"
                ],
                "test_to_hdf_with_object_column_names": [
                    "self",
                    "setup_path"
                ],
                "test_read_hdf_open_store": [
                    "self",
                    "setup_path"
                ],
                "test_read_hdf_iterator": [
                    "self",
                    "setup_path"
                ],
                "test_read_hdf_errors": [
                    "self",
                    "setup_path"
                ],
                "test_read_hdf_generic_buffer_errors": [
                    "self"
                ],
                "test_invalid_complib": [
                    "self",
                    "setup_path"
                ],
                "test_read_nokey": [
                    "self",
                    "setup_path"
                ],
                "test_read_nokey_table": [
                    "self",
                    "setup_path"
                ],
                "test_read_nokey_empty": [
                    "self",
                    "setup_path"
                ],
                "test_read_from_pathlib_path": [
                    "self",
                    "setup_path"
                ],
                "test_read_from_py_localpath": [
                    "self",
                    "setup_path"
                ],
                "test_query_long_float_literal": [
                    "self",
                    "setup_path"
                ],
                "test_query_compare_column_type": [
                    "self",
                    "setup_path"
                ],
                "test_read_hdf_series_mode_r": [
                    "self",
                    "format",
                    "setup_path"
                ],
                "test_fspath": [
                    "self"
                ],
                "test_read_py2_hdf_file_in_py3": [
                    "self",
                    "datapath"
                ],
                "test_select_empty_where": [
                    "self",
                    "where"
                ],
                "test_to_hdf_multiindex_extension_dtype": [
                    "self",
                    "idx",
                    "setup_path"
                ],
                "test_unsuppored_hdf_file_error": [
                    "self",
                    "datapath"
                ]
            }
        },
        "pandas.tests.io.pytables.test_compat": {
            "pytables_hdf5_file": [],
            "TestReadPyTablesHDF5": {
                "test_read_complete": [
                    "self",
                    "pytables_hdf5_file"
                ],
                "test_read_with_start": [
                    "self",
                    "pytables_hdf5_file"
                ],
                "test_read_with_stop": [
                    "self",
                    "pytables_hdf5_file"
                ],
                "test_read_with_startstop": [
                    "self",
                    "pytables_hdf5_file"
                ]
            }
        },
        "pandas.tests.io.pytables.test_complex": {
            "test_complex_fixed": [
                "setup_path"
            ],
            "test_complex_table": [
                "setup_path"
            ],
            "test_complex_mixed_fixed": [
                "setup_path"
            ],
            "test_complex_mixed_table": [
                "setup_path"
            ],
            "test_complex_across_dimensions_fixed": [
                "setup_path"
            ],
            "test_complex_across_dimensions": [
                "setup_path"
            ],
            "test_complex_indexing_error": [
                "setup_path"
            ],
            "test_complex_series_error": [
                "setup_path"
            ],
            "test_complex_append": [
                "setup_path"
            ]
        },
        "pandas.tests.io.pytables.conftest": {
            "setup_path": [],
            "setup_mode": []
        },
        "pandas.tests.io.pytables": {},
        "pandas.tests.io.sas.test_sas7bdat": {
            "test_encoding_options": [
                "datapath"
            ],
            "test_productsales": [
                "datapath"
            ],
            "test_12659": [
                "datapath"
            ],
            "test_airline": [
                "datapath"
            ],
            "test_date_time": [
                "datapath"
            ],
            "test_compact_numerical_values": [
                "datapath"
            ],
            "test_many_columns": [
                "datapath"
            ],
            "test_inconsistent_number_of_rows": [
                "datapath"
            ],
            "test_zero_variables": [
                "datapath"
            ],
            "round_datetime_to_ms": [
                "ts"
            ],
            "test_max_sas_date": [
                "datapath"
            ],
            "test_max_sas_date_iterator": [
                "datapath"
            ],
            "TestSAS7BDAT": {
                "setup_method": [
                    "self",
                    "datapath"
                ],
                "test_from_file": [
                    "self"
                ],
                "test_from_buffer": [
                    "self"
                ],
                "test_from_iterator": [
                    "self"
                ],
                "test_path_pathlib": [
                    "self"
                ],
                "test_path_localpath": [
                    "self"
                ],
                "test_iterator_loop": [
                    "self"
                ],
                "test_iterator_read_too_much": [
                    "self"
                ]
            }
        },
        "pandas.tests.io.sas.test_xport": {
            "numeric_as_float": [
                "data"
            ],
            "TestXport": {
                "setup_method": [
                    "self",
                    "datapath"
                ],
                "test1_basic": [
                    "self"
                ],
                "test1_index": [
                    "self"
                ],
                "test1_incremental": [
                    "self"
                ],
                "test2": [
                    "self"
                ],
                "test2_binary": [
                    "self"
                ],
                "test_multiple_types": [
                    "self"
                ],
                "test_truncated_float_support": [
                    "self"
                ]
            }
        },
        "pandas.tests.io.sas.test_sas": {
            "TestSas": {
                "test_sas_buffer_format": [
                    "self"
                ],
                "test_sas_read_no_format_or_extension": [
                    "self"
                ]
            }
        },
        "pandas.tests.io.sas": {},
        "pandas.tests.computation.test_eval": {
            "engine": [
                "request"
            ],
            "parser": [
                "request"
            ],
            "ne_lt_2_6_9": [],
            "unary_fns_for_ne": [],
            "engine_has_neg_frac": [
                "engine"
            ],
            "_eval_single_bin": [
                "lhs",
                "cmp1",
                "rhs",
                "engine"
            ],
            "_series_and_2d_ndarray": [
                "lhs",
                "rhs"
            ],
            "_series_and_frame": [
                "lhs",
                "rhs"
            ],
            "_bool_and_frame": [
                "lhs",
                "rhs"
            ],
            "_is_py3_complex_incompat": [
                "result",
                "expected"
            ],
            "_is_datetime": [
                "x"
            ],
            "should_warn": [],
            "test_invalid_engine": [],
            "test_invalid_parser": [],
            "test_disallowed_nodes": [
                "engine",
                "parser"
            ],
            "test_syntax_error_exprs": [
                "engine",
                "parser"
            ],
            "test_name_error_exprs": [
                "engine",
                "parser"
            ],
            "test_invalid_local_variable_reference": [
                "engine",
                "parser"
            ],
            "test_numexpr_builtin_raises": [
                "engine",
                "parser"
            ],
            "test_bad_resolver_raises": [
                "engine",
                "parser"
            ],
            "test_empty_string_raises": [
                "engine",
                "parser"
            ],
            "test_more_than_one_expression_raises": [
                "engine",
                "parser"
            ],
            "test_bool_ops_fails_on_scalars": [
                "lhs",
                "cmp",
                "rhs",
                "engine",
                "parser"
            ],
            "test_equals_various": [
                "other"
            ],
            "test_inf": [
                "engine",
                "parser"
            ],
            "test_truediv_deprecated": [
                "engine",
                "parser"
            ],
            "test_negate_lt_eq_le": [
                "engine",
                "parser"
            ],
            "TestEvalNumexprPandas": {
                "setup_class": [
                    "cls"
                ],
                "teardown_class": [
                    "cls"
                ],
                "setup_data": [
                    "self"
                ],
                "setup_ops": [
                    "self"
                ],
                "setup_method": [
                    "self",
                    "method"
                ],
                "teardown_method": [
                    "self",
                    "method"
                ],
                "test_complex_cmp_ops": [
                    "self",
                    "cmp1",
                    "cmp2"
                ],
                "test_simple_cmp_ops": [
                    "self"
                ],
                "test_binary_arith_ops": [
                    "self"
                ],
                "test_modulus": [
                    "self"
                ],
                "test_floor_division": [
                    "self"
                ],
                "test_pow": [
                    "self"
                ],
                "test_single_invert_op": [
                    "self"
                ],
                "test_compound_invert_op": [
                    "self"
                ],
                "test_chained_cmp_op": [
                    "self"
                ],
                "check_equal": [
                    "self",
                    "result",
                    "expected"
                ],
                "check_chained_cmp_op": [
                    "self",
                    "lhs",
                    "cmp1",
                    "mid",
                    "cmp2",
                    "rhs"
                ],
                "check_simple_cmp_op": [
                    "self",
                    "lhs",
                    "cmp1",
                    "rhs"
                ],
                "check_binary_arith_op": [
                    "self",
                    "lhs",
                    "arith1",
                    "rhs"
                ],
                "check_alignment": [
                    "self",
                    "result",
                    "nlhs",
                    "ghs",
                    "op"
                ],
                "check_modulus": [
                    "self",
                    "lhs",
                    "arith1",
                    "rhs"
                ],
                "check_floor_division": [
                    "self",
                    "lhs",
                    "arith1",
                    "rhs"
                ],
                "get_expected_pow_result": [
                    "self",
                    "lhs",
                    "rhs"
                ],
                "check_pow": [
                    "self",
                    "lhs",
                    "arith1",
                    "rhs"
                ],
                "check_single_invert_op": [
                    "self",
                    "lhs",
                    "cmp1",
                    "rhs"
                ],
                "check_compound_invert_op": [
                    "self",
                    "lhs",
                    "cmp1",
                    "rhs"
                ],
                "ex": [
                    "self",
                    "op",
                    "var_name"
                ],
                "test_frame_invert": [
                    "self"
                ],
                "test_series_invert": [
                    "self"
                ],
                "test_frame_negate": [
                    "self"
                ],
                "test_series_negate": [
                    "self"
                ],
                "test_frame_pos": [
                    "self",
                    "lhs"
                ],
                "test_series_pos": [
                    "self",
                    "lhs"
                ],
                "test_scalar_unary": [
                    "self"
                ],
                "test_unary_in_array": [
                    "self"
                ],
                "test_float_comparison_bin_op": [
                    "self",
                    "dtype"
                ],
                "test_disallow_scalar_bool_ops": [
                    "self"
                ],
                "test_identical": [
                    "self"
                ],
                "test_line_continuation": [
                    "self"
                ],
                "test_float_truncation": [
                    "self"
                ],
                "test_disallow_python_keywords": [
                    "self"
                ]
            },
            "TestEvalNumexprPython": {
                "setup_class": [
                    "cls"
                ],
                "setup_ops": [
                    "self"
                ],
                "check_chained_cmp_op": [
                    "self",
                    "lhs",
                    "cmp1",
                    "mid",
                    "cmp2",
                    "rhs"
                ]
            },
            "TestEvalPythonPython": {
                "setup_class": [
                    "cls"
                ],
                "check_modulus": [
                    "self",
                    "lhs",
                    "arith1",
                    "rhs"
                ],
                "check_alignment": [
                    "self",
                    "result",
                    "nlhs",
                    "ghs",
                    "op"
                ]
            },
            "TestEvalPythonPandas": {
                "setup_class": [
                    "cls"
                ],
                "check_chained_cmp_op": [
                    "self",
                    "lhs",
                    "cmp1",
                    "mid",
                    "cmp2",
                    "rhs"
                ]
            },
            "TestTypeCasting": {
                "test_binop_typecasting": [
                    "self",
                    "engine",
                    "parser",
                    "op",
                    "dt"
                ]
            },
            "TestAlignment": {
                "test_align_nested_unary_op": [
                    "self",
                    "engine",
                    "parser"
                ],
                "test_basic_frame_alignment": [
                    "self",
                    "engine",
                    "parser"
                ],
                "test_frame_comparison": [
                    "self",
                    "engine",
                    "parser"
                ],
                "test_medium_complex_frame_alignment": [
                    "self",
                    "engine",
                    "parser"
                ],
                "test_basic_frame_series_alignment": [
                    "self",
                    "engine",
                    "parser"
                ],
                "test_basic_series_frame_alignment": [
                    "self",
                    "engine",
                    "parser"
                ],
                "test_series_frame_commutativity": [
                    "self",
                    "engine",
                    "parser"
                ],
                "test_complex_series_frame_alignment": [
                    "self",
                    "engine",
                    "parser"
                ],
                "test_performance_warning_for_poor_alignment": [
                    "self",
                    "engine",
                    "parser"
                ]
            },
            "TestOperationsNumExprPandas": {
                "setup_class": [
                    "cls"
                ],
                "teardown_class": [
                    "cls"
                ],
                "eval": [
                    "self"
                ],
                "test_simple_arith_ops": [
                    "self"
                ],
                "test_simple_bool_ops": [
                    "self"
                ],
                "test_bool_ops_with_constants": [
                    "self"
                ],
                "test_4d_ndarray_fails": [
                    "self"
                ],
                "test_constant": [
                    "self"
                ],
                "test_single_variable": [
                    "self"
                ],
                "test_truediv": [
                    "self"
                ],
                "test_failing_subscript_with_name_error": [
                    "self"
                ],
                "test_lhs_expression_subscript": [
                    "self"
                ],
                "test_attr_expression": [
                    "self"
                ],
                "test_assignment_fails": [
                    "self"
                ],
                "test_assignment_column": [
                    "self"
                ],
                "test_column_in": [
                    "self"
                ],
                "assignment_not_inplace": [
                    "self"
                ],
                "test_multi_line_expression": [
                    "self"
                ],
                "test_multi_line_expression_not_inplace": [
                    "self"
                ],
                "test_multi_line_expression_local_variable": [
                    "self"
                ],
                "test_multi_line_expression_callable_local_variable": [
                    "self"
                ],
                "test_multi_line_expression_callable_local_variable_with_kwargs": [
                    "self"
                ],
                "test_assignment_in_query": [
                    "self"
                ],
                "test_query_inplace": [
                    "self"
                ],
                "test_cannot_item_assign": [
                    "self",
                    "invalid_target"
                ],
                "test_cannot_copy_item": [
                    "self",
                    "invalid_target"
                ],
                "test_inplace_no_assignment": [
                    "self",
                    "target"
                ],
                "test_basic_period_index_boolean_expression": [
                    "self"
                ],
                "test_basic_period_index_subscript_expression": [
                    "self"
                ],
                "test_nested_period_index_subscript_expression": [
                    "self"
                ],
                "test_date_boolean": [
                    "self"
                ],
                "test_simple_in_ops": [
                    "self"
                ]
            },
            "TestOperationsNumExprPython": {
                "setup_class": [
                    "cls"
                ],
                "test_check_many_exprs": [
                    "self"
                ],
                "test_fails_and": [
                    "self"
                ],
                "test_fails_or": [
                    "self"
                ],
                "test_fails_not": [
                    "self"
                ],
                "test_fails_ampersand": [
                    "self"
                ],
                "test_fails_pipe": [
                    "self"
                ],
                "test_bool_ops_with_constants": [
                    "self"
                ],
                "test_simple_bool_ops": [
                    "self"
                ]
            },
            "TestOperationsPythonPython": {
                "setup_class": [
                    "cls"
                ]
            },
            "TestOperationsPythonPandas": {
                "setup_class": [
                    "cls"
                ]
            },
            "TestMathPythonPython": {
                "setup_class": [
                    "cls"
                ],
                "teardown_class": [
                    "cls"
                ],
                "eval": [
                    "self"
                ],
                "test_unary_functions": [
                    "self",
                    "unary_fns_for_ne"
                ],
                "test_floor_and_ceil_functions_raise_error": [
                    "self",
                    "ne_lt_2_6_9",
                    "unary_fns_for_ne"
                ],
                "test_binary_functions": [
                    "self"
                ],
                "test_df_use_case": [
                    "self"
                ],
                "test_df_arithmetic_subexpression": [
                    "self"
                ],
                "check_result_type": [
                    "self",
                    "dtype",
                    "expect_dtype"
                ],
                "test_result_types": [
                    "self"
                ],
                "test_result_complex128": [
                    "self"
                ],
                "test_undefined_func": [
                    "self"
                ],
                "test_keyword_arg": [
                    "self"
                ]
            },
            "TestMathPythonPandas": {
                "setup_class": [
                    "cls"
                ]
            },
            "TestMathNumExprPandas": {
                "setup_class": [
                    "cls"
                ]
            },
            "TestMathNumExprPython": {
                "setup_class": [
                    "cls"
                ]
            },
            "TestScope": {
                "test_global_scope": [
                    "self",
                    "engine",
                    "parser"
                ],
                "test_no_new_locals": [
                    "self",
                    "engine",
                    "parser"
                ],
                "test_no_new_globals": [
                    "self",
                    "engine",
                    "parser"
                ]
            },
            "TestValidate": {
                "test_validate_bool_args": [
                    "self"
                ]
            }
        },
        "pandas.tests.computation.test_compat": {
            "test_compat": [],
            "test_invalid_numexpr_version": [
                "engine",
                "parser"
            ]
        },
        "pandas.tests.computation": {},
        "pandas.tests.tseries": {},
        "pandas.tests.tseries.holiday.test_calendar": {
            "test_calendar": [
                "transform"
            ],
            "test_calendar_caching": [],
            "test_calendar_observance_dates": [],
            "test_rule_from_name": [],
            "test_calendar_2031": [],
            "test_no_holidays_calendar": []
        },
        "pandas.tests.tseries.holiday.test_holiday": {
            "_check_holiday_results": [
                "holiday",
                "start",
                "end",
                "expected"
            ],
            "test_holiday_dates": [
                "holiday",
                "start_date",
                "end_date",
                "expected"
            ],
            "test_holidays_within_dates": [
                "holiday",
                "start",
                "expected"
            ],
            "test_argument_types": [
                "transform"
            ],
            "test_special_holidays": [
                "name",
                "kwargs"
            ],
            "test_get_calendar": [],
            "test_factory": [],
            "test_both_offset_observance_raises": []
        },
        "pandas.tests.tseries.holiday.test_observance": {
            "test_next_monday": [
                "day"
            ],
            "test_next_monday_or_tuesday": [
                "day",
                "expected"
            ],
            "test_previous_friday": [
                "day"
            ],
            "test_sunday_to_monday": [],
            "test_nearest_workday": [
                "day",
                "expected"
            ],
            "test_weekend_to_monday": [
                "day",
                "expected"
            ],
            "test_next_workday": [
                "day",
                "expected"
            ],
            "test_previous_workday": [
                "day",
                "expected"
            ],
            "test_before_nearest_workday": [
                "day",
                "expected"
            ],
            "test_after_nearest_workday": [
                "day",
                "expected"
            ]
        },
        "pandas.tests.tseries.holiday.test_federal": {
            "test_no_mlk_before_1986": [],
            "test_memorial_day": []
        },
        "pandas.tests.tseries.holiday": {},
        "pandas.tests.tseries.offsets.common": {
            "assert_offset_equal": [
                "offset",
                "base",
                "expected"
            ],
            "assert_is_on_offset": [
                "offset",
                "date",
                "expected"
            ]
        },
        "pandas.tests.tseries.offsets.test_ticks": {
            "test_apply_ticks": [],
            "test_delta_to_tick": [],
            "test_tick_add_sub": [
                "cls",
                "n",
                "m"
            ],
            "test_tick_equality": [
                "cls",
                "n",
                "m"
            ],
            "test_Hour": [],
            "test_Minute": [],
            "test_Second": [],
            "test_Millisecond": [],
            "test_MillisecondTimestampArithmetic": [],
            "test_Microsecond": [],
            "test_NanosecondGeneric": [],
            "test_Nanosecond": [],
            "test_tick_addition": [
                "kls",
                "expected"
            ],
            "test_tick_division": [
                "cls"
            ],
            "test_tick_mul_float": [],
            "test_tick_rdiv": [
                "cls"
            ],
            "test_tick_zero": [
                "cls1",
                "cls2"
            ],
            "test_tick_equalities": [
                "cls"
            ],
            "test_tick_offset": [
                "cls"
            ],
            "test_compare_ticks": [
                "cls"
            ],
            "test_compare_ticks_to_strs": [
                "cls"
            ],
            "test_compare_ticks_to_timedeltalike": [
                "cls"
            ]
        },
        "pandas.tests.tseries.offsets.test_fiscal": {
            "makeFY5253LastOfMonthQuarter": [],
            "makeFY5253NearestEndMonthQuarter": [],
            "makeFY5253NearestEndMonth": [],
            "makeFY5253LastOfMonth": [],
            "test_get_offset_name": [],
            "test_get_offset": [],
            "test_bunched_yearends": [],
            "test_fy5253_last_onoffset": [],
            "test_fy5253_nearest_onoffset": [],
            "test_fy5253qtr_onoffset_nearest": [],
            "test_fy5253qtr_onoffset_last": [],
            "TestFY5253LastOfMonth": {
                "test_is_on_offset": [
                    "self",
                    "case"
                ],
                "test_apply": [
                    "self"
                ]
            },
            "TestFY5253NearestEndMonth": {
                "test_get_year_end": [
                    "self"
                ],
                "test_is_on_offset": [
                    "self",
                    "case"
                ],
                "test_apply": [
                    "self"
                ]
            },
            "TestFY5253LastOfMonthQuarter": {
                "test_is_anchored": [
                    "self"
                ],
                "test_equality": [
                    "self"
                ],
                "test_offset": [
                    "self"
                ],
                "test_is_on_offset": [
                    "self",
                    "case"
                ],
                "test_year_has_extra_week": [
                    "self"
                ],
                "test_get_weeks": [
                    "self"
                ]
            },
            "TestFY5253NearestEndMonthQuarter": {
                "test_is_on_offset": [
                    "self",
                    "case"
                ],
                "test_offset": [
                    "self"
                ]
            }
        },
        "pandas.tests.tseries.offsets.test_yqm_offsets": {
            "test_quarterly_dont_normalize": [],
            "test_apply_index": [
                "cls",
                "n"
            ],
            "test_on_offset": [
                "offset"
            ],
            "TestMonthBegin": {
                "test_offset": [
                    "self",
                    "case"
                ]
            },
            "TestMonthEnd": {
                "test_day_of_month": [
                    "self"
                ],
                "test_normalize": [
                    "self"
                ],
                "test_offset": [
                    "self",
                    "case"
                ],
                "test_is_on_offset": [
                    "self",
                    "case"
                ]
            },
            "TestBMonthBegin": {
                "test_offsets_compare_equal": [
                    "self"
                ],
                "test_offset": [
                    "self",
                    "case"
                ],
                "test_is_on_offset": [
                    "self",
                    "case"
                ]
            },
            "TestBMonthEnd": {
                "test_normalize": [
                    "self"
                ],
                "test_offsets_compare_equal": [
                    "self"
                ],
                "test_offset": [
                    "self",
                    "case"
                ],
                "test_is_on_offset": [
                    "self",
                    "case"
                ]
            },
            "TestQuarterBegin": {
                "test_repr": [
                    "self"
                ],
                "test_is_anchored": [
                    "self"
                ],
                "test_offset_corner_case": [
                    "self"
                ],
                "test_offset": [
                    "self",
                    "case"
                ]
            },
            "TestQuarterEnd": {
                "test_repr": [
                    "self"
                ],
                "test_is_anchored": [
                    "self"
                ],
                "test_offset_corner_case": [
                    "self"
                ],
                "test_offset": [
                    "self",
                    "case"
                ],
                "test_is_on_offset": [
                    "self",
                    "case"
                ]
            },
            "TestBQuarterBegin": {
                "test_repr": [
                    "self"
                ],
                "test_is_anchored": [
                    "self"
                ],
                "test_offset_corner_case": [
                    "self"
                ],
                "test_offset": [
                    "self",
                    "case"
                ]
            },
            "TestBQuarterEnd": {
                "test_repr": [
                    "self"
                ],
                "test_is_anchored": [
                    "self"
                ],
                "test_offset_corner_case": [
                    "self"
                ],
                "test_offset": [
                    "self",
                    "case"
                ],
                "test_is_on_offset": [
                    "self",
                    "case"
                ]
            },
            "TestYearBegin": {
                "test_misspecified": [
                    "self"
                ],
                "test_offset": [
                    "self",
                    "case"
                ],
                "test_is_on_offset": [
                    "self",
                    "case"
                ]
            },
            "TestYearEnd": {
                "test_misspecified": [
                    "self"
                ],
                "test_offset": [
                    "self",
                    "case"
                ],
                "test_is_on_offset": [
                    "self",
                    "case"
                ]
            },
            "TestYearEndDiffMonth": {
                "test_offset": [
                    "self",
                    "case"
                ],
                "test_is_on_offset": [
                    "self",
                    "case"
                ]
            },
            "TestBYearBegin": {
                "test_misspecified": [
                    "self"
                ],
                "test_offset": [
                    "self",
                    "case"
                ]
            },
            "TestBYearEnd": {
                "test_offset": [
                    "self",
                    "case"
                ],
                "test_is_on_offset": [
                    "self",
                    "case"
                ]
            },
            "TestBYearEndLagged": {
                "test_bad_month_fail": [
                    "self"
                ],
                "test_offset": [
                    "self",
                    "case"
                ],
                "test_roll": [
                    "self"
                ],
                "test_is_on_offset": [
                    "self",
                    "case"
                ]
            }
        },
        "pandas.tests.tseries.offsets.conftest": {
            "offset_types": [
                "request"
            ],
            "month_classes": [
                "request"
            ]
        },
        "pandas.tests.tseries.offsets.test_offsets": {
            "test_Easter": [],
            "test_get_offset": [],
            "test_get_offset_legacy": [],
            "test_dateoffset_misc": [],
            "test_freq_offsets": [],
            "get_utc_offset_hours": [
                "ts"
            ],
            "test_valid_default_arguments": [
                "offset_types"
            ],
            "test_valid_month_attributes": [
                "kwd",
                "month_classes"
            ],
            "test_month_offset_name": [
                "month_classes"
            ],
            "test_valid_relativedelta_kwargs": [
                "kwd"
            ],
            "test_valid_tick_attributes": [
                "kwd",
                "tick_classes"
            ],
            "test_validate_n_error": [],
            "test_require_integers": [
                "offset_types"
            ],
            "test_tick_normalize_raises": [
                "tick_classes"
            ],
            "test_weeks_onoffset": [],
            "test_weekofmonth_onoffset": [],
            "test_last_week_of_month_on_offset": [],
            "test_week_add_invalid": [],
            "WeekDay": {},
            "Base": {
                "_get_offset": [
                    "self",
                    "klass",
                    "value",
                    "normalize"
                ],
                "test_apply_out_of_range": [
                    "self",
                    "tz_naive_fixture"
                ],
                "test_offsets_compare_equal": [
                    "self"
                ],
                "test_rsub": [
                    "self"
                ],
                "test_radd": [
                    "self"
                ],
                "test_sub": [
                    "self"
                ],
                "testMult1": [
                    "self"
                ],
                "testMult2": [
                    "self"
                ],
                "test_compare_str": [
                    "self"
                ]
            },
            "TestCommon": {
                "test_immutable": [
                    "self",
                    "offset_types"
                ],
                "test_return_type": [
                    "self",
                    "offset_types"
                ],
                "test_offset_n": [
                    "self",
                    "offset_types"
                ],
                "test_offset_timedelta64_arg": [
                    "self",
                    "offset_types"
                ],
                "test_offset_mul_ndarray": [
                    "self",
                    "offset_types"
                ],
                "test_offset_freqstr": [
                    "self",
                    "offset_types"
                ],
                "_check_offsetfunc_works": [
                    "self",
                    "offset",
                    "funcname",
                    "dt",
                    "expected",
                    "normalize"
                ],
                "test_apply": [
                    "self",
                    "offset_types"
                ],
                "test_rollforward": [
                    "self",
                    "offset_types"
                ],
                "test_rollback": [
                    "self",
                    "offset_types"
                ],
                "test_is_on_offset": [
                    "self",
                    "offset_types"
                ],
                "test_add": [
                    "self",
                    "offset_types",
                    "tz_naive_fixture"
                ],
                "test_add_empty_datetimeindex": [
                    "self",
                    "offset_types",
                    "tz_naive_fixture"
                ],
                "test_pickle_v0_15_2": [
                    "self",
                    "datapath"
                ],
                "test_pickle_roundtrip": [
                    "self",
                    "offset_types"
                ],
                "test_onOffset_deprecated": [
                    "self",
                    "offset_types"
                ],
                "test_isAnchored_deprecated": [
                    "self",
                    "offset_types"
                ]
            },
            "TestDateOffset": {
                "setup_method": [
                    "self",
                    "method"
                ],
                "test_repr": [
                    "self"
                ],
                "test_mul": [
                    "self"
                ],
                "test_constructor": [
                    "self"
                ],
                "test_copy": [
                    "self"
                ],
                "test_eq": [
                    "self"
                ]
            },
            "TestBusinessDay": {
                "setup_method": [
                    "self",
                    "method"
                ],
                "test_different_normalize_equals": [
                    "self"
                ],
                "test_repr": [
                    "self"
                ],
                "test_with_offset": [
                    "self"
                ],
                "test_eq": [
                    "self"
                ],
                "test_mul": [
                    "self"
                ],
                "test_hash": [
                    "self"
                ],
                "test_call": [
                    "self"
                ],
                "testRollback1": [
                    "self"
                ],
                "testRollback2": [
                    "self"
                ],
                "testRollforward1": [
                    "self"
                ],
                "testRollforward2": [
                    "self"
                ],
                "test_roll_date_object": [
                    "self"
                ],
                "test_is_on_offset": [
                    "self"
                ],
                "test_apply": [
                    "self",
                    "case"
                ],
                "test_apply_large_n": [
                    "self"
                ],
                "test_apply_corner": [
                    "self"
                ]
            },
            "TestBusinessHour": {
                "setup_method": [
                    "self",
                    "method"
                ],
                "test_constructor_errors": [
                    "self",
                    "start",
                    "end",
                    "match"
                ],
                "test_different_normalize_equals": [
                    "self"
                ],
                "test_repr": [
                    "self"
                ],
                "test_with_offset": [
                    "self"
                ],
                "test_eq_attribute": [
                    "self",
                    "offset_name"
                ],
                "test_eq": [
                    "self",
                    "offset1",
                    "offset2"
                ],
                "test_neq": [
                    "self",
                    "offset1",
                    "offset2"
                ],
                "test_hash": [
                    "self",
                    "offset_name"
                ],
                "test_call": [
                    "self"
                ],
                "test_sub": [
                    "self"
                ],
                "testRollback1": [
                    "self"
                ],
                "testRollback2": [
                    "self"
                ],
                "testRollforward1": [
                    "self"
                ],
                "testRollforward2": [
                    "self"
                ],
                "test_roll_date_object": [
                    "self"
                ],
                "test_normalize": [
                    "self",
                    "case"
                ],
                "test_is_on_offset": [
                    "self",
                    "case"
                ],
                "test_opening_time": [
                    "self",
                    "case"
                ],
                "test_apply": [
                    "self",
                    "case"
                ],
                "test_apply_large_n": [
                    "self",
                    "case"
                ],
                "test_apply_nanoseconds": [
                    "self"
                ],
                "test_datetimeindex": [
                    "self"
                ]
            },
            "TestCustomBusinessHour": {
                "setup_method": [
                    "self",
                    "method"
                ],
                "test_constructor_errors": [
                    "self"
                ],
                "test_different_normalize_equals": [
                    "self"
                ],
                "test_repr": [
                    "self"
                ],
                "test_with_offset": [
                    "self"
                ],
                "test_eq": [
                    "self"
                ],
                "test_sub": [
                    "self"
                ],
                "test_hash": [
                    "self"
                ],
                "test_call": [
                    "self"
                ],
                "testRollback1": [
                    "self"
                ],
                "testRollback2": [
                    "self"
                ],
                "testRollforward1": [
                    "self"
                ],
                "testRollforward2": [
                    "self"
                ],
                "test_roll_date_object": [
                    "self"
                ],
                "test_normalize": [
                    "self",
                    "norm_cases"
                ],
                "test_is_on_offset": [
                    "self"
                ],
                "test_apply": [
                    "self",
                    "apply_case"
                ],
                "test_apply_nanoseconds": [
                    "self",
                    "nano_case"
                ]
            },
            "TestCustomBusinessDay": {
                "setup_method": [
                    "self",
                    "method"
                ],
                "test_different_normalize_equals": [
                    "self"
                ],
                "test_repr": [
                    "self"
                ],
                "test_with_offset": [
                    "self"
                ],
                "test_eq": [
                    "self"
                ],
                "test_mul": [
                    "self"
                ],
                "test_hash": [
                    "self"
                ],
                "test_call": [
                    "self"
                ],
                "testRollback1": [
                    "self"
                ],
                "testRollback2": [
                    "self"
                ],
                "testRollforward1": [
                    "self"
                ],
                "testRollforward2": [
                    "self"
                ],
                "test_roll_date_object": [
                    "self"
                ],
                "test_is_on_offset": [
                    "self",
                    "case"
                ],
                "test_apply": [
                    "self",
                    "case"
                ],
                "test_apply_large_n": [
                    "self"
                ],
                "test_apply_corner": [
                    "self"
                ],
                "test_holidays": [
                    "self"
                ],
                "test_weekmask": [
                    "self"
                ],
                "test_weekmask_and_holidays": [
                    "self"
                ],
                "test_calendar": [
                    "self"
                ],
                "test_roundtrip_pickle": [
                    "self"
                ],
                "test_pickle_compat_0_14_1": [
                    "self",
                    "datapath"
                ]
            },
            "CustomBusinessMonthBase": {
                "setup_method": [
                    "self",
                    "method"
                ],
                "test_eq": [
                    "self"
                ],
                "test_mul": [
                    "self"
                ],
                "test_hash": [
                    "self"
                ],
                "test_roundtrip_pickle": [
                    "self"
                ],
                "test_copy": [
                    "self"
                ]
            },
            "TestCustomBusinessMonthEnd": {
                "test_different_normalize_equals": [
                    "self"
                ],
                "test_repr": [
                    "self"
                ],
                "test_call": [
                    "self"
                ],
                "testRollback1": [
                    "self"
                ],
                "testRollback2": [
                    "self"
                ],
                "testRollforward1": [
                    "self"
                ],
                "test_roll_date_object": [
                    "self"
                ],
                "test_is_on_offset": [
                    "self",
                    "case"
                ],
                "test_apply": [
                    "self",
                    "case"
                ],
                "test_apply_large_n": [
                    "self"
                ],
                "test_holidays": [
                    "self"
                ],
                "test_datetimeindex": [
                    "self"
                ]
            },
            "TestCustomBusinessMonthBegin": {
                "test_different_normalize_equals": [
                    "self"
                ],
                "test_repr": [
                    "self"
                ],
                "test_call": [
                    "self"
                ],
                "testRollback1": [
                    "self"
                ],
                "testRollback2": [
                    "self"
                ],
                "testRollforward1": [
                    "self"
                ],
                "test_roll_date_object": [
                    "self"
                ],
                "test_is_on_offset": [
                    "self",
                    "case"
                ],
                "test_apply": [
                    "self",
                    "case"
                ],
                "test_apply_large_n": [
                    "self"
                ],
                "test_holidays": [
                    "self"
                ],
                "test_datetimeindex": [
                    "self"
                ]
            },
            "TestWeek": {
                "test_repr": [
                    "self"
                ],
                "test_corner": [
                    "self"
                ],
                "test_is_anchored": [
                    "self"
                ],
                "test_offset": [
                    "self",
                    "case"
                ],
                "test_is_on_offset": [
                    "self",
                    "weekday"
                ]
            },
            "TestWeekOfMonth": {
                "test_constructor": [
                    "self"
                ],
                "test_repr": [
                    "self"
                ],
                "test_offset": [
                    "self"
                ],
                "test_is_on_offset": [
                    "self",
                    "case"
                ]
            },
            "TestLastWeekOfMonth": {
                "test_constructor": [
                    "self"
                ],
                "test_offset": [
                    "self"
                ],
                "test_is_on_offset": [
                    "self",
                    "case"
                ],
                "test_repr": [
                    "self"
                ]
            },
            "TestSemiMonthEnd": {
                "test_offset_whole_year": [
                    "self"
                ],
                "test_offset": [
                    "self",
                    "case"
                ],
                "test_apply_index": [
                    "self",
                    "case"
                ],
                "test_is_on_offset": [
                    "self",
                    "case"
                ],
                "test_vectorized_offset_addition": [
                    "self",
                    "klass"
                ]
            },
            "TestSemiMonthBegin": {
                "test_offset_whole_year": [
                    "self"
                ],
                "test_offset": [
                    "self",
                    "case"
                ],
                "test_apply_index": [
                    "self",
                    "case"
                ],
                "test_is_on_offset": [
                    "self",
                    "case"
                ],
                "test_vectorized_offset_addition": [
                    "self",
                    "klass"
                ]
            },
            "TestOffsetNames": {
                "test_get_offset_name": [
                    "self"
                ]
            },
            "TestOffsetAliases": {
                "setup_method": [
                    "self",
                    "method"
                ],
                "test_alias_equality": [
                    "self"
                ],
                "test_rule_code": [
                    "self"
                ]
            },
            "TestReprNames": {
                "test_str_for_named_is_name": [
                    "self"
                ]
            },
            "TestDST": {
                "_test_all_offsets": [
                    "self",
                    "n"
                ],
                "_test_offset": [
                    "self",
                    "offset_name",
                    "offset_n",
                    "tstart",
                    "expected_utc_offset"
                ],
                "_make_timestamp": [
                    "self",
                    "string",
                    "hrs_offset",
                    "tz"
                ],
                "test_springforward_plural": [
                    "self"
                ],
                "test_fallback_singular": [
                    "self"
                ],
                "test_springforward_singular": [
                    "self"
                ],
                "test_all_offset_classes": [
                    "self",
                    "tup"
                ]
            }
        },
        "pandas.tests.tseries.offsets.test_offsets_properties": {
            "test_on_offset_implementations": [
                "dt",
                "offset"
            ],
            "test_shift_across_dst": [
                "offset"
            ]
        },
        "pandas.tests.tseries.offsets": {},
        "pandas.tests.tseries.frequencies.test_freq_code": {
            "test_get_to_timestamp_base": [
                "freqstr",
                "exp_freqstr"
            ],
            "test_get_attrname_from_abbrev": [
                "freqstr",
                "expected"
            ],
            "test_get_freq_roundtrip2": [
                "freq"
            ],
            "test_resolution_bumping": [
                "args",
                "expected"
            ],
            "test_cat": [
                "args"
            ]
        },
        "pandas.tests.tseries.frequencies.test_frequencies": {
            "test_super_sub_symmetry": [
                "p1",
                "p2",
                "expected"
            ]
        },
        "pandas.tests.tseries.frequencies.test_inference": {
            "_check_generated_range": [
                "start",
                "periods",
                "freq"
            ],
            "base_delta_code_pair": [
                "request"
            ],
            "count": [
                "request"
            ],
            "day": [
                "request"
            ],
            "month": [
                "request"
            ],
            "periods": [
                "request"
            ],
            "test_raise_if_period_index": [],
            "test_raise_if_too_few": [],
            "test_business_daily": [],
            "test_business_daily_look_alike": [],
            "test_day_corner": [],
            "test_non_datetime_index": [],
            "test_fifth_week_of_month_infer": [],
            "test_week_of_month_fake": [],
            "test_fifth_week_of_month": [],
            "test_monthly_ambiguous": [],
            "test_annual_ambiguous": [],
            "test_infer_freq_delta": [
                "base_delta_code_pair",
                "count"
            ],
            "test_infer_freq_custom": [
                "base_delta_code_pair",
                "constructor"
            ],
            "test_weekly_infer": [
                "periods",
                "day"
            ],
            "test_week_of_month_infer": [
                "periods",
                "day",
                "count"
            ],
            "test_monthly_infer": [
                "periods",
                "freq"
            ],
            "test_quarterly_infer": [
                "month",
                "periods"
            ],
            "test_annually_infer": [
                "month",
                "periods",
                "annual"
            ],
            "test_infer_freq_index": [
                "freq",
                "expected"
            ],
            "test_infer_freq_tz": [
                "tz_naive_fixture",
                "expected",
                "dates"
            ],
            "test_infer_freq_tz_transition": [
                "tz_naive_fixture",
                "date_pair",
                "freq"
            ],
            "test_infer_freq_tz_transition_custom": [],
            "test_infer_freq_business_hour": [
                "data",
                "expected"
            ],
            "test_not_monotonic": [],
            "test_non_datetime_index2": [],
            "test_invalid_index_types": [
                "idx"
            ],
            "test_invalid_index_types_unicode": [
                "idx"
            ],
            "test_string_datetime_like_compat": [],
            "test_series": [],
            "test_series_invalid_type": [
                "end"
            ],
            "test_series_inconvertible_string": [],
            "test_series_period_index": [
                "freq"
            ],
            "test_series_datetime_index": [
                "freq"
            ],
            "test_legacy_offset_warnings": [
                "offset_func",
                "freq"
            ],
            "test_ms_vs_capital_ms": []
        },
        "pandas.tests.tseries.frequencies": {},
        "pandas.tests.config.test_localization": {
            "test_can_set_locale_valid_set": [],
            "test_can_set_locale_invalid_set": [],
            "test_can_set_locale_invalid_get": [
                "monkeypatch"
            ],
            "test_get_locales_at_least_one": [],
            "test_get_locales_prefix": [],
            "test_set_locale": [
                "lang",
                "enc"
            ],
            "test_encoding_detected": []
        },
        "pandas.tests.config.test_config": {
            "TestConfig": {
                "setup_class": [
                    "cls"
                ],
                "setup_method": [
                    "self",
                    "method"
                ],
                "teardown_method": [
                    "self",
                    "method"
                ],
                "test_api": [
                    "self"
                ],
                "test_is_one_of_factory": [
                    "self"
                ],
                "test_register_option": [
                    "self"
                ],
                "test_describe_option": [
                    "self"
                ],
                "test_case_insensitive": [
                    "self"
                ],
                "test_get_option": [
                    "self"
                ],
                "test_set_option": [
                    "self"
                ],
                "test_set_option_empty_args": [
                    "self"
                ],
                "test_set_option_uneven_args": [
                    "self"
                ],
                "test_set_option_invalid_single_argument_type": [
                    "self"
                ],
                "test_set_option_multiple": [
                    "self"
                ],
                "test_validation": [
                    "self"
                ],
                "test_reset_option": [
                    "self"
                ],
                "test_reset_option_all": [
                    "self"
                ],
                "test_deprecate_option": [
                    "self"
                ],
                "test_config_prefix": [
                    "self"
                ],
                "test_callback": [
                    "self"
                ],
                "test_set_ContextManager": [
                    "self"
                ],
                "test_attribute_access": [
                    "self"
                ],
                "test_option_context_scope": [
                    "self"
                ],
                "test_dictwrapper_getattr": [
                    "self"
                ]
            }
        },
        "pandas.tests.config": {},
        "pandas.tests.window.common": {
            "check_pairwise_moment": [
                "frame",
                "dispatch",
                "name"
            ],
            "ew_func": [
                "A",
                "B",
                "com",
                "name"
            ],
            "check_binary_ew": [
                "name",
                "A",
                "B"
            ],
            "check_binary_ew_min_periods": [
                "name",
                "min_periods",
                "A",
                "B"
            ],
            "moments_consistency_mock_mean": [
                "x",
                "mean",
                "mock_mean"
            ],
            "moments_consistency_is_constant": [
                "x",
                "is_constant",
                "min_periods",
                "count",
                "mean",
                "corr"
            ],
            "moments_consistency_var_debiasing_factors": [
                "x",
                "var_biased",
                "var_unbiased",
                "var_debiasing_factors"
            ],
            "moments_consistency_var_data": [
                "x",
                "is_constant",
                "min_periods",
                "count",
                "mean",
                "var_unbiased",
                "var_biased"
            ],
            "moments_consistency_std_data": [
                "x",
                "std_unbiased",
                "var_unbiased",
                "std_biased",
                "var_biased"
            ],
            "moments_consistency_cov_data": [
                "x",
                "cov_unbiased",
                "var_unbiased",
                "cov_biased",
                "var_biased"
            ],
            "moments_consistency_series_data": [
                "x",
                "corr",
                "mean",
                "std_biased",
                "std_unbiased",
                "cov_unbiased",
                "var_unbiased",
                "var_biased",
                "cov_biased"
            ]
        },
        "pandas.tests.window.test_pairwise": {
            "TestPairwise": {
                "compare": [
                    "self",
                    "result",
                    "expected"
                ],
                "test_no_flex": [
                    "self",
                    "f"
                ],
                "test_pairwise_with_self": [
                    "self",
                    "f"
                ],
                "test_no_pairwise_with_self": [
                    "self",
                    "f"
                ],
                "test_pairwise_with_other": [
                    "self",
                    "f"
                ],
                "test_no_pairwise_with_other": [
                    "self",
                    "f"
                ],
                "test_pairwise_with_series": [
                    "self",
                    "f"
                ],
                "test_corr_freq_memory_error": [
                    "self"
                ],
                "test_cov_mulittindex": [
                    "self"
                ]
            }
        },
        "pandas.tests.window.test_apply": {
            "test_rolling_apply_invalid_raw": [
                "bad_raw"
            ],
            "test_rolling_apply_out_of_bounds": [
                "engine_and_raw"
            ],
            "test_rolling_apply_with_pandas_objects": [
                "window"
            ],
            "test_rolling_apply": [
                "engine_and_raw"
            ],
            "test_all_apply": [
                "engine_and_raw"
            ],
            "test_ragged_apply": [
                "engine_and_raw"
            ],
            "test_invalid_engine": [],
            "test_invalid_engine_kwargs_cython": [],
            "test_invalid_raw_numba": [],
            "test_invalid_kwargs_nopython": [],
            "test_rolling_apply_args_kwargs": [
                "args_kwargs"
            ]
        },
        "pandas.tests.window.test_timeseries_window": {
            "TestRollingTS": {
                "setup_method": [
                    "self",
                    "method"
                ],
                "test_doc_string": [
                    "self"
                ],
                "test_valid": [
                    "self"
                ],
                "test_on": [
                    "self"
                ],
                "test_monotonic_on": [
                    "self"
                ],
                "test_non_monotonic_on": [
                    "self"
                ],
                "test_frame_on": [
                    "self"
                ],
                "test_frame_on2": [
                    "self"
                ],
                "test_basic_regular": [
                    "self"
                ],
                "test_min_periods": [
                    "self"
                ],
                "test_closed": [
                    "self"
                ],
                "test_ragged_sum": [
                    "self"
                ],
                "test_ragged_mean": [
                    "self"
                ],
                "test_ragged_median": [
                    "self"
                ],
                "test_ragged_quantile": [
                    "self"
                ],
                "test_ragged_std": [
                    "self"
                ],
                "test_ragged_var": [
                    "self"
                ],
                "test_ragged_skew": [
                    "self"
                ],
                "test_ragged_kurt": [
                    "self"
                ],
                "test_ragged_count": [
                    "self"
                ],
                "test_regular_min": [
                    "self"
                ],
                "test_ragged_min": [
                    "self"
                ],
                "test_perf_min": [
                    "self"
                ],
                "test_ragged_max": [
                    "self"
                ],
                "test_freqs_ops": [
                    "self",
                    "freq",
                    "op",
                    "result_data"
                ],
                "test_all": [
                    "self"
                ],
                "test_all2": [
                    "self"
                ],
                "test_groupby_monotonic": [
                    "self"
                ],
                "test_non_monotonic": [
                    "self"
                ],
                "test_rolling_cov_offset": [
                    "self"
                ],
                "test_rolling_on_decreasing_index": [
                    "self"
                ],
                "test_rolling_on_empty": [
                    "self"
                ],
                "test_rolling_on_multi_index_level": [
                    "self"
                ]
            }
        },
        "pandas.tests.window.test_api": {
            "test_getitem": [
                "frame"
            ],
            "test_select_bad_cols": [],
            "test_attribute_access": [],
            "tests_skip_nuisance": [],
            "test_skip_sum_object_raises": [],
            "test_agg": [],
            "test_agg_apply": [
                "raw"
            ],
            "test_agg_consistency": [],
            "test_agg_nested_dicts": [],
            "test_count_nonnumeric_types": [],
            "test_window_with_args": [],
            "test_preserve_metadata": [],
            "test_multiple_agg_funcs": [
                "func",
                "window_size",
                "expected_vals"
            ]
        },
        "pandas.tests.window.test_ewm": {
            "test_doc_string": [],
            "test_constructor": [
                "which"
            ],
            "test_numpy_compat": [
                "method"
            ],
            "test_ewma_times_not_datetime_type": [],
            "test_ewma_times_not_same_length": [],
            "test_ewma_halflife_not_correct_type": [],
            "test_ewma_halflife_without_times": [
                "halflife_with_times"
            ],
            "test_ewma_with_times_equal_spacing": [
                "halflife_with_times",
                "times",
                "min_periods"
            ],
            "test_ewma_with_times_variable_spacing": [
                "tz_aware_fixture"
            ]
        },
        "pandas.tests.window.test_rolling": {
            "test_doc_string": [],
            "test_constructor": [
                "which"
            ],
            "test_constructor_with_win_type": [
                "which"
            ],
            "test_constructor_with_timedelta_window": [
                "window"
            ],
            "test_constructor_timedelta_window_and_minperiods": [
                "window",
                "raw"
            ],
            "test_numpy_compat": [
                "method"
            ],
            "test_closed": [],
            "test_closed_empty": [
                "closed",
                "arithmetic_win_operators"
            ],
            "test_closed_one_entry": [
                "func"
            ],
            "test_closed_one_entry_groupby": [
                "func"
            ],
            "test_closed_min_max_datetime": [
                "input_dtype",
                "func",
                "closed",
                "expected"
            ],
            "test_closed_uneven": [],
            "test_closed_min_max_minp": [
                "func",
                "closed",
                "expected"
            ],
            "test_closed_median_quantile": [
                "closed",
                "expected"
            ],
            "tests_empty_df_rolling": [
                "roller"
            ],
            "test_empty_window_median_quantile": [],
            "test_missing_minp_zero": [],
            "test_missing_minp_zero_variable": [],
            "test_multi_index_names": [],
            "test_rolling_axis_sum": [
                "axis_frame"
            ],
            "test_rolling_axis_count": [
                "axis_frame"
            ],
            "test_readonly_array": [],
            "test_rolling_datetime": [
                "axis_frame",
                "tz_naive_fixture"
            ],
            "test_rolling_window_as_string": [],
            "test_min_periods1": [],
            "test_rolling_count_with_min_periods": [
                "constructor"
            ],
            "test_rolling_count_default_min_periods_with_null_values": [
                "constructor"
            ],
            "test_iter_rolling_dataframe": [
                "df",
                "expected",
                "window",
                "min_periods"
            ],
            "test_iter_rolling_on_dataframe": [
                "expected",
                "window"
            ],
            "test_iter_rolling_series": [
                "ser",
                "expected",
                "window",
                "min_periods"
            ],
            "test_iter_rolling_datetime": [
                "expected",
                "expected_index",
                "window"
            ],
            "test_rolling_positional_argument": [
                "grouping",
                "_index",
                "raw"
            ]
        },
        "pandas.tests.window.test_window": {
            "test_constructor": [
                "which"
            ],
            "test_constructor_with_win_type": [
                "which",
                "win_types"
            ],
            "test_numpy_compat": [
                "method"
            ],
            "test_agg_function_support": [
                "arg"
            ]
        },
        "pandas.tests.window.test_dtypes": {
            "Dtype": {
                "get_expects": [
                    "self"
                ],
                "_create_dtype_data": [
                    "self",
                    "dtype"
                ],
                "_create_data": [
                    "self"
                ],
                "test_dtypes": [
                    "self"
                ],
                "check_dtypes": [
                    "self",
                    "f",
                    "f_name",
                    "d",
                    "d_name",
                    "exp"
                ]
            },
            "TestDtype_object": {},
            "Dtype_integer": {},
            "TestDtype_int8": {},
            "TestDtype_int16": {},
            "TestDtype_int32": {},
            "TestDtype_int64": {},
            "Dtype_uinteger": {},
            "TestDtype_uint8": {},
            "TestDtype_uint16": {},
            "TestDtype_uint32": {},
            "TestDtype_uint64": {},
            "Dtype_float": {},
            "TestDtype_float16": {},
            "TestDtype_float32": {},
            "TestDtype_float64": {},
            "TestDtype_category": {
                "_create_dtype_data": [
                    "self",
                    "dtype"
                ]
            },
            "DatetimeLike": {
                "check_dtypes": [
                    "self",
                    "f",
                    "f_name",
                    "d",
                    "d_name",
                    "exp"
                ]
            },
            "TestDtype_timedelta": {},
            "TestDtype_datetime": {},
            "TestDtype_datetime64UTC": {
                "_create_data": [
                    "self"
                ]
            }
        },
        "pandas.tests.window.test_expanding": {
            "test_doc_string": [],
            "test_constructor": [
                "which"
            ],
            "test_numpy_compat": [
                "method"
            ],
            "test_empty_df_expanding": [
                "expander"
            ],
            "test_missing_minp_zero": [],
            "test_expanding_axis": [
                "axis_frame"
            ],
            "test_expanding_count_with_min_periods": [
                "constructor"
            ],
            "test_expanding_count_default_min_periods_with_null_values": [
                "constructor"
            ],
            "test_iter_expanding_dataframe": [
                "df",
                "expected",
                "min_periods"
            ],
            "test_iter_expanding_series": [
                "ser",
                "expected",
                "min_periods"
            ],
            "test_center_deprecate_warning": []
        },
        "pandas.tests.window.conftest": {
            "raw": [
                "request"
            ],
            "win_types": [
                "request"
            ],
            "win_types_special": [
                "request"
            ],
            "arithmetic_win_operators": [
                "request"
            ],
            "closed": [
                "request"
            ],
            "center": [
                "request"
            ],
            "min_periods": [
                "request"
            ],
            "parallel": [
                "request"
            ],
            "nogil": [
                "request"
            ],
            "nopython": [
                "request"
            ],
            "engine": [
                "request"
            ],
            "engine_and_raw": [
                "request"
            ],
            "_create_consistency_data": [],
            "consistency_data": [
                "request"
            ],
            "_create_arr": [],
            "_create_rng": [],
            "_create_series": [],
            "_create_frame": [],
            "nan_locs": [],
            "arr": [],
            "frame": [],
            "series": [],
            "which": [
                "request"
            ],
            "halflife_with_times": [
                "request"
            ]
        },
        "pandas.tests.window.test_numba": {
            "test_use_global_config": [],
            "TestApply": {
                "test_numba_vs_cython": [
                    "self",
                    "jit",
                    "nogil",
                    "parallel",
                    "nopython",
                    "center"
                ],
                "test_cache": [
                    "self",
                    "jit",
                    "nogil",
                    "parallel",
                    "nopython"
                ]
            }
        },
        "pandas.tests.window.test_base_indexer": {
            "test_bad_get_window_bounds_signature": [],
            "test_expanding_indexer": [],
            "test_indexer_constructor_arg": [],
            "test_indexer_accepts_rolling_args": [],
            "test_win_type_not_implemented": [],
            "test_rolling_forward_window": [
                "constructor",
                "func",
                "np_func",
                "expected",
                "np_kwargs"
            ],
            "test_rolling_forward_skewness": [
                "constructor"
            ],
            "test_rolling_forward_cov_corr": [
                "func",
                "expected"
            ],
            "test_non_fixed_variable_window_indexer": [
                "closed",
                "expected_data"
            ]
        },
        "pandas.tests.window": {},
        "pandas.tests.window.test_grouper": {
            "TestGrouperGrouping": {
                "setup_method": [
                    "self",
                    "method"
                ],
                "test_mutated": [
                    "self"
                ],
                "test_getitem": [
                    "self"
                ],
                "test_getitem_multiple": [
                    "self"
                ],
                "test_rolling": [
                    "self"
                ],
                "test_rolling_quantile": [
                    "self",
                    "interpolation"
                ],
                "test_rolling_corr_cov": [
                    "self"
                ],
                "test_rolling_apply": [
                    "self",
                    "raw"
                ],
                "test_rolling_apply_mutability": [
                    "self"
                ],
                "test_expanding": [
                    "self"
                ],
                "test_expanding_quantile": [
                    "self",
                    "interpolation"
                ],
                "test_expanding_corr_cov": [
                    "self"
                ],
                "test_expanding_apply": [
                    "self",
                    "raw"
                ],
                "test_groupby_rolling": [
                    "self",
                    "expected_value",
                    "raw_value"
                ],
                "test_groupby_rolling_center_center": [
                    "self"
                ],
                "test_groupby_subselect_rolling": [
                    "self"
                ],
                "test_groupby_rolling_custom_indexer": [
                    "self"
                ],
                "test_groupby_rolling_subset_with_closed": [
                    "self"
                ],
                "test_groupby_subset_rolling_subset_with_closed": [
                    "self"
                ]
            }
        },
        "pandas.tests.arithmetic.test_datetime64": {
            "test_shift_months": [
                "years",
                "months"
            ],
            "test_dt64arr_addsub_object_dtype_2d": [],
            "TestDatetime64ArrayLikeComparisons": {
                "test_compare_zerodim": [
                    "self",
                    "tz_naive_fixture",
                    "box_with_array"
                ],
                "test_dt64arr_cmp_scalar_invalid": [
                    "self",
                    "other",
                    "tz_naive_fixture",
                    "box_with_array"
                ],
                "test_dt64arr_cmp_arraylike_invalid": [
                    "self",
                    "other",
                    "tz_naive_fixture"
                ],
                "test_dt64arr_cmp_mixed_invalid": [
                    "self",
                    "tz_naive_fixture"
                ],
                "test_dt64arr_nat_comparison": [
                    "self",
                    "tz_naive_fixture",
                    "box_with_array"
                ]
            },
            "TestDatetime64SeriesComparison": {
                "test_nat_comparisons": [
                    "self",
                    "dtype",
                    "index_or_series",
                    "reverse",
                    "pair"
                ],
                "test_comparison_invalid": [
                    "self",
                    "tz_naive_fixture",
                    "box_with_array"
                ],
                "test_nat_comparisons_scalar": [
                    "self",
                    "dtype",
                    "data",
                    "box_with_array"
                ],
                "test_series_comparison_scalars": [
                    "self",
                    "val"
                ],
                "test_timestamp_compare_series": [
                    "self",
                    "left",
                    "right"
                ],
                "test_dt64arr_timestamp_equality": [
                    "self",
                    "box_with_array"
                ]
            },
            "TestDatetimeIndexComparisons": {
                "test_comparators": [
                    "self",
                    "op"
                ],
                "test_dti_cmp_datetimelike": [
                    "self",
                    "other",
                    "tz_naive_fixture"
                ],
                "test_dti_cmp_nat": [
                    "self",
                    "dtype",
                    "box_with_array"
                ],
                "test_dti_cmp_nat_behaves_like_float_cmp_nan": [
                    "self"
                ],
                "test_comparison_tzawareness_compat": [
                    "self",
                    "op",
                    "box_with_array"
                ],
                "test_comparison_tzawareness_compat_scalars": [
                    "self",
                    "op",
                    "box_with_array"
                ],
                "test_scalar_comparison_tzawareness": [
                    "self",
                    "op",
                    "other",
                    "tz_aware_fixture",
                    "box_with_array"
                ],
                "test_nat_comparison_tzawareness": [
                    "self",
                    "op"
                ],
                "test_dti_cmp_str": [
                    "self",
                    "tz_naive_fixture"
                ],
                "test_dti_cmp_list": [
                    "self"
                ],
                "test_dti_cmp_tdi_tzawareness": [
                    "self",
                    "other"
                ],
                "test_dti_cmp_object_dtype": [
                    "self"
                ]
            },
            "TestDatetime64Arithmetic": {
                "test_dt64arr_add_timedeltalike_scalar": [
                    "self",
                    "tz_naive_fixture",
                    "two_hours",
                    "box_with_array"
                ],
                "test_dt64arr_iadd_timedeltalike_scalar": [
                    "self",
                    "tz_naive_fixture",
                    "two_hours",
                    "box_with_array"
                ],
                "test_dt64arr_sub_timedeltalike_scalar": [
                    "self",
                    "tz_naive_fixture",
                    "two_hours",
                    "box_with_array"
                ],
                "test_dt64arr_isub_timedeltalike_scalar": [
                    "self",
                    "tz_naive_fixture",
                    "two_hours",
                    "box_with_array"
                ],
                "test_dt64arr_add_td64_scalar": [
                    "self",
                    "box_with_array"
                ],
                "test_dt64arr_add_sub_td64_nat": [
                    "self",
                    "box_with_array",
                    "tz_naive_fixture"
                ],
                "test_dt64arr_add_sub_td64ndarray": [
                    "self",
                    "tz_naive_fixture",
                    "box_with_array"
                ],
                "test_dt64arr_sub_dtscalar": [
                    "self",
                    "box_with_array",
                    "ts"
                ],
                "test_dt64arr_sub_datetime64_not_ns": [
                    "self",
                    "box_with_array"
                ],
                "test_dt64arr_sub_timestamp": [
                    "self",
                    "box_with_array"
                ],
                "test_dt64arr_sub_NaT": [
                    "self",
                    "box_with_array"
                ],
                "test_dt64arr_sub_dt64object_array": [
                    "self",
                    "box_with_array",
                    "tz_naive_fixture"
                ],
                "test_dt64arr_naive_sub_dt64ndarray": [
                    "self",
                    "box_with_array"
                ],
                "test_dt64arr_aware_sub_dt64ndarray_raises": [
                    "self",
                    "tz_aware_fixture",
                    "box_with_array"
                ],
                "test_dt64arr_add_dt64ndarray_raises": [
                    "self",
                    "tz_naive_fixture",
                    "box_with_array"
                ],
                "test_dt64arr_add_timestamp_raises": [
                    "self",
                    "box_with_array"
                ],
                "test_dt64arr_add_sub_invalid": [
                    "self",
                    "dti_freq",
                    "other",
                    "box_with_array"
                ],
                "test_dt64arr_add_sub_parr": [
                    "self",
                    "dti_freq",
                    "pi_freq",
                    "box_with_array",
                    "box_with_array2"
                ],
                "test_dt64arr_addsub_time_objects_raises": [
                    "self",
                    "box_with_array",
                    "tz_naive_fixture"
                ]
            },
            "TestDatetime64DateOffsetArithmetic": {
                "test_dt64arr_series_add_tick_DateOffset": [
                    "self",
                    "box_with_array"
                ],
                "test_dt64arr_series_sub_tick_DateOffset": [
                    "self",
                    "box_with_array"
                ],
                "test_dt64arr_add_sub_tick_DateOffset_smoke": [
                    "self",
                    "cls_name",
                    "box_with_array"
                ],
                "test_dti_add_tick_tzaware": [
                    "self",
                    "tz_aware_fixture",
                    "box_with_array"
                ],
                "test_dt64arr_add_sub_relativedelta_offsets": [
                    "self",
                    "box_with_array"
                ],
                "test_dt64arr_add_sub_DateOffsets": [
                    "self",
                    "box_with_array",
                    "n",
                    "normalize",
                    "cls_and_kwargs"
                ],
                "test_dt64arr_add_sub_DateOffset": [
                    "self",
                    "box_with_array"
                ],
                "test_dt64arr_add_sub_offset_array": [
                    "self",
                    "tz_naive_fixture",
                    "box_with_array",
                    "box_other",
                    "op",
                    "other"
                ],
                "test_dti_add_sub_nonzero_mth_offset": [
                    "self",
                    "op",
                    "offset",
                    "exp",
                    "exp_freq",
                    "tz_aware_fixture",
                    "box_with_array"
                ]
            },
            "TestDatetime64OverflowHandling": {
                "test_dt64_overflow_masking": [
                    "self",
                    "box_with_array"
                ],
                "test_dt64_series_arith_overflow": [
                    "self"
                ],
                "test_datetimeindex_sub_timestamp_overflow": [
                    "self"
                ],
                "test_datetimeindex_sub_datetimeindex_overflow": [
                    "self"
                ]
            },
            "TestTimestampSeriesArithmetic": {
                "test_empty_series_add_sub": [
                    "self"
                ],
                "test_operators_datetimelike": [
                    "self"
                ],
                "test_dt64ser_sub_datetime_dtype": [
                    "self"
                ],
                "test_operators_datetimelike_invalid": [
                    "self",
                    "all_arithmetic_operators"
                ],
                "test_sub_single_tz": [
                    "self"
                ],
                "test_dt64tz_series_sub_dtitz": [
                    "self"
                ],
                "test_sub_datetime_compat": [
                    "self"
                ],
                "test_dt64_series_add_mixed_tick_DateOffset": [
                    "self"
                ],
                "test_datetime64_ops_nat": [
                    "self"
                ],
                "test_dt64_mul_div_numeric_invalid": [
                    "self",
                    "one",
                    "dt64_series"
                ],
                "test_dt64_series_add_intlike": [
                    "self",
                    "tz_naive_fixture",
                    "op"
                ],
                "test_operators_datetimelike_with_timezones": [
                    "self"
                ]
            },
            "TestDatetimeIndexArithmetic": {
                "test_dti_addsub_int": [
                    "self",
                    "tz_naive_fixture",
                    "one"
                ],
                "test_dti_add_intarray_tick": [
                    "self",
                    "int_holder",
                    "freq"
                ],
                "test_dti_add_intarray_non_tick": [
                    "self",
                    "int_holder",
                    "freq"
                ],
                "test_dti_add_intarray_no_freq": [
                    "self",
                    "int_holder"
                ],
                "test_dti_add_tdi": [
                    "self",
                    "tz_naive_fixture"
                ],
                "test_dti_iadd_tdi": [
                    "self",
                    "tz_naive_fixture"
                ],
                "test_dti_sub_tdi": [
                    "self",
                    "tz_naive_fixture"
                ],
                "test_dti_isub_tdi": [
                    "self",
                    "tz_naive_fixture"
                ],
                "test_add_datetimelike_and_dtarr": [
                    "self",
                    "box_with_array",
                    "addend",
                    "tz"
                ],
                "test_dta_add_sub_index": [
                    "self",
                    "tz_naive_fixture"
                ],
                "test_sub_dti_dti": [
                    "self"
                ],
                "test_timedelta64_equal_timedelta_supported_ops": [
                    "self",
                    "op"
                ],
                "test_ops_nat_mixed_datetime64_timedelta64": [
                    "self"
                ],
                "test_ufunc_coercions": [
                    "self"
                ],
                "test_dti_add_series": [
                    "self",
                    "tz_naive_fixture",
                    "names"
                ],
                "test_dti_addsub_offset_arraylike": [
                    "self",
                    "tz_naive_fixture",
                    "names",
                    "op",
                    "index_or_series"
                ],
                "test_dti_addsub_object_arraylike": [
                    "self",
                    "tz_naive_fixture",
                    "box_with_array",
                    "other_box"
                ]
            }
        },
        "pandas.tests.arithmetic.test_period": {
            "TestPeriodArrayLikeComparisons": {
                "test_compare_zerodim": [
                    "self",
                    "box_with_array"
                ],
                "test_compare_invalid_scalar": [
                    "self",
                    "box_with_array",
                    "scalar"
                ],
                "test_compare_invalid_listlike": [
                    "self",
                    "box_with_array",
                    "other"
                ],
                "test_compare_object_dtype": [
                    "self",
                    "box_with_array",
                    "other_box"
                ]
            },
            "TestPeriodIndexComparisons": {
                "test_eq": [
                    "self",
                    "other"
                ],
                "test_eq_integer_disallowed": [
                    "self",
                    "other"
                ],
                "test_pi_cmp_period": [
                    "self"
                ],
                "test_parr_cmp_period_scalar2": [
                    "self",
                    "box_with_array"
                ],
                "test_parr_cmp_period_scalar": [
                    "self",
                    "freq",
                    "box_with_array"
                ],
                "test_parr_cmp_pi": [
                    "self",
                    "freq",
                    "box_with_array"
                ],
                "test_parr_cmp_pi_mismatched_freq_raises": [
                    "self",
                    "freq",
                    "box_with_array"
                ],
                "test_pi_cmp_nat": [
                    "self",
                    "freq"
                ],
                "test_pi_cmp_nat_mismatched_freq_raises": [
                    "self",
                    "freq"
                ],
                "test_comp_nat": [
                    "self",
                    "dtype"
                ]
            },
            "TestPeriodSeriesComparisons": {
                "test_cmp_series_period_series_mixed_freq": [
                    "self"
                ]
            },
            "TestPeriodIndexSeriesComparisonConsistency": {
                "_check": [
                    "self",
                    "values",
                    "func",
                    "expected"
                ],
                "test_pi_comp_period": [
                    "self"
                ],
                "test_pi_comp_period_nat": [
                    "self"
                ]
            },
            "TestPeriodFrameArithmetic": {
                "test_ops_frame_period": [
                    "self"
                ]
            },
            "TestPeriodIndexArithmetic": {
                "test_parr_add_iadd_parr_raises": [
                    "self",
                    "box_with_array"
                ],
                "test_pi_sub_isub_pi": [
                    "self"
                ],
                "test_pi_sub_pi_with_nat": [
                    "self"
                ],
                "test_parr_sub_pi_mismatched_freq": [
                    "self",
                    "box_with_array"
                ],
                "test_sub_n_gt_1_ticks": [
                    "self",
                    "tick_classes",
                    "n"
                ],
                "test_sub_n_gt_1_offsets": [
                    "self",
                    "offset",
                    "kwd_name",
                    "n"
                ],
                "test_parr_add_sub_float_raises": [
                    "self",
                    "op",
                    "other",
                    "box_with_array"
                ],
                "test_parr_add_sub_invalid": [
                    "self",
                    "other",
                    "box_with_array"
                ],
                "test_pi_add_sub_td64_array_non_tick_raises": [
                    "self"
                ],
                "test_pi_add_sub_td64_array_tick": [
                    "self"
                ],
                "test_parr_sub_td64array": [
                    "self",
                    "box_with_array",
                    "tdi_freq",
                    "pi_freq"
                ],
                "test_pi_add_offset_array": [
                    "self",
                    "box"
                ],
                "test_pi_sub_offset_array": [
                    "self",
                    "box"
                ],
                "test_pi_add_iadd_int": [
                    "self",
                    "one"
                ],
                "test_pi_sub_isub_int": [
                    "self",
                    "one"
                ],
                "test_pi_sub_intlike": [
                    "self",
                    "five"
                ],
                "test_pi_sub_isub_offset": [
                    "self"
                ],
                "test_pi_add_offset_n_gt1": [
                    "self",
                    "box_with_array",
                    "transpose"
                ],
                "test_pi_add_offset_n_gt1_not_divisible": [
                    "self",
                    "box_with_array"
                ],
                "test_pi_add_intarray": [
                    "self",
                    "int_holder",
                    "op"
                ],
                "test_pi_sub_intarray": [
                    "self",
                    "int_holder"
                ],
                "test_pi_add_timedeltalike_minute_gt1": [
                    "self",
                    "three_days"
                ],
                "test_pi_add_timedeltalike_tick_gt1": [
                    "self",
                    "three_days",
                    "freqstr"
                ],
                "test_pi_add_iadd_timedeltalike_daily": [
                    "self",
                    "three_days"
                ],
                "test_pi_sub_isub_timedeltalike_daily": [
                    "self",
                    "three_days"
                ],
                "test_pi_add_sub_timedeltalike_freq_mismatch_daily": [
                    "self",
                    "not_daily"
                ],
                "test_pi_add_iadd_timedeltalike_hourly": [
                    "self",
                    "two_hours"
                ],
                "test_pi_add_timedeltalike_mismatched_freq_hourly": [
                    "self",
                    "not_hourly"
                ],
                "test_pi_sub_isub_timedeltalike_hourly": [
                    "self",
                    "two_hours"
                ],
                "test_add_iadd_timedeltalike_annual": [
                    "self"
                ],
                "test_pi_add_sub_timedeltalike_freq_mismatch_annual": [
                    "self",
                    "mismatched_freq"
                ],
                "test_pi_add_iadd_timedeltalike_M": [
                    "self"
                ],
                "test_pi_add_sub_timedeltalike_freq_mismatch_monthly": [
                    "self",
                    "mismatched_freq"
                ],
                "test_parr_add_sub_td64_nat": [
                    "self",
                    "box_with_array",
                    "transpose"
                ],
                "test_parr_add_sub_tdt64_nat_array": [
                    "self",
                    "box_with_array",
                    "other"
                ],
                "test_parr_add_sub_index": [
                    "self"
                ],
                "test_parr_add_sub_object_array": [
                    "self"
                ]
            },
            "TestPeriodSeriesArithmetic": {
                "test_ops_series_timedelta": [
                    "self"
                ],
                "test_ops_series_period": [
                    "self"
                ]
            },
            "TestPeriodIndexSeriesMethods": {
                "_check": [
                    "self",
                    "values",
                    "func",
                    "expected"
                ],
                "test_pi_ops": [
                    "self"
                ],
                "test_parr_ops_errors": [
                    "self",
                    "ng",
                    "func",
                    "box_with_array"
                ],
                "test_pi_ops_nat": [
                    "self"
                ],
                "test_pi_ops_array_int": [
                    "self"
                ],
                "test_pi_ops_offset": [
                    "self"
                ],
                "test_pi_offset_errors": [
                    "self"
                ],
                "test_pi_sub_period": [
                    "self"
                ],
                "test_pi_sub_pdnat": [
                    "self"
                ],
                "test_pi_sub_period_nat": [
                    "self"
                ],
                "test_comparison_operations": [
                    "self",
                    "scalars"
                ]
            }
        },
        "pandas.tests.arithmetic.common": {
            "assert_invalid_addsub_type": [
                "left",
                "right",
                "msg"
            ],
            "get_upcast_box": [
                "box",
                "vector"
            ],
            "assert_invalid_comparison": [
                "left",
                "right",
                "box"
            ]
        },
        "pandas.tests.arithmetic.test_timedelta64": {
            "assert_dtype": [
                "obj",
                "expected_dtype"
            ],
            "TestTimedelta64ArrayLikeComparisons": {
                "test_compare_timedelta64_zerodim": [
                    "self",
                    "box_with_array"
                ],
                "test_compare_timedeltalike_scalar": [
                    "self",
                    "box_with_array",
                    "td_scalar"
                ],
                "test_td64_comparisons_invalid": [
                    "self",
                    "box_with_array",
                    "invalid"
                ],
                "test_td64arr_cmp_arraylike_invalid": [
                    "self",
                    "other"
                ],
                "test_td64arr_cmp_mixed_invalid": [
                    "self"
                ]
            },
            "TestTimedelta64ArrayComparisons": {
                "test_comp_nat": [
                    "self",
                    "dtype"
                ],
                "test_comparisons_nat": [
                    "self"
                ],
                "test_comparisons_coverage": [
                    "self"
                ]
            },
            "TestTimedelta64ArithmeticUnsorted": {
                "test_ufunc_coercions": [
                    "self"
                ],
                "test_subtraction_ops": [
                    "self"
                ],
                "test_subtraction_ops_with_tz": [
                    "self"
                ],
                "test_dti_tdi_numeric_ops": [
                    "self"
                ],
                "test_addition_ops": [
                    "self"
                ],
                "test_timedelta": [
                    "self",
                    "freq"
                ],
                "test_tda_add_sub_index": [
                    "self"
                ],
                "test_tda_add_dt64_object_array": [
                    "self",
                    "box_with_array",
                    "tz_naive_fixture"
                ],
                "test_tdi_iadd_timedeltalike": [
                    "self",
                    "two_hours",
                    "box_with_array"
                ],
                "test_tdi_isub_timedeltalike": [
                    "self",
                    "two_hours",
                    "box_with_array"
                ],
                "test_tdi_ops_attributes": [
                    "self"
                ]
            },
            "TestAddSubNaTMasking": {
                "test_tdi_add_timestamp_nat_masking": [
                    "self"
                ],
                "test_tdi_add_overflow": [
                    "self"
                ]
            },
            "TestTimedeltaArraylikeAddSubOps": {
                "test_timedelta_ops_with_missing_values": [
                    "self"
                ],
                "test_operators_timedelta64": [
                    "self"
                ],
                "test_timedelta64_ops_nat": [
                    "self"
                ],
                "test_td64arr_sub_timestamp_raises": [
                    "self",
                    "box_with_array"
                ],
                "test_td64arr_add_timestamp": [
                    "self",
                    "box_with_array",
                    "tz_naive_fixture"
                ],
                "test_td64arr_add_sub_datetimelike_scalar": [
                    "self",
                    "ts",
                    "box_with_array"
                ],
                "test_tdi_sub_dt64_array": [
                    "self",
                    "box_with_array"
                ],
                "test_tdi_add_dt64_array": [
                    "self",
                    "box_with_array"
                ],
                "test_td64arr_add_datetime64_nat": [
                    "self",
                    "box_with_array"
                ],
                "test_td64arr_sub_periodlike": [
                    "self",
                    "box_with_array",
                    "tdi_freq",
                    "pi_freq"
                ],
                "test_td64arr_addsub_numeric_scalar_invalid": [
                    "self",
                    "box_with_array",
                    "other"
                ],
                "test_td64arr_addsub_numeric_arr_invalid": [
                    "self",
                    "box_with_array",
                    "vec",
                    "any_real_dtype"
                ],
                "test_td64arr_add_sub_int": [
                    "self",
                    "box_with_array",
                    "one"
                ],
                "test_td64arr_add_sub_integer_array": [
                    "self",
                    "box_with_array"
                ],
                "test_td64arr_addsub_integer_array_no_freq": [
                    "self",
                    "box_with_array"
                ],
                "test_td64arr_add_td64_array": [
                    "self",
                    "box_with_array"
                ],
                "test_td64arr_sub_td64_array": [
                    "self",
                    "box_with_array"
                ],
                "test_td64arr_add_sub_tdi": [
                    "self",
                    "box_with_array",
                    "names"
                ],
                "test_td64arr_add_sub_td64_nat": [
                    "self",
                    "box_with_array"
                ],
                "test_td64arr_sub_NaT": [
                    "self",
                    "box_with_array"
                ],
                "test_td64arr_add_timedeltalike": [
                    "self",
                    "two_hours",
                    "box_with_array"
                ],
                "test_td64arr_sub_timedeltalike": [
                    "self",
                    "two_hours",
                    "box_with_array"
                ],
                "test_td64arr_add_offset_index": [
                    "self",
                    "names",
                    "box_with_array"
                ],
                "test_td64arr_add_offset_array": [
                    "self",
                    "box_with_array"
                ],
                "test_td64arr_sub_offset_index": [
                    "self",
                    "names",
                    "box_with_array"
                ],
                "test_td64arr_sub_offset_array": [
                    "self",
                    "box_with_array"
                ],
                "test_td64arr_with_offset_series": [
                    "self",
                    "names",
                    "box_with_array"
                ],
                "test_td64arr_addsub_anchored_offset_arraylike": [
                    "self",
                    "obox",
                    "box_with_array"
                ],
                "test_td64arr_add_sub_object_array": [
                    "self",
                    "box_with_array"
                ]
            },
            "TestTimedeltaArraylikeMulDivOps": {
                "test_td64arr_mul_int": [
                    "self",
                    "box_with_array"
                ],
                "test_td64arr_mul_tdlike_scalar_raises": [
                    "self",
                    "two_hours",
                    "box_with_array"
                ],
                "test_tdi_mul_int_array_zerodim": [
                    "self",
                    "box_with_array"
                ],
                "test_tdi_mul_int_array": [
                    "self",
                    "box_with_array"
                ],
                "test_tdi_mul_int_series": [
                    "self",
                    "box_with_array"
                ],
                "test_tdi_mul_float_series": [
                    "self",
                    "box_with_array"
                ],
                "test_tdi_rmul_arraylike": [
                    "self",
                    "other",
                    "box_with_array"
                ],
                "test_td64arr_div_nat_invalid": [
                    "self",
                    "box_with_array"
                ],
                "test_td64arr_div_td64nat": [
                    "self",
                    "box_with_array"
                ],
                "test_td64arr_div_int": [
                    "self",
                    "box_with_array"
                ],
                "test_td64arr_div_tdlike_scalar": [
                    "self",
                    "two_hours",
                    "box_with_array"
                ],
                "test_td64arr_div_td64_scalar": [
                    "self",
                    "m",
                    "unit",
                    "box_with_array"
                ],
                "test_td64arr_div_tdlike_scalar_with_nat": [
                    "self",
                    "two_hours",
                    "box_with_array"
                ],
                "test_td64arr_div_td64_ndarray": [
                    "self",
                    "box_with_array"
                ],
                "test_tdarr_div_length_mismatch": [
                    "self",
                    "box_with_array"
                ],
                "test_td64arr_floordiv_tdscalar": [
                    "self",
                    "box_with_array",
                    "scalar_td"
                ],
                "test_td64arr_rfloordiv_tdscalar": [
                    "self",
                    "box_with_array",
                    "scalar_td"
                ],
                "test_td64arr_rfloordiv_tdscalar_explicit": [
                    "self",
                    "box_with_array",
                    "scalar_td"
                ],
                "test_td64arr_floordiv_int": [
                    "self",
                    "box_with_array"
                ],
                "test_td64arr_floordiv_tdlike_scalar": [
                    "self",
                    "two_hours",
                    "box_with_array"
                ],
                "test_td64arr_rfloordiv_tdlike_scalar": [
                    "self",
                    "scalar_td",
                    "box_with_array"
                ],
                "test_td64arr_mod_tdscalar": [
                    "self",
                    "box_with_array",
                    "three_days"
                ],
                "test_td64arr_mod_int": [
                    "self",
                    "box_with_array"
                ],
                "test_td64arr_rmod_tdscalar": [
                    "self",
                    "box_with_array",
                    "three_days"
                ],
                "test_td64arr_mul_tdscalar_invalid": [
                    "self",
                    "box_with_array",
                    "scalar_td"
                ],
                "test_td64arr_mul_too_short_raises": [
                    "self",
                    "box_with_array"
                ],
                "test_td64arr_mul_td64arr_raises": [
                    "self",
                    "box_with_array"
                ],
                "test_td64arr_mul_numeric_scalar": [
                    "self",
                    "box_with_array",
                    "one"
                ],
                "test_td64arr_div_numeric_scalar": [
                    "self",
                    "box_with_array",
                    "two"
                ],
                "test_td64arr_rmul_numeric_array": [
                    "self",
                    "box_with_array",
                    "vector",
                    "any_real_dtype"
                ],
                "test_td64arr_div_numeric_array": [
                    "self",
                    "box_with_array",
                    "vector",
                    "any_real_dtype"
                ],
                "test_td64arr_mul_int_series": [
                    "self",
                    "box_with_array",
                    "names",
                    "request"
                ],
                "test_float_series_rdiv_td64arr": [
                    "self",
                    "box_with_array",
                    "names"
                ]
            },
            "TestTimedelta64ArrayLikeArithmetic": {
                "test_td64arr_pow_invalid": [
                    "self",
                    "scalar_td",
                    "box_with_array"
                ]
            }
        },
        "pandas.tests.arithmetic.test_interval": {
            "left_right_dtypes": [
                "request"
            ],
            "array": [
                "left_right_dtypes"
            ],
            "create_categorical_intervals": [
                "left",
                "right",
                "closed"
            ],
            "create_series_intervals": [
                "left",
                "right",
                "closed"
            ],
            "create_series_categorical_intervals": [
                "left",
                "right",
                "closed"
            ],
            "TestComparison": {
                "op": [
                    "self",
                    "request"
                ],
                "interval_constructor": [
                    "self",
                    "request"
                ],
                "elementwise_comparison": [
                    "self",
                    "op",
                    "array",
                    "other"
                ],
                "test_compare_scalar_interval": [
                    "self",
                    "op",
                    "array"
                ],
                "test_compare_scalar_interval_mixed_closed": [
                    "self",
                    "op",
                    "closed",
                    "other_closed"
                ],
                "test_compare_scalar_na": [
                    "self",
                    "op",
                    "array",
                    "nulls_fixture",
                    "request"
                ],
                "test_compare_scalar_other": [
                    "self",
                    "op",
                    "array",
                    "other"
                ],
                "test_compare_list_like_interval": [
                    "self",
                    "op",
                    "array",
                    "interval_constructor"
                ],
                "test_compare_list_like_interval_mixed_closed": [
                    "self",
                    "op",
                    "interval_constructor",
                    "closed",
                    "other_closed"
                ],
                "test_compare_list_like_object": [
                    "self",
                    "op",
                    "array",
                    "other"
                ],
                "test_compare_list_like_nan": [
                    "self",
                    "op",
                    "array",
                    "nulls_fixture",
                    "request"
                ],
                "test_compare_list_like_other": [
                    "self",
                    "op",
                    "array",
                    "other"
                ],
                "test_compare_length_mismatch_errors": [
                    "self",
                    "op",
                    "other_constructor",
                    "length"
                ],
                "test_index_series_compat": [
                    "self",
                    "op",
                    "constructor",
                    "expected_type",
                    "assert_func"
                ],
                "test_comparison_operations": [
                    "self",
                    "scalars"
                ]
            }
        },
        "pandas.tests.arithmetic.conftest": {
            "id_func": [
                "x"
            ],
            "names": [
                "request"
            ],
            "one": [
                "request"
            ],
            "zero": [
                "request"
            ],
            "numeric_idx": [
                "request"
            ],
            "scalar_td": [
                "request"
            ],
            "three_days": [
                "request"
            ],
            "two_hours": [
                "request"
            ],
            "not_hourly": [
                "request"
            ],
            "not_daily": [
                "request"
            ],
            "mismatched_freq": [
                "request"
            ],
            "box": [
                "request"
            ],
            "box_with_array": [
                "request"
            ]
        },
        "pandas.tests.arithmetic.test_array_ops": {
            "test_na_logical_op_2d": [],
            "test_object_comparison_2d": []
        },
        "pandas.tests.arithmetic.test_object": {
            "test_index_ops_defer_to_unknown_subclasses": [
                "other"
            ],
            "TestObjectComparisons": {
                "test_comparison_object_numeric_nas": [
                    "self"
                ],
                "test_object_comparisons": [
                    "self"
                ],
                "test_more_na_comparisons": [
                    "self",
                    "dtype"
                ]
            },
            "TestArithmetic": {
                "test_pow_ops_object": [
                    "self"
                ],
                "test_add_extension_scalar": [
                    "self",
                    "other",
                    "box_with_array",
                    "op"
                ],
                "test_objarr_add_str": [
                    "self",
                    "box"
                ],
                "test_objarr_radd_str": [
                    "self",
                    "box"
                ],
                "test_objarr_radd_str_invalid": [
                    "self",
                    "dtype",
                    "data",
                    "box_with_array"
                ],
                "test_objarr_add_invalid": [
                    "self",
                    "op",
                    "box_with_array"
                ],
                "test_operators_na_handling": [
                    "self"
                ],
                "test_series_with_dtype_radd_timedelta": [
                    "self",
                    "dtype"
                ],
                "test_mixed_timezone_series_ops_object": [
                    "self"
                ],
                "test_iadd_preserves_name": [
                    "self"
                ],
                "test_add_string": [
                    "self"
                ],
                "test_iadd_string": [
                    "self"
                ],
                "test_add": [
                    "self"
                ],
                "test_sub_fail": [
                    "self"
                ],
                "test_sub_object": [
                    "self"
                ],
                "test_rsub_object": [
                    "self"
                ]
            },
            "MyIndex": {
                "_simple_new": [
                    "cls",
                    "values",
                    "name",
                    "dtype"
                ],
                "__add__": [
                    "self",
                    "other"
                ],
                "__radd__": [
                    "self",
                    "other"
                ]
            }
        },
        "pandas.tests.arithmetic": {},
        "pandas.tests.arithmetic.test_numeric": {
            "adjust_negative_zero": [
                "zero",
                "expected"
            ],
            "test_fill_value_inf_masking": [],
            "test_dataframe_div_silenced": [],
            "TestNumericComparisons": {
                "test_operator_series_comparison_zerorank": [
                    "self"
                ],
                "test_df_numeric_cmp_dt64_raises": [
                    "self"
                ],
                "test_compare_invalid": [
                    "self"
                ]
            },
            "TestNumericArraylikeArithmeticWithDatetimeLike": {
                "test_mul_td64arr": [
                    "self",
                    "left",
                    "box_cls"
                ],
                "test_div_td64arr": [
                    "self",
                    "left",
                    "box_cls"
                ],
                "test_ops_series": [
                    "self"
                ],
                "test_numeric_arr_mul_tdscalar": [
                    "self",
                    "scalar_td",
                    "numeric_idx",
                    "box"
                ],
                "test_numeric_arr_mul_tdscalar_numexpr_path": [
                    "self",
                    "scalar_td",
                    "box"
                ],
                "test_numeric_arr_rdiv_tdscalar": [
                    "self",
                    "three_days",
                    "numeric_idx",
                    "box"
                ],
                "test_add_sub_timedeltalike_invalid": [
                    "self",
                    "numeric_idx",
                    "other",
                    "box"
                ],
                "test_add_sub_datetimelike_invalid": [
                    "self",
                    "numeric_idx",
                    "other",
                    "box"
                ]
            },
            "TestDivisionByZero": {
                "test_div_zero": [
                    "self",
                    "zero",
                    "numeric_idx"
                ],
                "test_floordiv_zero": [
                    "self",
                    "zero",
                    "numeric_idx"
                ],
                "test_mod_zero": [
                    "self",
                    "zero",
                    "numeric_idx"
                ],
                "test_divmod_zero": [
                    "self",
                    "zero",
                    "numeric_idx"
                ],
                "test_div_negative_zero": [
                    "self",
                    "zero",
                    "numeric_idx",
                    "op"
                ],
                "test_ser_div_ser": [
                    "self",
                    "dtype1",
                    "any_real_dtype"
                ],
                "test_ser_divmod_zero": [
                    "self",
                    "dtype1",
                    "any_real_dtype"
                ],
                "test_ser_divmod_inf": [
                    "self"
                ],
                "test_rdiv_zero_compat": [
                    "self"
                ],
                "test_div_zero_inf_signs": [
                    "self"
                ],
                "test_rdiv_zero": [
                    "self"
                ],
                "test_floordiv_div": [
                    "self"
                ],
                "test_df_div_zero_df": [
                    "self"
                ],
                "test_df_div_zero_array": [
                    "self"
                ],
                "test_df_div_zero_int": [
                    "self"
                ],
                "test_df_div_zero_series_does_not_commute": [
                    "self"
                ],
                "test_df_mod_zero_df": [
                    "self"
                ],
                "test_df_mod_zero_array": [
                    "self"
                ],
                "test_df_mod_zero_int": [
                    "self"
                ],
                "test_df_mod_zero_series_does_not_commute": [
                    "self"
                ]
            },
            "TestMultiplicationDivision": {
                "test_divide_decimal": [
                    "self",
                    "box"
                ],
                "test_div_equiv_binop": [
                    "self"
                ],
                "test_div_int": [
                    "self",
                    "numeric_idx"
                ],
                "test_mul_int_identity": [
                    "self",
                    "op",
                    "numeric_idx",
                    "box_with_array"
                ],
                "test_mul_int_array": [
                    "self",
                    "numeric_idx"
                ],
                "test_mul_int_series": [
                    "self",
                    "numeric_idx"
                ],
                "test_mul_float_series": [
                    "self",
                    "numeric_idx"
                ],
                "test_mul_index": [
                    "self",
                    "numeric_idx"
                ],
                "test_mul_datelike_raises": [
                    "self",
                    "numeric_idx"
                ],
                "test_mul_size_mismatch_raises": [
                    "self",
                    "numeric_idx"
                ],
                "test_pow_float": [
                    "self",
                    "op",
                    "numeric_idx",
                    "box_with_array"
                ],
                "test_modulo": [
                    "self",
                    "numeric_idx",
                    "box_with_array"
                ],
                "test_divmod_scalar": [
                    "self",
                    "numeric_idx"
                ],
                "test_divmod_ndarray": [
                    "self",
                    "numeric_idx"
                ],
                "test_divmod_series": [
                    "self",
                    "numeric_idx"
                ],
                "test_ops_np_scalar": [
                    "self",
                    "other"
                ],
                "test_operators_frame": [
                    "self"
                ],
                "test_modulo2": [
                    "self"
                ],
                "test_modulo_zero_int": [
                    "self"
                ]
            },
            "TestAdditionSubtraction": {
                "test_arith_ops_df_compat": [
                    "self"
                ],
                "test_series_frame_radd_bug": [
                    "self"
                ],
                "test_datetime64_with_index": [
                    "self"
                ],
                "test_frame_operators": [
                    "self",
                    "float_frame"
                ],
                "test_series_operators": [
                    "self"
                ],
                "test_divmod": [
                    "self"
                ],
                "test_series_divmod_zero": [
                    "self"
                ]
            },
            "TestUFuncCompat": {
                "test_ufunc_compat": [
                    "self",
                    "holder"
                ],
                "test_ufunc_coercions": [
                    "self",
                    "holder"
                ],
                "test_ufunc_multiple_return_values": [
                    "self",
                    "holder"
                ],
                "test_ufunc_at": [
                    "self"
                ]
            },
            "TestObjectDtypeEquivalence": {
                "test_numarr_with_dtype_add_nan": [
                    "self",
                    "dtype",
                    "box_with_array"
                ],
                "test_numarr_with_dtype_add_int": [
                    "self",
                    "dtype",
                    "box_with_array"
                ],
                "test_operators_reverse_object": [
                    "self",
                    "op"
                ]
            },
            "TestNumericArithmeticUnsorted": {
                "check_binop": [
                    "self",
                    "ops",
                    "scalars",
                    "idxs"
                ],
                "test_binops": [
                    "self"
                ],
                "test_binops_pow": [
                    "self"
                ],
                "test_arithmetic_with_frame_or_series": [
                    "self",
                    "op"
                ],
                "test_numeric_compat2": [
                    "self"
                ],
                "test_addsub_arithmetic": [
                    "self",
                    "dtype",
                    "delta"
                ]
            }
        },
        "pandas.tests.util.test_assert_numpy_array_equal": {
            "test_assert_numpy_array_equal_shape_mismatch": [],
            "test_assert_numpy_array_equal_bad_type": [],
            "test_assert_numpy_array_equal_class_mismatch": [
                "a",
                "b",
                "klass1",
                "klass2"
            ],
            "test_assert_numpy_array_equal_value_mismatch1": [],
            "test_assert_numpy_array_equal_value_mismatch2": [],
            "test_assert_numpy_array_equal_value_mismatch3": [],
            "test_assert_numpy_array_equal_value_mismatch4": [],
            "test_assert_numpy_array_equal_value_mismatch5": [],
            "test_assert_numpy_array_equal_value_mismatch6": [],
            "test_assert_numpy_array_equal_shape_mismatch_override": [],
            "test_numpy_array_equal_unicode": [],
            "test_numpy_array_equal_object": [],
            "test_numpy_array_equal_copy_flag": [
                "other_type",
                "check_same"
            ],
            "test_numpy_array_equal_contains_na": [],
            "test_numpy_array_equal_identical_na": [
                "nulls_fixture"
            ],
            "test_numpy_array_equal_different_na": []
        },
        "pandas.tests.util.test_hashing": {
            "series": [
                "request"
            ],
            "index": [
                "request"
            ],
            "_check_equal": [
                "obj"
            ],
            "_check_not_equal_with_index": [
                "obj"
            ],
            "test_consistency": [],
            "test_hash_array": [
                "series"
            ],
            "test_hash_array_mixed": [
                "arr2"
            ],
            "test_hash_array_errors": [
                "val"
            ],
            "test_hash_tuples": [],
            "test_hash_tuples_err": [
                "val"
            ],
            "test_multiindex_unique": [],
            "test_multiindex_objects": [],
            "test_hash_pandas_object": [
                "obj",
                "index"
            ],
            "test_hash_pandas_object2": [
                "series",
                "index"
            ],
            "test_hash_pandas_empty_object": [
                "obj",
                "index"
            ],
            "test_categorical_consistency": [
                "s1",
                "categorize"
            ],
            "test_categorical_with_nan_consistency": [],
            "test_pandas_errors": [
                "obj"
            ],
            "test_hash_keys": [],
            "test_invalid_key": [],
            "test_already_encoded": [
                "index"
            ],
            "test_alternate_encoding": [
                "index"
            ],
            "test_same_len_hash_collisions": [
                "l_exp",
                "l_add"
            ],
            "test_hash_collisions": [],
            "test_hash_with_tuple": [],
            "test_hash_object_none_key": []
        },
        "pandas.tests.util.test_doc": {
            "cumsum": [
                "whatever"
            ],
            "cumavg": [
                "whatever"
            ],
            "cummax": [
                "whatever"
            ],
            "cummin": [
                "whatever"
            ],
            "test_docstring_formatting": [],
            "test_docstring_appending": [],
            "test_doc_template_from_func": [],
            "test_inherit_doc_template": []
        },
        "pandas.tests.util.test_deprecate_nonkeyword_arguments": {
            "f": [
                "a",
                "b",
                "c",
                "d"
            ],
            "test_one_argument": [],
            "test_one_and_one_arguments": [],
            "test_two_arguments": [],
            "test_two_and_two_arguments": [],
            "test_three_arguments": [],
            "test_four_arguments": [],
            "g": [
                "a",
                "b",
                "c",
                "d"
            ],
            "test_one_and_three_arguments_default_allowed_args": [],
            "test_three_arguments_default_allowed_args": [],
            "test_three_positional_argument_with_warning_message_analysis": [],
            "h": [
                "a",
                "b",
                "c",
                "d"
            ],
            "test_all_keyword_arguments": [],
            "test_one_positional_argument": [],
            "test_one_positional_argument_with_warning_message_analysis": []
        },
        "pandas.tests.util.test_util": {
            "test_rands": [],
            "test_rands_array_1d": [],
            "test_rands_array_2d": [],
            "test_numpy_err_state_is_default": [],
            "test_convert_rows_list_to_csv_str": [],
            "test_create_temp_directory": [],
            "test_datapath_missing": [
                "datapath"
            ],
            "test_datapath": [
                "datapath"
            ],
            "test_rng_context": [],
            "test_external_error_raised": []
        },
        "pandas.tests.util.test_assert_categorical_equal": {
            "test_categorical_equal": [
                "c"
            ],
            "test_categorical_equal_order_mismatch": [
                "check_category_order"
            ],
            "test_categorical_equal_categories_mismatch": [],
            "test_categorical_equal_codes_mismatch": [],
            "test_categorical_equal_ordered_mismatch": [],
            "test_categorical_equal_object_override": [
                "obj"
            ]
        },
        "pandas.tests.util.test_assert_series_equal": {
            "_assert_series_equal_both": [
                "a",
                "b"
            ],
            "_assert_not_series_equal": [
                "a",
                "b"
            ],
            "_assert_not_series_equal_both": [
                "a",
                "b"
            ],
            "test_series_equal": [
                "data"
            ],
            "test_series_not_equal_value_mismatch": [
                "data1",
                "data2"
            ],
            "test_series_not_equal_metadata_mismatch": [
                "kwargs"
            ],
            "test_less_precise": [
                "data1",
                "data2",
                "dtype",
                "decimals"
            ],
            "test_series_equal_index_dtype": [
                "s1",
                "s2",
                "msg",
                "check_index_type"
            ],
            "test_series_equal_length_mismatch": [
                "rtol"
            ],
            "test_series_equal_numeric_values_mismatch": [
                "rtol"
            ],
            "test_series_equal_categorical_values_mismatch": [
                "rtol"
            ],
            "test_series_equal_datetime_values_mismatch": [
                "rtol"
            ],
            "test_series_equal_categorical_mismatch": [
                "check_categorical"
            ],
            "test_assert_series_equal_extension_dtype_mismatch": [],
            "test_assert_series_equal_interval_dtype_mismatch": [],
            "test_series_equal_series_type": [],
            "test_series_equal_exact_for_nonnumeric": [],
            "test_assert_series_equal_ignore_extension_dtype_mismatch": [
                "right_dtype"
            ]
        },
        "pandas.tests.util.test_assert_index_equal": {
            "test_index_equal_levels_mismatch": [],
            "test_index_equal_values_mismatch": [
                "check_exact"
            ],
            "test_index_equal_length_mismatch": [
                "check_exact"
            ],
            "test_index_equal_class_mismatch": [
                "check_exact"
            ],
            "test_index_equal_values_close": [
                "check_exact"
            ],
            "test_index_equal_values_less_close": [
                "check_exact",
                "rtol"
            ],
            "test_index_equal_values_too_far": [
                "check_exact",
                "rtol"
            ],
            "test_index_equal_level_values_mismatch": [
                "check_exact",
                "rtol"
            ],
            "test_index_equal_names": [
                "name1",
                "name2"
            ],
            "test_index_equal_category_mismatch": [
                "check_categorical"
            ]
        },
        "pandas.tests.util.test_validate_args": {
            "test_bad_min_fname_arg_count": [],
            "test_bad_arg_length_max_value_single": [],
            "test_bad_arg_length_max_value_multiple": [],
            "test_not_all_defaults": [
                "i"
            ],
            "test_validation": []
        },
        "pandas.tests.util.test_assert_interval_array_equal": {
            "test_interval_array_equal": [
                "kwargs"
            ],
            "test_interval_array_equal_closed_mismatch": [],
            "test_interval_array_equal_periods_mismatch": [],
            "test_interval_array_equal_end_mismatch": [],
            "test_interval_array_equal_start_mismatch": []
        },
        "pandas.tests.util.test_deprecate_kwarg": {
            "_f1": [
                "new"
            ],
            "_f2": [
                "new"
            ],
            "_f3_mapping": [
                "x"
            ],
            "_f3": [
                "new"
            ],
            "test_deprecate_kwarg": [
                "key",
                "klass"
            ],
            "test_dict_deprecate_kwarg": [
                "key"
            ],
            "test_missing_deprecate_kwarg": [
                "key"
            ],
            "test_callable_deprecate_kwarg": [
                "x"
            ],
            "test_callable_deprecate_kwarg_fail": [],
            "test_bad_deprecate_kwarg": [],
            "_f4": [
                "old",
                "unchanged"
            ],
            "test_deprecate_keyword": [
                "key"
            ]
        },
        "pandas.tests.util.test_assert_frame_equal": {
            "by_blocks_fixture": [
                "request"
            ],
            "obj_fixture": [
                "request"
            ],
            "_assert_frame_equal_both": [
                "a",
                "b"
            ],
            "_assert_not_frame_equal": [
                "a",
                "b"
            ],
            "_assert_not_frame_equal_both": [
                "a",
                "b"
            ],
            "test_frame_equal_row_order_mismatch": [
                "check_like",
                "obj_fixture"
            ],
            "test_frame_equal_shape_mismatch": [
                "df1",
                "df2",
                "obj_fixture"
            ],
            "test_frame_equal_index_dtype_mismatch": [
                "df1",
                "df2",
                "msg",
                "check_index_type"
            ],
            "test_empty_dtypes": [
                "check_dtype"
            ],
            "test_frame_equal_index_mismatch": [
                "obj_fixture"
            ],
            "test_frame_equal_columns_mismatch": [
                "obj_fixture"
            ],
            "test_frame_equal_block_mismatch": [
                "by_blocks_fixture",
                "obj_fixture"
            ],
            "test_frame_equal_unicode": [
                "df1",
                "df2",
                "msg",
                "by_blocks_fixture",
                "obj_fixture"
            ],
            "test_assert_frame_equal_extension_dtype_mismatch": [],
            "test_assert_frame_equal_interval_dtype_mismatch": [],
            "test_assert_frame_equal_ignore_extension_dtype_mismatch": [
                "right_dtype"
            ]
        },
        "pandas.tests.util.test_safe_import": {
            "test_safe_import_non_existent": [
                "name"
            ],
            "test_safe_import_exists": [],
            "test_safe_import_versions": [
                "min_version",
                "valid"
            ],
            "test_safe_import_dummy": [
                "monkeypatch",
                "min_version",
                "valid"
            ]
        },
        "pandas.tests.util.test_validate_args_and_kwargs": {
            "test_invalid_total_length_max_length_one": [],
            "test_invalid_total_length_max_length_multiple": [],
            "test_missing_args_or_kwargs": [
                "args",
                "kwargs"
            ],
            "test_duplicate_argument": [],
            "test_validation": []
        },
        "pandas.tests.util.test_assert_produces_warning": {
            "f": [],
            "test_assert_produces_warning_honors_filter": []
        },
        "pandas.tests.util.test_assert_almost_equal": {
            "_assert_almost_equal_both": [
                "a",
                "b"
            ],
            "_assert_not_almost_equal": [
                "a",
                "b"
            ],
            "_assert_not_almost_equal_both": [
                "a",
                "b"
            ],
            "test_assert_almost_equal_deprecated": [
                "a",
                "b",
                "check_less_precise"
            ],
            "test_assert_almost_equal_numbers": [
                "a",
                "b"
            ],
            "test_assert_not_almost_equal_numbers": [
                "a",
                "b"
            ],
            "test_assert_almost_equal_numbers_atol": [
                "a",
                "b"
            ],
            "test_assert_not_almost_equal_numbers_atol": [
                "a",
                "b"
            ],
            "test_assert_almost_equal_numbers_rtol": [
                "a",
                "b"
            ],
            "test_assert_not_almost_equal_numbers_rtol": [
                "a",
                "b"
            ],
            "test_assert_almost_equal_numbers_with_zeros": [
                "a",
                "b"
            ],
            "test_assert_not_almost_equal_numbers_with_zeros": [
                "a",
                "b"
            ],
            "test_assert_not_almost_equal_numbers_with_mixed": [
                "a",
                "b"
            ],
            "test_assert_almost_equal_edge_case_ndarrays": [
                "left_dtype",
                "right_dtype"
            ],
            "test_assert_almost_equal_dicts": [],
            "test_assert_not_almost_equal_dicts": [
                "a",
                "b"
            ],
            "test_assert_almost_equal_dict_like_object": [
                "val"
            ],
            "test_assert_almost_equal_strings": [],
            "test_assert_not_almost_equal_strings": [
                "a",
                "b"
            ],
            "test_assert_almost_equal_iterables": [
                "a",
                "b"
            ],
            "test_assert_not_almost_equal_iterables": [
                "a",
                "b"
            ],
            "test_assert_almost_equal_null": [],
            "test_assert_not_almost_equal_null": [
                "a",
                "b"
            ],
            "test_assert_almost_equal_inf": [
                "a",
                "b"
            ],
            "test_assert_not_almost_equal_inf": [],
            "test_assert_almost_equal_pandas": [
                "a",
                "b"
            ],
            "test_assert_almost_equal_object": [],
            "test_assert_almost_equal_value_mismatch": [],
            "test_assert_almost_equal_class_mismatch": [
                "a",
                "b",
                "klass1",
                "klass2"
            ],
            "test_assert_almost_equal_value_mismatch1": [],
            "test_assert_almost_equal_value_mismatch2": [],
            "test_assert_almost_equal_value_mismatch3": [],
            "test_assert_almost_equal_value_mismatch4": [],
            "test_assert_almost_equal_shape_mismatch_override": [],
            "test_assert_almost_equal_unicode": [],
            "test_assert_almost_equal_timestamp": [],
            "test_assert_almost_equal_iterable_length_mismatch": [],
            "test_assert_almost_equal_iterable_values_mismatch": []
        },
        "pandas.tests.util.test_show_versions": {
            "test_show_versions": [
                "capsys"
            ]
        },
        "pandas.tests.util.test_deprecate": {
            "new_func": [],
            "new_func_no_docstring": [],
            "new_func_wrong_docstring": [],
            "new_func_with_deprecation": [],
            "test_deprecate_ok": [],
            "test_deprecate_no_docstring": [],
            "test_deprecate_wrong_docstring": []
        },
        "pandas.tests.util.conftest": {
            "check_dtype": [
                "request"
            ],
            "check_exact": [
                "request"
            ],
            "check_index_type": [
                "request"
            ],
            "rtol": [
                "request"
            ],
            "check_categorical": [
                "request"
            ]
        },
        "pandas.tests.util.test_numba": {
            "test_numba_not_installed_option_context": []
        },
        "pandas.tests.util.test_validate_kwargs": {
            "test_bad_kwarg": [],
            "test_not_all_none": [
                "i"
            ],
            "test_validation": [],
            "test_validate_bool_kwarg_fail": [
                "name",
                "value"
            ],
            "test_validate_bool_kwarg": [
                "name",
                "value"
            ]
        },
        "pandas.tests.util.test_assert_extension_array_equal": {
            "test_assert_extension_array_equal_not_exact": [
                "kwargs"
            ],
            "test_assert_extension_array_equal_less_precise": [
                "decimals"
            ],
            "test_assert_extension_array_equal_dtype_mismatch": [
                "check_dtype"
            ],
            "test_assert_extension_array_equal_missing_values": [],
            "test_assert_extension_array_equal_non_extension_array": [
                "side"
            ],
            "test_assert_extension_array_equal_ignore_dtype_mismatch": [
                "right_dtype"
            ]
        },
        "pandas.tests.util": {},
        "pandas.tests.tools.test_to_timedelta": {
            "TestTimedeltas": {
                "test_to_timedelta": [
                    "self"
                ],
                "test_to_timedelta_dataframe": [
                    "self"
                ],
                "test_to_timedelta_invalid": [
                    "self"
                ],
                "test_to_timedelta_via_apply": [
                    "self"
                ],
                "test_to_timedelta_on_missing_values": [
                    "self"
                ],
                "test_to_timedelta_float": [
                    "self"
                ],
                "test_to_timedelta_coerce_strings_unit": [
                    "self"
                ],
                "test_to_timedelta_ignore_strings_unit": [
                    "self"
                ],
                "test_to_timedelta_nullable_int64_dtype": [
                    "self"
                ]
            }
        },
        "pandas.tests.tools.test_to_time": {
            "test_to_time_alias": [],
            "TestToTime": {
                "test_parsers_time": [
                    "self"
                ]
            }
        },
        "pandas.tests.tools.test_to_datetime": {
            "units": [
                "request"
            ],
            "epoch_1960": [],
            "units_from_epochs": [],
            "epochs": [
                "epoch_1960",
                "request"
            ],
            "julian_dates": [],
            "test_should_cache": [
                "listlike",
                "do_caching"
            ],
            "test_should_cache_errors": [
                "unique_share",
                "check_count",
                "err_message"
            ],
            "test_nullable_integer_to_datetime": [],
            "test_na_to_datetime": [
                "nulls_fixture",
                "klass"
            ],
            "TestTimeConversionFormats": {
                "test_to_datetime_format": [
                    "self",
                    "cache"
                ],
                "test_to_datetime_format_YYYYMMDD": [
                    "self",
                    "cache"
                ],
                "test_to_datetime_format_YYYYMMDD_with_none": [
                    "self",
                    "input_s"
                ],
                "test_to_datetime_format_YYYYMMDD_overflow": [
                    "self",
                    "input_s",
                    "expected"
                ],
                "test_to_datetime_format_integer": [
                    "self",
                    "cache"
                ],
                "test_int_to_datetime_format_YYYYMMDD_typeerror": [
                    "self",
                    "int_date",
                    "expected"
                ],
                "test_to_datetime_format_microsecond": [
                    "self",
                    "cache"
                ],
                "test_to_datetime_format_time": [
                    "self",
                    "cache"
                ],
                "test_to_datetime_with_non_exact": [
                    "self",
                    "cache"
                ],
                "test_parse_nanoseconds_with_formula": [
                    "self",
                    "cache"
                ],
                "test_to_datetime_format_weeks": [
                    "self",
                    "cache"
                ],
                "test_to_datetime_parse_tzname_or_tzoffset": [
                    "self",
                    "fmt",
                    "dates",
                    "expected_dates"
                ],
                "test_to_datetime_parse_tzname_or_tzoffset_different_tz_to_utc": [
                    "self"
                ],
                "test_to_datetime_parse_timezone_malformed": [
                    "self",
                    "offset"
                ],
                "test_to_datetime_parse_timezone_keeps_name": [
                    "self"
                ]
            },
            "TestToDatetime": {
                "test_to_datetime_iso_week_year_format": [
                    "self",
                    "s",
                    "_format",
                    "dt"
                ],
                "test_error_iso_week_year": [
                    "self",
                    "msg",
                    "s",
                    "_format"
                ],
                "test_to_datetime_dtarr": [
                    "self",
                    "tz"
                ],
                "test_to_datetime_pydatetime": [
                    "self"
                ],
                "test_to_datetime_YYYYMMDD": [
                    "self"
                ],
                "test_to_datetime_unparseable_ignore": [
                    "self"
                ],
                "test_to_datetime_now": [
                    "self"
                ],
                "test_to_datetime_today": [
                    "self"
                ],
                "test_to_datetime_today_now_unicode_bytes": [
                    "self"
                ],
                "test_to_datetime_dt64s": [
                    "self",
                    "cache"
                ],
                "test_to_datetime_dt64s_out_of_bounds": [
                    "self",
                    "cache",
                    "dt"
                ],
                "test_to_datetime_array_of_dt64s": [
                    "self",
                    "cache",
                    "unit"
                ],
                "test_to_datetime_tz": [
                    "self",
                    "cache"
                ],
                "test_to_datetime_different_offsets": [
                    "self",
                    "cache"
                ],
                "test_to_datetime_tz_pytz": [
                    "self",
                    "cache"
                ],
                "test_to_datetime_utc_true": [
                    "self",
                    "cache",
                    "init_constructor",
                    "end_constructor",
                    "test_method"
                ],
                "test_to_datetime_utc_true_with_series_single_value": [
                    "self",
                    "cache"
                ],
                "test_to_datetime_utc_true_with_series_tzaware_string": [
                    "self",
                    "cache"
                ],
                "test_to_datetime_utc_true_with_series_datetime_ns": [
                    "self",
                    "cache",
                    "date",
                    "dtype"
                ],
                "test_to_datetime_tz_psycopg2": [
                    "self",
                    "cache"
                ],
                "test_datetime_bool": [
                    "self",
                    "cache"
                ],
                "test_datetime_invalid_datatype": [
                    "self"
                ],
                "test_datetime_invalid_scalar": [
                    "self",
                    "value",
                    "format",
                    "infer"
                ],
                "test_datetime_outofbounds_scalar": [
                    "self",
                    "value",
                    "format",
                    "infer"
                ],
                "test_datetime_invalid_index": [
                    "self",
                    "values",
                    "format",
                    "infer"
                ],
                "test_to_datetime_cache": [
                    "self",
                    "utc",
                    "format",
                    "constructor"
                ],
                "test_no_slicing_errors_in_should_cache": [
                    "self",
                    "listlike"
                ],
                "test_to_datetime_from_deque": [
                    "self"
                ],
                "test_to_datetime_cache_series": [
                    "self",
                    "utc",
                    "format"
                ],
                "test_to_datetime_cache_scalar": [
                    "self"
                ],
                "test_week_without_day_and_calendar_year": [
                    "self",
                    "date",
                    "format"
                ],
                "test_to_datetime_coerce": [
                    "self"
                ],
                "test_to_datetime_coerce_malformed": [
                    "self"
                ],
                "test_iso_8601_strings_with_same_offset": [
                    "self"
                ],
                "test_iso_8601_strings_with_different_offsets": [
                    "self"
                ],
                "test_iso8601_strings_mixed_offsets_with_naive": [
                    "self"
                ],
                "test_mixed_offsets_with_native_datetime_raises": [
                    "self"
                ],
                "test_non_iso_strings_with_tz_offset": [
                    "self"
                ],
                "test_timestamp_utc_true": [
                    "self",
                    "ts",
                    "expected"
                ],
                "test_to_datetime_with_format_out_of_bounds": [
                    "self",
                    "dt_str"
                ],
                "test_to_datetime_utc": [
                    "self"
                ],
                "test_to_datetime_fixed_offset": [
                    "self"
                ]
            },
            "TestToDatetimeUnit": {
                "test_unit": [
                    "self",
                    "cache"
                ],
                "test_unit_consistency": [
                    "self",
                    "cache"
                ],
                "test_unit_with_numeric": [
                    "self",
                    "cache"
                ],
                "test_unit_mixed": [
                    "self",
                    "cache"
                ],
                "test_unit_rounding": [
                    "self",
                    "cache"
                ],
                "test_unit_ignore_keeps_name": [
                    "self",
                    "cache"
                ],
                "test_dataframe": [
                    "self",
                    "cache"
                ],
                "test_dataframe_dtypes": [
                    "self",
                    "cache"
                ],
                "test_dataframe_utc_true": [
                    "self"
                ],
                "test_to_datetime_errors_ignore_utc_true": [
                    "self"
                ],
                "test_to_datetime_unit": [
                    "self"
                ]
            },
            "TestToDatetimeMisc": {
                "test_to_datetime_barely_out_of_bounds": [
                    "self"
                ],
                "test_to_datetime_iso8601": [
                    "self",
                    "cache"
                ],
                "test_to_datetime_default": [
                    "self",
                    "cache"
                ],
                "test_to_datetime_on_datetime64_series": [
                    "self",
                    "cache"
                ],
                "test_to_datetime_with_space_in_series": [
                    "self",
                    "cache"
                ],
                "test_to_datetime_with_apply": [
                    "self",
                    "cache"
                ],
                "test_to_datetime_types": [
                    "self",
                    "cache"
                ],
                "test_to_datetime_unprocessable_input": [
                    "self",
                    "cache"
                ],
                "test_to_datetime_other_datetime64_units": [
                    "self"
                ],
                "test_to_datetime_list_of_integers": [
                    "self"
                ],
                "test_to_datetime_overflow": [
                    "self"
                ],
                "test_string_na_nat_conversion": [
                    "self",
                    "cache"
                ],
                "test_dti_constructor_numpy_timeunits": [
                    "self",
                    "cache",
                    "dtype"
                ],
                "test_dayfirst": [
                    "self",
                    "cache"
                ],
                "test_to_datetime_dta_tz": [
                    "self",
                    "klass"
                ]
            },
            "TestGuessDatetimeFormat": {
                "test_guess_datetime_format_for_array": [
                    "self"
                ]
            },
            "TestToDatetimeInferFormat": {
                "test_to_datetime_infer_datetime_format_consistent_format": [
                    "self",
                    "cache"
                ],
                "test_to_datetime_infer_datetime_format_inconsistent_format": [
                    "self",
                    "cache"
                ],
                "test_to_datetime_infer_datetime_format_series_with_nans": [
                    "self",
                    "cache"
                ],
                "test_to_datetime_infer_datetime_format_series_start_with_nans": [
                    "self",
                    "cache"
                ],
                "test_infer_datetime_format_tz_name": [
                    "self",
                    "tz_name",
                    "offset"
                ],
                "test_to_datetime_iso8601_noleading_0s": [
                    "self",
                    "cache"
                ]
            },
            "TestDaysInMonth": {
                "test_day_not_in_month_coerce": [
                    "self",
                    "cache"
                ],
                "test_day_not_in_month_raise": [
                    "self",
                    "cache"
                ],
                "test_day_not_in_month_ignore": [
                    "self",
                    "cache"
                ]
            },
            "TestDatetimeParsingWrappers": {
                "test_parsers": [
                    "self",
                    "date_str",
                    "expected",
                    "cache"
                ],
                "test_na_values_with_cache": [
                    "self",
                    "cache",
                    "unique_nulls_fixture",
                    "unique_nulls_fixture2"
                ],
                "test_parsers_nat": [
                    "self"
                ],
                "test_parsers_dayfirst_yearfirst": [
                    "self",
                    "cache"
                ],
                "test_parsers_timestring": [
                    "self",
                    "cache"
                ],
                "test_parsers_timezone_minute_offsets_roundtrip": [
                    "self",
                    "cache",
                    "dt_string",
                    "tz",
                    "dt_string_repr"
                ]
            },
            "TestOrigin": {
                "test_to_basic": [
                    "self",
                    "julian_dates"
                ],
                "test_julian_round_trip": [
                    "self"
                ],
                "test_invalid_unit": [
                    "self",
                    "units",
                    "julian_dates"
                ],
                "test_invalid_origin": [
                    "self"
                ],
                "test_epoch": [
                    "self",
                    "units",
                    "epochs",
                    "epoch_1960",
                    "units_from_epochs"
                ],
                "test_invalid_origins": [
                    "self",
                    "origin",
                    "exc",
                    "units",
                    "units_from_epochs"
                ],
                "test_invalid_origins_tzinfo": [
                    "self"
                ],
                "test_to_datetime_out_of_bounds_with_format_arg": [
                    "self",
                    "format"
                ],
                "test_processing_order": [
                    "self"
                ],
                "test_arg_tz_ns_unit": [
                    "self",
                    "offset",
                    "utc",
                    "exp"
                ]
            }
        },
        "pandas.tests.tools.test_to_numeric": {
            "errors": [
                "request"
            ],
            "signed": [
                "request"
            ],
            "transform": [
                "request"
            ],
            "large_val": [
                "request"
            ],
            "multiple_elts": [
                "request"
            ],
            "transform_assert_equal": [
                "request"
            ],
            "test_empty": [
                "input_kwargs",
                "result_kwargs"
            ],
            "test_series": [
                "last_val"
            ],
            "test_series_numeric": [
                "data"
            ],
            "test_error": [
                "data",
                "msg"
            ],
            "test_ignore_error": [
                "errors",
                "exp_data"
            ],
            "test_bool_handling": [
                "errors",
                "exp"
            ],
            "test_list": [],
            "test_list_numeric": [
                "data",
                "arr_kwargs"
            ],
            "test_numeric": [
                "kwargs"
            ],
            "test_numeric_df_columns": [
                "columns"
            ],
            "test_numeric_embedded_arr_likes": [
                "data",
                "exp_data"
            ],
            "test_all_nan": [],
            "test_type_check": [
                "errors"
            ],
            "test_scalar": [
                "val",
                "signed",
                "transform"
            ],
            "test_really_large_scalar": [
                "large_val",
                "signed",
                "transform",
                "errors"
            ],
            "test_really_large_in_arr": [
                "large_val",
                "signed",
                "transform",
                "multiple_elts",
                "errors"
            ],
            "test_really_large_in_arr_consistent": [
                "large_val",
                "signed",
                "multiple_elts",
                "errors"
            ],
            "test_scalar_fail": [
                "errors",
                "checker"
            ],
            "test_numeric_dtypes": [
                "data",
                "transform_assert_equal"
            ],
            "test_str": [
                "data",
                "exp",
                "transform_assert_equal"
            ],
            "test_datetime_like": [
                "tz_naive_fixture",
                "transform_assert_equal"
            ],
            "test_timedelta": [
                "transform_assert_equal"
            ],
            "test_period": [
                "transform_assert_equal"
            ],
            "test_non_hashable": [
                "errors",
                "expected"
            ],
            "test_downcast_invalid_cast": [],
            "test_errors_invalid_value": [],
            "test_downcast_basic": [
                "data",
                "kwargs",
                "exp_dtype"
            ],
            "test_signed_downcast": [
                "data",
                "signed_downcast"
            ],
            "test_ignore_downcast_invalid_data": [],
            "test_ignore_downcast_neg_to_unsigned": [],
            "test_ignore_downcast_cannot_convert_float": [
                "data",
                "expected",
                "downcast"
            ],
            "test_downcast_not8bit": [
                "downcast",
                "expected_dtype"
            ],
            "test_downcast_limits": [
                "dtype",
                "downcast",
                "min_max"
            ],
            "test_downcast_uint64": [
                "ser",
                "expected"
            ],
            "test_coerce_uint64_conflict": [
                "data",
                "exp_data"
            ],
            "test_non_coerce_uint64_conflict": [
                "errors",
                "exp"
            ],
            "test_downcast_empty": [
                "dc1",
                "dc2"
            ],
            "test_failure_to_convert_uint64_string_to_NaN": []
        },
        "pandas.tests.tools": {},
        "pandas.tests.dtypes.test_generic": {
            "test_setattr_warnings": [],
            "TestABCClasses": {
                "test_abc_types": [
                    "self"
                ]
            }
        },
        "pandas.tests.dtypes.test_common": {
            "to_ea_dtypes": [
                "dtypes"
            ],
            "to_numpy_dtypes": [
                "dtypes"
            ],
            "test_dtype_equal": [
                "name1",
                "dtype1",
                "name2",
                "dtype2"
            ],
            "test_dtype_equal_strict": [
                "dtype1",
                "dtype2"
            ],
            "get_is_dtype_funcs": [],
            "test_get_dtype_error_catch": [
                "func"
            ],
            "test_is_object": [],
            "test_is_sparse": [
                "check_scipy"
            ],
            "test_is_scipy_sparse": [],
            "test_is_categorical": [],
            "test_is_categorical_deprecation": [],
            "test_is_datetime64_dtype": [],
            "test_is_datetime64tz_dtype": [],
            "test_is_timedelta64_dtype": [],
            "test_is_period_dtype": [],
            "test_is_interval_dtype": [],
            "test_is_categorical_dtype": [],
            "test_is_string_dtype": [],
            "test_is_integer_dtype": [
                "dtype"
            ],
            "test_is_not_integer_dtype": [
                "dtype"
            ],
            "test_is_signed_integer_dtype": [
                "dtype"
            ],
            "test_is_not_signed_integer_dtype": [
                "dtype"
            ],
            "test_is_unsigned_integer_dtype": [
                "dtype"
            ],
            "test_is_not_unsigned_integer_dtype": [
                "dtype"
            ],
            "test_is_int64_dtype": [
                "dtype"
            ],
            "test_is_not_int64_dtype": [
                "dtype"
            ],
            "test_is_datetime64_any_dtype": [],
            "test_is_datetime64_ns_dtype": [],
            "test_is_timedelta64_ns_dtype": [],
            "test_is_datetime_or_timedelta_dtype": [],
            "test_is_numeric_v_string_like": [],
            "test_is_datetimelike_v_numeric": [],
            "test_needs_i8_conversion": [],
            "test_is_numeric_dtype": [],
            "test_is_string_like_dtype": [],
            "test_is_float_dtype": [],
            "test_is_bool_dtype": [],
            "test_is_extension_type": [
                "check_scipy"
            ],
            "test_is_extension_type_deprecation": [],
            "test_is_extension_array_dtype": [
                "check_scipy"
            ],
            "test_is_complex_dtype": [],
            "test__get_dtype": [
                "input_param",
                "result"
            ],
            "test__get_dtype_fails": [
                "input_param",
                "expected_error_message"
            ],
            "test__is_dtype_type": [
                "input_param",
                "result"
            ],
            "test_astype_nansafe": [
                "val",
                "typ"
            ],
            "test_astype_datetime64_bad_dtype_raises": [
                "from_type",
                "to_type"
            ],
            "test_astype_object_preserves_datetime_na": [
                "from_type"
            ],
            "TestPandasDtype": {
                "test_invalid_dtype_error": [
                    "self",
                    "box"
                ],
                "test_pandas_dtype_valid": [
                    "self",
                    "dtype"
                ],
                "test_numpy_dtype": [
                    "self",
                    "dtype"
                ],
                "test_numpy_string_dtype": [
                    "self"
                ],
                "test_datetimetz_dtype": [
                    "self",
                    "dtype"
                ],
                "test_categorical_dtype": [
                    "self"
                ],
                "test_period_dtype": [
                    "self",
                    "dtype"
                ]
            }
        },
        "pandas.tests.dtypes.test_dtypes": {
            "test_registry": [
                "dtype"
            ],
            "test_registry_find": [
                "dtype",
                "expected"
            ],
            "test_is_bool_dtype": [
                "dtype",
                "expected"
            ],
            "test_is_bool_dtype_sparse": [],
            "test_is_dtype_no_warning": [
                "check"
            ],
            "Base": {
                "test_hash": [
                    "self",
                    "dtype"
                ],
                "test_equality_invalid": [
                    "self",
                    "dtype"
                ],
                "test_numpy_informed": [
                    "self",
                    "dtype"
                ],
                "test_pickle": [
                    "self",
                    "dtype"
                ]
            },
            "TestCategoricalDtype": {
                "dtype": [
                    "self"
                ],
                "test_hash_vs_equality": [
                    "self",
                    "dtype"
                ],
                "test_equality": [
                    "self",
                    "dtype"
                ],
                "test_construction_from_string": [
                    "self",
                    "dtype"
                ],
                "test_constructor_invalid": [
                    "self"
                ],
                "test_from_values_or_dtype": [
                    "self",
                    "values",
                    "categories",
                    "ordered",
                    "dtype",
                    "expected"
                ],
                "test_from_values_or_dtype_raises": [
                    "self",
                    "values",
                    "categories",
                    "ordered",
                    "dtype"
                ],
                "test_from_values_or_dtype_invalid_dtype": [
                    "self"
                ],
                "test_is_dtype": [
                    "self",
                    "dtype"
                ],
                "test_basic": [
                    "self",
                    "dtype"
                ],
                "test_tuple_categories": [
                    "self"
                ],
                "test_is_boolean": [
                    "self",
                    "categories",
                    "expected"
                ],
                "test_dtype_specific_categorical_dtype": [
                    "self"
                ],
                "test_not_string": [
                    "self"
                ]
            },
            "TestDatetimeTZDtype": {
                "dtype": [
                    "self"
                ],
                "test_alias_to_unit_raises": [
                    "self"
                ],
                "test_alias_to_unit_bad_alias_raises": [
                    "self"
                ],
                "test_hash_vs_equality": [
                    "self",
                    "dtype"
                ],
                "test_construction": [
                    "self"
                ],
                "test_subclass": [
                    "self"
                ],
                "test_compat": [
                    "self",
                    "dtype"
                ],
                "test_construction_from_string": [
                    "self",
                    "dtype"
                ],
                "test_construct_from_string_invalid_raises": [
                    "self",
                    "string"
                ],
                "test_construct_from_string_wrong_type_raises": [
                    "self"
                ],
                "test_is_dtype": [
                    "self",
                    "dtype"
                ],
                "test_equality": [
                    "self",
                    "dtype"
                ],
                "test_basic": [
                    "self",
                    "dtype"
                ],
                "test_dst": [
                    "self"
                ],
                "test_parser": [
                    "self",
                    "tz",
                    "constructor"
                ],
                "test_empty": [
                    "self"
                ],
                "test_tz_standardize": [
                    "self"
                ]
            },
            "TestPeriodDtype": {
                "dtype": [
                    "self"
                ],
                "test_hash_vs_equality": [
                    "self",
                    "dtype"
                ],
                "test_construction": [
                    "self"
                ],
                "test_subclass": [
                    "self"
                ],
                "test_identity": [
                    "self"
                ],
                "test_compat": [
                    "self",
                    "dtype"
                ],
                "test_construction_from_string": [
                    "self",
                    "dtype"
                ],
                "test_construct_dtype_from_string_invalid_raises": [
                    "self",
                    "string"
                ],
                "test_is_dtype": [
                    "self",
                    "dtype"
                ],
                "test_equality": [
                    "self",
                    "dtype"
                ],
                "test_basic": [
                    "self",
                    "dtype"
                ],
                "test_empty": [
                    "self"
                ],
                "test_not_string": [
                    "self"
                ]
            },
            "TestIntervalDtype": {
                "dtype": [
                    "self"
                ],
                "test_hash_vs_equality": [
                    "self",
                    "dtype"
                ],
                "test_construction": [
                    "self",
                    "subtype"
                ],
                "test_construction_generic": [
                    "self",
                    "subtype"
                ],
                "test_construction_not_supported": [
                    "self",
                    "subtype"
                ],
                "test_construction_errors": [
                    "self",
                    "subtype"
                ],
                "test_construction_from_string": [
                    "self",
                    "dtype"
                ],
                "test_construction_from_string_errors": [
                    "self",
                    "string"
                ],
                "test_construction_from_string_error_subtype": [
                    "self",
                    "string"
                ],
                "test_subclass": [
                    "self"
                ],
                "test_is_dtype": [
                    "self",
                    "dtype"
                ],
                "test_equality": [
                    "self",
                    "dtype"
                ],
                "test_equality_generic": [
                    "self",
                    "subtype"
                ],
                "test_name_repr": [
                    "self",
                    "subtype"
                ],
                "test_name_repr_generic": [
                    "self",
                    "subtype"
                ],
                "test_basic": [
                    "self",
                    "dtype"
                ],
                "test_basic_dtype": [
                    "self"
                ],
                "test_caching": [
                    "self"
                ],
                "test_not_string": [
                    "self"
                ]
            },
            "TestCategoricalDtypeParametrized": {
                "test_basic": [
                    "self",
                    "categories",
                    "ordered"
                ],
                "test_order_matters": [
                    "self"
                ],
                "test_unordered_same": [
                    "self",
                    "ordered"
                ],
                "test_categories": [
                    "self"
                ],
                "test_equal_but_different": [
                    "self",
                    "ordered"
                ],
                "test_order_hashes_different": [
                    "self",
                    "v1",
                    "v2"
                ],
                "test_nan_invalid": [
                    "self"
                ],
                "test_non_unique_invalid": [
                    "self"
                ],
                "test_same_categories_different_order": [
                    "self"
                ],
                "test_categorical_equality": [
                    "self",
                    "ordered1",
                    "ordered2"
                ],
                "test_categorical_equality_strings": [
                    "self",
                    "categories",
                    "ordered",
                    "other"
                ],
                "test_invalid_raises": [
                    "self"
                ],
                "test_mixed": [
                    "self"
                ],
                "test_from_categorical_dtype_identity": [
                    "self"
                ],
                "test_from_categorical_dtype_categories": [
                    "self"
                ],
                "test_from_categorical_dtype_ordered": [
                    "self"
                ],
                "test_from_categorical_dtype_both": [
                    "self"
                ],
                "test_str_vs_repr": [
                    "self",
                    "ordered"
                ],
                "test_categorical_categories": [
                    "self"
                ],
                "test_update_dtype": [
                    "self",
                    "ordered",
                    "new_categories",
                    "new_ordered"
                ],
                "test_update_dtype_string": [
                    "self",
                    "ordered"
                ],
                "test_update_dtype_errors": [
                    "self",
                    "bad_dtype"
                ]
            }
        },
        "pandas.tests.dtypes.test_inference": {
            "coerce": [
                "request"
            ],
            "maybe_list_like": [
                "request"
            ],
            "test_is_list_like": [
                "maybe_list_like"
            ],
            "test_is_list_like_disallow_sets": [
                "maybe_list_like"
            ],
            "test_is_list_like_recursion": [],
            "test_is_sequence": [],
            "test_is_array_like": [],
            "test_is_nested_list_like_passes": [
                "inner",
                "outer"
            ],
            "test_is_nested_list_like_fails": [
                "obj"
            ],
            "test_is_dict_like_passes": [
                "ll"
            ],
            "test_is_dict_like_fails": [
                "ll"
            ],
            "test_is_dict_like_duck_type": [
                "has_keys",
                "has_getitem",
                "has_contains"
            ],
            "test_is_file_like": [],
            "test_is_names_tuple_passes": [
                "ll"
            ],
            "test_is_names_tuple_fails": [
                "ll"
            ],
            "test_is_hashable": [],
            "test_is_re_passes": [
                "ll"
            ],
            "test_is_re_fails": [
                "ll"
            ],
            "test_is_recompilable_passes": [
                "ll"
            ],
            "test_is_recompilable_fails": [
                "ll"
            ],
            "test_datetimeindex_from_empty_datetime64_array": [],
            "test_nan_to_nat_conversions": [],
            "test_is_scipy_sparse": [
                "spmatrix"
            ],
            "test_ensure_int32": [],
            "TestInference": {
                "test_infer_dtype_bytes": [
                    "self",
                    "arr"
                ],
                "test_isposinf_scalar": [
                    "self",
                    "value",
                    "expected"
                ],
                "test_isneginf_scalar": [
                    "self",
                    "value",
                    "expected"
                ],
                "test_maybe_convert_numeric_infinities": [
                    "self",
                    "coerce_numeric",
                    "infinity",
                    "prefix"
                ],
                "test_maybe_convert_numeric_infinities_raises": [
                    "self"
                ],
                "test_maybe_convert_numeric_post_floatify_nan": [
                    "self",
                    "coerce"
                ],
                "test_convert_infs": [
                    "self"
                ],
                "test_scientific_no_exponent": [
                    "self"
                ],
                "test_convert_non_hashable": [
                    "self"
                ],
                "test_convert_numeric_uint64": [
                    "self"
                ],
                "test_convert_numeric_uint64_nan": [
                    "self",
                    "coerce",
                    "arr"
                ],
                "test_convert_numeric_uint64_nan_values": [
                    "self",
                    "coerce"
                ],
                "test_convert_numeric_int64_uint64": [
                    "self",
                    "case",
                    "coerce"
                ],
                "test_convert_numeric_string_uint64": [
                    "self"
                ],
                "test_convert_int_overflow": [
                    "self",
                    "value"
                ],
                "test_maybe_convert_objects_uint64": [
                    "self"
                ],
                "test_maybe_convert_objects_datetime": [
                    "self"
                ],
                "test_maybe_convert_objects_nullable_integer": [
                    "self",
                    "exp"
                ],
                "test_maybe_convert_objects_bool_nan": [
                    "self"
                ],
                "test_mixed_dtypes_remain_object_array": [
                    "self"
                ]
            },
            "TestTypeInference": {
                "test_inferred_dtype_fixture": [
                    "self",
                    "any_skipna_inferred_dtype"
                ],
                "test_length_zero": [
                    "self",
                    "skipna"
                ],
                "test_integers": [
                    "self"
                ],
                "test_integer_na": [
                    "self",
                    "arr",
                    "skipna"
                ],
                "test_infer_dtype_skipna_default": [
                    "self"
                ],
                "test_bools": [
                    "self"
                ],
                "test_floats": [
                    "self"
                ],
                "test_decimals": [
                    "self"
                ],
                "test_complex": [
                    "self",
                    "skipna"
                ],
                "test_string": [
                    "self"
                ],
                "test_unicode": [
                    "self"
                ],
                "test_object_empty": [
                    "self",
                    "box",
                    "missing",
                    "dtype",
                    "skipna",
                    "expected"
                ],
                "test_datetime": [
                    "self"
                ],
                "test_infer_dtype_datetime64": [
                    "self"
                ],
                "test_infer_dtype_datetime64_with_na": [
                    "self",
                    "na_value"
                ],
                "test_infer_datetimelike_dtype_mixed": [
                    "self",
                    "arr"
                ],
                "test_infer_dtype_mixed_integer": [
                    "self"
                ],
                "test_infer_dtype_datetime": [
                    "self",
                    "arr"
                ],
                "test_infer_dtype_datetime_with_na": [
                    "self",
                    "na_value",
                    "time_stamp"
                ],
                "test_infer_dtype_timedelta": [
                    "self",
                    "arr"
                ],
                "test_infer_dtype_timedelta_with_na": [
                    "self",
                    "na_value",
                    "delta"
                ],
                "test_infer_dtype_period": [
                    "self"
                ],
                "test_infer_dtype_period_mixed": [
                    "self"
                ],
                "test_infer_dtype_period_with_na": [
                    "self",
                    "na_value"
                ],
                "test_infer_datetimelike_array_datetime": [
                    "self",
                    "data"
                ],
                "test_infer_datetimelike_array_timedelta": [
                    "self",
                    "data"
                ],
                "test_infer_datetimelike_array_date": [
                    "self"
                ],
                "test_infer_datetimelike_array_mixed": [
                    "self",
                    "data"
                ],
                "test_infer_datetimelike_array_nan_nat_like": [
                    "self",
                    "first",
                    "second",
                    "expected"
                ],
                "test_infer_dtype_all_nan_nat_like": [
                    "self"
                ],
                "test_is_datetimelike_array_all_nan_nat_like": [
                    "self"
                ],
                "test_other_dtypes_for_array": [
                    "self",
                    "func"
                ],
                "test_date": [
                    "self"
                ],
                "test_infer_dtype_date_order_invariant": [
                    "self",
                    "values",
                    "skipna"
                ],
                "test_is_numeric_array": [
                    "self"
                ],
                "test_is_string_array": [
                    "self"
                ],
                "test_to_object_array_tuples": [
                    "self"
                ],
                "test_object": [
                    "self"
                ],
                "test_to_object_array_width": [
                    "self"
                ],
                "test_is_period": [
                    "self"
                ],
                "test_categorical": [
                    "self"
                ],
                "test_interval": [
                    "self"
                ],
                "test_string_dtype": [
                    "self",
                    "data",
                    "skipna",
                    "klass"
                ],
                "test_boolean_dtype": [
                    "self",
                    "data",
                    "skipna",
                    "klass"
                ]
            },
            "TestNumberScalar": {
                "test_is_number": [
                    "self"
                ],
                "test_is_bool": [
                    "self"
                ],
                "test_is_integer": [
                    "self"
                ],
                "test_is_float": [
                    "self"
                ],
                "test_is_datetime_dtypes": [
                    "self"
                ],
                "test_is_timedelta": [
                    "self"
                ]
            },
            "TestIsScalar": {
                "test_is_scalar_builtin_scalars": [
                    "self"
                ],
                "test_is_scalar_builtin_nonscalars": [
                    "self"
                ],
                "test_is_scalar_numpy_array_scalars": [
                    "self"
                ],
                "test_is_scalar_numpy_zerodim_arrays": [
                    "self"
                ],
                "test_is_scalar_numpy_arrays": [
                    "self"
                ],
                "test_is_scalar_pandas_scalars": [
                    "self"
                ],
                "test_is_scalar_pandas_containers": [
                    "self"
                ],
                "test_is_scalar_number": [
                    "self"
                ]
            }
        },
        "pandas.tests.dtypes.test_missing": {
            "test_notna_notnull": [
                "notna_f"
            ],
            "test_array_equivalent": [
                "dtype_equal"
            ],
            "test_array_equivalent_different_dtype_but_equal": [],
            "test_array_equivalent_tzawareness": [
                "lvalue",
                "rvalue"
            ],
            "test_array_equivalent_compat": [],
            "test_array_equivalent_str": [],
            "test_array_equivalent_nested": [],
            "test_na_value_for_dtype": [
                "dtype",
                "na_value"
            ],
            "TestIsNA": {
                "test_0d_array": [
                    "self"
                ],
                "test_empty_object": [
                    "self"
                ],
                "test_isna_isnull": [
                    "self",
                    "isna_f"
                ],
                "test_isna_lists": [
                    "self"
                ],
                "test_isna_nat": [
                    "self"
                ],
                "test_isna_numpy_nat": [
                    "self"
                ],
                "test_isna_datetime": [
                    "self"
                ],
                "test_isna_old_datetimelike": [
                    "self"
                ],
                "test_complex": [
                    "self",
                    "value",
                    "expected"
                ],
                "test_datetime_other_units": [
                    "self"
                ],
                "test_timedelta_other_units": [
                    "self"
                ],
                "test_period": [
                    "self"
                ]
            },
            "TestNAObj": {
                "_check_behavior": [
                    "self",
                    "arr",
                    "expected"
                ],
                "test_basic": [
                    "self"
                ],
                "test_non_obj_dtype": [
                    "self"
                ],
                "test_empty_arr": [
                    "self"
                ],
                "test_empty_str_inp": [
                    "self"
                ],
                "test_empty_like": [
                    "self"
                ]
            },
            "TestLibMissing": {
                "test_checknull": [
                    "self"
                ],
                "test_checknull_old": [
                    "self"
                ],
                "test_is_null_datetimelike": [
                    "self"
                ]
            }
        },
        "pandas.tests.dtypes": {},
        "pandas.tests.dtypes.test_concat": {
            "test_get_dtype_kinds": [
                "index_or_series",
                "to_concat",
                "expected"
            ],
            "test_get_dtype_kinds_period": [
                "to_concat",
                "expected"
            ],
            "test_concat_mismatched_categoricals_with_empty": [],
            "test_concat_single_dataframe_tz_aware": [
                "copy"
            ]
        },
        "pandas.tests.dtypes.cast.test_downcast": {
            "test_downcast": [
                "arr",
                "expected",
                "dtype"
            ],
            "test_downcast_booleans": [],
            "test_downcast_conversion_no_nan": [
                "any_real_dtype"
            ],
            "test_downcast_conversion_nan": [
                "float_dtype"
            ],
            "test_downcast_conversion_empty": [
                "any_real_dtype"
            ],
            "test_datetime_likes_nan": [
                "klass"
            ],
            "test_datetime_with_timezone": [
                "as_asi"
            ]
        },
        "pandas.tests.dtypes.cast.test_promote": {
            "any_numpy_dtype_reduced": [
                "request"
            ],
            "_check_promote": [
                "dtype",
                "fill_value",
                "expected_dtype",
                "exp_val_for_scalar"
            ],
            "_assert_match": [
                "result_fill_value",
                "expected_fill_value"
            ],
            "test_maybe_promote_int_with_int": [
                "dtype",
                "fill_value",
                "expected_dtype"
            ],
            "test_maybe_promote_int_with_float": [
                "any_int_dtype",
                "float_dtype"
            ],
            "test_maybe_promote_float_with_int": [
                "float_dtype",
                "any_int_dtype"
            ],
            "test_maybe_promote_float_with_float": [
                "dtype",
                "fill_value",
                "expected_dtype"
            ],
            "test_maybe_promote_bool_with_any": [
                "any_numpy_dtype_reduced"
            ],
            "test_maybe_promote_any_with_bool": [
                "any_numpy_dtype_reduced"
            ],
            "test_maybe_promote_bytes_with_any": [
                "bytes_dtype",
                "any_numpy_dtype_reduced"
            ],
            "test_maybe_promote_any_with_bytes": [
                "any_numpy_dtype_reduced",
                "bytes_dtype"
            ],
            "test_maybe_promote_datetime64_with_any": [
                "datetime64_dtype",
                "any_numpy_dtype_reduced"
            ],
            "test_maybe_promote_any_with_datetime64": [
                "any_numpy_dtype_reduced",
                "datetime64_dtype",
                "fill_value"
            ],
            "test_maybe_promote_datetimetz_with_any_numpy_dtype": [
                "tz_aware_fixture",
                "any_numpy_dtype_reduced"
            ],
            "test_maybe_promote_datetimetz_with_datetimetz": [
                "tz_aware_fixture",
                "tz_aware_fixture2"
            ],
            "test_maybe_promote_datetimetz_with_na": [
                "tz_aware_fixture",
                "fill_value"
            ],
            "test_maybe_promote_any_numpy_dtype_with_datetimetz": [
                "any_numpy_dtype_reduced",
                "tz_aware_fixture",
                "fill_value"
            ],
            "test_maybe_promote_timedelta64_with_any": [
                "timedelta64_dtype",
                "any_numpy_dtype_reduced"
            ],
            "test_maybe_promote_any_with_timedelta64": [
                "any_numpy_dtype_reduced",
                "timedelta64_dtype",
                "fill_value"
            ],
            "test_maybe_promote_string_with_any": [
                "string_dtype",
                "any_numpy_dtype_reduced"
            ],
            "test_maybe_promote_any_with_string": [
                "any_numpy_dtype_reduced",
                "string_dtype"
            ],
            "test_maybe_promote_object_with_any": [
                "object_dtype",
                "any_numpy_dtype_reduced"
            ],
            "test_maybe_promote_any_with_object": [
                "any_numpy_dtype_reduced",
                "object_dtype"
            ],
            "test_maybe_promote_any_numpy_dtype_with_na": [
                "any_numpy_dtype_reduced",
                "fill_value"
            ],
            "test_maybe_promote_dimensions": [
                "any_numpy_dtype_reduced",
                "dim"
            ]
        },
        "pandas.tests.dtypes.cast.test_infer_datetimelike": {
            "test_maybe_infer_to_datetimelike_df_construct": [
                "data",
                "exp_size"
            ],
            "test_maybe_infer_to_datetimelike_ser_construct": []
        },
        "pandas.tests.dtypes.cast.test_infer_dtype": {
            "pandas_dtype": [
                "request"
            ],
            "test_infer_dtype_from_int_scalar": [
                "any_int_dtype"
            ],
            "test_infer_dtype_from_float_scalar": [
                "float_dtype"
            ],
            "test_infer_dtype_from_python_scalar": [
                "data",
                "exp_dtype"
            ],
            "test_infer_dtype_from_boolean": [
                "bool_val"
            ],
            "test_infer_dtype_from_complex": [
                "complex_dtype"
            ],
            "test_infer_dtype_from_datetime": [
                "data"
            ],
            "test_infer_dtype_from_timedelta": [
                "data"
            ],
            "test_infer_dtype_from_period": [
                "freq",
                "pandas_dtype"
            ],
            "test_infer_dtype_misc": [
                "data"
            ],
            "test_infer_from_scalar_tz": [
                "tz",
                "pandas_dtype"
            ],
            "test_infer_from_interval": [
                "left",
                "right",
                "subtype",
                "closed",
                "pandas_dtype"
            ],
            "test_infer_dtype_from_scalar_errors": [],
            "test_infer_dtype_from_array": [
                "arr",
                "expected",
                "pandas_dtype"
            ],
            "test_cast_scalar_to_array": [
                "obj",
                "dtype"
            ]
        },
        "pandas.tests.dtypes.cast.test_construct_object_arr": {
            "test_cast_1d_array": [
                "datum1",
                "datum2"
            ],
            "test_cast_1d_array_invalid_scalar": [
                "val"
            ]
        },
        "pandas.tests.dtypes.cast.test_find_common_type": {
            "test_numpy_dtypes": [
                "source_dtypes",
                "expected_common_dtype"
            ],
            "test_raises_empty_input": [],
            "test_categorical_dtype": [
                "dtypes",
                "exp_type"
            ],
            "test_datetimetz_dtype_match": [],
            "test_datetimetz_dtype_mismatch": [
                "dtype2"
            ],
            "test_period_dtype_match": [],
            "test_period_dtype_mismatch": [
                "dtype2"
            ]
        },
        "pandas.tests.dtypes.cast.test_construct_from_scalar": {
            "test_cast_1d_array_like_from_scalar_categorical": []
        },
        "pandas.tests.dtypes.cast.test_convert_objects": {
            "test_maybe_convert_objects_copy": [
                "data"
            ]
        },
        "pandas.tests.dtypes.cast.test_construct_ndarray": {
            "test_construct_1d_ndarray_preserving_na": [
                "values",
                "dtype",
                "expected"
            ]
        },
        "pandas.tests.dtypes.cast.test_upcast": {
            "test_upcast_error": [
                "result"
            ],
            "test_upcast_scalar_other": [
                "arr",
                "other"
            ],
            "test_upcast": [],
            "test_upcast_datetime": []
        },
        "pandas.tests.dtypes.cast": {},
        "pandas.tests.indexes.test_engines": {
            "numeric_indexing_engine_type_and_dtype": [
                "request"
            ],
            "TestDatetimeEngine": {
                "test_not_contains_requires_timestamp": [
                    "self",
                    "scalar"
                ]
            },
            "TestTimedeltaEngine": {
                "test_not_contains_requires_timestamp": [
                    "self",
                    "scalar"
                ]
            },
            "TestNumericEngine": {
                "test_is_monotonic": [
                    "self",
                    "numeric_indexing_engine_type_and_dtype"
                ],
                "test_is_unique": [
                    "self",
                    "numeric_indexing_engine_type_and_dtype"
                ],
                "test_get_loc": [
                    "self",
                    "numeric_indexing_engine_type_and_dtype"
                ],
                "test_get_backfill_indexer": [
                    "self",
                    "numeric_indexing_engine_type_and_dtype"
                ],
                "test_get_pad_indexer": [
                    "self",
                    "numeric_indexing_engine_type_and_dtype"
                ]
            },
            "TestObjectEngine": {
                "test_is_monotonic": [
                    "self"
                ],
                "test_is_unique": [
                    "self"
                ],
                "test_get_loc": [
                    "self"
                ],
                "test_get_backfill_indexer": [
                    "self"
                ],
                "test_get_pad_indexer": [
                    "self"
                ]
            }
        },
        "pandas.tests.indexes.test_frozen": {
            "TestFrozenList": {
                "setup_method": [
                    "self",
                    "_"
                ],
                "check_mutable_error": [
                    "self"
                ],
                "test_no_mutable_funcs": [
                    "self"
                ],
                "test_slicing_maintains_type": [
                    "self"
                ],
                "check_result": [
                    "self",
                    "result",
                    "expected"
                ],
                "test_string_methods_dont_fail": [
                    "self"
                ],
                "test_tricky_container": [
                    "self"
                ],
                "test_add": [
                    "self"
                ],
                "test_iadd": [
                    "self"
                ],
                "test_union": [
                    "self"
                ],
                "test_difference": [
                    "self"
                ],
                "test_difference_dupe": [
                    "self"
                ],
                "test_tricky_container_to_bytes_raises": [
                    "self"
                ]
            }
        },
        "pandas.tests.indexes.test_base": {
            "test_generated_op_names": [
                "opname",
                "index"
            ],
            "test_index_subclass_constructor_wrong_kwargs": [
                "index_maker"
            ],
            "test_deprecated_fastpath": [],
            "test_shape_of_invalid_index": [],
            "test_validate_1d_input": [],
            "test_convert_almost_null_slice": [
                "index"
            ],
            "test_get_indexer_non_unique_wrong_dtype": [
                "ldtype",
                "rdtype"
            ],
            "TestIndex": {
                "create_index": [
                    "self"
                ],
                "test_can_hold_identifiers": [
                    "self"
                ],
                "test_new_axis": [
                    "self",
                    "index"
                ],
                "test_copy_and_deepcopy": [
                    "self",
                    "index"
                ],
                "test_constructor_regular": [
                    "self",
                    "index"
                ],
                "test_constructor_casting": [
                    "self",
                    "index"
                ],
                "test_constructor_copy": [
                    "self",
                    "index"
                ],
                "test_constructor_from_index_dtlike": [
                    "self",
                    "cast_as_obj",
                    "index"
                ],
                "test_constructor_from_series_dtlike": [
                    "self",
                    "index",
                    "has_tz"
                ],
                "test_constructor_from_series_freq": [
                    "self"
                ],
                "test_constructor_from_frame_series_freq": [
                    "self"
                ],
                "test_constructor_ndarray_like": [
                    "self",
                    "array"
                ],
                "test_constructor_int_dtype_nan": [
                    "self"
                ],
                "test_constructor_int_dtype_nan_raises": [
                    "self",
                    "dtype"
                ],
                "test_constructor_no_pandas_array": [
                    "self"
                ],
                "test_index_ctor_infer_nan_nat": [
                    "self",
                    "klass",
                    "dtype",
                    "na_val"
                ],
                "test_constructor_simple_new": [
                    "self",
                    "vals",
                    "dtype"
                ],
                "test_constructor_dtypes_to_int64": [
                    "self",
                    "vals"
                ],
                "test_constructor_dtypes_to_float64": [
                    "self",
                    "vals"
                ],
                "test_constructor_dtypes_to_categorical": [
                    "self",
                    "vals"
                ],
                "test_constructor_dtypes_to_datetime": [
                    "self",
                    "cast_index",
                    "vals"
                ],
                "test_constructor_dtypes_to_timedelta": [
                    "self",
                    "cast_index",
                    "vals"
                ],
                "test_constructor_dtypes_datetime": [
                    "self",
                    "tz_naive_fixture",
                    "attr",
                    "klass"
                ],
                "test_constructor_dtypes_timedelta": [
                    "self",
                    "attr",
                    "klass"
                ],
                "test_constructor_empty": [
                    "self",
                    "value",
                    "klass"
                ],
                "test_constructor_empty_special": [
                    "self",
                    "empty",
                    "klass"
                ],
                "test_constructor_overflow_int64": [
                    "self"
                ],
                "test_view_with_args": [
                    "self",
                    "index"
                ],
                "test_view_with_args_object_array_raises": [
                    "self",
                    "index"
                ],
                "test_astype": [
                    "self",
                    "index"
                ],
                "test_equals_object": [
                    "self"
                ],
                "test_not_equals_object": [
                    "self",
                    "comp"
                ],
                "test_insert_missing": [
                    "self",
                    "nulls_fixture"
                ],
                "test_delete_raises": [
                    "self"
                ],
                "test_identical": [
                    "self"
                ],
                "test_is_": [
                    "self"
                ],
                "test_asof": [
                    "self",
                    "index"
                ],
                "test_asof_datetime_partial": [
                    "self"
                ],
                "test_nanosecond_index_access": [
                    "self"
                ],
                "test_booleanindex": [
                    "self",
                    "index"
                ],
                "test_fancy": [
                    "self"
                ],
                "test_empty_fancy": [
                    "self",
                    "index",
                    "dtype"
                ],
                "test_empty_fancy_raises": [
                    "self",
                    "index"
                ],
                "test_intersection": [
                    "self",
                    "index",
                    "sort"
                ],
                "test_intersection_name_preservation": [
                    "self",
                    "index2",
                    "keeps_name",
                    "sort"
                ],
                "test_intersection_name_preservation2": [
                    "self",
                    "index",
                    "first_name",
                    "second_name",
                    "expected_name",
                    "sort"
                ],
                "test_intersection_monotonic": [
                    "self",
                    "index2",
                    "keeps_name",
                    "sort"
                ],
                "test_intersection_non_monotonic_non_unique": [
                    "self",
                    "index2",
                    "expected_arr",
                    "sort"
                ],
                "test_intersect_str_dates": [
                    "self",
                    "sort"
                ],
                "test_intersection_equal_sort_true": [
                    "self"
                ],
                "test_chained_union": [
                    "self",
                    "sort"
                ],
                "test_union": [
                    "self",
                    "index",
                    "sort"
                ],
                "test_union_sort_other_special": [
                    "self",
                    "slice_"
                ],
                "test_union_sort_special_true": [
                    "self",
                    "slice_"
                ],
                "test_union_from_iterables": [
                    "self",
                    "index",
                    "klass",
                    "sort"
                ],
                "test_union_identity": [
                    "self",
                    "index",
                    "sort"
                ],
                "test_union_name_preservation": [
                    "self",
                    "first_list",
                    "second_list",
                    "first_name",
                    "second_name",
                    "expected_name",
                    "sort"
                ],
                "test_union_dt_as_obj": [
                    "self",
                    "sort"
                ],
                "test_map_identity_mapping": [
                    "self",
                    "index"
                ],
                "test_map_with_tuples": [
                    "self"
                ],
                "test_map_with_tuples_mi": [
                    "self"
                ],
                "test_map_tseries_indices_return_index": [
                    "self",
                    "attr"
                ],
                "test_map_tseries_indices_accsr_return_index": [
                    "self"
                ],
                "test_map_dictlike_simple": [
                    "self",
                    "mapper"
                ],
                "test_map_dictlike": [
                    "self",
                    "index",
                    "mapper"
                ],
                "test_map_with_non_function_missing_values": [
                    "self",
                    "mapper"
                ],
                "test_map_na_exclusion": [
                    "self"
                ],
                "test_map_defaultdict": [
                    "self"
                ],
                "test_append_empty_preserve_name": [
                    "self",
                    "name",
                    "expected"
                ],
                "test_difference_name_preservation": [
                    "self",
                    "index",
                    "second_name",
                    "expected",
                    "sort"
                ],
                "test_difference_empty_arg": [
                    "self",
                    "index",
                    "sort"
                ],
                "test_difference_identity": [
                    "self",
                    "index",
                    "sort"
                ],
                "test_difference_sort": [
                    "self",
                    "index",
                    "sort"
                ],
                "test_symmetric_difference": [
                    "self",
                    "sort"
                ],
                "test_difference_incomparable": [
                    "self",
                    "opname"
                ],
                "test_difference_incomparable_true": [
                    "self",
                    "opname"
                ],
                "test_symmetric_difference_mi": [
                    "self",
                    "sort"
                ],
                "test_symmetric_difference_missing": [
                    "self",
                    "index2",
                    "expected",
                    "sort"
                ],
                "test_symmetric_difference_non_index": [
                    "self",
                    "sort"
                ],
                "test_difference_type": [
                    "self",
                    "index",
                    "sort"
                ],
                "test_intersection_difference": [
                    "self",
                    "index",
                    "sort"
                ],
                "test_is_mixed_deprecated": [
                    "self"
                ],
                "test_is_numeric": [
                    "self",
                    "index",
                    "expected"
                ],
                "test_is_object": [
                    "self",
                    "index",
                    "expected"
                ],
                "test_is_all_dates": [
                    "self",
                    "index",
                    "expected"
                ],
                "test_summary": [
                    "self",
                    "index"
                ],
                "test_summary_bug": [
                    "self"
                ],
                "test_format_different_scalar_lengths": [
                    "self"
                ],
                "test_format_bug": [
                    "self"
                ],
                "test_format_missing": [
                    "self",
                    "vals",
                    "nulls_fixture"
                ],
                "test_format_with_name_time_info": [
                    "self"
                ],
                "test_format_datetime_with_time": [
                    "self"
                ],
                "test_logical_compat": [
                    "self",
                    "op"
                ],
                "_check_method_works": [
                    "self",
                    "method",
                    "index"
                ],
                "test_get_indexer": [
                    "self"
                ],
                "test_get_indexer_methods": [
                    "self",
                    "reverse",
                    "expected",
                    "method"
                ],
                "test_get_indexer_invalid": [
                    "self"
                ],
                "test_get_indexer_nearest": [
                    "self",
                    "method",
                    "tolerance",
                    "indexer",
                    "expected"
                ],
                "test_get_indexer_nearest_listlike_tolerance": [
                    "self",
                    "tolerance",
                    "expected",
                    "listtype"
                ],
                "test_get_indexer_nearest_error": [
                    "self"
                ],
                "test_get_indexer_nearest_decreasing": [
                    "self",
                    "method",
                    "expected"
                ],
                "test_get_indexer_strings": [
                    "self",
                    "method",
                    "expected"
                ],
                "test_get_indexer_strings_raises": [
                    "self"
                ],
                "test_get_indexer_numeric_index_boolean_target": [
                    "self",
                    "idx_class"
                ],
                "test_get_indexer_with_NA_values": [
                    "self",
                    "unique_nulls_fixture",
                    "unique_nulls_fixture2"
                ],
                "test_get_loc": [
                    "self",
                    "method"
                ],
                "test_get_loc_raises_bad_label": [
                    "self",
                    "method"
                ],
                "test_get_loc_tolerance": [
                    "self",
                    "method",
                    "loc"
                ],
                "test_get_loc_outside_tolerance_raises": [
                    "self",
                    "method"
                ],
                "test_get_loc_bad_tolerance_raises": [
                    "self"
                ],
                "test_get_loc_tolerance_no_method_raises": [
                    "self"
                ],
                "test_get_loc_raises_missized_tolerance": [
                    "self"
                ],
                "test_get_loc_raises_object_nearest": [
                    "self"
                ],
                "test_get_loc_raises_object_tolerance": [
                    "self"
                ],
                "test_slice_locs": [
                    "self",
                    "dtype"
                ],
                "test_slice_float_locs": [
                    "self",
                    "dtype"
                ],
                "test_slice_locs_dup": [
                    "self"
                ],
                "test_slice_locs_dup_numeric": [
                    "self",
                    "dtype"
                ],
                "test_slice_locs_na": [
                    "self"
                ],
                "test_slice_locs_na_raises": [
                    "self"
                ],
                "test_slice_locs_negative_step": [
                    "self",
                    "in_slice",
                    "expected"
                ],
                "test_drop_by_str_label": [
                    "self",
                    "index"
                ],
                "test_drop_by_str_label_raises_missing_keys": [
                    "self",
                    "index",
                    "keys"
                ],
                "test_drop_by_str_label_errors_ignore": [
                    "self",
                    "index"
                ],
                "test_drop_by_numeric_label_loc": [
                    "self"
                ],
                "test_drop_by_numeric_label_raises_missing_keys": [
                    "self"
                ],
                "test_drop_by_numeric_label_errors_ignore": [
                    "self",
                    "key",
                    "expected"
                ],
                "test_drop_tuple": [
                    "self",
                    "values",
                    "to_drop"
                ],
                "test_tuple_union_bug": [
                    "self",
                    "method",
                    "expected",
                    "sort"
                ],
                "test_is_monotonic_incomparable": [
                    "self",
                    "attr"
                ],
                "test_set_value_deprecated": [
                    "self"
                ],
                "test_get_value": [
                    "self",
                    "index"
                ],
                "test_isin": [
                    "self",
                    "values",
                    "index",
                    "expected"
                ],
                "test_isin_nan_common_object": [
                    "self",
                    "nulls_fixture",
                    "nulls_fixture2"
                ],
                "test_isin_nan_common_float64": [
                    "self",
                    "nulls_fixture"
                ],
                "test_isin_level_kwarg": [
                    "self",
                    "level",
                    "index"
                ],
                "test_isin_level_kwarg_bad_level_raises": [
                    "self",
                    "index"
                ],
                "test_isin_level_kwarg_bad_label_raises": [
                    "self",
                    "label",
                    "index"
                ],
                "test_isin_empty": [
                    "self",
                    "empty"
                ],
                "test_boolean_cmp": [
                    "self",
                    "values"
                ],
                "test_get_level_values": [
                    "self",
                    "index",
                    "name",
                    "level"
                ],
                "test_slice_keep_name": [
                    "self"
                ],
                "test_join_self": [
                    "self",
                    "index",
                    "join_type"
                ],
                "test_str_attribute": [
                    "self",
                    "method"
                ],
                "test_str_attribute_raises": [
                    "self",
                    "index"
                ],
                "test_str_split": [
                    "self",
                    "expand",
                    "expected"
                ],
                "test_str_bool_return": [
                    "self"
                ],
                "test_str_bool_series_indexing": [
                    "self"
                ],
                "test_tab_completion": [
                    "self",
                    "index",
                    "expected"
                ],
                "test_indexing_doesnt_change_class": [
                    "self"
                ],
                "test_outer_join_sort": [
                    "self"
                ],
                "test_nan_first_take_datetime": [
                    "self"
                ],
                "test_take_fill_value": [
                    "self"
                ],
                "test_take_fill_value_none_raises": [
                    "self"
                ],
                "test_take_bad_bounds_raises": [
                    "self"
                ],
                "test_reindex_preserves_name_if_target_is_list_or_ndarray": [
                    "self",
                    "name",
                    "labels"
                ],
                "test_reindex_preserves_type_if_target_is_empty_list_or_array": [
                    "self",
                    "labels"
                ],
                "test_reindex_doesnt_preserve_type_if_target_is_empty_index": [
                    "self",
                    "labels",
                    "dtype"
                ],
                "test_reindex_no_type_preserve_target_empty_mi": [
                    "self"
                ],
                "test_groupby": [
                    "self"
                ],
                "test_equals_op_multiindex": [
                    "self",
                    "mi",
                    "expected"
                ],
                "test_equals_op_multiindex_identify": [
                    "self"
                ],
                "test_equals_op_mismatched_multiindex_raises": [
                    "self",
                    "index"
                ],
                "test_equals_op_index_vs_mi_same_length": [
                    "self"
                ],
                "test_dt_conversion_preserves_name": [
                    "self",
                    "dt_conv"
                ],
                "test_string_index_repr": [
                    "self",
                    "index",
                    "expected"
                ],
                "test_string_index_repr_with_unicode_option": [
                    "self",
                    "index",
                    "expected"
                ],
                "test_cached_properties_not_settable": [
                    "self"
                ],
                "test_contains_method_removed": [
                    "self",
                    "index"
                ]
            },
            "TestMixedIntIndex": {
                "index": [
                    "self",
                    "request"
                ],
                "create_index": [
                    "self"
                ],
                "test_argsort": [
                    "self"
                ],
                "test_numpy_argsort": [
                    "self"
                ],
                "test_copy_name": [
                    "self"
                ],
                "test_copy_name2": [
                    "self"
                ],
                "test_unique_na": [
                    "self"
                ],
                "test_logical_compat": [
                    "self"
                ],
                "test_dropna": [
                    "self",
                    "how",
                    "dtype",
                    "vals",
                    "expected"
                ],
                "test_dropna_dt_like": [
                    "self",
                    "how",
                    "index",
                    "expected"
                ],
                "test_dropna_invalid_how_raises": [
                    "self"
                ],
                "test_get_combined_index": [
                    "self"
                ],
                "test_is_monotonic_na": [
                    "self",
                    "index"
                ],
                "test_repr_summary": [
                    "self"
                ],
                "test_int_name_format": [
                    "self",
                    "klass"
                ],
                "test_str_to_bytes_raises": [
                    "self"
                ],
                "test_intersect_str_dates": [
                    "self"
                ],
                "test_index_repr_bool_nan": [
                    "self"
                ],
                "test_index_with_tuple_bool": [
                    "self"
                ]
            },
            "TestIndexUtils": {
                "test_ensure_index_from_sequences": [
                    "self",
                    "data",
                    "names",
                    "expected"
                ],
                "test_ensure_index_mixed_closed_intervals": [
                    "self"
                ]
            }
        },
        "pandas.tests.indexes.test_numpy_compat": {
            "test_numpy_ufuncs_basic": [
                "index",
                "func"
            ],
            "test_numpy_ufuncs_other": [
                "index",
                "func"
            ],
            "test_elementwise_comparison_warning": []
        },
        "pandas.tests.indexes.common": {
            "Base": {
                "create_index": [
                    "self"
                ],
                "test_pickle_compat_construction": [
                    "self"
                ],
                "test_to_frame": [
                    "self",
                    "name"
                ],
                "test_shift": [
                    "self"
                ],
                "test_constructor_name_unhashable": [
                    "self"
                ],
                "test_create_index_existing_name": [
                    "self"
                ],
                "test_numeric_compat": [
                    "self"
                ],
                "test_logical_compat": [
                    "self"
                ],
                "test_reindex_base": [
                    "self"
                ],
                "test_get_indexer_consistency": [
                    "self",
                    "index"
                ],
                "test_ndarray_compat_properties": [
                    "self"
                ],
                "test_repr_roundtrip": [
                    "self"
                ],
                "test_repr_max_seq_item_setting": [
                    "self"
                ],
                "test_copy_name": [
                    "self",
                    "index"
                ],
                "test_ensure_copied_data": [
                    "self",
                    "index"
                ],
                "test_memory_usage": [
                    "self",
                    "index"
                ],
                "test_argsort": [
                    "self",
                    "request",
                    "index"
                ],
                "test_numpy_argsort": [
                    "self",
                    "index"
                ],
                "test_take": [
                    "self",
                    "index"
                ],
                "test_take_invalid_kwargs": [
                    "self"
                ],
                "test_repeat": [
                    "self"
                ],
                "test_numpy_repeat": [
                    "self"
                ],
                "test_where": [
                    "self",
                    "klass"
                ],
                "test_set_ops_error_cases": [
                    "self",
                    "case",
                    "method",
                    "index"
                ],
                "test_intersection_base": [
                    "self",
                    "index",
                    "request"
                ],
                "test_union_base": [
                    "self",
                    "index"
                ],
                "test_difference_base": [
                    "self",
                    "sort",
                    "index"
                ],
                "test_symmetric_difference": [
                    "self",
                    "index"
                ],
                "test_insert_base": [
                    "self",
                    "index"
                ],
                "test_delete_base": [
                    "self",
                    "index"
                ],
                "test_equals": [
                    "self",
                    "index"
                ],
                "test_equals_op": [
                    "self"
                ],
                "test_format": [
                    "self"
                ],
                "test_hasnans_isnans": [
                    "self",
                    "index"
                ],
                "test_fillna": [
                    "self",
                    "index"
                ],
                "test_nulls": [
                    "self",
                    "index"
                ],
                "test_empty": [
                    "self"
                ],
                "test_join_self_unique": [
                    "self",
                    "join_type"
                ],
                "test_map": [
                    "self"
                ],
                "test_map_dictlike": [
                    "self",
                    "mapper"
                ],
                "test_map_str": [
                    "self"
                ],
                "test_putmask_with_wrong_mask": [
                    "self"
                ],
                "test_astype_category": [
                    "self",
                    "copy",
                    "name",
                    "ordered"
                ],
                "test_is_unique": [
                    "self"
                ],
                "test_engine_reference_cycle": [
                    "self"
                ],
                "test_getitem_2d_deprecated": [
                    "self"
                ],
                "test_contains_requires_hashable_raises": [
                    "self"
                ],
                "test_copy_copies_cache": [
                    "self"
                ],
                "test_shallow_copy_copies_cache": [
                    "self"
                ]
            }
        },
        "pandas.tests.indexes.test_index_new": {
            "TestIndexConstructorInference": {
                "test_construction_list_tuples_nan": [
                    "self",
                    "na_value",
                    "vtype"
                ],
                "test_constructor_int_dtype_float": [
                    "self",
                    "dtype"
                ],
                "test_constructor_dtypes_to_object": [
                    "self",
                    "cast_index",
                    "vals"
                ],
                "test_constructor_categorical_to_object": [
                    "self"
                ],
                "test_constructor_infer_periodindex": [
                    "self"
                ],
                "test_constructor_infer_nat_dt_like": [
                    "self",
                    "pos",
                    "klass",
                    "dtype",
                    "ctor",
                    "nulls_fixture",
                    "request"
                ],
                "test_constructor_mixed_nat_objs_infers_object": [
                    "self",
                    "swap_objs"
                ]
            },
            "TestIndexConstructorUnwrapping": {
                "test_constructor_from_series_dt64": [
                    "self",
                    "klass"
                ]
            }
        },
        "pandas.tests.indexes.test_setops": {
            "test_union_same_types": [
                "index"
            ],
            "test_union_different_types": [
                "index",
                "index_fixture2"
            ],
            "test_compatible_inconsistent_pairs": [
                "idx_fact1",
                "idx_fact2"
            ],
            "test_union_dtypes": [
                "left",
                "right",
                "expected"
            ]
        },
        "pandas.tests.indexes.test_any_index": {
            "test_boolean_context_compat": [
                "index"
            ],
            "test_sort": [
                "index"
            ],
            "test_hash_error": [
                "index"
            ],
            "test_mutability": [
                "index"
            ],
            "test_wrong_number_names": [
                "index"
            ],
            "TestConversion": {
                "test_to_series": [
                    "self",
                    "index"
                ],
                "test_to_series_with_arguments": [
                    "self",
                    "index"
                ],
                "test_tolist_matches_list": [
                    "self",
                    "index"
                ]
            },
            "TestRoundTrips": {
                "test_pickle_roundtrip": [
                    "self",
                    "index"
                ]
            },
            "TestIndexing": {
                "test_slice_keeps_name": [
                    "self",
                    "index"
                ]
            },
            "TestRendering": {
                "test_str": [
                    "self",
                    "index"
                ]
            }
        },
        "pandas.tests.indexes.datetimelike": {
            "DatetimeLike": {
                "test_argmax_axis_invalid": [
                    "self"
                ],
                "test_can_hold_identifiers": [
                    "self"
                ],
                "test_shift_identity": [
                    "self"
                ],
                "test_str": [
                    "self"
                ],
                "test_view": [
                    "self"
                ],
                "test_map_callable": [
                    "self"
                ],
                "test_map_dictlike": [
                    "self",
                    "mapper"
                ],
                "test_getitem_preserves_freq": [
                    "self"
                ]
            }
        },
        "pandas.tests.indexes.test_common": {
            "TestCommon": {
                "test_droplevel": [
                    "self",
                    "index"
                ],
                "test_constructor_non_hashable_name": [
                    "self",
                    "index"
                ],
                "test_constructor_unwraps_index": [
                    "self",
                    "index"
                ],
                "test_getitem_error": [
                    "self",
                    "index",
                    "itm"
                ],
                "test_corner_union": [
                    "self",
                    "index",
                    "fname",
                    "sname",
                    "expected_name"
                ],
                "test_to_flat_index": [
                    "self",
                    "index"
                ],
                "test_set_name_methods": [
                    "self",
                    "index"
                ],
                "test_copy_and_deepcopy": [
                    "self",
                    "index"
                ],
                "test_unique": [
                    "self",
                    "index"
                ],
                "test_get_unique_index": [
                    "self",
                    "index"
                ],
                "test_mutability": [
                    "self",
                    "index"
                ],
                "test_view": [
                    "self",
                    "index"
                ],
                "test_searchsorted_monotonic": [
                    "self",
                    "index"
                ],
                "test_pickle": [
                    "self",
                    "index"
                ],
                "test_drop_duplicates": [
                    "self",
                    "index",
                    "keep"
                ],
                "test_drop_duplicates_no_duplicates": [
                    "self",
                    "index"
                ],
                "test_drop_duplicates_inplace": [
                    "self",
                    "index"
                ],
                "test_has_duplicates": [
                    "self",
                    "index"
                ],
                "test_astype_preserves_name": [
                    "self",
                    "index",
                    "dtype",
                    "copy"
                ]
            }
        },
        "pandas.tests.indexes.test_indexing": {
            "test_getitem_deprecated_float": [
                "idx"
            ],
            "TestContains": {
                "test_index_contains": [
                    "self",
                    "index",
                    "val"
                ],
                "test_index_not_contains": [
                    "self",
                    "index",
                    "val"
                ],
                "test_mixed_index_contains": [
                    "self",
                    "index",
                    "val"
                ],
                "test_mixed_index_not_contains": [
                    "self",
                    "index",
                    "val"
                ],
                "test_contains_with_float_index": [
                    "self"
                ]
            }
        },
        "pandas.tests.indexes.conftest": {
            "sort": [
                "request"
            ],
            "freq_sample": [
                "request"
            ]
        },
        "pandas.tests.indexes": {},
        "pandas.tests.indexes.test_numeric": {
            "test_int_float_union_dtype": [
                "dtype"
            ],
            "test_range_float_union_dtype": [],
            "test_uint_index_does_not_convert_to_float64": [],
            "test_float64_index_equals": [],
            "test_float64_index_difference": [],
            "Numeric": {
                "test_where": [
                    "self"
                ],
                "test_can_hold_identifiers": [
                    "self"
                ],
                "test_format": [
                    "self"
                ],
                "test_numeric_compat": [
                    "self"
                ],
                "test_explicit_conversions": [
                    "self"
                ],
                "test_index_groupby": [
                    "self"
                ],
                "test_insert": [
                    "self",
                    "nulls_fixture"
                ]
            },
            "TestFloat64Index": {
                "index": [
                    "self",
                    "request"
                ],
                "mixed_index": [
                    "self"
                ],
                "float_index": [
                    "self"
                ],
                "create_index": [
                    "self"
                ],
                "test_repr_roundtrip": [
                    "self",
                    "index"
                ],
                "check_is_index": [
                    "self",
                    "i"
                ],
                "check_coerce": [
                    "self",
                    "a",
                    "b",
                    "is_float_index"
                ],
                "test_constructor": [
                    "self"
                ],
                "test_invalid_dtype": [
                    "self",
                    "index",
                    "dtype"
                ],
                "test_constructor_invalid": [
                    "self"
                ],
                "test_constructor_coerce": [
                    "self",
                    "mixed_index",
                    "float_index"
                ],
                "test_constructor_explicit": [
                    "self",
                    "mixed_index",
                    "float_index"
                ],
                "test_type_coercion_fail": [
                    "self",
                    "any_int_dtype"
                ],
                "test_type_coercion_valid": [
                    "self",
                    "float_dtype"
                ],
                "test_equals_numeric": [
                    "self"
                ],
                "test_equals_numeric_other_index_type": [
                    "self",
                    "other"
                ],
                "test_lookups_datetimelike_values": [
                    "self",
                    "vals"
                ],
                "test_doesnt_contain_all_the_things": [
                    "self"
                ],
                "test_nan_multiple_containment": [
                    "self"
                ],
                "test_fillna_float64": [
                    "self"
                ]
            },
            "NumericInt": {
                "test_view": [
                    "self"
                ],
                "test_is_monotonic": [
                    "self"
                ],
                "test_is_strictly_monotonic": [
                    "self"
                ],
                "test_logical_compat": [
                    "self"
                ],
                "test_identical": [
                    "self"
                ],
                "test_union_noncomparable": [
                    "self"
                ],
                "test_cant_or_shouldnt_cast": [
                    "self"
                ],
                "test_view_index": [
                    "self"
                ],
                "test_prevent_casting": [
                    "self"
                ]
            },
            "TestInt64Index": {
                "index": [
                    "self",
                    "request"
                ],
                "create_index": [
                    "self"
                ],
                "test_constructor": [
                    "self"
                ],
                "test_constructor_corner": [
                    "self"
                ],
                "test_constructor_coercion_signed_to_unsigned": [
                    "self",
                    "uint_dtype"
                ],
                "test_constructor_unwraps_index": [
                    "self"
                ],
                "test_coerce_list": [
                    "self"
                ],
                "test_intersection": [
                    "self"
                ]
            },
            "TestUInt64Index": {
                "index": [
                    "self",
                    "request"
                ],
                "index_large": [
                    "self"
                ],
                "create_index": [
                    "self"
                ],
                "test_constructor": [
                    "self"
                ],
                "test_intersection": [
                    "self",
                    "index_large"
                ]
            }
        },
        "pandas.tests.indexes.base_class.test_reshape": {
            "TestReshape": {
                "test_repeat": [
                    "self"
                ],
                "test_insert": [
                    "self"
                ],
                "test_delete": [
                    "self",
                    "pos",
                    "expected"
                ],
                "test_append_multiple": [
                    "self"
                ]
            }
        },
        "pandas.tests.indexes.base_class.test_setops": {
            "TestIndexSetOps": {
                "test_setops_disallow_true": [
                    "self",
                    "method"
                ],
                "test_setops_preserve_object_dtype": [
                    "self"
                ],
                "test_union_base": [
                    "self"
                ],
                "test_union_different_type_base": [
                    "self",
                    "klass"
                ],
                "test_union_sort_other_incomparable": [
                    "self"
                ],
                "test_union_sort_other_incomparable_true": [
                    "self"
                ],
                "test_intersection_base": [
                    "self",
                    "sort"
                ],
                "test_intersection_different_type_base": [
                    "self",
                    "klass",
                    "sort"
                ],
                "test_intersect_nosort": [
                    "self"
                ],
                "test_intersection_equal_sort": [
                    "self"
                ],
                "test_difference_base": [
                    "self",
                    "sort"
                ],
                "test_symmetric_difference": [
                    "self"
                ]
            }
        },
        "pandas.tests.indexes.base_class.test_constructors": {
            "TestIndexConstructor": {
                "test_constructor_corner": [
                    "self",
                    "value"
                ],
                "test_construction_list_mixed_tuples": [
                    "self",
                    "index_vals"
                ],
                "test_constructor_wrong_kwargs": [
                    "self"
                ],
                "test_constructor_cast": [
                    "self"
                ]
            }
        },
        "pandas.tests.indexes.base_class": {},
        "pandas.tests.indexes.interval.test_interval_range": {
            "name": [
                "request"
            ],
            "TestIntervalRange": {
                "test_constructor_numeric": [
                    "self",
                    "closed",
                    "name",
                    "freq",
                    "periods"
                ],
                "test_constructor_timestamp": [
                    "self",
                    "closed",
                    "name",
                    "freq",
                    "periods",
                    "tz"
                ],
                "test_constructor_timedelta": [
                    "self",
                    "closed",
                    "name",
                    "freq",
                    "periods"
                ],
                "test_early_truncation": [
                    "self",
                    "start",
                    "end",
                    "freq",
                    "expected_endpoint"
                ],
                "test_no_invalid_float_truncation": [
                    "self",
                    "start",
                    "end",
                    "freq"
                ],
                "test_linspace_dst_transition": [
                    "self",
                    "start",
                    "mid",
                    "end"
                ],
                "test_float_subtype": [
                    "self",
                    "start",
                    "end",
                    "freq"
                ],
                "test_constructor_coverage": [
                    "self"
                ],
                "test_errors": [
                    "self"
                ]
            }
        },
        "pandas.tests.indexes.interval.test_base": {
            "TestBase": {
                "index": [
                    "self"
                ],
                "create_index": [
                    "self",
                    "closed"
                ],
                "test_equals": [
                    "self",
                    "closed"
                ],
                "test_repr_max_seq_item_setting": [
                    "self"
                ],
                "test_repr_roundtrip": [
                    "self"
                ],
                "test_take": [
                    "self",
                    "closed"
                ],
                "test_where": [
                    "self",
                    "closed",
                    "klass"
                ],
                "test_getitem_2d_deprecated": [
                    "self"
                ]
            }
        },
        "pandas.tests.indexes.interval.test_setops": {
            "name": [
                "request"
            ],
            "monotonic_index": [
                "start",
                "end",
                "dtype",
                "closed"
            ],
            "empty_index": [
                "dtype",
                "closed"
            ],
            "TestIntervalIndex": {
                "test_union": [
                    "self",
                    "closed",
                    "sort"
                ],
                "test_intersection": [
                    "self",
                    "closed",
                    "sort"
                ],
                "test_difference": [
                    "self",
                    "closed",
                    "sort"
                ],
                "test_symmetric_difference": [
                    "self",
                    "closed",
                    "sort"
                ],
                "test_set_incompatible_types": [
                    "self",
                    "closed",
                    "op_name",
                    "sort"
                ]
            }
        },
        "pandas.tests.indexes.interval.test_interval": {
            "name": [
                "request"
            ],
            "test_dir": [],
            "test_searchsorted_different_argument_classes": [
                "klass"
            ],
            "test_searchsorted_invalid_argument": [
                "arg"
            ],
            "TestIntervalIndex": {
                "create_index": [
                    "self",
                    "closed"
                ],
                "create_index_with_nan": [
                    "self",
                    "closed"
                ],
                "test_properties": [
                    "self",
                    "closed"
                ],
                "test_length": [
                    "self",
                    "closed",
                    "breaks"
                ],
                "test_with_nans": [
                    "self",
                    "closed"
                ],
                "test_copy": [
                    "self",
                    "closed"
                ],
                "test_ensure_copied_data": [
                    "self",
                    "closed"
                ],
                "test_delete": [
                    "self",
                    "closed"
                ],
                "test_insert": [
                    "self",
                    "data"
                ],
                "test_is_unique_interval": [
                    "self",
                    "closed"
                ],
                "test_monotonic": [
                    "self",
                    "closed"
                ],
                "test_get_item": [
                    "self",
                    "closed"
                ],
                "test_maybe_convert_i8": [
                    "self",
                    "breaks"
                ],
                "test_maybe_convert_i8_nat": [
                    "self",
                    "breaks"
                ],
                "test_maybe_convert_i8_numeric": [
                    "self",
                    "breaks",
                    "make_key"
                ],
                "test_maybe_convert_i8_errors": [
                    "self",
                    "breaks1",
                    "breaks2",
                    "make_key"
                ],
                "test_contains_method": [
                    "self"
                ],
                "test_contains_dunder": [
                    "self"
                ],
                "test_dropna": [
                    "self",
                    "closed"
                ],
                "test_non_contiguous": [
                    "self",
                    "closed"
                ],
                "test_isin": [
                    "self",
                    "closed"
                ],
                "test_comparison": [
                    "self"
                ],
                "test_missing_values": [
                    "self",
                    "closed"
                ],
                "test_sort_values": [
                    "self",
                    "closed"
                ],
                "test_datetime": [
                    "self",
                    "tz"
                ],
                "test_append": [
                    "self",
                    "closed"
                ],
                "test_is_non_overlapping_monotonic": [
                    "self",
                    "closed"
                ],
                "test_is_overlapping": [
                    "self",
                    "start",
                    "shift",
                    "na_value",
                    "closed"
                ],
                "test_to_tuples": [
                    "self",
                    "tuples"
                ],
                "test_to_tuples_na": [
                    "self",
                    "tuples",
                    "na_tuple"
                ],
                "test_nbytes": [
                    "self"
                ],
                "test_set_closed": [
                    "self",
                    "name",
                    "closed",
                    "new_closed"
                ],
                "test_set_closed_errors": [
                    "self",
                    "bad_closed"
                ],
                "test_is_all_dates": [
                    "self"
                ],
                "test_get_value_non_scalar_errors": [
                    "self",
                    "key"
                ]
            }
        },
        "pandas.tests.indexes.interval.test_astype": {
            "Base": {
                "test_astype_idempotent": [
                    "self",
                    "index"
                ],
                "test_astype_object": [
                    "self",
                    "index"
                ],
                "test_astype_category": [
                    "self",
                    "index"
                ],
                "test_astype_cannot_cast": [
                    "self",
                    "index",
                    "dtype"
                ],
                "test_astype_invalid_dtype": [
                    "self",
                    "index"
                ]
            },
            "TestIntSubtype": {
                "index": [
                    "self",
                    "request"
                ],
                "test_subtype_conversion": [
                    "self",
                    "index",
                    "subtype"
                ],
                "test_subtype_integer": [
                    "self",
                    "subtype_start",
                    "subtype_end"
                ],
                "test_subtype_integer_errors": [
                    "self"
                ]
            },
            "TestFloatSubtype": {
                "index": [
                    "self",
                    "request"
                ],
                "test_subtype_integer": [
                    "self",
                    "subtype"
                ],
                "test_subtype_integer_errors": [
                    "self"
                ],
                "test_subtype_datetimelike": [
                    "self",
                    "index",
                    "subtype"
                ]
            },
            "TestDatetimelikeSubtype": {
                "index": [
                    "self",
                    "request"
                ],
                "test_subtype_integer": [
                    "self",
                    "index",
                    "subtype"
                ],
                "test_subtype_float": [
                    "self",
                    "index"
                ],
                "test_subtype_datetimelike": [
                    "self"
                ]
            }
        },
        "pandas.tests.indexes.interval.test_formats": {
            "TestIntervalIndexRendering": {
                "test_frame_repr": [
                    "self"
                ],
                "test_repr_missing": [
                    "self",
                    "constructor",
                    "expected"
                ],
                "test_to_native_types": [
                    "self",
                    "tuples",
                    "closed",
                    "expected_data"
                ]
            }
        },
        "pandas.tests.indexes.interval.test_interval_tree": {
            "skipif_32bit": [
                "param"
            ],
            "dtype": [
                "request"
            ],
            "leaf_size": [
                "request"
            ],
            "tree": [
                "request",
                "leaf_size"
            ],
            "TestIntervalTree": {
                "test_get_indexer": [
                    "self",
                    "tree"
                ],
                "test_get_indexer_overflow": [
                    "self",
                    "dtype",
                    "target_value",
                    "target_dtype"
                ],
                "test_get_indexer_non_unique": [
                    "self",
                    "tree"
                ],
                "test_get_indexer_non_unique_overflow": [
                    "self",
                    "dtype",
                    "target_value",
                    "target_dtype"
                ],
                "test_duplicates": [
                    "self",
                    "dtype"
                ],
                "test_get_indexer_closed": [
                    "self",
                    "closed",
                    "leaf_size"
                ],
                "test_is_overlapping": [
                    "self",
                    "closed",
                    "order",
                    "left",
                    "right",
                    "expected"
                ],
                "test_is_overlapping_endpoints": [
                    "self",
                    "closed",
                    "order"
                ],
                "test_is_overlapping_trivial": [
                    "self",
                    "closed",
                    "left",
                    "right"
                ],
                "test_construction_overflow": [
                    "self"
                ]
            }
        },
        "pandas.tests.indexes.interval.test_constructors": {
            "name": [
                "request"
            ],
            "Base": {
                "test_constructor": [
                    "self",
                    "constructor",
                    "breaks",
                    "closed",
                    "name"
                ],
                "test_constructor_dtype": [
                    "self",
                    "constructor",
                    "breaks",
                    "subtype"
                ],
                "test_constructor_nan": [
                    "self",
                    "constructor",
                    "breaks",
                    "closed"
                ],
                "test_constructor_empty": [
                    "self",
                    "constructor",
                    "breaks",
                    "closed"
                ],
                "test_constructor_string": [
                    "self",
                    "constructor",
                    "breaks"
                ],
                "test_constructor_categorical_valid": [
                    "self",
                    "constructor",
                    "cat_constructor"
                ],
                "test_generic_errors": [
                    "self",
                    "constructor"
                ]
            },
            "TestFromArrays": {
                "constructor": [
                    "self"
                ],
                "get_kwargs_from_breaks": [
                    "self",
                    "breaks",
                    "closed"
                ],
                "test_constructor_errors": [
                    "self"
                ],
                "test_mixed_float_int": [
                    "self",
                    "left_subtype",
                    "right_subtype"
                ]
            },
            "TestFromBreaks": {
                "constructor": [
                    "self"
                ],
                "get_kwargs_from_breaks": [
                    "self",
                    "breaks",
                    "closed"
                ],
                "test_constructor_errors": [
                    "self"
                ],
                "test_length_one": [
                    "self"
                ]
            },
            "TestFromTuples": {
                "constructor": [
                    "self"
                ],
                "get_kwargs_from_breaks": [
                    "self",
                    "breaks",
                    "closed"
                ],
                "test_constructor_errors": [
                    "self"
                ],
                "test_na_tuples": [
                    "self"
                ]
            },
            "TestClassConstructors": {
                "constructor": [
                    "self",
                    "request"
                ],
                "get_kwargs_from_breaks": [
                    "self",
                    "breaks",
                    "closed"
                ],
                "test_generic_errors": [
                    "self",
                    "constructor"
                ],
                "test_constructor_string": [
                    "self"
                ],
                "test_constructor_errors": [
                    "self",
                    "constructor"
                ],
                "test_override_inferred_closed": [
                    "self",
                    "constructor",
                    "data",
                    "closed"
                ],
                "test_index_object_dtype": [
                    "self",
                    "values_constructor"
                ],
                "test_index_mixed_closed": [
                    "self"
                ]
            }
        },
        "pandas.tests.indexes.interval.test_indexing": {
            "TestGetLoc": {
                "test_get_loc_interval": [
                    "self",
                    "closed",
                    "side"
                ],
                "test_get_loc_scalar": [
                    "self",
                    "closed",
                    "scalar"
                ],
                "test_get_loc_length_one_scalar": [
                    "self",
                    "scalar",
                    "closed"
                ],
                "test_get_loc_length_one_interval": [
                    "self",
                    "left",
                    "right",
                    "closed",
                    "other_closed"
                ],
                "test_get_loc_datetimelike_nonoverlapping": [
                    "self",
                    "breaks"
                ],
                "test_get_loc_datetimelike_overlapping": [
                    "self",
                    "arrays"
                ],
                "test_get_loc_decreasing": [
                    "self",
                    "values"
                ],
                "test_get_loc_non_scalar_errors": [
                    "self",
                    "key"
                ]
            },
            "TestGetIndexer": {
                "test_get_indexer_with_interval": [
                    "self",
                    "query",
                    "expected"
                ],
                "test_get_indexer_with_int_and_float": [
                    "self",
                    "query",
                    "expected"
                ],
                "test_get_indexer_length_one": [
                    "self",
                    "item",
                    "closed"
                ],
                "test_get_indexer_length_one_interval": [
                    "self",
                    "size",
                    "closed"
                ],
                "test_get_indexer_categorical": [
                    "self",
                    "target",
                    "ordered"
                ],
                "test_get_indexer_errors": [
                    "self",
                    "tuples",
                    "closed"
                ],
                "test_get_indexer_non_unique_with_int_and_float": [
                    "self",
                    "query",
                    "expected"
                ],
                "test_get_indexer_non_monotonic": [
                    "self"
                ]
            },
            "TestSliceLocs": {
                "test_slice_locs_with_interval": [
                    "self"
                ],
                "test_slice_locs_with_ints_and_floats_succeeds": [
                    "self"
                ],
                "test_slice_locs_with_ints_and_floats_errors": [
                    "self",
                    "tuples",
                    "query"
                ]
            }
        },
        "pandas.tests.indexes.interval": {},
        "pandas.tests.indexes.multi.test_lexsort": {
            "TestIsLexsorted": {
                "test_is_lexsorted": [
                    "self"
                ]
            },
            "TestLexsortDepth": {
                "test_lexsort_depth": [
                    "self"
                ]
            }
        },
        "pandas.tests.indexes.multi.test_sorting": {
            "test_sortlevel": [
                "idx"
            ],
            "test_sortlevel_not_sort_remaining": [],
            "test_sortlevel_deterministic": [],
            "test_numpy_argsort": [
                "idx"
            ],
            "test_unsortedindex": [],
            "test_unsortedindex_doc_examples": [],
            "test_reconstruct_sort": [],
            "test_reconstruct_remove_unused": [],
            "test_remove_unused_levels_large": [
                "first_type",
                "second_type"
            ],
            "test_remove_unused_nan": [
                "level0",
                "level1"
            ],
            "test_argsort": [
                "idx"
            ]
        },
        "pandas.tests.indexes.multi.test_partial_indexing": {
            "df": [],
            "test_partial_string_matching_single_index": [
                "df"
            ],
            "test_partial_string_timestamp_multiindex": [
                "df"
            ],
            "test_partial_string_timestamp_multiindex_str_key_raises": [
                "df"
            ],
            "test_partial_string_timestamp_multiindex_daily_resolution": [
                "df"
            ]
        },
        "pandas.tests.indexes.multi.test_reshape": {
            "test_insert": [
                "idx"
            ],
            "test_append": [
                "idx"
            ],
            "test_append_index": [],
            "test_repeat": [],
            "test_insert_base": [
                "idx"
            ],
            "test_delete_base": [
                "idx"
            ]
        },
        "pandas.tests.indexes.multi.test_get_set": {
            "assert_matching": [
                "actual",
                "expected",
                "check_dtype"
            ],
            "test_get_level_number_integer": [
                "idx"
            ],
            "test_set_name_methods": [
                "idx",
                "index_names"
            ],
            "test_set_levels_codes_directly": [
                "idx"
            ],
            "test_set_levels": [
                "idx"
            ],
            "test_set_codes": [
                "idx"
            ],
            "test_set_levels_codes_names_bad_input": [
                "idx"
            ],
            "test_set_names_with_nlevel_1": [
                "inplace"
            ],
            "test_set_levels_categorical": [
                "ordered"
            ],
            "test_set_value_keeps_names": [],
            "test_set_levels_with_iterable": []
        },
        "pandas.tests.indexes.multi.test_get_level_values": {
            "test_get_level_values": [
                "idx"
            ],
            "test_get_level_values_all_na": [],
            "test_get_level_values_int_with_na": [],
            "test_get_level_values_na": [],
            "test_get_level_values_when_periods": [],
            "TestGetLevelValues": {
                "test_get_level_values_box_datetime64": [
                    "self"
                ]
            }
        },
        "pandas.tests.indexes.multi.test_reindex": {
            "test_reindex": [
                "idx"
            ],
            "test_reindex_level": [
                "idx"
            ],
            "test_reindex_preserves_names_when_target_is_list_or_ndarray": [
                "idx"
            ],
            "test_reindex_lvl_preserves_names_when_target_is_list_or_array": [],
            "test_reindex_lvl_preserves_type_if_target_is_empty_list_or_array": [],
            "test_reindex_base": [
                "idx"
            ],
            "test_reindex_non_unique": []
        },
        "pandas.tests.indexes.multi.test_copy": {
            "assert_multiindex_copied": [
                "copy",
                "original"
            ],
            "test_copy": [
                "idx"
            ],
            "test_shallow_copy": [
                "idx"
            ],
            "test_view": [
                "idx"
            ],
            "test_copy_and_deepcopy": [
                "func"
            ],
            "test_copy_method": [
                "deep"
            ],
            "test_copy_method_kwargs": [
                "deep",
                "kwarg",
                "value"
            ]
        },
        "pandas.tests.indexes.multi.test_setops": {
            "test_set_ops_error_cases": [
                "idx",
                "case",
                "sort",
                "method"
            ],
            "test_intersection_base": [
                "idx",
                "sort",
                "klass"
            ],
            "test_union_base": [
                "idx",
                "sort",
                "klass"
            ],
            "test_difference_base": [
                "idx",
                "sort"
            ],
            "test_symmetric_difference": [
                "idx",
                "sort"
            ],
            "test_multiindex_symmetric_difference": [],
            "test_empty": [
                "idx"
            ],
            "test_difference": [
                "idx",
                "sort"
            ],
            "test_difference_sort_special": [],
            "test_difference_sort_special_true": [],
            "test_difference_sort_incomparable": [],
            "test_difference_sort_incomparable_true": [],
            "test_union": [
                "idx",
                "sort"
            ],
            "test_intersection": [
                "idx",
                "sort"
            ],
            "test_intersect_equal_sort": [],
            "test_intersect_equal_sort_true": [],
            "test_union_sort_other_empty": [
                "slice_"
            ],
            "test_union_sort_other_empty_sort": [
                "slice_"
            ],
            "test_union_sort_other_incomparable": [],
            "test_union_sort_other_incomparable_sort": [],
            "test_union_non_object_dtype_raises": [],
            "test_setops_disallow_true": [
                "method"
            ]
        },
        "pandas.tests.indexes.multi.test_drop": {
            "test_drop": [
                "idx"
            ],
            "test_droplevel_with_names": [
                "idx"
            ],
            "test_droplevel_list": [],
            "test_drop_not_lexsorted": []
        },
        "pandas.tests.indexes.multi.test_monotonic": {
            "test_is_monotonic_increasing": [],
            "test_is_monotonic_decreasing": [],
            "test_is_strictly_monotonic_increasing": [],
            "test_is_strictly_monotonic_decreasing": []
        },
        "pandas.tests.indexes.multi.test_integrity": {
            "test_labels_dtypes": [],
            "test_values_boxed": [],
            "test_values_multiindex_datetimeindex": [],
            "test_values_multiindex_periodindex": [],
            "test_consistency": [],
            "test_hash_collisions": [],
            "test_dims": [],
            "take_invalid_kwargs": [],
            "test_isna_behavior": [
                "idx"
            ],
            "test_large_multiindex_error": [],
            "test_million_record_attribute_error": [],
            "test_can_hold_identifiers": [
                "idx"
            ],
            "test_metadata_immutable": [
                "idx"
            ],
            "test_level_setting_resets_attributes": [],
            "test_rangeindex_fallback_coercion_bug": [],
            "test_memory_usage": [
                "idx"
            ],
            "test_nlevels": [
                "idx"
            ]
        },
        "pandas.tests.indexes.multi.test_astype": {
            "test_astype": [
                "idx"
            ],
            "test_astype_category": [
                "idx",
                "ordered"
            ]
        },
        "pandas.tests.indexes.multi.test_formats": {
            "test_format": [
                "idx"
            ],
            "test_format_integer_names": [],
            "test_format_sparse_config": [
                "idx"
            ],
            "test_format_sparse_display": [],
            "test_repr_with_unicode_data": [],
            "test_repr_roundtrip_raises": [],
            "test_unicode_string_with_unicode": [],
            "test_repr_max_seq_item_setting": [
                "idx"
            ],
            "TestRepr": {
                "test_unicode_repr_issues": [
                    "self"
                ],
                "test_repr": [
                    "self",
                    "idx"
                ],
                "test_rjust": [
                    "self",
                    "narrow_multi_index"
                ],
                "test_tuple_width": [
                    "self",
                    "wide_multi_index"
                ]
            }
        },
        "pandas.tests.indexes.multi.test_compat": {
            "test_numeric_compat": [
                "idx"
            ],
            "test_logical_compat": [
                "idx",
                "method"
            ],
            "test_boolean_context_compat": [
                "idx"
            ],
            "test_boolean_context_compat2": [],
            "test_inplace_mutation_resets_values": [],
            "test_ndarray_compat_properties": [
                "idx",
                "compat_props"
            ],
            "test_pickle_compat_construction": []
        },
        "pandas.tests.indexes.multi.test_join": {
            "test_join_level": [
                "idx",
                "other",
                "join_type"
            ],
            "test_join_level_corner_case": [
                "idx"
            ],
            "test_join_self": [
                "idx",
                "join_type"
            ],
            "test_join_multi": [],
            "test_join_self_unique": [
                "idx",
                "join_type"
            ],
            "test_join_multi_wrong_order": [],
            "test_join_multi_return_indexers": []
        },
        "pandas.tests.indexes.multi.test_constructors": {
            "test_constructor_single_level": [],
            "test_constructor_no_levels": [],
            "test_constructor_nonhashable_names": [],
            "test_constructor_mismatched_codes_levels": [
                "idx"
            ],
            "test_na_levels": [],
            "test_copy_in_constructor": [],
            "test_from_arrays": [
                "idx"
            ],
            "test_from_arrays_iterator": [
                "idx"
            ],
            "test_from_arrays_tuples": [
                "idx"
            ],
            "test_from_arrays_index_series_datetimetz": [],
            "test_from_arrays_index_series_timedelta": [],
            "test_from_arrays_index_series_period": [],
            "test_from_arrays_index_datetimelike_mixed": [],
            "test_from_arrays_index_series_categorical": [],
            "test_from_arrays_empty": [],
            "test_from_arrays_invalid_input": [
                "invalid_sequence_of_arrays"
            ],
            "test_from_arrays_different_lengths": [
                "idx1",
                "idx2"
            ],
            "test_from_arrays_respects_none_names": [],
            "test_from_tuples": [],
            "test_from_tuples_iterator": [],
            "test_from_tuples_empty": [],
            "test_from_tuples_index_values": [
                "idx"
            ],
            "test_tuples_with_name_string": [],
            "test_from_tuples_with_tuple_label": [],
            "test_from_product_empty_zero_levels": [],
            "test_from_product_empty_one_level": [],
            "test_from_product_empty_two_levels": [
                "first",
                "second"
            ],
            "test_from_product_empty_three_levels": [
                "N"
            ],
            "test_from_product_invalid_input": [
                "invalid_input"
            ],
            "test_from_product_datetimeindex": [],
            "test_from_product_index_series_categorical": [
                "ordered",
                "f"
            ],
            "test_from_product": [],
            "test_from_product_iterator": [],
            "test_from_product_infer_names": [
                "a",
                "b",
                "expected_names"
            ],
            "test_from_product_respects_none_names": [],
            "test_from_product_readonly": [],
            "test_create_index_existing_name": [
                "idx"
            ],
            "test_from_frame": [],
            "test_from_frame_error": [
                "non_frame"
            ],
            "test_from_frame_dtype_fidelity": [],
            "test_from_frame_valid_names": [
                "names_in",
                "names_out"
            ],
            "test_from_frame_invalid_names": [
                "names",
                "expected_error_msg"
            ],
            "test_index_equal_empty_iterable": [],
            "test_raise_invalid_sortorder": [],
            "test_datetimeindex": [],
            "test_constructor_with_tz": []
        },
        "pandas.tests.indexes.multi.test_equivalence": {
            "test_equals": [
                "idx"
            ],
            "test_equals_op": [
                "idx"
            ],
            "test_equals_multi": [
                "idx"
            ],
            "test_identical": [
                "idx"
            ],
            "test_equals_operator": [
                "idx"
            ],
            "test_equals_missing_values": [],
            "test_is_": [],
            "test_is_all_dates": [
                "idx"
            ],
            "test_is_numeric": [
                "idx"
            ],
            "test_multiindex_compare": []
        },
        "pandas.tests.indexes.multi.test_duplicates": {
            "test_unique": [
                "names"
            ],
            "test_unique_datetimelike": [],
            "test_unique_level": [
                "idx",
                "level"
            ],
            "test_get_unique_index": [
                "idx",
                "dropna"
            ],
            "test_duplicate_multiindex_codes": [],
            "test_duplicate_level_names": [
                "names"
            ],
            "test_duplicate_meta_data": [],
            "test_has_duplicates": [
                "idx",
                "idx_dup"
            ],
            "test_has_duplicates_from_tuples": [],
            "test_has_duplicates_overflow": [],
            "test_duplicated": [
                "idx_dup",
                "keep",
                "expected"
            ],
            "test_duplicated_large": [
                "keep"
            ],
            "test_duplicated2": [],
            "test_duplicated_drop_duplicates": []
        },
        "pandas.tests.indexes.multi.test_indexing": {
            "test_putmask_with_wrong_mask": [
                "idx"
            ],
            "test_getitem": [
                "idx"
            ],
            "test_getitem_group_select": [
                "idx"
            ],
            "test_getitem_bool_index_all": [
                "ind1",
                "ind2"
            ],
            "test_getitem_bool_index_single": [
                "ind1",
                "ind2"
            ],
            "test_timestamp_multiindex_indexer": [],
            "test_get_slice_bound_with_missing_value": [
                "index_arr",
                "expected",
                "target",
                "algo"
            ],
            "test_slice_indexer_with_missing_value": [
                "index_arr",
                "expected",
                "start_idx",
                "end_idx"
            ],
            "test_pyint_engine": [],
            "TestSliceLocs": {
                "test_slice_locs_partial": [
                    "self",
                    "idx"
                ],
                "test_slice_locs": [
                    "self"
                ],
                "test_slice_locs_with_type_mismatch": [
                    "self"
                ],
                "test_slice_locs_not_sorted": [
                    "self"
                ],
                "test_slice_locs_not_contained": [
                    "self"
                ],
                "test_slice_locs_with_missing_value": [
                    "self",
                    "index_arr",
                    "expected",
                    "start_idx",
                    "end_idx"
                ]
            },
            "TestGetIndexer": {
                "test_get_indexer": [
                    "self"
                ],
                "test_get_indexer_nearest": [
                    "self"
                ],
                "test_get_indexer_categorical_time": [
                    "self"
                ],
                "test_get_indexer_with_missing_value": [
                    "self",
                    "index_arr",
                    "labels",
                    "expected"
                ],
                "test_get_indexer_methods": [
                    "self"
                ],
                "test_get_indexer_three_or_more_levels": [
                    "self"
                ],
                "test_get_indexer_crossing_levels": [
                    "self"
                ]
            },
            "TestGetLoc": {
                "test_get_loc": [
                    "self",
                    "idx"
                ],
                "test_get_loc_duplicates": [
                    "self"
                ],
                "test_get_loc_level": [
                    "self"
                ],
                "test_get_loc_multiple_dtypes": [
                    "self",
                    "dtype1",
                    "dtype2"
                ],
                "test_get_loc_implicit_cast": [
                    "self",
                    "level",
                    "dtypes"
                ],
                "test_get_loc_cast_bool": [
                    "self"
                ],
                "test_get_loc_nan": [
                    "self",
                    "level",
                    "nulls_fixture"
                ],
                "test_get_loc_missing_nan": [
                    "self"
                ],
                "test_get_loc_with_values_including_missing_values": [
                    "self"
                ],
                "test_get_loc_duplicates2": [
                    "self"
                ]
            },
            "TestWhere": {
                "test_where": [
                    "self"
                ],
                "test_where_array_like": [
                    "self",
                    "klass"
                ]
            },
            "TestContains": {
                "test_contains_top_level": [
                    "self"
                ],
                "test_contains_with_nat": [
                    "self"
                ],
                "test_contains": [
                    "self",
                    "idx"
                ],
                "test_contains_with_missing_value": [
                    "self"
                ],
                "test_multiindex_contains_dropped": [
                    "self"
                ],
                "test_contains_td64_level": [
                    "self"
                ],
                "test_large_mi_contains": [
                    "self"
                ]
            }
        },
        "pandas.tests.indexes.multi.test_conversion": {
            "test_to_numpy": [
                "idx"
            ],
            "test_to_frame": [],
            "test_to_frame_dtype_fidelity": [],
            "test_to_frame_resulting_column_order": [],
            "test_to_flat_index": [
                "idx"
            ]
        },
        "pandas.tests.indexes.multi.test_take": {
            "test_take": [
                "idx"
            ],
            "test_take_invalid_kwargs": [
                "idx"
            ],
            "test_take_fill_value": []
        },
        "pandas.tests.indexes.multi.conftest": {
            "idx": [],
            "idx_dup": [],
            "index_names": [],
            "compat_props": [],
            "narrow_multi_index": [],
            "wide_multi_index": []
        },
        "pandas.tests.indexes.multi.test_isin": {
            "test_isin_nan_pypy": [],
            "test_isin": [],
            "test_isin_nan_not_pypy": [],
            "test_isin_level_kwarg": [],
            "test_isin_multi_index_with_missing_value": [
                "labels",
                "expected",
                "level"
            ]
        },
        "pandas.tests.indexes.multi.test_analytics": {
            "test_shift": [
                "idx"
            ],
            "test_groupby": [
                "idx"
            ],
            "test_truncate_multiindex": [],
            "test_reorder_levels": [
                "idx"
            ],
            "test_numpy_repeat": [],
            "test_append_mixed_dtypes": [],
            "test_iter": [
                "idx"
            ],
            "test_sub": [
                "idx"
            ],
            "test_map": [
                "idx"
            ],
            "test_map_dictlike": [
                "idx",
                "mapper"
            ],
            "test_numpy_ufuncs": [
                "idx",
                "func"
            ],
            "test_numpy_type_funcs": [
                "idx",
                "func"
            ]
        },
        "pandas.tests.indexes.multi.test_names": {
            "check_level_names": [
                "index",
                "names"
            ],
            "test_slice_keep_name": [],
            "test_index_name_retained": [],
            "test_changing_names": [
                "idx"
            ],
            "test_take_preserve_name": [
                "idx"
            ],
            "test_copy_names": [],
            "test_names": [
                "idx",
                "index_names"
            ],
            "test_duplicate_level_names_access_raises": [
                "idx"
            ],
            "test_get_names_from_levels": [],
            "test_setting_names_from_levels_raises": []
        },
        "pandas.tests.indexes.multi.test_missing": {
            "test_fillna": [
                "idx"
            ],
            "test_dropna": [],
            "test_nulls": [
                "idx"
            ],
            "test_hasnans_isnans": [
                "idx"
            ],
            "test_nan_stays_float": [],
            "test_tuples_have_na": []
        },
        "pandas.tests.indexes.multi": {},
        "pandas.tests.indexes.ranges.test_range": {
            "TestRangeIndex": {
                "index": [
                    "self",
                    "request"
                ],
                "create_index": [
                    "self"
                ],
                "test_can_hold_identifiers": [
                    "self"
                ],
                "test_too_many_names": [
                    "self"
                ],
                "test_start_stop_step_attrs": [
                    "self",
                    "index",
                    "start",
                    "stop",
                    "step"
                ],
                "test_deprecated_start_stop_step_attrs": [
                    "self",
                    "attr_name"
                ],
                "test_copy": [
                    "self"
                ],
                "test_repr": [
                    "self"
                ],
                "test_insert": [
                    "self"
                ],
                "test_delete": [
                    "self"
                ],
                "test_view": [
                    "self"
                ],
                "test_dtype": [
                    "self"
                ],
                "test_cached_data": [
                    "self"
                ],
                "test_is_monotonic": [
                    "self"
                ],
                "test_equals_range": [
                    "self"
                ],
                "test_logical_compat": [
                    "self"
                ],
                "test_identical": [
                    "self"
                ],
                "test_nbytes": [
                    "self"
                ],
                "test_cant_or_shouldnt_cast": [
                    "self",
                    "start",
                    "stop",
                    "step"
                ],
                "test_view_index": [
                    "self"
                ],
                "test_prevent_casting": [
                    "self"
                ],
                "test_repr_roundtrip": [
                    "self"
                ],
                "test_slice_keep_name": [
                    "self"
                ],
                "test_explicit_conversions": [
                    "self"
                ],
                "test_has_duplicates": [
                    "self",
                    "index"
                ],
                "test_extended_gcd": [
                    "self"
                ],
                "test_min_fitting_element": [
                    "self"
                ],
                "test_max_fitting_element": [
                    "self"
                ],
                "test_pickle_compat_construction": [
                    "self"
                ],
                "test_slice_specialised": [
                    "self"
                ],
                "test_len_specialised": [
                    "self",
                    "step"
                ],
                "appends": [
                    "self",
                    "request"
                ],
                "test_append": [
                    "self",
                    "appends"
                ],
                "test_engineless_lookup": [
                    "self"
                ]
            }
        },
        "pandas.tests.indexes.ranges.test_setops": {
            "TestRangeIndexSetOps": {
                "test_intersection": [
                    "self",
                    "sort"
                ],
                "test_union_noncomparable": [
                    "self",
                    "sort"
                ],
                "unions": [
                    "self",
                    "request"
                ],
                "test_union_sorted": [
                    "self",
                    "unions"
                ]
            }
        },
        "pandas.tests.indexes.ranges.test_join": {
            "TestJoin": {
                "test_join_outer": [
                    "self"
                ],
                "test_join_inner": [
                    "self"
                ],
                "test_join_left": [
                    "self"
                ],
                "test_join_right": [
                    "self"
                ],
                "test_join_non_int_index": [
                    "self"
                ],
                "test_join_non_unique": [
                    "self"
                ],
                "test_join_self": [
                    "self",
                    "join_type"
                ]
            }
        },
        "pandas.tests.indexes.ranges.test_constructors": {
            "TestRangeIndexConstructors": {
                "test_constructor": [
                    "self",
                    "args",
                    "kwargs",
                    "start",
                    "stop",
                    "step",
                    "name"
                ],
                "test_constructor_invalid_args": [
                    "self"
                ],
                "test_constructor_additional_invalid_args": [
                    "self",
                    "args"
                ],
                "test_constructor_invalid_args_wrong_type": [
                    "self",
                    "args"
                ],
                "test_constructor_same": [
                    "self"
                ],
                "test_constructor_range": [
                    "self"
                ],
                "test_constructor_name": [
                    "self"
                ],
                "test_constructor_corner": [
                    "self"
                ]
            }
        },
        "pandas.tests.indexes.ranges.test_indexing": {
            "TestGetIndexer": {
                "test_get_indexer": [
                    "self"
                ],
                "test_get_indexer_pad": [
                    "self"
                ],
                "test_get_indexer_backfill": [
                    "self"
                ],
                "test_get_indexer_limit": [
                    "self"
                ],
                "test_get_indexer_decreasing": [
                    "self",
                    "stop"
                ]
            },
            "TestTake": {
                "test_take_preserve_name": [
                    "self"
                ],
                "test_take_fill_value": [
                    "self"
                ]
            }
        },
        "pandas.tests.indexes.ranges": {},
        "pandas.tests.indexes.categorical.test_category": {
            "TestCategoricalIndex": {
                "index": [
                    "self",
                    "request"
                ],
                "create_index": [
                    "self",
                    "categories",
                    "ordered"
                ],
                "test_can_hold_identifiers": [
                    "self"
                ],
                "test_disallow_addsub_ops": [
                    "self",
                    "func",
                    "op_name"
                ],
                "test_method_delegation": [
                    "self"
                ],
                "test_append": [
                    "self"
                ],
                "test_append_to_another": [
                    "self"
                ],
                "test_insert": [
                    "self"
                ],
                "test_delete": [
                    "self"
                ],
                "test_is_monotonic": [
                    "self",
                    "data",
                    "non_lexsorted_data"
                ],
                "test_has_duplicates": [
                    "self"
                ],
                "test_drop_duplicates": [
                    "self",
                    "data",
                    "categories",
                    "expected"
                ],
                "test_unique": [
                    "self",
                    "data",
                    "categories",
                    "expected_data",
                    "expected_categories"
                ],
                "test_repr_roundtrip": [
                    "self"
                ],
                "test_isin": [
                    "self"
                ],
                "test_identical": [
                    "self"
                ],
                "test_ensure_copied_data": [
                    "self",
                    "index"
                ],
                "test_equals_categorical": [
                    "self"
                ],
                "test_equals_categorical_unordered": [
                    "self"
                ],
                "test_frame_repr": [
                    "self"
                ],
                "test_engine_type": [
                    "self",
                    "dtype",
                    "engine_type"
                ],
                "test_reindex_base": [
                    "self"
                ],
                "test_map_str": [
                    "self"
                ],
                "test_format_different_scalar_lengths": [
                    "self"
                ]
            }
        },
        "pandas.tests.indexes.categorical.test_map": {
            "TestMap": {
                "test_map_str": [
                    "self",
                    "data",
                    "categories",
                    "ordered"
                ],
                "test_map": [
                    "self"
                ],
                "test_map_with_categorical_series": [
                    "self"
                ],
                "test_map_with_nan": [
                    "self",
                    "data",
                    "f"
                ]
            }
        },
        "pandas.tests.indexes.categorical.test_reindex": {
            "TestReindex": {
                "test_reindex_dtype": [
                    "self"
                ],
                "test_reindex_duplicate_target": [
                    "self"
                ],
                "test_reindex_empty_index": [
                    "self"
                ]
            }
        },
        "pandas.tests.indexes.categorical.test_astype": {
            "TestAstype": {
                "test_astype": [
                    "self"
                ],
                "test_astype_category": [
                    "self",
                    "name",
                    "dtype_ordered",
                    "index_ordered"
                ]
            }
        },
        "pandas.tests.indexes.categorical.test_formats": {
            "TestCategoricalIndexRepr": {
                "test_string_categorical_index_repr": [
                    "self"
                ]
            }
        },
        "pandas.tests.indexes.categorical.test_fillna": {
            "TestFillNA": {
                "test_fillna_categorical": [
                    "self"
                ]
            }
        },
        "pandas.tests.indexes.categorical.test_constructors": {
            "TestCategoricalIndexConstructors": {
                "test_construction": [
                    "self"
                ],
                "test_construction_with_dtype": [
                    "self"
                ],
                "test_construction_empty_with_bool_categories": [
                    "self"
                ],
                "test_construction_with_categorical_dtype": [
                    "self"
                ]
            }
        },
        "pandas.tests.indexes.categorical.test_indexing": {
            "TestTake": {
                "test_take_fill_value": [
                    "self"
                ],
                "test_take_fill_value_datetime": [
                    "self"
                ],
                "test_take_invalid_kwargs": [
                    "self"
                ]
            },
            "TestGetLoc": {
                "test_get_loc": [
                    "self"
                ],
                "test_get_loc_unique": [
                    "self"
                ],
                "test_get_loc_monotonic_nonunique": [
                    "self"
                ],
                "test_get_loc_nonmonotonic_nonunique": [
                    "self"
                ]
            },
            "TestGetIndexer": {
                "test_get_indexer_base": [
                    "self"
                ],
                "test_get_indexer_non_unique": [
                    "self"
                ],
                "test_get_indexer": [
                    "self"
                ]
            },
            "TestWhere": {
                "test_where": [
                    "self",
                    "klass"
                ]
            },
            "TestContains": {
                "test_contains": [
                    "self"
                ],
                "test_contains_nan": [
                    "self"
                ],
                "test_contains_na_dtype": [
                    "self",
                    "unwrap"
                ],
                "test_contains_interval": [
                    "self",
                    "item",
                    "expected"
                ],
                "test_contains_list": [
                    "self"
                ]
            }
        },
        "pandas.tests.indexes.categorical": {},
        "pandas.tests.indexes.timedeltas.test_scalar_compat": {
            "TestVectorizedTimedelta": {
                "test_tdi_total_seconds": [
                    "self"
                ],
                "test_tdi_round": [
                    "self"
                ],
                "test_tdi_round_invalid": [
                    "self",
                    "freq",
                    "msg"
                ],
                "test_round": [
                    "self"
                ],
                "test_components": [
                    "self"
                ]
            }
        },
        "pandas.tests.indexes.timedeltas.test_delete": {
            "TestTimedeltaIndexDelete": {
                "test_delete": [
                    "self"
                ],
                "test_delete_slice": [
                    "self"
                ],
                "test_delete_doesnt_infer_freq": [
                    "self"
                ]
            }
        },
        "pandas.tests.indexes.timedeltas.test_searchsorted": {
            "TestSearchSorted": {
                "test_searchsorted_different_argument_classes": [
                    "self",
                    "klass"
                ],
                "test_searchsorted_invalid_argument_dtype": [
                    "self",
                    "arg"
                ]
            }
        },
        "pandas.tests.indexes.timedeltas.test_setops": {
            "TestTimedeltaIndex": {
                "test_union": [
                    "self"
                ],
                "test_union_sort_false": [
                    "self"
                ],
                "test_union_coverage": [
                    "self"
                ],
                "test_union_bug_1730": [
                    "self"
                ],
                "test_union_bug_1745": [
                    "self"
                ],
                "test_union_bug_4564": [
                    "self"
                ],
                "test_union_freq_infer": [
                    "self"
                ],
                "test_intersection_bug_1708": [
                    "self"
                ],
                "test_intersection_equal": [
                    "self",
                    "sort"
                ],
                "test_intersection_zero_length": [
                    "self",
                    "period_1",
                    "period_2",
                    "sort"
                ],
                "test_zero_length_input_index": [
                    "self",
                    "sort"
                ],
                "test_intersection": [
                    "self",
                    "rng",
                    "expected",
                    "sort"
                ],
                "test_intersection_non_monotonic": [
                    "self",
                    "rng",
                    "expected",
                    "sort"
                ]
            },
            "TestTimedeltaIndexDifference": {
                "test_difference_freq": [
                    "self",
                    "sort"
                ],
                "test_difference_sort": [
                    "self",
                    "sort"
                ]
            }
        },
        "pandas.tests.indexes.timedeltas.test_ops": {
            "TestTimedeltaIndexOps": {
                "test_value_counts_unique": [
                    "self"
                ],
                "test_nonunique_contains": [
                    "self"
                ],
                "test_unknown_attribute": [
                    "self"
                ],
                "test_order": [
                    "self"
                ],
                "test_drop_duplicates_metadata": [
                    "self",
                    "freq_sample"
                ],
                "test_drop_duplicates": [
                    "self",
                    "freq_sample",
                    "keep",
                    "expected",
                    "index"
                ],
                "test_infer_freq": [
                    "self",
                    "freq_sample"
                ],
                "test_repeat": [
                    "self"
                ],
                "test_nat": [
                    "self"
                ],
                "test_equals": [
                    "self"
                ],
                "test_freq_setter": [
                    "self",
                    "values",
                    "freq"
                ],
                "test_freq_setter_errors": [
                    "self"
                ],
                "test_freq_view_safe": [
                    "self"
                ]
            }
        },
        "pandas.tests.indexes.timedeltas.test_astype": {
            "TestTimedeltaIndex": {
                "test_astype_object": [
                    "self"
                ],
                "test_astype_object_with_nat": [
                    "self"
                ],
                "test_astype": [
                    "self"
                ],
                "test_astype_uint": [
                    "self"
                ],
                "test_astype_timedelta64": [
                    "self"
                ],
                "test_astype_raises": [
                    "self",
                    "dtype"
                ],
                "test_astype_category": [
                    "self"
                ],
                "test_astype_array_fallback": [
                    "self"
                ]
            }
        },
        "pandas.tests.indexes.timedeltas.test_formats": {
            "TestTimedeltaIndexRendering": {
                "test_representation": [
                    "self",
                    "method"
                ],
                "test_representation_to_series": [
                    "self"
                ],
                "test_summary": [
                    "self"
                ]
            }
        },
        "pandas.tests.indexes.timedeltas.test_partial_slicing": {
            "TestSlicing": {
                "test_partial_slice": [
                    "self"
                ],
                "test_partial_slice_high_reso": [
                    "self"
                ]
            }
        },
        "pandas.tests.indexes.timedeltas.test_join": {
            "TestJoin": {
                "test_append_join_nondatetimeindex": [
                    "self"
                ],
                "test_join_self": [
                    "self",
                    "join_type"
                ],
                "test_does_not_convert_mixed_integer": [
                    "self"
                ],
                "test_join_preserves_freq": [
                    "self"
                ]
            }
        },
        "pandas.tests.indexes.timedeltas.test_timedelta_range": {
            "TestTimedeltas": {
                "test_timedelta_range": [
                    "self"
                ],
                "test_linspace_behavior": [
                    "self",
                    "periods",
                    "freq"
                ],
                "test_errors": [
                    "self"
                ],
                "test_timedelta_range_freq_divide_end": [
                    "self",
                    "start",
                    "end",
                    "freq",
                    "expected_periods"
                ]
            }
        },
        "pandas.tests.indexes.timedeltas.test_shift": {
            "TestTimedeltaIndexShift": {
                "test_tdi_shift_empty": [
                    "self"
                ],
                "test_tdi_shift_hours": [
                    "self"
                ],
                "test_tdi_shift_minutes": [
                    "self"
                ],
                "test_tdi_shift_int": [
                    "self"
                ],
                "test_tdi_shift_nonstandard_freq": [
                    "self"
                ],
                "test_shift_no_freq": [
                    "self"
                ]
            }
        },
        "pandas.tests.indexes.timedeltas.test_fillna": {
            "TestFillNA": {
                "test_fillna_timedelta": [
                    "self"
                ]
            }
        },
        "pandas.tests.indexes.timedeltas.test_constructors": {
            "TestTimedeltaIndex": {
                "test_unit_m_y_raises": [
                    "self",
                    "unit"
                ],
                "test_int64_nocopy": [
                    "self"
                ],
                "test_infer_from_tdi": [
                    "self"
                ],
                "test_infer_from_tdi_mismatch": [
                    "self"
                ],
                "test_dt64_data_invalid": [
                    "self"
                ],
                "test_float64_ns_rounded": [
                    "self"
                ],
                "test_float64_unit_conversion": [
                    "self"
                ],
                "test_construction_base_constructor": [
                    "self"
                ],
                "test_constructor": [
                    "self"
                ],
                "test_constructor_iso": [
                    "self"
                ],
                "test_constructor_coverage": [
                    "self"
                ],
                "test_constructor_name": [
                    "self"
                ],
                "test_constructor_no_precision_raises": [
                    "self"
                ],
                "test_constructor_wrong_precision_raises": [
                    "self"
                ],
                "test_explicit_none_freq": [
                    "self"
                ]
            }
        },
        "pandas.tests.indexes.timedeltas.test_insert": {
            "TestTimedeltaIndexInsert": {
                "test_insert": [
                    "self"
                ],
                "test_insert_nat": [
                    "self",
                    "null"
                ],
                "test_insert_invalid_na": [
                    "self"
                ],
                "test_insert_mismatched_types_raises": [
                    "self",
                    "item"
                ],
                "test_insert_dont_cast_strings": [
                    "self"
                ],
                "test_insert_empty": [
                    "self"
                ]
            }
        },
        "pandas.tests.indexes.timedeltas.test_timedelta": {
            "TestTimedeltaIndex": {
                "index": [
                    "self"
                ],
                "create_index": [
                    "self"
                ],
                "test_numeric_compat": [
                    "self"
                ],
                "test_shift": [
                    "self"
                ],
                "test_pickle_compat_construction": [
                    "self"
                ],
                "test_pickle_after_set_freq": [
                    "self"
                ],
                "test_isin": [
                    "self"
                ],
                "test_factorize": [
                    "self"
                ],
                "test_sort_values": [
                    "self"
                ],
                "test_argmin_argmax": [
                    "self"
                ],
                "test_misc_coverage": [
                    "self"
                ],
                "test_map": [
                    "self"
                ],
                "test_pass_TimedeltaIndex_to_index": [
                    "self"
                ],
                "test_append_numpy_bug_1681": [
                    "self"
                ],
                "test_fields": [
                    "self"
                ],
                "test_freq_conversion": [
                    "self"
                ]
            }
        },
        "pandas.tests.indexes.timedeltas.test_indexing": {
            "TestGetItem": {
                "test_ellipsis": [
                    "self"
                ],
                "test_getitem_slice_keeps_name": [
                    "self"
                ],
                "test_getitem": [
                    "self"
                ],
                "test_timestamp_invalid_key": [
                    "self",
                    "key"
                ]
            },
            "TestGetLoc": {
                "test_get_loc": [
                    "self"
                ],
                "test_get_loc_nat": [
                    "self"
                ]
            },
            "TestGetIndexer": {
                "test_get_indexer": [
                    "self"
                ]
            },
            "TestWhere": {
                "test_where_doesnt_retain_freq": [
                    "self"
                ],
                "test_where_invalid_dtypes": [
                    "self"
                ],
                "test_where_mismatched_nat": [
                    "self"
                ]
            },
            "TestTake": {
                "test_take": [
                    "self"
                ],
                "test_take_invalid_kwargs": [
                    "self"
                ],
                "test_take2": [
                    "self"
                ],
                "test_take_fill_value": [
                    "self"
                ]
            }
        },
        "pandas.tests.indexes.timedeltas": {},
        "pandas.tests.indexes.numeric.test_astype": {
            "TestAstype": {
                "test_astype_float64_to_object": [
                    "self"
                ],
                "test_astype_float64_mixed_to_object": [
                    "self"
                ],
                "test_astype_float64_to_int_dtype": [
                    "self",
                    "dtype"
                ],
                "test_astype_float64_to_float_dtype": [
                    "self",
                    "dtype"
                ],
                "test_cannot_cast_to_datetimelike": [
                    "self",
                    "dtype"
                ],
                "test_cannot_cast_inf_to_int": [
                    "self",
                    "non_finite",
                    "dtype"
                ],
                "test_astype_from_object": [
                    "self"
                ]
            }
        },
        "pandas.tests.indexes.numeric.test_join": {
            "TestJoinInt64Index": {
                "test_join_non_unique": [
                    "self"
                ],
                "test_join_inner": [
                    "self"
                ],
                "test_join_left": [
                    "self"
                ],
                "test_join_right": [
                    "self"
                ],
                "test_join_non_int_index": [
                    "self"
                ],
                "test_join_outer": [
                    "self"
                ]
            },
            "TestJoinUInt64Index": {
                "index_large": [
                    "self"
                ],
                "test_join_inner": [
                    "self",
                    "index_large"
                ],
                "test_join_left": [
                    "self",
                    "index_large"
                ],
                "test_join_right": [
                    "self",
                    "index_large"
                ],
                "test_join_non_int_index": [
                    "self",
                    "index_large"
                ],
                "test_join_outer": [
                    "self",
                    "index_large"
                ]
            }
        },
        "pandas.tests.indexes.numeric.test_indexing": {
            "index_large": [],
            "TestGetLoc": {
                "test_get_loc_float64": [
                    "self"
                ],
                "test_get_loc_na": [
                    "self"
                ],
                "test_get_loc_missing_nan": [
                    "self"
                ]
            },
            "TestGetIndexer": {
                "test_get_indexer_float64": [
                    "self"
                ],
                "test_get_indexer_nan": [
                    "self"
                ],
                "test_get_indexer_int64": [
                    "self"
                ],
                "test_get_indexer_uint64": [
                    "self",
                    "index_large"
                ]
            },
            "TestWhere": {
                "test_where": [
                    "self",
                    "klass",
                    "index"
                ]
            },
            "TestTake": {
                "test_take_preserve_name": [
                    "self",
                    "klass"
                ],
                "test_take_fill_value_float64": [
                    "self"
                ],
                "test_take_fill_value_ints": [
                    "self",
                    "klass"
                ]
            },
            "TestContains": {
                "test_contains_float64_nans": [
                    "self"
                ],
                "test_contains_float64_not_nans": [
                    "self"
                ]
            }
        },
        "pandas.tests.indexes.numeric": {},
        "pandas.tests.indexes.datetimes.test_scalar_compat": {
            "TestDatetimeIndexOps": {
                "test_dti_time": [
                    "self"
                ],
                "test_dti_date": [
                    "self"
                ],
                "test_dti_date_out_of_range": [
                    "self",
                    "data"
                ],
                "test_dti_timestamp_fields": [
                    "self",
                    "field"
                ],
                "test_dti_timestamp_isocalendar_fields": [
                    "self"
                ],
                "test_dti_timestamp_freq_fields": [
                    "self"
                ],
                "test_round_daily": [
                    "self"
                ],
                "test_round_invalid": [
                    "self",
                    "freq",
                    "error_msg"
                ],
                "test_round": [
                    "self",
                    "tz_naive_fixture"
                ],
                "test_no_rounding_occurs": [
                    "self",
                    "tz_naive_fixture"
                ],
                "test_ceil_floor_edge": [
                    "self",
                    "test_input",
                    "rounder",
                    "freq",
                    "expected"
                ],
                "test_round_int64": [
                    "self",
                    "start",
                    "index_freq",
                    "periods",
                    "round_freq"
                ],
                "test_normalize": [
                    "self"
                ],
                "test_normalize_nat": [
                    "self"
                ]
            },
            "TestDateTimeIndexToJulianDate": {
                "test_1700": [
                    "self"
                ],
                "test_2000": [
                    "self"
                ],
                "test_hour": [
                    "self"
                ],
                "test_minute": [
                    "self"
                ],
                "test_second": [
                    "self"
                ]
            }
        },
        "pandas.tests.indexes.datetimes.test_delete": {
            "TestDelete": {
                "test_delete": [
                    "self"
                ],
                "test_delete_slice": [
                    "self"
                ]
            }
        },
        "pandas.tests.indexes.datetimes.test_map": {
            "TestMap": {
                "test_map": [
                    "self"
                ],
                "test_map_fallthrough": [
                    "self",
                    "capsys"
                ],
                "test_map_bug_1677": [
                    "self"
                ],
                "test_index_map": [
                    "self",
                    "name"
                ]
            }
        },
        "pandas.tests.indexes.datetimes.test_to_period": {
            "TestToPeriod": {
                "test_dti_to_period": [
                    "self"
                ],
                "test_to_period_quarterly": [
                    "self",
                    "month"
                ],
                "test_to_period_quarterlyish": [
                    "self",
                    "off"
                ],
                "test_to_period_annualish": [
                    "self",
                    "off"
                ],
                "test_to_period_monthish": [
                    "self"
                ],
                "test_to_period_infer": [
                    "self"
                ],
                "test_period_dt64_round_trip": [
                    "self"
                ],
                "test_to_period_millisecond": [
                    "self"
                ],
                "test_to_period_microsecond": [
                    "self"
                ],
                "test_to_period_tz": [
                    "self",
                    "tz"
                ],
                "test_to_period_tz_utc_offset_consistency": [
                    "self",
                    "tz"
                ],
                "test_to_period_nofreq": [
                    "self"
                ]
            }
        },
        "pandas.tests.indexes.datetimes.test_datetime": {
            "TestDatetimeIndex": {
                "test_reindex_preserves_tz_if_target_is_empty_list_or_array": [
                    "self"
                ],
                "test_reindex_with_same_tz": [
                    "self"
                ],
                "test_time_loc": [
                    "self"
                ],
                "test_time_overflow_for_32bit_machines": [
                    "self"
                ],
                "test_nat": [
                    "self"
                ],
                "test_week_of_month_frequency": [
                    "self"
                ],
                "test_stringified_slice_with_tz": [
                    "self"
                ],
                "test_append_nondatetimeindex": [
                    "self"
                ],
                "test_iteration_preserves_tz": [
                    "self"
                ],
                "test_iteration_over_chunksize": [
                    "self",
                    "periods"
                ],
                "test_misc_coverage": [
                    "self"
                ],
                "test_string_index_series_name_converted": [
                    "self"
                ],
                "test_argmin_argmax": [
                    "self"
                ],
                "test_sort_values": [
                    "self"
                ],
                "test_groupby_function_tuple_1677": [
                    "self"
                ],
                "test_append_numpy_bug_1681": [
                    "self"
                ],
                "test_isin": [
                    "self"
                ],
                "assert_index_parameters": [
                    "self",
                    "index"
                ],
                "test_ns_index": [
                    "self"
                ],
                "test_factorize": [
                    "self"
                ],
                "test_factorize_tz": [
                    "self",
                    "tz_naive_fixture"
                ],
                "test_factorize_dst": [
                    "self"
                ],
                "test_unique": [
                    "self",
                    "arr",
                    "expected"
                ],
                "test_asarray_tz_naive": [
                    "self"
                ],
                "test_asarray_tz_aware": [
                    "self"
                ],
                "test_to_frame_datetime_tz": [
                    "self"
                ],
                "test_split_non_utc": [
                    "self"
                ]
            }
        },
        "pandas.tests.indexes.datetimes.test_timezones": {
            "test_tz_localize_invalidates_freq": [],
            "FixedOffset": {
                "__init__": [
                    "self",
                    "offset",
                    "name"
                ],
                "utcoffset": [
                    "self",
                    "dt"
                ],
                "tzname": [
                    "self",
                    "dt"
                ],
                "dst": [
                    "self",
                    "dt"
                ]
            },
            "TestDatetimeIndexTimezones": {
                "test_tz_convert_nat": [
                    "self"
                ],
                "test_dti_tz_convert_compat_timestamp": [
                    "self",
                    "prefix"
                ],
                "test_dti_tz_convert_hour_overflow_dst": [
                    "self"
                ],
                "test_dti_tz_convert_hour_overflow_dst_timestamps": [
                    "self",
                    "tz"
                ],
                "test_dti_tz_convert_trans_pos_plus_1__bug": [
                    "self",
                    "freq",
                    "n"
                ],
                "test_dti_tz_convert_dst": [
                    "self"
                ],
                "test_tz_convert_roundtrip": [
                    "self",
                    "tz_aware_fixture"
                ],
                "test_dti_tz_convert_tzlocal": [
                    "self"
                ],
                "test_dti_tz_convert_utc_to_local_no_modify": [
                    "self",
                    "tz"
                ],
                "test_tz_convert_unsorted": [
                    "self",
                    "tzstr"
                ],
                "test_dti_tz_localize_nonexistent_raise_coerce": [
                    "self"
                ],
                "test_dti_tz_localize_ambiguous_infer": [
                    "self",
                    "tz"
                ],
                "test_dti_tz_localize_ambiguous_times": [
                    "self",
                    "tz"
                ],
                "test_dti_tz_localize_pass_dates_to_utc": [
                    "self",
                    "tzstr"
                ],
                "test_dti_tz_localize": [
                    "self",
                    "prefix"
                ],
                "test_dti_tz_localize_utc_conversion": [
                    "self",
                    "tz"
                ],
                "test_dti_tz_localize_roundtrip": [
                    "self",
                    "tz_aware_fixture"
                ],
                "test_dti_tz_localize_naive": [
                    "self"
                ],
                "test_dti_tz_localize_tzlocal": [
                    "self"
                ],
                "test_dti_tz_localize_ambiguous_nat": [
                    "self",
                    "tz"
                ],
                "test_dti_tz_localize_ambiguous_flags": [
                    "self",
                    "tz"
                ],
                "test_dti_construction_ambiguous_endpoint": [
                    "self",
                    "tz"
                ],
                "test_dti_construction_nonexistent_endpoint": [
                    "self",
                    "tz",
                    "option",
                    "expected"
                ],
                "test_dti_tz_localize_bdate_range": [
                    "self"
                ],
                "test_dti_tz_localize_nonexistent": [
                    "self",
                    "tz",
                    "method",
                    "exp"
                ],
                "test_dti_tz_localize_nonexistent_shift": [
                    "self",
                    "start_ts",
                    "tz",
                    "end_ts",
                    "shift",
                    "tz_type"
                ],
                "test_dti_tz_localize_nonexistent_shift_invalid": [
                    "self",
                    "offset",
                    "tz_type"
                ],
                "test_normalize_tz": [
                    "self"
                ],
                "test_normalize_tz_local": [
                    "self",
                    "timezone"
                ],
                "test_dti_constructor_static_tzinfo": [
                    "self",
                    "prefix"
                ],
                "test_dti_constructor_with_fixed_tz": [
                    "self"
                ],
                "test_dti_convert_datetime_list": [
                    "self",
                    "tzstr"
                ],
                "test_dti_construction_univalent": [
                    "self"
                ],
                "test_dti_from_tzaware_datetime": [
                    "self",
                    "tz"
                ],
                "test_dti_tz_constructors": [
                    "self",
                    "tzstr"
                ],
                "test_date_accessor": [
                    "self",
                    "dtype"
                ],
                "test_time_accessor": [
                    "self",
                    "dtype"
                ],
                "test_timetz_accessor": [
                    "self",
                    "tz_naive_fixture"
                ],
                "test_dti_drop_dont_lose_tz": [
                    "self"
                ],
                "test_dti_tz_conversion_freq": [
                    "self",
                    "tz_naive_fixture"
                ],
                "test_drop_dst_boundary": [
                    "self"
                ],
                "test_date_range_localize": [
                    "self"
                ],
                "test_timestamp_equality_different_timezones": [
                    "self"
                ],
                "test_dti_intersection": [
                    "self"
                ],
                "test_dti_equals_with_tz": [
                    "self"
                ],
                "test_dti_tz_nat": [
                    "self",
                    "tzstr"
                ],
                "test_dti_astype_asobject_tzinfos": [
                    "self",
                    "tzstr"
                ],
                "test_dti_with_timezone_repr": [
                    "self",
                    "tzstr"
                ],
                "test_dti_take_dont_lose_meta": [
                    "self",
                    "tzstr"
                ],
                "test_utc_box_timestamp_and_localize": [
                    "self",
                    "tzstr"
                ],
                "test_dti_to_pydatetime": [
                    "self"
                ],
                "test_dti_to_pydatetime_fizedtz": [
                    "self"
                ],
                "test_with_tz": [
                    "self",
                    "tz"
                ],
                "test_field_access_localize": [
                    "self",
                    "prefix"
                ],
                "test_dti_convert_tz_aware_datetime_datetime": [
                    "self",
                    "tz"
                ],
                "test_dti_union_aware": [
                    "self"
                ],
                "test_dti_union_mixed": [
                    "self"
                ],
                "test_iteration_preserves_nanoseconds": [
                    "self",
                    "tz"
                ]
            }
        },
        "pandas.tests.indexes.datetimes.test_setops": {
            "TestDatetimeIndexSetOps": {
                "test_union2": [
                    "self",
                    "sort"
                ],
                "test_union3": [
                    "self",
                    "sort",
                    "box"
                ],
                "test_union": [
                    "self",
                    "tz",
                    "sort"
                ],
                "test_union_coverage": [
                    "self",
                    "sort"
                ],
                "test_union_bug_1730": [
                    "self",
                    "sort"
                ],
                "test_union_bug_1745": [
                    "self",
                    "sort"
                ],
                "test_union_bug_4564": [
                    "self",
                    "sort"
                ],
                "test_union_freq_both_none": [
                    "self",
                    "sort"
                ],
                "test_union_freq_infer": [
                    "self"
                ],
                "test_union_dataframe_index": [
                    "self"
                ],
                "test_union_with_DatetimeIndex": [
                    "self",
                    "sort"
                ],
                "test_intersection2": [
                    "self"
                ],
                "test_intersection": [
                    "self",
                    "tz",
                    "sort"
                ],
                "test_intersection_empty": [
                    "self",
                    "tz_aware_fixture",
                    "freq"
                ],
                "test_intersection_bug_1708": [
                    "self"
                ],
                "test_difference": [
                    "self",
                    "tz",
                    "sort"
                ],
                "test_difference_freq": [
                    "self",
                    "sort"
                ],
                "test_datetimeindex_diff": [
                    "self",
                    "sort"
                ],
                "test_setops_preserve_freq": [
                    "self",
                    "tz"
                ]
            },
            "TestBusinessDatetimeIndex": {
                "setup_method": [
                    "self",
                    "method"
                ],
                "test_union": [
                    "self",
                    "sort"
                ],
                "test_union_not_cacheable": [
                    "self",
                    "sort"
                ],
                "test_intersection": [
                    "self"
                ],
                "test_intersection_bug": [
                    "self"
                ],
                "test_month_range_union_tz_pytz": [
                    "self",
                    "sort"
                ],
                "test_month_range_union_tz_dateutil": [
                    "self",
                    "sort"
                ]
            },
            "TestCustomDatetimeIndex": {
                "setup_method": [
                    "self",
                    "method"
                ],
                "test_union": [
                    "self",
                    "sort"
                ],
                "test_intersection_bug": [
                    "self"
                ]
            }
        },
        "pandas.tests.indexes.datetimes.test_ops": {
            "TestDatetimeIndexOps": {
                "test_ops_properties_basic": [
                    "self",
                    "datetime_series"
                ],
                "test_repeat_range": [
                    "self",
                    "tz_naive_fixture"
                ],
                "test_repeat": [
                    "self",
                    "tz_naive_fixture"
                ],
                "test_resolution": [
                    "self",
                    "tz_naive_fixture"
                ],
                "test_value_counts_unique": [
                    "self",
                    "tz_naive_fixture"
                ],
                "test_order_with_freq": [
                    "self",
                    "idx"
                ],
                "test_order_without_freq": [
                    "self",
                    "index_dates",
                    "expected_dates",
                    "tz_naive_fixture"
                ],
                "test_drop_duplicates_metadata": [
                    "self",
                    "freq_sample"
                ],
                "test_drop_duplicates": [
                    "self",
                    "freq_sample",
                    "keep",
                    "expected",
                    "index"
                ],
                "test_infer_freq": [
                    "self",
                    "freq_sample"
                ],
                "test_nat": [
                    "self",
                    "tz_naive_fixture"
                ],
                "test_equals": [
                    "self"
                ],
                "test_freq_setter": [
                    "self",
                    "values",
                    "freq",
                    "tz"
                ],
                "test_freq_setter_errors": [
                    "self"
                ],
                "test_freq_view_safe": [
                    "self"
                ]
            },
            "TestBusinessDatetimeIndex": {
                "setup_method": [
                    "self",
                    "method"
                ],
                "test_comparison": [
                    "self"
                ],
                "test_copy": [
                    "self"
                ],
                "test_equals": [
                    "self"
                ],
                "test_identical": [
                    "self"
                ]
            },
            "TestCustomDatetimeIndex": {
                "setup_method": [
                    "self",
                    "method"
                ],
                "test_comparison": [
                    "self"
                ],
                "test_copy": [
                    "self"
                ],
                "test_equals": [
                    "self"
                ]
            }
        },
        "pandas.tests.indexes.datetimes.test_astype": {
            "TestDatetimeIndex": {
                "test_astype": [
                    "self"
                ],
                "test_astype_uint": [
                    "self"
                ],
                "test_astype_with_tz": [
                    "self"
                ],
                "test_astype_tzaware_to_tzaware": [
                    "self"
                ],
                "test_astype_tznaive_to_tzaware": [
                    "self"
                ],
                "test_astype_str_nat": [
                    "self"
                ],
                "test_astype_str": [
                    "self"
                ],
                "test_astype_str_tz_and_name": [
                    "self"
                ],
                "test_astype_str_freq_and_name": [
                    "self"
                ],
                "test_astype_str_freq_and_tz": [
                    "self"
                ],
                "test_astype_datetime64": [
                    "self"
                ],
                "test_astype_object": [
                    "self"
                ],
                "test_astype_object_tz": [
                    "self",
                    "tz"
                ],
                "test_astype_object_with_nat": [
                    "self"
                ],
                "test_astype_raises": [
                    "self",
                    "dtype"
                ],
                "test_index_convert_to_datetime_array": [
                    "self"
                ],
                "test_index_convert_to_datetime_array_explicit_pytz": [
                    "self"
                ],
                "test_index_convert_to_datetime_array_dateutil": [
                    "self"
                ],
                "test_integer_index_astype_datetime": [
                    "self",
                    "tz",
                    "dtype"
                ],
                "test_dti_astype_period": [
                    "self"
                ]
            },
            "TestAstype": {
                "test_astype_category": [
                    "self",
                    "tz"
                ],
                "test_astype_array_fallback": [
                    "self",
                    "tz"
                ]
            }
        },
        "pandas.tests.indexes.datetimes.test_formats": {
            "test_to_native_types": [],
            "TestDatetimeIndexRendering": {
                "test_dti_repr_short": [
                    "self"
                ],
                "test_dti_representation": [
                    "self",
                    "method"
                ],
                "test_dti_representation_to_series": [
                    "self"
                ],
                "test_dti_summary": [
                    "self"
                ],
                "test_dti_business_repr": [
                    "self"
                ],
                "test_dti_business_summary": [
                    "self"
                ],
                "test_dti_business_summary_pytz": [
                    "self"
                ],
                "test_dti_business_summary_dateutil": [
                    "self"
                ],
                "test_dti_custom_business_repr": [
                    "self"
                ],
                "test_dti_custom_business_summary": [
                    "self"
                ],
                "test_dti_custom_business_summary_pytz": [
                    "self"
                ],
                "test_dti_custom_business_summary_dateutil": [
                    "self"
                ]
            }
        },
        "pandas.tests.indexes.datetimes.test_partial_slicing": {
            "TestSlicing": {
                "test_monotone_DTI_indexing_bug": [
                    "self"
                ],
                "test_slice_year": [
                    "self"
                ],
                "test_slice_end_of_period_resolution": [
                    "self",
                    "partial_dtime"
                ],
                "test_slice_quarter": [
                    "self"
                ],
                "test_slice_month": [
                    "self"
                ],
                "test_partial_slice": [
                    "self"
                ],
                "test_partial_slice_daily": [
                    "self"
                ],
                "test_partial_slice_hourly": [
                    "self"
                ],
                "test_partial_slice_minutely": [
                    "self"
                ],
                "test_partial_slice_second_precision": [
                    "self"
                ],
                "test_partial_slicing_dataframe": [
                    "self"
                ],
                "test_partial_slicing_with_multiindex": [
                    "self"
                ],
                "test_partial_slice_doesnt_require_monotonicity": [
                    "self"
                ],
                "test_loc_datetime_length_one": [
                    "self"
                ],
                "test_selection_by_datetimelike": [
                    "self",
                    "datetimelike",
                    "op",
                    "expected"
                ],
                "test_getitem_with_datestring_with_UTC_offset": [
                    "self",
                    "start",
                    "end"
                ],
                "test_slice_reduce_to_series": [
                    "self"
                ]
            }
        },
        "pandas.tests.indexes.datetimes.test_join": {
            "TestJoin": {
                "test_does_not_convert_mixed_integer": [
                    "self"
                ],
                "test_join_self": [
                    "self",
                    "join_type"
                ],
                "test_join_with_period_index": [
                    "self",
                    "join_type"
                ],
                "test_join_object_index": [
                    "self"
                ],
                "test_join_utc_convert": [
                    "self",
                    "join_type"
                ],
                "test_datetimeindex_union_join_empty": [
                    "self",
                    "sort"
                ],
                "test_join_nonunique": [
                    "self"
                ],
                "test_outer_join": [
                    "self",
                    "freq"
                ],
                "test_naive_aware_conflicts": [
                    "self"
                ],
                "test_join_preserves_freq": [
                    "self",
                    "tz"
                ]
            }
        },
        "pandas.tests.indexes.datetimes.test_datetimelike": {
            "TestDatetimeIndex": {
                "index": [
                    "self",
                    "request"
                ],
                "create_index": [
                    "self"
                ],
                "test_format": [
                    "self"
                ],
                "test_shift": [
                    "self"
                ],
                "test_pickle_compat_construction": [
                    "self"
                ],
                "test_intersection": [
                    "self"
                ],
                "test_union": [
                    "self"
                ]
            }
        },
        "pandas.tests.indexes.datetimes.test_shift": {
            "TestDatetimeIndexShift": {
                "test_dti_shift_tzaware": [
                    "self",
                    "tz_naive_fixture"
                ],
                "test_dti_shift_freqs": [
                    "self"
                ],
                "test_dti_shift_int": [
                    "self"
                ],
                "test_dti_shift_no_freq": [
                    "self"
                ],
                "test_dti_shift_localized": [
                    "self",
                    "tzstr"
                ],
                "test_dti_shift_across_dst": [
                    "self"
                ],
                "test_dti_shift_near_midnight": [
                    "self",
                    "shift",
                    "result_time"
                ],
                "test_shift_periods": [
                    "self"
                ],
                "test_shift_bday": [
                    "self",
                    "freq"
                ],
                "test_shift_bmonth": [
                    "self"
                ]
            }
        },
        "pandas.tests.indexes.datetimes.test_snap": {
            "test_dti_snap": [
                "name",
                "tz"
            ]
        },
        "pandas.tests.indexes.datetimes.test_fillna": {
            "TestDatetimeIndexFillNA": {
                "test_fillna_datetime64": [
                    "self",
                    "tz"
                ]
            }
        },
        "pandas.tests.indexes.datetimes.test_constructors": {
            "test_timestamp_constructor_invalid_fold_raise": [],
            "test_timestamp_constructor_pytz_fold_raise": [],
            "test_timestamp_constructor_fold_conflict": [
                "ts_input",
                "fold"
            ],
            "test_timestamp_constructor_retain_fold": [
                "tz",
                "fold"
            ],
            "test_timestamp_constructor_infer_fold_from_value": [
                "tz",
                "ts_input",
                "fold_out"
            ],
            "test_timestamp_constructor_adjust_value_for_fold": [
                "tz",
                "ts_input",
                "fold",
                "value_out"
            ],
            "TestDatetimeIndex": {
                "test_freq_validation_with_nat": [
                    "self",
                    "dt_cls"
                ],
                "test_shallow_copy_inherits_array_freq": [
                    "self",
                    "index"
                ],
                "test_categorical_preserves_tz": [
                    "self"
                ],
                "test_dti_with_period_data_raises": [
                    "self"
                ],
                "test_dti_with_timedelta64_data_raises": [
                    "self"
                ],
                "test_construction_caching": [
                    "self"
                ],
                "test_construction_with_alt": [
                    "self",
                    "kwargs",
                    "tz_aware_fixture"
                ],
                "test_construction_with_alt_tz_localize": [
                    "self",
                    "kwargs",
                    "tz_aware_fixture"
                ],
                "test_construction_index_with_mixed_timezones": [
                    "self"
                ],
                "test_construction_index_with_mixed_timezones_with_NaT": [
                    "self"
                ],
                "test_construction_dti_with_mixed_timezones": [
                    "self"
                ],
                "test_construction_base_constructor": [
                    "self"
                ],
                "test_construction_outofbounds": [
                    "self"
                ],
                "test_construction_with_ndarray": [
                    "self"
                ],
                "test_integer_values_and_tz_interpreted_as_utc": [
                    "self"
                ],
                "test_constructor_coverage": [
                    "self"
                ],
                "test_constructor_datetime64_tzformat": [
                    "self",
                    "freq"
                ],
                "test_constructor_dtype": [
                    "self"
                ],
                "test_constructor_invalid_dtype_raises": [
                    "self",
                    "dtype"
                ],
                "test_constructor_name": [
                    "self"
                ],
                "test_000constructor_resolution": [
                    "self"
                ],
                "test_disallow_setting_tz": [
                    "self"
                ],
                "test_constructor_start_end_with_tz": [
                    "self",
                    "tz"
                ],
                "test_constructor_with_non_normalized_pytz": [
                    "self",
                    "tz"
                ],
                "test_constructor_timestamp_near_dst": [
                    "self"
                ],
                "test_constructor_with_int_tz": [
                    "self",
                    "klass",
                    "box",
                    "tz",
                    "dtype"
                ],
                "test_construction_int_rountrip": [
                    "self",
                    "tz_naive_fixture"
                ],
                "test_construction_from_replaced_timestamps_with_dst": [
                    "self"
                ],
                "test_construction_with_tz_and_tz_aware_dti": [
                    "self"
                ],
                "test_construction_with_nat_and_tzlocal": [
                    "self"
                ],
                "test_constructor_no_precision_raises": [
                    "self"
                ],
                "test_constructor_wrong_precision_raises": [
                    "self"
                ],
                "test_index_constructor_with_numpy_object_array_and_timestamp_tz_with_nan": [
                    "self"
                ]
            },
            "TestTimeSeries": {
                "test_dti_constructor_preserve_dti_freq": [
                    "self"
                ],
                "test_explicit_none_freq": [
                    "self"
                ],
                "test_dti_constructor_years_only": [
                    "self",
                    "tz_naive_fixture"
                ],
                "test_dti_constructor_small_int": [
                    "self",
                    "any_int_dtype"
                ],
                "test_ctor_str_intraday": [
                    "self"
                ],
                "test_is_": [
                    "self"
                ],
                "test_index_cast_datetime64_other_units": [
                    "self"
                ],
                "test_constructor_int64_nocopy": [
                    "self"
                ],
                "test_from_freq_recreate_from_data": [
                    "self",
                    "freq"
                ],
                "test_datetimeindex_constructor_misc": [
                    "self"
                ],
                "test_pass_datetimeindex_to_index": [
                    "self"
                ],
                "test_date_range_tuple_freq_raises": [
                    "self"
                ]
            }
        },
        "pandas.tests.indexes.datetimes.test_insert": {
            "TestInsert": {
                "test_insert_nat": [
                    "self",
                    "tz",
                    "null"
                ],
                "test_insert_invalid_na": [
                    "self",
                    "tz"
                ],
                "test_insert_empty_preserves_freq": [
                    "self",
                    "tz_naive_fixture"
                ],
                "test_insert": [
                    "self"
                ],
                "test_insert_mismatched_types_raises": [
                    "self",
                    "tz_aware_fixture",
                    "item"
                ],
                "test_insert_object_casting": [
                    "self",
                    "tz_aware_fixture"
                ]
            }
        },
        "pandas.tests.indexes.datetimes.test_misc": {
            "test_iter_readonly": [],
            "test_week_and_weekofyear_are_deprecated": [],
            "test_isocalendar_returns_correct_values_close_to_new_year_with_tz": [],
            "TestTimeSeries": {
                "test_range_edges": [
                    "self"
                ]
            },
            "TestDatetime64": {
                "test_datetimeindex_accessors": [
                    "self"
                ],
                "test_datetime_name_accessors": [
                    "self",
                    "time_locale"
                ],
                "test_nanosecond_field": [
                    "self"
                ]
            }
        },
        "pandas.tests.indexes.datetimes.test_date_range": {
            "test_date_range_with_custom_holidays": [],
            "TestTimestampEquivDateRange": {
                "test_date_range_timestamp_equiv": [
                    "self"
                ],
                "test_date_range_timestamp_equiv_dateutil": [
                    "self"
                ],
                "test_date_range_timestamp_equiv_explicit_pytz": [
                    "self"
                ],
                "test_date_range_timestamp_equiv_explicit_dateutil": [
                    "self"
                ],
                "test_date_range_timestamp_equiv_from_datetime_instance": [
                    "self"
                ],
                "test_date_range_timestamp_equiv_preserve_frequency": [
                    "self"
                ]
            },
            "TestDateRanges": {
                "test_date_range_nat": [
                    "self"
                ],
                "test_date_range_multiplication_overflow": [
                    "self"
                ],
                "test_date_range_unsigned_overflow_handling": [
                    "self"
                ],
                "test_date_range_int64_overflow_non_recoverable": [
                    "self"
                ],
                "test_date_range_int64_overflow_stride_endpoint_different_signs": [
                    "self"
                ],
                "test_date_range_out_of_bounds": [
                    "self"
                ],
                "test_date_range_gen_error": [
                    "self"
                ],
                "test_begin_year_alias": [
                    "self",
                    "freq"
                ],
                "test_end_year_alias": [
                    "self",
                    "freq"
                ],
                "test_business_end_year_alias": [
                    "self",
                    "freq"
                ],
                "test_date_range_negative_freq": [
                    "self"
                ],
                "test_date_range_bms_bug": [
                    "self"
                ],
                "test_date_range_normalize": [
                    "self"
                ],
                "test_date_range_fy5252": [
                    "self"
                ],
                "test_date_range_ambiguous_arguments": [
                    "self"
                ],
                "test_date_range_convenience_periods": [
                    "self"
                ],
                "test_date_range_linspacing_tz": [
                    "self",
                    "start",
                    "end",
                    "result_tz"
                ],
                "test_date_range_businesshour": [
                    "self"
                ],
                "test_range_misspecified": [
                    "self"
                ],
                "test_compat_replace": [
                    "self"
                ],
                "test_catch_infinite_loop": [
                    "self"
                ],
                "test_wom_len": [
                    "self",
                    "periods"
                ],
                "test_construct_over_dst": [
                    "self"
                ],
                "test_construct_with_different_start_end_string_format": [
                    "self"
                ],
                "test_error_with_zero_monthends": [
                    "self"
                ],
                "test_range_bug": [
                    "self"
                ],
                "test_range_tz_pytz": [
                    "self"
                ],
                "test_range_tz_dst_straddle_pytz": [
                    "self",
                    "start",
                    "end"
                ],
                "test_range_tz_dateutil": [
                    "self"
                ],
                "test_range_closed": [
                    "self",
                    "freq"
                ],
                "test_range_closed_with_tz_aware_start_end": [
                    "self"
                ],
                "test_range_closed_boundary": [
                    "self",
                    "closed"
                ],
                "test_years_only": [
                    "self"
                ],
                "test_freq_divides_end_in_nanos": [
                    "self"
                ],
                "test_cached_range_bug": [
                    "self"
                ],
                "test_timezone_comparaison_bug": [
                    "self"
                ],
                "test_timezone_comparaison_assert": [
                    "self"
                ],
                "test_negative_non_tick_frequency_descending_dates": [
                    "self",
                    "tz_aware_fixture"
                ]
            },
            "TestDateRangeTZ": {
                "test_hongkong_tz_convert": [
                    "self"
                ],
                "test_date_range_span_dst_transition": [
                    "self",
                    "tzstr"
                ],
                "test_date_range_timezone_str_argument": [
                    "self",
                    "tzstr"
                ],
                "test_date_range_with_fixedoffset_noname": [
                    "self"
                ],
                "test_date_range_with_tz": [
                    "self",
                    "tzstr"
                ]
            },
            "TestGenRangeGeneration": {
                "test_generate": [
                    "self"
                ],
                "test_generate_cday": [
                    "self"
                ],
                "test_1": [
                    "self"
                ],
                "test_2": [
                    "self"
                ],
                "test_3": [
                    "self"
                ],
                "test_precision_finer_than_offset": [
                    "self"
                ],
                "test_mismatching_tz_raises_err": [
                    "self",
                    "start",
                    "end"
                ]
            },
            "TestBusinessDateRange": {
                "test_constructor": [
                    "self"
                ],
                "test_misc": [
                    "self"
                ],
                "test_date_parse_failure": [
                    "self"
                ],
                "test_daterange_bug_456": [
                    "self"
                ],
                "test_bdays_and_open_boundaries": [
                    "self",
                    "closed"
                ],
                "test_bday_near_overflow": [
                    "self"
                ],
                "test_bday_overflow_error": [
                    "self"
                ]
            },
            "TestCustomDateRange": {
                "test_constructor": [
                    "self"
                ],
                "test_misc": [
                    "self"
                ],
                "test_daterange_bug_456": [
                    "self"
                ],
                "test_cdaterange": [
                    "self"
                ],
                "test_cdaterange_weekmask": [
                    "self"
                ],
                "test_cdaterange_holidays": [
                    "self"
                ],
                "test_cdaterange_weekmask_and_holidays": [
                    "self"
                ],
                "test_all_custom_freq": [
                    "self",
                    "freq"
                ],
                "test_range_with_millisecond_resolution": [
                    "self",
                    "start_end"
                ]
            }
        },
        "pandas.tests.indexes.datetimes.test_indexing": {
            "TestGetItem": {
                "test_ellipsis": [
                    "self"
                ],
                "test_getitem_slice_keeps_name": [
                    "self"
                ],
                "test_getitem": [
                    "self"
                ],
                "test_dti_business_getitem": [
                    "self"
                ],
                "test_dti_business_getitem_matplotlib_hackaround": [
                    "self"
                ],
                "test_dti_custom_getitem": [
                    "self"
                ],
                "test_dti_custom_getitem_matplotlib_hackaround": [
                    "self"
                ],
                "test_getitem_int_list": [
                    "self"
                ]
            },
            "TestWhere": {
                "test_where_doesnt_retain_freq": [
                    "self"
                ],
                "test_where_other": [
                    "self"
                ],
                "test_where_invalid_dtypes": [
                    "self"
                ],
                "test_where_mismatched_nat": [
                    "self",
                    "tz_aware_fixture"
                ],
                "test_where_tz": [
                    "self"
                ]
            },
            "TestTake": {
                "test_take": [
                    "self"
                ],
                "test_take_invalid_kwargs": [
                    "self"
                ],
                "test_take2": [
                    "self",
                    "tz"
                ],
                "test_take_fill_value": [
                    "self"
                ],
                "test_take_fill_value_with_timezone": [
                    "self"
                ]
            },
            "TestGetLoc": {
                "test_get_loc_method_exact_match": [
                    "self",
                    "method"
                ],
                "test_get_loc": [
                    "self"
                ],
                "test_get_loc_time_nat": [
                    "self"
                ],
                "test_get_loc_tz_aware": [
                    "self"
                ],
                "test_get_loc_nat": [
                    "self"
                ],
                "test_get_loc_timedelta_invalid_key": [
                    "self",
                    "key"
                ],
                "test_get_loc_reasonable_key_error": [
                    "self"
                ]
            },
            "TestContains": {
                "test_dti_contains_with_duplicates": [
                    "self"
                ],
                "test_contains_nonunique": [
                    "self",
                    "vals"
                ]
            },
            "TestGetIndexer": {
                "test_get_indexer": [
                    "self"
                ],
                "test_get_indexer_mixed_dtypes": [
                    "self",
                    "target"
                ],
                "test_get_indexer_out_of_bounds_date": [
                    "self",
                    "target",
                    "positions"
                ]
            },
            "TestMaybeCastSliceBound": {
                "test_maybe_cast_slice_bounds_empty": [
                    "self"
                ],
                "test_maybe_cast_slice_duplicate_monotonic": [
                    "self"
                ]
            },
            "TestDatetimeIndex": {
                "test_get_value": [
                    "self"
                ]
            }
        },
        "pandas.tests.indexes.datetimes.test_pickle": {
            "TestPickle": {
                "test_pickle": [
                    "self"
                ],
                "test_pickle_dont_infer_freq": [
                    "self"
                ],
                "test_pickle_after_set_freq": [
                    "self"
                ],
                "test_roundtrip_pickle_with_tz": [
                    "self"
                ],
                "test_pickle_unpickle": [
                    "self",
                    "freq"
                ]
            }
        },
        "pandas.tests.indexes.datetimes": {},
        "pandas.tests.indexes.period.test_period_range": {
            "TestPeriodRange": {
                "test_construction_from_string": [
                    "self",
                    "freq"
                ],
                "test_construction_from_period": [
                    "self"
                ],
                "test_errors": [
                    "self"
                ]
            }
        },
        "pandas.tests.indexes.period.test_scalar_compat": {
            "TestPeriodIndexOps": {
                "test_start_time": [
                    "self"
                ],
                "test_end_time": [
                    "self"
                ],
                "test_end_time_business_friday": [
                    "self"
                ]
            }
        },
        "pandas.tests.indexes.period.test_searchsorted": {
            "TestSearchsorted": {
                "test_searchsorted": [
                    "self",
                    "freq"
                ],
                "test_searchsorted_different_argument_classes": [
                    "self",
                    "klass"
                ],
                "test_searchsorted_invalid": [
                    "self"
                ]
            }
        },
        "pandas.tests.indexes.period.test_period": {
            "test_maybe_convert_timedelta": [],
            "test_is_monotonic_with_nat": [],
            "test_dunder_array": [
                "array"
            ],
            "TestPeriodIndex": {
                "index": [
                    "self",
                    "request"
                ],
                "create_index": [
                    "self"
                ],
                "test_pickle_compat_construction": [
                    "self"
                ],
                "test_pickle_round_trip": [
                    "self",
                    "freq"
                ],
                "test_where": [
                    "self"
                ],
                "test_repeat_freqstr": [
                    "self",
                    "index",
                    "use_numpy"
                ],
                "test_no_millisecond_field": [
                    "self"
                ],
                "test_make_time_series": [
                    "self"
                ],
                "test_shallow_copy_empty": [
                    "self"
                ],
                "test_shallow_copy_disallow_i8": [
                    "self"
                ],
                "test_shallow_copy_requires_disallow_period_index": [
                    "self"
                ],
                "test_view_asi8": [
                    "self"
                ],
                "test_values": [
                    "self"
                ],
                "test_period_index_length": [
                    "self"
                ],
                "test_fields": [
                    "self"
                ],
                "_check_all_fields": [
                    "self",
                    "periodindex"
                ],
                "test_period_set_index_reindex": [
                    "self"
                ],
                "test_period_reindex_with_object": [
                    "self",
                    "p_values",
                    "o_values",
                    "values",
                    "expected_values"
                ],
                "test_is_": [
                    "self"
                ],
                "test_periods_number_check": [
                    "self"
                ],
                "test_index_duplicate_periods": [
                    "self"
                ],
                "test_index_unique": [
                    "self"
                ],
                "test_shift": [
                    "self"
                ],
                "test_ndarray_compat_properties": [
                    "self"
                ],
                "test_negative_ordinals": [
                    "self"
                ],
                "test_pindex_fieldaccessor_nat": [
                    "self"
                ],
                "test_pindex_qaccess": [
                    "self"
                ],
                "test_pindex_multiples": [
                    "self"
                ],
                "test_iteration": [
                    "self"
                ],
                "test_is_full": [
                    "self"
                ],
                "test_with_multi_index": [
                    "self"
                ],
                "test_convert_array_of_periods": [
                    "self"
                ],
                "test_append_concat": [
                    "self"
                ],
                "test_pickle_freq": [
                    "self"
                ],
                "test_map": [
                    "self"
                ],
                "test_insert": [
                    "self"
                ],
                "test_contains_raise_error_if_period_index_is_in_multi_index": [
                    "self",
                    "msg",
                    "key"
                ]
            }
        },
        "pandas.tests.indexes.period.test_setops": {
            "_permute": [
                "obj"
            ],
            "TestPeriodIndex": {
                "test_union": [
                    "self",
                    "sort"
                ],
                "test_union_misc": [
                    "self",
                    "sort"
                ],
                "test_union_dataframe_index": [
                    "self"
                ],
                "test_intersection": [
                    "self",
                    "sort"
                ],
                "test_intersection_cases": [
                    "self",
                    "sort"
                ],
                "test_difference": [
                    "self",
                    "sort"
                ],
                "test_difference_freq": [
                    "self",
                    "sort"
                ]
            }
        },
        "pandas.tests.indexes.period.test_monotonic": {
            "test_is_monotonic_increasing": [],
            "test_is_monotonic_decreasing": []
        },
        "pandas.tests.indexes.period.test_to_timestamp": {
            "TestToTimestamp": {
                "test_to_timestamp_freq": [
                    "self"
                ],
                "test_to_timestamp_pi_nat": [
                    "self"
                ],
                "test_to_timestamp_preserve_name": [
                    "self"
                ],
                "test_to_timestamp_quarterly_bug": [
                    "self"
                ],
                "test_to_timestamp_pi_mult": [
                    "self"
                ],
                "test_to_timestamp_pi_combined": [
                    "self"
                ],
                "test_to_timestamp_1703": [
                    "self"
                ]
            }
        },
        "pandas.tests.indexes.period.test_ops": {
            "TestPeriodIndexOps": {
                "test_resolution": [
                    "self",
                    "freq",
                    "expected"
                ],
                "test_value_counts_unique": [
                    "self"
                ],
                "test_drop_duplicates_metadata": [
                    "self",
                    "freq"
                ],
                "test_drop_duplicates": [
                    "self",
                    "freq",
                    "keep",
                    "expected",
                    "index"
                ],
                "test_order_compat": [
                    "self"
                ],
                "test_order": [
                    "self"
                ],
                "test_nat": [
                    "self"
                ],
                "test_equals": [
                    "self",
                    "freq"
                ],
                "test_freq_setter_deprecated": [
                    "self"
                ]
            }
        },
        "pandas.tests.indexes.period.test_factorize": {
            "TestFactorize": {
                "test_factorize": [
                    "self"
                ]
            }
        },
        "pandas.tests.indexes.period.test_astype": {
            "TestPeriodIndexAsType": {
                "test_astype_raises": [
                    "self",
                    "dtype"
                ],
                "test_astype_conversion": [
                    "self"
                ],
                "test_astype_uint": [
                    "self"
                ],
                "test_astype_object": [
                    "self"
                ],
                "test_astype_object2": [
                    "self"
                ],
                "test_astype_category": [
                    "self"
                ],
                "test_astype_array_fallback": [
                    "self"
                ],
                "test_period_astype_to_timestamp": [
                    "self"
                ]
            }
        },
        "pandas.tests.indexes.period.test_formats": {
            "test_to_native_types": [],
            "TestPeriodIndexRendering": {
                "test_frame_repr": [
                    "self"
                ],
                "test_representation": [
                    "self",
                    "method"
                ],
                "test_representation_to_series": [
                    "self"
                ],
                "test_summary": [
                    "self"
                ]
            }
        },
        "pandas.tests.indexes.period.test_partial_slicing": {
            "TestPeriodIndex": {
                "test_pindex_slice_index": [
                    "self"
                ],
                "test_range_slice_day": [
                    "self",
                    "make_range"
                ],
                "test_range_slice_seconds": [
                    "self",
                    "make_range"
                ],
                "test_range_slice_outofbounds": [
                    "self",
                    "make_range"
                ],
                "test_partial_slice_doesnt_require_monotonicity": [
                    "self"
                ]
            }
        },
        "pandas.tests.indexes.period.test_join": {
            "TestJoin": {
                "test_joins": [
                    "self",
                    "join_type"
                ],
                "test_join_self": [
                    "self",
                    "join_type"
                ],
                "test_join_does_not_recur": [
                    "self"
                ],
                "test_join_mismatched_freq_raises": [
                    "self"
                ]
            }
        },
        "pandas.tests.indexes.period.test_tools": {
            "TestPeriodRepresentation": {
                "_check_freq": [
                    "self",
                    "freq",
                    "base_date"
                ],
                "test_annual": [
                    "self"
                ],
                "test_monthly": [
                    "self"
                ],
                "test_freq": [
                    "self",
                    "freq"
                ]
            },
            "TestPeriodIndexConversion": {
                "test_tolist": [
                    "self"
                ]
            }
        },
        "pandas.tests.indexes.period.test_shift": {
            "TestPeriodIndexShift": {
                "test_pi_shift_ndarray": [
                    "self"
                ],
                "test_shift": [
                    "self"
                ],
                "test_shift_corner_cases": [
                    "self"
                ],
                "test_shift_nat": [
                    "self"
                ],
                "test_shift_gh8083": [
                    "self"
                ],
                "test_shift_periods": [
                    "self"
                ]
            }
        },
        "pandas.tests.indexes.period.test_fillna": {
            "TestFillNA": {
                "test_fillna_period": [
                    "self"
                ]
            }
        },
        "pandas.tests.indexes.period.test_constructors": {
            "TestPeriodIndex": {
                "test_construction_base_constructor": [
                    "self"
                ],
                "test_base_constructor_with_period_dtype": [
                    "self"
                ],
                "test_index_object_dtype": [
                    "self",
                    "values_constructor"
                ],
                "test_constructor_use_start_freq": [
                    "self"
                ],
                "test_constructor_field_arrays": [
                    "self"
                ],
                "test_constructor_U": [
                    "self"
                ],
                "test_constructor_nano": [
                    "self"
                ],
                "test_constructor_arrays_negative_year": [
                    "self"
                ],
                "test_constructor_invalid_quarters": [
                    "self"
                ],
                "test_constructor_corner": [
                    "self"
                ],
                "test_constructor_fromarraylike": [
                    "self"
                ],
                "test_constructor_datetime64arr": [
                    "self"
                ],
                "test_constructor_datetime64arr_ok": [
                    "self",
                    "box"
                ],
                "test_constructor_dtype": [
                    "self"
                ],
                "test_constructor_empty": [
                    "self"
                ],
                "test_constructor_pi_nat": [
                    "self"
                ],
                "test_constructor_incompat_freq": [
                    "self"
                ],
                "test_constructor_mixed": [
                    "self"
                ],
                "test_constructor_simple_new": [
                    "self"
                ],
                "test_constructor_simple_new_empty": [
                    "self"
                ],
                "test_constructor_floats": [
                    "self",
                    "floats"
                ],
                "test_constructor_nat": [
                    "self"
                ],
                "test_constructor_year_and_quarter": [
                    "self"
                ],
                "test_constructor_freq_mult": [
                    "self"
                ],
                "test_constructor_freq_mult_dti_compat": [
                    "self",
                    "mult",
                    "freq"
                ],
                "test_constructor_freq_combined": [
                    "self"
                ],
                "test_constructor": [
                    "self"
                ],
                "test_recreate_from_data": [
                    "self",
                    "freq"
                ],
                "test_map_with_string_constructor": [
                    "self"
                ]
            },
            "TestSeriesPeriod": {
                "setup_method": [
                    "self",
                    "method"
                ],
                "test_constructor_cant_cast_period": [
                    "self"
                ],
                "test_constructor_cast_object": [
                    "self"
                ]
            }
        },
        "pandas.tests.indexes.period.test_indexing": {
            "TestGetItem": {
                "test_ellipsis": [
                    "self"
                ],
                "test_getitem_slice_keeps_name": [
                    "self"
                ],
                "test_getitem": [
                    "self"
                ],
                "test_getitem_index": [
                    "self"
                ],
                "test_getitem_partial": [
                    "self"
                ],
                "test_getitem_datetime": [
                    "self"
                ],
                "test_getitem_nat": [
                    "self"
                ],
                "test_getitem_list_periods": [
                    "self"
                ],
                "test_getitem_seconds": [
                    "self"
                ],
                "test_getitem_day": [
                    "self"
                ]
            },
            "TestGetLoc": {
                "test_get_loc_msg": [
                    "self"
                ],
                "test_get_loc_nat": [
                    "self"
                ],
                "test_get_loc": [
                    "self"
                ],
                "test_get_loc_integer": [
                    "self"
                ],
                "test_get_loc2": [
                    "self"
                ]
            },
            "TestGetIndexer": {
                "test_get_indexer": [
                    "self"
                ],
                "test_get_indexer_mismatched_dtype": [
                    "self"
                ],
                "test_get_indexer_non_unique": [
                    "self"
                ],
                "test_get_indexer2": [
                    "self"
                ]
            },
            "TestWhere": {
                "test_where": [
                    "self",
                    "klass"
                ],
                "test_where_other": [
                    "self"
                ],
                "test_where_invalid_dtypes": [
                    "self"
                ],
                "test_where_mismatched_nat": [
                    "self"
                ]
            },
            "TestTake": {
                "test_take": [
                    "self"
                ],
                "test_take_misc": [
                    "self"
                ],
                "test_take_fill_value": [
                    "self"
                ]
            },
            "TestGetValue": {
                "test_get_value": [
                    "self"
                ],
                "test_loc_str": [
                    "self"
                ],
                "test_get_value_datetime_hourly": [
                    "self",
                    "freq"
                ],
                "test_get_value_integer": [
                    "self"
                ]
            },
            "TestContains": {
                "test_contains": [
                    "self"
                ],
                "test_contains_freq_mismatch": [
                    "self"
                ],
                "test_contains_nat": [
                    "self"
                ]
            },
            "TestAsOfLocs": {
                "test_asof_locs_mismatched_type": [
                    "self"
                ]
            }
        },
        "pandas.tests.indexes.period.test_asfreq": {
            "TestPeriodIndex": {
                "test_asfreq": [
                    "self"
                ],
                "test_asfreq_nat": [
                    "self"
                ],
                "test_asfreq_mult_pi": [
                    "self",
                    "freq"
                ],
                "test_asfreq_combined_pi": [
                    "self"
                ],
                "test_astype_asfreq": [
                    "self"
                ]
            }
        },
        "pandas.tests.indexes.period": {},
        "pandas.tests.tslibs.test_to_offset": {
            "test_to_offset": [
                "freq_input",
                "expected"
            ],
            "test_to_offset_negative": [
                "freqstr",
                "expected"
            ],
            "test_to_offset_invalid": [
                "freqstr"
            ],
            "test_to_offset_no_evaluate": [],
            "test_to_offset_tuple_unsupported": [],
            "test_to_offset_whitespace": [
                "freqstr",
                "expected"
            ],
            "test_to_offset_leading_zero": [
                "freqstr",
                "expected"
            ],
            "test_to_offset_leading_plus": [
                "freqstr",
                "expected"
            ],
            "test_to_offset_pd_timedelta": [
                "kwargs",
                "expected"
            ],
            "test_anchored_shortcuts": [
                "shortcut",
                "expected"
            ]
        },
        "pandas.tests.tslibs.test_ccalendar": {
            "test_get_day_of_year_numeric": [
                "date_tuple",
                "expected"
            ],
            "test_get_day_of_year_dt": [],
            "test_dt_correct_iso_8601_year_week_and_day": [
                "input_date_tuple",
                "expected_iso_tuple"
            ]
        },
        "pandas.tests.tslibs.test_libfrequencies": {
            "test_get_rule_month": [
                "obj",
                "expected"
            ]
        },
        "pandas.tests.tslibs.test_parse_iso8601": {
            "test_parsers_iso8601": [
                "date_str",
                "exp"
            ],
            "test_parsers_iso8601_invalid": [
                "date_str"
            ],
            "test_parsers_iso8601_invalid_offset_invalid": [],
            "test_parsers_iso8601_leading_space": []
        },
        "pandas.tests.tslibs.test_array_to_datetime": {
            "test_parsing_valid_dates": [
                "data",
                "expected"
            ],
            "test_parsing_timezone_offsets": [
                "dt_string",
                "expected_tz"
            ],
            "test_parsing_non_iso_timezone_offset": [],
            "test_parsing_different_timezone_offsets": [],
            "test_number_looking_strings_not_into_datetime": [
                "data"
            ],
            "test_coerce_outside_ns_bounds": [
                "invalid_date",
                "errors"
            ],
            "test_coerce_outside_ns_bounds_one_valid": [],
            "test_coerce_of_invalid_datetimes": [
                "errors"
            ],
            "test_to_datetime_barely_out_of_bounds": [],
            "test_datetime_subclass": [
                "data",
                "expected"
            ],
            "SubDatetime": {}
        },
        "pandas.tests.tslibs.test_timedeltas": {
            "test_delta_to_nanoseconds": [
                "obj",
                "expected"
            ],
            "test_delta_to_nanoseconds_error": [],
            "test_huge_nanoseconds_overflow": []
        },
        "pandas.tests.tslibs.test_timezones": {
            "test_cache_keys_are_distinct_for_pytz_vs_dateutil": [
                "tz_name"
            ],
            "test_tzlocal_repr": [],
            "test_tzlocal_maybe_get_tz": [],
            "test_tzlocal_offset": [],
            "infer_setup": [
                "request"
            ],
            "test_infer_tz_compat": [
                "infer_setup"
            ],
            "test_infer_tz_utc_localize": [
                "infer_setup"
            ],
            "test_infer_tz_mismatch": [
                "infer_setup",
                "ordered"
            ],
            "test_maybe_get_tz_invalid_types": []
        },
        "pandas.tests.tslibs.test_liboffsets": {
            "day_opt": [
                "request"
            ],
            "test_get_last_bday": [
                "dt",
                "exp_week_day",
                "exp_last_day"
            ],
            "test_get_first_bday": [
                "dt",
                "exp_week_day",
                "exp_first_day"
            ],
            "test_shift_month_dt": [
                "months",
                "day_opt",
                "expected"
            ],
            "test_shift_month_ts": [
                "months",
                "day_opt",
                "expected"
            ],
            "test_shift_month_error": [],
            "test_roll_qtrday_year": [
                "other",
                "expected",
                "n"
            ],
            "test_roll_qtrday_year2": [
                "other",
                "expected",
                "n"
            ],
            "test_get_day_of_month_error": [],
            "test_roll_qtr_day_not_mod_unequal": [
                "day_opt",
                "month",
                "n"
            ],
            "test_roll_qtr_day_mod_equal": [
                "other",
                "month",
                "exp_dict",
                "n",
                "day_opt"
            ],
            "test_roll_convention": [
                "n",
                "expected",
                "compare"
            ]
        },
        "pandas.tests.tslibs.test_api": {
            "test_namespace": []
        },
        "pandas.tests.tslibs.test_fields": {
            "test_fields_readonly": []
        },
        "pandas.tests.tslibs.test_parsing": {
            "test_parse_time_string": [],
            "test_parse_time_string_invalid_type": [],
            "test_parse_time_quarter_with_dash": [
                "dashed",
                "normal"
            ],
            "test_parse_time_quarter_with_dash_error": [
                "dashed"
            ],
            "test_does_not_convert_mixed_integer": [
                "date_string",
                "expected"
            ],
            "test_parsers_quarterly_with_freq_error": [
                "date_str",
                "kwargs",
                "msg"
            ],
            "test_parsers_quarterly_with_freq": [
                "date_str",
                "freq",
                "expected"
            ],
            "test_parsers_quarter_invalid": [
                "date_str"
            ],
            "test_parsers_month_freq": [
                "date_str",
                "expected"
            ],
            "test_guess_datetime_format_with_parseable_formats": [
                "string",
                "fmt"
            ],
            "test_guess_datetime_format_with_dayfirst": [
                "dayfirst",
                "expected"
            ],
            "test_guess_datetime_format_with_locale_specific_formats": [
                "string",
                "fmt"
            ],
            "test_guess_datetime_format_invalid_inputs": [
                "invalid_dt"
            ],
            "test_guess_datetime_format_no_padding": [
                "string",
                "fmt"
            ],
            "test_try_parse_dates": [],
            "test_parse_time_string_check_instance_type_raise_exception": []
        },
        "pandas.tests.tslibs.test_conversion": {
            "_compare_utc_to_local": [
                "tz_didx"
            ],
            "_compare_local_to_utc": [
                "tz_didx",
                "naive_didx"
            ],
            "test_tz_convert_single_matches_tz_convert_hourly": [
                "tz_aware_fixture"
            ],
            "test_tz_convert_single_matches_tz_convert": [
                "tz_aware_fixture",
                "freq"
            ],
            "test_tz_convert_corner": [
                "arr"
            ],
            "test_length_zero_copy": [
                "dtype",
                "copy"
            ],
            "test_ensure_datetime64ns_bigendian": [],
            "test_ensure_timedelta64ns_overflows": [],
            "test_localize_pydatetime_dt_types": [
                "dt",
                "expected"
            ],
            "SubDatetime": {}
        },
        "pandas.tests.tslibs": {},
        "pandas.tests.tslibs.test_period_asfreq": {
            "get_freq_code": [
                "freqstr"
            ],
            "test_intra_day_conversion_factors": [
                "freq1",
                "freq2",
                "expected"
            ],
            "test_period_ordinal_start_values": [
                "freq",
                "expected"
            ],
            "test_period_ordinal_week": [
                "dt",
                "expected"
            ],
            "test_period_ordinal_business_day": [
                "day",
                "expected"
            ]
        },
        "pandas.tests.plotting.test_frame": {
            "_generate_4_axes_via_gridspec": [],
            "TestDataFramePlots": {
                "setup_method": [
                    "self",
                    "method"
                ],
                "_assert_ytickslabels_visibility": [
                    "self",
                    "axes",
                    "expected"
                ],
                "_assert_xtickslabels_visibility": [
                    "self",
                    "axes",
                    "expected"
                ],
                "test_plot": [
                    "self"
                ],
                "test_integer_array_plot": [
                    "self"
                ],
                "test_mpl2_color_cycle_str": [
                    "self"
                ],
                "test_color_single_series_list": [
                    "self"
                ],
                "test_rgb_tuple_color": [
                    "self"
                ],
                "test_color_empty_string": [
                    "self"
                ],
                "test_color_and_style_arguments": [
                    "self"
                ],
                "test_nonnumeric_exclude": [
                    "self"
                ],
                "test_implicit_label": [
                    "self"
                ],
                "test_donot_overwrite_index_name": [
                    "self"
                ],
                "test_plot_xy": [
                    "self"
                ],
                "test_logscales": [
                    "self",
                    "input_log",
                    "expected_log"
                ],
                "test_invalid_logscale": [
                    "self",
                    "input_param"
                ],
                "test_xcompat": [
                    "self"
                ],
                "test_period_compat": [
                    "self"
                ],
                "test_unsorted_index": [
                    "self"
                ],
                "test_unsorted_index_lims": [
                    "self"
                ],
                "test_subplots": [
                    "self"
                ],
                "test_groupby_boxplot_sharey": [
                    "self"
                ],
                "test_groupby_boxplot_sharex": [
                    "self"
                ],
                "test_subplots_timeseries": [
                    "self"
                ],
                "test_subplots_timeseries_y_axis": [
                    "self"
                ],
                "test_subplots_timeseries_y_axis_not_supported": [
                    "self"
                ],
                "test_subplots_layout": [
                    "self"
                ],
                "test_subplots_warnings": [
                    "self"
                ],
                "test_subplots_multiple_axes": [
                    "self"
                ],
                "test_subplots_ts_share_axes": [
                    "self"
                ],
                "test_subplots_sharex_axes_existing_axes": [
                    "self"
                ],
                "test_subplots_dup_columns": [
                    "self"
                ],
                "test_negative_log": [
                    "self"
                ],
                "_compare_stacked_y_cood": [
                    "self",
                    "normal_lines",
                    "stacked_lines"
                ],
                "test_line_area_stacked": [
                    "self"
                ],
                "test_line_area_nan_df": [
                    "self"
                ],
                "test_line_lim": [
                    "self"
                ],
                "test_area_lim": [
                    "self"
                ],
                "test_bar_colors": [
                    "self"
                ],
                "test_bar_user_colors": [
                    "self"
                ],
                "test_bar_linewidth": [
                    "self"
                ],
                "test_bar_barwidth": [
                    "self"
                ],
                "test_bar_barwidth_position": [
                    "self"
                ],
                "test_bar_barwidth_position_int": [
                    "self"
                ],
                "test_bar_bottom_left": [
                    "self"
                ],
                "test_bar_nan": [
                    "self"
                ],
                "test_bar_categorical": [
                    "self"
                ],
                "test_plot_scatter": [
                    "self"
                ],
                "test_raise_error_on_datetime_time_data": [
                    "self"
                ],
                "test_scatterplot_datetime_data": [
                    "self"
                ],
                "test_scatterplot_object_data": [
                    "self"
                ],
                "test_if_scatterplot_colorbar_affects_xaxis_visibility": [
                    "self"
                ],
                "test_if_hexbin_xaxis_label_is_visible": [
                    "self"
                ],
                "test_if_scatterplot_colorbars_are_next_to_parent_axes": [
                    "self"
                ],
                "test_plot_scatter_with_categorical_data": [
                    "self",
                    "x",
                    "y"
                ],
                "test_plot_scatter_with_c": [
                    "self"
                ],
                "test_scatter_with_c_column_name_with_colors": [
                    "self",
                    "cmap"
                ],
                "test_plot_scatter_with_s": [
                    "self"
                ],
                "test_scatter_colors": [
                    "self"
                ],
                "test_scatter_colorbar_different_cmap": [
                    "self"
                ],
                "test_plot_bar": [
                    "self"
                ],
                "_check_bar_alignment": [
                    "self",
                    "df",
                    "kind",
                    "stacked",
                    "subplots",
                    "align",
                    "width",
                    "position"
                ],
                "test_bar_stacked_center": [
                    "self"
                ],
                "test_bar_center": [
                    "self"
                ],
                "test_bar_subplots_center": [
                    "self"
                ],
                "test_bar_align_single_column": [
                    "self"
                ],
                "test_bar_edge": [
                    "self"
                ],
                "test_bar_log_no_subplots": [
                    "self"
                ],
                "test_bar_log_subplots": [
                    "self"
                ],
                "test_boxplot": [
                    "self"
                ],
                "test_boxplot_vertical": [
                    "self"
                ],
                "test_boxplot_return_type": [
                    "self"
                ],
                "test_boxplot_subplots_return_type": [
                    "self"
                ],
                "test_kde_df": [
                    "self"
                ],
                "test_kde_missing_vals": [
                    "self"
                ],
                "test_hist_df": [
                    "self"
                ],
                "test_hist_weights": [
                    "self",
                    "weights"
                ],
                "_check_box_coord": [
                    "self",
                    "patches",
                    "expected_y",
                    "expected_h",
                    "expected_x",
                    "expected_w"
                ],
                "test_hist_df_coord": [
                    "self"
                ],
                "test_plot_int_columns": [
                    "self"
                ],
                "test_df_legend_labels": [
                    "self"
                ],
                "test_missing_marker_multi_plots_on_same_ax": [
                    "self"
                ],
                "test_legend_name": [
                    "self"
                ],
                "test_no_legend": [
                    "self"
                ],
                "test_style_by_column": [
                    "self"
                ],
                "test_line_label_none": [
                    "self"
                ],
                "test_line_colors": [
                    "self"
                ],
                "test_dont_modify_colors": [
                    "self"
                ],
                "test_line_colors_and_styles_subplots": [
                    "self"
                ],
                "test_area_colors": [
                    "self"
                ],
                "test_hist_colors": [
                    "self"
                ],
                "test_kde_colors": [
                    "self"
                ],
                "test_kde_colors_and_styles_subplots": [
                    "self"
                ],
                "test_boxplot_colors": [
                    "self"
                ],
                "test_specified_props_kwd_plot_box": [
                    "self",
                    "props",
                    "expected"
                ],
                "test_default_color_cycle": [
                    "self"
                ],
                "test_unordered_ts": [
                    "self"
                ],
                "test_kind_both_ways": [
                    "self"
                ],
                "test_all_invalid_plot_data": [
                    "self"
                ],
                "test_partially_invalid_plot_data": [
                    "self"
                ],
                "test_invalid_kind": [
                    "self"
                ],
                "test_invalid_xy_args": [
                    "self",
                    "x",
                    "y",
                    "lbl"
                ],
                "test_invalid_xy_args_dup_cols": [
                    "self",
                    "x",
                    "y"
                ],
                "test_y_listlike": [
                    "self",
                    "x",
                    "y",
                    "lbl",
                    "colors"
                ],
                "test_xy_args_integer": [
                    "self",
                    "x",
                    "y",
                    "colnames"
                ],
                "test_hexbin_basic": [
                    "self"
                ],
                "test_hexbin_with_c": [
                    "self"
                ],
                "test_hexbin_cmap": [
                    "self"
                ],
                "test_no_color_bar": [
                    "self"
                ],
                "test_allow_cmap": [
                    "self"
                ],
                "test_pie_df": [
                    "self"
                ],
                "test_pie_df_nan": [
                    "self"
                ],
                "test_errorbar_plot": [
                    "self"
                ],
                "test_errorbar_plot_iterator": [
                    "self"
                ],
                "test_errorbar_with_integer_column_names": [
                    "self"
                ],
                "test_errorbar_with_partial_columns": [
                    "self"
                ],
                "test_errorbar_timeseries": [
                    "self"
                ],
                "test_errorbar_asymmetrical": [
                    "self"
                ],
                "test_table": [
                    "self"
                ],
                "test_errorbar_scatter": [
                    "self"
                ],
                "test_sharex_and_ax": [
                    "self"
                ],
                "test_sharey_and_ax": [
                    "self"
                ],
                "test_memory_leak": [
                    "self"
                ],
                "test_df_subplots_patterns_minorticks": [
                    "self"
                ],
                "test_df_gridspec_patterns": [
                    "self"
                ],
                "test_df_grid_settings": [
                    "self"
                ],
                "test_invalid_colormap": [
                    "self"
                ],
                "test_plain_axes": [
                    "self"
                ],
                "test_passed_bar_colors": [
                    "self"
                ],
                "test_rcParams_bar_colors": [
                    "self"
                ],
                "test_secondary_axis_font_size": [
                    "self",
                    "method"
                ],
                "test_x_string_values_ticks": [
                    "self"
                ],
                "test_x_multiindex_values_ticks": [
                    "self"
                ],
                "test_xlim_plot_line": [
                    "self",
                    "kind"
                ],
                "test_xlim_plot_line_correctly_in_mixed_plot_type": [
                    "self"
                ],
                "test_subplots_sharex_false": [
                    "self"
                ],
                "test_plot_no_rows": [
                    "self"
                ],
                "test_plot_no_numeric_data": [
                    "self"
                ],
                "test_missing_markers_legend": [
                    "self"
                ],
                "test_missing_markers_legend_using_style": [
                    "self"
                ],
                "test_colors_of_columns_with_same_name": [
                    "self"
                ],
                "test_xlabel_ylabel_dataframe_single_plot": [
                    "self",
                    "kind",
                    "index_name",
                    "old_label",
                    "new_label"
                ],
                "test_xlabel_ylabel_dataframe_subplots": [
                    "self",
                    "kind",
                    "index_name",
                    "old_label",
                    "new_label"
                ]
            }
        },
        "pandas.tests.plotting.test_groupby": {
            "TestDataFrameGroupByPlots": {
                "test_series_groupby_plotting_nominally_works": [
                    "self"
                ],
                "test_plotting_with_float_index_works": [
                    "self"
                ],
                "test_hist_single_row": [
                    "self"
                ],
                "test_plot_submethod_works": [
                    "self"
                ],
                "test_plot_kwargs": [
                    "self"
                ],
                "test_groupby_hist_frame_with_legend": [
                    "self",
                    "column",
                    "expected_axes_num"
                ],
                "test_groupby_hist_frame_with_legend_raises": [
                    "self",
                    "column"
                ],
                "test_groupby_hist_series_with_legend": [
                    "self"
                ],
                "test_groupby_hist_series_with_legend_raises": [
                    "self"
                ]
            }
        },
        "pandas.tests.plotting.common": {
            "_check_plot_works": [
                "f",
                "filterwarnings"
            ],
            "curpath": [],
            "TestPlotBase": {
                "setup_method": [
                    "self",
                    "method"
                ],
                "teardown_method": [
                    "self",
                    "method"
                ],
                "plt": [
                    "self"
                ],
                "colorconverter": [
                    "self"
                ],
                "_check_legend_labels": [
                    "self",
                    "axes",
                    "labels",
                    "visible"
                ],
                "_check_legend_marker": [
                    "self",
                    "ax",
                    "expected_markers",
                    "visible"
                ],
                "_check_data": [
                    "self",
                    "xp",
                    "rs"
                ],
                "_check_visible": [
                    "self",
                    "collections",
                    "visible"
                ],
                "_get_colors_mapped": [
                    "self",
                    "series",
                    "colors"
                ],
                "_check_colors": [
                    "self",
                    "collections",
                    "linecolors",
                    "facecolors",
                    "mapping"
                ],
                "_check_text_labels": [
                    "self",
                    "texts",
                    "expected"
                ],
                "_check_ticks_props": [
                    "self",
                    "axes",
                    "xlabelsize",
                    "xrot",
                    "ylabelsize",
                    "yrot"
                ],
                "_check_ax_scales": [
                    "self",
                    "axes",
                    "xaxis",
                    "yaxis"
                ],
                "_check_axes_shape": [
                    "self",
                    "axes",
                    "axes_num",
                    "layout",
                    "figsize"
                ],
                "_get_axes_layout": [
                    "self",
                    "axes"
                ],
                "_flatten_visible": [
                    "self",
                    "axes"
                ],
                "_check_has_errorbars": [
                    "self",
                    "axes",
                    "xerr",
                    "yerr"
                ],
                "_check_box_return_type": [
                    "self",
                    "returned",
                    "return_type",
                    "expected_keys",
                    "check_ax_title"
                ],
                "_check_grid_settings": [
                    "self",
                    "obj",
                    "kinds",
                    "kws"
                ],
                "_unpack_cycler": [
                    "self",
                    "rcParams",
                    "field"
                ]
            }
        },
        "pandas.tests.plotting.test_hist_method": {
            "TestSeriesPlots": {
                "setup_method": [
                    "self",
                    "method"
                ],
                "test_hist_legacy": [
                    "self"
                ],
                "test_hist_bins_legacy": [
                    "self"
                ],
                "test_hist_layout": [
                    "self"
                ],
                "test_hist_layout_with_by": [
                    "self"
                ],
                "test_hist_no_overlap": [
                    "self"
                ],
                "test_hist_by_no_extra_plots": [
                    "self"
                ],
                "test_plot_fails_when_ax_differs_from_figure": [
                    "self"
                ],
                "test_hist_with_legend": [
                    "self",
                    "by",
                    "expected_axes_num",
                    "expected_layout"
                ],
                "test_hist_with_legend_raises": [
                    "self",
                    "by"
                ]
            },
            "TestDataFramePlots": {
                "test_hist_df_legacy": [
                    "self"
                ],
                "test_hist_non_numerical_raises": [
                    "self"
                ],
                "test_hist_layout": [
                    "self"
                ],
                "test_tight_layout": [
                    "self"
                ],
                "test_hist_subplot_xrot": [
                    "self"
                ],
                "test_hist_column_order_unchanged": [
                    "self",
                    "column",
                    "expected"
                ],
                "test_hist_with_legend": [
                    "self",
                    "by",
                    "column"
                ],
                "test_hist_with_legend_raises": [
                    "self",
                    "by",
                    "column"
                ]
            },
            "TestDataFrameGroupByPlots": {
                "test_grouped_hist_legacy": [
                    "self"
                ],
                "test_grouped_hist_legacy2": [
                    "self"
                ],
                "test_grouped_hist_layout": [
                    "self"
                ],
                "test_grouped_hist_multiple_axes": [
                    "self"
                ],
                "test_axis_share_x": [
                    "self"
                ],
                "test_axis_share_y": [
                    "self"
                ],
                "test_axis_share_xy": [
                    "self"
                ]
            }
        },
        "pandas.tests.plotting.test_datetimelike": {
            "_check_plot_works": [
                "f",
                "freq",
                "series"
            ],
            "TestTSPlot": {
                "setup_method": [
                    "self",
                    "method"
                ],
                "teardown_method": [
                    "self",
                    "method"
                ],
                "test_ts_plot_with_tz": [
                    "self",
                    "tz_aware_fixture"
                ],
                "test_fontsize_set_correctly": [
                    "self"
                ],
                "test_frame_inferred": [
                    "self"
                ],
                "test_is_error_nozeroindex": [
                    "self"
                ],
                "test_nonnumeric_exclude": [
                    "self"
                ],
                "test_tsplot": [
                    "self"
                ],
                "test_both_style_and_color": [
                    "self"
                ],
                "test_high_freq": [
                    "self"
                ],
                "test_get_datevalue": [
                    "self"
                ],
                "test_ts_plot_format_coord": [
                    "self"
                ],
                "test_line_plot_period_series": [
                    "self"
                ],
                "test_line_plot_period_mlt_series": [
                    "self",
                    "frqncy"
                ],
                "test_line_plot_datetime_series": [
                    "self"
                ],
                "test_line_plot_period_frame": [
                    "self"
                ],
                "test_line_plot_period_mlt_frame": [
                    "self",
                    "frqncy"
                ],
                "test_line_plot_datetime_frame": [
                    "self"
                ],
                "test_line_plot_inferred_freq": [
                    "self"
                ],
                "test_fake_inferred_business": [
                    "self"
                ],
                "test_plot_offset_freq": [
                    "self"
                ],
                "test_plot_multiple_inferred_freq": [
                    "self"
                ],
                "test_uhf": [
                    "self"
                ],
                "test_irreg_hf": [
                    "self"
                ],
                "test_irregular_datetime64_repr_bug": [
                    "self"
                ],
                "test_business_freq": [
                    "self"
                ],
                "test_business_freq_convert": [
                    "self"
                ],
                "test_freq_with_no_period_alias": [
                    "self"
                ],
                "test_nonzero_base": [
                    "self"
                ],
                "test_dataframe": [
                    "self"
                ],
                "test_axis_limits": [
                    "self"
                ],
                "test_get_finder": [
                    "self"
                ],
                "test_finder_daily": [
                    "self"
                ],
                "test_finder_quarterly": [
                    "self"
                ],
                "test_finder_monthly": [
                    "self"
                ],
                "test_finder_monthly_long": [
                    "self"
                ],
                "test_finder_annual": [
                    "self"
                ],
                "test_finder_minutely": [
                    "self"
                ],
                "test_finder_hourly": [
                    "self"
                ],
                "test_gaps": [
                    "self"
                ],
                "test_gap_upsample": [
                    "self"
                ],
                "test_secondary_y": [
                    "self"
                ],
                "test_secondary_y_ts": [
                    "self"
                ],
                "test_secondary_kde": [
                    "self"
                ],
                "test_secondary_bar": [
                    "self"
                ],
                "test_secondary_frame": [
                    "self"
                ],
                "test_secondary_bar_frame": [
                    "self"
                ],
                "test_mixed_freq_regular_first": [
                    "self"
                ],
                "test_mixed_freq_irregular_first": [
                    "self"
                ],
                "test_mixed_freq_regular_first_df": [
                    "self"
                ],
                "test_mixed_freq_irregular_first_df": [
                    "self"
                ],
                "test_mixed_freq_hf_first": [
                    "self"
                ],
                "test_mixed_freq_alignment": [
                    "self"
                ],
                "test_mixed_freq_lf_first": [
                    "self"
                ],
                "test_mixed_freq_irreg_period": [
                    "self"
                ],
                "test_mixed_freq_shared_ax": [
                    "self"
                ],
                "test_nat_handling": [
                    "self"
                ],
                "test_to_weekly_resampling": [
                    "self"
                ],
                "test_from_weekly_resampling": [
                    "self"
                ],
                "test_from_resampling_area_line_mixed": [
                    "self"
                ],
                "test_mixed_freq_second_millisecond": [
                    "self"
                ],
                "test_irreg_dtypes": [
                    "self"
                ],
                "test_time": [
                    "self"
                ],
                "test_time_change_xlim": [
                    "self"
                ],
                "test_time_musec": [
                    "self"
                ],
                "test_secondary_upsample": [
                    "self"
                ],
                "test_secondary_legend": [
                    "self"
                ],
                "test_format_date_axis": [
                    "self"
                ],
                "test_ax_plot": [
                    "self"
                ],
                "test_mpl_nopandas": [
                    "self"
                ],
                "test_irregular_ts_shared_ax_xlim": [
                    "self"
                ],
                "test_secondary_y_non_ts_xlim": [
                    "self"
                ],
                "test_secondary_y_regular_ts_xlim": [
                    "self"
                ],
                "test_secondary_y_mixed_freq_ts_xlim": [
                    "self"
                ],
                "test_secondary_y_irregular_ts_xlim": [
                    "self"
                ],
                "test_plot_outofbounds_datetime": [
                    "self"
                ],
                "test_format_timedelta_ticks_narrow": [
                    "self"
                ],
                "test_format_timedelta_ticks_wide": [
                    "self"
                ],
                "test_timedelta_plot": [
                    "self"
                ],
                "test_hist": [
                    "self"
                ],
                "test_overlapping_datetime": [
                    "self"
                ],
                "test_add_matplotlib_datetime64": [
                    "self"
                ],
                "test_matplotlib_scatter_datetime64": [
                    "self"
                ]
            }
        },
        "pandas.tests.plotting.test_common": {
            "TestCommon": {
                "test__check_ticks_props": [
                    "self"
                ]
            }
        },
        "pandas.tests.plotting.test_backend": {
            "restore_backend": [],
            "test_backend_is_not_module": [],
            "test_backend_is_correct": [
                "monkeypatch",
                "restore_backend"
            ],
            "test_backend_can_be_set_in_plot_call": [
                "monkeypatch",
                "restore_backend"
            ],
            "test_register_entrypoint": [
                "restore_backend"
            ],
            "test_setting_backend_without_plot_raises": [],
            "test_no_matplotlib_ok": [],
            "test_extra_kinds_ok": [
                "monkeypatch",
                "restore_backend"
            ]
        },
        "pandas.tests.plotting.test_misc": {
            "test_import_error_message": [],
            "test_get_accessor_args": [],
            "TestSeriesPlots": {
                "setup_method": [
                    "self",
                    "method"
                ],
                "test_autocorrelation_plot": [
                    "self"
                ],
                "test_lag_plot": [
                    "self"
                ],
                "test_bootstrap_plot": [
                    "self"
                ]
            },
            "TestDataFramePlots": {
                "test_scatter_matrix_axis": [
                    "self"
                ],
                "test_andrews_curves": [
                    "self",
                    "iris"
                ],
                "test_parallel_coordinates": [
                    "self",
                    "iris"
                ],
                "test_parallel_coordinates_with_sorted_labels": [
                    "self"
                ],
                "test_radviz": [
                    "self",
                    "iris"
                ],
                "test_subplot_titles": [
                    "self",
                    "iris"
                ],
                "test_get_standard_colors_random_seed": [
                    "self"
                ],
                "test_get_standard_colors_default_num_colors": [
                    "self"
                ],
                "test_plot_single_color": [
                    "self"
                ],
                "test_get_standard_colors_no_appending": [
                    "self"
                ],
                "test_dictionary_color": [
                    "self"
                ]
            }
        },
        "pandas.tests.plotting.test_converter": {
            "test_registry_mpl_resets": [],
            "test_timtetonum_accepts_unicode": [],
            "TestRegistration": {
                "test_register_by_default": [
                    "self"
                ],
                "test_registering_no_warning": [
                    "self"
                ],
                "test_pandas_plots_register": [
                    "self"
                ],
                "test_matplotlib_formatters": [
                    "self"
                ],
                "test_option_no_warning": [
                    "self"
                ],
                "test_registry_resets": [
                    "self"
                ]
            },
            "TestDateTimeConverter": {
                "setup_method": [
                    "self",
                    "method"
                ],
                "test_convert_accepts_unicode": [
                    "self"
                ],
                "test_conversion": [
                    "self"
                ],
                "test_conversion_float": [
                    "self"
                ],
                "test_conversion_outofbounds_datetime": [
                    "self"
                ],
                "test_time_formatter": [
                    "self",
                    "time",
                    "format_expected"
                ],
                "test_dateindex_conversion": [
                    "self"
                ],
                "test_resolution": [
                    "self"
                ],
                "test_convert_nested": [
                    "self"
                ]
            },
            "TestPeriodConverter": {
                "setup_method": [
                    "self",
                    "method"
                ],
                "test_convert_accepts_unicode": [
                    "self"
                ],
                "test_conversion": [
                    "self"
                ],
                "test_integer_passthrough": [
                    "self"
                ],
                "test_convert_nested": [
                    "self"
                ]
            },
            "TestTimeDeltaConverter": {
                "test_format_timedelta_ticks": [
                    "self",
                    "x",
                    "decimal",
                    "format_expected"
                ]
            }
        },
        "pandas.tests.plotting.test_series": {
            "TestSeriesPlots": {
                "setup_method": [
                    "self",
                    "method"
                ],
                "test_plot": [
                    "self"
                ],
                "test_plot_figsize_and_title": [
                    "self"
                ],
                "test_dont_modify_rcParams": [
                    "self"
                ],
                "test_ts_line_lim": [
                    "self"
                ],
                "test_ts_area_lim": [
                    "self"
                ],
                "test_label": [
                    "self"
                ],
                "test_boolean": [
                    "self"
                ],
                "test_line_area_nan_series": [
                    "self"
                ],
                "test_line_use_index_false": [
                    "self"
                ],
                "test_bar_log": [
                    "self"
                ],
                "test_bar_ignore_index": [
                    "self"
                ],
                "test_bar_user_colors": [
                    "self"
                ],
                "test_rotation": [
                    "self"
                ],
                "test_irregular_datetime": [
                    "self"
                ],
                "test_unsorted_index_xlim": [
                    "self"
                ],
                "test_pie_series": [
                    "self"
                ],
                "test_pie_nan": [
                    "self"
                ],
                "test_hist_df_kwargs": [
                    "self"
                ],
                "test_hist_df_with_nonnumerics": [
                    "self"
                ],
                "test_hist_legacy": [
                    "self"
                ],
                "test_hist_bins_legacy": [
                    "self"
                ],
                "test_hist_layout": [
                    "self"
                ],
                "test_hist_layout_with_by": [
                    "self"
                ],
                "test_hist_no_overlap": [
                    "self"
                ],
                "test_hist_secondary_legend": [
                    "self"
                ],
                "test_df_series_secondary_legend": [
                    "self"
                ],
                "test_secondary_logy": [
                    "self",
                    "input_logy",
                    "expected_scale"
                ],
                "test_plot_fails_with_dupe_color_and_style": [
                    "self"
                ],
                "test_hist_kde": [
                    "self"
                ],
                "test_kde_kwargs": [
                    "self"
                ],
                "test_kde_missing_vals": [
                    "self"
                ],
                "test_hist_kwargs": [
                    "self"
                ],
                "test_hist_kde_color": [
                    "self"
                ],
                "test_boxplot_series": [
                    "self"
                ],
                "test_kind_both_ways": [
                    "self"
                ],
                "test_invalid_plot_data": [
                    "self"
                ],
                "test_valid_object_plot": [
                    "self"
                ],
                "test_partially_invalid_plot_data": [
                    "self"
                ],
                "test_invalid_kind": [
                    "self"
                ],
                "test_dup_datetime_index_plot": [
                    "self"
                ],
                "test_errorbar_asymmetrical": [
                    "self"
                ],
                "test_errorbar_plot": [
                    "self"
                ],
                "test_table": [
                    "self"
                ],
                "test_series_grid_settings": [
                    "self"
                ],
                "test_standard_colors": [
                    "self"
                ],
                "test_standard_colors_all": [
                    "self"
                ],
                "test_series_plot_color_kwargs": [
                    "self"
                ],
                "test_time_series_plot_color_kwargs": [
                    "self"
                ],
                "test_time_series_plot_color_with_empty_kwargs": [
                    "self"
                ],
                "test_xticklabels": [
                    "self"
                ],
                "test_xtick_barPlot": [
                    "self"
                ],
                "test_custom_business_day_freq": [
                    "self"
                ],
                "test_plot_accessor_updates_on_inplace": [
                    "self"
                ],
                "test_plot_xlim_for_series": [
                    "self",
                    "kind"
                ],
                "test_plot_no_rows": [
                    "self"
                ],
                "test_plot_no_numeric_data": [
                    "self"
                ],
                "test_style_single_ok": [
                    "self"
                ],
                "test_xlabel_ylabel_series": [
                    "self",
                    "kind",
                    "index_name",
                    "old_label",
                    "new_label"
                ]
            }
        },
        "pandas.tests.plotting.test_boxplot_method": {
            "TestDataFramePlots": {
                "test_boxplot_legacy1": [
                    "self"
                ],
                "test_boxplot_legacy2": [
                    "self"
                ],
                "test_boxplot_return_type_none": [
                    "self"
                ],
                "test_boxplot_return_type_legacy": [
                    "self"
                ],
                "test_boxplot_axis_limits": [
                    "self"
                ],
                "test_boxplot_empty_column": [
                    "self"
                ],
                "test_figsize": [
                    "self"
                ],
                "test_fontsize": [
                    "self"
                ],
                "test_boxplot_numeric_data": [
                    "self"
                ],
                "test_color_kwd": [
                    "self",
                    "colors_kwd",
                    "expected"
                ],
                "test_color_kwd_errors": [
                    "self",
                    "dict_colors",
                    "msg"
                ],
                "test_specified_props_kwd": [
                    "self",
                    "props",
                    "expected"
                ]
            },
            "TestDataFrameGroupByPlots": {
                "test_boxplot_legacy1": [
                    "self"
                ],
                "test_boxplot_legacy2": [
                    "self"
                ],
                "test_boxplot_legacy3": [
                    "self"
                ],
                "test_grouped_plot_fignums": [
                    "self"
                ],
                "test_grouped_box_return_type": [
                    "self"
                ],
                "test_grouped_box_layout": [
                    "self"
                ],
                "test_grouped_box_multiple_axes": [
                    "self"
                ],
                "test_fontsize": [
                    "self"
                ]
            }
        },
        "pandas.tests.plotting": {},
        "pandas.tests.indexing.test_check_indexer": {
            "test_valid_input": [
                "indexer",
                "expected"
            ],
            "test_boolean_na_returns_indexer": [
                "indexer"
            ],
            "test_bool_raise_length": [
                "indexer"
            ],
            "test_int_raise_missing_values": [
                "indexer"
            ],
            "test_raise_invalid_array_dtypes": [
                "indexer"
            ],
            "test_pass_through_non_array_likes": [
                "indexer"
            ]
        },
        "pandas.tests.indexing.test_floats": {
            "gen_obj": [
                "klass",
                "index"
            ],
            "TestFloatIndexers": {
                "check": [
                    "self",
                    "result",
                    "original",
                    "indexer",
                    "getitem"
                ],
                "test_scalar_error": [
                    "self",
                    "series_with_simple_index"
                ],
                "test_scalar_non_numeric": [
                    "self",
                    "index_func",
                    "klass"
                ],
                "test_scalar_non_numeric_series_fallback": [
                    "self",
                    "index_func"
                ],
                "test_scalar_with_mixed": [
                    "self"
                ],
                "test_scalar_integer": [
                    "self",
                    "index_func",
                    "klass"
                ],
                "test_scalar_float": [
                    "self",
                    "klass"
                ],
                "test_slice_non_numeric": [
                    "self",
                    "index_func",
                    "l",
                    "klass"
                ],
                "test_slice_integer": [
                    "self"
                ],
                "test_integer_positional_indexing": [
                    "self",
                    "l"
                ],
                "test_slice_integer_frame_getitem": [
                    "self",
                    "index_func"
                ],
                "test_float_slice_getitem_with_integer_index_raises": [
                    "self",
                    "l",
                    "index_func"
                ],
                "test_slice_float": [
                    "self",
                    "l",
                    "klass"
                ],
                "test_floating_index_doc_example": [
                    "self"
                ],
                "test_floating_misc": [
                    "self"
                ],
                "test_floating_tuples": [
                    "self"
                ],
                "test_float64index_slicing_bug": [
                    "self"
                ]
            }
        },
        "pandas.tests.indexing.test_loc": {
            "test_series_loc_getitem_label_list_missing_values": [],
            "test_loc_getitem_label_list_integer_labels": [
                "columns",
                "column_key",
                "expected_columns",
                "check_column_type"
            ],
            "test_loc_setitem_float_intindex": [],
            "test_loc_axis_1_slice": [],
            "test_loc_set_dataframe_multiindex": [],
            "test_loc_mixed_int_float": [],
            "test_loc_with_positional_slice_deprecation": [],
            "test_loc_slice_disallows_positional": [],
            "test_loc_datetimelike_mismatched_dtypes": [],
            "test_loc_with_period_index_indexer": [],
            "TestLoc": {
                "test_loc_getitem_int": [
                    "self"
                ],
                "test_loc_getitem_label": [
                    "self"
                ],
                "test_loc_getitem_label_out_of_range": [
                    "self"
                ],
                "test_loc_getitem_label_list": [
                    "self"
                ],
                "test_loc_getitem_label_list_with_missing": [
                    "self"
                ],
                "test_loc_getitem_label_list_fails": [
                    "self"
                ],
                "test_loc_getitem_label_array_like": [
                    "self"
                ],
                "test_loc_getitem_bool": [
                    "self"
                ],
                "test_loc_getitem_label_slice": [
                    "self"
                ],
                "test_setitem_from_duplicate_axis": [
                    "self"
                ]
            },
            "TestLoc2": {
                "test_loc_getitem_dups": [
                    "self"
                ],
                "test_loc_getitem_dups2": [
                    "self"
                ],
                "test_loc_setitem_dups": [
                    "self"
                ],
                "test_loc_setitem_slice": [
                    "self"
                ],
                "test_loc_setitem_dtype": [
                    "self"
                ],
                "test_getitem_label_list_with_missing": [
                    "self"
                ],
                "test_loc_getitem_bool_diff_len": [
                    "self",
                    "index"
                ],
                "test_loc_getitem_int_slice": [
                    "self"
                ],
                "test_loc_to_fail": [
                    "self"
                ],
                "test_loc_getitem_list_with_fail": [
                    "self"
                ],
                "test_loc_index": [
                    "self"
                ],
                "test_loc_general": [
                    "self"
                ],
                "test_loc_setitem_consistency": [
                    "self"
                ],
                "test_loc_setitem_consistency_empty": [
                    "self"
                ],
                "test_loc_setitem_consistency_slice_column_len": [
                    "self"
                ],
                "test_loc_assign_non_ns_datetime": [
                    "self",
                    "unit"
                ],
                "test_loc_modify_datetime": [
                    "self"
                ],
                "test_loc_setitem_frame": [
                    "self"
                ],
                "test_loc_setitem_frame_multiples": [
                    "self"
                ],
                "test_loc_setitem_with_scalar_index": [
                    "self",
                    "indexer",
                    "value"
                ],
                "test_loc_setitem_missing_columns": [
                    "self",
                    "index",
                    "box",
                    "expected"
                ],
                "test_loc_coercion": [
                    "self"
                ],
                "test_setitem_new_key_tz": [
                    "self"
                ],
                "test_loc_non_unique": [
                    "self"
                ],
                "test_loc_non_unique_memory_error": [
                    "self"
                ],
                "test_loc_name": [
                    "self"
                ],
                "test_loc_empty_list_indexer_is_ok": [
                    "self"
                ],
                "test_identity_slice_returns_new_object": [
                    "self"
                ],
                "test_loc_copy_vs_view": [
                    "self"
                ],
                "test_loc_uint64": [
                    "self"
                ],
                "test_loc_setitem_empty_append": [
                    "self"
                ],
                "test_loc_setitem_empty_append_raises": [
                    "self"
                ],
                "test_indexing_zerodim_np_array": [
                    "self"
                ],
                "test_series_indexing_zerodim_np_array": [
                    "self"
                ],
                "test_loc_reverse_assignment": [
                    "self"
                ]
            }
        },
        "pandas.tests.indexing.common": {
            "_mklbl": [
                "prefix",
                "n"
            ],
            "_axify": [
                "obj",
                "key",
                "axis"
            ],
            "Base": {
                "setup_method": [
                    "self",
                    "method"
                ],
                "generate_indices": [
                    "self",
                    "f",
                    "values"
                ],
                "get_value": [
                    "self",
                    "name",
                    "f",
                    "i",
                    "values"
                ],
                "check_values": [
                    "self",
                    "f",
                    "func",
                    "values"
                ],
                "check_result": [
                    "self",
                    "method",
                    "key",
                    "typs",
                    "axes",
                    "fails"
                ]
            }
        },
        "pandas.tests.indexing.test_datetime": {
            "TestDatetimeIndex": {
                "test_setitem_with_datetime_tz": [
                    "self"
                ],
                "test_indexing_with_datetime_tz": [
                    "self"
                ],
                "test_consistency_with_tz_aware_scalar": [
                    "self"
                ],
                "test_indexing_with_datetimeindex_tz": [
                    "self"
                ],
                "test_partial_setting_with_datetimelike_dtype": [
                    "self"
                ],
                "test_loc_setitem_datetime": [
                    "self"
                ],
                "test_series_partial_set_datetime": [
                    "self"
                ],
                "test_series_partial_set_period": [
                    "self"
                ],
                "test_nanosecond_getitem_setitem_with_tz": [
                    "self"
                ],
                "test_loc_getitem_across_dst": [
                    "self"
                ],
                "test_loc_incremental_setitem_with_dst": [
                    "self"
                ],
                "test_loc_setitem_with_existing_dst": [
                    "self"
                ],
                "test_loc_str_slicing": [
                    "self"
                ],
                "test_loc_label_slicing": [
                    "self"
                ],
                "test_getitem_slice_date": [
                    "self",
                    "slice_",
                    "positions"
                ]
            }
        },
        "pandas.tests.indexing.test_categorical": {
            "TestCategoricalIndex": {
                "setup_method": [
                    "self",
                    "method"
                ],
                "test_loc_scalar": [
                    "self"
                ],
                "test_getitem_scalar": [
                    "self"
                ],
                "test_slicing": [
                    "self"
                ],
                "test_slicing_and_getting_ops": [
                    "self"
                ],
                "test_slicing_doc_examples": [
                    "self"
                ],
                "test_getitem_category_type": [
                    "self"
                ],
                "test_loc_listlike": [
                    "self"
                ],
                "test_loc_listlike_dtypes": [
                    "self"
                ],
                "test_get_indexer_array": [
                    "self"
                ],
                "test_get_indexer_same_categories_same_order": [
                    "self"
                ],
                "test_get_indexer_same_categories_different_order": [
                    "self"
                ],
                "test_getitem_with_listlike": [
                    "self"
                ],
                "test_setitem_listlike": [
                    "self"
                ],
                "test_ix_categorical_index": [
                    "self"
                ],
                "test_read_only_source": [
                    "self"
                ],
                "test_reindexing": [
                    "self"
                ],
                "test_loc_slice": [
                    "self"
                ],
                "test_loc_and_at_with_categorical_index": [
                    "self"
                ],
                "test_boolean_selection": [
                    "self"
                ],
                "test_indexing_with_category": [
                    "self"
                ],
                "test_map_with_dict_or_series": [
                    "self"
                ],
                "test_loc_with_non_string_categories": [
                    "self",
                    "idx_values",
                    "ordered"
                ]
            }
        },
        "pandas.tests.indexing.test_partial": {
            "TestPartialSetting": {
                "test_partial_setting": [
                    "self"
                ],
                "test_partial_setting_mixed_dtype": [
                    "self"
                ],
                "test_series_partial_set": [
                    "self"
                ],
                "test_series_partial_set_with_name": [
                    "self"
                ],
                "test_partial_set_invalid": [
                    "self"
                ],
                "test_partial_set_empty_series": [
                    "self"
                ],
                "test_partial_set_empty_frame": [
                    "self"
                ],
                "test_partial_set_empty_frame_row": [
                    "self"
                ],
                "test_partial_set_empty_frame_set_series": [
                    "self"
                ],
                "test_partial_set_empty_frame_empty_copy_assignment": [
                    "self"
                ],
                "test_partial_set_empty_frame_empty_consistencies": [
                    "self"
                ],
                "test_loc_with_list_of_strings_representing_datetimes": [
                    "self",
                    "idx",
                    "labels",
                    "expected_idx"
                ],
                "test_loc_with_list_of_strings_representing_datetimes_missing_value": [
                    "self",
                    "idx",
                    "labels"
                ],
                "test_loc_with_list_of_strings_representing_datetimes_not_matched_type": [
                    "self",
                    "idx",
                    "labels",
                    "msg"
                ],
                "test_indexing_timeseries_regression": [
                    "self"
                ]
            }
        },
        "pandas.tests.indexing.test_indexing_slow": {
            "TestIndexingSlow": {
                "test_large_dataframe_indexing": [
                    "self"
                ]
            }
        },
        "pandas.tests.indexing.test_timedelta": {
            "TestTimedeltaIndexing": {
                "test_loc_setitem_bool_mask": [
                    "self"
                ],
                "test_list_like_indexing": [
                    "self",
                    "indexer",
                    "expected"
                ],
                "test_string_indexing": [
                    "self"
                ],
                "test_setitem_mask_na_value_td64": [
                    "self",
                    "value"
                ],
                "test_listlike_setitem": [
                    "self",
                    "value"
                ],
                "test_numpy_timedelta_scalar_indexing": [
                    "self",
                    "start",
                    "stop",
                    "expected_slice"
                ],
                "test_roundtrip_thru_setitem": [
                    "self"
                ],
                "test_loc_str_slicing": [
                    "self"
                ],
                "test_loc_slicing": [
                    "self"
                ]
            }
        },
        "pandas.tests.indexing.test_scalar": {
            "test_iat_dont_wrap_object_datetimelike": [],
            "test_iat_series_with_period_index": [],
            "test_at_with_tuple_index_get": [],
            "test_at_with_tuple_index_set": [],
            "test_multiindex_at_get": [],
            "test_multiindex_at_set": [],
            "TestScalar": {
                "test_at_and_iat_get": [
                    "self",
                    "kind"
                ],
                "test_at_and_iat_set": [
                    "self",
                    "kind"
                ]
            },
            "TestScalar2": {
                "test_at_iat_coercion": [
                    "self"
                ],
                "test_iat_invalid_args": [
                    "self"
                ],
                "test_imethods_with_dups": [
                    "self"
                ],
                "test_frame_at_with_duplicate_axes": [
                    "self"
                ],
                "test_frame_at_with_duplicate_axes_requires_scalar_lookup": [
                    "self"
                ],
                "test_series_at_raises_type_error": [
                    "self"
                ],
                "test_frame_raises_key_error": [
                    "self"
                ],
                "test_series_at_raises_key_error": [
                    "self"
                ],
                "test_frame_at_raises_key_error": [
                    "self"
                ],
                "test_getitem_list_missing_key": [
                    "self"
                ],
                "test_at_with_tz": [
                    "self"
                ],
                "test_series_set_tz_timestamp": [
                    "self",
                    "tz_naive_fixture"
                ],
                "test_mixed_index_at_iat_loc_iloc_series": [
                    "self"
                ],
                "test_mixed_index_at_iat_loc_iloc_dataframe": [
                    "self"
                ],
                "test_iat_setter_incompatible_assignment": [
                    "self"
                ],
                "test_getitem_zerodim_np_array": [
                    "self"
                ]
            }
        },
        "pandas.tests.indexing.test_indexers": {
            "test_length_of_indexer": [],
            "test_is_scalar_indexer": [],
            "TestValidateIndices": {
                "test_validate_indices_ok": [
                    "self"
                ],
                "test_validate_indices_low": [
                    "self"
                ],
                "test_validate_indices_high": [
                    "self"
                ],
                "test_validate_indices_empty": [
                    "self"
                ]
            }
        },
        "pandas.tests.indexing.test_callable": {
            "TestIndexingCallable": {
                "test_frame_loc_callable": [
                    "self"
                ],
                "test_frame_loc_callable_mixture": [
                    "self"
                ],
                "test_frame_loc_callable_labels": [
                    "self"
                ],
                "test_frame_loc_callable_setitem": [
                    "self"
                ],
                "test_frame_iloc_callable": [
                    "self"
                ],
                "test_frame_iloc_callable_setitem": [
                    "self"
                ]
            }
        },
        "pandas.tests.indexing.test_indexing": {
            "test_extension_array_cross_section": [],
            "test_extension_array_cross_section_converts": [],
            "test_readonly_indices": [],
            "test_1tuple_without_multiindex": [],
            "test_duplicate_index_mistyped_key_raises_keyerror": [],
            "test_setitem_with_bool_mask_and_values_matching_n_trues_in_length": [],
            "test_missing_labels_inside_loc_matched_in_error_message": [],
            "test_many_missing_labels_inside_loc_error_message_limited": [],
            "test_long_text_missing_labels_inside_loc_error_message_limited": [],
            "test_setitem_categorical": [],
            "TestFancy": {
                "test_setitem_ndarray_1d": [
                    "self"
                ],
                "test_getitem_ndarray_3d": [
                    "self",
                    "index",
                    "obj",
                    "idxr",
                    "idxr_id"
                ],
                "test_setitem_ndarray_3d": [
                    "self",
                    "index",
                    "obj",
                    "idxr",
                    "idxr_id"
                ],
                "test_setitem_ndarray_3d_does_not_fail_for_iloc_empty_dataframe": [
                    "self"
                ],
                "test_inf_upcast": [
                    "self"
                ],
                "test_setitem_dtype_upcast": [
                    "self"
                ],
                "test_dups_fancy_indexing": [
                    "self"
                ],
                "test_dups_fancy_indexing2": [
                    "self"
                ],
                "test_duplicate_int_indexing": [
                    "self",
                    "case"
                ],
                "test_indexing_mixed_frame_bug": [
                    "self"
                ],
                "test_multitype_list_index_access": [
                    "self"
                ],
                "test_set_index_nan": [
                    "self"
                ],
                "test_multi_assign": [
                    "self"
                ],
                "test_setitem_list": [
                    "self"
                ],
                "test_string_slice": [
                    "self"
                ],
                "test_astype_assignment": [
                    "self"
                ],
                "test_index_type_coercion": [
                    "self"
                ]
            },
            "TestMisc": {
                "test_float_index_to_mixed": [
                    "self"
                ],
                "test_float_index_non_scalar_assignment": [
                    "self"
                ],
                "test_float_index_at_iat": [
                    "self"
                ],
                "test_mixed_index_assignment": [
                    "self"
                ],
                "test_mixed_index_no_fallback": [
                    "self"
                ],
                "test_rhs_alignment": [
                    "self"
                ],
                "test_str_label_slicing_with_negative_step": [
                    "self"
                ],
                "test_slice_with_zero_step_raises": [
                    "self"
                ],
                "test_indexing_assignment_dict_already_exists": [
                    "self"
                ],
                "test_indexing_dtypes_on_empty": [
                    "self"
                ],
                "test_range_in_series_indexing": [
                    "self",
                    "size"
                ],
                "test_non_reducing_slice": [
                    "self",
                    "slc"
                ],
                "test_list_slice": [
                    "self"
                ],
                "test_maybe_numeric_slice": [
                    "self"
                ],
                "test_partial_boolean_frame_indexing": [
                    "self"
                ],
                "test_no_reference_cycle": [
                    "self"
                ]
            },
            "TestSeriesNoneCoercion": {
                "test_coercion_with_setitem": [
                    "self",
                    "start_data",
                    "expected_result"
                ],
                "test_coercion_with_loc_setitem": [
                    "self",
                    "start_data",
                    "expected_result"
                ],
                "test_coercion_with_setitem_and_series": [
                    "self",
                    "start_data",
                    "expected_result"
                ],
                "test_coercion_with_loc_and_series": [
                    "self",
                    "start_data",
                    "expected_result"
                ]
            },
            "TestDataframeNoneCoercion": {
                "test_coercion_with_loc": [
                    "self",
                    "expected"
                ],
                "test_coercion_with_setitem_and_dataframe": [
                    "self",
                    "expected"
                ],
                "test_none_coercion_loc_and_dataframe": [
                    "self",
                    "expected"
                ],
                "test_none_coercion_mixed_dtypes": [
                    "self"
                ]
            }
        },
        "pandas.tests.indexing.test_coercion": {
            "check_comprehensiveness": [
                "request"
            ],
            "CoercionBase": {
                "method": [
                    "self"
                ],
                "_assert": [
                    "self",
                    "left",
                    "right",
                    "dtype"
                ]
            },
            "TestSetitemCoercion": {
                "_assert_setitem_series_conversion": [
                    "self",
                    "original_series",
                    "loc_value",
                    "expected_series",
                    "expected_dtype"
                ],
                "test_setitem_series_object": [
                    "self",
                    "val",
                    "exp_dtype"
                ],
                "test_setitem_series_int64": [
                    "self",
                    "val",
                    "exp_dtype",
                    "request"
                ],
                "test_setitem_series_int8": [
                    "self",
                    "val",
                    "exp_dtype",
                    "request"
                ],
                "test_setitem_series_float64": [
                    "self",
                    "val",
                    "exp_dtype"
                ],
                "test_setitem_series_complex128": [
                    "self",
                    "val",
                    "exp_dtype"
                ],
                "test_setitem_series_bool": [
                    "self",
                    "val",
                    "exp_dtype",
                    "request"
                ],
                "test_setitem_series_datetime64": [
                    "self",
                    "val",
                    "exp_dtype"
                ],
                "test_setitem_series_datetime64tz": [
                    "self",
                    "val",
                    "exp_dtype"
                ],
                "test_setitem_series_timedelta64": [
                    "self",
                    "val",
                    "exp_dtype"
                ],
                "_assert_setitem_index_conversion": [
                    "self",
                    "original_series",
                    "loc_key",
                    "expected_index",
                    "expected_dtype"
                ],
                "test_setitem_index_object": [
                    "self",
                    "val",
                    "exp_dtype"
                ],
                "test_setitem_index_int64": [
                    "self",
                    "val",
                    "exp_dtype"
                ],
                "test_setitem_index_float64": [
                    "self",
                    "val",
                    "exp_dtype",
                    "request"
                ],
                "test_setitem_series_period": [
                    "self"
                ],
                "test_setitem_index_complex128": [
                    "self"
                ],
                "test_setitem_index_bool": [
                    "self"
                ],
                "test_setitem_index_datetime64": [
                    "self"
                ],
                "test_setitem_index_datetime64tz": [
                    "self"
                ],
                "test_setitem_index_timedelta64": [
                    "self"
                ],
                "test_setitem_index_period": [
                    "self"
                ]
            },
            "TestInsertIndexCoercion": {
                "_assert_insert_conversion": [
                    "self",
                    "original",
                    "value",
                    "expected",
                    "expected_dtype"
                ],
                "test_insert_index_object": [
                    "self",
                    "insert",
                    "coerced_val",
                    "coerced_dtype"
                ],
                "test_insert_index_int64": [
                    "self",
                    "insert",
                    "coerced_val",
                    "coerced_dtype"
                ],
                "test_insert_index_float64": [
                    "self",
                    "insert",
                    "coerced_val",
                    "coerced_dtype"
                ],
                "test_insert_index_datetimes": [
                    "self",
                    "fill_val",
                    "exp_dtype"
                ],
                "test_insert_index_timedelta64": [
                    "self"
                ],
                "test_insert_index_period": [
                    "self",
                    "insert",
                    "coerced_val",
                    "coerced_dtype"
                ],
                "test_insert_index_complex128": [
                    "self"
                ],
                "test_insert_index_bool": [
                    "self"
                ]
            },
            "TestWhereCoercion": {
                "_assert_where_conversion": [
                    "self",
                    "original",
                    "cond",
                    "values",
                    "expected",
                    "expected_dtype"
                ],
                "test_where_object": [
                    "self",
                    "index_or_series",
                    "fill_val",
                    "exp_dtype"
                ],
                "test_where_int64": [
                    "self",
                    "index_or_series",
                    "fill_val",
                    "exp_dtype"
                ],
                "test_where_float64": [
                    "self",
                    "index_or_series",
                    "fill_val",
                    "exp_dtype"
                ],
                "test_where_series_complex128": [
                    "self",
                    "fill_val",
                    "exp_dtype"
                ],
                "test_where_series_bool": [
                    "self",
                    "fill_val",
                    "exp_dtype"
                ],
                "test_where_series_datetime64": [
                    "self",
                    "fill_val",
                    "exp_dtype"
                ],
                "test_where_index_datetime": [
                    "self",
                    "fill_val"
                ],
                "test_where_index_datetime64tz": [
                    "self"
                ],
                "test_where_index_complex128": [
                    "self"
                ],
                "test_where_index_bool": [
                    "self"
                ],
                "test_where_series_timedelta64": [
                    "self"
                ],
                "test_where_series_period": [
                    "self"
                ],
                "test_where_index_timedelta64": [
                    "self",
                    "value"
                ],
                "test_where_index_period": [
                    "self"
                ]
            },
            "TestFillnaSeriesCoercion": {
                "test_has_comprehensive_tests": [
                    "self"
                ],
                "_assert_fillna_conversion": [
                    "self",
                    "original",
                    "value",
                    "expected",
                    "expected_dtype"
                ],
                "test_fillna_object": [
                    "self",
                    "index_or_series",
                    "fill_val",
                    "fill_dtype"
                ],
                "test_fillna_float64": [
                    "self",
                    "index_or_series",
                    "fill_val",
                    "fill_dtype"
                ],
                "test_fillna_series_complex128": [
                    "self",
                    "fill_val",
                    "fill_dtype"
                ],
                "test_fillna_datetime": [
                    "self",
                    "index_or_series",
                    "fill_val",
                    "fill_dtype"
                ],
                "test_fillna_datetime64tz": [
                    "self",
                    "index_or_series",
                    "fill_val",
                    "fill_dtype"
                ],
                "test_fillna_series_int64": [
                    "self"
                ],
                "test_fillna_index_int64": [
                    "self"
                ],
                "test_fillna_series_bool": [
                    "self"
                ],
                "test_fillna_index_bool": [
                    "self"
                ],
                "test_fillna_series_timedelta64": [
                    "self"
                ],
                "test_fillna_series_period": [
                    "self"
                ],
                "test_fillna_index_timedelta64": [
                    "self"
                ],
                "test_fillna_index_period": [
                    "self"
                ]
            },
            "TestReplaceSeriesCoercion": {
                "test_replace_series": [
                    "self",
                    "how",
                    "to_key",
                    "from_key"
                ],
                "test_replace_series_datetime_tz": [
                    "self",
                    "how",
                    "to_key",
                    "from_key"
                ],
                "test_replace_series_datetime_datetime": [
                    "self",
                    "how",
                    "to_key",
                    "from_key"
                ],
                "test_replace_series_period": [
                    "self"
                ]
            }
        },
        "pandas.tests.indexing.test_chaining_and_caching": {
            "TestCaching": {
                "test_slice_consolidate_invalidate_item_cache": [
                    "self"
                ],
                "test_setitem_cache_updating": [
                    "self"
                ]
            },
            "TestChaining": {
                "test_setitem_chained_setfault": [
                    "self"
                ],
                "test_detect_chained_assignment": [
                    "self"
                ],
                "test_setting_with_copy_bug": [
                    "self"
                ],
                "test_detect_chained_assignment_warnings": [
                    "self"
                ],
                "test_detect_chained_assignment_warnings_filter_and_dupe_cols": [
                    "self"
                ],
                "test_chained_getitem_with_lists": [
                    "self"
                ],
                "test_cache_updating": [
                    "self"
                ]
            }
        },
        "pandas.tests.indexing.test_na_indexing": {
            "test_series_mask_boolean": [
                "values",
                "dtype",
                "mask",
                "indexer_class",
                "frame"
            ],
            "test_na_treated_as_false": [
                "frame"
            ]
        },
        "pandas.tests.indexing": {},
        "pandas.tests.indexing.test_iloc": {
            "TestiLoc": {
                "test_iloc_getitem_int": [
                    "self"
                ],
                "test_iloc_getitem_neg_int": [
                    "self"
                ],
                "test_iloc_getitem_list_int": [
                    "self"
                ]
            },
            "TestiLoc2": {
                "test_is_scalar_access": [
                    "self"
                ],
                "test_iloc_exceeds_bounds": [
                    "self"
                ],
                "test_iloc_non_integer_raises": [
                    "self",
                    "index",
                    "columns",
                    "index_vals",
                    "column_vals"
                ],
                "test_iloc_getitem_invalid_scalar": [
                    "self",
                    "dims"
                ],
                "test_iloc_array_not_mutating_negative_indices": [
                    "self"
                ],
                "test_iloc_getitem_neg_int_can_reach_first_index": [
                    "self"
                ],
                "test_iloc_getitem_dups": [
                    "self"
                ],
                "test_iloc_getitem_array": [
                    "self"
                ],
                "test_iloc_getitem_bool": [
                    "self"
                ],
                "test_iloc_getitem_bool_diff_len": [
                    "self",
                    "index"
                ],
                "test_iloc_getitem_slice": [
                    "self"
                ],
                "test_iloc_getitem_slice_dups": [
                    "self"
                ],
                "test_iloc_setitem": [
                    "self"
                ],
                "test_iloc_setitem_list": [
                    "self"
                ],
                "test_iloc_setitem_pandas_object": [
                    "self"
                ],
                "test_iloc_setitem_dups": [
                    "self"
                ],
                "test_iloc_getitem_frame": [
                    "self"
                ],
                "test_iloc_getitem_labelled_frame": [
                    "self"
                ],
                "test_iloc_getitem_doc_issue": [
                    "self"
                ],
                "test_iloc_setitem_series": [
                    "self"
                ],
                "test_iloc_setitem_list_of_lists": [
                    "self"
                ],
                "test_iloc_setitem_with_scalar_index": [
                    "self",
                    "indexer",
                    "value"
                ],
                "test_iloc_mask": [
                    "self"
                ],
                "test_iloc_non_unique_indexing": [
                    "self"
                ],
                "test_iloc_empty_list_indexer_is_ok": [
                    "self"
                ],
                "test_identity_slice_returns_new_object": [
                    "self"
                ],
                "test_indexing_zerodim_np_array": [
                    "self"
                ],
                "test_series_indexing_zerodim_np_array": [
                    "self"
                ],
                "test_iloc_setitem_categorical_updates_inplace": [
                    "self"
                ],
                "test_iloc_with_boolean_operation": [
                    "self"
                ]
            },
            "TestILocSetItemDuplicateColumns": {
                "test_iloc_setitem_scalar_duplicate_columns": [
                    "self"
                ],
                "test_iloc_setitem_list_duplicate_columns": [
                    "self"
                ],
                "test_iloc_setitem_series_duplicate_columns": [
                    "self"
                ]
            }
        },
        "pandas.tests.indexing.interval.test_interval_new": {
            "TestIntervalIndex": {
                "setup_method": [
                    "self",
                    "method"
                ],
                "test_loc_with_interval": [
                    "self"
                ],
                "test_loc_with_scalar": [
                    "self"
                ],
                "test_loc_with_slices": [
                    "self"
                ],
                "test_slice_step_ne1": [
                    "self"
                ],
                "test_slice_float_start_stop": [
                    "self"
                ],
                "test_slice_interval_step": [
                    "self"
                ],
                "test_loc_with_overlap": [
                    "self"
                ],
                "test_non_unique": [
                    "self"
                ],
                "test_non_unique_moar": [
                    "self"
                ]
            }
        },
        "pandas.tests.indexing.interval.test_interval": {
            "TestIntervalIndex": {
                "setup_method": [
                    "self",
                    "method"
                ],
                "test_getitem_with_scalar": [
                    "self"
                ],
                "test_nonoverlapping_monotonic": [
                    "self",
                    "direction",
                    "closed"
                ],
                "test_non_matching": [
                    "self"
                ],
                "test_large_series": [
                    "self"
                ],
                "test_loc_getitem_frame": [
                    "self"
                ]
            },
            "TestIntervalIndexInsideMultiIndex": {
                "test_mi_intervalindex_slicing_with_scalar": [
                    "self"
                ]
            }
        },
        "pandas.tests.indexing.interval": {},
        "pandas.tests.indexing.multiindex.test_loc": {
            "single_level_multiindex": [],
            "frame_random_data_integer_multi_index": [],
            "test_loc_getitem_duplicates_multiindex_missing_indexers": [
                "indexer",
                "pos"
            ],
            "test_series_loc_getitem_fancy": [
                "multiindex_year_month_day_dataframe_random_data"
            ],
            "test_loc_getitem_duplicates_multiindex_empty_indexer": [
                "columns_indexer"
            ],
            "test_loc_getitem_duplicates_multiindex_non_scalar_type_object": [],
            "test_loc_getitem_tuple_plus_slice": [],
            "test_loc_getitem_int": [
                "frame_random_data_integer_multi_index"
            ],
            "test_loc_getitem_int_raises_exception": [
                "frame_random_data_integer_multi_index"
            ],
            "test_loc_getitem_lowerdim_corner": [
                "multiindex_dataframe_random_data"
            ],
            "test_loc_setitem_single_column_slice": [],
            "test_loc_nan_multiindex": [],
            "test_loc_period_string_indexing": [],
            "test_loc_datetime_mask_slicing": [],
            "test_loc_with_mi_indexer": [],
            "TestMultiIndexLoc": {
                "test_loc_getitem_series": [
                    "self"
                ],
                "test_loc_getitem_array": [
                    "self"
                ],
                "test_loc_multiindex_labels": [
                    "self"
                ],
                "test_loc_multiindex_ints": [
                    "self"
                ],
                "test_loc_multiindex_missing_label_raises": [
                    "self"
                ],
                "test_loc_multiindex_list_missing_label": [
                    "self",
                    "key",
                    "pos"
                ],
                "test_loc_multiindex_too_many_dims_raises": [
                    "self"
                ],
                "test_loc_multiindex_indexer_none": [
                    "self"
                ],
                "test_loc_multiindex_incomplete": [
                    "self"
                ],
                "test_get_loc_single_level": [
                    "self",
                    "single_level_multiindex"
                ],
                "test_loc_getitem_int_slice": [
                    "self"
                ],
                "test_loc_getitem_nested_indexer": [
                    "self",
                    "indexer_type_1",
                    "indexer_type_2"
                ]
            }
        },
        "pandas.tests.indexing.multiindex.test_getitem": {
            "test_series_getitem_multiindex": [
                "access_method",
                "level1_value",
                "expected"
            ],
            "test_series_getitem_duplicates_multiindex": [
                "level0_value"
            ],
            "test_series_getitem": [
                "multiindex_year_month_day_dataframe_random_data",
                "indexer"
            ],
            "test_series_getitem_returns_scalar": [
                "multiindex_year_month_day_dataframe_random_data",
                "indexer"
            ],
            "test_series_getitem_indexing_errors": [
                "multiindex_year_month_day_dataframe_random_data",
                "indexer",
                "expected_error",
                "expected_error_msg"
            ],
            "test_series_getitem_corner_generator": [
                "multiindex_year_month_day_dataframe_random_data"
            ],
            "test_getitem_simple": [
                "multiindex_dataframe_random_data"
            ],
            "test_frame_getitem_simple_key_error": [
                "multiindex_dataframe_random_data",
                "indexer",
                "expected_error_msg"
            ],
            "test_frame_getitem_multicolumn_empty_level": [],
            "test_frame_getitem_toplevel": [
                "multiindex_dataframe_random_data",
                "indexer",
                "expected_slice"
            ],
            "test_frame_mixed_depth_get": [],
            "dataframe_with_duplicate_index": [],
            "test_frame_mi_access": [
                "dataframe_with_duplicate_index",
                "indexer"
            ],
            "test_frame_mi_access_returns_series": [
                "dataframe_with_duplicate_index"
            ],
            "test_frame_mi_access_returns_frame": [
                "dataframe_with_duplicate_index"
            ],
            "test_frame_mi_empty_slice": []
        },
        "pandas.tests.indexing.multiindex.test_datetime": {
            "test_multiindex_period_datetime": [],
            "test_multiindex_datetime_columns": []
        },
        "pandas.tests.indexing.multiindex.test_partial": {
            "test_loc_getitem_partial_both_axis": [],
            "TestMultiIndexPartial": {
                "test_getitem_partial_int": [
                    "self"
                ],
                "test_series_slice_partial": [
                    "self"
                ],
                "test_xs_partial": [
                    "self",
                    "multiindex_dataframe_random_data",
                    "multiindex_year_month_day_dataframe_random_data"
                ],
                "test_getitem_partial": [
                    "self",
                    "multiindex_year_month_day_dataframe_random_data"
                ],
                "test_fancy_slice_partial": [
                    "self",
                    "multiindex_dataframe_random_data",
                    "multiindex_year_month_day_dataframe_random_data"
                ],
                "test_getitem_partial_column_select": [
                    "self"
                ],
                "test_partial_set": [
                    "self",
                    "multiindex_year_month_day_dataframe_random_data"
                ],
                "test_getitem_intkey_leading_level": [
                    "self",
                    "multiindex_year_month_day_dataframe_random_data",
                    "dtype"
                ],
                "test_partial_loc_missing": [
                    "self",
                    "multiindex_year_month_day_dataframe_random_data"
                ],
                "test_setitem_multiple_partial": [
                    "self",
                    "multiindex_dataframe_random_data"
                ]
            }
        },
        "pandas.tests.indexing.multiindex.test_ix": {
            "TestMultiIndex": {
                "test_frame_setitem_loc": [
                    "self",
                    "multiindex_dataframe_random_data"
                ],
                "test_loc_general": [
                    "self"
                ],
                "test_loc_multiindex_missing_label_raises": [
                    "self"
                ],
                "test_series_loc_getitem_fancy": [
                    "self",
                    "multiindex_year_month_day_dataframe_random_data"
                ]
            }
        },
        "pandas.tests.indexing.multiindex.test_xs": {
            "four_level_index_dataframe": [],
            "test_xs_named_levels_axis_eq_1": [
                "key",
                "level",
                "exp_arr",
                "exp_index"
            ],
            "test_xs_values": [
                "multiindex_dataframe_random_data"
            ],
            "test_xs_loc_equality": [
                "multiindex_dataframe_random_data"
            ],
            "test_xs_missing_values_in_index": [],
            "test_xs_with_duplicates": [
                "key",
                "level",
                "multiindex_dataframe_random_data"
            ],
            "test_xs_level": [
                "multiindex_dataframe_random_data"
            ],
            "test_xs_level_eq_2": [],
            "test_xs_level_multiple": [
                "indexer",
                "four_level_index_dataframe"
            ],
            "test_xs_setting_with_copy_error": [
                "multiindex_dataframe_random_data"
            ],
            "test_xs_setting_with_copy_error_multiple": [
                "four_level_index_dataframe"
            ],
            "test_xs_integer_key": [],
            "test_xs_level0": [
                "indexer",
                "four_level_index_dataframe"
            ],
            "test_xs_level_series": [
                "multiindex_dataframe_random_data"
            ],
            "test_xs_level_series_ymd": [
                "multiindex_year_month_day_dataframe_random_data"
            ],
            "test_xs_level_series_slice_not_implemented": [
                "multiindex_year_month_day_dataframe_random_data"
            ],
            "test_series_getitem_multiindex_xs": [],
            "test_series_getitem_multiindex_xs_by_label": [],
            "test_xs_levels_raises": []
        },
        "pandas.tests.indexing.multiindex.test_setitem": {
            "test_frame_setitem_view_direct": [
                "multiindex_dataframe_random_data"
            ],
            "test_frame_setitem_copy_raises": [
                "multiindex_dataframe_random_data"
            ],
            "test_frame_setitem_copy_no_write": [
                "multiindex_dataframe_random_data"
            ],
            "TestMultiIndexSetItem": {
                "test_setitem_multiindex": [
                    "self"
                ],
                "test_multiindex_setitem": [
                    "self"
                ],
                "test_multiindex_assignment": [
                    "self"
                ],
                "test_series_setitem": [
                    "self",
                    "multiindex_year_month_day_dataframe_random_data"
                ],
                "test_frame_getitem_setitem_boolean": [
                    "self",
                    "multiindex_dataframe_random_data"
                ],
                "test_frame_getitem_setitem_multislice": [
                    "self"
                ],
                "test_frame_setitem_multi_column": [
                    "self"
                ],
                "test_getitem_setitem_tuple_plus_columns": [
                    "self",
                    "multiindex_year_month_day_dataframe_random_data"
                ],
                "test_getitem_setitem_slice_integers": [
                    "self"
                ],
                "test_setitem_change_dtype": [
                    "self",
                    "multiindex_dataframe_random_data"
                ],
                "test_set_column_scalar_with_loc": [
                    "self",
                    "multiindex_dataframe_random_data"
                ],
                "test_nonunique_assignment_1750": [
                    "self"
                ],
                "test_astype_assignment_with_dups": [
                    "self"
                ],
                "test_setitem_nonmonotonic": [
                    "self"
                ]
            }
        },
        "pandas.tests.indexing.multiindex.test_slice": {
            "TestMultiIndexSlicers": {
                "test_per_axis_per_level_getitem": [
                    "self"
                ],
                "test_multiindex_slicers_non_unique": [
                    "self"
                ],
                "test_multiindex_slicers_datetimelike": [
                    "self"
                ],
                "test_multiindex_slicers_edges": [
                    "self"
                ],
                "test_per_axis_per_level_doc_examples": [
                    "self"
                ],
                "test_loc_axis_arguments": [
                    "self"
                ],
                "test_loc_axis_single_level_multi_col_indexing_multiindex_col_df": [
                    "self"
                ],
                "test_loc_axis_single_level_single_col_indexing_multiindex_col_df": [
                    "self"
                ],
                "test_loc_ax_single_level_indexer_simple_df": [
                    "self"
                ],
                "test_per_axis_per_level_setitem": [
                    "self"
                ],
                "test_multiindex_label_slicing_with_negative_step": [
                    "self"
                ],
                "test_multiindex_slice_first_level": [
                    "self"
                ],
                "test_int_series_slicing": [
                    "self",
                    "multiindex_year_month_day_dataframe_random_data"
                ],
                "test_non_reducing_slice_on_multiindex": [
                    "self"
                ]
            }
        },
        "pandas.tests.indexing.multiindex.test_insert": {
            "TestMultiIndexInsertion": {
                "test_setitem_mixed_depth": [
                    "self"
                ],
                "test_dataframe_insert_column_all_na": [
                    "self"
                ]
            }
        },
        "pandas.tests.indexing.multiindex.test_indexing_slow": {
            "test_multiindex_get_loc": []
        },
        "pandas.tests.indexing.multiindex.conftest": {
            "multiindex_dataframe_random_data": []
        },
        "pandas.tests.indexing.multiindex.test_chaining_and_caching": {
            "test_detect_chained_assignment": [],
            "test_cache_updating": [],
            "test_indexer_caching": []
        },
        "pandas.tests.indexing.multiindex.test_multiindex": {
            "TestMultiIndexBasic": {
                "test_multiindex_perf_warn": [
                    "self"
                ],
                "test_indexing_over_hashtable_size_cutoff": [
                    "self"
                ],
                "test_multi_nan_indexing": [
                    "self"
                ],
                "test_nested_tuples_duplicates": [
                    "self"
                ]
            }
        },
        "pandas.tests.indexing.multiindex": {},
        "pandas.tests.indexing.multiindex.test_iloc": {
            "simple_multiindex_dataframe": [],
            "test_iloc_returns_series": [
                "indexer",
                "expected",
                "simple_multiindex_dataframe"
            ],
            "test_iloc_returns_dataframe": [
                "simple_multiindex_dataframe"
            ],
            "test_iloc_returns_scalar": [
                "simple_multiindex_dataframe"
            ],
            "test_iloc_getitem_multiple_items": [],
            "test_iloc_getitem_labels": [],
            "test_frame_getitem_slice": [
                "multiindex_dataframe_random_data"
            ],
            "test_frame_setitem_slice": [
                "multiindex_dataframe_random_data"
            ],
            "test_indexing_ambiguity_bug_1678": [],
            "test_iloc_integer_locations": [],
            "test_iloc_setitem_int_multiindex_series": [
                "data",
                "indexes",
                "values",
                "expected_k"
            ],
            "test_getitem_iloc": [
                "multiindex_dataframe_random_data"
            ]
        },
        "pandas.tests.indexing.multiindex.test_sorted": {
            "TestMultiIndexSorted": {
                "test_getitem_multilevel_index_tuple_not_sorted": [
                    "self"
                ],
                "test_getitem_slice_not_sorted": [
                    "self",
                    "multiindex_dataframe_random_data"
                ],
                "test_frame_getitem_not_sorted2": [
                    "self",
                    "key"
                ],
                "test_sort_values_key": [
                    "self",
                    "multiindex_dataframe_random_data"
                ],
                "test_frame_getitem_not_sorted": [
                    "self",
                    "multiindex_dataframe_random_data"
                ],
                "test_series_getitem_not_sorted": [
                    "self"
                ]
            }
        },
        "pandas.tests.frame.test_nonunique_indexes": {
            "TestDataFrameNonuniqueIndexes": {
                "test_column_dups_operations": [
                    "self"
                ],
                "test_column_dups2": [
                    "self"
                ],
                "test_column_dups_indexing": [
                    "self"
                ],
                "test_column_dups_indexing2": [
                    "self"
                ],
                "test_columns_with_dups": [
                    "self"
                ],
                "test_values_duplicates": [
                    "self"
                ],
                "test_set_value_by_index": [
                    "self"
                ]
            }
        },
        "pandas.tests.frame.test_timeseries": {
            "TestDataFrameTimeSeriesMethods": {
                "test_frame_ctor_datetime64_column": [
                    "self"
                ],
                "test_frame_append_datetime64_col_other_units": [
                    "self"
                ],
                "test_datetime_assignment_with_NaT_and_diff_time_units": [
                    "self"
                ]
            }
        },
        "pandas.tests.frame.test_validate": {
            "dataframe": [],
            "TestDataFrameValidate": {
                "test_validate_bool_args": [
                    "self",
                    "dataframe",
                    "func",
                    "inplace"
                ]
            }
        },
        "pandas.tests.frame.test_reshape": {
            "test_unstack_fill_frame_object": [],
            "test_unstack_timezone_aware_values": [],
            "test_stack_timezone_aware_values": [],
            "test_unstacking_multi_index_df": [],
            "TestDataFrameReshape": {
                "test_pivot": [
                    "self"
                ],
                "test_pivot_duplicates": [
                    "self"
                ],
                "test_pivot_empty": [
                    "self"
                ],
                "test_pivot_integer_bug": [
                    "self"
                ],
                "test_pivot_index_none": [
                    "self"
                ],
                "test_stack_unstack": [
                    "self",
                    "float_frame"
                ],
                "test_stack_mixed_level": [
                    "self"
                ],
                "test_unstack_not_consolidated": [
                    "self"
                ],
                "test_unstack_fill": [
                    "self"
                ],
                "test_unstack_fill_frame": [
                    "self"
                ],
                "test_unstack_fill_frame_datetime": [
                    "self"
                ],
                "test_unstack_fill_frame_timedelta": [
                    "self"
                ],
                "test_unstack_fill_frame_period": [
                    "self"
                ],
                "test_unstack_fill_frame_categorical": [
                    "self"
                ],
                "test_unstack_tuplename_in_multiindex": [
                    "self"
                ],
                "test_unstack_mixed_type_name_in_multiindex": [
                    "self",
                    "unstack_idx",
                    "expected_values",
                    "expected_index",
                    "expected_columns"
                ],
                "test_unstack_preserve_dtypes": [
                    "self"
                ],
                "test_stack_ints": [
                    "self"
                ],
                "test_stack_mixed_levels": [
                    "self"
                ],
                "test_stack_int_level_names": [
                    "self"
                ],
                "test_unstack_bool": [
                    "self"
                ],
                "test_unstack_level_binding": [
                    "self"
                ],
                "test_unstack_to_series": [
                    "self",
                    "float_frame"
                ],
                "test_unstack_dtypes": [
                    "self"
                ],
                "test_unstack_non_unique_index_names": [
                    "self"
                ],
                "test_unstack_unused_levels": [
                    "self"
                ],
                "test_unstack_unused_level": [
                    "self",
                    "cols"
                ],
                "test_unstack_long_index": [
                    "self"
                ],
                "test_unstack_multi_level_cols": [
                    "self"
                ],
                "test_unstack_multi_level_rows_and_cols": [
                    "self"
                ],
                "test_unstack_nan_index": [
                    "self"
                ],
                "test_stack_datetime_column_multiIndex": [
                    "self"
                ],
                "test_stack_partial_multiIndex": [
                    "self"
                ],
                "test_stack_preserve_categorical_dtype": [
                    "self",
                    "ordered",
                    "labels"
                ],
                "test_stack_preserve_categorical_dtype_values": [
                    "self"
                ],
                "test_stack_multi_columns_non_unique_index": [
                    "self",
                    "index",
                    "columns"
                ],
                "test_unstack_mixed_extension_types": [
                    "self",
                    "level"
                ],
                "test_unstack_swaplevel_sortlevel": [
                    "self",
                    "level"
                ]
            }
        },
        "pandas.tests.frame.test_combine_concat": {
            "TestDataFrameConcat": {
                "test_concat_multiple_frames_dtypes": [
                    "self"
                ],
                "test_concat_multiple_tzs": [
                    "self"
                ],
                "test_concat_tz_NaT": [
                    "self",
                    "t1"
                ],
                "test_concat_tz_not_aligned": [
                    "self"
                ],
                "test_concat_tuple_keys": [
                    "self"
                ],
                "test_concat_named_keys": [
                    "self"
                ],
                "test_concat_axis_parameter": [
                    "self"
                ],
                "test_concat_numerical_names": [
                    "self"
                ],
                "test_concat_astype_dup_col": [
                    "self"
                ],
                "test_concat_datetime_datetime64_frame": [
                    "self"
                ]
            }
        },
        "pandas.tests.frame.test_period": {
            "TestPeriodIndex": {
                "test_as_frame_columns": [
                    "self"
                ],
                "test_frame_setitem": [
                    "self"
                ],
                "test_frame_index_to_string": [
                    "self"
                ]
            }
        },
        "pandas.tests.frame.test_operators": {
            "TestDataFrameUnaryOperators": {
                "test_neg_numeric": [
                    "self",
                    "df",
                    "expected"
                ],
                "test_neg_object": [
                    "self",
                    "df",
                    "expected"
                ],
                "test_neg_raises": [
                    "self",
                    "df"
                ],
                "test_invert": [
                    "self",
                    "float_frame"
                ],
                "test_invert_mixed": [
                    "self"
                ],
                "test_pos_numeric": [
                    "self",
                    "df"
                ],
                "test_pos_object": [
                    "self",
                    "df"
                ],
                "test_pos_raises": [
                    "self",
                    "df"
                ]
            },
            "TestDataFrameLogicalOperators": {
                "test_logical_ops_empty_frame": [
                    "self"
                ],
                "test_logical_ops_bool_frame": [
                    "self"
                ],
                "test_logical_ops_int_frame": [
                    "self"
                ],
                "test_logical_ops_invalid": [
                    "self"
                ],
                "test_logical_operators": [
                    "self"
                ],
                "test_logical_with_nas": [
                    "self"
                ],
                "test_logical_operators_nans": [
                    "self",
                    "left",
                    "right",
                    "op",
                    "expected"
                ]
            }
        },
        "pandas.tests.frame.test_alter_axes": {
            "TestDataFrameAlterAxes": {
                "test_set_index_directly": [
                    "self",
                    "float_string_frame"
                ],
                "test_convert_dti_to_series": [
                    "self"
                ],
                "test_set_columns": [
                    "self",
                    "float_string_frame"
                ],
                "test_dti_set_index_reindex": [
                    "self"
                ],
                "test_reindex_api_equivalence": [
                    "self"
                ],
                "test_assign_columns": [
                    "self",
                    "float_frame"
                ],
                "test_set_index_preserve_categorical_dtype": [
                    "self"
                ],
                "test_rename_signature": [
                    "self"
                ],
                "test_reindex_signature": [
                    "self"
                ]
            },
            "TestIntervalIndex": {
                "test_setitem": [
                    "self"
                ],
                "test_set_reset_index": [
                    "self"
                ]
            }
        },
        "pandas.tests.frame.common": {
            "_check_mixed_float": [
                "df",
                "dtype"
            ],
            "_check_mixed_int": [
                "df",
                "dtype"
            ]
        },
        "pandas.tests.frame.test_to_csv": {
            "TestDataFrameToCSV": {
                "read_csv": [
                    "self",
                    "path"
                ],
                "test_to_csv_from_csv1": [
                    "self",
                    "float_frame",
                    "datetime_frame"
                ],
                "test_to_csv_from_csv2": [
                    "self",
                    "float_frame"
                ],
                "test_to_csv_from_csv3": [
                    "self"
                ],
                "test_to_csv_from_csv4": [
                    "self"
                ],
                "test_to_csv_from_csv5": [
                    "self",
                    "timezone_frame"
                ],
                "test_to_csv_cols_reordering": [
                    "self"
                ],
                "test_to_csv_new_dupe_cols": [
                    "self"
                ],
                "test_to_csv_dtnat": [
                    "self"
                ],
                "test_to_csv_moar": [
                    "self"
                ],
                "test_to_csv_from_csv_w_some_infs": [
                    "self",
                    "float_frame"
                ],
                "test_to_csv_from_csv_w_all_infs": [
                    "self",
                    "float_frame"
                ],
                "test_to_csv_no_index": [
                    "self"
                ],
                "test_to_csv_with_mix_columns": [
                    "self"
                ],
                "test_to_csv_headers": [
                    "self"
                ],
                "test_to_csv_multiindex": [
                    "self",
                    "float_frame",
                    "datetime_frame"
                ],
                "test_to_csv_interval_index": [
                    "self"
                ],
                "test_to_csv_float32_nanrep": [
                    "self"
                ],
                "test_to_csv_withcommas": [
                    "self"
                ],
                "test_to_csv_mixed": [
                    "self"
                ],
                "test_to_csv_dups_cols": [
                    "self"
                ],
                "test_to_csv_chunking": [
                    "self"
                ],
                "test_to_csv_wide_frame_formatting": [
                    "self"
                ],
                "test_to_csv_bug": [
                    "self"
                ],
                "test_to_csv_unicode": [
                    "self"
                ],
                "test_to_csv_unicode_index_col": [
                    "self"
                ],
                "test_to_csv_stringio": [
                    "self",
                    "float_frame"
                ],
                "test_to_csv_float_format": [
                    "self"
                ],
                "test_to_csv_unicodewriter_quoting": [
                    "self"
                ],
                "test_to_csv_quote_none": [
                    "self"
                ],
                "test_to_csv_index_no_leading_comma": [
                    "self"
                ],
                "test_to_csv_line_terminators": [
                    "self"
                ],
                "test_to_csv_from_csv_categorical": [
                    "self"
                ],
                "test_to_csv_path_is_none": [
                    "self",
                    "float_frame"
                ],
                "test_to_csv_compression": [
                    "self",
                    "df",
                    "encoding",
                    "compression"
                ],
                "test_to_csv_date_format": [
                    "self",
                    "datetime_frame"
                ],
                "test_to_csv_with_dst_transitions": [
                    "self"
                ],
                "test_to_csv_quoting": [
                    "self"
                ],
                "test_period_index_date_overflow": [
                    "self"
                ],
                "test_multi_index_header": [
                    "self"
                ],
                "test_to_csv_single_level_multi_index": [
                    "self"
                ],
                "test_gz_lineend": [
                    "self"
                ],
                "test_to_csv_numpy_16_bug": [
                    "self"
                ]
            }
        },
        "pandas.tests.frame.test_axis_select_reindex": {
            "TestDataFrameSelectReindex": {
                "test_merge_join_different_levels": [
                    "self"
                ],
                "test_reindex": [
                    "self",
                    "float_frame"
                ],
                "test_reindex_nan": [
                    "self"
                ],
                "test_reindex_name_remains": [
                    "self"
                ],
                "test_reindex_int": [
                    "self",
                    "int_frame"
                ],
                "test_reindex_columns": [
                    "self",
                    "float_frame"
                ],
                "test_reindex_columns_method": [
                    "self"
                ],
                "test_reindex_axes": [
                    "self"
                ],
                "test_reindex_fill_value": [
                    "self"
                ],
                "test_reindex_dups": [
                    "self"
                ],
                "test_reindex_axis_style": [
                    "self"
                ],
                "test_reindex_positional_warns": [
                    "self"
                ],
                "test_reindex_axis_style_raises": [
                    "self"
                ],
                "test_reindex_single_named_indexer": [
                    "self"
                ],
                "test_reindex_api_equivalence": [
                    "self"
                ],
                "test_align_int_fill_bug": [
                    "self"
                ],
                "test_reindex_boolean": [
                    "self"
                ],
                "test_reindex_objects": [
                    "self",
                    "float_string_frame"
                ],
                "test_reindex_corner": [
                    "self",
                    "int_frame"
                ],
                "test_reindex_with_nans": [
                    "self"
                ],
                "test_reindex_multi": [
                    "self"
                ],
                "test_reindex_multi_categorical_time": [
                    "self"
                ],
                "test_inplace_drop_and_operation": [
                    "self",
                    "operation",
                    "inplace"
                ]
            }
        },
        "pandas.tests.frame.test_sort_values_level_as_str": {
            "df_none": [],
            "df_idx": [
                "request",
                "df_none"
            ],
            "sort_names": [
                "request"
            ],
            "ascending": [
                "request"
            ],
            "test_sort_index_level_and_column_label": [
                "df_none",
                "df_idx",
                "sort_names",
                "ascending"
            ],
            "test_sort_column_level_and_index_label": [
                "df_none",
                "df_idx",
                "sort_names",
                "ascending"
            ]
        },
        "pandas.tests.frame.test_timezones": {
            "TestDataFrameTimezones": {
                "test_frame_values_with_tz": [
                    "self"
                ],
                "test_frame_join_tzaware": [
                    "self"
                ],
                "test_frame_align_aware": [
                    "self"
                ],
                "test_frame_no_datetime64_dtype": [
                    "self",
                    "tz"
                ],
                "test_frame_reset_index": [
                    "self",
                    "tz"
                ],
                "test_boolean_compare_transpose_tzindex_with_dst": [
                    "self",
                    "tz"
                ],
                "test_tz_localize_convert_copy_inplace_mutate": [
                    "self",
                    "copy",
                    "method",
                    "tz"
                ],
                "test_constructor_data_aware_dtype_naive": [
                    "self",
                    "tz_aware_fixture"
                ]
            }
        },
        "pandas.tests.frame.test_query_eval": {
            "parser": [
                "request"
            ],
            "engine": [
                "request"
            ],
            "skip_if_no_pandas_parser": [
                "parser"
            ],
            "TestCompat": {
                "setup_method": [
                    "self",
                    "method"
                ],
                "test_query_default": [
                    "self"
                ],
                "test_query_None": [
                    "self"
                ],
                "test_query_python": [
                    "self"
                ],
                "test_query_numexpr": [
                    "self"
                ]
            },
            "TestDataFrameEval": {
                "test_ops": [
                    "self",
                    "op_str",
                    "op",
                    "rop",
                    "n"
                ],
                "test_dataframe_sub_numexpr_path": [
                    "self"
                ],
                "test_query_non_str": [
                    "self"
                ],
                "test_query_empty_string": [
                    "self"
                ],
                "test_eval_resolvers_as_list": [
                    "self"
                ]
            },
            "TestDataFrameQueryWithMultiIndex": {
                "test_query_with_named_multiindex": [
                    "self",
                    "parser",
                    "engine"
                ],
                "test_query_with_unnamed_multiindex": [
                    "self",
                    "parser",
                    "engine"
                ],
                "test_query_with_partially_named_multiindex": [
                    "self",
                    "parser",
                    "engine"
                ],
                "test_query_multiindex_get_index_resolvers": [
                    "self"
                ]
            },
            "TestDataFrameQueryNumExprPandas": {
                "setup_class": [
                    "cls"
                ],
                "teardown_class": [
                    "cls"
                ],
                "test_date_query_with_attribute_access": [
                    "self"
                ],
                "test_date_query_no_attribute_access": [
                    "self"
                ],
                "test_date_query_with_NaT": [
                    "self"
                ],
                "test_date_index_query": [
                    "self"
                ],
                "test_date_index_query_with_NaT": [
                    "self"
                ],
                "test_date_index_query_with_NaT_duplicates": [
                    "self"
                ],
                "test_date_query_with_non_date": [
                    "self"
                ],
                "test_query_syntax_error": [
                    "self"
                ],
                "test_query_scope": [
                    "self"
                ],
                "test_query_doesnt_pickup_local": [
                    "self"
                ],
                "test_query_builtin": [
                    "self"
                ],
                "test_query": [
                    "self"
                ],
                "test_query_index_with_name": [
                    "self"
                ],
                "test_query_index_without_name": [
                    "self"
                ],
                "test_nested_scope": [
                    "self"
                ],
                "test_nested_raises_on_local_self_reference": [
                    "self"
                ],
                "test_local_syntax": [
                    "self"
                ],
                "test_chained_cmp_and_in": [
                    "self"
                ],
                "test_local_variable_with_in": [
                    "self"
                ],
                "test_at_inside_string": [
                    "self"
                ],
                "test_query_undefined_local": [
                    "self"
                ],
                "test_index_resolvers_come_after_columns_with_the_same_name": [
                    "self"
                ],
                "test_inf": [
                    "self"
                ],
                "test_check_tz_aware_index_query": [
                    "self",
                    "tz_aware_fixture"
                ]
            },
            "TestDataFrameQueryNumExprPython": {
                "setup_class": [
                    "cls"
                ],
                "test_date_query_no_attribute_access": [
                    "self"
                ],
                "test_date_query_with_NaT": [
                    "self"
                ],
                "test_date_index_query": [
                    "self"
                ],
                "test_date_index_query_with_NaT": [
                    "self"
                ],
                "test_date_index_query_with_NaT_duplicates": [
                    "self"
                ],
                "test_nested_scope": [
                    "self"
                ]
            },
            "TestDataFrameQueryPythonPandas": {
                "setup_class": [
                    "cls"
                ],
                "test_query_builtin": [
                    "self"
                ]
            },
            "TestDataFrameQueryPythonPython": {
                "setup_class": [
                    "cls"
                ],
                "test_query_builtin": [
                    "self"
                ]
            },
            "TestDataFrameQueryStrings": {
                "test_str_query_method": [
                    "self",
                    "parser",
                    "engine"
                ],
                "test_str_list_query_method": [
                    "self",
                    "parser",
                    "engine"
                ],
                "test_query_with_string_columns": [
                    "self",
                    "parser",
                    "engine"
                ],
                "test_object_array_eq_ne": [
                    "self",
                    "parser",
                    "engine"
                ],
                "test_query_with_nested_strings": [
                    "self",
                    "parser",
                    "engine"
                ],
                "test_query_with_nested_special_character": [
                    "self",
                    "parser",
                    "engine"
                ],
                "test_query_lex_compare_strings": [
                    "self",
                    "parser",
                    "engine"
                ],
                "test_query_single_element_booleans": [
                    "self",
                    "parser",
                    "engine"
                ],
                "test_query_string_scalar_variable": [
                    "self",
                    "parser",
                    "engine"
                ]
            },
            "TestDataFrameEvalWithFrame": {
                "setup_method": [
                    "self",
                    "method"
                ],
                "teardown_method": [
                    "self",
                    "method"
                ],
                "test_simple_expr": [
                    "self",
                    "parser",
                    "engine"
                ],
                "test_bool_arith_expr": [
                    "self",
                    "parser",
                    "engine"
                ],
                "test_invalid_type_for_operator_raises": [
                    "self",
                    "parser",
                    "engine",
                    "op"
                ]
            },
            "TestDataFrameQueryBacktickQuoting": {
                "df": [
                    "self"
                ],
                "test_single_backtick_variable_query": [
                    "self",
                    "df"
                ],
                "test_two_backtick_variables_query": [
                    "self",
                    "df"
                ],
                "test_single_backtick_variable_expr": [
                    "self",
                    "df"
                ],
                "test_two_backtick_variables_expr": [
                    "self",
                    "df"
                ],
                "test_already_underscore_variable": [
                    "self",
                    "df"
                ],
                "test_same_name_but_underscores": [
                    "self",
                    "df"
                ],
                "test_mixed_underscores_and_spaces": [
                    "self",
                    "df"
                ],
                "test_backtick_quote_name_with_no_spaces": [
                    "self",
                    "df"
                ],
                "test_special_characters": [
                    "self",
                    "df"
                ],
                "test_start_with_digit": [
                    "self",
                    "df"
                ],
                "test_keyword": [
                    "self",
                    "df"
                ],
                "test_unneeded_quoting": [
                    "self",
                    "df"
                ],
                "test_parenthesis": [
                    "self",
                    "df"
                ],
                "test_empty_string": [
                    "self",
                    "df"
                ],
                "test_multiple_spaces": [
                    "self",
                    "df"
                ],
                "test_start_with_spaces": [
                    "self",
                    "df"
                ],
                "test_lots_of_operators_string": [
                    "self",
                    "df"
                ],
                "test_missing_attribute": [
                    "self",
                    "df"
                ],
                "test_failing_quote": [
                    "self",
                    "df"
                ],
                "test_failing_character_outside_range": [
                    "self",
                    "df"
                ],
                "test_failing_hashtag": [
                    "self",
                    "df"
                ],
                "test_call_non_named_expression": [
                    "self",
                    "df"
                ]
            }
        },
        "pandas.tests.frame.test_repr_info": {
            "TestDataFrameReprInfoEtc": {
                "test_repr_empty": [
                    "self"
                ],
                "test_repr_mixed": [
                    "self",
                    "float_string_frame"
                ],
                "test_repr_mixed_big": [
                    "self"
                ],
                "test_repr": [
                    "self",
                    "float_frame"
                ],
                "test_repr_dimensions": [
                    "self"
                ],
                "test_repr_big": [
                    "self"
                ],
                "test_repr_unsortable": [
                    "self",
                    "float_frame"
                ],
                "test_repr_unicode": [
                    "self"
                ],
                "test_unicode_string_with_unicode": [
                    "self"
                ],
                "test_repr_unicode_columns": [
                    "self"
                ],
                "test_str_to_bytes_raises": [
                    "self"
                ],
                "test_very_wide_info_repr": [
                    "self"
                ],
                "test_repr_column_name_unicode_truncation_bug": [
                    "self"
                ],
                "test_latex_repr": [
                    "self"
                ],
                "test_repr_categorical_dates_periods": [
                    "self"
                ],
                "test_repr_np_nat_with_object": [
                    "self",
                    "arg",
                    "box",
                    "expected"
                ],
                "test_frame_datetime64_pre1900_repr": [
                    "self"
                ]
            }
        },
        "pandas.tests.frame.test_cumulative": {
            "TestDataFrameCumulativeOps": {
                "test_cumsum_corner": [
                    "self"
                ],
                "test_cumsum": [
                    "self",
                    "datetime_frame"
                ],
                "test_cumprod": [
                    "self",
                    "datetime_frame"
                ],
                "test_cummin": [
                    "self",
                    "datetime_frame"
                ],
                "test_cummax": [
                    "self",
                    "datetime_frame"
                ],
                "test_cumulative_ops_preserve_dtypes": [
                    "self"
                ]
            }
        },
        "pandas.tests.frame.test_api": {
            "TestDataFrameMisc": {
                "test_copy_index_name_checking": [
                    "self",
                    "float_frame",
                    "attr"
                ],
                "test_getitem_pop_assign_name": [
                    "self",
                    "float_frame"
                ],
                "test_get_value": [
                    "self",
                    "float_frame"
                ],
                "test_add_prefix_suffix": [
                    "self",
                    "float_frame"
                ],
                "test_get_axis": [
                    "self",
                    "float_frame"
                ],
                "test_keys": [
                    "self",
                    "float_frame"
                ],
                "test_column_contains_raises": [
                    "self",
                    "float_frame"
                ],
                "test_tab_completion": [
                    "self"
                ],
                "test_not_hashable": [
                    "self"
                ],
                "test_column_name_contains_unicode_surrogate": [
                    "self"
                ],
                "test_new_empty_index": [
                    "self"
                ],
                "test_array_interface": [
                    "self",
                    "float_frame"
                ],
                "test_get_agg_axis": [
                    "self",
                    "float_frame"
                ],
                "test_nonzero": [
                    "self",
                    "float_frame",
                    "float_string_frame"
                ],
                "test_iteritems": [
                    "self"
                ],
                "test_items": [
                    "self"
                ],
                "test_iter": [
                    "self",
                    "float_frame"
                ],
                "test_iterrows": [
                    "self",
                    "float_frame",
                    "float_string_frame"
                ],
                "test_iterrows_iso8601": [
                    "self"
                ],
                "test_iterrows_corner": [
                    "self"
                ],
                "test_itertuples": [
                    "self",
                    "float_frame"
                ],
                "test_sequence_like_with_categorical": [
                    "self"
                ],
                "test_len": [
                    "self",
                    "float_frame"
                ],
                "test_values_mixed_dtypes": [
                    "self",
                    "float_frame",
                    "float_string_frame"
                ],
                "test_to_numpy": [
                    "self"
                ],
                "test_to_numpy_dtype": [
                    "self"
                ],
                "test_to_numpy_copy": [
                    "self"
                ],
                "test_to_numpy_mixed_dtype_to_str": [
                    "self"
                ],
                "test_swapaxes": [
                    "self"
                ],
                "test_axis_aliases": [
                    "self",
                    "float_frame"
                ],
                "test_class_axis": [
                    "self"
                ],
                "test_more_values": [
                    "self",
                    "float_string_frame"
                ],
                "test_repr_with_mi_nat": [
                    "self",
                    "float_string_frame"
                ],
                "test_items_names": [
                    "self",
                    "float_string_frame"
                ],
                "test_series_put_names": [
                    "self",
                    "float_string_frame"
                ],
                "test_empty_nonzero": [
                    "self"
                ],
                "test_with_datetimelikes": [
                    "self"
                ],
                "test_values": [
                    "self",
                    "float_frame"
                ],
                "test_deepcopy": [
                    "self",
                    "float_frame"
                ],
                "test_inplace_return_self": [
                    "self"
                ],
                "test_attrs": [
                    "self"
                ],
                "test_cache_on_copy": [
                    "self"
                ],
                "test_constructor_expanddim_lookup": [
                    "self"
                ]
            }
        },
        "pandas.tests.frame.test_join": {
            "frame_with_period_index": [],
            "left": [],
            "right": [],
            "test_join": [
                "left",
                "right",
                "how",
                "sort",
                "expected"
            ],
            "test_join_index": [
                "float_frame"
            ],
            "test_join_index_more": [
                "float_frame"
            ],
            "test_join_index_series": [
                "float_frame"
            ],
            "test_join_overlap": [
                "float_frame"
            ],
            "test_join_period_index": [
                "frame_with_period_index"
            ],
            "test_join_left_sequence_non_unique_index": [],
            "test_suppress_future_warning_with_sort_kw": [
                "sort_kw"
            ],
            "TestDataFrameJoin": {
                "test_join_str_datetime": [
                    "self"
                ],
                "test_join_multiindex_leftright": [
                    "self"
                ]
            }
        },
        "pandas.tests.frame.test_subclass": {
            "TestDataFrameSubclassing": {
                "test_frame_subclassing_and_slicing": [
                    "self"
                ],
                "test_dataframe_metadata": [
                    "self"
                ],
                "test_indexing_sliced": [
                    "self"
                ],
                "test_subclass_attr_err_propagation": [
                    "self"
                ],
                "test_subclass_align": [
                    "self"
                ],
                "test_subclass_align_combinations": [
                    "self"
                ],
                "test_subclass_iterrows": [
                    "self"
                ],
                "test_subclass_stack": [
                    "self"
                ],
                "test_subclass_stack_multi": [
                    "self"
                ],
                "test_subclass_stack_multi_mixed": [
                    "self"
                ],
                "test_subclass_unstack": [
                    "self"
                ],
                "test_subclass_unstack_multi": [
                    "self"
                ],
                "test_subclass_unstack_multi_mixed": [
                    "self"
                ],
                "test_subclass_pivot": [
                    "self"
                ],
                "test_subclassed_melt": [
                    "self"
                ],
                "test_subclassed_wide_to_long": [
                    "self"
                ],
                "test_subclassed_apply": [
                    "self"
                ],
                "test_subclassed_reductions": [
                    "self",
                    "all_reductions"
                ],
                "test_subclassed_count": [
                    "self"
                ],
                "test_isin": [
                    "self"
                ],
                "test_duplicated": [
                    "self"
                ],
                "test_idx": [
                    "self",
                    "idx_method"
                ],
                "test_dot": [
                    "self"
                ],
                "test_memory_usage": [
                    "self"
                ],
                "test_corrwith": [
                    "self"
                ],
                "test_asof": [
                    "self"
                ],
                "test_idxmin_preserves_subclass": [
                    "self"
                ],
                "test_idxmax_preserves_subclass": [
                    "self"
                ],
                "test_equals_subclass": [
                    "self"
                ]
            }
        },
        "pandas.tests.frame.test_constructors": {
            "TestDataFrameConstructors": {
                "test_series_with_name_not_matching_column": [
                    "self"
                ],
                "test_empty_constructor": [
                    "self",
                    "constructor"
                ],
                "test_emptylike_constructor": [
                    "self",
                    "emptylike",
                    "expected_index",
                    "expected_columns"
                ],
                "test_constructor_mixed": [
                    "self",
                    "float_string_frame"
                ],
                "test_constructor_cast_failure": [
                    "self"
                ],
                "test_constructor_dtype_copy": [
                    "self"
                ],
                "test_constructor_dtype_nocast_view": [
                    "self"
                ],
                "test_constructor_dtype_list_data": [
                    "self"
                ],
                "test_constructor_list_of_2d_raises": [
                    "self"
                ],
                "test_constructor_mixed_dtypes": [
                    "self"
                ],
                "test_constructor_complex_dtypes": [
                    "self"
                ],
                "test_constructor_dtype_str_na_values": [
                    "self",
                    "string_dtype"
                ],
                "test_constructor_rec": [
                    "self",
                    "float_frame"
                ],
                "test_constructor_bool": [
                    "self"
                ],
                "test_constructor_overflow_int64": [
                    "self"
                ],
                "test_constructor_int_overflow": [
                    "self",
                    "values"
                ],
                "test_constructor_ordereddict": [
                    "self"
                ],
                "test_constructor_dict": [
                    "self"
                ],
                "test_constructor_invalid_items_unused": [
                    "self",
                    "scalar"
                ],
                "test_constructor_dict_nan_key": [
                    "self",
                    "value"
                ],
                "test_constructor_dict_nan_tuple_key": [
                    "self",
                    "value"
                ],
                "test_constructor_dict_order_insertion": [
                    "self"
                ],
                "test_constructor_dict_nan_key_and_columns": [
                    "self"
                ],
                "test_constructor_multi_index": [
                    "self"
                ],
                "test_constructor_2d_index": [
                    "self"
                ],
                "test_constructor_error_msgs": [
                    "self"
                ],
                "test_constructor_subclass_dict": [
                    "self",
                    "float_frame",
                    "dict_subclass"
                ],
                "test_constructor_dict_block": [
                    "self"
                ],
                "test_constructor_dict_cast": [
                    "self"
                ],
                "test_constructor_dict_dont_upcast": [
                    "self"
                ],
                "test_constructor_dict_of_tuples": [
                    "self"
                ],
                "test_constructor_dict_of_ranges": [
                    "self"
                ],
                "test_constructor_dict_of_iterators": [
                    "self"
                ],
                "test_constructor_dict_of_generators": [
                    "self"
                ],
                "test_constructor_dict_multiindex": [
                    "self"
                ],
                "test_constructor_dict_datetime64_index": [
                    "self"
                ],
                "test_constructor_dict_timedelta64_index": [
                    "self"
                ],
                "test_constructor_period_dict": [
                    "self"
                ],
                "test_constructor_extension_scalar_data": [
                    "self",
                    "data",
                    "dtype"
                ],
                "test_nested_dict_frame_constructor": [
                    "self"
                ],
                "_check_basic_constructor": [
                    "self",
                    "empty"
                ],
                "test_constructor_ndarray": [
                    "self"
                ],
                "test_constructor_maskedarray": [
                    "self"
                ],
                "test_constructor_maskedarray_nonfloat": [
                    "self"
                ],
                "test_constructor_maskedarray_hardened": [
                    "self"
                ],
                "test_constructor_maskedrecarray_dtype": [
                    "self"
                ],
                "test_constructor_mrecarray": [
                    "self"
                ],
                "test_constructor_corner_shape": [
                    "self"
                ],
                "test_constructor_dtype": [
                    "self",
                    "data",
                    "index",
                    "columns",
                    "dtype",
                    "expected"
                ],
                "test_constructor_scalar_inference": [
                    "self"
                ],
                "test_constructor_arrays_and_scalars": [
                    "self"
                ],
                "test_constructor_DataFrame": [
                    "self",
                    "float_frame"
                ],
                "test_constructor_more": [
                    "self",
                    "float_frame"
                ],
                "test_constructor_empty_list": [
                    "self"
                ],
                "test_constructor_list_of_lists": [
                    "self"
                ],
                "test_constructor_list_like_data_nested_list_column": [
                    "self"
                ],
                "test_constructor_wrong_length_nested_list_column": [
                    "self"
                ],
                "test_constructor_unequal_length_nested_list_column": [
                    "self"
                ],
                "test_constructor_sequence_like": [
                    "self"
                ],
                "test_constructor_range": [
                    "self"
                ],
                "test_constructor_list_of_ranges": [
                    "self"
                ],
                "test_constructor_iterable": [
                    "self"
                ],
                "test_constructor_iterator": [
                    "self"
                ],
                "test_constructor_list_of_iterators": [
                    "self"
                ],
                "test_constructor_generator": [
                    "self"
                ],
                "test_constructor_list_of_odicts": [
                    "self"
                ],
                "test_constructor_single_row": [
                    "self"
                ],
                "test_constructor_ordered_dict_preserve_order": [
                    "self"
                ],
                "test_constructor_ordered_dict_conflicting_orders": [
                    "self"
                ],
                "test_constructor_list_of_series": [
                    "self"
                ],
                "test_constructor_list_of_series_aligned_index": [
                    "self"
                ],
                "test_constructor_list_of_derived_dicts": [
                    "self"
                ],
                "test_constructor_ragged": [
                    "self"
                ],
                "test_constructor_scalar": [
                    "self"
                ],
                "test_constructor_Series_copy_bug": [
                    "self",
                    "float_frame"
                ],
                "test_constructor_mixed_dict_and_Series": [
                    "self"
                ],
                "test_constructor_mixed_type_rows": [
                    "self"
                ],
                "test_constructor_tuple": [
                    "self",
                    "tuples",
                    "lists"
                ],
                "test_constructor_list_of_tuples": [
                    "self"
                ],
                "test_constructor_list_of_namedtuples": [
                    "self"
                ],
                "test_constructor_list_of_dataclasses": [
                    "self"
                ],
                "test_constructor_list_of_dataclasses_with_varying_types": [
                    "self"
                ],
                "test_constructor_list_of_dataclasses_error_thrown": [
                    "self"
                ],
                "test_constructor_list_of_dict_order": [
                    "self"
                ],
                "test_constructor_orient": [
                    "self",
                    "float_string_frame"
                ],
                "test_constructor_from_ordered_dict": [
                    "self"
                ],
                "test_from_dict_columns_parameter": [
                    "self"
                ],
                "test_constructor_from_dict_tuples": [
                    "self",
                    "data_dict",
                    "keys",
                    "orient"
                ],
                "test_constructor_Series_named": [
                    "self"
                ],
                "test_constructor_Series_named_and_columns": [
                    "self"
                ],
                "test_constructor_Series_differently_indexed": [
                    "self"
                ],
                "test_constructor_manager_resize": [
                    "self",
                    "float_frame"
                ],
                "test_constructor_mix_series_nonseries": [
                    "self",
                    "float_frame"
                ],
                "test_constructor_miscast_na_int_dtype": [
                    "self"
                ],
                "test_constructor_column_duplicates": [
                    "self"
                ],
                "test_constructor_empty_with_string_dtype": [
                    "self"
                ],
                "test_constructor_empty_with_string_extension": [
                    "self"
                ],
                "test_constructor_single_value": [
                    "self"
                ],
                "test_constructor_with_datetimes": [
                    "self"
                ],
                "test_constructor_datetimes_with_nulls": [
                    "self",
                    "arr"
                ],
                "test_constructor_for_list_with_dtypes": [
                    "self"
                ],
                "test_constructor_frame_copy": [
                    "self",
                    "float_frame"
                ],
                "test_constructor_ndarray_copy": [
                    "self",
                    "float_frame"
                ],
                "test_constructor_series_copy": [
                    "self",
                    "float_frame"
                ],
                "test_constructor_with_nas": [
                    "self"
                ],
                "test_constructor_lists_to_object_dtype": [
                    "self"
                ],
                "test_constructor_categorical": [
                    "self"
                ],
                "test_constructor_categorical_series": [
                    "self"
                ],
                "test_from_records_to_records": [
                    "self"
                ],
                "test_from_records_nones": [
                    "self"
                ],
                "test_from_records_iterator": [
                    "self"
                ],
                "test_from_records_tuples_generator": [
                    "self"
                ],
                "test_from_records_lists_generator": [
                    "self"
                ],
                "test_from_records_columns_not_modified": [
                    "self"
                ],
                "test_from_records_decimal": [
                    "self"
                ],
                "test_from_records_duplicates": [
                    "self"
                ],
                "test_from_records_set_index_name": [
                    "self"
                ],
                "test_from_records_misc_brokenness": [
                    "self"
                ],
                "test_from_records_empty": [
                    "self"
                ],
                "test_from_records_empty_with_nonempty_fields_gh3682": [
                    "self"
                ],
                "test_check_dtype_empty_numeric_column": [
                    "self",
                    "dtype"
                ],
                "test_check_dtype_empty_string_column": [
                    "self",
                    "dtype"
                ],
                "test_from_records_with_datetimes": [
                    "self"
                ],
                "test_from_records_sequencelike": [
                    "self"
                ],
                "test_from_records_dictlike": [
                    "self"
                ],
                "test_from_records_with_index_data": [
                    "self"
                ],
                "test_from_records_bad_index_column": [
                    "self"
                ],
                "test_from_records_non_tuple": [
                    "self"
                ],
                "test_from_records_len0_with_columns": [
                    "self"
                ],
                "test_from_records_series_list_dict": [
                    "self"
                ],
                "test_from_records_series_categorical_index": [
                    "self"
                ],
                "test_frame_from_records_utc": [
                    "self"
                ],
                "test_to_frame_with_falsey_names": [
                    "self"
                ],
                "test_constructor_range_dtype": [
                    "self",
                    "dtype"
                ],
                "test_frame_from_list_subclass": [
                    "self"
                ],
                "test_constructor_with_extension_array": [
                    "self",
                    "extension_arr"
                ],
                "test_datetime_date_tuple_columns_from_dict": [
                    "self"
                ],
                "test_construct_with_two_categoricalindex_series": [
                    "self"
                ],
                "test_from_M8_structured": [
                    "self"
                ],
                "test_from_datetime_subclass": [
                    "self"
                ],
                "test_with_mismatched_index_length_raises": [
                    "self"
                ]
            },
            "TestDataFrameConstructorWithDatetimeTZ": {
                "test_from_dict": [
                    "self"
                ],
                "test_from_index": [
                    "self"
                ],
                "test_frame_dict_constructor_datetime64_1680": [
                    "self"
                ],
                "test_frame_datetime64_mixed_index_ctor_1681": [
                    "self"
                ],
                "test_frame_timeseries_to_records": [
                    "self"
                ],
                "test_frame_timeseries_column": [
                    "self"
                ],
                "test_nested_dict_construction": [
                    "self"
                ],
                "test_from_tzaware_object_array": [
                    "self"
                ],
                "test_from_tzaware_mixed_object_array": [
                    "self"
                ],
                "test_from_2d_ndarray_with_dtype": [
                    "self"
                ],
                "test_construction_from_set_raises": [
                    "self"
                ]
            }
        },
        "pandas.tests.frame.test_dtypes": {
            "_check_cast": [
                "df",
                "v"
            ],
            "TestDataFrameDataTypes": {
                "test_concat_empty_dataframe_dtypes": [
                    "self"
                ],
                "test_empty_frame_dtypes": [
                    "self"
                ],
                "test_datetime_with_tz_dtypes": [
                    "self"
                ],
                "test_dtypes_are_correct_after_column_slice": [
                    "self"
                ],
                "test_dtypes_gh8722": [
                    "self",
                    "float_string_frame"
                ],
                "test_singlerow_slice_categoricaldtype_gives_series": [
                    "self"
                ],
                "test_timedeltas": [
                    "self"
                ],
                "test_constructor_list_str": [
                    "self",
                    "input_vals",
                    "string_dtype"
                ],
                "test_constructor_list_str_na": [
                    "self",
                    "string_dtype"
                ],
                "test_is_homogeneous_type": [
                    "self",
                    "data",
                    "expected"
                ],
                "test_is_homogeneous_type_clears_cache": [
                    "self"
                ],
                "test_asarray_homogenous": [
                    "self"
                ],
                "test_str_to_small_float_conversion_type": [
                    "self"
                ],
                "test_convert_dtypes": [
                    "self",
                    "convert_integer",
                    "expected"
                ]
            },
            "TestDataFrameDatetimeWithTZ": {
                "test_interleave": [
                    "self",
                    "timezone_frame"
                ]
            }
        },
        "pandas.tests.frame.conftest": {
            "close_open_fixture": [
                "request"
            ],
            "float_frame_with_na": [],
            "bool_frame_with_na": [],
            "float_string_frame": [],
            "mixed_float_frame": [],
            "mixed_int_frame": [],
            "mixed_type_frame": [],
            "timezone_frame": [],
            "uint64_frame": [],
            "simple_frame": [],
            "frame_of_index_cols": []
        },
        "pandas.tests.frame.test_arithmetic": {
            "test_frame_with_zero_len_series_corner_cases": [],
            "test_zero_len_frame_with_series_corner_cases": [],
            "test_frame_single_columns_object_sum_axis_1": [],
            "test_pow_with_realignment": [],
            "test_pow_nan_with_zero": [],
            "test_dataframe_series_extension_dtypes": [],
            "test_dataframe_blockwise_slicelike": [],
            "test_dataframe_operation_with_non_numeric_types": [
                "df",
                "col_dtype"
            ],
            "test_arith_reindex_with_duplicates": [],
            "TestFrameComparisons": {
                "test_frame_in_list": [
                    "self"
                ],
                "test_comparison_invalid": [
                    "self"
                ],
                "test_timestamp_compare": [
                    "self"
                ],
                "test_mixed_comparison": [
                    "self"
                ],
                "test_df_boolean_comparison_error": [
                    "self"
                ],
                "test_df_float_none_comparison": [
                    "self"
                ],
                "test_df_string_comparison": [
                    "self"
                ]
            },
            "TestFrameFlexComparisons": {
                "test_bool_flex_frame": [
                    "self"
                ],
                "test_bool_flex_frame_complex_dtype": [
                    "self"
                ],
                "test_bool_flex_frame_object_dtype": [
                    "self"
                ],
                "test_flex_comparison_nat": [
                    "self"
                ],
                "test_df_flex_cmp_constant_return_types": [
                    "self",
                    "opname"
                ],
                "test_df_flex_cmp_constant_return_types_empty": [
                    "self",
                    "opname"
                ],
                "test_df_flex_cmp_ea_dtype_with_ndarray_series": [
                    "self"
                ]
            },
            "TestFrameFlexArithmetic": {
                "test_floordiv_axis0": [
                    "self"
                ],
                "test_floordiv_axis0_numexpr_path": [
                    "self",
                    "opname"
                ],
                "test_df_add_td64_columnwise": [
                    "self"
                ],
                "test_df_add_flex_filled_mixed_dtypes": [
                    "self"
                ],
                "test_arith_flex_frame": [
                    "self",
                    "all_arithmetic_operators",
                    "float_frame",
                    "mixed_float_frame"
                ],
                "test_arith_flex_frame_mixed": [
                    "self",
                    "op",
                    "int_frame",
                    "mixed_int_frame",
                    "mixed_float_frame"
                ],
                "test_arith_flex_frame_raise": [
                    "self",
                    "all_arithmetic_operators",
                    "float_frame"
                ],
                "test_arith_flex_frame_corner": [
                    "self",
                    "float_frame"
                ],
                "test_arith_flex_series": [
                    "self",
                    "simple_frame"
                ],
                "test_arith_flex_zero_len_raises": [
                    "self"
                ],
                "test_flex_add_scalar_fill_value": [
                    "self"
                ]
            },
            "TestFrameArithmetic": {
                "test_td64_op_nat_casting": [
                    "self"
                ],
                "test_df_add_2d_array_rowlike_broadcasts": [
                    "self"
                ],
                "test_df_add_2d_array_collike_broadcasts": [
                    "self"
                ],
                "test_df_arith_2d_array_rowlike_broadcasts": [
                    "self",
                    "all_arithmetic_operators"
                ],
                "test_df_arith_2d_array_collike_broadcasts": [
                    "self",
                    "all_arithmetic_operators"
                ],
                "test_df_bool_mul_int": [
                    "self"
                ],
                "test_arith_mixed": [
                    "self"
                ],
                "test_arith_getitem_commute": [
                    "self"
                ],
                "test_arith_alignment_non_pandas_object": [
                    "self",
                    "values"
                ],
                "test_arith_non_pandas_object": [
                    "self"
                ],
                "test_operations_with_interval_categories_index": [
                    "self",
                    "all_arithmetic_operators"
                ],
                "test_frame_with_frame_reindex": [
                    "self"
                ]
            },
            "TestFrameArithmeticUnsorted": {
                "test_frame_add_tz_mismatch_converts_to_utc": [
                    "self"
                ],
                "test_align_frame": [
                    "self"
                ],
                "test_operators_none_as_na": [
                    "self",
                    "op"
                ],
                "test_logical_typeerror_with_non_valid": [
                    "self",
                    "op",
                    "res",
                    "float_frame"
                ],
                "test_binary_ops_align": [
                    "self"
                ],
                "test_add_with_dti_mismatched_tzs": [
                    "self"
                ],
                "test_combineFrame": [
                    "self",
                    "float_frame",
                    "mixed_float_frame",
                    "mixed_int_frame"
                ],
                "test_combine_series": [
                    "self",
                    "float_frame",
                    "mixed_float_frame",
                    "mixed_int_frame",
                    "datetime_frame"
                ],
                "test_combineFunc": [
                    "self",
                    "float_frame",
                    "mixed_float_frame"
                ],
                "test_comparisons": [
                    "self",
                    "simple_frame",
                    "float_frame"
                ],
                "test_strings_to_numbers_comparisons_raises": [
                    "self",
                    "compare_operators_no_eq_ne"
                ],
                "test_comparison_protected_from_errstate": [
                    "self"
                ],
                "test_boolean_comparison": [
                    "self"
                ],
                "test_inplace_ops_alignment": [
                    "self"
                ],
                "test_inplace_ops_identity": [
                    "self"
                ],
                "test_inplace_ops_identity2": [
                    "self",
                    "op"
                ],
                "test_alignment_non_pandas": [
                    "self"
                ],
                "test_no_warning": [
                    "self",
                    "all_arithmetic_operators"
                ]
            }
        },
        "pandas.tests.frame.test_analytics": {
            "assert_stat_op_calc": [
                "opname",
                "alternative",
                "frame",
                "has_skipna",
                "check_dtype",
                "check_dates",
                "rtol",
                "atol",
                "skipna_alternative"
            ],
            "assert_stat_op_api": [
                "opname",
                "float_frame",
                "float_string_frame",
                "has_numeric_only"
            ],
            "assert_bool_op_calc": [
                "opname",
                "alternative",
                "frame",
                "has_skipna"
            ],
            "assert_bool_op_api": [
                "opname",
                "bool_frame_with_na",
                "float_string_frame",
                "has_bool_only"
            ],
            "test_mixed_frame_with_integer_sum": [],
            "test_minmax_extensionarray": [
                "method",
                "numeric_only"
            ],
            "TestDataFrameAnalytics": {
                "test_stat_op_api": [
                    "self",
                    "float_frame",
                    "float_string_frame"
                ],
                "test_stat_op_calc": [
                    "self",
                    "float_frame_with_na",
                    "mixed_float_frame"
                ],
                "test_median": [
                    "self",
                    "float_frame_with_na",
                    "int_frame"
                ],
                "test_stat_operators_attempt_obj_array": [
                    "self",
                    "method"
                ],
                "test_mixed_ops": [
                    "self",
                    "op"
                ],
                "test_reduce_mixed_frame": [
                    "self"
                ],
                "test_nunique": [
                    "self"
                ],
                "test_mean_mixed_datetime_numeric": [
                    "self",
                    "tz"
                ],
                "test_mean_excludes_datetimes": [
                    "self",
                    "tz"
                ],
                "test_mean_mixed_string_decimal": [
                    "self"
                ],
                "test_var_std": [
                    "self",
                    "datetime_frame"
                ],
                "test_numeric_only_flag": [
                    "self",
                    "meth"
                ],
                "test_sem": [
                    "self",
                    "datetime_frame"
                ],
                "test_kurt": [
                    "self"
                ],
                "test_mode_dropna": [
                    "self",
                    "dropna",
                    "expected"
                ],
                "test_mode_sortwarning": [
                    "self"
                ],
                "test_operators_timedelta64": [
                    "self"
                ],
                "test_sum_corner": [
                    "self"
                ],
                "test_sum_prod_nanops": [
                    "self",
                    "method",
                    "unit"
                ],
                "test_sum_nanops_timedelta": [
                    "self"
                ],
                "test_sum_object": [
                    "self",
                    "float_frame"
                ],
                "test_sum_bool": [
                    "self",
                    "float_frame"
                ],
                "test_sum_mixed_datetime": [
                    "self"
                ],
                "test_mean_corner": [
                    "self",
                    "float_frame",
                    "float_string_frame"
                ],
                "test_mean_datetimelike": [
                    "self"
                ],
                "test_mean_datetimelike_numeric_only_false": [
                    "self"
                ],
                "test_mean_extensionarray_numeric_only_true": [
                    "self"
                ],
                "test_stats_mixed_type": [
                    "self",
                    "float_string_frame"
                ],
                "test_sum_bools": [
                    "self"
                ],
                "test_idxmin": [
                    "self",
                    "float_frame",
                    "int_frame"
                ],
                "test_idxmax": [
                    "self",
                    "float_frame",
                    "int_frame"
                ],
                "test_any_all": [
                    "self",
                    "opname",
                    "bool_frame_with_na",
                    "float_string_frame"
                ],
                "test_any_all_extra": [
                    "self"
                ],
                "test_any_datetime": [
                    "self"
                ],
                "test_any_all_bool_only": [
                    "self"
                ],
                "test_any_all_np_func": [
                    "self",
                    "func",
                    "data",
                    "expected"
                ],
                "test_any_all_object": [
                    "self"
                ],
                "test_any_all_level_axis_none_raises": [
                    "self",
                    "method"
                ],
                "test_matmul": [
                    "self"
                ],
                "test_series_broadcasting": [
                    "self"
                ]
            },
            "TestDataFrameReductions": {
                "test_min_max_dt64_with_NaT": [
                    "self"
                ],
                "test_min_max_dt64_api_consistency_with_NaT": [
                    "self"
                ],
                "test_min_max_dt64_api_consistency_empty_df": [
                    "self"
                ],
                "test_preserve_timezone": [
                    "self",
                    "initial",
                    "method"
                ]
            }
        },
        "pandas.tests.frame.test_missing": {
            "TestDataFrameMissingData": {
                "test_dropEmptyRows": [
                    "self",
                    "float_frame"
                ],
                "test_dropIncompleteRows": [
                    "self",
                    "float_frame"
                ],
                "test_dropna": [
                    "self"
                ],
                "test_drop_and_dropna_caching": [
                    "self"
                ],
                "test_dropna_corner": [
                    "self",
                    "float_frame"
                ],
                "test_dropna_multiple_axes": [
                    "self"
                ],
                "test_dropna_tz_aware_datetime": [
                    "self"
                ],
                "test_dropna_categorical_interval_index": [
                    "self"
                ],
                "test_fillna_datetime": [
                    "self",
                    "datetime_frame"
                ],
                "test_fillna_mixed_type": [
                    "self",
                    "float_string_frame"
                ],
                "test_fillna_mixed_float": [
                    "self",
                    "mixed_float_frame"
                ],
                "test_fillna_empty": [
                    "self"
                ],
                "test_fillna_different_dtype": [
                    "self"
                ],
                "test_fillna_limit_and_value": [
                    "self"
                ],
                "test_fillna_datelike": [
                    "self"
                ],
                "test_fillna_tzaware": [
                    "self"
                ],
                "test_fillna_tzaware_different_column": [
                    "self"
                ],
                "test_na_actions_categorical": [
                    "self"
                ],
                "test_fillna_categorical_nan": [
                    "self"
                ],
                "test_fillna_downcast": [
                    "self"
                ],
                "test_fillna_dtype_conversion": [
                    "self"
                ],
                "test_fillna_datetime_columns": [
                    "self"
                ],
                "test_ffill": [
                    "self",
                    "datetime_frame"
                ],
                "test_bfill": [
                    "self",
                    "datetime_frame"
                ],
                "test_frame_pad_backfill_limit": [
                    "self"
                ],
                "test_frame_fillna_limit": [
                    "self"
                ],
                "test_fillna_skip_certain_blocks": [
                    "self"
                ],
                "test_fillna_positive_limit": [
                    "self",
                    "type"
                ],
                "test_fillna_integer_limit": [
                    "self",
                    "type"
                ],
                "test_fillna_inplace": [
                    "self"
                ],
                "test_fillna_dict_series": [
                    "self"
                ],
                "test_fillna_dataframe": [
                    "self"
                ],
                "test_fillna_columns": [
                    "self"
                ],
                "test_fillna_invalid_method": [
                    "self",
                    "float_frame"
                ],
                "test_fillna_invalid_value": [
                    "self",
                    "float_frame"
                ],
                "test_fillna_col_reordering": [
                    "self"
                ],
                "test_fill_corner": [
                    "self",
                    "float_frame",
                    "float_string_frame"
                ]
            }
        },
        "pandas.tests.frame": {},
        "pandas.tests.frame.test_block_internals": {
            "TestDataFrameBlockInternals": {
                "test_setitem_invalidates_datetime_index_freq": [
                    "self"
                ],
                "test_cast_internals": [
                    "self",
                    "float_frame"
                ],
                "test_consolidate": [
                    "self",
                    "float_frame"
                ],
                "test_consolidate_inplace": [
                    "self",
                    "float_frame"
                ],
                "test_values_consolidate": [
                    "self",
                    "float_frame"
                ],
                "test_modify_values": [
                    "self",
                    "float_frame"
                ],
                "test_boolean_set_uncons": [
                    "self",
                    "float_frame"
                ],
                "test_values_numeric_cols": [
                    "self",
                    "float_frame"
                ],
                "test_values_lcd": [
                    "self",
                    "mixed_float_frame",
                    "mixed_int_frame"
                ],
                "test_constructor_with_convert": [
                    "self"
                ],
                "test_construction_with_mixed": [
                    "self",
                    "float_string_frame"
                ],
                "test_construction_with_conversions": [
                    "self"
                ],
                "test_constructor_compound_dtypes": [
                    "self"
                ],
                "test_equals_different_blocks": [
                    "self"
                ],
                "test_copy_blocks": [
                    "self",
                    "float_frame"
                ],
                "test_no_copy_blocks": [
                    "self",
                    "float_frame"
                ],
                "test_copy": [
                    "self",
                    "float_frame",
                    "float_string_frame"
                ],
                "test_pickle": [
                    "self",
                    "float_string_frame",
                    "timezone_frame"
                ],
                "test_consolidate_datetime64": [
                    "self"
                ],
                "test_is_mixed_type": [
                    "self",
                    "float_frame",
                    "float_string_frame"
                ],
                "test_get_numeric_data": [
                    "self"
                ],
                "test_get_numeric_data_extension_dtype": [
                    "self"
                ],
                "test_convert_objects": [
                    "self",
                    "float_string_frame"
                ],
                "test_convert_objects_no_conversion": [
                    "self"
                ],
                "test_infer_objects": [
                    "self"
                ],
                "test_stale_cached_series_bug_473": [
                    "self"
                ],
                "test_get_X_columns": [
                    "self"
                ],
                "test_strange_column_corruption_issue": [
                    "self"
                ],
                "test_constructor_no_pandas_array": [
                    "self"
                ],
                "test_add_column_with_pandas_array": [
                    "self"
                ]
            }
        },
        "pandas.tests.frame.apply.test_apply_relabeling": {
            "TestDataFrameNamedAggregate": {
                "test_agg_relabel": [
                    "self"
                ],
                "test_agg_relabel_multi_columns_multi_methods": [
                    "self"
                ],
                "test_agg_relabel_partial_functions": [
                    "self"
                ],
                "test_agg_namedtuple": [
                    "self"
                ],
                "test_agg_raises": [
                    "self"
                ]
            }
        },
        "pandas.tests.frame.apply.test_frame_apply": {
            "int_frame_const_col": [],
            "zip_frames": [
                "frames",
                "axis"
            ],
            "test_apply_mutating": [],
            "TestDataFrameApply": {
                "test_apply": [
                    "self",
                    "float_frame"
                ],
                "test_apply_mixed_datetimelike": [
                    "self"
                ],
                "test_apply_empty": [
                    "self",
                    "float_frame"
                ],
                "test_apply_with_reduce_empty": [
                    "self"
                ],
                "test_apply_funcs_over_empty": [
                    "self",
                    "func"
                ],
                "test_nunique_empty": [
                    "self"
                ],
                "test_apply_standard_nonunique": [
                    "self"
                ],
                "test_apply_with_string_funcs": [
                    "self",
                    "float_frame",
                    "func",
                    "args",
                    "kwds"
                ],
                "test_apply_broadcast": [
                    "self",
                    "float_frame",
                    "int_frame_const_col"
                ],
                "test_apply_broadcast_error": [
                    "self",
                    "int_frame_const_col"
                ],
                "test_apply_raw": [
                    "self",
                    "float_frame",
                    "mixed_type_frame"
                ],
                "test_apply_axis1": [
                    "self",
                    "float_frame"
                ],
                "test_apply_ignore_failures": [
                    "self",
                    "float_string_frame"
                ],
                "test_apply_mixed_dtype_corner": [
                    "self"
                ],
                "test_apply_empty_infer_type": [
                    "self"
                ],
                "test_apply_with_args_kwds": [
                    "self",
                    "float_frame"
                ],
                "test_apply_yield_list": [
                    "self",
                    "float_frame"
                ],
                "test_apply_reduce_Series": [
                    "self",
                    "float_frame"
                ],
                "test_apply_reduce_rows_to_dict": [
                    "self"
                ],
                "test_apply_differently_indexed": [
                    "self"
                ],
                "test_apply_modify_traceback": [
                    "self"
                ],
                "test_apply_bug": [
                    "self"
                ],
                "test_apply_convert_objects": [
                    "self"
                ],
                "test_apply_attach_name": [
                    "self",
                    "float_frame"
                ],
                "test_apply_multi_index": [
                    "self",
                    "float_frame"
                ],
                "test_apply_dict": [
                    "self"
                ],
                "test_applymap": [
                    "self",
                    "float_frame"
                ],
                "test_applymap_box_timestamps": [
                    "self"
                ],
                "test_applymap_box": [
                    "self"
                ],
                "test_frame_apply_dont_convert_datetime64": [
                    "self"
                ],
                "test_apply_non_numpy_dtype": [
                    "self"
                ],
                "test_apply_dup_names_multi_agg": [
                    "self"
                ],
                "test_apply_nested_result_axis_1": [
                    "self"
                ],
                "test_apply_noreduction_tzaware_object": [
                    "self"
                ],
                "test_apply_function_runs_once": [
                    "self"
                ],
                "test_apply_raw_function_runs_once": [
                    "self"
                ],
                "test_applymap_function_runs_once": [
                    "self"
                ],
                "test_apply_with_byte_string": [
                    "self"
                ],
                "test_apply_category_equalness": [
                    "self",
                    "val"
                ]
            },
            "TestInferOutputShape": {
                "test_infer_row_shape": [
                    "self"
                ],
                "test_with_dictlike_columns": [
                    "self"
                ],
                "test_with_dictlike_columns_with_infer": [
                    "self"
                ],
                "test_with_listlike_columns": [
                    "self"
                ],
                "test_infer_output_shape_columns": [
                    "self"
                ],
                "test_infer_output_shape_listlike_columns": [
                    "self"
                ],
                "test_consistent_coerce_for_shapes": [
                    "self"
                ],
                "test_consistent_names": [
                    "self",
                    "int_frame_const_col"
                ],
                "test_result_type": [
                    "self",
                    "int_frame_const_col"
                ],
                "test_result_type_error": [
                    "self",
                    "result_type",
                    "int_frame_const_col"
                ],
                "test_consistency_for_boxed": [
                    "self",
                    "box",
                    "int_frame_const_col"
                ]
            },
            "TestDataFrameAggregate": {
                "test_agg_transform": [
                    "self",
                    "axis",
                    "float_frame"
                ],
                "test_transform_and_agg_err": [
                    "self",
                    "axis",
                    "float_frame"
                ],
                "test_transform_method_name": [
                    "self",
                    "method"
                ],
                "test_demo": [
                    "self"
                ],
                "test_agg_multiple_mixed_no_warning": [
                    "self"
                ],
                "test_agg_dict_nested_renaming_depr": [
                    "self"
                ],
                "test_agg_reduce": [
                    "self",
                    "axis",
                    "float_frame"
                ],
                "test_nuiscance_columns": [
                    "self"
                ],
                "test_non_callable_aggregates": [
                    "self"
                ],
                "test_agg_listlike_result": [
                    "self"
                ],
                "test_agg_cython_table": [
                    "self",
                    "df",
                    "func",
                    "expected",
                    "axis"
                ],
                "test_agg_cython_table_transform": [
                    "self",
                    "df",
                    "func",
                    "expected",
                    "axis"
                ],
                "test_agg_cython_table_raises": [
                    "self",
                    "df",
                    "func",
                    "expected",
                    "axis"
                ],
                "test_frequency_is_original": [
                    "self",
                    "num_cols"
                ],
                "test_apply_datetime_tz_issue": [
                    "self"
                ],
                "test_consistency_of_aggregates_of_columns_with_missing_values": [
                    "self",
                    "df",
                    "method"
                ],
                "test_apply_dtype": [
                    "self",
                    "col"
                ]
            }
        },
        "pandas.tests.frame.apply": {},
        "pandas.tests.frame.methods.test_clip": {
            "TestDataFrameClip": {
                "test_clip": [
                    "self",
                    "float_frame"
                ],
                "test_inplace_clip": [
                    "self",
                    "float_frame"
                ],
                "test_dataframe_clip": [
                    "self"
                ],
                "test_clip_mixed_numeric": [
                    "self"
                ],
                "test_clip_against_series": [
                    "self",
                    "inplace"
                ],
                "test_clip_against_list_like": [
                    "self",
                    "simple_frame",
                    "inplace",
                    "lower",
                    "axis",
                    "res"
                ],
                "test_clip_against_frame": [
                    "self",
                    "axis"
                ],
                "test_clip_against_unordered_columns": [
                    "self"
                ],
                "test_clip_with_na_args": [
                    "self",
                    "float_frame"
                ]
            }
        },
        "pandas.tests.frame.methods.test_select_dtypes": {
            "TestSelectDtypes": {
                "test_select_dtypes_include_using_list_like": [
                    "self"
                ],
                "test_select_dtypes_exclude_using_list_like": [
                    "self"
                ],
                "test_select_dtypes_exclude_include_using_list_like": [
                    "self"
                ],
                "test_select_dtypes_include_using_scalars": [
                    "self"
                ],
                "test_select_dtypes_exclude_using_scalars": [
                    "self"
                ],
                "test_select_dtypes_include_exclude_using_scalars": [
                    "self"
                ],
                "test_select_dtypes_include_exclude_mixed_scalars_lists": [
                    "self"
                ],
                "test_select_dtypes_duplicate_columns": [
                    "self"
                ],
                "test_select_dtypes_not_an_attr_but_still_valid_dtype": [
                    "self"
                ],
                "test_select_dtypes_empty": [
                    "self"
                ],
                "test_select_dtypes_bad_datetime64": [
                    "self"
                ],
                "test_select_dtypes_datetime_with_tz": [
                    "self"
                ],
                "test_select_dtypes_str_raises": [
                    "self",
                    "dtype",
                    "arg"
                ],
                "test_select_dtypes_bad_arg_raises": [
                    "self"
                ],
                "test_select_dtypes_typecodes": [
                    "self"
                ]
            }
        },
        "pandas.tests.frame.methods.test_asof": {
            "date_range_frame": [],
            "TestFrameAsof": {
                "test_basic": [
                    "self",
                    "date_range_frame"
                ],
                "test_subset": [
                    "self",
                    "date_range_frame"
                ],
                "test_missing": [
                    "self",
                    "date_range_frame"
                ],
                "test_all_nans": [
                    "self",
                    "date_range_frame"
                ],
                "test_time_zone_aware_index": [
                    "self",
                    "stamp",
                    "expected"
                ],
                "test_is_copy": [
                    "self",
                    "date_range_frame"
                ],
                "test_asof_periodindex_mismatched_freq": [
                    "self"
                ]
            }
        },
        "pandas.tests.frame.methods.test_value_counts": {
            "test_data_frame_value_counts_unsorted": [],
            "test_data_frame_value_counts_ascending": [],
            "test_data_frame_value_counts_default": [],
            "test_data_frame_value_counts_normalize": [],
            "test_data_frame_value_counts_single_col_default": [],
            "test_data_frame_value_counts_empty": [],
            "test_data_frame_value_counts_empty_normalize": []
        },
        "pandas.tests.frame.methods.test_pop": {
            "TestDataFramePop": {
                "test_pop": [
                    "self",
                    "float_frame"
                ],
                "test_pop_non_unique_cols": [
                    "self"
                ]
            }
        },
        "pandas.tests.frame.methods.test_rank": {
            "TestRank": {
                "method": [
                    "self",
                    "request"
                ],
                "test_rank": [
                    "self",
                    "float_frame"
                ],
                "test_rank2": [
                    "self"
                ],
                "test_rank_does_not_mutate": [
                    "self"
                ],
                "test_rank_mixed_frame": [
                    "self",
                    "float_string_frame"
                ],
                "test_rank_na_option": [
                    "self",
                    "float_frame"
                ],
                "test_rank_axis": [
                    "self"
                ],
                "test_rank_methods_frame": [
                    "self"
                ],
                "test_rank_descending": [
                    "self",
                    "method",
                    "dtype"
                ],
                "test_rank_2d_tie_methods": [
                    "self",
                    "method",
                    "axis",
                    "dtype"
                ],
                "test_rank_pct_true": [
                    "self",
                    "method",
                    "exp"
                ],
                "test_pct_max_many_rows": [
                    "self"
                ]
            }
        },
        "pandas.tests.frame.methods.test_tz_convert": {
            "TestTZConvert": {
                "test_frame_tz_convert": [
                    "self"
                ],
                "test_tz_convert_and_localize": [
                    "self",
                    "fn"
                ]
            }
        },
        "pandas.tests.frame.methods.test_at_time": {
            "TestAtTime": {
                "test_at_time": [
                    "self"
                ],
                "test_at_time_errors": [
                    "self",
                    "hour"
                ],
                "test_at_time_tz": [
                    "self"
                ],
                "test_at_time_raises": [
                    "self"
                ],
                "test_at_time_axis": [
                    "self",
                    "axis"
                ]
            }
        },
        "pandas.tests.frame.methods.test_between_time": {
            "TestBetweenTime": {
                "test_between_time": [
                    "self",
                    "close_open_fixture"
                ],
                "test_between_time_raises": [
                    "self"
                ],
                "test_between_time_axis": [
                    "self",
                    "axis"
                ],
                "test_between_time_axis_raises": [
                    "self",
                    "axis"
                ]
            }
        },
        "pandas.tests.frame.methods.test_tz_localize": {
            "TestTZLocalize": {
                "test_frame_tz_localize": [
                    "self"
                ]
            }
        },
        "pandas.tests.frame.methods.test_compare": {
            "test_compare_axis": [
                "align_axis"
            ],
            "test_compare_various_formats": [
                "keep_shape",
                "keep_equal"
            ],
            "test_compare_with_equal_nulls": [],
            "test_compare_with_non_equal_nulls": [],
            "test_compare_multi_index": [
                "align_axis"
            ],
            "test_compare_unaligned_objects": []
        },
        "pandas.tests.frame.methods.test_replace": {
            "mix_ab": [],
            "mix_abc": [],
            "TestDataFrameReplace": {
                "test_replace_inplace": [
                    "self",
                    "datetime_frame",
                    "float_string_frame"
                ],
                "test_regex_replace_scalar": [
                    "self",
                    "mix_ab"
                ],
                "test_regex_replace_scalar_inplace": [
                    "self",
                    "mix_ab"
                ],
                "test_regex_replace_list_obj": [
                    "self"
                ],
                "test_regex_replace_list_obj_inplace": [
                    "self"
                ],
                "test_regex_replace_list_mixed": [
                    "self",
                    "mix_ab"
                ],
                "test_regex_replace_list_mixed_inplace": [
                    "self",
                    "mix_ab"
                ],
                "test_regex_replace_dict_mixed": [
                    "self",
                    "mix_abc"
                ],
                "test_regex_replace_dict_nested": [
                    "self",
                    "mix_abc"
                ],
                "test_regex_replace_dict_nested_non_first_character": [
                    "self"
                ],
                "test_regex_replace_dict_nested_gh4115": [
                    "self"
                ],
                "test_regex_replace_list_to_scalar": [
                    "self",
                    "mix_abc"
                ],
                "test_regex_replace_str_to_numeric": [
                    "self",
                    "mix_abc"
                ],
                "test_regex_replace_regex_list_to_numeric": [
                    "self",
                    "mix_abc"
                ],
                "test_regex_replace_series_of_regexes": [
                    "self",
                    "mix_abc"
                ],
                "test_regex_replace_numeric_to_object_conversion": [
                    "self",
                    "mix_abc"
                ],
                "test_replace_regex_metachar": [
                    "self",
                    "metachar"
                ],
                "test_replace": [
                    "self",
                    "datetime_frame"
                ],
                "test_replace_list": [
                    "self"
                ],
                "test_replace_with_empty_list": [
                    "self"
                ],
                "test_replace_series_dict": [
                    "self"
                ],
                "test_replace_convert": [
                    "self"
                ],
                "test_replace_mixed": [
                    "self",
                    "float_string_frame"
                ],
                "test_replace_simple_nested_dict": [
                    "self"
                ],
                "test_replace_simple_nested_dict_with_nonexistent_value": [
                    "self"
                ],
                "test_replace_value_is_none": [
                    "self",
                    "datetime_frame"
                ],
                "test_replace_for_new_dtypes": [
                    "self",
                    "datetime_frame"
                ],
                "test_replace_dtypes": [
                    "self",
                    "frame",
                    "to_replace",
                    "value",
                    "expected"
                ],
                "test_replace_input_formats_listlike": [
                    "self"
                ],
                "test_replace_input_formats_scalar": [
                    "self"
                ],
                "test_replace_limit": [
                    "self"
                ],
                "test_replace_dict_no_regex": [
                    "self"
                ],
                "test_replace_series_no_regex": [
                    "self"
                ],
                "test_replace_dict_tuple_list_ordering_remains_the_same": [
                    "self"
                ],
                "test_replace_doesnt_replace_without_regex": [
                    "self"
                ],
                "test_replace_bool_with_string": [
                    "self"
                ],
                "test_replace_pure_bool_with_string_no_op": [
                    "self"
                ],
                "test_replace_bool_with_bool": [
                    "self"
                ],
                "test_replace_with_dict_with_bool_keys": [
                    "self"
                ],
                "test_replace_truthy": [
                    "self"
                ],
                "test_nested_dict_overlapping_keys_replace_int": [
                    "self"
                ],
                "test_nested_dict_overlapping_keys_replace_str": [
                    "self"
                ],
                "test_replace_swapping_bug": [
                    "self"
                ],
                "test_replace_period": [
                    "self"
                ],
                "test_replace_datetime": [
                    "self"
                ],
                "test_replace_datetimetz": [
                    "self"
                ],
                "test_replace_with_empty_dictlike": [
                    "self",
                    "mix_abc"
                ],
                "test_replace_method": [
                    "self",
                    "to_replace",
                    "method",
                    "expected"
                ],
                "test_categorical_replace_with_dict": [
                    "self",
                    "replace_dict",
                    "final_data"
                ],
                "test_replace_commutative": [
                    "self",
                    "df",
                    "to_replace",
                    "exp"
                ],
                "test_replace_replacer_dtype": [
                    "self",
                    "replacer"
                ],
                "test_replace_after_convert_dtypes": [
                    "self"
                ],
                "test_replace_invalid_to_replace": [
                    "self"
                ],
                "test_replace_no_replacement_dtypes": [
                    "self",
                    "dtype",
                    "value"
                ],
                "test_replace_with_duplicate_columns": [
                    "self",
                    "replacement"
                ],
                "test_replace_period_ignore_float": [
                    "self"
                ],
                "test_replace_value_category_type": [
                    "self"
                ],
                "test_replace_dict_category_type": [
                    "self",
                    "input_category_df",
                    "expected_category_df"
                ],
                "test_replace_with_compiled_regex": [
                    "self"
                ]
            }
        },
        "pandas.tests.frame.methods.test_reindex_like": {
            "TestDataFrameReindexLike": {
                "test_reindex_like": [
                    "self",
                    "float_frame"
                ],
                "test_reindex_like_methods": [
                    "self",
                    "method",
                    "expected_values"
                ],
                "test_reindex_like_subclass": [
                    "self"
                ]
            }
        },
        "pandas.tests.frame.methods.test_reset_index": {
            "test_reset_index_dtypes_on_empty_frame_with_multiindex": [
                "array",
                "dtype"
            ],
            "test_reset_index_empty_frame_with_datetime64_multiindex": [],
            "test_reset_index_empty_frame_with_datetime64_multiindex_from_groupby": [],
            "TestResetIndex": {
                "test_reset_index_tz": [
                    "self",
                    "tz_aware_fixture"
                ],
                "test_reset_index_with_intervals": [
                    "self"
                ],
                "test_reset_index": [
                    "self",
                    "float_frame"
                ],
                "test_reset_index_name": [
                    "self"
                ],
                "test_reset_index_level": [
                    "self"
                ],
                "test_reset_index_right_dtype": [
                    "self"
                ],
                "test_reset_index_multiindex_col": [
                    "self"
                ],
                "test_reset_index_multiindex_nan": [
                    "self"
                ],
                "test_reset_index_with_datetimeindex_cols": [
                    "self"
                ],
                "test_reset_index_range": [
                    "self"
                ]
            }
        },
        "pandas.tests.frame.methods.test_quantile": {
            "TestDataFrameQuantile": {
                "test_quantile_sparse": [
                    "self",
                    "df",
                    "expected"
                ],
                "test_quantile": [
                    "self",
                    "datetime_frame"
                ],
                "test_quantile_date_range": [
                    "self"
                ],
                "test_quantile_axis_mixed": [
                    "self"
                ],
                "test_quantile_axis_parameter": [
                    "self"
                ],
                "test_quantile_interpolation": [
                    "self"
                ],
                "test_quantile_interpolation_datetime": [
                    "self",
                    "datetime_frame"
                ],
                "test_quantile_interpolation_int": [
                    "self",
                    "int_frame"
                ],
                "test_quantile_multi": [
                    "self"
                ],
                "test_quantile_datetime": [
                    "self"
                ],
                "test_quantile_invalid": [
                    "self",
                    "datetime_frame"
                ],
                "test_quantile_box": [
                    "self"
                ],
                "test_quantile_nan": [
                    "self"
                ],
                "test_quantile_nat": [
                    "self"
                ],
                "test_quantile_empty_no_rows": [
                    "self"
                ],
                "test_quantile_empty_no_columns": [
                    "self"
                ]
            }
        },
        "pandas.tests.frame.methods.test_to_period": {
            "TestToPeriod": {
                "test_frame_to_period": [
                    "self"
                ]
            }
        },
        "pandas.tests.frame.methods.test_append": {
            "TestDataFrameAppend": {
                "test_append_empty_list": [
                    "self"
                ],
                "test_append_series_dict": [
                    "self"
                ],
                "test_append_list_of_series_dicts": [
                    "self"
                ],
                "test_append_missing_cols": [
                    "self"
                ],
                "test_append_empty_dataframe": [
                    "self"
                ],
                "test_append_dtypes": [
                    "self"
                ],
                "test_append_timestamps_aware_or_naive": [
                    "self",
                    "tz_naive_fixture",
                    "timestamp"
                ],
                "test_other_dtypes": [
                    "self",
                    "data",
                    "dtype"
                ]
            }
        },
        "pandas.tests.frame.methods.test_transpose": {
            "TestTranspose": {
                "test_transpose_tzaware_1col_single_tz": [
                    "self"
                ],
                "test_transpose_tzaware_2col_single_tz": [
                    "self"
                ],
                "test_transpose_tzaware_2col_mixed_tz": [
                    "self"
                ],
                "test_transpose_object_to_tzaware_mixed_tz": [
                    "self"
                ],
                "test_transpose_uint64": [
                    "self",
                    "uint64_frame"
                ],
                "test_transpose_float": [
                    "self",
                    "float_frame"
                ],
                "test_transpose_get_view": [
                    "self",
                    "float_frame"
                ]
            }
        },
        "pandas.tests.frame.methods.test_interpolate": {
            "TestDataFrameInterpolate": {
                "test_interp_basic": [
                    "self"
                ],
                "test_interp_empty": [
                    "self"
                ],
                "test_interp_bad_method": [
                    "self"
                ],
                "test_interp_combo": [
                    "self"
                ],
                "test_interp_nan_idx": [
                    "self"
                ],
                "test_interp_various": [
                    "self"
                ],
                "test_interp_alt_scipy": [
                    "self"
                ],
                "test_interp_rowwise": [
                    "self"
                ],
                "test_interp_axis_names": [
                    "self",
                    "axis_name",
                    "axis_number"
                ],
                "test_rowwise_alt": [
                    "self"
                ],
                "test_interp_leading_nans": [
                    "self",
                    "check_scipy"
                ],
                "test_interp_raise_on_only_mixed": [
                    "self",
                    "axis"
                ],
                "test_interp_raise_on_all_object_dtype": [
                    "self"
                ],
                "test_interp_inplace": [
                    "self"
                ],
                "test_interp_inplace_row": [
                    "self"
                ],
                "test_interp_ignore_all_good": [
                    "self"
                ],
                "test_interp_time_inplace_axis": [
                    "self",
                    "axis"
                ],
                "test_interp_string_axis": [
                    "self",
                    "axis_name",
                    "axis_number"
                ],
                "test_interp_fillna_methods": [
                    "self",
                    "axis",
                    "method"
                ]
            }
        },
        "pandas.tests.frame.methods.test_pct_change": {
            "test_pct_change_with_duplicated_indices": [
                "fill_method"
            ],
            "TestDataFramePctChange": {
                "test_pct_change_numeric": [
                    "self"
                ],
                "test_pct_change": [
                    "self",
                    "datetime_frame"
                ],
                "test_pct_change_shift_over_nas": [
                    "self"
                ],
                "test_pct_change_periods_freq": [
                    "self",
                    "datetime_frame",
                    "freq",
                    "periods",
                    "fill_method",
                    "limit"
                ]
            }
        },
        "pandas.tests.frame.methods.test_drop": {
            "test_drop_raise_exception_if_labels_not_in_level": [
                "msg",
                "labels",
                "level"
            ],
            "test_drop_errors_ignore": [
                "labels",
                "level"
            ],
            "test_drop_with_non_unique_datetime_index_and_invalid_keys": [],
            "TestDataFrameDrop": {
                "test_drop_names": [
                    "self"
                ],
                "test_drop": [
                    "self"
                ],
                "test_drop_multiindex_not_lexsorted": [
                    "self"
                ],
                "test_drop_api_equivalence": [
                    "self"
                ],
                "test_raise_on_drop_duplicate_index": [
                    "self",
                    "actual"
                ],
                "test_drop_empty_list": [
                    "self",
                    "index",
                    "drop_labels"
                ],
                "test_drop_non_empty_list": [
                    "self",
                    "index",
                    "drop_labels"
                ],
                "test_mixed_depth_drop": [
                    "self"
                ],
                "test_drop_multiindex_other_level_nan": [
                    "self"
                ],
                "test_drop_nonunique": [
                    "self"
                ],
                "test_drop_level": [
                    "self"
                ],
                "test_drop_level_nonunique_datetime": [
                    "self"
                ],
                "test_drop_tz_aware_timestamp_across_dst": [
                    "self",
                    "box"
                ],
                "test_drop_preserve_names": [
                    "self"
                ]
            }
        },
        "pandas.tests.frame.methods.test_assign": {
            "TestAssign": {
                "test_assign": [
                    "self"
                ],
                "test_assign_multiple": [
                    "self"
                ],
                "test_assign_order": [
                    "self"
                ],
                "test_assign_bad": [
                    "self"
                ],
                "test_assign_dependent": [
                    "self"
                ]
            }
        },
        "pandas.tests.frame.methods.test_update": {
            "TestDataFrameUpdate": {
                "test_update_nan": [
                    "self"
                ],
                "test_update": [
                    "self"
                ],
                "test_update_dtypes": [
                    "self"
                ],
                "test_update_nooverwrite": [
                    "self"
                ],
                "test_update_filtered": [
                    "self"
                ],
                "test_update_raise_bad_parameter": [
                    "self",
                    "bad_kwarg",
                    "exception",
                    "msg"
                ],
                "test_update_raise_on_overlap": [
                    "self"
                ],
                "test_update_from_non_df": [
                    "self"
                ],
                "test_update_datetime_tz": [
                    "self"
                ]
            }
        },
        "pandas.tests.frame.methods.test_rename_axis": {
            "TestDataFrameRenameAxis": {
                "test_rename_axis_inplace": [
                    "self",
                    "float_frame"
                ],
                "test_rename_axis_raises": [
                    "self"
                ],
                "test_rename_axis_mapper": [
                    "self"
                ],
                "test_rename_axis_none": [
                    "self",
                    "kwargs",
                    "rename_index",
                    "rename_columns"
                ]
            }
        },
        "pandas.tests.frame.methods.test_combine": {
            "TestCombine": {
                "test_combine_datetlike_udf": [
                    "self",
                    "data"
                ],
                "test_combine_generic": [
                    "self",
                    "float_frame"
                ]
            }
        },
        "pandas.tests.frame.methods.test_set_index": {
            "TestSetIndex": {
                "test_set_index_empty_column": [
                    "self"
                ],
                "test_set_index_multiindexcolumns": [
                    "self"
                ],
                "test_set_index_timezone": [
                    "self"
                ],
                "test_set_index_cast_datetimeindex": [
                    "self"
                ],
                "test_set_index_dst": [
                    "self"
                ],
                "test_set_index": [
                    "self",
                    "float_string_frame"
                ],
                "test_set_index_names": [
                    "self"
                ],
                "test_set_index_cast": [
                    "self"
                ],
                "test_set_index_drop_inplace": [
                    "self",
                    "frame_of_index_cols",
                    "drop",
                    "inplace",
                    "keys"
                ],
                "test_set_index_append": [
                    "self",
                    "frame_of_index_cols",
                    "drop",
                    "keys"
                ],
                "test_set_index_append_to_multiindex": [
                    "self",
                    "frame_of_index_cols",
                    "drop",
                    "keys"
                ],
                "test_set_index_after_mutation": [
                    "self"
                ],
                "test_set_index_pass_single_array": [
                    "self",
                    "frame_of_index_cols",
                    "drop",
                    "append",
                    "index_name",
                    "box"
                ],
                "test_set_index_pass_arrays": [
                    "self",
                    "frame_of_index_cols",
                    "drop",
                    "append",
                    "index_name",
                    "box"
                ],
                "test_set_index_pass_arrays_duplicate": [
                    "self",
                    "frame_of_index_cols",
                    "drop",
                    "append",
                    "index_name",
                    "box1",
                    "box2"
                ],
                "test_set_index_pass_multiindex": [
                    "self",
                    "frame_of_index_cols",
                    "drop",
                    "append"
                ],
                "test_construction_with_categorical_index": [
                    "self"
                ]
            },
            "TestSetIndexInvalid": {
                "test_set_index_verify_integrity": [
                    "self",
                    "frame_of_index_cols"
                ],
                "test_set_index_raise_keys": [
                    "self",
                    "frame_of_index_cols",
                    "drop",
                    "append"
                ],
                "test_set_index_raise_on_type": [
                    "self",
                    "frame_of_index_cols",
                    "box",
                    "drop",
                    "append"
                ],
                "test_set_index_raise_on_len": [
                    "self",
                    "frame_of_index_cols",
                    "box",
                    "length",
                    "drop",
                    "append"
                ]
            },
            "TestSetIndexCustomLabelType": {
                "test_set_index_custom_label_type": [
                    "self"
                ],
                "test_set_index_custom_label_hashable_iterable": [
                    "self"
                ],
                "test_set_index_custom_label_type_raises": [
                    "self"
                ]
            }
        },
        "pandas.tests.frame.methods.test_to_timestamp": {
            "TestToTimestamp": {
                "test_frame_to_time_stamp": [
                    "self"
                ]
            }
        },
        "pandas.tests.frame.methods.test_nlargest": {
            "df_duplicates": [],
            "df_strings": [],
            "df_main_dtypes": [],
            "TestNLargestNSmallest": {
                "test_nlargest_n": [
                    "self",
                    "df_strings",
                    "nselect_method",
                    "n",
                    "order"
                ],
                "test_nlargest_error": [
                    "self",
                    "df_main_dtypes",
                    "nselect_method",
                    "columns"
                ],
                "test_nlargest_all_dtypes": [
                    "self",
                    "df_main_dtypes"
                ],
                "test_nlargest_duplicates_on_starter_columns": [
                    "self"
                ],
                "test_nlargest_n_identical_values": [
                    "self"
                ],
                "test_nlargest_n_duplicate_index": [
                    "self",
                    "df_duplicates",
                    "n",
                    "order"
                ],
                "test_nlargest_duplicate_keep_all_ties": [
                    "self"
                ],
                "test_nlargest_multiindex_column_lookup": [
                    "self"
                ]
            }
        },
        "pandas.tests.frame.methods.test_sort_values": {
            "TestDataFrameSortValues": {
                "test_sort_values": [
                    "self"
                ],
                "test_sort_values_inplace": [
                    "self"
                ],
                "test_sort_values_multicolumn": [
                    "self"
                ],
                "test_sort_values_multicolumn_uint64": [
                    "self"
                ],
                "test_sort_values_nan": [
                    "self"
                ],
                "test_sort_values_stable_descending_sort": [
                    "self"
                ],
                "test_sort_values_stable_descending_multicolumn_sort": [
                    "self"
                ],
                "test_sort_values_stable_categorial": [
                    "self"
                ],
                "test_sort_values_datetimes": [
                    "self"
                ],
                "test_sort_values_frame_column_inplace_sort_exception": [
                    "self",
                    "float_frame"
                ],
                "test_sort_values_nat_values_in_int_column": [
                    "self"
                ],
                "test_sort_nat": [
                    "self"
                ],
                "test_sort_values_na_position_with_categories": [
                    "self"
                ],
                "test_sort_values_nat": [
                    "self"
                ],
                "test_sort_values_na_position_with_categories_raises": [
                    "self"
                ],
                "test_sort_values_ignore_index": [
                    "self",
                    "inplace",
                    "original_dict",
                    "sorted_dict",
                    "ignore_index",
                    "output_index"
                ],
                "test_sort_values_nat_na_position_default": [
                    "self"
                ]
            },
            "TestDataFrameSortKey": {
                "test_sort_values_inplace_key": [
                    "self",
                    "sort_by_key"
                ],
                "test_sort_values_key": [
                    "self"
                ],
                "test_sort_values_by_key": [
                    "self"
                ],
                "test_sort_values_by_key_by_name": [
                    "self"
                ],
                "test_sort_values_key_string": [
                    "self"
                ],
                "test_sort_values_key_empty": [
                    "self",
                    "sort_by_key"
                ],
                "test_changes_length_raises": [
                    "self"
                ],
                "test_sort_values_key_axes": [
                    "self"
                ],
                "test_sort_values_key_dict_axis": [
                    "self"
                ]
            }
        },
        "pandas.tests.frame.methods.test_astype": {
            "_check_cast": [
                "df",
                "v"
            ],
            "TestAstype": {
                "test_astype_float": [
                    "self",
                    "float_frame"
                ],
                "test_astype_mixed_float": [
                    "self",
                    "mixed_float_frame"
                ],
                "test_astype_mixed_type": [
                    "self",
                    "mixed_type_frame"
                ],
                "test_astype_with_exclude_string": [
                    "self",
                    "float_frame"
                ],
                "test_astype_with_view_float": [
                    "self",
                    "float_frame"
                ],
                "test_astype_with_view_mixed_float": [
                    "self",
                    "mixed_float_frame"
                ],
                "test_astype_cast_nan_inf_int": [
                    "self",
                    "val",
                    "dtype"
                ],
                "test_astype_str": [
                    "self"
                ],
                "test_astype_str_float": [
                    "self"
                ],
                "test_astype_dict_like": [
                    "self",
                    "dtype_class"
                ],
                "test_astype_duplicate_col": [
                    "self"
                ],
                "test_astype_categorical": [
                    "self",
                    "dtype"
                ],
                "test_astype_categoricaldtype_class_raises": [
                    "self",
                    "cls"
                ],
                "test_astype_extension_dtypes": [
                    "self",
                    "dtype"
                ],
                "test_astype_extension_dtypes_1d": [
                    "self",
                    "dtype"
                ],
                "test_astype_extension_dtypes_duplicate_col": [
                    "self",
                    "dtype"
                ],
                "test_astype_column_metadata": [
                    "self",
                    "dtype"
                ],
                "test_astype_from_datetimelike_to_object": [
                    "self",
                    "dtype",
                    "unit"
                ],
                "test_astype_to_datetimelike_unit": [
                    "self",
                    "arr_dtype",
                    "dtype",
                    "unit"
                ],
                "test_astype_to_datetime_unit": [
                    "self",
                    "unit"
                ],
                "test_astype_to_timedelta_unit_ns": [
                    "self",
                    "unit"
                ],
                "test_astype_to_timedelta_unit": [
                    "self",
                    "unit"
                ],
                "test_astype_to_incorrect_datetimelike": [
                    "self",
                    "unit"
                ],
                "test_astype_arg_for_errors": [
                    "self"
                ],
                "test_astype_arg_for_errors_dictlist": [
                    "self"
                ],
                "test_astype_dt64tz": [
                    "self",
                    "timezone_frame"
                ],
                "test_astype_dt64tz_to_str": [
                    "self",
                    "timezone_frame"
                ],
                "test_astype_empty_dtype_dict": [
                    "self"
                ]
            }
        },
        "pandas.tests.frame.methods.test_filter": {
            "TestDataFrameFilter": {
                "test_filter": [
                    "self",
                    "float_frame",
                    "float_string_frame"
                ],
                "test_filter_regex_search": [
                    "self",
                    "float_frame"
                ],
                "test_filter_unicode": [
                    "self",
                    "name",
                    "expected"
                ],
                "test_filter_bytestring": [
                    "self",
                    "name"
                ],
                "test_filter_corner": [
                    "self"
                ],
                "test_filter_regex_non_string": [
                    "self"
                ]
            }
        },
        "pandas.tests.frame.methods.test_sort_index": {
            "TestDataFrameSortIndex": {
                "test_sort_index_and_reconstruction_doc_example": [
                    "self"
                ],
                "test_sort_index_non_existent_label_multiindex": [
                    "self"
                ],
                "test_sort_index_reorder_on_ops": [
                    "self"
                ],
                "test_sort_index_nan_multiindex": [
                    "self"
                ],
                "test_sort_index_nan": [
                    "self"
                ],
                "test_sort_index_multi_index": [
                    "self"
                ],
                "test_sort_index_inplace": [
                    "self"
                ],
                "test_sort_index_different_sortorder": [
                    "self"
                ],
                "test_sort_index_level": [
                    "self"
                ],
                "test_sort_index_categorical_index": [
                    "self"
                ],
                "test_sort_index": [
                    "self"
                ],
                "test_sort_index_multiindex": [
                    "self",
                    "level"
                ],
                "test_sort_index_intervalindex": [
                    "self"
                ],
                "test_sort_index_ignore_index": [
                    "self",
                    "inplace",
                    "original_dict",
                    "sorted_dict",
                    "ascending",
                    "ignore_index",
                    "output_index"
                ],
                "test_sort_index_ignore_index_multi_index": [
                    "self",
                    "inplace",
                    "original_dict",
                    "sorted_dict",
                    "ascending",
                    "ignore_index",
                    "output_index"
                ],
                "test_sort_index_categorical_multiindex": [
                    "self"
                ],
                "test_sort_index_and_reconstruction": [
                    "self"
                ],
                "test_sort_index_level2": [
                    "self"
                ],
                "test_sort_index_level_large_cardinality": [
                    "self"
                ],
                "test_sort_index_level_by_name": [
                    "self"
                ],
                "test_sort_index_level_mixed": [
                    "self"
                ]
            },
            "TestDataFrameSortIndexKey": {
                "test_sort_multi_index_key": [
                    "self"
                ],
                "test_sort_index_key": [
                    "self"
                ],
                "test_sort_index_key_int": [
                    "self"
                ],
                "test_sort_multi_index_key_str": [
                    "self"
                ],
                "test_changes_length_raises": [
                    "self"
                ]
            }
        },
        "pandas.tests.frame.methods.test_round": {
            "TestDataFrameRound": {
                "test_round": [
                    "self"
                ],
                "test_round_numpy": [
                    "self"
                ],
                "test_round_numpy_with_nan": [
                    "self"
                ],
                "test_round_mixed_type": [
                    "self"
                ],
                "test_round_with_duplicate_columns": [
                    "self"
                ],
                "test_round_builtin": [
                    "self"
                ],
                "test_round_nonunique_categorical": [
                    "self"
                ],
                "test_round_interval_category_columns": [
                    "self"
                ]
            }
        },
        "pandas.tests.frame.methods.test_truncate": {
            "TestDataFrameTruncate": {
                "test_truncate": [
                    "self",
                    "datetime_frame"
                ],
                "test_truncate_copy": [
                    "self",
                    "datetime_frame"
                ],
                "test_truncate_nonsortedindex": [
                    "self"
                ],
                "test_truncate_decreasing_index": [
                    "self",
                    "before",
                    "after",
                    "indices",
                    "klass"
                ],
                "test_truncate_multiindex": [
                    "self"
                ]
            }
        },
        "pandas.tests.frame.methods.test_shift": {
            "TestDataFrameShift": {
                "test_shift": [
                    "self",
                    "datetime_frame",
                    "int_frame"
                ],
                "test_shift_bool": [
                    "self"
                ],
                "test_shift_categorical": [
                    "self"
                ],
                "test_shift_fill_value": [
                    "self"
                ],
                "test_shift_empty": [
                    "self"
                ],
                "test_shift_duplicate_columns": [
                    "self"
                ],
                "test_shift_axis1_multiple_blocks": [
                    "self"
                ],
                "test_tshift": [
                    "self",
                    "datetime_frame"
                ],
                "test_tshift_deprecated": [
                    "self",
                    "datetime_frame"
                ],
                "test_period_index_frame_shift_with_freq": [
                    "self"
                ],
                "test_datetime_frame_shift_with_freq": [
                    "self",
                    "datetime_frame"
                ],
                "test_period_index_frame_shift_with_freq_error": [
                    "self"
                ],
                "test_datetime_frame_shift_with_freq_error": [
                    "self",
                    "datetime_frame"
                ],
                "test_shift_dt64values_int_fill_deprecated": [
                    "self"
                ]
            }
        },
        "pandas.tests.frame.methods.test_align": {
            "TestDataFrameAlign": {
                "test_align_float": [
                    "self",
                    "float_frame"
                ],
                "test_align_int": [
                    "self",
                    "int_frame"
                ],
                "test_align_mixed_type": [
                    "self",
                    "float_string_frame"
                ],
                "test_align_mixed_float": [
                    "self",
                    "mixed_float_frame"
                ],
                "test_align_mixed_int": [
                    "self",
                    "mixed_int_frame"
                ],
                "test_align_categorical": [
                    "self",
                    "l_ordered",
                    "r_ordered",
                    "expected"
                ],
                "test_align_multiindex": [
                    "self"
                ],
                "test_align_series_combinations": [
                    "self"
                ],
                "_check_align": [
                    "self",
                    "a",
                    "b",
                    "axis",
                    "fill_axis",
                    "how",
                    "method",
                    "limit"
                ],
                "test_align_fill_method": [
                    "self",
                    "how",
                    "meth",
                    "ax",
                    "fax",
                    "float_frame"
                ],
                "_check_align_fill": [
                    "self",
                    "frame",
                    "kind",
                    "meth",
                    "ax",
                    "fax"
                ]
            }
        },
        "pandas.tests.frame.methods.test_combine_first": {
            "TestDataFrameCombineFirst": {
                "test_combine_first_mixed": [
                    "self"
                ],
                "test_combine_first": [
                    "self",
                    "float_frame"
                ],
                "test_combine_first_mixed_bug": [
                    "self"
                ],
                "test_combine_first_align_nan": [
                    "self"
                ],
                "test_combine_first_timezone": [
                    "self"
                ],
                "test_combine_first_timedelta": [
                    "self"
                ],
                "test_combine_first_period": [
                    "self"
                ],
                "test_combine_first_int": [
                    "self"
                ],
                "test_combine_first_with_asymmetric_other": [
                    "self",
                    "val"
                ]
            }
        },
        "pandas.tests.frame.methods.test_to_records": {
            "TestDataFrameToRecords": {
                "test_to_records_dt64": [
                    "self"
                ],
                "test_to_records_dt64tz_column": [
                    "self"
                ],
                "test_to_records_with_multindex": [
                    "self"
                ],
                "test_to_records_with_Mapping_type": [
                    "self"
                ],
                "test_to_records_floats": [
                    "self"
                ],
                "test_to_records_index_name": [
                    "self"
                ],
                "test_to_records_with_unicode_index": [
                    "self"
                ],
                "test_to_records_with_unicode_column_names": [
                    "self"
                ],
                "test_to_records_with_categorical": [
                    "self"
                ],
                "test_to_records_dtype": [
                    "self",
                    "kwargs",
                    "expected"
                ],
                "test_to_records_dtype_mi": [
                    "self",
                    "df",
                    "kwargs",
                    "expected"
                ],
                "test_to_records_dict_like": [
                    "self"
                ],
                "test_to_records_datetimeindex_with_tz": [
                    "self",
                    "tz"
                ]
            }
        },
        "pandas.tests.frame.methods.test_to_dict": {
            "TestDataFrameToDict": {
                "test_to_dict_timestamp": [
                    "self"
                ],
                "test_to_dict_index_not_unique_with_index_orient": [
                    "self"
                ],
                "test_to_dict_invalid_orient": [
                    "self"
                ],
                "test_to_dict_short_orient_warns": [
                    "self",
                    "orient"
                ],
                "test_to_dict": [
                    "self",
                    "mapping"
                ],
                "test_to_dict_errors": [
                    "self",
                    "mapping"
                ],
                "test_to_dict_not_unique_warning": [
                    "self"
                ],
                "test_to_dict_box_scalars": [
                    "self",
                    "orient",
                    "item_getter"
                ],
                "test_to_dict_tz": [
                    "self"
                ],
                "test_to_dict_index_dtypes": [
                    "self",
                    "into",
                    "expected"
                ],
                "test_to_dict_numeric_names": [
                    "self"
                ],
                "test_to_dict_wide": [
                    "self"
                ],
                "test_to_dict_orient_dtype": [
                    "self"
                ]
            }
        },
        "pandas.tests.frame.methods.test_describe": {
            "TestDataFrameDescribe": {
                "test_describe_bool_in_mixed_frame": [
                    "self"
                ],
                "test_describe_empty_object": [
                    "self"
                ],
                "test_describe_bool_frame": [
                    "self"
                ],
                "test_describe_categorical": [
                    "self"
                ],
                "test_describe_empty_categorical_column": [
                    "self"
                ],
                "test_describe_categorical_columns": [
                    "self"
                ],
                "test_describe_datetime_columns": [
                    "self"
                ],
                "test_describe_timedelta_values": [
                    "self"
                ],
                "test_describe_tz_values": [
                    "self",
                    "tz_naive_fixture"
                ],
                "test_datetime_is_numeric_includes_datetime": [
                    "self"
                ],
                "test_describe_tz_values2": [
                    "self"
                ],
                "test_describe_percentiles_integer_idx": [
                    "self"
                ]
            }
        },
        "pandas.tests.frame.methods.test_head_tail": {
            "test_head_tail": [
                "float_frame"
            ]
        },
        "pandas.tests.frame.methods.test_droplevel": {
            "TestDropLevel": {
                "test_droplevel": [
                    "self"
                ]
            }
        },
        "pandas.tests.frame.methods.test_duplicated": {
            "test_duplicated_with_misspelled_column_name": [
                "subset"
            ],
            "test_duplicated_do_not_fail_on_wide_dataframes": [],
            "test_duplicated_keep": [
                "keep",
                "expected"
            ],
            "test_duplicated_nan_none": [
                "keep",
                "expected"
            ],
            "test_duplicated_subset": [
                "subset",
                "keep"
            ],
            "test_duplicated_on_empty_frame": [],
            "test_frame_datetime64_duplicated": []
        },
        "pandas.tests.frame.methods.test_diff": {
            "TestDataFrameDiff": {
                "test_diff": [
                    "self",
                    "datetime_frame"
                ],
                "test_diff_datetime_axis0": [
                    "self",
                    "tz"
                ],
                "test_diff_datetime_axis1": [
                    "self",
                    "tz"
                ],
                "test_diff_timedelta": [
                    "self"
                ],
                "test_diff_mixed_dtype": [
                    "self"
                ],
                "test_diff_neg_n": [
                    "self",
                    "datetime_frame"
                ],
                "test_diff_float_n": [
                    "self",
                    "datetime_frame"
                ],
                "test_diff_axis": [
                    "self"
                ],
                "test_diff_period": [
                    "self"
                ],
                "test_diff_axis1_mixed_dtypes": [
                    "self"
                ],
                "test_diff_axis1_mixed_dtypes_large_periods": [
                    "self"
                ],
                "test_diff_axis1_mixed_dtypes_negative_periods": [
                    "self"
                ],
                "test_diff_sparse": [
                    "self"
                ],
                "test_diff_integer_na": [
                    "self",
                    "axis",
                    "expected"
                ],
                "test_diff_readonly": [
                    "self"
                ]
            }
        },
        "pandas.tests.frame.methods.test_drop_duplicates": {
            "test_drop_duplicates_with_misspelled_column_name": [
                "subset"
            ],
            "test_drop_duplicates": [],
            "test_drop_duplicates_with_duplicate_column_names": [],
            "test_drop_duplicates_for_take_all": [],
            "test_drop_duplicates_tuple": [],
            "test_drop_duplicates_empty": [
                "df"
            ],
            "test_drop_duplicates_NA": [],
            "test_drop_duplicates_NA_for_take_all": [],
            "test_drop_duplicates_inplace": [],
            "test_drop_duplicates_ignore_index": [
                "inplace",
                "origin_dict",
                "output_dict",
                "ignore_index",
                "output_index"
            ],
            "test_drop_duplicates_null_in_object_column": [
                "nulls_fixture"
            ]
        },
        "pandas.tests.frame.methods.test_asfreq": {
            "TestAsFreq": {
                "test_asfreq": [
                    "self",
                    "datetime_frame"
                ],
                "test_asfreq_datetimeindex": [
                    "self"
                ],
                "test_asfreq_fillvalue": [
                    "self"
                ]
            }
        },
        "pandas.tests.frame.methods.test_cov_corr": {
            "TestDataFrameCov": {
                "test_cov": [
                    "self",
                    "float_frame",
                    "float_string_frame"
                ],
                "test_cov_ddof": [
                    "self",
                    "test_ddof"
                ],
                "test_cov_nullable_integer": [
                    "self",
                    "other_column"
                ]
            },
            "TestDataFrameCorr": {
                "test_corr_scipy_method": [
                    "self",
                    "float_frame",
                    "method"
                ],
                "test_corr_non_numeric": [
                    "self",
                    "float_frame",
                    "float_string_frame"
                ],
                "test_corr_nooverlap": [
                    "self",
                    "meth"
                ],
                "test_corr_constant": [
                    "self",
                    "meth"
                ],
                "test_corr_int_and_boolean": [
                    "self"
                ],
                "test_corr_cov_independent_index_column": [
                    "self"
                ],
                "test_corr_invalid_method": [
                    "self"
                ],
                "test_corr_int": [
                    "self"
                ],
                "test_corr_nullable_integer": [
                    "self",
                    "nullable_column",
                    "other_column",
                    "method"
                ]
            },
            "TestDataFrameCorrWith": {
                "test_corrwith": [
                    "self",
                    "datetime_frame"
                ],
                "test_corrwith_with_objects": [
                    "self"
                ],
                "test_corrwith_series": [
                    "self",
                    "datetime_frame"
                ],
                "test_corrwith_matches_corrcoef": [
                    "self"
                ],
                "test_corrwith_mixed_dtypes": [
                    "self"
                ],
                "test_corrwith_index_intersection": [
                    "self"
                ],
                "test_corrwith_index_union": [
                    "self"
                ],
                "test_corrwith_dup_cols": [
                    "self"
                ],
                "test_corrwith_spearman": [
                    "self"
                ],
                "test_corrwith_kendall": [
                    "self"
                ]
            }
        },
        "pandas.tests.frame.methods.test_isin": {
            "TestDataFrameIsIn": {
                "test_isin": [
                    "self"
                ],
                "test_isin_empty": [
                    "self",
                    "empty"
                ],
                "test_isin_dict": [
                    "self"
                ],
                "test_isin_with_string_scalar": [
                    "self"
                ],
                "test_isin_df": [
                    "self"
                ],
                "test_isin_tuples": [
                    "self"
                ],
                "test_isin_df_dupe_values": [
                    "self"
                ],
                "test_isin_dupe_self": [
                    "self"
                ],
                "test_isin_against_series": [
                    "self"
                ],
                "test_isin_multiIndex": [
                    "self"
                ],
                "test_isin_empty_datetimelike": [
                    "self"
                ],
                "test_isin_category_frame": [
                    "self",
                    "values"
                ]
            }
        },
        "pandas.tests.frame.methods.test_count": {
            "TestDataFrameCount": {
                "test_count": [
                    "self"
                ],
                "test_count_objects": [
                    "self",
                    "float_string_frame"
                ]
            }
        },
        "pandas.tests.frame.methods": {},
        "pandas.tests.frame.methods.test_explode": {
            "test_error": [],
            "test_basic": [],
            "test_multi_index_rows": [],
            "test_multi_index_columns": [],
            "test_usecase": [],
            "test_duplicate_index": [
                "input_dict",
                "input_index",
                "expected_dict",
                "expected_index"
            ],
            "test_ignore_index": []
        },
        "pandas.tests.frame.methods.test_first_and_last": {
            "TestFirst": {
                "test_first_subset": [
                    "self"
                ],
                "test_first_raises": [
                    "self"
                ],
                "test_last_subset": [
                    "self"
                ],
                "test_last_raises": [
                    "self"
                ]
            }
        },
        "pandas.tests.frame.methods.test_rename": {
            "TestRename": {
                "test_rename": [
                    "self",
                    "float_frame"
                ],
                "test_rename_chainmap": [
                    "self",
                    "args",
                    "kwargs"
                ],
                "test_rename_multiindex": [
                    "self"
                ],
                "test_rename_nocopy": [
                    "self",
                    "float_frame"
                ],
                "test_rename_inplace": [
                    "self",
                    "float_frame"
                ],
                "test_rename_bug": [
                    "self"
                ],
                "test_rename_bug2": [
                    "self"
                ],
                "test_rename_errors_raises": [
                    "self"
                ],
                "test_rename_errors": [
                    "self",
                    "mapper",
                    "errors",
                    "expected_columns"
                ],
                "test_rename_objects": [
                    "self",
                    "float_string_frame"
                ],
                "test_rename_axis_style": [
                    "self"
                ],
                "test_rename_mapper_multi": [
                    "self"
                ],
                "test_rename_positional_named": [
                    "self"
                ],
                "test_rename_axis_style_raises": [
                    "self"
                ],
                "test_rename_positional_raises": [
                    "self"
                ],
                "test_rename_no_mappings_raises": [
                    "self"
                ],
                "test_rename_mapper_and_positional_arguments_raises": [
                    "self"
                ]
            }
        },
        "pandas.tests.reshape.test_union_categoricals": {
            "TestUnionCategoricals": {
                "test_union_categorical": [
                    "self"
                ],
                "test_union_categoricals_nan": [
                    "self"
                ],
                "test_union_categoricals_empty": [
                    "self"
                ],
                "test_union_categorical_same_category": [
                    "self"
                ],
                "test_union_categorical_same_categories_different_order": [
                    "self"
                ],
                "test_union_categoricals_ordered": [
                    "self"
                ],
                "test_union_categoricals_ignore_order": [
                    "self"
                ],
                "test_union_categoricals_sort": [
                    "self"
                ],
                "test_union_categoricals_sort_false": [
                    "self"
                ],
                "test_union_categorical_unwrap": [
                    "self"
                ]
            }
        },
        "pandas.tests.reshape.test_util": {
            "TestCartesianProduct": {
                "test_simple": [
                    "self"
                ],
                "test_datetimeindex": [
                    "self"
                ],
                "test_tzaware_retained": [
                    "self"
                ],
                "test_tzaware_retained_categorical": [
                    "self"
                ],
                "test_empty": [
                    "self"
                ],
                "test_invalid_input": [
                    "self",
                    "X"
                ]
            }
        },
        "pandas.tests.reshape.test_pivot": {
            "dropna": [
                "request"
            ],
            "interval_values": [
                "request",
                "closed"
            ],
            "TestPivotTable": {
                "setup_method": [
                    "self",
                    "method"
                ],
                "test_pivot_table": [
                    "self",
                    "observed"
                ],
                "test_pivot_table_categorical_observed_equal": [
                    "self",
                    "observed"
                ],
                "test_pivot_table_nocols": [
                    "self"
                ],
                "test_pivot_table_dropna": [
                    "self"
                ],
                "test_pivot_table_categorical": [
                    "self"
                ],
                "test_pivot_table_dropna_categoricals": [
                    "self",
                    "dropna"
                ],
                "test_pivot_with_non_observable_dropna": [
                    "self",
                    "dropna"
                ],
                "test_pivot_with_interval_index": [
                    "self",
                    "interval_values",
                    "dropna"
                ],
                "test_pivot_with_interval_index_margins": [
                    "self"
                ],
                "test_pass_array": [
                    "self"
                ],
                "test_pass_function": [
                    "self"
                ],
                "test_pivot_table_multiple": [
                    "self"
                ],
                "test_pivot_dtypes": [
                    "self"
                ],
                "test_pivot_preserve_dtypes": [
                    "self",
                    "columns",
                    "values"
                ],
                "test_pivot_no_values": [
                    "self"
                ],
                "test_pivot_multi_values": [
                    "self"
                ],
                "test_pivot_multi_functions": [
                    "self"
                ],
                "test_pivot_index_with_nan": [
                    "self",
                    "method"
                ],
                "test_pivot_with_tz": [
                    "self",
                    "method"
                ],
                "test_pivot_tz_in_values": [
                    "self"
                ],
                "test_pivot_periods": [
                    "self",
                    "method"
                ],
                "test_pivot_periods_with_margins": [
                    "self"
                ],
                "test_pivot_with_list_like_values": [
                    "self",
                    "values",
                    "method"
                ],
                "test_pivot_with_list_like_values_nans": [
                    "self",
                    "values",
                    "method"
                ],
                "test_pivot_columns_none_raise_error": [
                    "self"
                ],
                "test_pivot_with_multiindex": [
                    "self",
                    "method"
                ],
                "test_pivot_with_tuple_of_values": [
                    "self",
                    "method"
                ],
                "test_margins": [
                    "self"
                ],
                "test_margin_with_only_columns_defined": [
                    "self",
                    "columns",
                    "aggfunc",
                    "values",
                    "expected_columns"
                ],
                "test_margins_dtype": [
                    "self"
                ],
                "test_margins_dtype_len": [
                    "self"
                ],
                "test_pivot_table_multiindex_only": [
                    "self",
                    "cols"
                ],
                "test_pivot_table_retains_tz": [
                    "self"
                ],
                "test_pivot_integer_columns": [
                    "self"
                ],
                "test_pivot_no_level_overlap": [
                    "self"
                ],
                "test_pivot_columns_lexsorted": [
                    "self"
                ],
                "test_pivot_complex_aggfunc": [
                    "self"
                ],
                "test_margins_no_values_no_cols": [
                    "self"
                ],
                "test_margins_no_values_two_rows": [
                    "self"
                ],
                "test_margins_no_values_one_row_one_col": [
                    "self"
                ],
                "test_margins_no_values_two_row_two_cols": [
                    "self"
                ],
                "test_pivot_table_with_margins_set_margin_name": [
                    "self",
                    "margin_name"
                ],
                "test_pivot_timegrouper": [
                    "self"
                ],
                "test_pivot_datetime_tz": [
                    "self"
                ],
                "test_pivot_dtaccessor": [
                    "self"
                ],
                "test_daily": [
                    "self"
                ],
                "test_monthly": [
                    "self"
                ],
                "test_pivot_table_with_iterator_values": [
                    "self"
                ],
                "test_pivot_table_margins_name_with_aggfunc_list": [
                    "self"
                ],
                "test_categorical_margins": [
                    "self",
                    "observed"
                ],
                "test_categorical_margins_category": [
                    "self",
                    "observed"
                ],
                "test_margins_casted_to_float": [
                    "self",
                    "observed"
                ],
                "test_pivot_with_categorical": [
                    "self",
                    "observed",
                    "ordered"
                ],
                "test_categorical_aggfunc": [
                    "self",
                    "observed"
                ],
                "test_categorical_pivot_index_ordering": [
                    "self",
                    "observed"
                ],
                "test_pivot_table_not_series": [
                    "self"
                ],
                "test_pivot_margins_name_unicode": [
                    "self"
                ],
                "test_pivot_string_as_func": [
                    "self"
                ],
                "test_pivot_string_func_vs_func": [
                    "self",
                    "f",
                    "f_numpy"
                ],
                "test_pivot_number_of_levels_larger_than_int32": [
                    "self"
                ],
                "test_pivot_table_aggfunc_dropna": [
                    "self",
                    "dropna"
                ],
                "test_pivot_table_aggfunc_scalar_dropna": [
                    "self",
                    "dropna"
                ],
                "test_pivot_table_empty_aggfunc": [
                    "self"
                ],
                "test_pivot_table_no_column_raises": [
                    "self"
                ]
            }
        },
        "pandas.tests.reshape.test_get_dummies": {
            "TestGetDummies": {
                "df": [
                    "self"
                ],
                "dtype": [
                    "self",
                    "request"
                ],
                "sparse": [
                    "self",
                    "request"
                ],
                "effective_dtype": [
                    "self",
                    "dtype"
                ],
                "test_get_dummies_raises_on_dtype_object": [
                    "self",
                    "df"
                ],
                "test_get_dummies_basic": [
                    "self",
                    "sparse",
                    "dtype"
                ],
                "test_get_dummies_basic_types": [
                    "self",
                    "sparse",
                    "dtype"
                ],
                "test_get_dummies_just_na": [
                    "self",
                    "sparse"
                ],
                "test_get_dummies_include_na": [
                    "self",
                    "sparse",
                    "dtype"
                ],
                "test_get_dummies_unicode": [
                    "self",
                    "sparse"
                ],
                "test_dataframe_dummies_all_obj": [
                    "self",
                    "df",
                    "sparse"
                ],
                "test_dataframe_dummies_mix_default": [
                    "self",
                    "df",
                    "sparse",
                    "dtype"
                ],
                "test_dataframe_dummies_prefix_list": [
                    "self",
                    "df",
                    "sparse"
                ],
                "test_dataframe_dummies_prefix_str": [
                    "self",
                    "df",
                    "sparse"
                ],
                "test_dataframe_dummies_subset": [
                    "self",
                    "df",
                    "sparse"
                ],
                "test_dataframe_dummies_prefix_sep": [
                    "self",
                    "df",
                    "sparse"
                ],
                "test_dataframe_dummies_prefix_bad_length": [
                    "self",
                    "df",
                    "sparse"
                ],
                "test_dataframe_dummies_prefix_sep_bad_length": [
                    "self",
                    "df",
                    "sparse"
                ],
                "test_dataframe_dummies_prefix_dict": [
                    "self",
                    "sparse"
                ],
                "test_dataframe_dummies_with_na": [
                    "self",
                    "df",
                    "sparse",
                    "dtype"
                ],
                "test_dataframe_dummies_with_categorical": [
                    "self",
                    "df",
                    "sparse",
                    "dtype"
                ],
                "test_dataframe_dummies_unicode": [
                    "self",
                    "get_dummies_kwargs",
                    "expected"
                ],
                "test_get_dummies_basic_drop_first": [
                    "self",
                    "sparse"
                ],
                "test_get_dummies_basic_drop_first_one_level": [
                    "self",
                    "sparse"
                ],
                "test_get_dummies_basic_drop_first_NA": [
                    "self",
                    "sparse"
                ],
                "test_dataframe_dummies_drop_first": [
                    "self",
                    "df",
                    "sparse"
                ],
                "test_dataframe_dummies_drop_first_with_categorical": [
                    "self",
                    "df",
                    "sparse",
                    "dtype"
                ],
                "test_dataframe_dummies_drop_first_with_na": [
                    "self",
                    "df",
                    "sparse"
                ],
                "test_get_dummies_int_int": [
                    "self"
                ],
                "test_get_dummies_int_df": [
                    "self",
                    "dtype"
                ],
                "test_dataframe_dummies_preserve_categorical_dtype": [
                    "self",
                    "dtype",
                    "ordered"
                ],
                "test_get_dummies_dont_sparsify_all_columns": [
                    "self",
                    "sparse"
                ],
                "test_get_dummies_duplicate_columns": [
                    "self",
                    "df"
                ],
                "test_get_dummies_all_sparse": [
                    "self"
                ],
                "test_get_dummies_with_string_values": [
                    "self",
                    "values"
                ]
            }
        },
        "pandas.tests.reshape.test_pivot_multilevel": {
            "test_pivot_list_like_index": [
                "input_index",
                "input_columns",
                "input_values",
                "expected_values",
                "expected_columns",
                "expected_index"
            ],
            "test_pivot_list_like_columns": [
                "input_index",
                "input_columns",
                "input_values",
                "expected_values",
                "expected_columns",
                "expected_index"
            ]
        },
        "pandas.tests.reshape.test_crosstab": {
            "TestCrosstab": {
                "setup_method": [
                    "self",
                    "method"
                ],
                "test_crosstab_single": [
                    "self"
                ],
                "test_crosstab_multiple": [
                    "self"
                ],
                "test_crosstab_ndarray": [
                    "self"
                ],
                "test_crosstab_non_aligned": [
                    "self"
                ],
                "test_crosstab_margins": [
                    "self"
                ],
                "test_crosstab_margins_set_margin_name": [
                    "self"
                ],
                "test_crosstab_pass_values": [
                    "self"
                ],
                "test_crosstab_dropna": [
                    "self"
                ],
                "test_crosstab_no_overlap": [
                    "self"
                ],
                "test_margin_dropna": [
                    "self"
                ],
                "test_crosstab_normalize": [
                    "self"
                ],
                "test_crosstab_with_empties": [
                    "self"
                ],
                "test_crosstab_errors": [
                    "self"
                ],
                "test_crosstab_with_categorial_columns": [
                    "self"
                ],
                "test_crosstab_with_numpy_size": [
                    "self"
                ],
                "test_crosstab_dup_index_names": [
                    "self"
                ],
                "test_crosstab_tuple_name": [
                    "self",
                    "names"
                ],
                "test_crosstab_both_tuple_names": [
                    "self"
                ],
                "test_crosstab_unsorted_order": [
                    "self"
                ],
                "test_crosstab_normalize_multiple_columns": [
                    "self"
                ],
                "test_margin_normalize": [
                    "self"
                ]
            }
        },
        "pandas.tests.reshape.test_qcut": {
            "test_qcut": [],
            "test_qcut_bounds": [],
            "test_qcut_specify_quantiles": [],
            "test_qcut_all_bins_same": [],
            "test_qcut_include_lowest": [],
            "test_qcut_nas": [],
            "test_qcut_index": [],
            "test_qcut_binning_issues": [
                "datapath"
            ],
            "test_qcut_return_intervals": [],
            "test_qcut_incorrect_labels": [
                "labels"
            ],
            "test_qcut_wrong_length_labels": [
                "labels"
            ],
            "test_qcut_list_like_labels": [
                "labels",
                "expected"
            ],
            "test_qcut_duplicates_bin": [
                "kwargs",
                "msg"
            ],
            "test_single_quantile": [
                "data",
                "start",
                "end",
                "length",
                "labels"
            ],
            "test_qcut_nat": [
                "ser"
            ],
            "test_datetime_tz_qcut": [
                "bins"
            ],
            "test_date_like_qcut_bins": [
                "arg",
                "expected_bins"
            ],
            "test_qcut_bool_coercion_to_int": [
                "bins",
                "box",
                "compare"
            ],
            "test_qcut_nullable_integer": [
                "q",
                "any_nullable_int_dtype"
            ]
        },
        "pandas.tests.reshape.test_cut": {
            "test_simple": [],
            "test_bins": [],
            "test_right": [],
            "test_no_right": [],
            "test_array_like": [],
            "test_bins_from_interval_index": [],
            "test_bins_from_interval_index_doc_example": [],
            "test_bins_not_overlapping_from_interval_index": [],
            "test_bins_not_monotonic": [],
            "test_bins_monotonic_not_overflowing": [
                "x",
                "bins",
                "expected"
            ],
            "test_wrong_num_labels": [],
            "test_cut_corner": [
                "x",
                "bins",
                "msg"
            ],
            "test_cut_not_1d_arg": [
                "arg",
                "cut_func"
            ],
            "test_int_bins_with_inf": [
                "data"
            ],
            "test_cut_out_of_range_more": [],
            "test_labels": [
                "right",
                "breaks",
                "closed"
            ],
            "test_cut_pass_series_name_to_factor": [],
            "test_label_precision": [],
            "test_na_handling": [
                "labels"
            ],
            "test_inf_handling": [],
            "test_cut_out_of_bounds": [],
            "test_cut_pass_labels": [
                "get_labels",
                "get_expected"
            ],
            "test_cut_pass_labels_compat": [],
            "test_round_frac_just_works": [
                "x"
            ],
            "test_round_frac": [
                "val",
                "precision",
                "expected"
            ],
            "test_cut_return_intervals": [],
            "test_series_ret_bins": [],
            "test_cut_duplicates_bin": [
                "kwargs",
                "msg"
            ],
            "test_single_bin": [
                "data",
                "length"
            ],
            "test_cut_read_only": [
                "array_1_writeable",
                "array_2_writeable"
            ],
            "test_datetime_bin": [
                "conv"
            ],
            "test_datetime_cut": [
                "data"
            ],
            "test_datetime_tz_cut": [
                "bins",
                "box"
            ],
            "test_datetime_nan_error": [],
            "test_datetime_nan_mask": [],
            "test_datetime_cut_roundtrip": [
                "tz"
            ],
            "test_timedelta_cut_roundtrip": [],
            "test_cut_bool_coercion_to_int": [
                "bins",
                "box",
                "compare"
            ],
            "test_cut_incorrect_labels": [
                "labels"
            ],
            "test_cut_nullable_integer": [
                "bins",
                "right",
                "include_lowest"
            ],
            "test_cut_non_unique_labels": [
                "data",
                "bins",
                "labels",
                "expected_codes",
                "expected_labels"
            ],
            "test_cut_unordered_labels": [
                "data",
                "bins",
                "labels",
                "expected_codes",
                "expected_labels"
            ],
            "test_cut_unordered_with_missing_labels_raises_error": []
        },
        "pandas.tests.reshape.test_melt": {
            "TestMelt": {
                "setup_method": [
                    "self",
                    "method"
                ],
                "test_top_level_method": [
                    "self"
                ],
                "test_method_signatures": [
                    "self"
                ],
                "test_default_col_names": [
                    "self"
                ],
                "test_value_vars": [
                    "self"
                ],
                "test_value_vars_types": [
                    "self"
                ],
                "test_vars_work_with_multiindex": [
                    "self"
                ],
                "test_single_vars_work_with_multiindex": [
                    "self",
                    "id_vars",
                    "value_vars",
                    "col_level",
                    "expected"
                ],
                "test_tuple_vars_fail_with_multiindex": [
                    "self"
                ],
                "test_custom_var_name": [
                    "self"
                ],
                "test_custom_value_name": [
                    "self"
                ],
                "test_custom_var_and_value_name": [
                    "self"
                ],
                "test_col_level": [
                    "self"
                ],
                "test_multiindex": [
                    "self"
                ],
                "test_pandas_dtypes": [
                    "self",
                    "col"
                ],
                "test_preserve_category": [
                    "self"
                ],
                "test_melt_missing_columns_raises": [
                    "self"
                ],
                "test_melt_mixed_int_str_id_vars": [
                    "self"
                ],
                "test_melt_mixed_int_str_value_vars": [
                    "self"
                ],
                "test_ignore_index": [
                    "self"
                ],
                "test_ignore_multiindex": [
                    "self"
                ],
                "test_ignore_index_name_and_type": [
                    "self"
                ]
            },
            "TestLreshape": {
                "test_pairs": [
                    "self"
                ]
            },
            "TestWideToLong": {
                "test_simple": [
                    "self"
                ],
                "test_stubs": [
                    "self"
                ],
                "test_separating_character": [
                    "self"
                ],
                "test_escapable_characters": [
                    "self"
                ],
                "test_unbalanced": [
                    "self"
                ],
                "test_character_overlap": [
                    "self"
                ],
                "test_invalid_separator": [
                    "self"
                ],
                "test_num_string_disambiguation": [
                    "self"
                ],
                "test_invalid_suffixtype": [
                    "self"
                ],
                "test_multiple_id_columns": [
                    "self"
                ],
                "test_non_unique_idvars": [
                    "self"
                ],
                "test_cast_j_int": [
                    "self"
                ],
                "test_identical_stubnames": [
                    "self"
                ],
                "test_nonnumeric_suffix": [
                    "self"
                ],
                "test_mixed_type_suffix": [
                    "self"
                ],
                "test_float_suffix": [
                    "self"
                ],
                "test_col_substring_of_stubname": [
                    "self"
                ],
                "test_warn_of_column_name_value": [
                    "self"
                ]
            }
        },
        "pandas.tests.reshape": {},
        "pandas.tests.reshape.test_concat": {
            "sort": [
                "request"
            ],
            "test_concat_no_unnecessary_upcast": [
                "dt",
                "pdt"
            ],
            "test_concat_will_upcast": [
                "dt",
                "pdt"
            ],
            "test_concat_empty_and_non_empty_frame_regression": [],
            "test_concat_empty_and_non_empty_series_regression": [],
            "test_concat_sorts_columns": [
                "sort"
            ],
            "test_concat_sorts_index": [
                "sort"
            ],
            "test_concat_inner_sort": [
                "sort"
            ],
            "test_concat_aligned_sort": [],
            "test_concat_aligned_sort_does_not_raise": [],
            "test_concat_series_name_npscalar_tuple": [
                "s1name",
                "s2name"
            ],
            "test_concat_categorical_tz": [],
            "test_concat_categorical_unchanged": [],
            "test_concat_datetimeindex_freq": [],
            "test_concat_empty_df_object_dtype": [],
            "test_concat_sparse": [],
            "test_concat_dense_sparse": [],
            "test_concat_copy_index": [
                "test_series",
                "axis"
            ],
            "test_concat_multiindex_datetime_object_index": [],
            "test_duplicate_keys": [
                "keys"
            ],
            "test_concat_preserves_subclass": [
                "obj"
            ],
            "test_concat_frame_axis0_extension_dtypes": [],
            "TestConcatAppendCommon": {
                "setup_method": [
                    "self",
                    "method"
                ],
                "_check_expected_dtype": [
                    "self",
                    "obj",
                    "label"
                ],
                "test_dtypes": [
                    "self"
                ],
                "test_concatlike_same_dtypes": [
                    "self"
                ],
                "test_concatlike_dtypes_coercion": [
                    "self"
                ],
                "test_concatlike_common_coerce_to_pandas_object": [
                    "self"
                ],
                "test_concatlike_datetimetz": [
                    "self",
                    "tz_aware_fixture"
                ],
                "test_concatlike_datetimetz_short": [
                    "self",
                    "tz"
                ],
                "test_concatlike_datetimetz_to_object": [
                    "self",
                    "tz_aware_fixture"
                ],
                "test_concatlike_common_period": [
                    "self"
                ],
                "test_concatlike_common_period_diff_freq_to_object": [
                    "self"
                ],
                "test_concatlike_common_period_mixed_dt_to_object": [
                    "self"
                ],
                "test_concat_categorical": [
                    "self"
                ],
                "test_union_categorical_same_categories_different_order": [
                    "self"
                ],
                "test_concat_categorical_coercion": [
                    "self"
                ],
                "test_concat_categorical_3elem_coercion": [
                    "self"
                ],
                "test_concat_categorical_multi_coercion": [
                    "self"
                ],
                "test_concat_categorical_ordered": [
                    "self"
                ],
                "test_concat_categorical_coercion_nan": [
                    "self"
                ],
                "test_concat_categorical_empty": [
                    "self"
                ]
            },
            "TestAppend": {
                "test_append": [
                    "self",
                    "sort",
                    "float_frame"
                ],
                "test_append_empty": [
                    "self",
                    "float_frame"
                ],
                "test_append_overlap_raises": [
                    "self",
                    "float_frame"
                ],
                "test_append_new_columns": [
                    "self"
                ],
                "test_append_length0_frame": [
                    "self",
                    "sort"
                ],
                "test_append_records": [
                    "self"
                ],
                "test_append_sorts": [
                    "self",
                    "sort"
                ],
                "test_append_different_columns": [
                    "self",
                    "sort"
                ],
                "test_append_many": [
                    "self",
                    "sort",
                    "float_frame"
                ],
                "test_append_preserve_index_name": [
                    "self"
                ],
                "test_append_same_columns_type": [
                    "self",
                    "index"
                ],
                "test_append_different_columns_types": [
                    "self",
                    "df_columns",
                    "series_index"
                ],
                "test_append_different_columns_types_raises": [
                    "self",
                    "index_can_append",
                    "index_cannot_append_with_other"
                ],
                "test_append_dtype_coerce": [
                    "self",
                    "sort"
                ],
                "test_append_missing_column_proper_upcast": [
                    "self",
                    "sort"
                ],
                "test_append_empty_frame_to_series_with_dateutil_tz": [
                    "self"
                ]
            },
            "TestConcatenate": {
                "test_concat_copy": [
                    "self"
                ],
                "test_concat_with_group_keys": [
                    "self"
                ],
                "test_concat_keys_specific_levels": [
                    "self"
                ],
                "test_concat_dataframe_keys_bug": [
                    "self",
                    "sort"
                ],
                "test_concat_series_partial_columns_names": [
                    "self"
                ],
                "test_concat_mapping": [
                    "self",
                    "mapping",
                    "non_dict_mapping_subclass"
                ],
                "test_concat_ignore_index": [
                    "self",
                    "sort"
                ],
                "test_concat_multiindex_with_keys": [
                    "self"
                ],
                "test_concat_multiindex_with_tz": [
                    "self"
                ],
                "test_concat_multiindex_with_none_in_index_names": [
                    "self"
                ],
                "test_concat_keys_and_levels": [
                    "self"
                ],
                "test_concat_keys_levels_no_overlap": [
                    "self"
                ],
                "test_concat_rename_index": [
                    "self"
                ],
                "test_crossed_dtypes_weird_corner": [
                    "self"
                ],
                "test_dups_index": [
                    "self"
                ],
                "test_with_mixed_tuples": [
                    "self",
                    "sort"
                ],
                "test_handle_empty_objects": [
                    "self",
                    "sort"
                ],
                "test_concat_mixed_objs": [
                    "self"
                ],
                "test_empty_dtype_coerce": [
                    "self"
                ],
                "test_dtype_coerceion": [
                    "self"
                ],
                "test_concat_series": [
                    "self"
                ],
                "test_concat_series_axis1": [
                    "self",
                    "sort"
                ],
                "test_concat_series_axis1_names_applied": [
                    "self"
                ],
                "test_concat_single_with_key": [
                    "self"
                ],
                "test_concat_exclude_none": [
                    "self"
                ],
                "test_concat_datetime64_block": [
                    "self"
                ],
                "test_concat_timedelta64_block": [
                    "self"
                ],
                "test_concat_keys_with_none": [
                    "self"
                ],
                "test_concat_bug_1719": [
                    "self"
                ],
                "test_concat_bug_2972": [
                    "self"
                ],
                "test_concat_bug_3602": [
                    "self"
                ],
                "test_concat_inner_join_empty": [
                    "self"
                ],
                "test_concat_series_axis1_same_names_ignore_index": [
                    "self"
                ],
                "test_concat_iterables": [
                    "self"
                ],
                "test_concat_invalid": [
                    "self"
                ],
                "test_concat_invalid_first_argument": [
                    "self"
                ],
                "test_concat_NaT_series": [
                    "self"
                ],
                "test_concat_tz_frame": [
                    "self"
                ],
                "test_concat_tz_series": [
                    "self"
                ],
                "test_concat_tz_series_with_datetimelike": [
                    "self"
                ],
                "test_concat_tz_series_tzlocal": [
                    "self"
                ],
                "test_concat_NaT_dataframes_all_NaT_axis_0": [
                    "self",
                    "tz1",
                    "tz2",
                    "s"
                ],
                "test_concat_NaT_dataframes_all_NaT_axis_1": [
                    "self",
                    "tz1",
                    "tz2"
                ],
                "test_concat_NaT_series_dataframe_all_NaT": [
                    "self",
                    "tz1",
                    "tz2"
                ],
                "test_concat_NaT_dataframes": [
                    "self",
                    "tz"
                ],
                "test_concat_period_series": [
                    "self"
                ],
                "test_concat_period_multiple_freq_series": [
                    "self"
                ],
                "test_concat_period_other_series": [
                    "self"
                ],
                "test_concat_empty_series": [
                    "self"
                ],
                "test_concat_empty_series_timelike": [
                    "self",
                    "tz",
                    "values"
                ],
                "test_default_index": [
                    "self"
                ],
                "test_concat_multiindex_rangeindex": [
                    "self"
                ],
                "test_concat_multiindex_dfs_with_deepcopy": [
                    "self"
                ],
                "test_categorical_concat_append": [
                    "self"
                ],
                "test_categorical_concat_dtypes": [
                    "self"
                ],
                "test_categorical_concat": [
                    "self",
                    "sort"
                ],
                "test_categorical_concat_gh7864": [
                    "self"
                ],
                "test_categorical_concat_preserve": [
                    "self"
                ],
                "test_categorical_index_preserver": [
                    "self"
                ],
                "test_concat_categoricalindex": [
                    "self"
                ],
                "test_concat_order": [
                    "self"
                ],
                "test_concat_datetime_timezone": [
                    "self"
                ],
                "test_concat_different_extension_dtypes_upcasts": [
                    "self"
                ],
                "test_concat_odered_dict": [
                    "self"
                ]
            }
        },
        "pandas.tests.reshape.merge.test_merge_asof": {
            "TestAsOfMerge": {
                "read_data": [
                    "self",
                    "datapath",
                    "name",
                    "dedupe"
                ],
                "setup_method": [
                    "self",
                    "datapath"
                ],
                "test_examples1": [
                    "self"
                ],
                "test_examples2": [
                    "self"
                ],
                "test_examples3": [
                    "self"
                ],
                "test_examples4": [
                    "self"
                ],
                "test_basic": [
                    "self"
                ],
                "test_basic_categorical": [
                    "self"
                ],
                "test_basic_left_index": [
                    "self"
                ],
                "test_basic_right_index": [
                    "self"
                ],
                "test_basic_left_index_right_index": [
                    "self"
                ],
                "test_multi_index": [
                    "self"
                ],
                "test_on_and_index": [
                    "self"
                ],
                "test_basic_left_by_right_by": [
                    "self"
                ],
                "test_missing_right_by": [
                    "self"
                ],
                "test_multiby": [
                    "self"
                ],
                "test_multiby_heterogeneous_types": [
                    "self"
                ],
                "test_multiby_indexed": [
                    "self"
                ],
                "test_basic2": [
                    "self",
                    "datapath"
                ],
                "test_basic_no_by": [
                    "self"
                ],
                "test_valid_join_keys": [
                    "self"
                ],
                "test_with_duplicates": [
                    "self",
                    "datapath"
                ],
                "test_with_duplicates_no_on": [
                    "self"
                ],
                "test_valid_allow_exact_matches": [
                    "self"
                ],
                "test_valid_tolerance": [
                    "self"
                ],
                "test_non_sorted": [
                    "self"
                ],
                "test_tolerance": [
                    "self",
                    "tolerance"
                ],
                "test_tolerance_forward": [
                    "self"
                ],
                "test_tolerance_nearest": [
                    "self"
                ],
                "test_tolerance_tz": [
                    "self"
                ],
                "test_tolerance_float": [
                    "self"
                ],
                "test_index_tolerance": [
                    "self"
                ],
                "test_allow_exact_matches": [
                    "self"
                ],
                "test_allow_exact_matches_forward": [
                    "self"
                ],
                "test_allow_exact_matches_nearest": [
                    "self"
                ],
                "test_allow_exact_matches_and_tolerance": [
                    "self"
                ],
                "test_allow_exact_matches_and_tolerance2": [
                    "self"
                ],
                "test_allow_exact_matches_and_tolerance3": [
                    "self"
                ],
                "test_allow_exact_matches_and_tolerance_forward": [
                    "self"
                ],
                "test_allow_exact_matches_and_tolerance_nearest": [
                    "self"
                ],
                "test_forward_by": [
                    "self"
                ],
                "test_nearest_by": [
                    "self"
                ],
                "test_by_int": [
                    "self"
                ],
                "test_on_float": [
                    "self"
                ],
                "test_on_specialized_type": [
                    "self",
                    "any_real_dtype"
                ],
                "test_on_specialized_type_by_int": [
                    "self",
                    "any_real_dtype"
                ],
                "test_on_float_by_int": [
                    "self"
                ],
                "test_merge_datatype_error_raises": [
                    "self"
                ],
                "test_merge_datatype_categorical_error_raises": [
                    "self"
                ],
                "test_merge_groupby_multiple_column_with_categorical_column": [
                    "self"
                ],
                "test_merge_on_nans": [
                    "self",
                    "func",
                    "side"
                ],
                "test_merge_by_col_tz_aware": [
                    "self"
                ],
                "test_by_mixed_tz_aware": [
                    "self"
                ],
                "test_timedelta_tolerance_nearest": [
                    "self"
                ],
                "test_int_type_tolerance": [
                    "self",
                    "any_int_dtype"
                ],
                "test_merge_index_column_tz": [
                    "self"
                ],
                "test_left_index_right_index_tolerance": [
                    "self"
                ]
            }
        },
        "pandas.tests.reshape.merge.test_merge_ordered": {
            "TestMergeOrdered": {
                "setup_method": [
                    "self",
                    "method"
                ],
                "test_basic": [
                    "self"
                ],
                "test_ffill": [
                    "self"
                ],
                "test_multigroup": [
                    "self"
                ],
                "test_merge_type": [
                    "self"
                ],
                "test_empty_sequence_concat": [
                    "self"
                ],
                "test_doc_example": [
                    "self"
                ]
            }
        },
        "pandas.tests.reshape.merge.test_multi": {
            "left": [],
            "right": [],
            "left_multi": [],
            "right_multi": [],
            "on_cols_multi": [],
            "idx_cols_multi": [],
            "TestMergeMulti": {
                "setup_method": [
                    "self"
                ],
                "test_merge_on_multikey": [
                    "self",
                    "left",
                    "right",
                    "join_type"
                ],
                "test_left_join_multi_index": [
                    "self",
                    "left",
                    "right",
                    "sort"
                ],
                "test_merge_right_vs_left": [
                    "self",
                    "left",
                    "right",
                    "sort"
                ],
                "test_merge_multiple_cols_with_mixed_cols_index": [
                    "self"
                ],
                "test_compress_group_combinations": [
                    "self"
                ],
                "test_left_join_index_preserve_order": [
                    "self"
                ],
                "test_left_join_index_multi_match_multiindex": [
                    "self"
                ],
                "test_left_join_index_multi_match": [
                    "self"
                ],
                "test_left_merge_na_buglet": [
                    "self"
                ],
                "test_merge_na_keys": [
                    "self"
                ],
                "test_merge_datetime_index": [
                    "self",
                    "klass"
                ],
                "test_join_multi_levels": [
                    "self"
                ],
                "test_join_multi_levels2": [
                    "self"
                ]
            },
            "TestJoinMultiMulti": {
                "test_join_multi_multi": [
                    "self",
                    "left_multi",
                    "right_multi",
                    "join_type",
                    "on_cols_multi",
                    "idx_cols_multi"
                ],
                "test_join_multi_empty_frames": [
                    "self",
                    "left_multi",
                    "right_multi",
                    "join_type",
                    "on_cols_multi",
                    "idx_cols_multi"
                ],
                "test_merge_datetime_index": [
                    "self",
                    "box"
                ],
                "test_single_common_level": [
                    "self"
                ],
                "test_join_multi_wrong_order": [
                    "self"
                ]
            }
        },
        "pandas.tests.reshape.merge.test_merge_index_as_string": {
            "df1": [],
            "df2": [],
            "left_df": [
                "request",
                "df1"
            ],
            "right_df": [
                "request",
                "df2"
            ],
            "compute_expected": [
                "df_left",
                "df_right",
                "on",
                "left_on",
                "right_on",
                "how"
            ],
            "test_merge_indexes_and_columns_on": [
                "left_df",
                "right_df",
                "on",
                "how"
            ],
            "test_merge_indexes_and_columns_lefton_righton": [
                "left_df",
                "right_df",
                "left_on",
                "right_on",
                "how"
            ],
            "test_join_indexes_and_columns_on": [
                "df1",
                "df2",
                "left_index",
                "join_type"
            ]
        },
        "pandas.tests.reshape.merge.test_pivot_old": {},
        "pandas.tests.reshape.merge.test_join": {
            "_check_join": [
                "left",
                "right",
                "result",
                "join_col",
                "how",
                "lsuffix",
                "rsuffix"
            ],
            "_restrict_to_columns": [
                "group",
                "columns",
                "suffix"
            ],
            "_assert_same_contents": [
                "join_chunk",
                "source"
            ],
            "_assert_all_na": [
                "join_chunk",
                "source_columns",
                "join_col"
            ],
            "_join_by_hand": [
                "a",
                "b",
                "how"
            ],
            "TestJoin": {
                "setup_method": [
                    "self",
                    "method"
                ],
                "test_cython_left_outer_join": [
                    "self"
                ],
                "test_cython_right_outer_join": [
                    "self"
                ],
                "test_cython_inner_join": [
                    "self"
                ],
                "test_left_outer_join": [
                    "self"
                ],
                "test_right_outer_join": [
                    "self"
                ],
                "test_full_outer_join": [
                    "self"
                ],
                "test_inner_join": [
                    "self"
                ],
                "test_handle_overlap": [
                    "self"
                ],
                "test_handle_overlap_arbitrary_key": [
                    "self"
                ],
                "test_join_on": [
                    "self"
                ],
                "test_join_on_fails_with_different_right_index": [
                    "self"
                ],
                "test_join_on_fails_with_different_left_index": [
                    "self"
                ],
                "test_join_on_fails_with_different_column_counts": [
                    "self"
                ],
                "test_join_on_fails_with_wrong_object_type": [
                    "self",
                    "wrong_type"
                ],
                "test_join_on_pass_vector": [
                    "self"
                ],
                "test_join_with_len0": [
                    "self"
                ],
                "test_join_on_inner": [
                    "self"
                ],
                "test_join_on_singlekey_list": [
                    "self"
                ],
                "test_join_on_series": [
                    "self"
                ],
                "test_join_on_series_buglet": [
                    "self"
                ],
                "test_join_index_mixed": [
                    "self",
                    "join_type"
                ],
                "test_join_index_mixed_overlap": [
                    "self"
                ],
                "test_join_empty_bug": [
                    "self"
                ],
                "test_join_unconsolidated": [
                    "self"
                ],
                "test_join_multiindex": [
                    "self"
                ],
                "test_join_inner_multiindex": [
                    "self"
                ],
                "test_join_hierarchical_mixed": [
                    "self"
                ],
                "test_join_float64_float32": [
                    "self"
                ],
                "test_join_many_non_unique_index": [
                    "self"
                ],
                "test_join_sort": [
                    "self"
                ],
                "test_join_mixed_non_unique_index": [
                    "self"
                ],
                "test_join_non_unique_period_index": [
                    "self"
                ],
                "test_mixed_type_join_with_suffix": [
                    "self"
                ],
                "test_join_many": [
                    "self"
                ],
                "test_join_many_mixed": [
                    "self"
                ],
                "test_join_dups": [
                    "self"
                ],
                "test_join_multi_to_multi": [
                    "self",
                    "join_type"
                ],
                "test_join_on_tz_aware_datetimeindex": [
                    "self"
                ],
                "test_join_datetime_string": [
                    "self"
                ]
            }
        },
        "pandas.tests.reshape.merge.test_merge": {
            "get_test_data": [
                "ngroups",
                "n"
            ],
            "get_series": [],
            "get_series_na": [],
            "series_of_dtype": [
                "request"
            ],
            "series_of_dtype2": [
                "request"
            ],
            "series_of_dtype_all_na": [
                "request"
            ],
            "_check_merge": [
                "x",
                "y"
            ],
            "left": [],
            "right": [],
            "left_df": [],
            "right_df": [],
            "test_merge_index_types": [
                "index"
            ],
            "test_merge_series": [
                "on",
                "left_on",
                "right_on",
                "left_index",
                "right_index",
                "nm"
            ],
            "test_merge_suffix": [
                "col1",
                "col2",
                "kwargs",
                "expected_cols"
            ],
            "test_merge_duplicate_suffix": [
                "how",
                "expected"
            ],
            "test_merge_suffix_error": [
                "col1",
                "col2",
                "suffixes"
            ],
            "test_merge_suffix_warns": [
                "suffixes"
            ],
            "test_merge_suffix_length_error": [
                "col1",
                "col2",
                "suffixes",
                "msg"
            ],
            "test_merge_equal_cat_dtypes": [
                "cat_dtype",
                "reverse"
            ],
            "test_merge_equal_cat_dtypes2": [],
            "test_merge_on_cat_and_ext_array": [],
            "test_merge_multiindex_columns": [],
            "test_merge_datetime_upcast_dtype": [],
            "test_categorical_non_unique_monotonic": [
                "n_categories"
            ],
            "TestMerge": {
                "setup_method": [
                    "self",
                    "method"
                ],
                "test_merge_inner_join_empty": [
                    "self"
                ],
                "test_merge_common": [
                    "self"
                ],
                "test_merge_non_string_columns": [
                    "self"
                ],
                "test_merge_index_as_on_arg": [
                    "self"
                ],
                "test_merge_index_singlekey_right_vs_left": [
                    "self"
                ],
                "test_merge_index_singlekey_inner": [
                    "self"
                ],
                "test_merge_misspecified": [
                    "self"
                ],
                "test_index_and_on_parameters_confusion": [
                    "self"
                ],
                "test_merge_overlap": [
                    "self"
                ],
                "test_merge_different_column_key_names": [
                    "self"
                ],
                "test_merge_copy": [
                    "self"
                ],
                "test_merge_nocopy": [
                    "self"
                ],
                "test_intelligently_handle_join_key": [
                    "self"
                ],
                "test_merge_join_key_dtype_cast": [
                    "self"
                ],
                "test_handle_join_key_pass_array": [
                    "self"
                ],
                "test_no_overlap_more_informative_error": [
                    "self"
                ],
                "test_merge_non_unique_indexes": [
                    "self"
                ],
                "test_merge_non_unique_index_many_to_many": [
                    "self"
                ],
                "test_left_merge_empty_dataframe": [
                    "self"
                ],
                "test_merge_left_empty_right_empty": [
                    "self",
                    "join_type",
                    "kwarg"
                ],
                "test_merge_left_empty_right_notempty": [
                    "self"
                ],
                "test_merge_left_notempty_right_empty": [
                    "self"
                ],
                "test_merge_empty_frame": [
                    "self",
                    "series_of_dtype",
                    "series_of_dtype2"
                ],
                "test_merge_all_na_column": [
                    "self",
                    "series_of_dtype",
                    "series_of_dtype_all_na"
                ],
                "test_merge_nosort": [
                    "self"
                ],
                "test_merge_nan_right": [
                    "self"
                ],
                "test_merge_type": [
                    "self"
                ],
                "test_join_append_timedeltas": [
                    "self"
                ],
                "test_other_datetime_unit": [
                    "self"
                ],
                "test_other_timedelta_unit": [
                    "self",
                    "unit"
                ],
                "test_overlapping_columns_error_message": [
                    "self"
                ],
                "test_merge_on_datetime64tz": [
                    "self"
                ],
                "test_merge_on_datetime64tz_empty": [
                    "self"
                ],
                "test_merge_datetime64tz_with_dst_transition": [
                    "self"
                ],
                "test_merge_non_unique_period_index": [
                    "self"
                ],
                "test_merge_on_periods": [
                    "self"
                ],
                "test_indicator": [
                    "self"
                ],
                "test_validation": [
                    "self"
                ],
                "test_merge_two_empty_df_no_division_error": [
                    "self"
                ],
                "test_merge_on_index_with_more_values": [
                    "self",
                    "how",
                    "index",
                    "expected_index"
                ],
                "test_merge_right_index_right": [
                    "self"
                ],
                "test_merge_preserves_row_order": [
                    "self",
                    "how"
                ],
                "test_merge_take_missing_values_from_index_of_other_dtype": [
                    "self"
                ],
                "test_merge_readonly": [
                    "self"
                ]
            },
            "TestMergeDtypes": {
                "test_different": [
                    "self",
                    "right_vals"
                ],
                "test_join_multi_dtypes": [
                    "self",
                    "d1",
                    "d2"
                ],
                "test_merge_on_ints_floats": [
                    "self",
                    "int_vals",
                    "float_vals",
                    "exp_vals"
                ],
                "test_merge_key_dtype_cast": [
                    "self"
                ],
                "test_merge_on_ints_floats_warning": [
                    "self"
                ],
                "test_merge_incompat_infer_boolean_object": [
                    "self"
                ],
                "test_merge_incompat_dtypes_are_ok": [
                    "self",
                    "df1_vals",
                    "df2_vals"
                ],
                "test_merge_incompat_dtypes_error": [
                    "self",
                    "df1_vals",
                    "df2_vals"
                ]
            },
            "TestMergeCategorical": {
                "test_identical": [
                    "self",
                    "left"
                ],
                "test_basic": [
                    "self",
                    "left",
                    "right"
                ],
                "test_merge_categorical": [
                    "self"
                ],
                "tests_merge_categorical_unordered_equal": [
                    "self"
                ],
                "test_other_columns": [
                    "self",
                    "left",
                    "right"
                ],
                "test_dtype_on_merged_different": [
                    "self",
                    "change",
                    "join_type",
                    "left",
                    "right"
                ],
                "test_self_join_multiple_categories": [
                    "self"
                ],
                "test_dtype_on_categorical_dates": [
                    "self"
                ],
                "test_merging_with_bool_or_int_cateorical_column": [
                    "self",
                    "category_column",
                    "categories",
                    "expected_categories",
                    "ordered"
                ],
                "test_merge_on_int_array": [
                    "self"
                ]
            },
            "TestMergeOnIndexes": {
                "test_merge_on_indexes": [
                    "self",
                    "left_df",
                    "right_df",
                    "how",
                    "sort",
                    "expected"
                ]
            }
        },
        "pandas.tests.reshape.merge": {},
        "pandas.api": {},
        "pandas.api.types": {},
        "pandas.api.extensions": {},
        "pandas.api.indexers": {},
        "pandas.io.feather_format": {
            "to_feather": [
                "df",
                "path"
            ],
            "read_feather": [
                "path",
                "columns",
                "use_threads"
            ]
        },
        "pandas.io.spss": {
            "read_spss": [
                "path",
                "usecols",
                "convert_categoricals"
            ]
        },
        "pandas.io.common": {
            "is_url": [
                "url"
            ],
            "_expand_user": [
                "filepath_or_buffer"
            ],
            "validate_header_arg": [
                "header"
            ],
            "stringify_path": [
                "filepath_or_buffer"
            ],
            "urlopen": [],
            "is_fsspec_url": [
                "url"
            ],
            "get_filepath_or_buffer": [
                "filepath_or_buffer",
                "encoding",
                "compression",
                "mode",
                "storage_options"
            ],
            "file_path_to_url": [
                "path"
            ],
            "get_compression_method": [
                "compression"
            ],
            "infer_compression": [
                "filepath_or_buffer",
                "compression"
            ],
            "get_handle": [
                "path_or_buf",
                "mode",
                "encoding",
                "compression",
                "memory_map",
                "is_text",
                "errors"
            ],
            "_BytesZipFile": {
                "__init__": [
                    "self",
                    "file",
                    "mode",
                    "archive_name"
                ],
                "write": [
                    "self",
                    "data"
                ],
                "closed": [
                    "self"
                ]
            },
            "_MMapWrapper": {
                "__init__": [
                    "self",
                    "f"
                ],
                "__getattr__": [
                    "self",
                    "name"
                ],
                "__iter__": [
                    "self"
                ],
                "__next__": [
                    "self"
                ]
            }
        },
        "pandas.io.pytables": {
            "_ensure_decoded": [
                "s"
            ],
            "_ensure_encoding": [
                "encoding"
            ],
            "_ensure_str": [
                "name"
            ],
            "_ensure_term": [
                "where",
                "scope_level"
            ],
            "_tables": [],
            "to_hdf": [
                "path_or_buf",
                "key",
                "value",
                "mode",
                "complevel",
                "complib",
                "append",
                "format",
                "index",
                "min_itemsize",
                "nan_rep",
                "dropna",
                "data_columns",
                "errors",
                "encoding"
            ],
            "read_hdf": [
                "path_or_buf",
                "key",
                "mode",
                "errors",
                "where",
                "start",
                "stop",
                "columns",
                "iterator",
                "chunksize"
            ],
            "_is_metadata_of": [
                "group",
                "parent_group"
            ],
            "_reindex_axis": [
                "obj",
                "axis",
                "labels",
                "other"
            ],
            "_get_tz": [
                "tz"
            ],
            "_set_tz": [
                "values",
                "tz",
                "coerce"
            ],
            "_convert_index": [
                "name",
                "index",
                "encoding",
                "errors"
            ],
            "_unconvert_index": [
                "data",
                "kind",
                "encoding",
                "errors"
            ],
            "_maybe_convert_for_string_atom": [
                "name",
                "block",
                "existing_col",
                "min_itemsize",
                "nan_rep",
                "encoding",
                "errors"
            ],
            "_convert_string_array": [
                "data",
                "encoding",
                "errors"
            ],
            "_unconvert_string_array": [
                "data",
                "nan_rep",
                "encoding",
                "errors"
            ],
            "_maybe_convert": [
                "values",
                "val_kind",
                "encoding",
                "errors"
            ],
            "_get_converter": [
                "kind",
                "encoding",
                "errors"
            ],
            "_need_convert": [
                "kind"
            ],
            "_maybe_adjust_name": [
                "name",
                "version"
            ],
            "_dtype_to_kind": [
                "dtype_str"
            ],
            "_get_data_and_dtype_name": [
                "data"
            ],
            "PossibleDataLossError": {},
            "ClosedFileError": {},
            "IncompatibilityWarning": {},
            "AttributeConflictWarning": {},
            "DuplicateWarning": {},
            "HDFStore": {
                "__init__": [
                    "self",
                    "path",
                    "mode",
                    "complevel",
                    "complib",
                    "fletcher32"
                ],
                "__fspath__": [
                    "self"
                ],
                "root": [
                    "self"
                ],
                "filename": [
                    "self"
                ],
                "__getitem__": [
                    "self",
                    "key"
                ],
                "__setitem__": [
                    "self",
                    "key",
                    "value"
                ],
                "__delitem__": [
                    "self",
                    "key"
                ],
                "__getattr__": [
                    "self",
                    "name"
                ],
                "__contains__": [
                    "self",
                    "key"
                ],
                "__len__": [
                    "self"
                ],
                "__repr__": [
                    "self"
                ],
                "__enter__": [
                    "self"
                ],
                "__exit__": [
                    "self",
                    "exc_type",
                    "exc_value",
                    "traceback"
                ],
                "keys": [
                    "self",
                    "include"
                ],
                "__iter__": [
                    "self"
                ],
                "items": [
                    "self"
                ],
                "open": [
                    "self",
                    "mode"
                ],
                "close": [
                    "self"
                ],
                "is_open": [
                    "self"
                ],
                "flush": [
                    "self",
                    "fsync"
                ],
                "get": [
                    "self",
                    "key"
                ],
                "select": [
                    "self",
                    "key",
                    "where",
                    "start",
                    "stop",
                    "columns",
                    "iterator",
                    "chunksize",
                    "auto_close"
                ],
                "select_as_coordinates": [
                    "self",
                    "key",
                    "where",
                    "start",
                    "stop"
                ],
                "select_column": [
                    "self",
                    "key",
                    "column",
                    "start",
                    "stop"
                ],
                "select_as_multiple": [
                    "self",
                    "keys",
                    "where",
                    "selector",
                    "columns",
                    "start",
                    "stop",
                    "iterator",
                    "chunksize",
                    "auto_close"
                ],
                "put": [
                    "self",
                    "key",
                    "value",
                    "format",
                    "index",
                    "append",
                    "complib",
                    "complevel",
                    "min_itemsize",
                    "nan_rep",
                    "data_columns",
                    "encoding",
                    "errors",
                    "track_times"
                ],
                "remove": [
                    "self",
                    "key",
                    "where",
                    "start",
                    "stop"
                ],
                "append": [
                    "self",
                    "key",
                    "value",
                    "format",
                    "axes",
                    "index",
                    "append",
                    "complib",
                    "complevel",
                    "columns",
                    "min_itemsize",
                    "nan_rep",
                    "chunksize",
                    "expectedrows",
                    "dropna",
                    "data_columns",
                    "encoding",
                    "errors"
                ],
                "append_to_multiple": [
                    "self",
                    "d",
                    "value",
                    "selector",
                    "data_columns",
                    "axes",
                    "dropna"
                ],
                "create_table_index": [
                    "self",
                    "key",
                    "columns",
                    "optlevel",
                    "kind"
                ],
                "groups": [
                    "self"
                ],
                "walk": [
                    "self",
                    "where"
                ],
                "get_node": [
                    "self",
                    "key"
                ],
                "get_storer": [
                    "self",
                    "key"
                ],
                "copy": [
                    "self",
                    "file",
                    "mode",
                    "propindexes",
                    "keys",
                    "complib",
                    "complevel",
                    "fletcher32",
                    "overwrite"
                ],
                "info": [
                    "self"
                ],
                "_check_if_open": [
                    "self"
                ],
                "_validate_format": [
                    "self",
                    "format"
                ],
                "_create_storer": [
                    "self",
                    "group",
                    "format",
                    "value",
                    "encoding",
                    "errors"
                ],
                "_write_to_group": [
                    "self",
                    "key",
                    "value",
                    "format",
                    "axes",
                    "index",
                    "append",
                    "complib",
                    "complevel",
                    "fletcher32",
                    "min_itemsize",
                    "chunksize",
                    "expectedrows",
                    "dropna",
                    "nan_rep",
                    "data_columns",
                    "encoding",
                    "errors",
                    "track_times"
                ],
                "_read_group": [
                    "self",
                    "group"
                ]
            },
            "TableIterator": {
                "__init__": [
                    "self",
                    "store",
                    "s",
                    "func",
                    "where",
                    "nrows",
                    "start",
                    "stop",
                    "iterator",
                    "chunksize",
                    "auto_close"
                ],
                "__iter__": [
                    "self"
                ],
                "close": [
                    "self"
                ],
                "get_result": [
                    "self",
                    "coordinates"
                ]
            },
            "IndexCol": {
                "__init__": [
                    "self",
                    "name",
                    "values",
                    "kind",
                    "typ",
                    "cname",
                    "axis",
                    "pos",
                    "freq",
                    "tz",
                    "index_name",
                    "ordered",
                    "table",
                    "meta",
                    "metadata"
                ],
                "itemsize": [
                    "self"
                ],
                "kind_attr": [
                    "self"
                ],
                "set_pos": [
                    "self",
                    "pos"
                ],
                "__repr__": [
                    "self"
                ],
                "__eq__": [
                    "self",
                    "other"
                ],
                "__ne__": [
                    "self",
                    "other"
                ],
                "is_indexed": [
                    "self"
                ],
                "convert": [
                    "self",
                    "values",
                    "nan_rep",
                    "encoding",
                    "errors"
                ],
                "take_data": [
                    "self"
                ],
                "attrs": [
                    "self"
                ],
                "description": [
                    "self"
                ],
                "col": [
                    "self"
                ],
                "cvalues": [
                    "self"
                ],
                "__iter__": [
                    "self"
                ],
                "maybe_set_size": [
                    "self",
                    "min_itemsize"
                ],
                "validate_names": [
                    "self"
                ],
                "validate_and_set": [
                    "self",
                    "handler",
                    "append"
                ],
                "validate_col": [
                    "self",
                    "itemsize"
                ],
                "validate_attr": [
                    "self",
                    "append"
                ],
                "update_info": [
                    "self",
                    "info"
                ],
                "set_info": [
                    "self",
                    "info"
                ],
                "set_attr": [
                    "self"
                ],
                "validate_metadata": [
                    "self",
                    "handler"
                ],
                "write_metadata": [
                    "self",
                    "handler"
                ]
            },
            "GenericIndexCol": {
                "is_indexed": [
                    "self"
                ],
                "convert": [
                    "self",
                    "values",
                    "nan_rep",
                    "encoding",
                    "errors"
                ],
                "set_attr": [
                    "self"
                ]
            },
            "DataCol": {
                "__init__": [
                    "self",
                    "name",
                    "values",
                    "kind",
                    "typ",
                    "cname",
                    "pos",
                    "tz",
                    "ordered",
                    "table",
                    "meta",
                    "metadata",
                    "dtype",
                    "data"
                ],
                "dtype_attr": [
                    "self"
                ],
                "meta_attr": [
                    "self"
                ],
                "__repr__": [
                    "self"
                ],
                "__eq__": [
                    "self",
                    "other"
                ],
                "set_data": [
                    "self",
                    "data"
                ],
                "take_data": [
                    "self"
                ],
                "_get_atom": [
                    "cls",
                    "values"
                ],
                "get_atom_string": [
                    "cls",
                    "shape",
                    "itemsize"
                ],
                "get_atom_coltype": [
                    "cls",
                    "kind"
                ],
                "get_atom_data": [
                    "cls",
                    "shape",
                    "kind"
                ],
                "get_atom_datetime64": [
                    "cls",
                    "shape"
                ],
                "get_atom_timedelta64": [
                    "cls",
                    "shape"
                ],
                "shape": [
                    "self"
                ],
                "cvalues": [
                    "self"
                ],
                "validate_attr": [
                    "self",
                    "append"
                ],
                "convert": [
                    "self",
                    "values",
                    "nan_rep",
                    "encoding",
                    "errors"
                ],
                "set_attr": [
                    "self"
                ]
            },
            "DataIndexableCol": {
                "validate_names": [
                    "self"
                ],
                "get_atom_string": [
                    "cls",
                    "shape",
                    "itemsize"
                ],
                "get_atom_data": [
                    "cls",
                    "shape",
                    "kind"
                ],
                "get_atom_datetime64": [
                    "cls",
                    "shape"
                ],
                "get_atom_timedelta64": [
                    "cls",
                    "shape"
                ]
            },
            "GenericDataIndexableCol": {},
            "Fixed": {
                "__init__": [
                    "self",
                    "parent",
                    "group",
                    "encoding",
                    "errors"
                ],
                "is_old_version": [
                    "self"
                ],
                "version": [
                    "self"
                ],
                "pandas_type": [
                    "self"
                ],
                "__repr__": [
                    "self"
                ],
                "set_object_info": [
                    "self"
                ],
                "copy": [
                    "self"
                ],
                "shape": [
                    "self"
                ],
                "pathname": [
                    "self"
                ],
                "_handle": [
                    "self"
                ],
                "_filters": [
                    "self"
                ],
                "_complevel": [
                    "self"
                ],
                "_fletcher32": [
                    "self"
                ],
                "attrs": [
                    "self"
                ],
                "set_attrs": [
                    "self"
                ],
                "get_attrs": [
                    "self"
                ],
                "storable": [
                    "self"
                ],
                "is_exists": [
                    "self"
                ],
                "nrows": [
                    "self"
                ],
                "validate": [
                    "self",
                    "other"
                ],
                "validate_version": [
                    "self",
                    "where"
                ],
                "infer_axes": [
                    "self"
                ],
                "read": [
                    "self",
                    "where",
                    "columns",
                    "start",
                    "stop"
                ],
                "write": [
                    "self"
                ],
                "delete": [
                    "self",
                    "where",
                    "start",
                    "stop"
                ]
            },
            "GenericFixed": {
                "_class_to_alias": [
                    "self",
                    "cls"
                ],
                "_alias_to_class": [
                    "self",
                    "alias"
                ],
                "_get_index_factory": [
                    "self",
                    "klass"
                ],
                "validate_read": [
                    "self",
                    "columns",
                    "where"
                ],
                "is_exists": [
                    "self"
                ],
                "set_attrs": [
                    "self"
                ],
                "get_attrs": [
                    "self"
                ],
                "write": [
                    "self",
                    "obj"
                ],
                "read_array": [
                    "self",
                    "key",
                    "start",
                    "stop"
                ],
                "read_index": [
                    "self",
                    "key",
                    "start",
                    "stop"
                ],
                "write_index": [
                    "self",
                    "key",
                    "index"
                ],
                "write_multi_index": [
                    "self",
                    "key",
                    "index"
                ],
                "read_multi_index": [
                    "self",
                    "key",
                    "start",
                    "stop"
                ],
                "read_index_node": [
                    "self",
                    "node",
                    "start",
                    "stop"
                ],
                "write_array_empty": [
                    "self",
                    "key",
                    "value"
                ],
                "write_array": [
                    "self",
                    "key",
                    "value",
                    "items"
                ]
            },
            "SeriesFixed": {
                "shape": [
                    "self"
                ],
                "read": [
                    "self",
                    "where",
                    "columns",
                    "start",
                    "stop"
                ],
                "write": [
                    "self",
                    "obj"
                ]
            },
            "BlockManagerFixed": {
                "shape": [
                    "self"
                ],
                "read": [
                    "self",
                    "where",
                    "columns",
                    "start",
                    "stop"
                ],
                "write": [
                    "self",
                    "obj"
                ]
            },
            "FrameFixed": {},
            "Table": {
                "__init__": [
                    "self",
                    "parent",
                    "group",
                    "encoding",
                    "errors",
                    "index_axes",
                    "non_index_axes",
                    "values_axes",
                    "data_columns",
                    "info",
                    "nan_rep"
                ],
                "table_type_short": [
                    "self"
                ],
                "__repr__": [
                    "self"
                ],
                "__getitem__": [
                    "self",
                    "c"
                ],
                "validate": [
                    "self",
                    "other"
                ],
                "is_multi_index": [
                    "self"
                ],
                "validate_multiindex": [
                    "self",
                    "obj"
                ],
                "nrows_expected": [
                    "self"
                ],
                "is_exists": [
                    "self"
                ],
                "storable": [
                    "self"
                ],
                "table": [
                    "self"
                ],
                "dtype": [
                    "self"
                ],
                "description": [
                    "self"
                ],
                "axes": [
                    "self"
                ],
                "ncols": [
                    "self"
                ],
                "is_transposed": [
                    "self"
                ],
                "data_orientation": [
                    "self"
                ],
                "queryables": [
                    "self"
                ],
                "index_cols": [
                    "self"
                ],
                "values_cols": [
                    "self"
                ],
                "_get_metadata_path": [
                    "self",
                    "key"
                ],
                "write_metadata": [
                    "self",
                    "key",
                    "values"
                ],
                "read_metadata": [
                    "self",
                    "key"
                ],
                "set_attrs": [
                    "self"
                ],
                "get_attrs": [
                    "self"
                ],
                "validate_version": [
                    "self",
                    "where"
                ],
                "validate_min_itemsize": [
                    "self",
                    "min_itemsize"
                ],
                "indexables": [
                    "self"
                ],
                "create_index": [
                    "self",
                    "columns",
                    "optlevel",
                    "kind"
                ],
                "_read_axes": [
                    "self",
                    "where",
                    "start",
                    "stop"
                ],
                "get_object": [
                    "cls",
                    "obj",
                    "transposed"
                ],
                "validate_data_columns": [
                    "self",
                    "data_columns",
                    "min_itemsize",
                    "non_index_axes"
                ],
                "_create_axes": [
                    "self",
                    "axes",
                    "obj",
                    "validate",
                    "nan_rep",
                    "data_columns",
                    "min_itemsize"
                ],
                "_get_blocks_and_items": [
                    "block_obj",
                    "table_exists",
                    "new_non_index_axes",
                    "values_axes",
                    "data_columns"
                ],
                "process_axes": [
                    "self",
                    "obj",
                    "selection",
                    "columns"
                ],
                "create_description": [
                    "self",
                    "complib",
                    "complevel",
                    "fletcher32",
                    "expectedrows"
                ],
                "read_coordinates": [
                    "self",
                    "where",
                    "start",
                    "stop"
                ],
                "read_column": [
                    "self",
                    "column",
                    "where",
                    "start",
                    "stop"
                ]
            },
            "WORMTable": {
                "read": [
                    "self",
                    "where",
                    "columns",
                    "start",
                    "stop"
                ],
                "write": [
                    "self"
                ]
            },
            "AppendableTable": {
                "write": [
                    "self",
                    "obj",
                    "axes",
                    "append",
                    "complib",
                    "complevel",
                    "fletcher32",
                    "min_itemsize",
                    "chunksize",
                    "expectedrows",
                    "dropna",
                    "nan_rep",
                    "data_columns",
                    "track_times"
                ],
                "write_data": [
                    "self",
                    "chunksize",
                    "dropna"
                ],
                "write_data_chunk": [
                    "self",
                    "rows",
                    "indexes",
                    "mask",
                    "values"
                ],
                "delete": [
                    "self",
                    "where",
                    "start",
                    "stop"
                ]
            },
            "AppendableFrameTable": {
                "is_transposed": [
                    "self"
                ],
                "get_object": [
                    "cls",
                    "obj",
                    "transposed"
                ],
                "read": [
                    "self",
                    "where",
                    "columns",
                    "start",
                    "stop"
                ]
            },
            "AppendableSeriesTable": {
                "is_transposed": [
                    "self"
                ],
                "get_object": [
                    "cls",
                    "obj",
                    "transposed"
                ],
                "write": [
                    "self",
                    "obj",
                    "data_columns"
                ],
                "read": [
                    "self",
                    "where",
                    "columns",
                    "start",
                    "stop"
                ]
            },
            "AppendableMultiSeriesTable": {
                "write": [
                    "self",
                    "obj"
                ]
            },
            "GenericTable": {
                "pandas_type": [
                    "self"
                ],
                "storable": [
                    "self"
                ],
                "get_attrs": [
                    "self"
                ],
                "indexables": [
                    "self"
                ],
                "write": [
                    "self"
                ]
            },
            "AppendableMultiFrameTable": {
                "table_type_short": [
                    "self"
                ],
                "write": [
                    "self",
                    "obj",
                    "data_columns"
                ],
                "read": [
                    "self",
                    "where",
                    "columns",
                    "start",
                    "stop"
                ]
            },
            "Selection": {
                "__init__": [
                    "self",
                    "table",
                    "where",
                    "start",
                    "stop"
                ],
                "generate": [
                    "self",
                    "where"
                ],
                "select": [
                    "self"
                ],
                "select_coords": [
                    "self"
                ]
            }
        },
        "pandas.io.stata": {
            "_stata_elapsed_date_to_datetime_vec": [
                "dates",
                "fmt"
            ],
            "_datetime_to_stata_elapsed_vec": [
                "dates",
                "fmt"
            ],
            "_cast_to_stata_types": [
                "data"
            ],
            "read_stata": [
                "filepath_or_buffer",
                "convert_dates",
                "convert_categoricals",
                "index_col",
                "convert_missing",
                "preserve_dtypes",
                "columns",
                "order_categoricals",
                "chunksize",
                "iterator"
            ],
            "_open_file_binary_write": [
                "fname",
                "compression"
            ],
            "_set_endianness": [
                "endianness"
            ],
            "_pad_bytes": [
                "name",
                "length"
            ],
            "_convert_datetime_to_stata_type": [
                "fmt"
            ],
            "_maybe_convert_to_int_keys": [
                "convert_dates",
                "varlist"
            ],
            "_dtype_to_stata_type": [
                "dtype",
                "column"
            ],
            "_dtype_to_default_stata_fmt": [
                "dtype",
                "column",
                "dta_version",
                "force_strl"
            ],
            "_dtype_to_stata_type_117": [
                "dtype",
                "column",
                "force_strl"
            ],
            "_pad_bytes_new": [
                "name",
                "length"
            ],
            "PossiblePrecisionLoss": {},
            "ValueLabelTypeMismatch": {},
            "InvalidColumnName": {},
            "CategoricalConversionWarning": {},
            "StataValueLabel": {
                "__init__": [
                    "self",
                    "catarray",
                    "encoding"
                ],
                "generate_value_label": [
                    "self",
                    "byteorder"
                ]
            },
            "StataMissingValue": {
                "__init__": [
                    "self",
                    "value"
                ],
                "string": [
                    "self"
                ],
                "value": [
                    "self"
                ],
                "__str__": [
                    "self"
                ],
                "__repr__": [
                    "self"
                ],
                "__eq__": [
                    "self",
                    "other"
                ],
                "get_base_missing_value": [
                    "cls",
                    "dtype"
                ]
            },
            "StataParser": {
                "__init__": [
                    "self"
                ]
            },
            "StataReader": {
                "__init__": [
                    "self",
                    "path_or_buf",
                    "convert_dates",
                    "convert_categoricals",
                    "index_col",
                    "convert_missing",
                    "preserve_dtypes",
                    "columns",
                    "order_categoricals",
                    "chunksize"
                ],
                "__enter__": [
                    "self"
                ],
                "__exit__": [
                    "self",
                    "exc_type",
                    "exc_value",
                    "traceback"
                ],
                "close": [
                    "self"
                ],
                "_set_encoding": [
                    "self"
                ],
                "_read_header": [
                    "self"
                ],
                "_read_new_header": [
                    "self"
                ],
                "_get_dtypes": [
                    "self",
                    "seek_vartypes"
                ],
                "_get_varlist": [
                    "self"
                ],
                "_get_fmtlist": [
                    "self"
                ],
                "_get_lbllist": [
                    "self"
                ],
                "_get_variable_labels": [
                    "self"
                ],
                "_get_nobs": [
                    "self"
                ],
                "_get_data_label": [
                    "self"
                ],
                "_get_time_stamp": [
                    "self"
                ],
                "_get_seek_variable_labels": [
                    "self"
                ],
                "_read_old_header": [
                    "self",
                    "first_char"
                ],
                "_setup_dtype": [
                    "self"
                ],
                "_calcsize": [
                    "self",
                    "fmt"
                ],
                "_decode": [
                    "self",
                    "s"
                ],
                "_read_value_labels": [
                    "self"
                ],
                "_read_strls": [
                    "self"
                ],
                "__next__": [
                    "self"
                ],
                "get_chunk": [
                    "self",
                    "size"
                ],
                "read": [
                    "self",
                    "nrows",
                    "convert_dates",
                    "convert_categoricals",
                    "index_col",
                    "convert_missing",
                    "preserve_dtypes",
                    "columns",
                    "order_categoricals"
                ],
                "_do_convert_missing": [
                    "self",
                    "data",
                    "convert_missing"
                ],
                "_insert_strls": [
                    "self",
                    "data"
                ],
                "_do_select_columns": [
                    "self",
                    "data",
                    "columns"
                ],
                "_do_convert_categoricals": [
                    "self",
                    "data",
                    "value_label_dict",
                    "lbllist",
                    "order_categoricals"
                ],
                "data_label": [
                    "self"
                ],
                "variable_labels": [
                    "self"
                ],
                "value_labels": [
                    "self"
                ]
            },
            "StataWriter": {
                "__init__": [
                    "self",
                    "fname",
                    "data",
                    "convert_dates",
                    "write_index",
                    "byteorder",
                    "time_stamp",
                    "data_label",
                    "variable_labels",
                    "compression"
                ],
                "_write": [
                    "self",
                    "to_write"
                ],
                "_write_bytes": [
                    "self",
                    "value"
                ],
                "_prepare_categoricals": [
                    "self",
                    "data"
                ],
                "_replace_nans": [
                    "self",
                    "data"
                ],
                "_update_strl_names": [
                    "self"
                ],
                "_validate_variable_name": [
                    "self",
                    "name"
                ],
                "_check_column_names": [
                    "self",
                    "data"
                ],
                "_set_formats_and_types": [
                    "self",
                    "dtypes"
                ],
                "_prepare_pandas": [
                    "self",
                    "data"
                ],
                "_encode_strings": [
                    "self"
                ],
                "write_file": [
                    "self"
                ],
                "_close": [
                    "self"
                ],
                "_write_map": [
                    "self"
                ],
                "_write_file_close_tag": [
                    "self"
                ],
                "_write_characteristics": [
                    "self"
                ],
                "_write_strls": [
                    "self"
                ],
                "_write_expansion_fields": [
                    "self"
                ],
                "_write_value_labels": [
                    "self"
                ],
                "_write_header": [
                    "self",
                    "data_label",
                    "time_stamp"
                ],
                "_write_variable_types": [
                    "self"
                ],
                "_write_varnames": [
                    "self"
                ],
                "_write_sortlist": [
                    "self"
                ],
                "_write_formats": [
                    "self"
                ],
                "_write_value_label_names": [
                    "self"
                ],
                "_write_variable_labels": [
                    "self"
                ],
                "_convert_strls": [
                    "self",
                    "data"
                ],
                "_prepare_data": [
                    "self"
                ],
                "_write_data": [
                    "self",
                    "records"
                ],
                "_null_terminate_str": [
                    "s"
                ],
                "_null_terminate_bytes": [
                    "self",
                    "s"
                ]
            },
            "StataStrLWriter": {
                "__init__": [
                    "self",
                    "df",
                    "columns",
                    "version",
                    "byteorder"
                ],
                "_convert_key": [
                    "self",
                    "key"
                ],
                "generate_table": [
                    "self"
                ],
                "generate_blob": [
                    "self",
                    "gso_table"
                ]
            },
            "StataWriter117": {
                "__init__": [
                    "self",
                    "fname",
                    "data",
                    "convert_dates",
                    "write_index",
                    "byteorder",
                    "time_stamp",
                    "data_label",
                    "variable_labels",
                    "convert_strl",
                    "compression"
                ],
                "_tag": [
                    "val",
                    "tag"
                ],
                "_update_map": [
                    "self",
                    "tag"
                ],
                "_write_header": [
                    "self",
                    "data_label",
                    "time_stamp"
                ],
                "_write_map": [
                    "self"
                ],
                "_write_variable_types": [
                    "self"
                ],
                "_write_varnames": [
                    "self"
                ],
                "_write_sortlist": [
                    "self"
                ],
                "_write_formats": [
                    "self"
                ],
                "_write_value_label_names": [
                    "self"
                ],
                "_write_variable_labels": [
                    "self"
                ],
                "_write_characteristics": [
                    "self"
                ],
                "_write_data": [
                    "self",
                    "records"
                ],
                "_write_strls": [
                    "self"
                ],
                "_write_expansion_fields": [
                    "self"
                ],
                "_write_value_labels": [
                    "self"
                ],
                "_write_file_close_tag": [
                    "self"
                ],
                "_update_strl_names": [
                    "self"
                ],
                "_convert_strls": [
                    "self",
                    "data"
                ],
                "_set_formats_and_types": [
                    "self",
                    "dtypes"
                ]
            },
            "StataWriterUTF8": {
                "__init__": [
                    "self",
                    "fname",
                    "data",
                    "convert_dates",
                    "write_index",
                    "byteorder",
                    "time_stamp",
                    "data_label",
                    "variable_labels",
                    "convert_strl",
                    "version",
                    "compression"
                ],
                "_validate_variable_name": [
                    "self",
                    "name"
                ]
            }
        },
        "pandas.io.orc": {
            "read_orc": [
                "path",
                "columns"
            ]
        },
        "pandas.io.sql": {
            "_is_sqlalchemy_connectable": [
                "con"
            ],
            "_convert_params": [
                "sql",
                "params"
            ],
            "_process_parse_dates_argument": [
                "parse_dates"
            ],
            "_handle_date_column": [
                "col",
                "utc",
                "format"
            ],
            "_parse_date_columns": [
                "data_frame",
                "parse_dates"
            ],
            "_wrap_result": [
                "data",
                "columns",
                "index_col",
                "coerce_float",
                "parse_dates"
            ],
            "execute": [
                "sql",
                "con",
                "cur",
                "params"
            ],
            "read_sql_table": [
                "table_name",
                "con",
                "schema",
                "index_col",
                "coerce_float",
                "parse_dates",
                "columns",
                "chunksize"
            ],
            "read_sql_query": [
                "sql",
                "con",
                "index_col",
                "coerce_float",
                "params",
                "parse_dates",
                "chunksize"
            ],
            "read_sql": [
                "sql",
                "con",
                "index_col",
                "coerce_float",
                "params",
                "parse_dates",
                "columns",
                "chunksize"
            ],
            "to_sql": [
                "frame",
                "name",
                "con",
                "schema",
                "if_exists",
                "index",
                "index_label",
                "chunksize",
                "dtype",
                "method"
            ],
            "has_table": [
                "table_name",
                "con",
                "schema"
            ],
            "_engine_builder": [
                "con"
            ],
            "pandasSQL_builder": [
                "con",
                "schema",
                "meta",
                "is_cursor"
            ],
            "_get_unicode_name": [
                "name"
            ],
            "_get_valid_sqlite_name": [
                "name"
            ],
            "get_schema": [
                "frame",
                "name",
                "keys",
                "con",
                "dtype"
            ],
            "SQLAlchemyRequired": {},
            "DatabaseError": {},
            "SQLTable": {
                "__init__": [
                    "self",
                    "name",
                    "pandas_sql_engine",
                    "frame",
                    "index",
                    "if_exists",
                    "prefix",
                    "index_label",
                    "schema",
                    "keys",
                    "dtype"
                ],
                "exists": [
                    "self"
                ],
                "sql_schema": [
                    "self"
                ],
                "_execute_create": [
                    "self"
                ],
                "create": [
                    "self"
                ],
                "_execute_insert": [
                    "self",
                    "conn",
                    "keys",
                    "data_iter"
                ],
                "_execute_insert_multi": [
                    "self",
                    "conn",
                    "keys",
                    "data_iter"
                ],
                "insert_data": [
                    "self"
                ],
                "insert": [
                    "self",
                    "chunksize",
                    "method"
                ],
                "_query_iterator": [
                    "self",
                    "result",
                    "chunksize",
                    "columns",
                    "coerce_float",
                    "parse_dates"
                ],
                "read": [
                    "self",
                    "coerce_float",
                    "parse_dates",
                    "columns",
                    "chunksize"
                ],
                "_index_name": [
                    "self",
                    "index",
                    "index_label"
                ],
                "_get_column_names_and_types": [
                    "self",
                    "dtype_mapper"
                ],
                "_create_table_setup": [
                    "self"
                ],
                "_harmonize_columns": [
                    "self",
                    "parse_dates"
                ],
                "_sqlalchemy_type": [
                    "self",
                    "col"
                ],
                "_get_dtype": [
                    "self",
                    "sqltype"
                ]
            },
            "PandasSQL": {
                "read_sql": [
                    "self"
                ],
                "to_sql": [
                    "self"
                ]
            },
            "SQLDatabase": {
                "__init__": [
                    "self",
                    "engine",
                    "schema",
                    "meta"
                ],
                "run_transaction": [
                    "self"
                ],
                "execute": [
                    "self"
                ],
                "read_table": [
                    "self",
                    "table_name",
                    "index_col",
                    "coerce_float",
                    "parse_dates",
                    "columns",
                    "schema",
                    "chunksize"
                ],
                "_query_iterator": [
                    "result",
                    "chunksize",
                    "columns",
                    "index_col",
                    "coerce_float",
                    "parse_dates"
                ],
                "read_query": [
                    "self",
                    "sql",
                    "index_col",
                    "coerce_float",
                    "parse_dates",
                    "params",
                    "chunksize"
                ],
                "to_sql": [
                    "self",
                    "frame",
                    "name",
                    "if_exists",
                    "index",
                    "index_label",
                    "schema",
                    "chunksize",
                    "dtype",
                    "method"
                ],
                "tables": [
                    "self"
                ],
                "has_table": [
                    "self",
                    "name",
                    "schema"
                ],
                "get_table": [
                    "self",
                    "table_name",
                    "schema"
                ],
                "drop_table": [
                    "self",
                    "table_name",
                    "schema"
                ],
                "_create_sql_schema": [
                    "self",
                    "frame",
                    "table_name",
                    "keys",
                    "dtype"
                ]
            },
            "SQLiteTable": {
                "__init__": [
                    "self"
                ],
                "sql_schema": [
                    "self"
                ],
                "_execute_create": [
                    "self"
                ],
                "insert_statement": [
                    "self"
                ],
                "_execute_insert": [
                    "self",
                    "conn",
                    "keys",
                    "data_iter"
                ],
                "_execute_insert_multi": [
                    "self",
                    "conn",
                    "keys",
                    "data_iter"
                ],
                "_create_table_setup": [
                    "self"
                ],
                "_sql_type_name": [
                    "self",
                    "col"
                ]
            },
            "SQLiteDatabase": {
                "__init__": [
                    "self",
                    "con",
                    "is_cursor"
                ],
                "run_transaction": [
                    "self"
                ],
                "execute": [
                    "self"
                ],
                "_query_iterator": [
                    "cursor",
                    "chunksize",
                    "columns",
                    "index_col",
                    "coerce_float",
                    "parse_dates"
                ],
                "read_query": [
                    "self",
                    "sql",
                    "index_col",
                    "coerce_float",
                    "params",
                    "parse_dates",
                    "chunksize"
                ],
                "_fetchall_as_list": [
                    "self",
                    "cur"
                ],
                "to_sql": [
                    "self",
                    "frame",
                    "name",
                    "if_exists",
                    "index",
                    "index_label",
                    "schema",
                    "chunksize",
                    "dtype",
                    "method"
                ],
                "has_table": [
                    "self",
                    "name",
                    "schema"
                ],
                "get_table": [
                    "self",
                    "table_name",
                    "schema"
                ],
                "drop_table": [
                    "self",
                    "name",
                    "schema"
                ],
                "_create_sql_schema": [
                    "self",
                    "frame",
                    "table_name",
                    "keys",
                    "dtype"
                ]
            }
        },
        "pandas.io.clipboards": {
            "read_clipboard": [
                "sep"
            ],
            "to_clipboard": [
                "obj",
                "excel",
                "sep"
            ]
        },
        "pandas.io.pickle": {
            "to_pickle": [
                "obj",
                "filepath_or_buffer",
                "compression",
                "protocol"
            ],
            "read_pickle": [
                "filepath_or_buffer",
                "compression"
            ]
        },
        "pandas.io.date_converters": {
            "parse_date_time": [
                "date_col",
                "time_col"
            ],
            "parse_date_fields": [
                "year_col",
                "month_col",
                "day_col"
            ],
            "parse_all_fields": [
                "year_col",
                "month_col",
                "day_col",
                "hour_col",
                "minute_col",
                "second_col"
            ],
            "generic_parser": [
                "parse_func"
            ],
            "_maybe_cast": [
                "arr"
            ],
            "_check_columns": [
                "cols"
            ]
        },
        "pandas.io.parsers": {
            "_validate_integer": [
                "name",
                "val",
                "min_val"
            ],
            "_validate_names": [
                "names"
            ],
            "_read": [
                "filepath_or_buffer",
                "kwds"
            ],
            "read_csv": [
                "filepath_or_buffer",
                "sep",
                "delimiter",
                "header",
                "names",
                "index_col",
                "usecols",
                "squeeze",
                "prefix",
                "mangle_dupe_cols",
                "dtype",
                "engine",
                "converters",
                "true_values",
                "false_values",
                "skipinitialspace",
                "skiprows",
                "skipfooter",
                "nrows",
                "na_values",
                "keep_default_na",
                "na_filter",
                "verbose",
                "skip_blank_lines",
                "parse_dates",
                "infer_datetime_format",
                "keep_date_col",
                "date_parser",
                "dayfirst",
                "cache_dates",
                "iterator",
                "chunksize",
                "compression",
                "thousands",
                "decimal",
                "lineterminator",
                "quotechar",
                "quoting",
                "doublequote",
                "escapechar",
                "comment",
                "encoding",
                "dialect",
                "error_bad_lines",
                "warn_bad_lines",
                "delim_whitespace",
                "low_memory",
                "memory_map",
                "float_precision"
            ],
            "read_table": [
                "filepath_or_buffer",
                "sep",
                "delimiter",
                "header",
                "names",
                "index_col",
                "usecols",
                "squeeze",
                "prefix",
                "mangle_dupe_cols",
                "dtype",
                "engine",
                "converters",
                "true_values",
                "false_values",
                "skipinitialspace",
                "skiprows",
                "skipfooter",
                "nrows",
                "na_values",
                "keep_default_na",
                "na_filter",
                "verbose",
                "skip_blank_lines",
                "parse_dates",
                "infer_datetime_format",
                "keep_date_col",
                "date_parser",
                "dayfirst",
                "cache_dates",
                "iterator",
                "chunksize",
                "compression",
                "thousands",
                "decimal",
                "lineterminator",
                "quotechar",
                "quoting",
                "doublequote",
                "escapechar",
                "comment",
                "encoding",
                "dialect",
                "error_bad_lines",
                "warn_bad_lines",
                "delim_whitespace",
                "low_memory",
                "memory_map",
                "float_precision"
            ],
            "read_fwf": [
                "filepath_or_buffer",
                "colspecs",
                "widths",
                "infer_nrows"
            ],
            "_is_index_col": [
                "col"
            ],
            "_is_potential_multi_index": [
                "columns",
                "index_col"
            ],
            "_evaluate_usecols": [
                "usecols",
                "names"
            ],
            "_validate_usecols_names": [
                "usecols",
                "names"
            ],
            "_validate_skipfooter_arg": [
                "skipfooter"
            ],
            "_validate_usecols_arg": [
                "usecols"
            ],
            "_validate_parse_dates_arg": [
                "parse_dates"
            ],
            "TextParser": [],
            "count_empty_vals": [
                "vals"
            ],
            "_make_date_converter": [
                "date_parser",
                "dayfirst",
                "infer_datetime_format",
                "cache_dates"
            ],
            "_process_date_conversion": [
                "data_dict",
                "converter",
                "parse_spec",
                "index_col",
                "index_names",
                "columns",
                "keep_date_col"
            ],
            "_try_convert_dates": [
                "parser",
                "colspec",
                "data_dict",
                "columns"
            ],
            "_clean_na_values": [
                "na_values",
                "keep_default_na"
            ],
            "_clean_index_names": [
                "columns",
                "index_col",
                "unnamed_cols"
            ],
            "_get_empty_meta": [
                "columns",
                "index_col",
                "index_names",
                "dtype"
            ],
            "_floatify_na_values": [
                "na_values"
            ],
            "_stringify_na_values": [
                "na_values"
            ],
            "_get_na_values": [
                "col",
                "na_values",
                "na_fvalues",
                "keep_default_na"
            ],
            "_get_col_names": [
                "colspec",
                "columns"
            ],
            "TextFileReader": {
                "__init__": [
                    "self",
                    "f",
                    "engine"
                ],
                "close": [
                    "self"
                ],
                "_get_options_with_defaults": [
                    "self",
                    "engine"
                ],
                "_check_file_or_buffer": [
                    "self",
                    "f",
                    "engine"
                ],
                "_clean_options": [
                    "self",
                    "options",
                    "engine"
                ],
                "__next__": [
                    "self"
                ],
                "_make_engine": [
                    "self",
                    "engine"
                ],
                "_failover_to_python": [
                    "self"
                ],
                "read": [
                    "self",
                    "nrows"
                ],
                "_create_index": [
                    "self",
                    "ret"
                ],
                "get_chunk": [
                    "self",
                    "size"
                ]
            },
            "ParserBase": {
                "__init__": [
                    "self",
                    "kwds"
                ],
                "_validate_parse_dates_presence": [
                    "self",
                    "columns"
                ],
                "close": [
                    "self"
                ],
                "_has_complex_date_col": [
                    "self"
                ],
                "_should_parse_dates": [
                    "self",
                    "i"
                ],
                "_extract_multi_indexer_columns": [
                    "self",
                    "header",
                    "index_names",
                    "col_names",
                    "passed_names"
                ],
                "_maybe_dedup_names": [
                    "self",
                    "names"
                ],
                "_maybe_make_multi_index_columns": [
                    "self",
                    "columns",
                    "col_names"
                ],
                "_make_index": [
                    "self",
                    "data",
                    "alldata",
                    "columns",
                    "indexnamerow"
                ],
                "_get_simple_index": [
                    "self",
                    "data",
                    "columns"
                ],
                "_get_complex_date_index": [
                    "self",
                    "data",
                    "col_names"
                ],
                "_agg_index": [
                    "self",
                    "index",
                    "try_parse_dates"
                ],
                "_convert_to_ndarrays": [
                    "self",
                    "dct",
                    "na_values",
                    "na_fvalues",
                    "verbose",
                    "converters",
                    "dtypes"
                ],
                "_infer_types": [
                    "self",
                    "values",
                    "na_values",
                    "try_num_bool"
                ],
                "_cast_types": [
                    "self",
                    "values",
                    "cast_type",
                    "column"
                ],
                "_do_date_conversions": [
                    "self",
                    "names",
                    "data"
                ]
            },
            "CParserWrapper": {
                "__init__": [
                    "self",
                    "src"
                ],
                "close": [
                    "self"
                ],
                "_set_noconvert_columns": [
                    "self"
                ],
                "set_error_bad_lines": [
                    "self",
                    "status"
                ],
                "read": [
                    "self",
                    "nrows"
                ],
                "_filter_usecols": [
                    "self",
                    "names"
                ],
                "_get_index_names": [
                    "self"
                ],
                "_maybe_parse_dates": [
                    "self",
                    "values",
                    "index",
                    "try_parse_dates"
                ]
            },
            "PythonParser": {
                "__init__": [
                    "self",
                    "f"
                ],
                "_set_no_thousands_columns": [
                    "self"
                ],
                "_make_reader": [
                    "self",
                    "f"
                ],
                "read": [
                    "self",
                    "rows"
                ],
                "_exclude_implicit_index": [
                    "self",
                    "alldata"
                ],
                "get_chunk": [
                    "self",
                    "size"
                ],
                "_convert_data": [
                    "self",
                    "data"
                ],
                "_infer_columns": [
                    "self"
                ],
                "_handle_usecols": [
                    "self",
                    "columns",
                    "usecols_key"
                ],
                "_buffered_line": [
                    "self"
                ],
                "_check_for_bom": [
                    "self",
                    "first_row"
                ],
                "_is_line_empty": [
                    "self",
                    "line"
                ],
                "_next_line": [
                    "self"
                ],
                "_alert_malformed": [
                    "self",
                    "msg",
                    "row_num"
                ],
                "_next_iter_line": [
                    "self",
                    "row_num"
                ],
                "_check_comments": [
                    "self",
                    "lines"
                ],
                "_remove_empty_lines": [
                    "self",
                    "lines"
                ],
                "_check_thousands": [
                    "self",
                    "lines"
                ],
                "_search_replace_num_columns": [
                    "self",
                    "lines",
                    "search",
                    "replace"
                ],
                "_check_decimal": [
                    "self",
                    "lines"
                ],
                "_clear_buffer": [
                    "self"
                ],
                "_get_index_name": [
                    "self",
                    "columns"
                ],
                "_rows_to_cols": [
                    "self",
                    "content"
                ],
                "_get_lines": [
                    "self",
                    "rows"
                ]
            },
            "FixedWidthReader": {
                "__init__": [
                    "self",
                    "f",
                    "colspecs",
                    "delimiter",
                    "comment",
                    "skiprows",
                    "infer_nrows"
                ],
                "get_rows": [
                    "self",
                    "infer_nrows",
                    "skiprows"
                ],
                "detect_colspecs": [
                    "self",
                    "infer_nrows",
                    "skiprows"
                ],
                "__next__": [
                    "self"
                ]
            },
            "FixedWidthFieldParser": {
                "__init__": [
                    "self",
                    "f"
                ],
                "_make_reader": [
                    "self",
                    "f"
                ]
            }
        },
        "pandas.io.parquet": {
            "get_engine": [
                "engine"
            ],
            "to_parquet": [
                "df",
                "path",
                "engine",
                "compression",
                "index",
                "partition_cols"
            ],
            "read_parquet": [
                "path",
                "engine",
                "columns"
            ],
            "BaseImpl": {
                "validate_dataframe": [
                    "df"
                ],
                "write": [
                    "self",
                    "df",
                    "path",
                    "compression"
                ],
                "read": [
                    "self",
                    "path",
                    "columns"
                ]
            },
            "PyArrowImpl": {
                "__init__": [
                    "self"
                ],
                "write": [
                    "self",
                    "df",
                    "path",
                    "compression",
                    "index",
                    "partition_cols"
                ],
                "read": [
                    "self",
                    "path",
                    "columns"
                ]
            },
            "FastParquetImpl": {
                "__init__": [
                    "self"
                ],
                "write": [
                    "self",
                    "df",
                    "path",
                    "compression",
                    "index",
                    "partition_cols"
                ],
                "read": [
                    "self",
                    "path",
                    "columns"
                ]
            }
        },
        "pandas.io.api": {},
        "pandas.io.html": {
            "_importers": [],
            "_remove_whitespace": [
                "s",
                "regex"
            ],
            "_get_skiprows": [
                "skiprows"
            ],
            "_read": [
                "obj"
            ],
            "_build_xpath_expr": [
                "attrs"
            ],
            "_expand_elements": [
                "body"
            ],
            "_data_to_frame": [],
            "_parser_dispatch": [
                "flavor"
            ],
            "_print_as_set": [
                "s"
            ],
            "_validate_flavor": [
                "flavor"
            ],
            "_parse": [
                "flavor",
                "io",
                "match",
                "attrs",
                "encoding",
                "displayed_only"
            ],
            "read_html": [
                "io",
                "match",
                "flavor",
                "header",
                "index_col",
                "skiprows",
                "attrs",
                "parse_dates",
                "thousands",
                "encoding",
                "decimal",
                "converters",
                "na_values",
                "keep_default_na",
                "displayed_only"
            ],
            "_HtmlFrameParser": {
                "__init__": [
                    "self",
                    "io",
                    "match",
                    "attrs",
                    "encoding",
                    "displayed_only"
                ],
                "parse_tables": [
                    "self"
                ],
                "_attr_getter": [
                    "self",
                    "obj",
                    "attr"
                ],
                "_text_getter": [
                    "self",
                    "obj"
                ],
                "_parse_td": [
                    "self",
                    "obj"
                ],
                "_parse_thead_tr": [
                    "self",
                    "table"
                ],
                "_parse_tbody_tr": [
                    "self",
                    "table"
                ],
                "_parse_tfoot_tr": [
                    "self",
                    "table"
                ],
                "_parse_tables": [
                    "self",
                    "doc",
                    "match",
                    "attrs"
                ],
                "_equals_tag": [
                    "self",
                    "obj",
                    "tag"
                ],
                "_build_doc": [
                    "self"
                ],
                "_parse_thead_tbody_tfoot": [
                    "self",
                    "table_html"
                ],
                "_expand_colspan_rowspan": [
                    "self",
                    "rows"
                ],
                "_handle_hidden_tables": [
                    "self",
                    "tbl_list",
                    "attr_name"
                ]
            },
            "_BeautifulSoupHtml5LibFrameParser": {
                "__init__": [
                    "self"
                ],
                "_parse_tables": [
                    "self",
                    "doc",
                    "match",
                    "attrs"
                ],
                "_text_getter": [
                    "self",
                    "obj"
                ],
                "_equals_tag": [
                    "self",
                    "obj",
                    "tag"
                ],
                "_parse_td": [
                    "self",
                    "row"
                ],
                "_parse_thead_tr": [
                    "self",
                    "table"
                ],
                "_parse_tbody_tr": [
                    "self",
                    "table"
                ],
                "_parse_tfoot_tr": [
                    "self",
                    "table"
                ],
                "_setup_build_doc": [
                    "self"
                ],
                "_build_doc": [
                    "self"
                ]
            },
            "_LxmlFrameParser": {
                "__init__": [
                    "self"
                ],
                "_text_getter": [
                    "self",
                    "obj"
                ],
                "_parse_td": [
                    "self",
                    "row"
                ],
                "_parse_tables": [
                    "self",
                    "doc",
                    "match",
                    "kwargs"
                ],
                "_equals_tag": [
                    "self",
                    "obj",
                    "tag"
                ],
                "_build_doc": [
                    "self"
                ],
                "_parse_thead_tr": [
                    "self",
                    "table"
                ],
                "_parse_tbody_tr": [
                    "self",
                    "table"
                ],
                "_parse_tfoot_tr": [
                    "self",
                    "table"
                ]
            }
        },
        "pandas.io.gbq": {
            "_try_import": [],
            "read_gbq": [
                "query",
                "project_id",
                "index_col",
                "col_order",
                "reauth",
                "auth_local_webserver",
                "dialect",
                "location",
                "configuration",
                "credentials",
                "use_bqstorage_api",
                "max_results",
                "private_key",
                "verbose",
                "progress_bar_type"
            ],
            "to_gbq": [
                "dataframe",
                "destination_table",
                "project_id",
                "chunksize",
                "reauth",
                "if_exists",
                "auth_local_webserver",
                "table_schema",
                "location",
                "progress_bar",
                "credentials",
                "verbose",
                "private_key"
            ]
        },
        "pandas.io": {},
        "pandas.io.clipboard": {
            "_executable_exists": [
                "name"
            ],
            "_stringifyText": [
                "text"
            ],
            "init_osx_pbcopy_clipboard": [],
            "init_osx_pyobjc_clipboard": [],
            "init_qt_clipboard": [],
            "init_xclip_clipboard": [],
            "init_xsel_clipboard": [],
            "init_klipper_clipboard": [],
            "init_dev_clipboard_clipboard": [],
            "init_no_clipboard": [],
            "init_windows_clipboard": [],
            "init_wsl_clipboard": [],
            "determine_clipboard": [],
            "set_clipboard": [
                "clipboard"
            ],
            "lazy_load_stub_copy": [
                "text"
            ],
            "lazy_load_stub_paste": [],
            "is_available": [],
            "PyperclipException": {},
            "PyperclipWindowsException": {
                "__init__": [
                    "self",
                    "message"
                ]
            },
            "CheckedCall": {
                "__init__": [
                    "self",
                    "f"
                ],
                "__call__": [
                    "self"
                ],
                "__setattr__": [
                    "self",
                    "key",
                    "value"
                ]
            }
        },
        "pandas.io.excel._openpyxl": {
            "_OpenpyxlWriter": {
                "__init__": [
                    "self",
                    "path",
                    "engine",
                    "mode"
                ],
                "save": [
                    "self"
                ],
                "_convert_to_style": [
                    "cls",
                    "style_dict"
                ],
                "_convert_to_style_kwargs": [
                    "cls",
                    "style_dict"
                ],
                "_convert_to_color": [
                    "cls",
                    "color_spec"
                ],
                "_convert_to_font": [
                    "cls",
                    "font_dict"
                ],
                "_convert_to_stop": [
                    "cls",
                    "stop_seq"
                ],
                "_convert_to_fill": [
                    "cls",
                    "fill_dict"
                ],
                "_convert_to_side": [
                    "cls",
                    "side_spec"
                ],
                "_convert_to_border": [
                    "cls",
                    "border_dict"
                ],
                "_convert_to_alignment": [
                    "cls",
                    "alignment_dict"
                ],
                "_convert_to_number_format": [
                    "cls",
                    "number_format_dict"
                ],
                "_convert_to_protection": [
                    "cls",
                    "protection_dict"
                ],
                "write_cells": [
                    "self",
                    "cells",
                    "sheet_name",
                    "startrow",
                    "startcol",
                    "freeze_panes"
                ]
            },
            "_OpenpyxlReader": {
                "__init__": [
                    "self",
                    "filepath_or_buffer"
                ],
                "_workbook_class": [
                    "self"
                ],
                "load_workbook": [
                    "self",
                    "filepath_or_buffer"
                ],
                "close": [
                    "self"
                ],
                "sheet_names": [
                    "self"
                ],
                "get_sheet_by_name": [
                    "self",
                    "name"
                ],
                "get_sheet_by_index": [
                    "self",
                    "index"
                ],
                "_convert_cell": [
                    "self",
                    "cell",
                    "convert_float"
                ],
                "get_sheet_data": [
                    "self",
                    "sheet",
                    "convert_float"
                ]
            }
        },
        "pandas.io.excel._odswriter": {
            "_ODSWriter": {
                "__init__": [
                    "self",
                    "path",
                    "engine",
                    "mode"
                ],
                "save": [
                    "self"
                ],
                "write_cells": [
                    "self",
                    "cells",
                    "sheet_name",
                    "startrow",
                    "startcol",
                    "freeze_panes"
                ],
                "_make_table_cell_attributes": [
                    "self",
                    "cell"
                ],
                "_make_table_cell": [
                    "self",
                    "cell"
                ],
                "_process_style": [
                    "self",
                    "style"
                ],
                "_create_freeze_panes": [
                    "self",
                    "sheet_name",
                    "freeze_panes"
                ]
            }
        },
        "pandas.io.excel._odfreader": {
            "_ODFReader": {
                "__init__": [
                    "self",
                    "filepath_or_buffer"
                ],
                "_workbook_class": [
                    "self"
                ],
                "load_workbook": [
                    "self",
                    "filepath_or_buffer"
                ],
                "empty_value": [
                    "self"
                ],
                "sheet_names": [
                    "self"
                ],
                "get_sheet_by_index": [
                    "self",
                    "index"
                ],
                "get_sheet_by_name": [
                    "self",
                    "name"
                ],
                "get_sheet_data": [
                    "self",
                    "sheet",
                    "convert_float"
                ],
                "_get_row_repeat": [
                    "self",
                    "row"
                ],
                "_get_column_repeat": [
                    "self",
                    "cell"
                ],
                "_is_empty_row": [
                    "self",
                    "row"
                ],
                "_get_cell_value": [
                    "self",
                    "cell",
                    "convert_float"
                ],
                "_get_cell_string_value": [
                    "self",
                    "cell"
                ]
            }
        },
        "pandas.io.excel._pyxlsb": {
            "_PyxlsbReader": {
                "__init__": [
                    "self",
                    "filepath_or_buffer"
                ],
                "_workbook_class": [
                    "self"
                ],
                "load_workbook": [
                    "self",
                    "filepath_or_buffer"
                ],
                "sheet_names": [
                    "self"
                ],
                "get_sheet_by_name": [
                    "self",
                    "name"
                ],
                "get_sheet_by_index": [
                    "self",
                    "index"
                ],
                "_convert_cell": [
                    "self",
                    "cell",
                    "convert_float"
                ],
                "get_sheet_data": [
                    "self",
                    "sheet",
                    "convert_float"
                ]
            }
        },
        "pandas.io.excel._xlrd": {
            "_XlrdReader": {
                "__init__": [
                    "self",
                    "filepath_or_buffer"
                ],
                "_workbook_class": [
                    "self"
                ],
                "load_workbook": [
                    "self",
                    "filepath_or_buffer"
                ],
                "sheet_names": [
                    "self"
                ],
                "get_sheet_by_name": [
                    "self",
                    "name"
                ],
                "get_sheet_by_index": [
                    "self",
                    "index"
                ],
                "get_sheet_data": [
                    "self",
                    "sheet",
                    "convert_float"
                ]
            }
        },
        "pandas.io.excel._util": {
            "register_writer": [
                "klass"
            ],
            "_get_default_writer": [
                "ext"
            ],
            "get_writer": [
                "engine_name"
            ],
            "_excel2num": [
                "x"
            ],
            "_range2cols": [
                "areas"
            ],
            "_maybe_convert_usecols": [
                "usecols"
            ],
            "_validate_freeze_panes": [
                "freeze_panes"
            ],
            "_trim_excel_header": [
                "row"
            ],
            "_fill_mi_header": [
                "row",
                "control_row"
            ],
            "_pop_header_name": [
                "row",
                "index_col"
            ]
        },
        "pandas.io.excel._xlwt": {
            "_XlwtWriter": {
                "__init__": [
                    "self",
                    "path",
                    "engine",
                    "encoding",
                    "mode"
                ],
                "save": [
                    "self"
                ],
                "write_cells": [
                    "self",
                    "cells",
                    "sheet_name",
                    "startrow",
                    "startcol",
                    "freeze_panes"
                ],
                "_style_to_xlwt": [
                    "cls",
                    "item",
                    "firstlevel",
                    "field_sep",
                    "line_sep"
                ],
                "_convert_to_style": [
                    "cls",
                    "style_dict",
                    "num_format_str"
                ]
            }
        },
        "pandas.io.excel._xlsxwriter": {
            "_XlsxStyler": {
                "convert": [
                    "cls",
                    "style_dict",
                    "num_format_str"
                ]
            },
            "_XlsxWriter": {
                "__init__": [
                    "self",
                    "path",
                    "engine",
                    "date_format",
                    "datetime_format",
                    "mode"
                ],
                "save": [
                    "self"
                ],
                "write_cells": [
                    "self",
                    "cells",
                    "sheet_name",
                    "startrow",
                    "startcol",
                    "freeze_panes"
                ]
            }
        },
        "pandas.io.excel._base": {
            "read_excel": [
                "io",
                "sheet_name",
                "header",
                "names",
                "index_col",
                "usecols",
                "squeeze",
                "dtype",
                "engine",
                "converters",
                "true_values",
                "false_values",
                "skiprows",
                "nrows",
                "na_values",
                "keep_default_na",
                "na_filter",
                "verbose",
                "parse_dates",
                "date_parser",
                "thousands",
                "comment",
                "skipfooter",
                "convert_float",
                "mangle_dupe_cols"
            ],
            "_is_ods_stream": [
                "stream"
            ],
            "_BaseExcelReader": {
                "__init__": [
                    "self",
                    "filepath_or_buffer"
                ],
                "_workbook_class": [
                    "self"
                ],
                "load_workbook": [
                    "self",
                    "filepath_or_buffer"
                ],
                "close": [
                    "self"
                ],
                "sheet_names": [
                    "self"
                ],
                "get_sheet_by_name": [
                    "self",
                    "name"
                ],
                "get_sheet_by_index": [
                    "self",
                    "index"
                ],
                "get_sheet_data": [
                    "self",
                    "sheet",
                    "convert_float"
                ],
                "parse": [
                    "self",
                    "sheet_name",
                    "header",
                    "names",
                    "index_col",
                    "usecols",
                    "squeeze",
                    "dtype",
                    "true_values",
                    "false_values",
                    "skiprows",
                    "nrows",
                    "na_values",
                    "verbose",
                    "parse_dates",
                    "date_parser",
                    "thousands",
                    "comment",
                    "skipfooter",
                    "convert_float",
                    "mangle_dupe_cols"
                ]
            },
            "ExcelWriter": {
                "__new__": [
                    "cls",
                    "path",
                    "engine"
                ],
                "supported_extensions": [
                    "self"
                ],
                "engine": [
                    "self"
                ],
                "write_cells": [
                    "self",
                    "cells",
                    "sheet_name",
                    "startrow",
                    "startcol",
                    "freeze_panes"
                ],
                "save": [
                    "self"
                ],
                "__init__": [
                    "self",
                    "path",
                    "engine",
                    "date_format",
                    "datetime_format",
                    "mode"
                ],
                "__fspath__": [
                    "self"
                ],
                "_get_sheet_name": [
                    "self",
                    "sheet_name"
                ],
                "_value_with_fmt": [
                    "self",
                    "val"
                ],
                "check_extension": [
                    "cls",
                    "ext"
                ],
                "__enter__": [
                    "self"
                ],
                "__exit__": [
                    "self",
                    "exc_type",
                    "exc_value",
                    "traceback"
                ],
                "close": [
                    "self"
                ]
            },
            "ExcelFile": {
                "__init__": [
                    "self",
                    "path_or_buffer",
                    "engine"
                ],
                "__fspath__": [
                    "self"
                ],
                "parse": [
                    "self",
                    "sheet_name",
                    "header",
                    "names",
                    "index_col",
                    "usecols",
                    "squeeze",
                    "converters",
                    "true_values",
                    "false_values",
                    "skiprows",
                    "nrows",
                    "na_values",
                    "parse_dates",
                    "date_parser",
                    "thousands",
                    "comment",
                    "skipfooter",
                    "convert_float",
                    "mangle_dupe_cols"
                ],
                "book": [
                    "self"
                ],
                "sheet_names": [
                    "self"
                ],
                "close": [
                    "self"
                ],
                "__enter__": [
                    "self"
                ],
                "__exit__": [
                    "self",
                    "exc_type",
                    "exc_value",
                    "traceback"
                ],
                "__del__": [
                    "self"
                ]
            }
        },
        "pandas.io.excel": {},
        "pandas.io.formats.format": {
            "_get_adjustment": [],
            "format_array": [
                "values",
                "formatter",
                "float_format",
                "na_rep",
                "digits",
                "space",
                "justify",
                "decimal",
                "leading_space",
                "quoting"
            ],
            "format_percentiles": [
                "percentiles"
            ],
            "_is_dates_only": [
                "values"
            ],
            "_format_datetime64": [
                "x",
                "tz",
                "nat_rep"
            ],
            "_format_datetime64_dateonly": [
                "x",
                "nat_rep",
                "date_format"
            ],
            "_get_format_datetime64": [
                "is_dates_only",
                "nat_rep",
                "date_format"
            ],
            "_get_format_datetime64_from_values": [
                "values",
                "date_format"
            ],
            "_get_format_timedelta64": [
                "values",
                "nat_rep",
                "box"
            ],
            "_make_fixed_width": [
                "strings",
                "justify",
                "minimum",
                "adj"
            ],
            "_trim_zeros_complex": [
                "str_complexes",
                "decimal",
                "na_rep"
            ],
            "_trim_zeros_float": [
                "str_floats",
                "decimal",
                "na_rep"
            ],
            "_has_names": [
                "index"
            ],
            "set_eng_float_format": [
                "accuracy",
                "use_eng_prefix"
            ],
            "_binify": [
                "cols",
                "line_width"
            ],
            "get_level_lengths": [
                "levels",
                "sentinel"
            ],
            "buffer_put_lines": [
                "buf",
                "lines"
            ],
            "CategoricalFormatter": {
                "__init__": [
                    "self",
                    "categorical",
                    "buf",
                    "length",
                    "na_rep",
                    "footer"
                ],
                "_get_footer": [
                    "self"
                ],
                "_get_formatted_values": [
                    "self"
                ],
                "to_string": [
                    "self"
                ]
            },
            "SeriesFormatter": {
                "__init__": [
                    "self",
                    "series",
                    "buf",
                    "length",
                    "header",
                    "index",
                    "na_rep",
                    "name",
                    "float_format",
                    "dtype",
                    "max_rows",
                    "min_rows"
                ],
                "_chk_truncate": [
                    "self"
                ],
                "_get_footer": [
                    "self"
                ],
                "_get_formatted_index": [
                    "self"
                ],
                "_get_formatted_values": [
                    "self"
                ],
                "to_string": [
                    "self"
                ]
            },
            "TextAdjustment": {
                "__init__": [
                    "self"
                ],
                "len": [
                    "self",
                    "text"
                ],
                "justify": [
                    "self",
                    "texts",
                    "max_len",
                    "mode"
                ],
                "adjoin": [
                    "self",
                    "space"
                ]
            },
            "EastAsianTextAdjustment": {
                "__init__": [
                    "self"
                ],
                "len": [
                    "self",
                    "text"
                ],
                "justify": [
                    "self",
                    "texts",
                    "max_len",
                    "mode"
                ]
            },
            "TableFormatter": {
                "should_show_dimensions": [
                    "self"
                ],
                "_get_formatter": [
                    "self",
                    "i"
                ],
                "get_buffer": [
                    "self",
                    "buf",
                    "encoding"
                ],
                "write_result": [
                    "self",
                    "buf"
                ],
                "get_result": [
                    "self",
                    "buf",
                    "encoding"
                ]
            },
            "DataFrameFormatter": {
                "__init__": [
                    "self",
                    "frame",
                    "columns",
                    "col_space",
                    "header",
                    "index",
                    "na_rep",
                    "formatters",
                    "justify",
                    "float_format",
                    "sparsify",
                    "index_names",
                    "line_width",
                    "max_rows",
                    "min_rows",
                    "max_cols",
                    "show_dimensions",
                    "decimal",
                    "table_id",
                    "render_links",
                    "bold_rows",
                    "escape"
                ],
                "_chk_truncate": [
                    "self"
                ],
                "_to_str_columns": [
                    "self"
                ],
                "write_result": [
                    "self",
                    "buf"
                ],
                "_join_multiline": [
                    "self"
                ],
                "to_string": [
                    "self",
                    "buf",
                    "encoding"
                ],
                "to_latex": [
                    "self",
                    "buf",
                    "column_format",
                    "longtable",
                    "encoding",
                    "multicolumn",
                    "multicolumn_format",
                    "multirow",
                    "caption",
                    "label"
                ],
                "_format_col": [
                    "self",
                    "i"
                ],
                "to_html": [
                    "self",
                    "buf",
                    "encoding",
                    "classes",
                    "notebook",
                    "border"
                ],
                "_get_formatted_column_labels": [
                    "self",
                    "frame"
                ],
                "has_index_names": [
                    "self"
                ],
                "has_column_names": [
                    "self"
                ],
                "show_row_idx_names": [
                    "self"
                ],
                "show_col_idx_names": [
                    "self"
                ],
                "_get_formatted_index": [
                    "self",
                    "frame"
                ],
                "_get_column_name_list": [
                    "self"
                ]
            },
            "GenericArrayFormatter": {
                "__init__": [
                    "self",
                    "values",
                    "digits",
                    "formatter",
                    "na_rep",
                    "space",
                    "float_format",
                    "justify",
                    "decimal",
                    "quoting",
                    "fixed_width",
                    "leading_space"
                ],
                "get_result": [
                    "self"
                ],
                "_format_strings": [
                    "self"
                ]
            },
            "FloatArrayFormatter": {
                "__init__": [
                    "self"
                ],
                "_value_formatter": [
                    "self",
                    "float_format",
                    "threshold"
                ],
                "get_result_as_array": [
                    "self"
                ],
                "_format_strings": [
                    "self"
                ]
            },
            "IntArrayFormatter": {
                "_format_strings": [
                    "self"
                ]
            },
            "Datetime64Formatter": {
                "__init__": [
                    "self",
                    "values",
                    "nat_rep",
                    "date_format"
                ],
                "_format_strings": [
                    "self"
                ]
            },
            "ExtensionArrayFormatter": {
                "_format_strings": [
                    "self"
                ]
            },
            "Datetime64TZFormatter": {
                "_format_strings": [
                    "self"
                ]
            },
            "Timedelta64Formatter": {
                "__init__": [
                    "self",
                    "values",
                    "nat_rep",
                    "box"
                ],
                "_format_strings": [
                    "self"
                ]
            },
            "EngFormatter": {
                "__init__": [
                    "self",
                    "accuracy",
                    "use_eng_prefix"
                ],
                "__call__": [
                    "self",
                    "num"
                ]
            }
        },
        "pandas.io.formats.csvs": {
            "CSVFormatter": {
                "__init__": [
                    "self",
                    "obj",
                    "path_or_buf",
                    "sep",
                    "na_rep",
                    "float_format",
                    "cols",
                    "header",
                    "index",
                    "index_label",
                    "mode",
                    "encoding",
                    "errors",
                    "compression",
                    "quoting",
                    "line_terminator",
                    "chunksize",
                    "quotechar",
                    "date_format",
                    "doublequote",
                    "escapechar",
                    "decimal"
                ],
                "save": [
                    "self"
                ],
                "_save_header": [
                    "self"
                ],
                "_save": [
                    "self"
                ],
                "_save_chunk": [
                    "self",
                    "start_i",
                    "end_i"
                ]
            }
        },
        "pandas.io.formats.printing": {
            "adjoin": [
                "space"
            ],
            "justify": [
                "texts",
                "max_len",
                "mode"
            ],
            "_pprint_seq": [
                "seq",
                "_nest_lvl",
                "max_seq_items"
            ],
            "_pprint_dict": [
                "seq",
                "_nest_lvl",
                "max_seq_items"
            ],
            "pprint_thing": [
                "thing",
                "_nest_lvl",
                "escape_chars",
                "default_escapes",
                "quote_strings",
                "max_seq_items"
            ],
            "pprint_thing_encoded": [
                "object",
                "encoding",
                "errors"
            ],
            "_enable_data_resource_formatter": [
                "enable"
            ],
            "default_pprint": [
                "thing",
                "max_seq_items"
            ],
            "format_object_summary": [
                "obj",
                "formatter",
                "is_justify",
                "name",
                "indent_for_name",
                "line_break_each_value"
            ],
            "_justify": [
                "head",
                "tail"
            ],
            "format_object_attrs": [
                "obj",
                "include_dtype"
            ],
            "PrettyDict": {
                "__repr__": [
                    "self"
                ]
            }
        },
        "pandas.io.formats.excel": {
            "ExcelCell": {
                "__init__": [
                    "self",
                    "row",
                    "col",
                    "val",
                    "style",
                    "mergestart",
                    "mergeend"
                ]
            },
            "CSSToExcelConverter": {
                "__init__": [
                    "self",
                    "inherited"
                ],
                "__call__": [
                    "self",
                    "declarations_str"
                ],
                "build_xlstyle": [
                    "self",
                    "props"
                ],
                "build_alignment": [
                    "self",
                    "props"
                ],
                "build_border": [
                    "self",
                    "props"
                ],
                "_border_style": [
                    "self",
                    "style",
                    "width"
                ],
                "build_fill": [
                    "self",
                    "props"
                ],
                "build_font": [
                    "self",
                    "props"
                ],
                "color_to_excel": [
                    "self",
                    "val"
                ],
                "build_number_format": [
                    "self",
                    "props"
                ]
            },
            "ExcelFormatter": {
                "__init__": [
                    "self",
                    "df",
                    "na_rep",
                    "float_format",
                    "cols",
                    "header",
                    "index",
                    "index_label",
                    "merge_cells",
                    "inf_rep",
                    "style_converter"
                ],
                "header_style": [
                    "self"
                ],
                "_format_value": [
                    "self",
                    "val"
                ],
                "_format_header_mi": [
                    "self"
                ],
                "_format_header_regular": [
                    "self"
                ],
                "_format_header": [
                    "self"
                ],
                "_format_body": [
                    "self"
                ],
                "_format_regular_rows": [
                    "self"
                ],
                "_format_hierarchical_rows": [
                    "self"
                ],
                "_generate_body": [
                    "self",
                    "coloffset"
                ],
                "get_formatted_cells": [
                    "self"
                ],
                "write": [
                    "self",
                    "writer",
                    "sheet_name",
                    "startrow",
                    "startcol",
                    "freeze_panes",
                    "engine"
                ]
            }
        },
        "pandas.io.formats.style": {
            "_mpl": [
                "func"
            ],
            "_is_visible": [
                "idx_row",
                "idx_col",
                "lengths"
            ],
            "_get_level_lengths": [
                "index",
                "hidden_elements"
            ],
            "_maybe_wrap_formatter": [
                "formatter",
                "na_rep"
            ],
            "Styler": {
                "__init__": [
                    "self",
                    "data",
                    "precision",
                    "table_styles",
                    "uuid",
                    "caption",
                    "table_attributes",
                    "cell_ids",
                    "na_rep"
                ],
                "_repr_html_": [
                    "self"
                ],
                "to_excel": [
                    "self",
                    "excel_writer",
                    "sheet_name",
                    "na_rep",
                    "float_format",
                    "columns",
                    "header",
                    "index",
                    "index_label",
                    "startrow",
                    "startcol",
                    "engine",
                    "merge_cells",
                    "encoding",
                    "inf_rep",
                    "verbose",
                    "freeze_panes"
                ],
                "_translate": [
                    "self"
                ],
                "format": [
                    "self",
                    "formatter",
                    "subset",
                    "na_rep"
                ],
                "render": [
                    "self"
                ],
                "_update_ctx": [
                    "self",
                    "attrs"
                ],
                "_copy": [
                    "self",
                    "deepcopy"
                ],
                "__copy__": [
                    "self"
                ],
                "__deepcopy__": [
                    "self",
                    "memo"
                ],
                "clear": [
                    "self"
                ],
                "_compute": [
                    "self"
                ],
                "_apply": [
                    "self",
                    "func",
                    "axis",
                    "subset"
                ],
                "apply": [
                    "self",
                    "func",
                    "axis",
                    "subset"
                ],
                "_applymap": [
                    "self",
                    "func",
                    "subset"
                ],
                "applymap": [
                    "self",
                    "func",
                    "subset"
                ],
                "where": [
                    "self",
                    "cond",
                    "value",
                    "other",
                    "subset"
                ],
                "set_precision": [
                    "self",
                    "precision"
                ],
                "set_table_attributes": [
                    "self",
                    "attributes"
                ],
                "export": [
                    "self"
                ],
                "use": [
                    "self",
                    "styles"
                ],
                "set_uuid": [
                    "self",
                    "uuid"
                ],
                "set_caption": [
                    "self",
                    "caption"
                ],
                "set_table_styles": [
                    "self",
                    "table_styles"
                ],
                "set_na_rep": [
                    "self",
                    "na_rep"
                ],
                "hide_index": [
                    "self"
                ],
                "hide_columns": [
                    "self",
                    "subset"
                ],
                "_highlight_null": [
                    "v",
                    "null_color"
                ],
                "highlight_null": [
                    "self",
                    "null_color",
                    "subset"
                ],
                "background_gradient": [
                    "self",
                    "cmap",
                    "low",
                    "high",
                    "axis",
                    "subset",
                    "text_color_threshold",
                    "vmin",
                    "vmax"
                ],
                "_background_gradient": [
                    "s",
                    "cmap",
                    "low",
                    "high",
                    "text_color_threshold",
                    "vmin",
                    "vmax"
                ],
                "set_properties": [
                    "self",
                    "subset"
                ],
                "_bar": [
                    "s",
                    "align",
                    "colors",
                    "width",
                    "vmin",
                    "vmax"
                ],
                "bar": [
                    "self",
                    "subset",
                    "axis",
                    "color",
                    "width",
                    "align",
                    "vmin",
                    "vmax"
                ],
                "highlight_max": [
                    "self",
                    "subset",
                    "color",
                    "axis"
                ],
                "highlight_min": [
                    "self",
                    "subset",
                    "color",
                    "axis"
                ],
                "_highlight_handler": [
                    "self",
                    "subset",
                    "color",
                    "axis",
                    "max_"
                ],
                "_highlight_extrema": [
                    "data",
                    "color",
                    "max_"
                ],
                "from_custom_template": [
                    "cls",
                    "searchpath",
                    "name"
                ],
                "pipe": [
                    "self",
                    "func"
                ]
            }
        },
        "pandas.io.formats.info": {
            "_put_str": [
                "s",
                "space"
            ],
            "_sizeof_fmt": [
                "num",
                "size_qualifier"
            ],
            "BaseInfo": {
                "__init__": [
                    "self",
                    "data",
                    "verbose",
                    "buf",
                    "max_cols",
                    "memory_usage",
                    "null_counts"
                ],
                "_get_mem_usage": [
                    "self",
                    "deep"
                ],
                "_get_ids_and_dtypes": [
                    "self"
                ],
                "_verbose_repr": [
                    "self",
                    "lines",
                    "ids",
                    "dtypes",
                    "show_counts"
                ],
                "_non_verbose_repr": [
                    "self",
                    "lines",
                    "ids"
                ],
                "info": [
                    "self"
                ]
            },
            "DataFrameInfo": {
                "_get_mem_usage": [
                    "self",
                    "deep"
                ],
                "_get_ids_and_dtypes": [
                    "self"
                ],
                "_verbose_repr": [
                    "self",
                    "lines",
                    "ids",
                    "dtypes",
                    "show_counts"
                ],
                "_non_verbose_repr": [
                    "self",
                    "lines",
                    "ids"
                ]
            }
        },
        "pandas.io.formats.css": {
            "_side_expander": [
                "prop_fmt"
            ],
            "CSSWarning": {},
            "CSSResolver": {
                "__call__": [
                    "self",
                    "declarations_str",
                    "inherited"
                ],
                "size_to_pt": [
                    "self",
                    "in_val",
                    "em_pt",
                    "conversions"
                ],
                "atomize": [
                    "self",
                    "declarations"
                ],
                "parse": [
                    "self",
                    "declarations_str"
                ]
            }
        },
        "pandas.io.formats.latex": {
            "LatexFormatter": {
                "__init__": [
                    "self",
                    "formatter",
                    "column_format",
                    "longtable",
                    "multicolumn",
                    "multicolumn_format",
                    "multirow",
                    "caption",
                    "label"
                ],
                "write_result": [
                    "self",
                    "buf"
                ],
                "_format_multicolumn": [
                    "self",
                    "row",
                    "ilevels"
                ],
                "_format_multirow": [
                    "self",
                    "row",
                    "ilevels",
                    "i",
                    "rows"
                ],
                "_print_cline": [
                    "self",
                    "buf",
                    "i",
                    "icol"
                ],
                "_write_tabular_begin": [
                    "self",
                    "buf",
                    "column_format"
                ],
                "_write_tabular_end": [
                    "self",
                    "buf"
                ],
                "_write_longtable_begin": [
                    "self",
                    "buf",
                    "column_format"
                ],
                "_write_longtable_end": [
                    "buf"
                ]
            }
        },
        "pandas.io.formats.html": {
            "HTMLFormatter": {
                "__init__": [
                    "self",
                    "formatter",
                    "classes",
                    "border"
                ],
                "show_row_idx_names": [
                    "self"
                ],
                "show_col_idx_names": [
                    "self"
                ],
                "row_levels": [
                    "self"
                ],
                "_get_columns_formatted_values": [
                    "self"
                ],
                "is_truncated": [
                    "self"
                ],
                "ncols": [
                    "self"
                ],
                "write": [
                    "self",
                    "s",
                    "indent"
                ],
                "write_th": [
                    "self",
                    "s",
                    "header",
                    "indent",
                    "tags"
                ],
                "write_td": [
                    "self",
                    "s",
                    "indent",
                    "tags"
                ],
                "_write_cell": [
                    "self",
                    "s",
                    "kind",
                    "indent",
                    "tags"
                ],
                "write_tr": [
                    "self",
                    "line",
                    "indent",
                    "indent_delta",
                    "header",
                    "align",
                    "tags",
                    "nindex_levels"
                ],
                "render": [
                    "self"
                ],
                "write_result": [
                    "self",
                    "buf"
                ],
                "_write_table": [
                    "self",
                    "indent"
                ],
                "_write_col_header": [
                    "self",
                    "indent"
                ],
                "_write_row_header": [
                    "self",
                    "indent"
                ],
                "_write_header": [
                    "self",
                    "indent"
                ],
                "_get_formatted_values": [
                    "self"
                ],
                "_write_body": [
                    "self",
                    "indent"
                ],
                "_write_regular_rows": [
                    "self",
                    "fmt_values",
                    "indent"
                ],
                "_write_hierarchical_rows": [
                    "self",
                    "fmt_values",
                    "indent"
                ]
            },
            "NotebookFormatter": {
                "_get_formatted_values": [
                    "self"
                ],
                "_get_columns_formatted_values": [
                    "self"
                ],
                "write_style": [
                    "self"
                ],
                "render": [
                    "self"
                ]
            }
        },
        "pandas.io.formats": {},
        "pandas.io.formats.console": {
            "get_console_size": [],
            "in_interactive_session": [],
            "in_ipython_frontend": []
        },
        "pandas.io.json._normalize": {
            "convert_to_line_delimits": [
                "s"
            ],
            "nested_to_record": [
                "ds",
                "prefix",
                "sep",
                "level",
                "max_level"
            ],
            "_json_normalize": [
                "data",
                "record_path",
                "meta",
                "meta_prefix",
                "record_prefix",
                "errors",
                "sep",
                "max_level"
            ]
        },
        "pandas.io.json._table_schema": {
            "as_json_table_type": [
                "x"
            ],
            "set_default_names": [
                "data"
            ],
            "convert_pandas_type_to_json_field": [
                "arr"
            ],
            "convert_json_field_to_pandas_type": [
                "field"
            ],
            "build_table_schema": [
                "data",
                "index",
                "primary_key",
                "version"
            ],
            "parse_table_schema": [
                "json",
                "precise_float"
            ]
        },
        "pandas.io.json._json": {
            "to_json": [
                "path_or_buf",
                "obj",
                "orient",
                "date_format",
                "double_precision",
                "force_ascii",
                "date_unit",
                "default_handler",
                "lines",
                "compression",
                "index",
                "indent"
            ],
            "read_json": [
                "path_or_buf",
                "orient",
                "typ",
                "dtype",
                "convert_axes",
                "convert_dates",
                "keep_default_dates",
                "numpy",
                "precise_float",
                "date_unit",
                "encoding",
                "lines",
                "chunksize",
                "compression",
                "nrows"
            ],
            "Writer": {
                "__init__": [
                    "self",
                    "obj",
                    "orient",
                    "date_format",
                    "double_precision",
                    "ensure_ascii",
                    "date_unit",
                    "index",
                    "default_handler",
                    "indent"
                ],
                "_format_axes": [
                    "self"
                ],
                "write": [
                    "self"
                ],
                "_write": [
                    "self",
                    "obj",
                    "orient",
                    "double_precision",
                    "ensure_ascii",
                    "date_unit",
                    "iso_dates",
                    "default_handler",
                    "indent"
                ]
            },
            "SeriesWriter": {
                "_format_axes": [
                    "self"
                ],
                "_write": [
                    "self",
                    "obj",
                    "orient",
                    "double_precision",
                    "ensure_ascii",
                    "date_unit",
                    "iso_dates",
                    "default_handler",
                    "indent"
                ]
            },
            "FrameWriter": {
                "_format_axes": [
                    "self"
                ],
                "_write": [
                    "self",
                    "obj",
                    "orient",
                    "double_precision",
                    "ensure_ascii",
                    "date_unit",
                    "iso_dates",
                    "default_handler",
                    "indent"
                ]
            },
            "JSONTableWriter": {
                "__init__": [
                    "self",
                    "obj",
                    "orient",
                    "date_format",
                    "double_precision",
                    "ensure_ascii",
                    "date_unit",
                    "index",
                    "default_handler",
                    "indent"
                ],
                "_write": [
                    "self",
                    "obj",
                    "orient",
                    "double_precision",
                    "ensure_ascii",
                    "date_unit",
                    "iso_dates",
                    "default_handler",
                    "indent"
                ]
            },
            "JsonReader": {
                "__init__": [
                    "self",
                    "filepath_or_buffer",
                    "orient",
                    "typ",
                    "dtype",
                    "convert_axes",
                    "convert_dates",
                    "keep_default_dates",
                    "numpy",
                    "precise_float",
                    "date_unit",
                    "encoding",
                    "lines",
                    "chunksize",
                    "compression",
                    "nrows"
                ],
                "_preprocess_data": [
                    "self",
                    "data"
                ],
                "_get_data_from_filepath": [
                    "self",
                    "filepath_or_buffer"
                ],
                "_combine_lines": [
                    "self",
                    "lines"
                ],
                "read": [
                    "self"
                ],
                "_get_object_parser": [
                    "self",
                    "json"
                ],
                "close": [
                    "self"
                ],
                "__next__": [
                    "self"
                ]
            },
            "Parser": {
                "__init__": [
                    "self",
                    "json",
                    "orient",
                    "dtype",
                    "convert_axes",
                    "convert_dates",
                    "keep_default_dates",
                    "numpy",
                    "precise_float",
                    "date_unit"
                ],
                "check_keys_split": [
                    "self",
                    "decoded"
                ],
                "parse": [
                    "self"
                ],
                "_convert_axes": [
                    "self"
                ],
                "_try_convert_types": [
                    "self"
                ],
                "_try_convert_data": [
                    "self",
                    "name",
                    "data",
                    "use_dtypes",
                    "convert_dates"
                ],
                "_try_convert_to_date": [
                    "self",
                    "data"
                ],
                "_try_convert_dates": [
                    "self"
                ]
            },
            "SeriesParser": {
                "_parse_no_numpy": [
                    "self"
                ],
                "_parse_numpy": [
                    "self"
                ],
                "_try_convert_types": [
                    "self"
                ]
            },
            "FrameParser": {
                "_parse_numpy": [
                    "self"
                ],
                "_parse_no_numpy": [
                    "self"
                ],
                "_process_converter": [
                    "self",
                    "f",
                    "filt"
                ],
                "_try_convert_types": [
                    "self"
                ],
                "_try_convert_dates": [
                    "self"
                ]
            }
        },
        "pandas.io.json": {},
        "pandas.io.sas.sas7bdat": {
            "_convert_datetimes": [
                "sas_datetimes",
                "unit"
            ],
            "_subheader_pointer": {},
            "_column": {},
            "SAS7BDATReader": {
                "__init__": [
                    "self",
                    "path_or_buf",
                    "index",
                    "convert_dates",
                    "blank_missing",
                    "chunksize",
                    "encoding",
                    "convert_text",
                    "convert_header_text"
                ],
                "column_data_lengths": [
                    "self"
                ],
                "column_data_offsets": [
                    "self"
                ],
                "column_types": [
                    "self"
                ],
                "close": [
                    "self"
                ],
                "_get_properties": [
                    "self"
                ],
                "__next__": [
                    "self"
                ],
                "_read_float": [
                    "self",
                    "offset",
                    "width"
                ],
                "_read_int": [
                    "self",
                    "offset",
                    "width"
                ],
                "_read_bytes": [
                    "self",
                    "offset",
                    "length"
                ],
                "_parse_metadata": [
                    "self"
                ],
                "_process_page_meta": [
                    "self"
                ],
                "_read_page_header": [
                    "self"
                ],
                "_process_page_metadata": [
                    "self"
                ],
                "_get_subheader_index": [
                    "self",
                    "signature",
                    "compression",
                    "ptype"
                ],
                "_process_subheader_pointers": [
                    "self",
                    "offset",
                    "subheader_pointer_index"
                ],
                "_read_subheader_signature": [
                    "self",
                    "offset"
                ],
                "_process_subheader": [
                    "self",
                    "subheader_index",
                    "pointer"
                ],
                "_process_rowsize_subheader": [
                    "self",
                    "offset",
                    "length"
                ],
                "_process_columnsize_subheader": [
                    "self",
                    "offset",
                    "length"
                ],
                "_process_subheader_counts": [
                    "self",
                    "offset",
                    "length"
                ],
                "_process_columntext_subheader": [
                    "self",
                    "offset",
                    "length"
                ],
                "_process_columnname_subheader": [
                    "self",
                    "offset",
                    "length"
                ],
                "_process_columnattributes_subheader": [
                    "self",
                    "offset",
                    "length"
                ],
                "_process_columnlist_subheader": [
                    "self",
                    "offset",
                    "length"
                ],
                "_process_format_subheader": [
                    "self",
                    "offset",
                    "length"
                ],
                "read": [
                    "self",
                    "nrows"
                ],
                "_read_next_page": [
                    "self"
                ],
                "_chunk_to_dataframe": [
                    "self"
                ]
            }
        },
        "pandas.io.sas.sasreader": {
            "read_sas": [
                "filepath_or_buffer",
                "format",
                "index",
                "encoding",
                "chunksize",
                "iterator"
            ],
            "ReaderBase": {
                "read": [
                    "self",
                    "nrows"
                ],
                "close": [
                    "self"
                ]
            }
        },
        "pandas.io.sas.sas_constants": {
            "SASIndex": {}
        },
        "pandas.io.sas.sas_xport": {
            "_parse_date": [
                "datestr"
            ],
            "_split_line": [
                "s",
                "parts"
            ],
            "_handle_truncated_float_vec": [
                "vec",
                "nbytes"
            ],
            "_parse_float_vec": [
                "vec"
            ],
            "XportReader": {
                "__init__": [
                    "self",
                    "filepath_or_buffer",
                    "index",
                    "encoding",
                    "chunksize"
                ],
                "close": [
                    "self"
                ],
                "_get_row": [
                    "self"
                ],
                "_read_header": [
                    "self"
                ],
                "__next__": [
                    "self"
                ],
                "_record_count": [
                    "self"
                ],
                "get_chunk": [
                    "self",
                    "size"
                ],
                "_missing_double": [
                    "self",
                    "vec"
                ],
                "read": [
                    "self",
                    "nrows"
                ]
            }
        },
        "pandas.io.sas": {},
        "pandas._libs": {},
        "pandas._libs.window": {},
        "pandas._libs.tslibs": {},
        "pandas.tseries.frequencies": {
            "get_period_alias": [
                "offset_str"
            ],
            "get_offset": [
                "name"
            ],
            "infer_freq": [
                "index",
                "warn"
            ],
            "_is_multiple": [
                "us",
                "mult"
            ],
            "_maybe_add_count": [
                "base",
                "count"
            ],
            "is_subperiod": [
                "source",
                "target"
            ],
            "is_superperiod": [
                "source",
                "target"
            ],
            "_maybe_coerce_freq": [
                "code"
            ],
            "_quarter_months_conform": [
                "source",
                "target"
            ],
            "_is_annual": [
                "rule"
            ],
            "_is_quarterly": [
                "rule"
            ],
            "_is_monthly": [
                "rule"
            ],
            "_is_weekly": [
                "rule"
            ],
            "_FrequencyInferer": {
                "__init__": [
                    "self",
                    "index",
                    "warn"
                ],
                "deltas": [
                    "self"
                ],
                "deltas_asi8": [
                    "self"
                ],
                "is_unique": [
                    "self"
                ],
                "is_unique_asi8": [
                    "self"
                ],
                "get_freq": [
                    "self"
                ],
                "day_deltas": [
                    "self"
                ],
                "hour_deltas": [
                    "self"
                ],
                "fields": [
                    "self"
                ],
                "rep_stamp": [
                    "self"
                ],
                "month_position_check": [
                    "self"
                ],
                "mdiffs": [
                    "self"
                ],
                "ydiffs": [
                    "self"
                ],
                "_infer_daily_rule": [
                    "self"
                ],
                "_get_annual_rule": [
                    "self"
                ],
                "_get_quarterly_rule": [
                    "self"
                ],
                "_get_monthly_rule": [
                    "self"
                ],
                "_is_business_daily": [
                    "self"
                ],
                "_get_wom_rule": [
                    "self"
                ]
            },
            "_TimedeltaFrequencyInferer": {
                "_infer_daily_rule": [
                    "self"
                ]
            }
        },
        "pandas.tseries.holiday": {
            "next_monday": [
                "dt"
            ],
            "next_monday_or_tuesday": [
                "dt"
            ],
            "previous_friday": [
                "dt"
            ],
            "sunday_to_monday": [
                "dt"
            ],
            "weekend_to_monday": [
                "dt"
            ],
            "nearest_workday": [
                "dt"
            ],
            "next_workday": [
                "dt"
            ],
            "previous_workday": [
                "dt"
            ],
            "before_nearest_workday": [
                "dt"
            ],
            "after_nearest_workday": [
                "dt"
            ],
            "register": [
                "cls"
            ],
            "get_calendar": [
                "name"
            ],
            "HolidayCalendarFactory": [
                "name",
                "base",
                "other",
                "base_class"
            ],
            "Holiday": {
                "__init__": [
                    "self",
                    "name",
                    "year",
                    "month",
                    "day",
                    "offset",
                    "observance",
                    "start_date",
                    "end_date",
                    "days_of_week"
                ],
                "__repr__": [
                    "self"
                ],
                "dates": [
                    "self",
                    "start_date",
                    "end_date",
                    "return_name"
                ],
                "_reference_dates": [
                    "self",
                    "start_date",
                    "end_date"
                ],
                "_apply_rule": [
                    "self",
                    "dates"
                ]
            },
            "HolidayCalendarMetaClass": {
                "__new__": [
                    "cls",
                    "clsname",
                    "bases",
                    "attrs"
                ]
            },
            "AbstractHolidayCalendar": {
                "__init__": [
                    "self",
                    "name",
                    "rules"
                ],
                "rule_from_name": [
                    "self",
                    "name"
                ],
                "holidays": [
                    "self",
                    "start",
                    "end",
                    "return_name"
                ],
                "merge_class": [
                    "base",
                    "other"
                ],
                "merge": [
                    "self",
                    "other",
                    "inplace"
                ]
            },
            "USFederalHolidayCalendar": {}
        },
        "pandas.tseries.offsets": {},
        "pandas.tseries.api": {},
        "pandas.tseries": {},
        "pandas.util._exceptions": {
            "rewrite_exception": [
                "old_name",
                "new_name"
            ]
        },
        "pandas.util._depr_module": {
            "_DeprecatedModule": {
                "__init__": [
                    "self",
                    "deprmod",
                    "deprmodto",
                    "removals",
                    "moved"
                ],
                "__dir__": [
                    "self"
                ],
                "__repr__": [
                    "self"
                ],
                "__getattr__": [
                    "self",
                    "name"
                ],
                "_import_deprmod": [
                    "self",
                    "mod"
                ]
            }
        },
        "pandas.util.testing": {},
        "pandas.util._tester": {
            "test": [
                "extra_args"
            ]
        },
        "pandas.util._test_decorators": {
            "safe_import": [
                "mod_name",
                "min_version"
            ],
            "_skip_if_no_mpl": [],
            "_skip_if_has_locale": [],
            "_skip_if_not_us_locale": [],
            "_skip_if_no_scipy": [],
            "skip_if_installed": [
                "package"
            ],
            "skip_if_no": [
                "package",
                "min_version"
            ],
            "skip_if_np_lt": [
                "ver_str"
            ],
            "parametrize_fixture_doc": [],
            "check_file_leaks": [
                "func"
            ],
            "async_mark": []
        },
        "pandas.util._decorators": {
            "deprecate": [
                "name",
                "alternative",
                "version",
                "alt_name",
                "klass",
                "stacklevel",
                "msg"
            ],
            "deprecate_kwarg": [
                "old_arg_name",
                "new_arg_name",
                "mapping",
                "stacklevel"
            ],
            "_format_argument_list": [
                "allow_args"
            ],
            "deprecate_nonkeyword_arguments": [
                "version",
                "allowed_args",
                "stacklevel"
            ],
            "rewrite_axis_style_signature": [
                "name",
                "extra_params"
            ],
            "doc": [],
            "indent": [
                "text",
                "indents"
            ],
            "Substitution": {
                "__init__": [
                    "self"
                ],
                "__call__": [
                    "self",
                    "func"
                ],
                "update": [
                    "self"
                ]
            },
            "Appender": {
                "__init__": [
                    "self",
                    "addendum",
                    "join",
                    "indents"
                ],
                "__call__": [
                    "self",
                    "func"
                ]
            }
        },
        "pandas.util._validators": {
            "_check_arg_length": [
                "fname",
                "args",
                "max_fname_arg_count",
                "compat_args"
            ],
            "_check_for_default_values": [
                "fname",
                "arg_val_dict",
                "compat_args"
            ],
            "validate_args": [
                "fname",
                "args",
                "max_fname_arg_count",
                "compat_args"
            ],
            "_check_for_invalid_keys": [
                "fname",
                "kwargs",
                "compat_args"
            ],
            "validate_kwargs": [
                "fname",
                "kwargs",
                "compat_args"
            ],
            "validate_args_and_kwargs": [
                "fname",
                "args",
                "kwargs",
                "max_fname_arg_count",
                "compat_args"
            ],
            "validate_bool_kwarg": [
                "value",
                "arg_name"
            ],
            "validate_axis_style_args": [
                "data",
                "args",
                "kwargs",
                "arg_name",
                "method_name"
            ],
            "validate_fillna_kwargs": [
                "value",
                "method",
                "validate_scalar_dict_value"
            ],
            "validate_percentile": [
                "q"
            ]
        },
        "pandas.util._doctools": {
            "TablePlotter": {
                "__init__": [
                    "self",
                    "cell_width",
                    "cell_height",
                    "font_size"
                ],
                "_shape": [
                    "self",
                    "df"
                ],
                "_get_cells": [
                    "self",
                    "left",
                    "right",
                    "vertical"
                ],
                "plot": [
                    "self",
                    "left",
                    "right",
                    "labels",
                    "vertical"
                ],
                "_conv": [
                    "self",
                    "data"
                ],
                "_insert_index": [
                    "self",
                    "data"
                ],
                "_make_table": [
                    "self",
                    "ax",
                    "df",
                    "title",
                    "height"
                ]
            }
        },
        "pandas.util._print_versions": {
            "_get_commit_hash": [],
            "_get_sys_info": [],
            "_get_dependency_info": [],
            "show_versions": [
                "as_json"
            ],
            "main": []
        },
        "pandas.util": {},
        "pandas.plotting._misc": {
            "table": [
                "ax",
                "data",
                "rowLabels",
                "colLabels"
            ],
            "register": [],
            "deregister": [],
            "scatter_matrix": [
                "frame",
                "alpha",
                "figsize",
                "ax",
                "grid",
                "diagonal",
                "marker",
                "density_kwds",
                "hist_kwds",
                "range_padding"
            ],
            "radviz": [
                "frame",
                "class_column",
                "ax",
                "color",
                "colormap"
            ],
            "andrews_curves": [
                "frame",
                "class_column",
                "ax",
                "samples",
                "color",
                "colormap"
            ],
            "bootstrap_plot": [
                "series",
                "fig",
                "size",
                "samples"
            ],
            "parallel_coordinates": [
                "frame",
                "class_column",
                "cols",
                "ax",
                "color",
                "use_columns",
                "xticks",
                "colormap",
                "axvlines",
                "axvlines_kwds",
                "sort_labels"
            ],
            "lag_plot": [
                "series",
                "lag",
                "ax"
            ],
            "autocorrelation_plot": [
                "series",
                "ax"
            ],
            "_Options": {
                "__init__": [
                    "self",
                    "deprecated"
                ],
                "__getitem__": [
                    "self",
                    "key"
                ],
                "__setitem__": [
                    "self",
                    "key",
                    "value"
                ],
                "__delitem__": [
                    "self",
                    "key"
                ],
                "__contains__": [
                    "self",
                    "key"
                ],
                "reset": [
                    "self"
                ],
                "_get_canonical_key": [
                    "self",
                    "key"
                ],
                "use": [
                    "self",
                    "key",
                    "value"
                ]
            }
        },
        "pandas.plotting._core": {
            "hist_series": [
                "self",
                "by",
                "ax",
                "grid",
                "xlabelsize",
                "xrot",
                "ylabelsize",
                "yrot",
                "figsize",
                "bins",
                "backend",
                "legend"
            ],
            "hist_frame": [
                "data",
                "column",
                "by",
                "grid",
                "xlabelsize",
                "xrot",
                "ylabelsize",
                "yrot",
                "ax",
                "sharex",
                "sharey",
                "figsize",
                "layout",
                "bins",
                "backend",
                "legend"
            ],
            "boxplot": [
                "data",
                "column",
                "by",
                "ax",
                "fontsize",
                "rot",
                "grid",
                "figsize",
                "layout",
                "return_type"
            ],
            "boxplot_frame": [
                "self",
                "column",
                "by",
                "ax",
                "fontsize",
                "rot",
                "grid",
                "figsize",
                "layout",
                "return_type",
                "backend"
            ],
            "boxplot_frame_groupby": [
                "grouped",
                "subplots",
                "column",
                "fontsize",
                "rot",
                "grid",
                "ax",
                "figsize",
                "layout",
                "sharex",
                "sharey",
                "backend"
            ],
            "_find_backend": [
                "backend"
            ],
            "_get_plot_backend": [
                "backend"
            ],
            "PlotAccessor": {
                "__init__": [
                    "self",
                    "data"
                ],
                "_get_call_args": [
                    "backend_name",
                    "data",
                    "args",
                    "kwargs"
                ],
                "__call__": [
                    "self"
                ],
                "line": [
                    "self",
                    "x",
                    "y"
                ],
                "bar": [
                    "self",
                    "x",
                    "y"
                ],
                "barh": [
                    "self",
                    "x",
                    "y"
                ],
                "box": [
                    "self",
                    "by"
                ],
                "hist": [
                    "self",
                    "by",
                    "bins"
                ],
                "kde": [
                    "self",
                    "bw_method",
                    "ind"
                ],
                "area": [
                    "self",
                    "x",
                    "y"
                ],
                "pie": [
                    "self"
                ],
                "scatter": [
                    "self",
                    "x",
                    "y",
                    "s",
                    "c"
                ],
                "hexbin": [
                    "self",
                    "x",
                    "y",
                    "C",
                    "reduce_C_function",
                    "gridsize"
                ]
            }
        },
        "pandas.plotting": {},
        "pandas.plotting._matplotlib.timeseries": {
            "_maybe_resample": [
                "series",
                "ax",
                "kwargs"
            ],
            "_is_sub": [
                "f1",
                "f2"
            ],
            "_is_sup": [
                "f1",
                "f2"
            ],
            "_upsample_others": [
                "ax",
                "freq",
                "kwargs"
            ],
            "_replot_ax": [
                "ax",
                "freq",
                "kwargs"
            ],
            "_decorate_axes": [
                "ax",
                "freq",
                "kwargs"
            ],
            "_get_ax_freq": [
                "ax"
            ],
            "_get_period_alias": [
                "freq"
            ],
            "_get_freq": [
                "ax",
                "series"
            ],
            "_use_dynamic_x": [
                "ax",
                "data"
            ],
            "_get_index_freq": [
                "index"
            ],
            "_maybe_convert_index": [
                "ax",
                "data"
            ],
            "_format_coord": [
                "freq",
                "t",
                "y"
            ],
            "format_dateaxis": [
                "subplot",
                "freq",
                "index"
            ]
        },
        "pandas.plotting._matplotlib.core": {
            "MPLPlot": {
                "_kind": [
                    "self"
                ],
                "__init__": [
                    "self",
                    "data",
                    "kind",
                    "by",
                    "subplots",
                    "sharex",
                    "sharey",
                    "use_index",
                    "figsize",
                    "grid",
                    "legend",
                    "rot",
                    "ax",
                    "fig",
                    "title",
                    "xlim",
                    "ylim",
                    "xticks",
                    "yticks",
                    "xlabel",
                    "ylabel",
                    "sort_columns",
                    "fontsize",
                    "secondary_y",
                    "colormap",
                    "table",
                    "layout",
                    "include_bool"
                ],
                "_validate_color_args": [
                    "self"
                ],
                "_iter_data": [
                    "self",
                    "data",
                    "keep_index",
                    "fillna"
                ],
                "nseries": [
                    "self"
                ],
                "draw": [
                    "self"
                ],
                "generate": [
                    "self"
                ],
                "_args_adjust": [
                    "self"
                ],
                "_has_plotted_object": [
                    "self",
                    "ax"
                ],
                "_maybe_right_yaxis": [
                    "self",
                    "ax",
                    "axes_num"
                ],
                "_setup_subplots": [
                    "self"
                ],
                "result": [
                    "self"
                ],
                "_compute_plot_data": [
                    "self"
                ],
                "_make_plot": [
                    "self"
                ],
                "_add_table": [
                    "self"
                ],
                "_post_plot_logic_common": [
                    "self",
                    "ax",
                    "data"
                ],
                "_post_plot_logic": [
                    "self",
                    "ax",
                    "data"
                ],
                "_adorn_subplots": [
                    "self"
                ],
                "_apply_axis_properties": [
                    "self",
                    "axis",
                    "rot",
                    "fontsize"
                ],
                "legend_title": [
                    "self"
                ],
                "_add_legend_handle": [
                    "self",
                    "handle",
                    "label",
                    "index"
                ],
                "_make_legend": [
                    "self"
                ],
                "_get_ax_legend_handle": [
                    "self",
                    "ax"
                ],
                "plt": [
                    "self"
                ],
                "_get_xticks": [
                    "self",
                    "convert_period"
                ],
                "_plot": [
                    "cls",
                    "ax",
                    "x",
                    "y",
                    "style",
                    "is_errorbar"
                ],
                "_get_index_name": [
                    "self"
                ],
                "_get_ax_layer": [
                    "cls",
                    "ax",
                    "primary"
                ],
                "_get_ax": [
                    "self",
                    "i"
                ],
                "get_default_ax": [
                    "cls",
                    "ax"
                ],
                "on_right": [
                    "self",
                    "i"
                ],
                "_apply_style_colors": [
                    "self",
                    "colors",
                    "kwds",
                    "col_num",
                    "label"
                ],
                "_get_colors": [
                    "self",
                    "num_colors",
                    "color_kwds"
                ],
                "_parse_errorbars": [
                    "self",
                    "label",
                    "err"
                ],
                "_get_errorbars": [
                    "self",
                    "label",
                    "index",
                    "xerr",
                    "yerr"
                ],
                "_get_subplots": [
                    "self"
                ],
                "_get_axes_layout": [
                    "self"
                ]
            },
            "PlanePlot": {
                "__init__": [
                    "self",
                    "data",
                    "x",
                    "y"
                ],
                "nseries": [
                    "self"
                ],
                "_post_plot_logic": [
                    "self",
                    "ax",
                    "data"
                ],
                "_plot_colorbar": [
                    "self",
                    "ax"
                ]
            },
            "ScatterPlot": {
                "__init__": [
                    "self",
                    "data",
                    "x",
                    "y",
                    "s",
                    "c"
                ],
                "_make_plot": [
                    "self"
                ]
            },
            "HexBinPlot": {
                "__init__": [
                    "self",
                    "data",
                    "x",
                    "y",
                    "C"
                ],
                "_make_plot": [
                    "self"
                ],
                "_make_legend": [
                    "self"
                ]
            },
            "LinePlot": {
                "__init__": [
                    "self",
                    "data"
                ],
                "_is_ts_plot": [
                    "self"
                ],
                "_use_dynamic_x": [
                    "self"
                ],
                "_make_plot": [
                    "self"
                ],
                "_plot": [
                    "cls",
                    "ax",
                    "x",
                    "y",
                    "style",
                    "column_num",
                    "stacking_id"
                ],
                "_ts_plot": [
                    "cls",
                    "ax",
                    "x",
                    "data",
                    "style"
                ],
                "_get_stacking_id": [
                    "self"
                ],
                "_initialize_stacker": [
                    "cls",
                    "ax",
                    "stacking_id",
                    "n"
                ],
                "_get_stacked_values": [
                    "cls",
                    "ax",
                    "stacking_id",
                    "values",
                    "label"
                ],
                "_update_stacker": [
                    "cls",
                    "ax",
                    "stacking_id",
                    "values"
                ],
                "_post_plot_logic": [
                    "self",
                    "ax",
                    "data"
                ]
            },
            "AreaPlot": {
                "__init__": [
                    "self",
                    "data"
                ],
                "_plot": [
                    "cls",
                    "ax",
                    "x",
                    "y",
                    "style",
                    "column_num",
                    "stacking_id",
                    "is_errorbar"
                ],
                "_post_plot_logic": [
                    "self",
                    "ax",
                    "data"
                ]
            },
            "BarPlot": {
                "__init__": [
                    "self",
                    "data"
                ],
                "_args_adjust": [
                    "self"
                ],
                "_plot": [
                    "cls",
                    "ax",
                    "x",
                    "y",
                    "w",
                    "start",
                    "log"
                ],
                "_start_base": [
                    "self"
                ],
                "_make_plot": [
                    "self"
                ],
                "_post_plot_logic": [
                    "self",
                    "ax",
                    "data"
                ],
                "_decorate_ticks": [
                    "self",
                    "ax",
                    "name",
                    "ticklabels",
                    "start_edge",
                    "end_edge"
                ]
            },
            "BarhPlot": {
                "_start_base": [
                    "self"
                ],
                "_plot": [
                    "cls",
                    "ax",
                    "x",
                    "y",
                    "w",
                    "start",
                    "log"
                ],
                "_decorate_ticks": [
                    "self",
                    "ax",
                    "name",
                    "ticklabels",
                    "start_edge",
                    "end_edge"
                ]
            },
            "PiePlot": {
                "__init__": [
                    "self",
                    "data",
                    "kind"
                ],
                "_args_adjust": [
                    "self"
                ],
                "_validate_color_args": [
                    "self"
                ],
                "_make_plot": [
                    "self"
                ]
            }
        },
        "pandas.plotting._matplotlib.converter": {
            "get_pairs": [],
            "register_pandas_matplotlib_converters": [
                "func"
            ],
            "pandas_converters": [],
            "register": [],
            "deregister": [],
            "_to_ordinalf": [
                "tm"
            ],
            "time2num": [
                "d"
            ],
            "get_datevalue": [
                "date",
                "freq"
            ],
            "_from_ordinal": [
                "x",
                "tz"
            ],
            "_get_default_annual_spacing": [
                "nyears"
            ],
            "period_break": [
                "dates",
                "period"
            ],
            "has_level_label": [
                "label_flags",
                "vmin"
            ],
            "_daily_finder": [
                "vmin",
                "vmax",
                "freq"
            ],
            "_monthly_finder": [
                "vmin",
                "vmax",
                "freq"
            ],
            "_quarterly_finder": [
                "vmin",
                "vmax",
                "freq"
            ],
            "_annual_finder": [
                "vmin",
                "vmax",
                "freq"
            ],
            "get_finder": [
                "freq"
            ],
            "TimeConverter": {
                "convert": [
                    "value",
                    "unit",
                    "axis"
                ],
                "axisinfo": [
                    "unit",
                    "axis"
                ],
                "default_units": [
                    "x",
                    "axis"
                ]
            },
            "TimeFormatter": {
                "__init__": [
                    "self",
                    "locs"
                ],
                "__call__": [
                    "self",
                    "x",
                    "pos"
                ]
            },
            "PeriodConverter": {
                "convert": [
                    "values",
                    "units",
                    "axis"
                ],
                "_convert_1d": [
                    "values",
                    "units",
                    "axis"
                ]
            },
            "DatetimeConverter": {
                "convert": [
                    "values",
                    "unit",
                    "axis"
                ],
                "_convert_1d": [
                    "values",
                    "unit",
                    "axis"
                ],
                "axisinfo": [
                    "unit",
                    "axis"
                ]
            },
            "PandasAutoDateFormatter": {
                "__init__": [
                    "self",
                    "locator",
                    "tz",
                    "defaultfmt"
                ]
            },
            "PandasAutoDateLocator": {
                "get_locator": [
                    "self",
                    "dmin",
                    "dmax"
                ],
                "_get_unit": [
                    "self"
                ]
            },
            "MilliSecondLocator": {
                "__init__": [
                    "self",
                    "tz"
                ],
                "_get_unit": [
                    "self"
                ],
                "get_unit_generic": [
                    "freq"
                ],
                "__call__": [
                    "self"
                ],
                "_get_interval": [
                    "self"
                ],
                "autoscale": [
                    "self"
                ]
            },
            "TimeSeries_DateLocator": {
                "__init__": [
                    "self",
                    "freq",
                    "minor_locator",
                    "dynamic_mode",
                    "base",
                    "quarter",
                    "month",
                    "day",
                    "plot_obj"
                ],
                "_get_default_locs": [
                    "self",
                    "vmin",
                    "vmax"
                ],
                "__call__": [
                    "self"
                ],
                "autoscale": [
                    "self"
                ]
            },
            "TimeSeries_DateFormatter": {
                "__init__": [
                    "self",
                    "freq",
                    "minor_locator",
                    "dynamic_mode",
                    "plot_obj"
                ],
                "_set_default_format": [
                    "self",
                    "vmin",
                    "vmax"
                ],
                "set_locs": [
                    "self",
                    "locs"
                ],
                "__call__": [
                    "self",
                    "x",
                    "pos"
                ]
            },
            "TimeSeries_TimedeltaFormatter": {
                "format_timedelta_ticks": [
                    "x",
                    "pos",
                    "n_decimals"
                ],
                "__call__": [
                    "self",
                    "x",
                    "pos"
                ]
            }
        },
        "pandas.plotting._matplotlib.misc": {
            "scatter_matrix": [
                "frame",
                "alpha",
                "figsize",
                "ax",
                "grid",
                "diagonal",
                "marker",
                "density_kwds",
                "hist_kwds",
                "range_padding"
            ],
            "_get_marker_compat": [
                "marker"
            ],
            "radviz": [
                "frame",
                "class_column",
                "ax",
                "color",
                "colormap"
            ],
            "andrews_curves": [
                "frame",
                "class_column",
                "ax",
                "samples",
                "color",
                "colormap"
            ],
            "bootstrap_plot": [
                "series",
                "fig",
                "size",
                "samples"
            ],
            "parallel_coordinates": [
                "frame",
                "class_column",
                "cols",
                "ax",
                "color",
                "use_columns",
                "xticks",
                "colormap",
                "axvlines",
                "axvlines_kwds",
                "sort_labels"
            ],
            "lag_plot": [
                "series",
                "lag",
                "ax"
            ],
            "autocorrelation_plot": [
                "series",
                "ax"
            ]
        },
        "pandas.plotting._matplotlib.style": {
            "_get_standard_colors": [
                "num_colors",
                "colormap",
                "color_type",
                "color"
            ]
        },
        "pandas.plotting._matplotlib.boxplot": {
            "_grouped_plot_by_column": [
                "plotf",
                "data",
                "columns",
                "by",
                "numeric_only",
                "grid",
                "figsize",
                "ax",
                "layout",
                "return_type"
            ],
            "boxplot": [
                "data",
                "column",
                "by",
                "ax",
                "fontsize",
                "rot",
                "grid",
                "figsize",
                "layout",
                "return_type"
            ],
            "boxplot_frame": [
                "self",
                "column",
                "by",
                "ax",
                "fontsize",
                "rot",
                "grid",
                "figsize",
                "layout",
                "return_type"
            ],
            "boxplot_frame_groupby": [
                "grouped",
                "subplots",
                "column",
                "fontsize",
                "rot",
                "grid",
                "ax",
                "figsize",
                "layout",
                "sharex",
                "sharey"
            ],
            "BoxPlot": {
                "__init__": [
                    "self",
                    "data",
                    "return_type"
                ],
                "_args_adjust": [
                    "self"
                ],
                "_plot": [
                    "cls",
                    "ax",
                    "y",
                    "column_num",
                    "return_type"
                ],
                "_validate_color_args": [
                    "self"
                ],
                "_get_colors": [
                    "self",
                    "num_colors",
                    "color_kwds"
                ],
                "maybe_color_bp": [
                    "self",
                    "bp"
                ],
                "_make_plot": [
                    "self"
                ],
                "_set_ticklabels": [
                    "self",
                    "ax",
                    "labels"
                ],
                "_make_legend": [
                    "self"
                ],
                "_post_plot_logic": [
                    "self",
                    "ax",
                    "data"
                ],
                "orientation": [
                    "self"
                ],
                "result": [
                    "self"
                ]
            }
        },
        "pandas.plotting._matplotlib.compat": {
            "_mpl_version": [
                "version",
                "op"
            ]
        },
        "pandas.plotting._matplotlib.tools": {
            "format_date_labels": [
                "ax",
                "rot"
            ],
            "table": [
                "ax",
                "data",
                "rowLabels",
                "colLabels"
            ],
            "_get_layout": [
                "nplots",
                "layout",
                "layout_type"
            ],
            "_subplots": [
                "naxes",
                "sharex",
                "sharey",
                "squeeze",
                "subplot_kw",
                "ax",
                "layout",
                "layout_type"
            ],
            "_remove_labels_from_axis": [
                "axis"
            ],
            "_handle_shared_axes": [
                "axarr",
                "nplots",
                "naxes",
                "nrows",
                "ncols",
                "sharex",
                "sharey"
            ],
            "_flatten": [
                "axes"
            ],
            "_set_ticks_props": [
                "axes",
                "xlabelsize",
                "xrot",
                "ylabelsize",
                "yrot"
            ],
            "_get_all_lines": [
                "ax"
            ],
            "_get_xlim": [
                "lines"
            ]
        },
        "pandas.plotting._matplotlib.hist": {
            "_grouped_plot": [
                "plotf",
                "data",
                "column",
                "by",
                "numeric_only",
                "figsize",
                "sharex",
                "sharey",
                "layout",
                "rot",
                "ax"
            ],
            "_grouped_hist": [
                "data",
                "column",
                "by",
                "ax",
                "bins",
                "figsize",
                "layout",
                "sharex",
                "sharey",
                "rot",
                "grid",
                "xlabelsize",
                "xrot",
                "ylabelsize",
                "yrot",
                "legend"
            ],
            "hist_series": [
                "self",
                "by",
                "ax",
                "grid",
                "xlabelsize",
                "xrot",
                "ylabelsize",
                "yrot",
                "figsize",
                "bins",
                "legend"
            ],
            "hist_frame": [
                "data",
                "column",
                "by",
                "grid",
                "xlabelsize",
                "xrot",
                "ylabelsize",
                "yrot",
                "ax",
                "sharex",
                "sharey",
                "figsize",
                "layout",
                "bins",
                "legend"
            ],
            "HistPlot": {
                "__init__": [
                    "self",
                    "data",
                    "bins",
                    "bottom"
                ],
                "_args_adjust": [
                    "self"
                ],
                "_plot": [
                    "cls",
                    "ax",
                    "y",
                    "style",
                    "bins",
                    "bottom",
                    "column_num",
                    "stacking_id"
                ],
                "_make_plot": [
                    "self"
                ],
                "_make_plot_keywords": [
                    "self",
                    "kwds",
                    "y"
                ],
                "_post_plot_logic": [
                    "self",
                    "ax",
                    "data"
                ],
                "orientation": [
                    "self"
                ]
            },
            "KdePlot": {
                "__init__": [
                    "self",
                    "data",
                    "bw_method",
                    "ind"
                ],
                "_args_adjust": [
                    "self"
                ],
                "_get_ind": [
                    "self",
                    "y"
                ],
                "_plot": [
                    "cls",
                    "ax",
                    "y",
                    "style",
                    "bw_method",
                    "ind",
                    "column_num",
                    "stacking_id"
                ],
                "_make_plot_keywords": [
                    "self",
                    "kwds",
                    "y"
                ],
                "_post_plot_logic": [
                    "self",
                    "ax",
                    "data"
                ]
            }
        },
        "pandas.plotting._matplotlib": {
            "plot": [
                "data",
                "kind"
            ]
        },
        "pandas.compat.pickle_compat": {
            "load_reduce": [
                "self"
            ],
            "load_newobj": [
                "self"
            ],
            "load_newobj_ex": [
                "self"
            ],
            "load": [
                "fh",
                "encoding",
                "is_verbose"
            ],
            "loads": [
                "bytes_object"
            ],
            "patch_pickle": [],
            "_LoadSparseSeries": {
                "__new__": [
                    "cls"
                ]
            },
            "_LoadSparseFrame": {
                "__new__": [
                    "cls"
                ]
            },
            "Unpickler": {
                "find_class": [
                    "self",
                    "module",
                    "name"
                ]
            }
        },
        "pandas.compat._optional": {
            "_get_version": [
                "module"
            ],
            "import_optional_dependency": [
                "name",
                "extra",
                "raise_on_missing",
                "on_version"
            ]
        },
        "pandas.compat.chainmap": {
            "DeepChainMap": {
                "__setitem__": [
                    "self",
                    "key",
                    "value"
                ],
                "__delitem__": [
                    "self",
                    "key"
                ]
            }
        },
        "pandas.compat": {
            "set_function_name": [
                "f",
                "name",
                "cls"
            ],
            "is_platform_little_endian": [],
            "is_platform_windows": [],
            "is_platform_linux": [],
            "is_platform_mac": [],
            "is_platform_32bit": [],
            "_import_lzma": [],
            "_get_lzma_file": [
                "lzma"
            ]
        },
        "pandas.compat.numpy.function": {
            "process_skipna": [
                "skipna",
                "args"
            ],
            "validate_argmin_with_skipna": [
                "skipna",
                "args",
                "kwargs"
            ],
            "validate_argmax_with_skipna": [
                "skipna",
                "args",
                "kwargs"
            ],
            "validate_argsort_with_ascending": [
                "ascending",
                "args",
                "kwargs"
            ],
            "validate_clip_with_axis": [
                "axis",
                "args",
                "kwargs"
            ],
            "validate_cum_func_with_skipna": [
                "skipna",
                "args",
                "kwargs",
                "name"
            ],
            "validate_take_with_convert": [
                "convert",
                "args",
                "kwargs"
            ],
            "validate_window_func": [
                "name",
                "args",
                "kwargs"
            ],
            "validate_rolling_func": [
                "name",
                "args",
                "kwargs"
            ],
            "validate_expanding_func": [
                "name",
                "args",
                "kwargs"
            ],
            "validate_groupby_func": [
                "name",
                "args",
                "kwargs",
                "allowed"
            ],
            "validate_resampler_func": [
                "method",
                "args",
                "kwargs"
            ],
            "validate_minmax_axis": [
                "axis"
            ],
            "CompatValidator": {
                "__init__": [
                    "self",
                    "defaults",
                    "fname",
                    "method",
                    "max_fname_arg_count"
                ],
                "__call__": [
                    "self",
                    "args",
                    "kwargs",
                    "fname",
                    "max_fname_arg_count",
                    "method"
                ]
            }
        },
        "pandas.compat.numpy": {
            "tz_replacer": [
                "s"
            ],
            "np_datetime64_compat": [
                "s"
            ],
            "np_array_datetime64_compat": [
                "arr"
            ]
        },
        "pandas.errors": {
            "NullFrequencyError": {},
            "PerformanceWarning": {},
            "UnsupportedFunctionCall": {},
            "UnsortedIndexError": {},
            "ParserError": {},
            "DtypeWarning": {},
            "EmptyDataError": {},
            "ParserWarning": {},
            "MergeError": {},
            "AccessorRegistrationWarning": {},
            "AbstractMethodError": {
                "__init__": [
                    "self",
                    "class_instance",
                    "methodtype"
                ],
                "__str__": [
                    "self"
                ]
            },
            "NumbaUtilError": {},
            "InvalidIndexError": {}
        }
    }
}