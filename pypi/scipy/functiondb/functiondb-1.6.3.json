{
    "1.6.3": {
        "benchmarks.benchmarks.cluster_hierarchy_disjoint_set": {
            "Bench": {
                "setup": [
                    "self",
                    "n"
                ],
                "time_merge": [
                    "self",
                    "n"
                ],
                "time_merge_already_merged": [
                    "self",
                    "n"
                ],
                "time_find": [
                    "self",
                    "n"
                ],
                "time_find_already_found": [
                    "self",
                    "n"
                ],
                "time_contains": [
                    "self",
                    "n"
                ],
                "time_absence": [
                    "self",
                    "n"
                ]
            }
        },
        "benchmarks.benchmarks.optimize": {
            "_BenchOptimizers": {
                "__init__": [
                    "self",
                    "function_name",
                    "fun",
                    "der",
                    "hess"
                ],
                "from_funcobj": [
                    "cls",
                    "function_name",
                    "function"
                ],
                "reset": [
                    "self"
                ],
                "energy_gradient": [
                    "self",
                    "x"
                ],
                "add_result": [
                    "self",
                    "result",
                    "t",
                    "name"
                ],
                "print_results": [
                    "self"
                ],
                "average_results": [
                    "self"
                ],
                "accept_test": [
                    "self",
                    "x_new"
                ],
                "run_basinhopping": [
                    "self"
                ],
                "run_differentialevolution": [
                    "self"
                ],
                "run_dualannealing": [
                    "self"
                ],
                "bench_run_global": [
                    "self",
                    "numtrials",
                    "methods"
                ],
                "bench_run": [
                    "self",
                    "x0",
                    "methods"
                ]
            },
            "BenchSmoothUnbounded": {
                "setup": [
                    "self",
                    "func_name",
                    "method_name",
                    "ret_val"
                ],
                "track_all": [
                    "self",
                    "func_name",
                    "method_name",
                    "ret_val"
                ],
                "run_rosenbrock_slow": [
                    "self",
                    "methods"
                ],
                "run_rosenbrock_nograd": [
                    "self",
                    "methods"
                ],
                "run_rosenbrock": [
                    "self",
                    "methods"
                ],
                "run_rosenbrock_tight": [
                    "self",
                    "methods"
                ],
                "run_simple_quadratic": [
                    "self",
                    "methods"
                ],
                "run_asymmetric_quadratic": [
                    "self",
                    "methods"
                ],
                "run_sin_1d": [
                    "self",
                    "methods"
                ],
                "run_booth": [
                    "self",
                    "methods"
                ],
                "run_beale": [
                    "self",
                    "methods"
                ],
                "run_LJ": [
                    "self",
                    "methods"
                ]
            },
            "BenchLeastSquares": {
                "track_all": [
                    "self",
                    "problem_name",
                    "result_type"
                ]
            },
            "BenchGlobal": {
                "__init__": [
                    "self"
                ],
                "setup": [
                    "self",
                    "name",
                    "ret_value",
                    "solver"
                ],
                "teardown": [
                    "self",
                    "name",
                    "ret_value",
                    "solver"
                ],
                "track_all": [
                    "self",
                    "name",
                    "ret_value",
                    "solver"
                ],
                "setup_cache": [
                    "self"
                ]
            }
        },
        "benchmarks.benchmarks.common": {
            "is_xslow": [],
            "run_monitored": [
                "code"
            ],
            "get_mem_info": [],
            "set_mem_rlimit": [
                "max_mem"
            ],
            "with_attributes": [],
            "Benchmark": {},
            "LimitedParamBenchmark": {
                "setup": [
                    "self"
                ]
            },
            "safe_import": {
                "__enter__": [
                    "self"
                ],
                "__exit__": [
                    "self",
                    "type_",
                    "value",
                    "traceback"
                ]
            }
        },
        "benchmarks.benchmarks.signal_filtering": {
            "Decimate": {
                "setup": [
                    "self",
                    "q",
                    "ftype",
                    "zero_phase"
                ],
                "time_decimate": [
                    "self",
                    "q",
                    "ftype",
                    "zero_phase"
                ]
            },
            "Lfilter": {
                "setup": [
                    "self",
                    "n_samples",
                    "numtaps"
                ],
                "time_lfilter": [
                    "self",
                    "n_samples",
                    "numtaps"
                ]
            },
            "ParallelSosfilt": {
                "setup": [
                    "self",
                    "n_samples",
                    "threads"
                ],
                "time_sosfilt": [
                    "self",
                    "n_samples",
                    "threads"
                ]
            },
            "Sosfilt": {
                "setup": [
                    "self",
                    "n_samples",
                    "order"
                ],
                "time_sosfilt_basic": [
                    "self",
                    "n_samples",
                    "order"
                ]
            }
        },
        "benchmarks.benchmarks.linalg_sqrtm": {
            "Sqrtm": {
                "setup": [
                    "self",
                    "dtype",
                    "n",
                    "blocksize"
                ],
                "time_sqrtm": [
                    "self",
                    "dtype",
                    "n",
                    "blocksize"
                ]
            }
        },
        "benchmarks.benchmarks.optimize_zeros": {
            "Zeros": {
                "setup": [
                    "self",
                    "func",
                    "meth"
                ],
                "time_zeros": [
                    "self",
                    "func",
                    "meth"
                ]
            },
            "Newton": {
                "setup": [
                    "self",
                    "func",
                    "meth"
                ],
                "time_newton": [
                    "self",
                    "func",
                    "meth"
                ]
            },
            "NewtonArray": {
                "setup": [
                    "self",
                    "vec",
                    "meth"
                ],
                "time_array_newton": [
                    "self",
                    "vec",
                    "meth"
                ]
            }
        },
        "benchmarks.benchmarks.cluster": {
            "HierarchyLinkage": {
                "__init__": [
                    "self"
                ],
                "time_linkage": [
                    "self",
                    "method"
                ]
            },
            "KMeans": {
                "__init__": [
                    "self"
                ],
                "time_kmeans": [
                    "self",
                    "k"
                ]
            },
            "KMeans2": {
                "__init__": [
                    "self"
                ],
                "time_kmeans2": [
                    "self",
                    "k",
                    "init"
                ]
            },
            "VQ": {
                "__init__": [
                    "self"
                ],
                "setup": [
                    "self",
                    "k",
                    "dtype"
                ],
                "time_vq": [
                    "self",
                    "k",
                    "dtype"
                ]
            }
        },
        "benchmarks.benchmarks.interpolate": {
            "Leaks": {
                "track_leaks": [
                    "self"
                ]
            },
            "BenchPPoly": {
                "setup": [
                    "self"
                ],
                "time_evaluation": [
                    "self"
                ]
            },
            "GridData": {
                "setup": [
                    "self",
                    "n_grids",
                    "method"
                ],
                "time_evaluation": [
                    "self",
                    "n_grids",
                    "method"
                ]
            },
            "Interpolate1d": {
                "setup": [
                    "self",
                    "n_samples",
                    "method"
                ],
                "time_interpolate": [
                    "self",
                    "n_samples",
                    "method"
                ],
                "time_interpolate_eval": [
                    "self",
                    "n_samples",
                    "method"
                ]
            },
            "Interpolate2d": {
                "setup": [
                    "self",
                    "n_samples",
                    "method"
                ],
                "time_interpolate": [
                    "self",
                    "n_samples",
                    "method"
                ]
            },
            "Rbf": {
                "setup": [
                    "self",
                    "n_samples",
                    "function"
                ],
                "time_rbf_1d": [
                    "self",
                    "n_samples",
                    "function"
                ],
                "time_rbf_2d": [
                    "self",
                    "n_samples",
                    "function"
                ]
            },
            "UnivariateSpline": {
                "setup": [
                    "self",
                    "n_samples",
                    "degree"
                ],
                "time_univariate_spline": [
                    "self",
                    "n_samples",
                    "degree"
                ]
            },
            "BivariateSpline": {
                "setup": [
                    "self",
                    "n_samples"
                ],
                "time_smooth_bivariate_spline": [
                    "self",
                    "n_samples"
                ],
                "time_lsq_bivariate_spline": [
                    "self",
                    "n_samples"
                ]
            },
            "Interpolate": {
                "setup": [
                    "self",
                    "n_samples",
                    "module"
                ],
                "time_interpolate": [
                    "self",
                    "n_samples",
                    "module"
                ]
            }
        },
        "benchmarks.benchmarks.signal": {
            "Resample": {
                "setup": [
                    "self",
                    "N",
                    "num"
                ],
                "time_complex": [
                    "self",
                    "N",
                    "num"
                ],
                "time_real": [
                    "self",
                    "N",
                    "num"
                ]
            },
            "CalculateWindowedFFT": {
                "setup": [
                    "self"
                ],
                "time_welch": [
                    "self"
                ],
                "time_csd": [
                    "self"
                ],
                "time_periodogram": [
                    "self"
                ],
                "time_spectrogram": [
                    "self"
                ],
                "time_coherence": [
                    "self"
                ]
            },
            "Convolve2D": {
                "setup": [
                    "self",
                    "mode",
                    "boundary"
                ],
                "time_convolve2d": [
                    "self",
                    "mode",
                    "boundary"
                ],
                "time_correlate2d": [
                    "self",
                    "mode",
                    "boundary"
                ]
            },
            "FFTConvolve": {
                "setup": [
                    "self",
                    "mode",
                    "size"
                ],
                "time_convolve2d": [
                    "self",
                    "mode",
                    "size"
                ]
            },
            "OAConvolve": {
                "setup": [
                    "self",
                    "mode",
                    "size"
                ],
                "time_convolve2d": [
                    "self",
                    "mode",
                    "size"
                ]
            },
            "Convolve": {
                "setup": [
                    "self",
                    "mode"
                ],
                "time_convolve": [
                    "self",
                    "mode"
                ],
                "time_convolve2d": [
                    "self",
                    "mode"
                ],
                "time_correlate": [
                    "self",
                    "mode"
                ],
                "time_correlate2d": [
                    "self",
                    "mode"
                ]
            },
            "LTI": {
                "setup": [
                    "self"
                ],
                "time_lsim": [
                    "self"
                ],
                "time_lsim2": [
                    "self"
                ],
                "time_step": [
                    "self"
                ],
                "time_impulse": [
                    "self"
                ],
                "time_bode": [
                    "self"
                ]
            },
            "Upfirdn1D": {
                "setup": [
                    "self",
                    "up",
                    "down"
                ],
                "time_upfirdn1d": [
                    "self",
                    "up",
                    "down"
                ]
            },
            "Upfirdn2D": {
                "setup": [
                    "self",
                    "up",
                    "down",
                    "axis"
                ],
                "time_upfirdn2d": [
                    "self",
                    "up",
                    "down",
                    "axis"
                ]
            },
            "FIRLS": {
                "time_firls": [
                    "self",
                    "n",
                    "edges"
                ]
            }
        },
        "benchmarks.benchmarks.sparse_csgraph": {
            "Laplacian": {
                "setup": [
                    "self",
                    "n",
                    "format",
                    "normed"
                ],
                "time_laplacian": [
                    "self",
                    "n",
                    "format",
                    "normed"
                ]
            }
        },
        "benchmarks.benchmarks.spatial": {
            "generate_spherical_points": [
                "num_points"
            ],
            "Build": {
                "setup": [
                    "self",
                    "mnr",
                    "cls_name"
                ],
                "time_build": [
                    "self",
                    "mnr",
                    "cls_name"
                ]
            },
            "PresortedDataSetup": {
                "setup": [
                    "self",
                    "mnr",
                    "balanced",
                    "order",
                    "radius"
                ]
            },
            "BuildUnbalanced": {
                "setup": [
                    "self"
                ],
                "time_build": [
                    "self",
                    "mnr",
                    "balanced",
                    "order"
                ]
            },
            "QueryUnbalanced": {
                "setup": [
                    "self"
                ],
                "time_query": [
                    "self",
                    "mnr",
                    "balanced",
                    "order"
                ]
            },
            "RadiusUnbalanced": {
                "time_query_pairs": [
                    "self",
                    "mnr",
                    "balanced",
                    "order",
                    "radius"
                ],
                "time_query_ball_point": [
                    "self",
                    "mnr",
                    "balanced",
                    "order",
                    "radius"
                ]
            },
            "Query": {
                "do_setup": [
                    "self",
                    "mnr",
                    "p",
                    "boxsize",
                    "leafsize"
                ],
                "setup": [
                    "self",
                    "mnr",
                    "p",
                    "boxsize",
                    "leafsize"
                ],
                "time_query": [
                    "self",
                    "mnr",
                    "p",
                    "boxsize",
                    "leafsize"
                ]
            },
            "Radius": {
                "__init__": [
                    "self"
                ],
                "setup": [
                    "self"
                ],
                "setup_query_ball_point": [
                    "self",
                    "mnr",
                    "p",
                    "probe_radius",
                    "boxsize",
                    "leafsize"
                ],
                "setup_query_pairs": [
                    "self",
                    "mnr",
                    "p",
                    "probe_radius",
                    "boxsize",
                    "leafsize"
                ],
                "time_query_ball_point": [
                    "self",
                    "mnr",
                    "p",
                    "probe_radius",
                    "boxsize",
                    "leafsize"
                ],
                "time_query_ball_point_nosort": [
                    "self",
                    "mnr",
                    "p",
                    "probe_radius",
                    "boxsize",
                    "leafsize"
                ],
                "time_query_pairs": [
                    "self",
                    "mnr",
                    "p",
                    "probe_radius",
                    "boxsize",
                    "leafsize"
                ]
            },
            "Neighbors": {
                "setup": [
                    "self",
                    "mn1n2",
                    "p",
                    "probe_radius",
                    "boxsize",
                    "leafsize",
                    "cls"
                ],
                "time_sparse_distance_matrix": [
                    "self",
                    "mn1n2",
                    "p",
                    "probe_radius",
                    "boxsize",
                    "leafsize",
                    "cls"
                ],
                "time_count_neighbors": [
                    "self",
                    "mn1n2",
                    "p",
                    "probe_radius",
                    "boxsize",
                    "leafsize",
                    "cls"
                ]
            },
            "CNeighbors": {
                "setup": [
                    "self",
                    "mn1n2",
                    "Nr"
                ],
                "time_count_neighbors_deep": [
                    "self",
                    "mn1n2",
                    "Nr"
                ],
                "time_count_neighbors_shallow": [
                    "self",
                    "mn1n2",
                    "Nr"
                ]
            },
            "SphericalVor": {
                "setup": [
                    "self",
                    "num_points"
                ],
                "time_spherical_voronoi_calculation": [
                    "self",
                    "num_points"
                ]
            },
            "SphericalVorSort": {
                "setup": [
                    "self",
                    "num_points"
                ],
                "time_spherical_polygon_vertex_sorting": [
                    "self",
                    "num_points"
                ]
            },
            "SphericalVorAreas": {
                "setup": [
                    "self",
                    "num_points"
                ],
                "time_spherical_polygon_area_calculation": [
                    "self",
                    "num_points"
                ]
            },
            "Xdist": {
                "setup": [
                    "self",
                    "num_points",
                    "metric"
                ],
                "time_cdist": [
                    "self",
                    "num_points",
                    "metric"
                ],
                "time_pdist": [
                    "self",
                    "num_points",
                    "metric"
                ]
            },
            "ConvexHullBench": {
                "setup": [
                    "self",
                    "num_points",
                    "incremental"
                ],
                "time_convex_hull": [
                    "self",
                    "num_points",
                    "incremental"
                ]
            },
            "VoronoiBench": {
                "setup": [
                    "self",
                    "num_points",
                    "furthest_site"
                ],
                "time_voronoi_calculation": [
                    "self",
                    "num_points",
                    "furthest_site"
                ]
            },
            "Hausdorff": {
                "setup": [
                    "self",
                    "num_points"
                ],
                "time_directed_hausdorff": [
                    "self",
                    "num_points"
                ]
            },
            "GeometricSlerpBench": {
                "setup": [
                    "self",
                    "num_points"
                ],
                "time_geometric_slerp_3d": [
                    "self",
                    "num_points"
                ]
            },
            "RotationBench": {
                "setup": [
                    "self",
                    "num_rotations"
                ],
                "time_matrix_conversion": [
                    "self",
                    "num_rotations"
                ],
                "time_euler_conversion": [
                    "self",
                    "num_rotations"
                ],
                "time_rotvec_conversion": [
                    "self",
                    "num_rotations"
                ],
                "time_mrp_conversion": [
                    "self",
                    "num_rotations"
                ],
                "time_mul_inv": [
                    "self",
                    "num_rotations"
                ]
            }
        },
        "benchmarks.benchmarks.sparse_linalg_solve": {
            "_create_sparse_poisson1d": [
                "n"
            ],
            "_create_sparse_poisson2d": [
                "n"
            ],
            "Bench": {
                "setup": [
                    "self",
                    "n",
                    "solver"
                ],
                "time_solve": [
                    "self",
                    "n",
                    "solver"
                ]
            },
            "Lgmres": {
                "setup": [
                    "self",
                    "n",
                    "m"
                ],
                "time_inner": [
                    "self",
                    "n",
                    "m"
                ]
            }
        },
        "benchmarks.benchmarks.sparse": {
            "random_sparse": [
                "m",
                "n",
                "nnz_per_row"
            ],
            "poisson2d": [
                "N",
                "dtype",
                "format"
            ],
            "Arithmetic": {
                "setup": [
                    "self",
                    "format",
                    "XY",
                    "op"
                ],
                "time_arithmetic": [
                    "self",
                    "format",
                    "XY",
                    "op"
                ]
            },
            "Sort": {
                "setup": [
                    "self",
                    "matrix"
                ],
                "time_sort": [
                    "self",
                    "matrix"
                ]
            },
            "Matvec": {
                "setup": [
                    "self",
                    "matrix",
                    "format"
                ],
                "time_matvec": [
                    "self",
                    "matrix",
                    "format"
                ]
            },
            "Matvecs": {
                "setup": [
                    "self",
                    "format"
                ],
                "time_matvecs": [
                    "self",
                    "format"
                ]
            },
            "Matmul": {
                "setup": [
                    "self"
                ],
                "time_large": [
                    "self"
                ]
            },
            "Construction": {
                "setup": [
                    "self",
                    "name",
                    "format"
                ],
                "time_construction": [
                    "self",
                    "name",
                    "format"
                ]
            },
            "BlockDiagDenseConstruction": {
                "setup": [
                    "self",
                    "num_matrices"
                ],
                "time_block_diag": [
                    "self",
                    "num_matrices"
                ]
            },
            "BlockDiagSparseConstruction": {
                "setup": [
                    "self",
                    "num_matrices"
                ],
                "time_block_diag": [
                    "self",
                    "num_matrices"
                ]
            },
            "Conversion": {
                "setup": [
                    "self",
                    "fromfmt",
                    "tofmt"
                ],
                "time_conversion": [
                    "self",
                    "fromfmt",
                    "tofmt"
                ]
            },
            "Getset": {
                "setup": [
                    "self",
                    "N",
                    "sparsity_pattern",
                    "format"
                ],
                "_timeit": [
                    "self",
                    "kernel",
                    "recopy"
                ],
                "track_fancy_setitem": [
                    "self",
                    "N",
                    "sparsity_pattern",
                    "format"
                ],
                "time_fancy_getitem": [
                    "self",
                    "N",
                    "sparsity_pattern",
                    "format"
                ]
            },
            "NullSlice": {
                "_setup": [
                    "self",
                    "density",
                    "format"
                ],
                "setup_cache": [
                    "self"
                ],
                "setup": [
                    "self",
                    "density",
                    "format"
                ],
                "time_getrow": [
                    "self",
                    "density",
                    "format"
                ],
                "time_getcol": [
                    "self",
                    "density",
                    "format"
                ],
                "time_3_rows": [
                    "self",
                    "density",
                    "format"
                ],
                "time_10000_rows": [
                    "self",
                    "density",
                    "format"
                ],
                "time_3_cols": [
                    "self",
                    "density",
                    "format"
                ],
                "time_100_cols": [
                    "self",
                    "density",
                    "format"
                ]
            },
            "Diagonal": {
                "setup": [
                    "self",
                    "density",
                    "format"
                ],
                "time_diagonal": [
                    "self",
                    "density",
                    "format"
                ]
            },
            "Sum": {
                "setup": [
                    "self",
                    "density",
                    "format"
                ],
                "time_sum": [
                    "self",
                    "density",
                    "format"
                ],
                "time_sum_axis0": [
                    "self",
                    "density",
                    "format"
                ],
                "time_sum_axis1": [
                    "self",
                    "density",
                    "format"
                ]
            },
            "Iteration": {
                "setup": [
                    "self",
                    "density",
                    "format"
                ],
                "time_iteration": [
                    "self",
                    "density",
                    "format"
                ]
            },
            "Densify": {
                "setup": [
                    "self",
                    "format",
                    "order"
                ],
                "time_toarray": [
                    "self",
                    "format",
                    "order"
                ]
            },
            "Random": {
                "setup": [
                    "self",
                    "density"
                ],
                "time_rand": [
                    "self",
                    "density"
                ]
            }
        },
        "benchmarks.benchmarks.linalg": {
            "random": [
                "size"
            ],
            "Bench": {
                "__init__": [
                    "self"
                ],
                "setup": [
                    "self",
                    "size",
                    "contig",
                    "module"
                ],
                "time_solve": [
                    "self",
                    "size",
                    "contig",
                    "module"
                ],
                "time_solve_triangular": [
                    "self",
                    "size",
                    "contig",
                    "module"
                ],
                "time_inv": [
                    "self",
                    "size",
                    "contig",
                    "module"
                ],
                "time_det": [
                    "self",
                    "size",
                    "contig",
                    "module"
                ],
                "time_eigvals": [
                    "self",
                    "size",
                    "contig",
                    "module"
                ],
                "time_svd": [
                    "self",
                    "size",
                    "contig",
                    "module"
                ]
            },
            "Norm": {
                "setup": [
                    "self",
                    "shape",
                    "contig",
                    "module"
                ],
                "time_1_norm": [
                    "self",
                    "size",
                    "contig",
                    "module"
                ],
                "time_inf_norm": [
                    "self",
                    "size",
                    "contig",
                    "module"
                ],
                "time_frobenius_norm": [
                    "self",
                    "size",
                    "contig",
                    "module"
                ]
            },
            "Lstsq": {
                "setup": [
                    "self",
                    "dtype",
                    "size",
                    "lapack_driver"
                ],
                "time_lstsq": [
                    "self",
                    "dtype",
                    "size",
                    "lapack_driver"
                ]
            },
            "SpecialMatrices": {
                "setup": [
                    "self",
                    "size"
                ],
                "time_block_diag_small": [
                    "self",
                    "size"
                ],
                "time_block_diag_big": [
                    "self",
                    "size"
                ],
                "time_circulant": [
                    "self",
                    "size"
                ],
                "time_companion": [
                    "self",
                    "size"
                ],
                "time_dft": [
                    "self",
                    "size"
                ],
                "time_hadamard": [
                    "self",
                    "size"
                ],
                "time_hankel": [
                    "self",
                    "size"
                ],
                "time_helmert": [
                    "self",
                    "size"
                ],
                "time_hilbert": [
                    "self",
                    "size"
                ],
                "time_invhilbert": [
                    "self",
                    "size"
                ],
                "time_leslie": [
                    "self",
                    "size"
                ],
                "time_pascal": [
                    "self",
                    "size"
                ],
                "time_invpascal": [
                    "self",
                    "size"
                ],
                "time_toeplitz": [
                    "self",
                    "size"
                ],
                "time_tri": [
                    "self",
                    "size"
                ]
            },
            "GetFuncs": {
                "setup": [
                    "self"
                ],
                "time_get_blas_funcs": [
                    "self"
                ],
                "time_get_blas_funcs_2": [
                    "self"
                ],
                "time_small_cholesky": [
                    "self"
                ]
            }
        },
        "benchmarks.benchmarks.ndimage_interpolation": {
            "shift_func_2d": [
                "c"
            ],
            "shift_func_3d": [
                "c"
            ],
            "NdimageInterpolation": {
                "setup": [
                    "self",
                    "shape",
                    "order",
                    "mode"
                ],
                "time_affine_transform": [
                    "self",
                    "shape",
                    "order",
                    "mode"
                ],
                "time_rotate": [
                    "self",
                    "shape",
                    "order",
                    "mode"
                ],
                "time_shift": [
                    "self",
                    "shape",
                    "order",
                    "mode"
                ],
                "time_zoom": [
                    "self",
                    "shape",
                    "order",
                    "mode"
                ],
                "time_geometric_transform_mapping": [
                    "self",
                    "shape",
                    "order",
                    "mode"
                ],
                "time_map_coordinates": [
                    "self",
                    "shape",
                    "order",
                    "mode"
                ],
                "peakmem_rotate": [
                    "self",
                    "shape",
                    "order",
                    "mode"
                ],
                "peakmem_shift": [
                    "self",
                    "shape",
                    "order",
                    "mode"
                ]
            }
        },
        "benchmarks.benchmarks.lsq_problems": {
            "extract_lsq_problems": [],
            "LSQBenchmarkProblem": {
                "__init__": [
                    "self",
                    "n",
                    "m",
                    "fopt",
                    "x0",
                    "lb",
                    "ub"
                ],
                "fun": [
                    "self",
                    "x"
                ],
                "jac": [
                    "self",
                    "x"
                ],
                "check_answer": [
                    "self",
                    "x",
                    "ftol"
                ]
            },
            "AlphaPineneDirect": {
                "__init__": [
                    "self",
                    "x0"
                ],
                "fun_ode_rhs": [
                    "self",
                    "y",
                    "t",
                    "x"
                ],
                "jac_ode_rhs": [
                    "self",
                    "y",
                    "t",
                    "x"
                ],
                "fun": [
                    "self",
                    "x"
                ],
                "jac": [
                    "self",
                    "x"
                ]
            },
            "CoatingThickness": {
                "__init__": [
                    "self",
                    "x0"
                ],
                "fun": [
                    "self",
                    "x"
                ],
                "jac": [
                    "self",
                    "x"
                ]
            },
            "ExponentialFitting": {
                "__init__": [
                    "self",
                    "x0"
                ],
                "fun": [
                    "self",
                    "x"
                ],
                "jac": [
                    "self",
                    "x"
                ]
            },
            "GaussianFitting": {
                "__init__": [
                    "self",
                    "x0"
                ],
                "fun": [
                    "self",
                    "x"
                ],
                "jac": [
                    "self",
                    "x"
                ]
            },
            "ThermistorResistance": {
                "__init__": [
                    "self",
                    "x0_ind"
                ],
                "fun": [
                    "self",
                    "x"
                ],
                "jac": [
                    "self",
                    "x"
                ]
            },
            "EnzymeReaction": {
                "__init__": [
                    "self",
                    "x0_ind"
                ],
                "fun": [
                    "self",
                    "x"
                ],
                "jac": [
                    "self",
                    "x"
                ]
            },
            "ChebyshevQuadrature": {
                "__init__": [
                    "self",
                    "x0"
                ],
                "fun": [
                    "self",
                    "x"
                ],
                "jac": [
                    "self",
                    "x"
                ]
            }
        },
        "benchmarks.benchmarks.sparse_linalg_onenormest": {
            "BenchmarkOneNormEst": {
                "setup": [
                    "self",
                    "n",
                    "solver"
                ],
                "time_onenormest": [
                    "self",
                    "n",
                    "solver"
                ]
            }
        },
        "benchmarks.benchmarks.sparse_linalg_expm": {
            "random_sparse_csr": [
                "m",
                "n",
                "nnz_per_row"
            ],
            "random_sparse_csc": [
                "m",
                "n",
                "nnz_per_row"
            ],
            "ExpmMultiply": {
                "setup": [
                    "self"
                ],
                "time_expm_multiply": [
                    "self"
                ]
            },
            "Expm": {
                "setup": [
                    "self",
                    "n",
                    "format"
                ],
                "time_expm": [
                    "self",
                    "n",
                    "format"
                ]
            }
        },
        "benchmarks.benchmarks.sparse_linalg_lobpcg": {
            "_sakurai": [
                "n"
            ],
            "_mikota_pair": [
                "n"
            ],
            "_as2d": [
                "ar"
            ],
            "_precond": [
                "LorU",
                "lower",
                "x"
            ],
            "Bench": {
                "__init__": [
                    "self"
                ],
                "setup_mikota": [
                    "self",
                    "n",
                    "solver"
                ],
                "setup_sakurai": [
                    "self",
                    "n",
                    "solver"
                ],
                "time_mikota": [
                    "self",
                    "n",
                    "solver"
                ],
                "time_sakurai": [
                    "self",
                    "n",
                    "solver"
                ]
            }
        },
        "benchmarks.benchmarks": {},
        "benchmarks.benchmarks.optimize_qap": {
            "QuadraticAssignment": {
                "setup": [
                    "self",
                    "method",
                    "qap_prob"
                ],
                "time_evaluation": [
                    "self",
                    "method",
                    "qap_prob"
                ],
                "track_score": [
                    "self",
                    "method",
                    "qap_prob"
                ]
            }
        },
        "benchmarks.benchmarks.fftpack_pseudo_diffs": {
            "direct_diff": [
                "x",
                "k",
                "period"
            ],
            "direct_tilbert": [
                "x",
                "h",
                "period"
            ],
            "direct_hilbert": [
                "x"
            ],
            "direct_shift": [
                "x",
                "a",
                "period"
            ],
            "Bench": {
                "setup": [
                    "self",
                    "size",
                    "type"
                ],
                "time_diff": [
                    "self",
                    "size",
                    "soltype"
                ],
                "time_tilbert": [
                    "self",
                    "size",
                    "soltype"
                ],
                "time_hilbert": [
                    "self",
                    "size",
                    "soltype"
                ],
                "time_shift": [
                    "self",
                    "size",
                    "soltype"
                ]
            }
        },
        "benchmarks.benchmarks.integrate": {
            "SolveBVP": {
                "fun_flow": [
                    "self",
                    "x",
                    "y",
                    "p"
                ],
                "bc_flow": [
                    "self",
                    "ya",
                    "yb",
                    "p"
                ],
                "time_flow": [
                    "self"
                ],
                "fun_peak": [
                    "self",
                    "x",
                    "y"
                ],
                "bc_peak": [
                    "self",
                    "ya",
                    "yb"
                ],
                "time_peak": [
                    "self"
                ],
                "fun_gas": [
                    "self",
                    "x",
                    "y"
                ],
                "bc_gas": [
                    "self",
                    "ya",
                    "yb"
                ],
                "time_gas": [
                    "self"
                ]
            },
            "Quad": {
                "setup": [
                    "self"
                ],
                "time_quad_python": [
                    "self"
                ],
                "time_quad_cython": [
                    "self"
                ],
                "time_quad_ctypes": [
                    "self"
                ],
                "time_quad_cffi": [
                    "self"
                ]
            }
        },
        "benchmarks.benchmarks.optimize_lap": {
            "random_uniform": [
                "shape"
            ],
            "random_logarithmic": [
                "shape"
            ],
            "random_integer": [
                "shape"
            ],
            "random_binary": [
                "shape"
            ],
            "random_spatial": [
                "shape"
            ],
            "LinearAssignment": {
                "setup": [
                    "self",
                    "shape",
                    "cost_type"
                ],
                "time_evaluation": [
                    "self"
                ]
            }
        },
        "benchmarks.benchmarks.sparse_csgraph_maxflow": {
            "MaximumFlow": {
                "setup": [
                    "self",
                    "n",
                    "density"
                ],
                "time_maximum_flow": [
                    "self",
                    "n",
                    "density"
                ]
            }
        },
        "benchmarks.benchmarks.blas_lapack": {
            "GetBlasLapackFuncs": {
                "setup": [
                    "self",
                    "dtype1",
                    "dtype2",
                    "dtype1_ord",
                    "dtype2_ord",
                    "size"
                ],
                "time_find_best_blas_type": [
                    "self",
                    "dtype1",
                    "dtype2",
                    "dtype1_ord",
                    "dtype2_ord",
                    "size"
                ]
            }
        },
        "benchmarks.benchmarks.sparse_csgraph_djisktra": {
            "Dijkstra": {
                "setup": [
                    "self",
                    "n",
                    "min_only"
                ],
                "time_dijkstra_multi": [
                    "self",
                    "n",
                    "min_only"
                ]
            }
        },
        "benchmarks.benchmarks.stats": {
            "Anderson_KSamp": {
                "setup": [
                    "self"
                ],
                "time_anderson_ksamp": [
                    "self"
                ]
            },
            "CorrelationFunctions": {
                "setup": [
                    "self",
                    "mode"
                ],
                "time_fisher_exact": [
                    "self",
                    "alternative"
                ]
            },
            "InferentialStats": {
                "setup": [
                    "self"
                ],
                "time_ttest_ind_same_var": [
                    "self"
                ],
                "time_ttest_ind_diff_var": [
                    "self"
                ]
            },
            "Distribution": {
                "setup": [
                    "self",
                    "distribution",
                    "properties"
                ],
                "time_distribution": [
                    "self",
                    "distribution",
                    "properties"
                ]
            },
            "DescriptiveStats": {
                "setup": [
                    "self",
                    "n_levels"
                ],
                "time_mode": [
                    "self",
                    "n_levels"
                ]
            },
            "GaussianKDE": {
                "setup": [
                    "self"
                ],
                "time_gaussian_kde_evaluate_few_points": [
                    "self"
                ],
                "time_gaussian_kde_evaluate_many_points": [
                    "self"
                ]
            },
            "GroupSampling": {
                "setup": [
                    "self",
                    "dim"
                ],
                "time_unitary_group": [
                    "self",
                    "dim"
                ],
                "time_ortho_group": [
                    "self",
                    "dim"
                ],
                "time_special_ortho_group": [
                    "self",
                    "dim"
                ]
            },
            "BinnedStatisticDD": {
                "setup": [
                    "self",
                    "statistic"
                ],
                "time_binned_statistic_dd": [
                    "self",
                    "statistic"
                ],
                "time_binned_statistic_dd_reuse_bin": [
                    "self",
                    "statistic"
                ]
            },
            "ContinuousFitAnalyticalMLEOverride": {
                "setup": [
                    "self",
                    "dist_name",
                    "loc_fixed",
                    "scale_fixed",
                    "shape1_fixed",
                    "shape2_fixed",
                    "shape3_fixed"
                ],
                "time_fit": [
                    "self",
                    "dist_name",
                    "loc_fixed",
                    "scale_fixed",
                    "shape1_fixed",
                    "shape2_fixed",
                    "shape3_fixed"
                ]
            }
        },
        "benchmarks.benchmarks.cython_special": {
            "_CythonSpecialMeta": {
                "__new__": [
                    "cls",
                    "cls_name",
                    "bases",
                    "dct"
                ]
            },
            "CythonSpecial": {
                "setup": [
                    "self",
                    "name",
                    "args",
                    "N",
                    "api"
                ]
            }
        },
        "benchmarks.benchmarks.special": {
            "Airy": {
                "time_ai_zeros": [
                    "self"
                ],
                "time_bi_zeros": [
                    "self"
                ]
            },
            "Erf": {
                "setup": [
                    "self"
                ],
                "time_real": [
                    "self",
                    "offset"
                ]
            },
            "Comb": {
                "setup": [
                    "self"
                ],
                "time_comb_exact": [
                    "self",
                    "N",
                    "k"
                ],
                "time_comb_float": [
                    "self"
                ]
            },
            "Loggamma": {
                "setup": [
                    "self"
                ],
                "time_loggamma_asymptotic": [
                    "self"
                ]
            },
            "Expn": {
                "setup": [
                    "self"
                ],
                "time_expn_large_n": [
                    "self"
                ]
            }
        },
        "benchmarks.benchmarks.optimize_linprog": {
            "klee_minty": [
                "D"
            ],
            "MagicSquare": {
                "setup": [
                    "self",
                    "meth",
                    "prob"
                ],
                "time_magic_square": [
                    "self",
                    "meth",
                    "prob"
                ],
                "track_magic_square": [
                    "self",
                    "meth",
                    "prob"
                ]
            },
            "KleeMinty": {
                "setup": [
                    "self",
                    "meth",
                    "dims"
                ],
                "time_klee_minty": [
                    "self",
                    "meth",
                    "dims"
                ],
                "track_klee_minty": [
                    "self",
                    "meth",
                    "prob"
                ]
            },
            "LpGen": {
                "setup": [
                    "self",
                    "meth",
                    "m",
                    "n"
                ],
                "time_lpgen": [
                    "self",
                    "meth",
                    "m",
                    "n"
                ]
            },
            "Netlib": {
                "setup": [
                    "self",
                    "meth",
                    "prob"
                ],
                "time_netlib": [
                    "self",
                    "meth",
                    "prob"
                ],
                "track_netlib": [
                    "self",
                    "meth",
                    "prob"
                ]
            },
            "Netlib_infeasible": {
                "setup": [
                    "self",
                    "meth",
                    "prob"
                ],
                "time_netlib_infeasible": [
                    "self",
                    "meth",
                    "prob"
                ],
                "track_netlib_infeasible": [
                    "self",
                    "meth",
                    "prob"
                ]
            }
        },
        "benchmarks.benchmarks.test_functions": {
            "SimpleQuadratic": {
                "fun": [
                    "self",
                    "x"
                ],
                "der": [
                    "self",
                    "x"
                ],
                "hess": [
                    "self",
                    "x"
                ]
            },
            "AsymmetricQuadratic": {
                "fun": [
                    "self",
                    "x"
                ],
                "der": [
                    "self",
                    "x"
                ],
                "hess": [
                    "self",
                    "x"
                ]
            },
            "SlowRosen": {
                "fun": [
                    "self",
                    "x"
                ]
            },
            "LJ": {
                "__init__": [
                    "self",
                    "eps",
                    "sig"
                ],
                "vij": [
                    "self",
                    "r"
                ],
                "dvij": [
                    "self",
                    "r"
                ],
                "fun": [
                    "self",
                    "coords"
                ],
                "der": [
                    "self",
                    "coords"
                ],
                "get_random_configuration": [
                    "self"
                ]
            },
            "LJ38": {},
            "LJ30": {},
            "LJ20": {},
            "LJ13": {},
            "Booth": {
                "fun": [
                    "self",
                    "coords"
                ],
                "der": [
                    "self",
                    "coords"
                ]
            },
            "Beale": {
                "fun": [
                    "self",
                    "coords"
                ],
                "der": [
                    "self",
                    "coords"
                ]
            },
            "HolderTable": {
                "fun": [
                    "self",
                    "x"
                ],
                "dabs": [
                    "self",
                    "x"
                ]
            },
            "Ackley": {
                "fun": [
                    "self",
                    "x"
                ],
                "der": [
                    "self",
                    "x"
                ]
            },
            "Levi": {
                "fun": [
                    "self",
                    "x"
                ],
                "der": [
                    "self",
                    "x"
                ]
            },
            "EggHolder": {
                "fun": [
                    "self",
                    "x"
                ]
            },
            "CrossInTray": {
                "fun": [
                    "self",
                    "x"
                ]
            },
            "Schaffer2": {
                "fun": [
                    "self",
                    "x"
                ]
            },
            "Schaffer4": {
                "fun": [
                    "self",
                    "x"
                ]
            }
        },
        "benchmarks.benchmarks.sparse_csgraph_matching": {
            "random_uniform": [
                "shape"
            ],
            "random_uniform_sparse": [
                "shape"
            ],
            "random_uniform_integer": [
                "shape"
            ],
            "random_geometric": [
                "shape"
            ],
            "random_two_cost": [
                "shape"
            ],
            "machol_wien": [
                "shape"
            ],
            "MaximumBipartiteMatching": {
                "setup": [
                    "self",
                    "n",
                    "density"
                ],
                "time_maximum_bipartite_matching": [
                    "self",
                    "n",
                    "density"
                ]
            },
            "MinWeightFullBipartiteMatching": {
                "setup": [
                    "self",
                    "shape",
                    "input_type"
                ],
                "time_evaluation": [
                    "self"
                ]
            }
        },
        "benchmarks.benchmarks.io_matlab": {
            "MemUsage": {
                "params": [
                    "self"
                ],
                "_get_sizes": [
                    "self"
                ],
                "setup": [
                    "self",
                    "size",
                    "compressed"
                ],
                "teardown": [
                    "self",
                    "size",
                    "compressed"
                ],
                "track_loadmat": [
                    "self",
                    "size",
                    "compressed"
                ],
                "track_savemat": [
                    "self",
                    "size",
                    "compressed"
                ]
            },
            "StructArr": {
                "make_structarr": [
                    "n_vars",
                    "n_fields",
                    "n_structs"
                ],
                "setup": [
                    "self",
                    "nvfs",
                    "compression"
                ],
                "time_savemat": [
                    "self",
                    "nvfs",
                    "compression"
                ],
                "time_loadmat": [
                    "self",
                    "nvfs",
                    "compression"
                ]
            }
        },
        "benchmarks.benchmarks.linalg_solve_toeplitz": {
            "SolveToeplitz": {
                "setup": [
                    "self",
                    "dtype",
                    "n",
                    "soltype"
                ],
                "time_solve_toeplitz": [
                    "self",
                    "dtype",
                    "n",
                    "soltype"
                ]
            }
        },
        "benchmarks.benchmarks.peak_finding": {
            "FindPeaks": {
                "setup": [
                    "self",
                    "distance"
                ],
                "time_find_peaks": [
                    "self",
                    "distance"
                ]
            },
            "PeakProminences": {
                "setup": [
                    "self",
                    "wlen"
                ],
                "time_peak_prominences": [
                    "self",
                    "wlen"
                ]
            },
            "PeakWidths": {
                "setup": [
                    "self",
                    "rel_height"
                ],
                "time_peak_widths": [
                    "self",
                    "rel_height"
                ]
            }
        },
        "benchmarks.benchmarks.fft_basic": {
            "random": [
                "size"
            ],
            "direct_dft": [
                "x"
            ],
            "direct_idft": [
                "x"
            ],
            "get_module": [
                "mod_name"
            ],
            "PyfftwBackend": {
                "__ua_function__": [
                    "method",
                    "args",
                    "kwargs"
                ]
            },
            "Fft": {
                "setup": [
                    "self",
                    "size",
                    "cmplx",
                    "module"
                ],
                "time_fft": [
                    "self",
                    "size",
                    "cmplx",
                    "module"
                ],
                "time_ifft": [
                    "self",
                    "size",
                    "cmplx",
                    "module"
                ]
            },
            "NextFastLen": {
                "setup": [
                    "self",
                    "size"
                ],
                "time_next_fast_len": [
                    "self",
                    "size"
                ],
                "time_next_fast_len_cached": [
                    "self",
                    "size"
                ]
            },
            "RFft": {
                "setup": [
                    "self",
                    "size",
                    "module"
                ],
                "time_rfft": [
                    "self",
                    "size",
                    "module"
                ],
                "time_irfft": [
                    "self",
                    "size",
                    "module"
                ]
            },
            "RealTransforms1D": {
                "setup": [
                    "self",
                    "size",
                    "type",
                    "module"
                ],
                "time_dct": [
                    "self",
                    "size",
                    "type",
                    "module"
                ],
                "time_dst": [
                    "self",
                    "size",
                    "type",
                    "module"
                ]
            },
            "Fftn": {
                "setup": [
                    "self",
                    "size",
                    "cmplx",
                    "module"
                ],
                "time_fftn": [
                    "self",
                    "size",
                    "cmplx",
                    "module"
                ]
            },
            "RealTransformsND": {
                "setup": [
                    "self",
                    "size",
                    "type",
                    "module"
                ],
                "time_dctn": [
                    "self",
                    "size",
                    "type",
                    "module"
                ],
                "time_dstn": [
                    "self",
                    "size",
                    "type",
                    "module"
                ]
            },
            "FftBackends": {
                "setup": [
                    "self",
                    "size",
                    "cmplx",
                    "backend"
                ],
                "time_fft": [
                    "self",
                    "size",
                    "cmplx",
                    "module"
                ],
                "time_ifft": [
                    "self",
                    "size",
                    "cmplx",
                    "module"
                ]
            },
            "FftnBackends": {
                "setup": [
                    "self",
                    "size",
                    "cmplx",
                    "backend"
                ],
                "time_fft": [
                    "self",
                    "size",
                    "cmplx",
                    "module"
                ],
                "time_ifft": [
                    "self",
                    "size",
                    "cmplx",
                    "module"
                ]
            },
            "FftThreading": {
                "setup": [
                    "self",
                    "size",
                    "num_transforms",
                    "method"
                ],
                "map_thread": [
                    "self",
                    "func"
                ],
                "time_fft": [
                    "self",
                    "size",
                    "num_transforms",
                    "method"
                ],
                "time_fftn": [
                    "self",
                    "size",
                    "num_transforms",
                    "method"
                ]
            }
        },
        "benchmarks.benchmarks.linalg_logm": {
            "Logm": {
                "setup": [
                    "self",
                    "dtype",
                    "n",
                    "structure"
                ],
                "time_logm": [
                    "self",
                    "dtype",
                    "n",
                    "structure"
                ]
            }
        },
        "benchmarks.benchmarks.linprog_benchmark_files": {},
        "benchmarks.benchmarks.tests": {},
        "benchmarks.benchmarks.tests.test_go_benchmark_functions": {
            "TestGoBenchmarkFunctions": {
                "setup_method": [
                    "self"
                ],
                "teardown_method": [
                    "self"
                ],
                "test_optimum_solution": [
                    "self"
                ],
                "test_solution_exists": [
                    "self"
                ],
                "test_bounds_access_subscriptable": [
                    "self"
                ],
                "test_redimension": [
                    "self"
                ]
            }
        },
        "benchmarks.benchmarks.go_benchmark_functions.go_funcs_O": {
            "OddSquare": {
                "__init__": [
                    "self",
                    "dimensions"
                ],
                "fun": [
                    "self",
                    "x"
                ]
            }
        },
        "benchmarks.benchmarks.go_benchmark_functions.go_funcs_M": {
            "Matyas": {
                "__init__": [
                    "self",
                    "dimensions"
                ],
                "fun": [
                    "self",
                    "x"
                ]
            },
            "McCormick": {
                "__init__": [
                    "self",
                    "dimensions"
                ],
                "fun": [
                    "self",
                    "x"
                ]
            },
            "Meyer": {
                "__init__": [
                    "self",
                    "dimensions"
                ],
                "fun": [
                    "self",
                    "x"
                ]
            },
            "Michalewicz": {
                "__init__": [
                    "self",
                    "dimensions"
                ],
                "fun": [
                    "self",
                    "x"
                ]
            },
            "MieleCantrell": {
                "__init__": [
                    "self",
                    "dimensions"
                ],
                "fun": [
                    "self",
                    "x"
                ]
            },
            "Mishra01": {
                "__init__": [
                    "self",
                    "dimensions"
                ],
                "fun": [
                    "self",
                    "x"
                ]
            },
            "Mishra02": {
                "__init__": [
                    "self",
                    "dimensions"
                ],
                "fun": [
                    "self",
                    "x"
                ]
            },
            "Mishra03": {
                "__init__": [
                    "self",
                    "dimensions"
                ],
                "fun": [
                    "self",
                    "x"
                ]
            },
            "Mishra04": {
                "__init__": [
                    "self",
                    "dimensions"
                ],
                "fun": [
                    "self",
                    "x"
                ]
            },
            "Mishra05": {
                "__init__": [
                    "self",
                    "dimensions"
                ],
                "fun": [
                    "self",
                    "x"
                ]
            },
            "Mishra06": {
                "__init__": [
                    "self",
                    "dimensions"
                ],
                "fun": [
                    "self",
                    "x"
                ]
            },
            "Mishra07": {
                "__init__": [
                    "self",
                    "dimensions"
                ],
                "fun": [
                    "self",
                    "x"
                ]
            },
            "Mishra08": {
                "__init__": [
                    "self",
                    "dimensions"
                ],
                "fun": [
                    "self",
                    "x"
                ]
            },
            "Mishra09": {
                "__init__": [
                    "self",
                    "dimensions"
                ],
                "fun": [
                    "self",
                    "x"
                ]
            },
            "Mishra10": {
                "__init__": [
                    "self",
                    "dimensions"
                ],
                "fun": [
                    "self",
                    "x"
                ]
            },
            "Mishra11": {
                "__init__": [
                    "self",
                    "dimensions"
                ],
                "fun": [
                    "self",
                    "x"
                ]
            },
            "MultiModal": {
                "__init__": [
                    "self",
                    "dimensions"
                ],
                "fun": [
                    "self",
                    "x"
                ]
            }
        },
        "benchmarks.benchmarks.go_benchmark_functions.go_funcs_D": {
            "Damavandi": {
                "__init__": [
                    "self",
                    "dimensions"
                ],
                "fun": [
                    "self",
                    "x"
                ],
                "success": [
                    "self",
                    "x"
                ]
            },
            "Deb01": {
                "__init__": [
                    "self",
                    "dimensions"
                ],
                "fun": [
                    "self",
                    "x"
                ]
            },
            "Deb03": {
                "__init__": [
                    "self",
                    "dimensions"
                ],
                "fun": [
                    "self",
                    "x"
                ]
            },
            "Decanomial": {
                "__init__": [
                    "self",
                    "dimensions"
                ],
                "fun": [
                    "self",
                    "x"
                ]
            },
            "Deceptive": {
                "__init__": [
                    "self",
                    "dimensions"
                ],
                "fun": [
                    "self",
                    "x"
                ]
            },
            "DeckkersAarts": {
                "__init__": [
                    "self",
                    "dimensions"
                ],
                "fun": [
                    "self",
                    "x"
                ]
            },
            "DeflectedCorrugatedSpring": {
                "__init__": [
                    "self",
                    "dimensions"
                ],
                "fun": [
                    "self",
                    "x"
                ]
            },
            "DeVilliersGlasser01": {
                "__init__": [
                    "self",
                    "dimensions"
                ],
                "fun": [
                    "self",
                    "x"
                ]
            },
            "DeVilliersGlasser02": {
                "__init__": [
                    "self",
                    "dimensions"
                ],
                "fun": [
                    "self",
                    "x"
                ]
            },
            "DixonPrice": {
                "__init__": [
                    "self",
                    "dimensions"
                ],
                "fun": [
                    "self",
                    "x"
                ]
            },
            "Dolan": {
                "__init__": [
                    "self",
                    "dimensions"
                ],
                "fun": [
                    "self",
                    "x"
                ]
            },
            "DropWave": {
                "__init__": [
                    "self",
                    "dimensions"
                ],
                "fun": [
                    "self",
                    "x"
                ]
            }
        },
        "benchmarks.benchmarks.go_benchmark_functions.go_funcs_A": {
            "Ackley01": {
                "__init__": [
                    "self",
                    "dimensions"
                ],
                "fun": [
                    "self",
                    "x"
                ]
            },
            "Ackley02": {
                "__init__": [
                    "self",
                    "dimensions"
                ],
                "fun": [
                    "self",
                    "x"
                ]
            },
            "Ackley03": {
                "__init__": [
                    "self",
                    "dimensions"
                ],
                "fun": [
                    "self",
                    "x"
                ]
            },
            "Adjiman": {
                "__init__": [
                    "self",
                    "dimensions"
                ],
                "fun": [
                    "self",
                    "x"
                ]
            },
            "Alpine01": {
                "__init__": [
                    "self",
                    "dimensions"
                ],
                "fun": [
                    "self",
                    "x"
                ]
            },
            "Alpine02": {
                "__init__": [
                    "self",
                    "dimensions"
                ],
                "fun": [
                    "self",
                    "x"
                ]
            },
            "AMGM": {
                "__init__": [
                    "self",
                    "dimensions"
                ],
                "fun": [
                    "self",
                    "x"
                ]
            }
        },
        "benchmarks.benchmarks.go_benchmark_functions.go_funcs_L": {
            "Langermann": {
                "__init__": [
                    "self",
                    "dimensions"
                ],
                "fun": [
                    "self",
                    "x"
                ]
            },
            "LennardJones": {
                "__init__": [
                    "self",
                    "dimensions"
                ],
                "change_dimensions": [
                    "self",
                    "ndim"
                ],
                "fun": [
                    "self",
                    "x"
                ]
            },
            "Leon": {
                "__init__": [
                    "self",
                    "dimensions"
                ],
                "fun": [
                    "self",
                    "x"
                ]
            },
            "Levy03": {
                "__init__": [
                    "self",
                    "dimensions"
                ],
                "fun": [
                    "self",
                    "x"
                ]
            },
            "Levy05": {
                "__init__": [
                    "self",
                    "dimensions"
                ],
                "fun": [
                    "self",
                    "x"
                ]
            },
            "Levy13": {
                "__init__": [
                    "self",
                    "dimensions"
                ],
                "fun": [
                    "self",
                    "x"
                ]
            }
        },
        "benchmarks.benchmarks.go_benchmark_functions.go_funcs_J": {
            "JennrichSampson": {
                "__init__": [
                    "self",
                    "dimensions"
                ],
                "fun": [
                    "self",
                    "x"
                ]
            },
            "Judge": {
                "__init__": [
                    "self",
                    "dimensions"
                ],
                "fun": [
                    "self",
                    "x"
                ]
            }
        },
        "benchmarks.benchmarks.go_benchmark_functions.go_funcs_G": {
            "Gear": {
                "__init__": [
                    "self",
                    "dimensions"
                ],
                "fun": [
                    "self",
                    "x"
                ]
            },
            "Giunta": {
                "__init__": [
                    "self",
                    "dimensions"
                ],
                "fun": [
                    "self",
                    "x"
                ]
            },
            "GoldsteinPrice": {
                "__init__": [
                    "self",
                    "dimensions"
                ],
                "fun": [
                    "self",
                    "x"
                ]
            },
            "Griewank": {
                "__init__": [
                    "self",
                    "dimensions"
                ],
                "fun": [
                    "self",
                    "x"
                ]
            },
            "Gulf": {
                "__init__": [
                    "self",
                    "dimensions"
                ],
                "fun": [
                    "self",
                    "x"
                ]
            }
        },
        "benchmarks.benchmarks.go_benchmark_functions.go_funcs_E": {
            "Easom": {
                "__init__": [
                    "self",
                    "dimensions"
                ],
                "fun": [
                    "self",
                    "x"
                ]
            },
            "Eckerle4": {
                "__init__": [
                    "self",
                    "dimensions"
                ],
                "fun": [
                    "self",
                    "x"
                ]
            },
            "EggCrate": {
                "__init__": [
                    "self",
                    "dimensions"
                ],
                "fun": [
                    "self",
                    "x"
                ]
            },
            "EggHolder": {
                "__init__": [
                    "self",
                    "dimensions"
                ],
                "fun": [
                    "self",
                    "x"
                ]
            },
            "ElAttarVidyasagarDutta": {
                "__init__": [
                    "self",
                    "dimensions"
                ],
                "fun": [
                    "self",
                    "x"
                ]
            },
            "Exp2": {
                "__init__": [
                    "self",
                    "dimensions"
                ],
                "fun": [
                    "self",
                    "x"
                ]
            },
            "Exponential": {
                "__init__": [
                    "self",
                    "dimensions"
                ],
                "fun": [
                    "self",
                    "x"
                ]
            }
        },
        "benchmarks.benchmarks.go_benchmark_functions.go_funcs_univariate": {
            "Problem02": {
                "__init__": [
                    "self",
                    "dimensions"
                ],
                "fun": [
                    "self",
                    "x"
                ]
            },
            "Problem03": {
                "__init__": [
                    "self",
                    "dimensions"
                ],
                "fun": [
                    "self",
                    "x"
                ]
            },
            "Problem04": {
                "__init__": [
                    "self",
                    "dimensions"
                ],
                "fun": [
                    "self",
                    "x"
                ]
            },
            "Problem05": {
                "__init__": [
                    "self",
                    "dimensions"
                ],
                "fun": [
                    "self",
                    "x"
                ]
            },
            "Problem06": {
                "__init__": [
                    "self",
                    "dimensions"
                ],
                "fun": [
                    "self",
                    "x"
                ]
            },
            "Problem07": {
                "__init__": [
                    "self",
                    "dimensions"
                ],
                "fun": [
                    "self",
                    "x"
                ]
            },
            "Problem08": {
                "__init__": [
                    "self",
                    "dimensions"
                ],
                "fun": [
                    "self",
                    "x"
                ]
            },
            "Problem09": {
                "__init__": [
                    "self",
                    "dimensions"
                ],
                "fun": [
                    "self",
                    "x"
                ]
            },
            "Problem10": {
                "__init__": [
                    "self",
                    "dimensions"
                ],
                "fun": [
                    "self",
                    "x"
                ]
            },
            "Problem11": {
                "__init__": [
                    "self",
                    "dimensions"
                ],
                "fun": [
                    "self",
                    "x"
                ]
            },
            "Problem12": {
                "__init__": [
                    "self",
                    "dimensions"
                ],
                "fun": [
                    "self",
                    "x"
                ]
            },
            "Problem13": {
                "__init__": [
                    "self",
                    "dimensions"
                ],
                "fun": [
                    "self",
                    "x"
                ]
            },
            "Problem14": {
                "__init__": [
                    "self",
                    "dimensions"
                ],
                "fun": [
                    "self",
                    "x"
                ]
            },
            "Problem15": {
                "__init__": [
                    "self",
                    "dimensions"
                ],
                "fun": [
                    "self",
                    "x"
                ]
            },
            "Problem18": {
                "__init__": [
                    "self",
                    "dimensions"
                ],
                "fun": [
                    "self",
                    "x"
                ]
            },
            "Problem20": {
                "__init__": [
                    "self",
                    "dimensions"
                ],
                "fun": [
                    "self",
                    "x"
                ]
            },
            "Problem21": {
                "__init__": [
                    "self",
                    "dimensions"
                ],
                "fun": [
                    "self",
                    "x"
                ]
            },
            "Problem22": {
                "__init__": [
                    "self",
                    "dimensions"
                ],
                "fun": [
                    "self",
                    "x"
                ]
            }
        },
        "benchmarks.benchmarks.go_benchmark_functions.go_funcs_B": {
            "BartelsConn": {
                "__init__": [
                    "self",
                    "dimensions"
                ],
                "fun": [
                    "self",
                    "x"
                ]
            },
            "Beale": {
                "__init__": [
                    "self",
                    "dimensions"
                ],
                "fun": [
                    "self",
                    "x"
                ]
            },
            "BiggsExp02": {
                "__init__": [
                    "self",
                    "dimensions"
                ],
                "fun": [
                    "self",
                    "x"
                ]
            },
            "BiggsExp03": {
                "__init__": [
                    "self",
                    "dimensions"
                ],
                "fun": [
                    "self",
                    "x"
                ]
            },
            "BiggsExp04": {
                "__init__": [
                    "self",
                    "dimensions"
                ],
                "fun": [
                    "self",
                    "x"
                ]
            },
            "BiggsExp05": {
                "__init__": [
                    "self",
                    "dimensions"
                ],
                "fun": [
                    "self",
                    "x"
                ]
            },
            "Bird": {
                "__init__": [
                    "self",
                    "dimensions"
                ],
                "fun": [
                    "self",
                    "x"
                ]
            },
            "Bohachevsky1": {
                "__init__": [
                    "self",
                    "dimensions"
                ],
                "fun": [
                    "self",
                    "x"
                ]
            },
            "Bohachevsky2": {
                "__init__": [
                    "self",
                    "dimensions"
                ],
                "fun": [
                    "self",
                    "x"
                ]
            },
            "Bohachevsky3": {
                "__init__": [
                    "self",
                    "dimensions"
                ],
                "fun": [
                    "self",
                    "x"
                ]
            },
            "BoxBetts": {
                "__init__": [
                    "self",
                    "dimensions"
                ],
                "fun": [
                    "self",
                    "x"
                ]
            },
            "Branin01": {
                "__init__": [
                    "self",
                    "dimensions"
                ],
                "fun": [
                    "self",
                    "x"
                ]
            },
            "Branin02": {
                "__init__": [
                    "self",
                    "dimensions"
                ],
                "fun": [
                    "self",
                    "x"
                ]
            },
            "Brent": {
                "__init__": [
                    "self",
                    "dimensions"
                ],
                "fun": [
                    "self",
                    "x"
                ]
            },
            "Brown": {
                "__init__": [
                    "self",
                    "dimensions"
                ],
                "fun": [
                    "self",
                    "x"
                ]
            },
            "Bukin02": {
                "__init__": [
                    "self",
                    "dimensions"
                ],
                "fun": [
                    "self",
                    "x"
                ]
            },
            "Bukin04": {
                "__init__": [
                    "self",
                    "dimensions"
                ],
                "fun": [
                    "self",
                    "x"
                ]
            },
            "Bukin06": {
                "__init__": [
                    "self",
                    "dimensions"
                ],
                "fun": [
                    "self",
                    "x"
                ]
            }
        },
        "benchmarks.benchmarks.go_benchmark_functions.go_funcs_T": {
            "TestTubeHolder": {
                "__init__": [
                    "self",
                    "dimensions"
                ],
                "fun": [
                    "self",
                    "x"
                ]
            },
            "Thurber": {
                "__init__": [
                    "self",
                    "dimensions"
                ],
                "fun": [
                    "self",
                    "x"
                ]
            },
            "Treccani": {
                "__init__": [
                    "self",
                    "dimensions"
                ],
                "fun": [
                    "self",
                    "x"
                ]
            },
            "Trefethen": {
                "__init__": [
                    "self",
                    "dimensions"
                ],
                "fun": [
                    "self",
                    "x"
                ]
            },
            "ThreeHumpCamel": {
                "__init__": [
                    "self",
                    "dimensions"
                ],
                "fun": [
                    "self",
                    "x"
                ]
            },
            "Trid": {
                "__init__": [
                    "self",
                    "dimensions"
                ],
                "fun": [
                    "self",
                    "x"
                ]
            },
            "Trigonometric01": {
                "__init__": [
                    "self",
                    "dimensions"
                ],
                "fun": [
                    "self",
                    "x"
                ]
            },
            "Trigonometric02": {
                "__init__": [
                    "self",
                    "dimensions"
                ],
                "fun": [
                    "self",
                    "x"
                ]
            },
            "Tripod": {
                "__init__": [
                    "self",
                    "dimensions"
                ],
                "fun": [
                    "self",
                    "x"
                ]
            }
        },
        "benchmarks.benchmarks.go_benchmark_functions.go_funcs_N": {
            "NeedleEye": {
                "__init__": [
                    "self",
                    "dimensions"
                ],
                "fun": [
                    "self",
                    "x"
                ]
            },
            "NewFunction01": {
                "__init__": [
                    "self",
                    "dimensions"
                ],
                "fun": [
                    "self",
                    "x"
                ]
            },
            "NewFunction02": {
                "__init__": [
                    "self",
                    "dimensions"
                ],
                "fun": [
                    "self",
                    "x"
                ]
            }
        },
        "benchmarks.benchmarks.go_benchmark_functions.go_funcs_F": {
            "FreudensteinRoth": {
                "__init__": [
                    "self",
                    "dimensions"
                ],
                "fun": [
                    "self",
                    "x"
                ]
            }
        },
        "benchmarks.benchmarks.go_benchmark_functions.go_funcs_X": {
            "XinSheYang01": {
                "__init__": [
                    "self",
                    "dimensions"
                ],
                "fun": [
                    "self",
                    "x"
                ]
            },
            "XinSheYang02": {
                "__init__": [
                    "self",
                    "dimensions"
                ],
                "fun": [
                    "self",
                    "x"
                ]
            },
            "XinSheYang03": {
                "__init__": [
                    "self",
                    "dimensions"
                ],
                "fun": [
                    "self",
                    "x"
                ]
            },
            "XinSheYang04": {
                "__init__": [
                    "self",
                    "dimensions"
                ],
                "fun": [
                    "self",
                    "x"
                ]
            },
            "Xor": {
                "__init__": [
                    "self",
                    "dimensions"
                ],
                "fun": [
                    "self",
                    "x"
                ]
            }
        },
        "benchmarks.benchmarks.go_benchmark_functions.go_funcs_Q": {
            "Qing": {
                "__init__": [
                    "self",
                    "dimensions"
                ],
                "fun": [
                    "self",
                    "x"
                ]
            },
            "Quadratic": {
                "__init__": [
                    "self",
                    "dimensions"
                ],
                "fun": [
                    "self",
                    "x"
                ]
            },
            "Quintic": {
                "__init__": [
                    "self",
                    "dimensions"
                ],
                "fun": [
                    "self",
                    "x"
                ]
            }
        },
        "benchmarks.benchmarks.go_benchmark_functions.go_funcs_V": {
            "VenterSobiezcczanskiSobieski": {
                "__init__": [
                    "self",
                    "dimensions"
                ],
                "fun": [
                    "self",
                    "x"
                ]
            },
            "Vincent": {
                "__init__": [
                    "self",
                    "dimensions"
                ],
                "fun": [
                    "self",
                    "x"
                ]
            }
        },
        "benchmarks.benchmarks.go_benchmark_functions.go_funcs_C": {
            "CarromTable": {
                "__init__": [
                    "self",
                    "dimensions"
                ],
                "fun": [
                    "self",
                    "x"
                ]
            },
            "Chichinadze": {
                "__init__": [
                    "self",
                    "dimensions"
                ],
                "fun": [
                    "self",
                    "x"
                ]
            },
            "Cigar": {
                "__init__": [
                    "self",
                    "dimensions"
                ],
                "fun": [
                    "self",
                    "x"
                ]
            },
            "Cola": {
                "__init__": [
                    "self",
                    "dimensions"
                ],
                "fun": [
                    "self",
                    "x"
                ]
            },
            "Colville": {
                "__init__": [
                    "self",
                    "dimensions"
                ],
                "fun": [
                    "self",
                    "x"
                ]
            },
            "Corana": {
                "__init__": [
                    "self",
                    "dimensions"
                ],
                "fun": [
                    "self",
                    "x"
                ]
            },
            "CosineMixture": {
                "__init__": [
                    "self",
                    "dimensions"
                ],
                "fun": [
                    "self",
                    "x"
                ]
            },
            "CrossInTray": {
                "__init__": [
                    "self",
                    "dimensions"
                ],
                "fun": [
                    "self",
                    "x"
                ]
            },
            "CrossLegTable": {
                "__init__": [
                    "self",
                    "dimensions"
                ],
                "fun": [
                    "self",
                    "x"
                ]
            },
            "CrownedCross": {
                "__init__": [
                    "self",
                    "dimensions"
                ],
                "fun": [
                    "self",
                    "x"
                ]
            },
            "Csendes": {
                "__init__": [
                    "self",
                    "dimensions"
                ],
                "fun": [
                    "self",
                    "x"
                ],
                "success": [
                    "self",
                    "x"
                ]
            },
            "Cube": {
                "__init__": [
                    "self",
                    "dimensions"
                ],
                "fun": [
                    "self",
                    "x"
                ]
            }
        },
        "benchmarks.benchmarks.go_benchmark_functions": {},
        "benchmarks.benchmarks.go_benchmark_functions.go_funcs_Z": {
            "Zacharov": {
                "__init__": [
                    "self",
                    "dimensions"
                ],
                "fun": [
                    "self",
                    "x"
                ]
            },
            "ZeroSum": {
                "__init__": [
                    "self",
                    "dimensions"
                ],
                "fun": [
                    "self",
                    "x"
                ]
            },
            "Zettl": {
                "__init__": [
                    "self",
                    "dimensions"
                ],
                "fun": [
                    "self",
                    "x"
                ]
            },
            "Zimmerman": {
                "__init__": [
                    "self",
                    "dimensions"
                ],
                "fun": [
                    "self",
                    "x"
                ]
            },
            "Zirilli": {
                "__init__": [
                    "self",
                    "dimensions"
                ],
                "fun": [
                    "self",
                    "x"
                ]
            }
        },
        "benchmarks.benchmarks.go_benchmark_functions.go_funcs_W": {
            "Watson": {
                "__init__": [
                    "self",
                    "dimensions"
                ],
                "fun": [
                    "self",
                    "x"
                ]
            },
            "Wavy": {
                "__init__": [
                    "self",
                    "dimensions"
                ],
                "fun": [
                    "self",
                    "x"
                ]
            },
            "WayburnSeader01": {
                "__init__": [
                    "self",
                    "dimensions"
                ],
                "fun": [
                    "self",
                    "x"
                ]
            },
            "WayburnSeader02": {
                "__init__": [
                    "self",
                    "dimensions"
                ],
                "fun": [
                    "self",
                    "x"
                ]
            },
            "Weierstrass": {
                "__init__": [
                    "self",
                    "dimensions"
                ],
                "fun": [
                    "self",
                    "x"
                ]
            },
            "Whitley": {
                "__init__": [
                    "self",
                    "dimensions"
                ],
                "fun": [
                    "self",
                    "x"
                ]
            },
            "Wolfe": {
                "__init__": [
                    "self",
                    "dimensions"
                ],
                "fun": [
                    "self",
                    "x"
                ]
            }
        },
        "benchmarks.benchmarks.go_benchmark_functions.go_funcs_I": {
            "Infinity": {
                "__init__": [
                    "self",
                    "dimensions"
                ],
                "fun": [
                    "self",
                    "x"
                ]
            }
        },
        "benchmarks.benchmarks.go_benchmark_functions.go_funcs_H": {
            "Hansen": {
                "__init__": [
                    "self",
                    "dimensions"
                ],
                "fun": [
                    "self",
                    "x"
                ]
            },
            "Hartmann3": {
                "__init__": [
                    "self",
                    "dimensions"
                ],
                "fun": [
                    "self",
                    "x"
                ]
            },
            "Hartmann6": {
                "__init__": [
                    "self",
                    "dimensions"
                ],
                "fun": [
                    "self",
                    "x"
                ]
            },
            "HelicalValley": {
                "__init__": [
                    "self",
                    "dimensions"
                ],
                "fun": [
                    "self",
                    "x"
                ]
            },
            "HimmelBlau": {
                "__init__": [
                    "self",
                    "dimensions"
                ],
                "fun": [
                    "self",
                    "x"
                ]
            },
            "HolderTable": {
                "__init__": [
                    "self",
                    "dimensions"
                ],
                "fun": [
                    "self",
                    "x"
                ]
            },
            "Hosaki": {
                "__init__": [
                    "self",
                    "dimensions"
                ],
                "fun": [
                    "self",
                    "x"
                ]
            }
        },
        "benchmarks.benchmarks.go_benchmark_functions.go_funcs_Y": {
            "YaoLiu04": {
                "__init__": [
                    "self",
                    "dimensions"
                ],
                "fun": [
                    "self",
                    "x"
                ]
            },
            "YaoLiu09": {
                "__init__": [
                    "self",
                    "dimensions"
                ],
                "fun": [
                    "self",
                    "x"
                ]
            }
        },
        "benchmarks.benchmarks.go_benchmark_functions.go_funcs_U": {
            "Ursem01": {
                "__init__": [
                    "self",
                    "dimensions"
                ],
                "fun": [
                    "self",
                    "x"
                ]
            },
            "Ursem03": {
                "__init__": [
                    "self",
                    "dimensions"
                ],
                "fun": [
                    "self",
                    "x"
                ]
            },
            "Ursem04": {
                "__init__": [
                    "self",
                    "dimensions"
                ],
                "fun": [
                    "self",
                    "x"
                ]
            },
            "UrsemWaves": {
                "__init__": [
                    "self",
                    "dimensions"
                ],
                "fun": [
                    "self",
                    "x"
                ]
            }
        },
        "benchmarks.benchmarks.go_benchmark_functions.go_funcs_P": {
            "Parsopoulos": {
                "__init__": [
                    "self",
                    "dimensions"
                ],
                "fun": [
                    "self",
                    "x"
                ]
            },
            "Pathological": {
                "__init__": [
                    "self",
                    "dimensions"
                ],
                "fun": [
                    "self",
                    "x"
                ]
            },
            "Paviani": {
                "__init__": [
                    "self",
                    "dimensions"
                ],
                "fun": [
                    "self",
                    "x"
                ]
            },
            "Penalty01": {
                "__init__": [
                    "self",
                    "dimensions"
                ],
                "fun": [
                    "self",
                    "x"
                ]
            },
            "Penalty02": {
                "__init__": [
                    "self",
                    "dimensions"
                ],
                "fun": [
                    "self",
                    "x"
                ]
            },
            "PenHolder": {
                "__init__": [
                    "self",
                    "dimensions"
                ],
                "fun": [
                    "self",
                    "x"
                ]
            },
            "PermFunction01": {
                "__init__": [
                    "self",
                    "dimensions"
                ],
                "fun": [
                    "self",
                    "x"
                ]
            },
            "PermFunction02": {
                "__init__": [
                    "self",
                    "dimensions"
                ],
                "fun": [
                    "self",
                    "x"
                ]
            },
            "Pinter": {
                "__init__": [
                    "self",
                    "dimensions"
                ],
                "fun": [
                    "self",
                    "x"
                ]
            },
            "Plateau": {
                "__init__": [
                    "self",
                    "dimensions"
                ],
                "fun": [
                    "self",
                    "x"
                ]
            },
            "Powell": {
                "__init__": [
                    "self",
                    "dimensions"
                ],
                "fun": [
                    "self",
                    "x"
                ]
            },
            "PowerSum": {
                "__init__": [
                    "self",
                    "dimensions"
                ],
                "fun": [
                    "self",
                    "x"
                ]
            },
            "Price01": {
                "__init__": [
                    "self",
                    "dimensions"
                ],
                "fun": [
                    "self",
                    "x"
                ]
            },
            "Price02": {
                "__init__": [
                    "self",
                    "dimensions"
                ],
                "fun": [
                    "self",
                    "x"
                ]
            },
            "Price03": {
                "__init__": [
                    "self",
                    "dimensions"
                ],
                "fun": [
                    "self",
                    "x"
                ]
            },
            "Price04": {
                "__init__": [
                    "self",
                    "dimensions"
                ],
                "fun": [
                    "self",
                    "x"
                ]
            }
        },
        "benchmarks.benchmarks.go_benchmark_functions.go_funcs_R": {
            "Rana": {
                "__init__": [
                    "self",
                    "dimensions"
                ],
                "fun": [
                    "self",
                    "x"
                ]
            },
            "Rastrigin": {
                "__init__": [
                    "self",
                    "dimensions"
                ],
                "fun": [
                    "self",
                    "x"
                ]
            },
            "Ratkowsky01": {
                "__init__": [
                    "self",
                    "dimensions"
                ],
                "fun": [
                    "self",
                    "x"
                ]
            },
            "Ratkowsky02": {
                "__init__": [
                    "self",
                    "dimensions"
                ],
                "fun": [
                    "self",
                    "x"
                ]
            },
            "Ripple01": {
                "__init__": [
                    "self",
                    "dimensions"
                ],
                "fun": [
                    "self",
                    "x"
                ]
            },
            "Ripple25": {
                "__init__": [
                    "self",
                    "dimensions"
                ],
                "fun": [
                    "self",
                    "x"
                ]
            },
            "Rosenbrock": {
                "__init__": [
                    "self",
                    "dimensions"
                ],
                "fun": [
                    "self",
                    "x"
                ]
            },
            "RosenbrockModified": {
                "__init__": [
                    "self",
                    "dimensions"
                ],
                "fun": [
                    "self",
                    "x"
                ]
            },
            "RotatedEllipse01": {
                "__init__": [
                    "self",
                    "dimensions"
                ],
                "fun": [
                    "self",
                    "x"
                ]
            },
            "RotatedEllipse02": {
                "__init__": [
                    "self",
                    "dimensions"
                ],
                "fun": [
                    "self",
                    "x"
                ]
            }
        },
        "benchmarks.benchmarks.go_benchmark_functions.go_benchmark": {
            "Benchmark": {
                "__init__": [
                    "self",
                    "dimensions"
                ],
                "__str__": [
                    "self"
                ],
                "__repr__": [
                    "self"
                ],
                "initial_vector": [
                    "self"
                ],
                "success": [
                    "self",
                    "x",
                    "tol"
                ],
                "fun": [
                    "self",
                    "x"
                ],
                "change_dimensions": [
                    "self",
                    "ndim"
                ],
                "bounds": [
                    "self"
                ],
                "N": [
                    "self"
                ],
                "xmin": [
                    "self"
                ],
                "xmax": [
                    "self"
                ]
            }
        },
        "benchmarks.benchmarks.go_benchmark_functions.go_funcs_S": {
            "Salomon": {
                "__init__": [
                    "self",
                    "dimensions"
                ],
                "fun": [
                    "self",
                    "x"
                ]
            },
            "Sargan": {
                "__init__": [
                    "self",
                    "dimensions"
                ],
                "fun": [
                    "self",
                    "x"
                ]
            },
            "Schaffer01": {
                "__init__": [
                    "self",
                    "dimensions"
                ],
                "fun": [
                    "self",
                    "x"
                ]
            },
            "Schaffer02": {
                "__init__": [
                    "self",
                    "dimensions"
                ],
                "fun": [
                    "self",
                    "x"
                ]
            },
            "Schaffer03": {
                "__init__": [
                    "self",
                    "dimensions"
                ],
                "fun": [
                    "self",
                    "x"
                ]
            },
            "Schaffer04": {
                "__init__": [
                    "self",
                    "dimensions"
                ],
                "fun": [
                    "self",
                    "x"
                ]
            },
            "Schwefel01": {
                "__init__": [
                    "self",
                    "dimensions"
                ],
                "fun": [
                    "self",
                    "x"
                ]
            },
            "Schwefel02": {
                "__init__": [
                    "self",
                    "dimensions"
                ],
                "fun": [
                    "self",
                    "x"
                ]
            },
            "Schwefel04": {
                "__init__": [
                    "self",
                    "dimensions"
                ],
                "fun": [
                    "self",
                    "x"
                ]
            },
            "Schwefel06": {
                "__init__": [
                    "self",
                    "dimensions"
                ],
                "fun": [
                    "self",
                    "x"
                ]
            },
            "Schwefel20": {
                "__init__": [
                    "self",
                    "dimensions"
                ],
                "fun": [
                    "self",
                    "x"
                ]
            },
            "Schwefel21": {
                "__init__": [
                    "self",
                    "dimensions"
                ],
                "fun": [
                    "self",
                    "x"
                ]
            },
            "Schwefel22": {
                "__init__": [
                    "self",
                    "dimensions"
                ],
                "fun": [
                    "self",
                    "x"
                ]
            },
            "Schwefel26": {
                "__init__": [
                    "self",
                    "dimensions"
                ],
                "fun": [
                    "self",
                    "x"
                ]
            },
            "Schwefel36": {
                "__init__": [
                    "self",
                    "dimensions"
                ],
                "fun": [
                    "self",
                    "x"
                ]
            },
            "Shekel05": {
                "__init__": [
                    "self",
                    "dimensions"
                ],
                "fun": [
                    "self",
                    "x"
                ]
            },
            "Shekel07": {
                "__init__": [
                    "self",
                    "dimensions"
                ],
                "fun": [
                    "self",
                    "x"
                ]
            },
            "Shekel10": {
                "__init__": [
                    "self",
                    "dimensions"
                ],
                "fun": [
                    "self",
                    "x"
                ]
            },
            "Shubert01": {
                "__init__": [
                    "self",
                    "dimensions"
                ],
                "fun": [
                    "self",
                    "x"
                ]
            },
            "Shubert03": {
                "__init__": [
                    "self",
                    "dimensions"
                ],
                "fun": [
                    "self",
                    "x"
                ]
            },
            "Shubert04": {
                "__init__": [
                    "self",
                    "dimensions"
                ],
                "fun": [
                    "self",
                    "x"
                ]
            },
            "SineEnvelope": {
                "__init__": [
                    "self",
                    "dimensions"
                ],
                "fun": [
                    "self",
                    "x"
                ]
            },
            "SixHumpCamel": {
                "__init__": [
                    "self",
                    "dimensions"
                ],
                "fun": [
                    "self",
                    "x"
                ]
            },
            "Sodp": {
                "__init__": [
                    "self",
                    "dimensions"
                ],
                "fun": [
                    "self",
                    "x"
                ]
            },
            "Sphere": {
                "__init__": [
                    "self",
                    "dimensions"
                ],
                "fun": [
                    "self",
                    "x"
                ]
            },
            "Step": {
                "__init__": [
                    "self",
                    "dimensions"
                ],
                "fun": [
                    "self",
                    "x"
                ]
            },
            "Step2": {
                "__init__": [
                    "self",
                    "dimensions"
                ],
                "fun": [
                    "self",
                    "x"
                ]
            },
            "Stochastic": {
                "__init__": [
                    "self",
                    "dimensions"
                ],
                "fun": [
                    "self",
                    "x"
                ]
            },
            "StretchedV": {
                "__init__": [
                    "self",
                    "dimensions"
                ],
                "fun": [
                    "self",
                    "x"
                ]
            },
            "StyblinskiTang": {
                "__init__": [
                    "self",
                    "dimensions"
                ],
                "fun": [
                    "self",
                    "x"
                ]
            }
        },
        "benchmarks.benchmarks.go_benchmark_functions.go_funcs_K": {
            "Katsuura": {
                "__init__": [
                    "self",
                    "dimensions"
                ],
                "fun": [
                    "self",
                    "x"
                ]
            },
            "Keane": {
                "__init__": [
                    "self",
                    "dimensions"
                ],
                "fun": [
                    "self",
                    "x"
                ]
            },
            "Kowalik": {
                "__init__": [
                    "self",
                    "dimensions"
                ],
                "fun": [
                    "self",
                    "x"
                ]
            }
        },
        "scipy.setup": {
            "configuration": [
                "parent_package",
                "top_path"
            ]
        },
        "scipy": {},
        "scipy.conftest": {
            "pytest_configure": [
                "config"
            ],
            "_get_mark": [
                "item",
                "name"
            ],
            "pytest_runtest_setup": [
                "item"
            ],
            "check_fpu_mode": [
                "request"
            ]
        },
        "scipy.version": {},
        "scipy._distributor_init": {},
        "scipy.interpolate.rbf": {
            "Rbf": {
                "_h_multiquadric": [
                    "self",
                    "r"
                ],
                "_h_inverse_multiquadric": [
                    "self",
                    "r"
                ],
                "_h_gaussian": [
                    "self",
                    "r"
                ],
                "_h_linear": [
                    "self",
                    "r"
                ],
                "_h_cubic": [
                    "self",
                    "r"
                ],
                "_h_quintic": [
                    "self",
                    "r"
                ],
                "_h_thin_plate": [
                    "self",
                    "r"
                ],
                "_init_function": [
                    "self",
                    "r"
                ],
                "__init__": [
                    "self"
                ],
                "A": [
                    "self"
                ],
                "_call_norm": [
                    "self",
                    "x1",
                    "x2"
                ],
                "__call__": [
                    "self"
                ]
            }
        },
        "scipy.interpolate.fitpack": {
            "splprep": [
                "x",
                "w",
                "u",
                "ub",
                "ue",
                "k",
                "task",
                "s",
                "t",
                "full_output",
                "nest",
                "per",
                "quiet"
            ],
            "splrep": [
                "x",
                "y",
                "w",
                "xb",
                "xe",
                "k",
                "task",
                "s",
                "t",
                "full_output",
                "per",
                "quiet"
            ],
            "splev": [
                "x",
                "tck",
                "der",
                "ext"
            ],
            "splint": [
                "a",
                "b",
                "tck",
                "full_output"
            ],
            "sproot": [
                "tck",
                "mest"
            ],
            "spalde": [
                "x",
                "tck"
            ],
            "insert": [
                "x",
                "tck",
                "m",
                "per"
            ],
            "splder": [
                "tck",
                "n"
            ],
            "splantider": [
                "tck",
                "n"
            ]
        },
        "scipy.interpolate.interpolate": {
            "lagrange": [
                "x",
                "w"
            ],
            "_check_broadcast_up_to": [
                "arr_from",
                "shape_to",
                "name"
            ],
            "_do_extrapolate": [
                "fill_value"
            ],
            "interpn": [
                "points",
                "values",
                "xi",
                "method",
                "bounds_error",
                "fill_value"
            ],
            "interp2d": {
                "__init__": [
                    "self",
                    "x",
                    "y",
                    "z",
                    "kind",
                    "copy",
                    "bounds_error",
                    "fill_value"
                ],
                "__call__": [
                    "self",
                    "x",
                    "y",
                    "dx",
                    "dy",
                    "assume_sorted"
                ]
            },
            "interp1d": {
                "__init__": [
                    "self",
                    "x",
                    "y",
                    "kind",
                    "axis",
                    "copy",
                    "bounds_error",
                    "fill_value",
                    "assume_sorted"
                ],
                "fill_value": [
                    "self",
                    "fill_value"
                ],
                "_call_linear_np": [
                    "self",
                    "x_new"
                ],
                "_call_linear": [
                    "self",
                    "x_new"
                ],
                "_call_nearest": [
                    "self",
                    "x_new"
                ],
                "_call_previousnext": [
                    "self",
                    "x_new"
                ],
                "_call_spline": [
                    "self",
                    "x_new"
                ],
                "_call_nan_spline": [
                    "self",
                    "x_new"
                ],
                "_evaluate": [
                    "self",
                    "x_new"
                ],
                "_check_bounds": [
                    "self",
                    "x_new"
                ]
            },
            "_PPolyBase": {
                "__init__": [
                    "self",
                    "c",
                    "x",
                    "extrapolate",
                    "axis"
                ],
                "_get_dtype": [
                    "self",
                    "dtype"
                ],
                "construct_fast": [
                    "cls",
                    "c",
                    "x",
                    "extrapolate",
                    "axis"
                ],
                "_ensure_c_contiguous": [
                    "self"
                ],
                "extend": [
                    "self",
                    "c",
                    "x",
                    "right"
                ],
                "__call__": [
                    "self",
                    "x",
                    "nu",
                    "extrapolate"
                ]
            },
            "PPoly": {
                "_evaluate": [
                    "self",
                    "x",
                    "nu",
                    "extrapolate",
                    "out"
                ],
                "derivative": [
                    "self",
                    "nu"
                ],
                "antiderivative": [
                    "self",
                    "nu"
                ],
                "integrate": [
                    "self",
                    "a",
                    "b",
                    "extrapolate"
                ],
                "solve": [
                    "self",
                    "y",
                    "discontinuity",
                    "extrapolate"
                ],
                "roots": [
                    "self",
                    "discontinuity",
                    "extrapolate"
                ],
                "from_spline": [
                    "cls",
                    "tck",
                    "extrapolate"
                ],
                "from_bernstein_basis": [
                    "cls",
                    "bp",
                    "extrapolate"
                ]
            },
            "BPoly": {
                "_evaluate": [
                    "self",
                    "x",
                    "nu",
                    "extrapolate",
                    "out"
                ],
                "derivative": [
                    "self",
                    "nu"
                ],
                "antiderivative": [
                    "self",
                    "nu"
                ],
                "integrate": [
                    "self",
                    "a",
                    "b",
                    "extrapolate"
                ],
                "extend": [
                    "self",
                    "c",
                    "x",
                    "right"
                ],
                "from_power_basis": [
                    "cls",
                    "pp",
                    "extrapolate"
                ],
                "from_derivatives": [
                    "cls",
                    "xi",
                    "yi",
                    "orders",
                    "extrapolate"
                ],
                "_construct_from_derivatives": [
                    "xa",
                    "xb",
                    "ya",
                    "yb"
                ],
                "_raise_degree": [
                    "c",
                    "d"
                ]
            },
            "NdPPoly": {
                "__init__": [
                    "self",
                    "c",
                    "x",
                    "extrapolate"
                ],
                "construct_fast": [
                    "cls",
                    "c",
                    "x",
                    "extrapolate"
                ],
                "_get_dtype": [
                    "self",
                    "dtype"
                ],
                "_ensure_c_contiguous": [
                    "self"
                ],
                "__call__": [
                    "self",
                    "x",
                    "nu",
                    "extrapolate"
                ],
                "_derivative_inplace": [
                    "self",
                    "nu",
                    "axis"
                ],
                "_antiderivative_inplace": [
                    "self",
                    "nu",
                    "axis"
                ],
                "derivative": [
                    "self",
                    "nu"
                ],
                "antiderivative": [
                    "self",
                    "nu"
                ],
                "integrate_1d": [
                    "self",
                    "a",
                    "b",
                    "axis",
                    "extrapolate"
                ],
                "integrate": [
                    "self",
                    "ranges",
                    "extrapolate"
                ]
            },
            "RegularGridInterpolator": {
                "__init__": [
                    "self",
                    "points",
                    "values",
                    "method",
                    "bounds_error",
                    "fill_value"
                ],
                "__call__": [
                    "self",
                    "xi",
                    "method"
                ],
                "_evaluate_linear": [
                    "self",
                    "indices",
                    "norm_distances",
                    "out_of_bounds"
                ],
                "_evaluate_nearest": [
                    "self",
                    "indices",
                    "norm_distances",
                    "out_of_bounds"
                ],
                "_find_indices": [
                    "self",
                    "xi"
                ]
            },
            "_ppform": {
                "__init__": [
                    "self",
                    "coeffs",
                    "breaks",
                    "fill",
                    "sort"
                ],
                "__call__": [
                    "self",
                    "x"
                ],
                "_evaluate": [
                    "self",
                    "x",
                    "nu",
                    "extrapolate",
                    "out"
                ],
                "fromspline": [
                    "cls",
                    "xk",
                    "cvals",
                    "order",
                    "fill"
                ]
            }
        },
        "scipy.interpolate._cubic": {
            "prepare_input": [
                "x",
                "y",
                "axis",
                "dydx"
            ],
            "pchip_interpolate": [
                "xi",
                "yi",
                "x",
                "der",
                "axis"
            ],
            "CubicHermiteSpline": {
                "__init__": [
                    "self",
                    "x",
                    "y",
                    "dydx",
                    "axis",
                    "extrapolate"
                ]
            },
            "PchipInterpolator": {
                "__init__": [
                    "self",
                    "x",
                    "y",
                    "axis",
                    "extrapolate"
                ],
                "_edge_case": [
                    "h0",
                    "h1",
                    "m0",
                    "m1"
                ],
                "_find_derivatives": [
                    "x",
                    "y"
                ]
            },
            "Akima1DInterpolator": {
                "__init__": [
                    "self",
                    "x",
                    "y",
                    "axis"
                ],
                "extend": [
                    "self",
                    "c",
                    "x",
                    "right"
                ],
                "from_spline": [
                    "cls",
                    "tck",
                    "extrapolate"
                ],
                "from_bernstein_basis": [
                    "cls",
                    "bp",
                    "extrapolate"
                ]
            },
            "CubicSpline": {
                "__init__": [
                    "self",
                    "x",
                    "y",
                    "axis",
                    "bc_type",
                    "extrapolate"
                ],
                "_validate_bc": [
                    "bc_type",
                    "y",
                    "expected_deriv_shape",
                    "axis"
                ]
            }
        },
        "scipy.interpolate.setup": {
            "configuration": [
                "parent_package",
                "top_path"
            ]
        },
        "scipy.interpolate": {},
        "scipy.interpolate.interpnd_info": {
            "_estimate_gradients_2d_global": []
        },
        "scipy.interpolate.fitpack2": {
            "UnivariateSpline": {
                "__init__": [
                    "self",
                    "x",
                    "y",
                    "w",
                    "bbox",
                    "k",
                    "s",
                    "ext",
                    "check_finite"
                ],
                "validate_input": [
                    "x",
                    "y",
                    "w",
                    "bbox",
                    "k",
                    "s",
                    "ext",
                    "check_finite"
                ],
                "_from_tck": [
                    "cls",
                    "tck",
                    "ext"
                ],
                "_reset_class": [
                    "self"
                ],
                "_set_class": [
                    "self",
                    "cls"
                ],
                "_reset_nest": [
                    "self",
                    "data",
                    "nest"
                ],
                "set_smoothing_factor": [
                    "self",
                    "s"
                ],
                "__call__": [
                    "self",
                    "x",
                    "nu",
                    "ext"
                ],
                "get_knots": [
                    "self"
                ],
                "get_coeffs": [
                    "self"
                ],
                "get_residual": [
                    "self"
                ],
                "integral": [
                    "self",
                    "a",
                    "b"
                ],
                "derivatives": [
                    "self",
                    "x"
                ],
                "roots": [
                    "self"
                ],
                "derivative": [
                    "self",
                    "n"
                ],
                "antiderivative": [
                    "self",
                    "n"
                ]
            },
            "InterpolatedUnivariateSpline": {
                "__init__": [
                    "self",
                    "x",
                    "y",
                    "w",
                    "bbox",
                    "k",
                    "ext",
                    "check_finite"
                ]
            },
            "LSQUnivariateSpline": {
                "__init__": [
                    "self",
                    "x",
                    "y",
                    "t",
                    "w",
                    "bbox",
                    "k",
                    "ext",
                    "check_finite"
                ]
            },
            "_BivariateSplineBase": {
                "get_residual": [
                    "self"
                ],
                "get_knots": [
                    "self"
                ],
                "get_coeffs": [
                    "self"
                ],
                "__call__": [
                    "self",
                    "x",
                    "y",
                    "dx",
                    "dy",
                    "grid"
                ]
            },
            "BivariateSpline": {
                "_from_tck": [
                    "cls",
                    "tck"
                ],
                "ev": [
                    "self",
                    "xi",
                    "yi",
                    "dx",
                    "dy"
                ],
                "integral": [
                    "self",
                    "xa",
                    "xb",
                    "ya",
                    "yb"
                ],
                "_validate_input": [
                    "x",
                    "y",
                    "z",
                    "w",
                    "kx",
                    "ky",
                    "eps"
                ]
            },
            "SmoothBivariateSpline": {
                "__init__": [
                    "self",
                    "x",
                    "y",
                    "z",
                    "w",
                    "bbox",
                    "kx",
                    "ky",
                    "s",
                    "eps"
                ]
            },
            "LSQBivariateSpline": {
                "__init__": [
                    "self",
                    "x",
                    "y",
                    "z",
                    "tx",
                    "ty",
                    "w",
                    "bbox",
                    "kx",
                    "ky",
                    "eps"
                ]
            },
            "RectBivariateSpline": {
                "__init__": [
                    "self",
                    "x",
                    "y",
                    "z",
                    "bbox",
                    "kx",
                    "ky",
                    "s"
                ]
            },
            "SphereBivariateSpline": {
                "__call__": [
                    "self",
                    "theta",
                    "phi",
                    "dtheta",
                    "dphi",
                    "grid"
                ],
                "ev": [
                    "self",
                    "theta",
                    "phi",
                    "dtheta",
                    "dphi"
                ]
            },
            "SmoothSphereBivariateSpline": {
                "__init__": [
                    "self",
                    "theta",
                    "phi",
                    "r",
                    "w",
                    "s",
                    "eps"
                ]
            },
            "LSQSphereBivariateSpline": {
                "__init__": [
                    "self",
                    "theta",
                    "phi",
                    "r",
                    "tt",
                    "tp",
                    "w",
                    "eps"
                ]
            },
            "RectSphereBivariateSpline": {
                "__init__": [
                    "self",
                    "u",
                    "v",
                    "r",
                    "s",
                    "pole_continuity",
                    "pole_values",
                    "pole_exact",
                    "pole_flat"
                ]
            }
        },
        "scipy.interpolate._pade": {
            "pade": [
                "an",
                "m",
                "n"
            ]
        },
        "scipy.interpolate._fitpack_impl": {
            "_int_overflow": [
                "x",
                "msg"
            ],
            "splprep": [
                "x",
                "w",
                "u",
                "ub",
                "ue",
                "k",
                "task",
                "s",
                "t",
                "full_output",
                "nest",
                "per",
                "quiet"
            ],
            "splrep": [
                "x",
                "y",
                "w",
                "xb",
                "xe",
                "k",
                "task",
                "s",
                "t",
                "full_output",
                "per",
                "quiet"
            ],
            "splev": [
                "x",
                "tck",
                "der",
                "ext"
            ],
            "splint": [
                "a",
                "b",
                "tck",
                "full_output"
            ],
            "sproot": [
                "tck",
                "mest"
            ],
            "spalde": [
                "x",
                "tck"
            ],
            "bisplrep": [
                "x",
                "y",
                "z",
                "w",
                "xb",
                "xe",
                "yb",
                "ye",
                "kx",
                "ky",
                "task",
                "s",
                "eps",
                "tx",
                "ty",
                "full_output",
                "nxest",
                "nyest",
                "quiet"
            ],
            "bisplev": [
                "x",
                "y",
                "tck",
                "dx",
                "dy"
            ],
            "dblint": [
                "xa",
                "xb",
                "ya",
                "yb",
                "tck"
            ],
            "insert": [
                "x",
                "tck",
                "m",
                "per"
            ],
            "splder": [
                "tck",
                "n"
            ],
            "splantider": [
                "tck",
                "n"
            ]
        },
        "scipy.interpolate.ndgriddata": {
            "griddata": [
                "points",
                "values",
                "xi",
                "method",
                "fill_value",
                "rescale"
            ],
            "NearestNDInterpolator": {
                "__init__": [
                    "self",
                    "x",
                    "y",
                    "rescale",
                    "tree_options"
                ],
                "__call__": [
                    "self"
                ]
            }
        },
        "scipy.interpolate._bsplines": {
            "_get_dtype": [
                "dtype"
            ],
            "_as_float_array": [
                "x",
                "check_finite"
            ],
            "_not_a_knot": [
                "x",
                "k"
            ],
            "_augknt": [
                "x",
                "k"
            ],
            "_convert_string_aliases": [
                "deriv",
                "target_shape"
            ],
            "_process_deriv_spec": [
                "deriv"
            ],
            "make_interp_spline": [
                "x",
                "y",
                "k",
                "t",
                "bc_type",
                "axis",
                "check_finite"
            ],
            "make_lsq_spline": [
                "x",
                "y",
                "t",
                "k",
                "w",
                "axis",
                "check_finite"
            ],
            "BSpline": {
                "__init__": [
                    "self",
                    "t",
                    "c",
                    "k",
                    "extrapolate",
                    "axis"
                ],
                "construct_fast": [
                    "cls",
                    "t",
                    "c",
                    "k",
                    "extrapolate",
                    "axis"
                ],
                "tck": [
                    "self"
                ],
                "basis_element": [
                    "cls",
                    "t",
                    "extrapolate"
                ],
                "__call__": [
                    "self",
                    "x",
                    "nu",
                    "extrapolate"
                ],
                "_evaluate": [
                    "self",
                    "xp",
                    "nu",
                    "extrapolate",
                    "out"
                ],
                "_ensure_c_contiguous": [
                    "self"
                ],
                "derivative": [
                    "self",
                    "nu"
                ],
                "antiderivative": [
                    "self",
                    "nu"
                ],
                "integrate": [
                    "self",
                    "a",
                    "b",
                    "extrapolate"
                ]
            }
        },
        "scipy.interpolate.polyint": {
            "_isscalar": [
                "x"
            ],
            "krogh_interpolate": [
                "xi",
                "yi",
                "x",
                "der",
                "axis"
            ],
            "approximate_taylor_polynomial": [
                "f",
                "x",
                "degree",
                "scale",
                "order"
            ],
            "barycentric_interpolate": [
                "xi",
                "yi",
                "x",
                "axis"
            ],
            "_Interpolator1D": {
                "__init__": [
                    "self",
                    "xi",
                    "yi",
                    "axis"
                ],
                "__call__": [
                    "self",
                    "x"
                ],
                "_evaluate": [
                    "self",
                    "x"
                ],
                "_prepare_x": [
                    "self",
                    "x"
                ],
                "_finish_y": [
                    "self",
                    "y",
                    "x_shape"
                ],
                "_reshape_yi": [
                    "self",
                    "yi",
                    "check"
                ],
                "_set_yi": [
                    "self",
                    "yi",
                    "xi",
                    "axis"
                ],
                "_set_dtype": [
                    "self",
                    "dtype",
                    "union"
                ]
            },
            "_Interpolator1DWithDerivatives": {
                "derivatives": [
                    "self",
                    "x",
                    "der"
                ],
                "derivative": [
                    "self",
                    "x",
                    "der"
                ]
            },
            "KroghInterpolator": {
                "__init__": [
                    "self",
                    "xi",
                    "yi",
                    "axis"
                ],
                "_evaluate": [
                    "self",
                    "x"
                ],
                "_evaluate_derivatives": [
                    "self",
                    "x",
                    "der"
                ]
            },
            "BarycentricInterpolator": {
                "__init__": [
                    "self",
                    "xi",
                    "yi",
                    "axis"
                ],
                "set_yi": [
                    "self",
                    "yi",
                    "axis"
                ],
                "add_xi": [
                    "self",
                    "xi",
                    "yi"
                ],
                "__call__": [
                    "self",
                    "x"
                ],
                "_evaluate": [
                    "self",
                    "x"
                ]
            }
        },
        "scipy.interpolate.tests.test_regression": {
            "TestRegression": {
                "test_spalde_scalar_input": [
                    "self"
                ]
            }
        },
        "scipy.interpolate.tests.test_gil": {
            "TestGIL": {
                "setup_method": [
                    "self"
                ],
                "log": [
                    "self",
                    "message"
                ],
                "make_worker_thread": [
                    "self",
                    "target",
                    "args"
                ],
                "test_rectbivariatespline": [
                    "self"
                ]
            }
        },
        "scipy.interpolate.tests.test_bsplines": {
            "test_knots_multiplicity": [],
            "_naive_B": [
                "x",
                "k",
                "i",
                "t"
            ],
            "_naive_eval": [
                "x",
                "t",
                "c",
                "k"
            ],
            "_naive_eval_2": [
                "x",
                "t",
                "c",
                "k"
            ],
            "_sum_basis_elements": [
                "x",
                "t",
                "c",
                "k"
            ],
            "B_012": [
                "x"
            ],
            "B_0123": [
                "x",
                "der"
            ],
            "_make_random_spline": [
                "n",
                "k"
            ],
            "_make_multiples": [
                "b"
            ],
            "make_interp_full_matr": [
                "x",
                "y",
                "t",
                "k"
            ],
            "make_interp_per_full_matr": [
                "x",
                "y",
                "t",
                "k"
            ],
            "make_lsq_full_matrix": [
                "x",
                "y",
                "t",
                "k"
            ],
            "TestBSpline": {
                "test_ctor": [
                    "self"
                ],
                "test_tck": [
                    "self"
                ],
                "test_degree_0": [
                    "self"
                ],
                "test_degree_1": [
                    "self"
                ],
                "test_bernstein": [
                    "self"
                ],
                "test_rndm_naive_eval": [
                    "self"
                ],
                "test_rndm_splev": [
                    "self"
                ],
                "test_rndm_splrep": [
                    "self"
                ],
                "test_rndm_unity": [
                    "self"
                ],
                "test_vectorization": [
                    "self"
                ],
                "test_len_c": [
                    "self"
                ],
                "test_endpoints": [
                    "self"
                ],
                "test_continuity": [
                    "self"
                ],
                "test_extrap": [
                    "self"
                ],
                "test_default_extrap": [
                    "self"
                ],
                "test_periodic_extrap": [
                    "self"
                ],
                "test_ppoly": [
                    "self"
                ],
                "test_derivative_rndm": [
                    "self"
                ],
                "test_derivative_jumps": [
                    "self"
                ],
                "test_basis_element_quadratic": [
                    "self"
                ],
                "test_basis_element_rndm": [
                    "self"
                ],
                "test_cmplx": [
                    "self"
                ],
                "test_nan": [
                    "self"
                ],
                "test_derivative_method": [
                    "self"
                ],
                "test_antiderivative_method": [
                    "self"
                ],
                "test_integral": [
                    "self"
                ],
                "test_integrate_ppoly": [
                    "self"
                ],
                "test_subclassing": [
                    "self"
                ],
                "test_axis": [
                    "self",
                    "axis"
                ],
                "test_neg_axis": [
                    "self"
                ]
            },
            "TestInterop": {
                "setup_method": [
                    "self"
                ],
                "test_splev": [
                    "self"
                ],
                "test_splrep": [
                    "self"
                ],
                "test_splrep_errors": [
                    "self"
                ],
                "test_splprep": [
                    "self"
                ],
                "test_splprep_errors": [
                    "self"
                ],
                "test_sproot": [
                    "self"
                ],
                "test_splint": [
                    "self"
                ],
                "test_splder": [
                    "self"
                ],
                "test_splantider": [
                    "self"
                ],
                "test_insert": [
                    "self"
                ]
            },
            "TestInterp": {
                "test_non_int_order": [
                    "self"
                ],
                "test_order_0": [
                    "self"
                ],
                "test_linear": [
                    "self"
                ],
                "test_not_a_knot": [
                    "self"
                ],
                "test_quadratic_deriv": [
                    "self"
                ],
                "test_cubic_deriv": [
                    "self"
                ],
                "test_quintic_derivs": [
                    "self"
                ],
                "test_cubic_deriv_unstable": [
                    "self"
                ],
                "test_knots_not_data_sites": [
                    "self"
                ],
                "test_minimum_points_and_deriv": [
                    "self"
                ],
                "test_deriv_spec": [
                    "self"
                ],
                "test_complex": [
                    "self"
                ],
                "test_int_xy": [
                    "self"
                ],
                "test_sliced_input": [
                    "self"
                ],
                "test_check_finite": [
                    "self"
                ],
                "test_list_input": [
                    "self",
                    "k"
                ],
                "test_multiple_rhs": [
                    "self"
                ],
                "test_shapes": [
                    "self"
                ],
                "test_string_aliases": [
                    "self"
                ],
                "test_full_matrix": [
                    "self"
                ]
            },
            "TestLSQ": {
                "test_lstsq": [
                    "self"
                ],
                "test_weights": [
                    "self"
                ],
                "test_multiple_rhs": [
                    "self"
                ],
                "test_complex": [
                    "self"
                ],
                "test_int_xy": [
                    "self"
                ],
                "test_sliced_input": [
                    "self"
                ],
                "test_checkfinite": [
                    "self"
                ]
            }
        },
        "scipy.interpolate.tests.test_rbf": {
            "check_rbf1d_interpolation": [
                "function"
            ],
            "check_rbf2d_interpolation": [
                "function"
            ],
            "check_rbf3d_interpolation": [
                "function"
            ],
            "test_rbf_interpolation": [],
            "check_2drbf1d_interpolation": [
                "function"
            ],
            "check_2drbf2d_interpolation": [
                "function"
            ],
            "check_2drbf3d_interpolation": [
                "function"
            ],
            "test_2drbf_interpolation": [],
            "check_rbf1d_regularity": [
                "function",
                "atol"
            ],
            "test_rbf_regularity": [],
            "check_2drbf1d_regularity": [
                "function",
                "atol"
            ],
            "test_2drbf_regularity": [],
            "check_rbf1d_stability": [
                "function"
            ],
            "test_rbf_stability": [],
            "test_default_construction": [],
            "test_function_is_callable": [],
            "test_two_arg_function_is_callable": [],
            "test_rbf_epsilon_none": [],
            "test_rbf_epsilon_none_collinear": []
        },
        "scipy.interpolate.tests": {},
        "scipy.interpolate.tests.test_polyint": {
            "check_shape": [
                "interpolator_cls",
                "x_shape",
                "y_shape",
                "deriv_shape",
                "axis",
                "extra_args"
            ],
            "test_shapes": [],
            "test_derivs_shapes": [],
            "test_deriv_shapes": [],
            "test_complex": [],
            "test_CubicHermiteSpline_correctness": [],
            "test_CubicHermiteSpline_error_handling": [],
            "test_roots_extrapolate_gh_11185": [],
            "TestKrogh": {
                "setup_method": [
                    "self"
                ],
                "test_lagrange": [
                    "self"
                ],
                "test_scalar": [
                    "self"
                ],
                "test_derivatives": [
                    "self"
                ],
                "test_low_derivatives": [
                    "self"
                ],
                "test_derivative": [
                    "self"
                ],
                "test_high_derivative": [
                    "self"
                ],
                "test_hermite": [
                    "self"
                ],
                "test_vector": [
                    "self"
                ],
                "test_empty": [
                    "self"
                ],
                "test_shapes_scalarvalue": [
                    "self"
                ],
                "test_shapes_scalarvalue_derivative": [
                    "self"
                ],
                "test_shapes_vectorvalue": [
                    "self"
                ],
                "test_shapes_1d_vectorvalue": [
                    "self"
                ],
                "test_shapes_vectorvalue_derivative": [
                    "self"
                ],
                "test_wrapper": [
                    "self"
                ],
                "test_int_inputs": [
                    "self"
                ],
                "test_derivatives_complex": [
                    "self"
                ]
            },
            "TestTaylor": {
                "test_exponential": [
                    "self"
                ]
            },
            "TestBarycentric": {
                "setup_method": [
                    "self"
                ],
                "test_lagrange": [
                    "self"
                ],
                "test_scalar": [
                    "self"
                ],
                "test_delayed": [
                    "self"
                ],
                "test_append": [
                    "self"
                ],
                "test_vector": [
                    "self"
                ],
                "test_shapes_scalarvalue": [
                    "self"
                ],
                "test_shapes_vectorvalue": [
                    "self"
                ],
                "test_shapes_1d_vectorvalue": [
                    "self"
                ],
                "test_wrapper": [
                    "self"
                ],
                "test_int_input": [
                    "self"
                ]
            },
            "TestPCHIP": {
                "_make_random": [
                    "self",
                    "npts"
                ],
                "test_overshoot": [
                    "self"
                ],
                "test_monotone": [
                    "self"
                ],
                "test_cast": [
                    "self"
                ],
                "test_nag": [
                    "self"
                ],
                "test_endslopes": [
                    "self"
                ],
                "test_all_zeros": [
                    "self"
                ],
                "test_two_points": [
                    "self"
                ],
                "test_pchip_interpolate": [
                    "self"
                ],
                "test_roots": [
                    "self"
                ]
            },
            "TestCubicSpline": {
                "check_correctness": [
                    "S",
                    "bc_start",
                    "bc_end",
                    "tol"
                ],
                "check_all_bc": [
                    "self",
                    "x",
                    "y",
                    "axis"
                ],
                "test_general": [
                    "self"
                ],
                "test_periodic": [
                    "self"
                ],
                "test_periodic_eval": [
                    "self"
                ],
                "test_second_derivative_continuity_gh_11758": [
                    "self"
                ],
                "test_three_points": [
                    "self"
                ],
                "test_dtypes": [
                    "self"
                ],
                "test_small_dx": [
                    "self"
                ],
                "test_incorrect_inputs": [
                    "self"
                ]
            }
        },
        "scipy.interpolate.tests.test_ndgriddata": {
            "test_nearest_options": [],
            "test_nearest_list_argument": [],
            "TestGriddata": {
                "test_fill_value": [
                    "self"
                ],
                "test_alternative_call": [
                    "self"
                ],
                "test_multivalue_2d": [
                    "self"
                ],
                "test_multipoint_2d": [
                    "self"
                ],
                "test_complex_2d": [
                    "self"
                ],
                "test_1d": [
                    "self"
                ],
                "test_1d_borders": [
                    "self"
                ],
                "test_1d_unsorted": [
                    "self"
                ],
                "test_square_rescale_manual": [
                    "self"
                ],
                "test_xi_1d": [
                    "self"
                ]
            }
        },
        "scipy.interpolate.tests.test_interpnd": {
            "data_file": [
                "basename"
            ],
            "TestLinearNDInterpolation": {
                "test_smoketest": [
                    "self"
                ],
                "test_smoketest_alternate": [
                    "self"
                ],
                "test_complex_smoketest": [
                    "self"
                ],
                "test_tri_input": [
                    "self"
                ],
                "test_square": [
                    "self"
                ],
                "test_smoketest_rescale": [
                    "self"
                ],
                "test_square_rescale": [
                    "self"
                ],
                "test_tripoints_input_rescale": [
                    "self"
                ],
                "test_tri_input_rescale": [
                    "self"
                ],
                "test_pickle": [
                    "self"
                ]
            },
            "TestEstimateGradients2DGlobal": {
                "test_smoketest": [
                    "self"
                ],
                "test_regression_2359": [
                    "self"
                ]
            },
            "TestCloughTocher2DInterpolator": {
                "_check_accuracy": [
                    "self",
                    "func",
                    "x",
                    "tol",
                    "alternate",
                    "rescale"
                ],
                "test_linear_smoketest": [
                    "self"
                ],
                "test_quadratic_smoketest": [
                    "self"
                ],
                "test_tri_input": [
                    "self"
                ],
                "test_tri_input_rescale": [
                    "self"
                ],
                "test_tripoints_input_rescale": [
                    "self"
                ],
                "test_dense": [
                    "self"
                ],
                "test_wrong_ndim": [
                    "self"
                ],
                "test_pickle": [
                    "self"
                ],
                "test_boundary_tri_symmetry": [
                    "self"
                ]
            }
        },
        "scipy.interpolate.tests.test_fitpack2": {
            "_numdiff_2d": [
                "func",
                "x",
                "y",
                "dx",
                "dy",
                "eps"
            ],
            "TestUnivariateSpline": {
                "test_linear_constant": [
                    "self"
                ],
                "test_preserve_shape": [
                    "self"
                ],
                "test_linear_1d": [
                    "self"
                ],
                "test_subclassing": [
                    "self"
                ],
                "test_empty_input": [
                    "self"
                ],
                "test_resize_regression": [
                    "self"
                ],
                "test_out_of_range_regression": [
                    "self"
                ],
                "test_lsq_fpchec": [
                    "self"
                ],
                "test_derivative_and_antiderivative": [
                    "self"
                ],
                "test_derivative_extrapolation": [
                    "self"
                ],
                "test_integral_out_of_bounds": [
                    "self"
                ],
                "test_nan": [
                    "self"
                ],
                "test_strictly_increasing_x": [
                    "self"
                ],
                "test_increasing_x": [
                    "self"
                ],
                "test_invalid_input_for_univariate_spline": [
                    "self"
                ],
                "test_invalid_input_for_interpolated_univariate_spline": [
                    "self"
                ],
                "test_invalid_input_for_lsq_univariate_spline": [
                    "self"
                ],
                "test_array_like_input": [
                    "self"
                ]
            },
            "TestLSQBivariateSpline": {
                "test_linear_constant": [
                    "self"
                ],
                "test_bilinearity": [
                    "self"
                ],
                "test_integral": [
                    "self"
                ],
                "test_empty_input": [
                    "self"
                ],
                "test_invalid_input": [
                    "self"
                ],
                "test_array_like_input": [
                    "self"
                ],
                "test_unequal_length_of_knots": [
                    "self"
                ]
            },
            "TestSmoothBivariateSpline": {
                "test_linear_constant": [
                    "self"
                ],
                "test_linear_1d": [
                    "self"
                ],
                "test_integral": [
                    "self"
                ],
                "test_rerun_lwrk2_too_small": [
                    "self"
                ],
                "test_invalid_input": [
                    "self"
                ],
                "test_array_like_input": [
                    "self"
                ]
            },
            "TestLSQSphereBivariateSpline": {
                "setup_method": [
                    "self"
                ],
                "test_linear_constant": [
                    "self"
                ],
                "test_empty_input": [
                    "self"
                ],
                "test_invalid_input": [
                    "self"
                ],
                "test_array_like_input": [
                    "self"
                ]
            },
            "TestSmoothSphereBivariateSpline": {
                "setup_method": [
                    "self"
                ],
                "test_linear_constant": [
                    "self"
                ],
                "test_empty_input": [
                    "self"
                ],
                "test_invalid_input": [
                    "self"
                ],
                "test_array_like_input": [
                    "self"
                ]
            },
            "TestRectBivariateSpline": {
                "test_defaults": [
                    "self"
                ],
                "test_evaluate": [
                    "self"
                ],
                "test_derivatives_grid": [
                    "self"
                ],
                "test_derivatives": [
                    "self"
                ],
                "test_broadcast": [
                    "self"
                ],
                "test_invalid_input": [
                    "self"
                ],
                "test_array_like_input": [
                    "self"
                ]
            },
            "TestRectSphereBivariateSpline": {
                "test_defaults": [
                    "self"
                ],
                "test_evaluate": [
                    "self"
                ],
                "test_derivatives_grid": [
                    "self"
                ],
                "test_derivatives": [
                    "self"
                ],
                "test_invalid_input": [
                    "self"
                ],
                "test_array_like_input": [
                    "self"
                ]
            }
        },
        "scipy.interpolate.tests.test_fitpack": {
            "data_file": [
                "basename"
            ],
            "norm2": [
                "x"
            ],
            "f1": [
                "x",
                "d"
            ],
            "f2": [
                "x",
                "y",
                "dx",
                "dy"
            ],
            "makepairs": [
                "x",
                "y"
            ],
            "put": [],
            "test_dblint": [],
            "test_splev_der_k": [],
            "test_splprep_segfault": [],
            "test_bisplev_integer_overflow": [],
            "TestSmokeTests": {
                "check_1": [
                    "self",
                    "f",
                    "per",
                    "s",
                    "a",
                    "b",
                    "N",
                    "at",
                    "xb",
                    "xe"
                ],
                "check_2": [
                    "self",
                    "f",
                    "per",
                    "s",
                    "a",
                    "b",
                    "N",
                    "xb",
                    "xe",
                    "ia",
                    "ib",
                    "dx"
                ],
                "check_3": [
                    "self",
                    "f",
                    "per",
                    "s",
                    "a",
                    "b",
                    "N",
                    "xb",
                    "xe",
                    "ia",
                    "ib",
                    "dx"
                ],
                "check_4": [
                    "self",
                    "f",
                    "per",
                    "s",
                    "a",
                    "b",
                    "N",
                    "xb",
                    "xe",
                    "ia",
                    "ib",
                    "dx"
                ],
                "check_5": [
                    "self",
                    "f",
                    "kx",
                    "ky",
                    "xb",
                    "xe",
                    "yb",
                    "ye",
                    "Nx",
                    "Ny",
                    "s"
                ],
                "test_smoke_splrep_splev": [
                    "self"
                ],
                "test_smoke_splint_spalde": [
                    "self"
                ],
                "test_smoke_sproot": [
                    "self"
                ],
                "test_smoke_splprep_splrep_splev": [
                    "self"
                ],
                "test_smoke_bisplrep_bisplev": [
                    "self"
                ]
            },
            "TestSplev": {
                "test_1d_shape": [
                    "self"
                ],
                "test_2d_shape": [
                    "self"
                ],
                "test_extrapolation_modes": [
                    "self"
                ]
            },
            "TestSplder": {
                "setup_method": [
                    "self"
                ],
                "test_inverse": [
                    "self"
                ],
                "test_splder_vs_splev": [
                    "self"
                ],
                "test_splantider_vs_splint": [
                    "self"
                ],
                "test_order0_diff": [
                    "self"
                ],
                "test_kink": [
                    "self"
                ],
                "test_multidim": [
                    "self"
                ]
            },
            "TestBisplrep": {
                "test_overflow": [
                    "self"
                ],
                "test_regression_1310": [
                    "self"
                ],
                "test_ilp64_bisplrep": [
                    "self"
                ]
            }
        },
        "scipy.interpolate.tests.test_pade": {
            "test_pade_trivial": [],
            "test_pade_4term_exp": [],
            "test_pade_ints": [],
            "test_pade_complex": []
        },
        "scipy.interpolate.tests.test_interpolate": {
            "_ppoly_eval_1": [
                "c",
                "x",
                "xps"
            ],
            "_ppoly_eval_2": [
                "coeffs",
                "breaks",
                "xnew",
                "fill"
            ],
            "_dpow": [
                "x",
                "y",
                "n"
            ],
            "_ppoly2d_eval": [
                "c",
                "xs",
                "xnew",
                "ynew",
                "nu"
            ],
            "_ppoly3d_eval": [
                "c",
                "xs",
                "xnew",
                "ynew",
                "znew",
                "nu"
            ],
            "_ppoly4d_eval": [
                "c",
                "xs",
                "xnew",
                "ynew",
                "znew",
                "unew",
                "nu"
            ],
            "TestInterp2D": {
                "test_interp2d": [
                    "self"
                ],
                "test_interp2d_meshgrid_input": [
                    "self"
                ],
                "test_interp2d_meshgrid_input_unsorted": [
                    "self"
                ],
                "test_interp2d_eval_unsorted": [
                    "self"
                ],
                "test_interp2d_linear": [
                    "self"
                ],
                "test_interp2d_bounds": [
                    "self"
                ]
            },
            "TestInterp1D": {
                "setup_method": [
                    "self"
                ],
                "test_validation": [
                    "self"
                ],
                "test_init": [
                    "self"
                ],
                "test_assume_sorted": [
                    "self"
                ],
                "test_linear": [
                    "self"
                ],
                "_check_linear": [
                    "self",
                    "kind"
                ],
                "test_linear_dtypes": [
                    "self"
                ],
                "test_slinear_dtypes": [
                    "self"
                ],
                "test_cubic": [
                    "self"
                ],
                "test_nearest": [
                    "self"
                ],
                "test_nearest_up": [
                    "self"
                ],
                "test_previous": [
                    "self"
                ],
                "test_next": [
                    "self"
                ],
                "test_zero": [
                    "self"
                ],
                "_bounds_check": [
                    "self",
                    "kind"
                ],
                "_bounds_check_int_nan_fill": [
                    "self",
                    "kind"
                ],
                "test_bounds": [
                    "self"
                ],
                "_check_fill_value": [
                    "self",
                    "kind"
                ],
                "test_fill_value": [
                    "self"
                ],
                "test_fill_value_writeable": [
                    "self"
                ],
                "_nd_check_interp": [
                    "self",
                    "kind"
                ],
                "_nd_check_shape": [
                    "self",
                    "kind"
                ],
                "test_nd": [
                    "self"
                ],
                "_check_complex": [
                    "self",
                    "dtype",
                    "kind"
                ],
                "test_complex": [
                    "self"
                ],
                "test_circular_refs": [
                    "self"
                ],
                "test_overflow_nearest": [
                    "self"
                ],
                "test_local_nans": [
                    "self"
                ],
                "test_spline_nans": [
                    "self"
                ],
                "test_all_nans": [
                    "self"
                ],
                "test_read_only": [
                    "self"
                ]
            },
            "TestLagrange": {
                "test_lagrange": [
                    "self"
                ]
            },
            "TestAkima1DInterpolator": {
                "test_eval": [
                    "self"
                ],
                "test_eval_2d": [
                    "self"
                ],
                "test_eval_3d": [
                    "self"
                ],
                "test_degenerate_case_multidimensional": [
                    "self"
                ],
                "test_extend": [
                    "self"
                ]
            },
            "TestPPolyCommon": {
                "test_sort_check": [
                    "self"
                ],
                "test_ctor_c": [
                    "self"
                ],
                "test_extend": [
                    "self"
                ],
                "test_extend_diff_orders": [
                    "self"
                ],
                "test_extend_descending": [
                    "self"
                ],
                "test_shape": [
                    "self"
                ],
                "test_complex_coef": [
                    "self"
                ],
                "test_axis": [
                    "self"
                ]
            },
            "TestPolySubclassing": {
                "_make_polynomials": [
                    "self"
                ],
                "test_derivative": [
                    "self"
                ],
                "test_from_spline": [
                    "self"
                ],
                "test_conversions": [
                    "self"
                ],
                "test_from_derivatives": [
                    "self"
                ]
            },
            "TestPPoly": {
                "test_simple": [
                    "self"
                ],
                "test_periodic": [
                    "self"
                ],
                "test_read_only": [
                    "self"
                ],
                "test_descending": [
                    "self"
                ],
                "test_multi_shape": [
                    "self"
                ],
                "test_construct_fast": [
                    "self"
                ],
                "test_vs_alternative_implementations": [
                    "self"
                ],
                "test_from_spline": [
                    "self"
                ],
                "test_derivative_simple": [
                    "self"
                ],
                "test_derivative_eval": [
                    "self"
                ],
                "test_derivative": [
                    "self"
                ],
                "test_antiderivative_of_constant": [
                    "self"
                ],
                "test_antiderivative_regression_4355": [
                    "self"
                ],
                "test_antiderivative_simple": [
                    "self"
                ],
                "test_antiderivative_vs_derivative": [
                    "self"
                ],
                "test_antiderivative_vs_spline": [
                    "self"
                ],
                "test_antiderivative_continuity": [
                    "self"
                ],
                "test_integrate": [
                    "self"
                ],
                "test_integrate_readonly": [
                    "self"
                ],
                "test_integrate_periodic": [
                    "self"
                ],
                "test_roots": [
                    "self"
                ],
                "test_roots_idzero": [
                    "self"
                ],
                "test_roots_all_zero": [
                    "self"
                ],
                "test_roots_repeated": [
                    "self"
                ],
                "test_roots_discont": [
                    "self"
                ],
                "test_roots_random": [
                    "self"
                ],
                "test_roots_croots": [
                    "self"
                ],
                "test_extrapolate_attr": [
                    "self"
                ]
            },
            "TestBPoly": {
                "test_simple": [
                    "self"
                ],
                "test_simple2": [
                    "self"
                ],
                "test_simple3": [
                    "self"
                ],
                "test_simple4": [
                    "self"
                ],
                "test_simple5": [
                    "self"
                ],
                "test_periodic": [
                    "self"
                ],
                "test_descending": [
                    "self"
                ],
                "test_multi_shape": [
                    "self"
                ],
                "test_interval_length": [
                    "self"
                ],
                "test_two_intervals": [
                    "self"
                ],
                "test_extrapolate_attr": [
                    "self"
                ]
            },
            "TestBPolyCalculus": {
                "test_derivative": [
                    "self"
                ],
                "test_derivative_ppoly": [
                    "self"
                ],
                "test_deriv_inplace": [
                    "self"
                ],
                "test_antiderivative_simple": [
                    "self"
                ],
                "test_der_antider": [
                    "self"
                ],
                "test_antider_ppoly": [
                    "self"
                ],
                "test_antider_continuous": [
                    "self"
                ],
                "test_integrate": [
                    "self"
                ],
                "test_integrate_extrap": [
                    "self"
                ],
                "test_integrate_periodic": [
                    "self"
                ],
                "test_antider_neg": [
                    "self"
                ]
            },
            "TestPolyConversions": {
                "test_bp_from_pp": [
                    "self"
                ],
                "test_bp_from_pp_random": [
                    "self"
                ],
                "test_pp_from_bp": [
                    "self"
                ],
                "test_broken_conversions": [
                    "self"
                ]
            },
            "TestBPolyFromDerivatives": {
                "test_make_poly_1": [
                    "self"
                ],
                "test_make_poly_2": [
                    "self"
                ],
                "test_make_poly_3": [
                    "self"
                ],
                "test_make_poly_12": [
                    "self"
                ],
                "test_raise_degree": [
                    "self"
                ],
                "test_xi_yi": [
                    "self"
                ],
                "test_coords_order": [
                    "self"
                ],
                "test_zeros": [
                    "self"
                ],
                "_make_random_mk": [
                    "self",
                    "m",
                    "k"
                ],
                "test_random_12": [
                    "self"
                ],
                "test_order_zero": [
                    "self"
                ],
                "test_orders_too_high": [
                    "self"
                ],
                "test_orders_global": [
                    "self"
                ],
                "test_orders_local": [
                    "self"
                ],
                "test_yi_trailing_dims": [
                    "self"
                ],
                "test_gh_5430": [
                    "self"
                ]
            },
            "TestNdPPoly": {
                "test_simple_1d": [
                    "self"
                ],
                "test_simple_2d": [
                    "self"
                ],
                "test_simple_3d": [
                    "self"
                ],
                "test_simple_4d": [
                    "self"
                ],
                "test_deriv_1d": [
                    "self"
                ],
                "test_deriv_3d": [
                    "self"
                ],
                "test_deriv_3d_simple": [
                    "self"
                ],
                "test_integrate_2d": [
                    "self"
                ],
                "test_integrate_1d": [
                    "self"
                ]
            },
            "TestRegularGridInterpolator": {
                "_get_sample_4d": [
                    "self"
                ],
                "_get_sample_4d_2": [
                    "self"
                ],
                "test_list_input": [
                    "self"
                ],
                "test_complex": [
                    "self"
                ],
                "test_linear_xi1d": [
                    "self"
                ],
                "test_linear_xi3d": [
                    "self"
                ],
                "test_nearest": [
                    "self"
                ],
                "test_linear_edges": [
                    "self"
                ],
                "test_valid_create": [
                    "self"
                ],
                "test_valid_call": [
                    "self"
                ],
                "test_out_of_bounds_extrap": [
                    "self"
                ],
                "test_out_of_bounds_extrap2": [
                    "self"
                ],
                "test_out_of_bounds_fill": [
                    "self"
                ],
                "test_nearest_compare_qhull": [
                    "self"
                ],
                "test_linear_compare_qhull": [
                    "self"
                ],
                "test_duck_typed_values": [
                    "self"
                ],
                "test_invalid_fill_value": [
                    "self"
                ],
                "test_fillvalue_type": [
                    "self"
                ],
                "test_broadcastable_input": [
                    "self"
                ],
                "test_read_only": [
                    "self"
                ]
            },
            "MyValue": {
                "__init__": [
                    "self",
                    "shape"
                ],
                "__getitem__": [
                    "self",
                    "idx"
                ],
                "__array_interface__": [
                    "self"
                ],
                "__array__": [
                    "self"
                ]
            },
            "TestInterpN": {
                "_sample_2d_data": [
                    "self"
                ],
                "test_spline_2d": [
                    "self"
                ],
                "test_list_input": [
                    "self"
                ],
                "test_spline_2d_outofbounds": [
                    "self"
                ],
                "_sample_4d_data": [
                    "self"
                ],
                "test_linear_4d": [
                    "self"
                ],
                "test_4d_linear_outofbounds": [
                    "self"
                ],
                "test_nearest_4d": [
                    "self"
                ],
                "test_4d_nearest_outofbounds": [
                    "self"
                ],
                "test_xi_1d": [
                    "self"
                ],
                "test_xi_nd": [
                    "self"
                ],
                "test_xi_broadcast": [
                    "self"
                ],
                "test_nonscalar_values": [
                    "self"
                ],
                "test_complex": [
                    "self"
                ],
                "test_duck_typed_values": [
                    "self"
                ],
                "test_matrix_input": [
                    "self"
                ]
            }
        },
        "scipy.io.wavfile": {
            "_raise_bad_format": [
                "format_tag"
            ],
            "_read_fmt_chunk": [
                "fid",
                "is_big_endian"
            ],
            "_read_data_chunk": [
                "fid",
                "format_tag",
                "channels",
                "bit_depth",
                "is_big_endian",
                "block_align",
                "mmap"
            ],
            "_skip_unknown_chunk": [
                "fid",
                "is_big_endian"
            ],
            "_read_riff_chunk": [
                "fid"
            ],
            "_handle_pad_byte": [
                "fid",
                "size"
            ],
            "read": [
                "filename",
                "mmap"
            ],
            "write": [
                "filename",
                "rate",
                "data"
            ],
            "_array_tofile": [
                "fid",
                "data"
            ],
            "WavFileWarning": {},
            "WAVE_FORMAT": {}
        },
        "scipy.io.setup": {
            "configuration": [
                "parent_package",
                "top_path"
            ]
        },
        "scipy.io": {},
        "scipy.io._fortran": {
            "FortranEOFError": {},
            "FortranFormattingError": {},
            "FortranFile": {
                "__init__": [
                    "self",
                    "filename",
                    "mode",
                    "header_dtype"
                ],
                "_read_size": [
                    "self",
                    "eof_ok"
                ],
                "write_record": [
                    "self"
                ],
                "read_record": [
                    "self"
                ],
                "read_ints": [
                    "self",
                    "dtype"
                ],
                "read_reals": [
                    "self",
                    "dtype"
                ],
                "close": [
                    "self"
                ],
                "__enter__": [
                    "self"
                ],
                "__exit__": [
                    "self",
                    "type",
                    "value",
                    "tb"
                ]
            }
        },
        "scipy.io.mmio": {
            "mminfo": [
                "source"
            ],
            "mmread": [
                "source"
            ],
            "mmwrite": [
                "target",
                "a",
                "comment",
                "field",
                "precision",
                "symmetry"
            ],
            "_is_fromfile_compatible": [
                "stream"
            ],
            "MMFile": {
                "rows": [
                    "self"
                ],
                "cols": [
                    "self"
                ],
                "entries": [
                    "self"
                ],
                "format": [
                    "self"
                ],
                "field": [
                    "self"
                ],
                "symmetry": [
                    "self"
                ],
                "has_symmetry": [
                    "self"
                ],
                "_validate_format": [
                    "self",
                    "format"
                ],
                "_validate_field": [
                    "self",
                    "field"
                ],
                "_validate_symmetry": [
                    "self",
                    "symmetry"
                ],
                "reader": [],
                "writer": [],
                "info": [
                    "self",
                    "source"
                ],
                "_open": [
                    "filespec",
                    "mode"
                ],
                "_get_symmetry": [
                    "a"
                ],
                "_field_template": [
                    "field",
                    "precision"
                ],
                "__init__": [
                    "self"
                ],
                "read": [
                    "self",
                    "source"
                ],
                "write": [
                    "self",
                    "target",
                    "a",
                    "comment",
                    "field",
                    "precision",
                    "symmetry"
                ],
                "_init_attrs": [
                    "self"
                ],
                "_parse_header": [
                    "self",
                    "stream"
                ],
                "_parse_body": [
                    "self",
                    "stream"
                ],
                "_write": [
                    "self",
                    "stream",
                    "a",
                    "comment",
                    "field",
                    "precision",
                    "symmetry"
                ]
            }
        },
        "scipy.io.netcdf": {
            "netcdf_file": {
                "__init__": [
                    "self",
                    "filename",
                    "mode",
                    "mmap",
                    "version",
                    "maskandscale"
                ],
                "__setattr__": [
                    "self",
                    "attr",
                    "value"
                ],
                "close": [
                    "self"
                ],
                "__enter__": [
                    "self"
                ],
                "__exit__": [
                    "self",
                    "type",
                    "value",
                    "traceback"
                ],
                "createDimension": [
                    "self",
                    "name",
                    "length"
                ],
                "createVariable": [
                    "self",
                    "name",
                    "type",
                    "dimensions"
                ],
                "flush": [
                    "self"
                ],
                "_write": [
                    "self"
                ],
                "_write_numrecs": [
                    "self"
                ],
                "_write_dim_array": [
                    "self"
                ],
                "_write_gatt_array": [
                    "self"
                ],
                "_write_att_array": [
                    "self",
                    "attributes"
                ],
                "_write_var_array": [
                    "self"
                ],
                "_write_var_metadata": [
                    "self",
                    "name"
                ],
                "_write_var_data": [
                    "self",
                    "name"
                ],
                "_write_var_padding": [
                    "self",
                    "var",
                    "size"
                ],
                "_write_att_values": [
                    "self",
                    "values"
                ],
                "_read": [
                    "self"
                ],
                "_read_numrecs": [
                    "self"
                ],
                "_read_dim_array": [
                    "self"
                ],
                "_read_gatt_array": [
                    "self"
                ],
                "_read_att_array": [
                    "self"
                ],
                "_read_var_array": [
                    "self"
                ],
                "_read_var": [
                    "self"
                ],
                "_read_att_values": [
                    "self"
                ],
                "_pack_begin": [
                    "self",
                    "begin"
                ],
                "_pack_int": [
                    "self",
                    "value"
                ],
                "_unpack_int": [
                    "self"
                ],
                "_pack_int64": [
                    "self",
                    "value"
                ],
                "_unpack_int64": [
                    "self"
                ],
                "_pack_string": [
                    "self",
                    "s"
                ],
                "_unpack_string": [
                    "self"
                ]
            },
            "netcdf_variable": {
                "__init__": [
                    "self",
                    "data",
                    "typecode",
                    "size",
                    "shape",
                    "dimensions",
                    "attributes",
                    "maskandscale"
                ],
                "__setattr__": [
                    "self",
                    "attr",
                    "value"
                ],
                "isrec": [
                    "self"
                ],
                "shape": [
                    "self"
                ],
                "getValue": [
                    "self"
                ],
                "assignValue": [
                    "self",
                    "value"
                ],
                "typecode": [
                    "self"
                ],
                "itemsize": [
                    "self"
                ],
                "__getitem__": [
                    "self",
                    "index"
                ],
                "__setitem__": [
                    "self",
                    "index",
                    "data"
                ],
                "_default_encoded_fill_value": [
                    "self"
                ],
                "_get_encoded_fill_value": [
                    "self"
                ],
                "_get_missing_value": [
                    "self"
                ],
                "_apply_missing_value": [
                    "data",
                    "missing_value"
                ]
            }
        },
        "scipy.io.idl": {
            "_align_32": [
                "f"
            ],
            "_skip_bytes": [
                "f",
                "n"
            ],
            "_read_bytes": [
                "f",
                "n"
            ],
            "_read_byte": [
                "f"
            ],
            "_read_long": [
                "f"
            ],
            "_read_int16": [
                "f"
            ],
            "_read_int32": [
                "f"
            ],
            "_read_int64": [
                "f"
            ],
            "_read_uint16": [
                "f"
            ],
            "_read_uint32": [
                "f"
            ],
            "_read_uint64": [
                "f"
            ],
            "_read_float32": [
                "f"
            ],
            "_read_float64": [
                "f"
            ],
            "_read_string": [
                "f"
            ],
            "_read_string_data": [
                "f"
            ],
            "_read_data": [
                "f",
                "dtype"
            ],
            "_read_structure": [
                "f",
                "array_desc",
                "struct_desc"
            ],
            "_read_array": [
                "f",
                "typecode",
                "array_desc"
            ],
            "_read_record": [
                "f"
            ],
            "_read_typedesc": [
                "f"
            ],
            "_read_arraydesc": [
                "f"
            ],
            "_read_structdesc": [
                "f"
            ],
            "_read_tagdesc": [
                "f"
            ],
            "_replace_heap": [
                "variable",
                "heap"
            ],
            "readsav": [
                "file_name",
                "idict",
                "python_dict",
                "uncompressed_file_name",
                "verbose"
            ],
            "Pointer": {
                "__init__": [
                    "self",
                    "index"
                ]
            },
            "ObjectPointer": {},
            "AttrDict": {
                "__init__": [
                    "self",
                    "init"
                ],
                "__getitem__": [
                    "self",
                    "name"
                ],
                "__setitem__": [
                    "self",
                    "key",
                    "value"
                ]
            }
        },
        "scipy.io.tests.test_idl": {
            "object_array": [],
            "assert_identical": [
                "a",
                "b"
            ],
            "assert_array_identical": [
                "a",
                "b"
            ],
            "test_null_pointer": [],
            "test_invalid_pointer": [],
            "TestIdict": {
                "test_idict": [
                    "self"
                ]
            },
            "TestScalars": {
                "test_byte": [
                    "self"
                ],
                "test_int16": [
                    "self"
                ],
                "test_int32": [
                    "self"
                ],
                "test_float32": [
                    "self"
                ],
                "test_float64": [
                    "self"
                ],
                "test_complex32": [
                    "self"
                ],
                "test_bytes": [
                    "self"
                ],
                "test_structure": [
                    "self"
                ],
                "test_complex64": [
                    "self"
                ],
                "test_heap_pointer": [
                    "self"
                ],
                "test_object_reference": [
                    "self"
                ],
                "test_uint16": [
                    "self"
                ],
                "test_uint32": [
                    "self"
                ],
                "test_int64": [
                    "self"
                ],
                "test_uint64": [
                    "self"
                ]
            },
            "TestCompressed": {
                "test_compressed": [
                    "self"
                ]
            },
            "TestArrayDimensions": {
                "test_1d": [
                    "self"
                ],
                "test_2d": [
                    "self"
                ],
                "test_3d": [
                    "self"
                ],
                "test_4d": [
                    "self"
                ],
                "test_5d": [
                    "self"
                ],
                "test_6d": [
                    "self"
                ],
                "test_7d": [
                    "self"
                ],
                "test_8d": [
                    "self"
                ]
            },
            "TestStructures": {
                "test_scalars": [
                    "self"
                ],
                "test_scalars_replicated": [
                    "self"
                ],
                "test_scalars_replicated_3d": [
                    "self"
                ],
                "test_arrays": [
                    "self"
                ],
                "test_arrays_replicated": [
                    "self"
                ],
                "test_arrays_replicated_3d": [
                    "self"
                ],
                "test_inheritance": [
                    "self"
                ],
                "test_arrays_corrupt_idl80": [
                    "self"
                ]
            },
            "TestPointers": {
                "test_pointers": [
                    "self"
                ]
            },
            "TestPointerArray": {
                "test_1d": [
                    "self"
                ],
                "test_2d": [
                    "self"
                ],
                "test_3d": [
                    "self"
                ],
                "test_4d": [
                    "self"
                ],
                "test_5d": [
                    "self"
                ],
                "test_6d": [
                    "self"
                ],
                "test_7d": [
                    "self"
                ],
                "test_8d": [
                    "self"
                ]
            },
            "TestPointerStructures": {
                "test_scalars": [
                    "self"
                ],
                "test_pointers_replicated": [
                    "self"
                ],
                "test_pointers_replicated_3d": [
                    "self"
                ],
                "test_arrays": [
                    "self"
                ],
                "test_arrays_replicated": [
                    "self"
                ],
                "test_arrays_replicated_3d": [
                    "self"
                ]
            },
            "TestTags": {
                "test_description": [
                    "self"
                ]
            }
        },
        "scipy.io.tests.test_wavfile": {
            "datafile": [
                "fn"
            ],
            "test_read_1": [],
            "test_read_2": [],
            "test_read_3": [],
            "test_read_4": [],
            "test_read_5": [],
            "test_5_bit_odd_size_no_pad": [],
            "test_12_bit_even_size": [],
            "test_24_bit_odd_size_with_pad": [],
            "test_20_bit_extra_data": [],
            "test_36_bit_odd_size": [],
            "test_45_bit_even_size": [],
            "test_53_bit_odd_size": [],
            "test_64_bit_even_size": [],
            "test_unsupported_mmap": [],
            "test_rifx": [],
            "test_read_unknown_filetype_fail": [],
            "test_read_unknown_riff_form_type": [],
            "test_read_unknown_wave_format": [],
            "test_read_early_eof_with_data": [],
            "test_read_early_eof": [],
            "test_read_incomplete_chunk": [],
            "_check_roundtrip": [
                "realfile",
                "rate",
                "dtype",
                "channels",
                "tmpdir"
            ],
            "test_write_roundtrip": [
                "tmpdir"
            ]
        },
        "scipy.io.tests": {},
        "scipy.io.tests.test_netcdf": {
            "make_simple": [],
            "check_simple": [
                "ncfileobj"
            ],
            "assert_mask_matches": [
                "arr",
                "expected_mask"
            ],
            "test_read_write_files": [],
            "test_read_write_sio": [],
            "test_bytes": [],
            "test_encoded_fill_value": [],
            "test_read_example_data": [],
            "test_itemset_no_segfault_on_readonly": [],
            "test_appending_issue_gh_8625": [],
            "test_write_invalid_dtype": [],
            "test_flush_rewind": [],
            "test_dtype_specifiers": [],
            "test_ticket_1720": [],
            "test_mmaps_segfault": [],
            "test_zero_dimensional_var": [],
            "test_byte_gatts": [],
            "test_open_append": [],
            "test_append_recordDimension": [],
            "test_maskandscale": [],
            "test_read_withValuesNearFillValue": [],
            "test_read_withNoFillValue": [],
            "test_read_withFillValueAndMissingValue": [],
            "test_read_withMissingValue": [],
            "test_read_withFillValNaN": [],
            "test_read_withChar": [],
            "test_read_with2dVar": [],
            "test_read_withMaskAndScaleFalse": []
        },
        "scipy.io.tests.test_paths": {
            "TestPaths": {
                "test_savemat": [
                    "self"
                ],
                "test_loadmat": [
                    "self"
                ],
                "test_whosmat": [
                    "self"
                ],
                "test_readsav": [
                    "self"
                ],
                "test_hb_read": [
                    "self"
                ],
                "test_hb_write": [
                    "self"
                ],
                "test_mmio_read": [
                    "self"
                ],
                "test_mmio_write": [
                    "self"
                ],
                "test_netcdf_file": [
                    "self"
                ],
                "test_wavfile_read": [
                    "self"
                ],
                "test_wavfile_write": [
                    "self"
                ]
            }
        },
        "scipy.io.tests.test_fortran": {
            "test_fortranfiles_read": [],
            "test_fortranfiles_mixed_record": [],
            "test_fortranfiles_write": [],
            "test_fortranfile_read_mixed_record": [],
            "test_fortranfile_write_mixed_record": [
                "tmpdir"
            ],
            "test_fortran_roundtrip": [
                "tmpdir"
            ],
            "test_fortran_eof_ok": [
                "tmpdir"
            ],
            "test_fortran_eof_broken_size": [
                "tmpdir"
            ],
            "test_fortran_bogus_size": [
                "tmpdir"
            ],
            "test_fortran_eof_broken_record": [
                "tmpdir"
            ],
            "test_fortran_eof_multidimensional": [
                "tmpdir"
            ]
        },
        "scipy.io.tests.test_mmio": {
            "test_gh11389": [],
            "TestMMIOArray": {
                "setup_method": [
                    "self"
                ],
                "teardown_method": [
                    "self"
                ],
                "check": [
                    "self",
                    "a",
                    "info"
                ],
                "check_exact": [
                    "self",
                    "a",
                    "info"
                ],
                "test_simple_integer": [
                    "self",
                    "typeval",
                    "dtype"
                ],
                "test_32bit_integer": [
                    "self",
                    "typeval",
                    "dtype"
                ],
                "test_64bit_integer": [
                    "self"
                ],
                "test_64bit_unsigned_integer": [
                    "self"
                ],
                "test_simple_upper_triangle_integer": [
                    "self",
                    "typeval",
                    "dtype"
                ],
                "test_simple_lower_triangle_integer": [
                    "self",
                    "typeval",
                    "dtype"
                ],
                "test_simple_rectangular_integer": [
                    "self",
                    "typeval",
                    "dtype"
                ],
                "test_simple_rectangular_float": [
                    "self"
                ],
                "test_simple_float": [
                    "self"
                ],
                "test_simple_complex": [
                    "self"
                ],
                "test_simple_symmetric_integer": [
                    "self",
                    "typeval",
                    "dtype"
                ],
                "test_simple_skew_symmetric_integer": [
                    "self"
                ],
                "test_simple_skew_symmetric_float": [
                    "self"
                ],
                "test_simple_hermitian_complex": [
                    "self"
                ],
                "test_random_symmetric_float": [
                    "self"
                ],
                "test_random_rectangular_float": [
                    "self"
                ],
                "test_bad_number_of_array_header_fields": [
                    "self"
                ]
            },
            "TestMMIOSparseCSR": {
                "setup_method": [
                    "self"
                ],
                "teardown_method": [
                    "self"
                ],
                "check": [
                    "self",
                    "a",
                    "info"
                ],
                "check_exact": [
                    "self",
                    "a",
                    "info"
                ],
                "test_simple_integer": [
                    "self",
                    "typeval",
                    "dtype"
                ],
                "test_32bit_integer": [
                    "self"
                ],
                "test_64bit_integer": [
                    "self"
                ],
                "test_32bit_unsigned_integer": [
                    "self"
                ],
                "test_64bit_unsigned_integer": [
                    "self"
                ],
                "test_simple_upper_triangle_integer": [
                    "self",
                    "typeval",
                    "dtype"
                ],
                "test_simple_lower_triangle_integer": [
                    "self",
                    "typeval",
                    "dtype"
                ],
                "test_simple_rectangular_integer": [
                    "self",
                    "typeval",
                    "dtype"
                ],
                "test_simple_rectangular_float": [
                    "self"
                ],
                "test_simple_float": [
                    "self"
                ],
                "test_simple_complex": [
                    "self"
                ],
                "test_simple_symmetric_integer": [
                    "self",
                    "typeval",
                    "dtype"
                ],
                "test_simple_skew_symmetric_integer": [
                    "self"
                ],
                "test_simple_skew_symmetric_float": [
                    "self"
                ],
                "test_simple_hermitian_complex": [
                    "self"
                ],
                "test_random_symmetric_float": [
                    "self"
                ],
                "test_random_rectangular_float": [
                    "self"
                ],
                "test_simple_pattern": [
                    "self"
                ]
            },
            "TestMMIOReadLargeIntegers": {
                "setup_method": [
                    "self"
                ],
                "teardown_method": [
                    "self"
                ],
                "check_read": [
                    "self",
                    "example",
                    "a",
                    "info",
                    "dense",
                    "over32",
                    "over64"
                ],
                "test_read_32bit_integer_dense": [
                    "self"
                ],
                "test_read_32bit_integer_sparse": [
                    "self"
                ],
                "test_read_64bit_integer_dense": [
                    "self"
                ],
                "test_read_64bit_integer_sparse_general": [
                    "self"
                ],
                "test_read_64bit_integer_sparse_symmetric": [
                    "self"
                ],
                "test_read_64bit_integer_sparse_skew": [
                    "self"
                ],
                "test_read_over64bit_integer_dense": [
                    "self"
                ],
                "test_read_over64bit_integer_sparse": [
                    "self"
                ]
            },
            "TestMMIOCoordinate": {
                "setup_method": [
                    "self"
                ],
                "teardown_method": [
                    "self"
                ],
                "check_read": [
                    "self",
                    "example",
                    "a",
                    "info"
                ],
                "test_read_general": [
                    "self"
                ],
                "test_read_hermitian": [
                    "self"
                ],
                "test_read_skew": [
                    "self"
                ],
                "test_read_symmetric": [
                    "self"
                ],
                "test_read_symmetric_pattern": [
                    "self"
                ],
                "test_read_empty_lines": [
                    "self"
                ],
                "test_empty_write_read": [
                    "self"
                ],
                "test_bzip2_py3": [
                    "self"
                ],
                "test_gzip_py3": [
                    "self"
                ],
                "test_real_write_read": [
                    "self"
                ],
                "test_complex_write_read": [
                    "self"
                ],
                "test_sparse_formats": [
                    "self"
                ],
                "test_precision": [
                    "self"
                ],
                "test_bad_number_of_coordinate_header_fields": [
                    "self"
                ]
            }
        },
        "scipy.io.matlab.mio5_params": {
            "_convert_codecs": [
                "template",
                "byte_order"
            ],
            "mat_struct": {},
            "MatlabObject": {
                "__new__": [
                    "cls",
                    "input_array",
                    "classname"
                ],
                "__array_finalize__": [
                    "self",
                    "obj"
                ]
            },
            "MatlabFunction": {
                "__new__": [
                    "cls",
                    "input_array"
                ]
            },
            "MatlabOpaque": {
                "__new__": [
                    "cls",
                    "input_array"
                ]
            }
        },
        "scipy.io.matlab.mio4": {
            "arr_to_2d": [
                "arr",
                "oned_as"
            ],
            "VarHeader4": {
                "__init__": [
                    "self",
                    "name",
                    "dtype",
                    "mclass",
                    "dims",
                    "is_complex"
                ]
            },
            "VarReader4": {
                "__init__": [
                    "self",
                    "file_reader"
                ],
                "read_header": [
                    "self"
                ],
                "array_from_header": [
                    "self",
                    "hdr",
                    "process"
                ],
                "read_sub_array": [
                    "self",
                    "hdr",
                    "copy"
                ],
                "read_full_array": [
                    "self",
                    "hdr"
                ],
                "read_char_array": [
                    "self",
                    "hdr"
                ],
                "read_sparse_array": [
                    "self",
                    "hdr"
                ],
                "shape_from_header": [
                    "self",
                    "hdr"
                ]
            },
            "MatFile4Reader": {
                "__init__": [
                    "self",
                    "mat_stream"
                ],
                "guess_byte_order": [
                    "self"
                ],
                "initialize_read": [
                    "self"
                ],
                "read_var_header": [
                    "self"
                ],
                "read_var_array": [
                    "self",
                    "header",
                    "process"
                ],
                "get_variables": [
                    "self",
                    "variable_names"
                ],
                "list_variables": [
                    "self"
                ]
            },
            "VarWriter4": {
                "__init__": [
                    "self",
                    "file_writer"
                ],
                "write_bytes": [
                    "self",
                    "arr"
                ],
                "write_string": [
                    "self",
                    "s"
                ],
                "write_header": [
                    "self",
                    "name",
                    "shape",
                    "P",
                    "T",
                    "imagf"
                ],
                "write": [
                    "self",
                    "arr",
                    "name"
                ],
                "write_numeric": [
                    "self",
                    "arr",
                    "name"
                ],
                "write_char": [
                    "self",
                    "arr",
                    "name"
                ],
                "write_sparse": [
                    "self",
                    "arr",
                    "name"
                ]
            },
            "MatFile4Writer": {
                "__init__": [
                    "self",
                    "file_stream",
                    "oned_as"
                ],
                "put_variables": [
                    "self",
                    "mdict",
                    "write_header"
                ]
            }
        },
        "scipy.io.matlab.byteordercodes": {
            "to_numpy_code": [
                "code"
            ]
        },
        "scipy.io.matlab.miobase": {
            "convert_dtypes": [
                "dtype_template",
                "order_code"
            ],
            "read_dtype": [
                "mat_stream",
                "a_dtype"
            ],
            "get_matfile_version": [
                "fileobj"
            ],
            "matdims": [
                "arr",
                "oned_as"
            ],
            "arr_dtype_number": [
                "arr",
                "num"
            ],
            "arr_to_chars": [
                "arr"
            ],
            "MatReadError": {},
            "MatWriteError": {},
            "MatReadWarning": {},
            "MatVarReader": {
                "__init__": [
                    "self",
                    "file_reader"
                ],
                "read_header": [
                    "self"
                ],
                "array_from_header": [
                    "self",
                    "header"
                ]
            },
            "MatFileReader": {
                "__init__": [
                    "self",
                    "mat_stream",
                    "byte_order",
                    "mat_dtype",
                    "squeeze_me",
                    "chars_as_strings",
                    "matlab_compatible",
                    "struct_as_record",
                    "verify_compressed_data_integrity",
                    "simplify_cells"
                ],
                "set_matlab_compatible": [
                    "self"
                ],
                "guess_byte_order": [
                    "self"
                ],
                "end_of_stream": [
                    "self"
                ]
            }
        },
        "scipy.io.matlab.setup": {
            "configuration": [
                "parent_package",
                "top_path"
            ]
        },
        "scipy.io.matlab": {},
        "scipy.io.matlab.mio5": {
            "_has_struct": [
                "elem"
            ],
            "_inspect_cell_array": [
                "ndarray"
            ],
            "_matstruct_to_dict": [
                "matobj"
            ],
            "_simplify_cells": [
                "d"
            ],
            "varmats_from_mat": [
                "file_obj"
            ],
            "to_writeable": [
                "source"
            ],
            "MatFile5Reader": {
                "__init__": [
                    "self",
                    "mat_stream",
                    "byte_order",
                    "mat_dtype",
                    "squeeze_me",
                    "chars_as_strings",
                    "matlab_compatible",
                    "struct_as_record",
                    "verify_compressed_data_integrity",
                    "uint16_codec",
                    "simplify_cells"
                ],
                "guess_byte_order": [
                    "self"
                ],
                "read_file_header": [
                    "self"
                ],
                "initialize_read": [
                    "self"
                ],
                "read_var_header": [
                    "self"
                ],
                "read_var_array": [
                    "self",
                    "header",
                    "process"
                ],
                "get_variables": [
                    "self",
                    "variable_names"
                ],
                "list_variables": [
                    "self"
                ]
            },
            "EmptyStructMarker": {},
            "VarWriter5": {
                "__init__": [
                    "self",
                    "file_writer"
                ],
                "write_bytes": [
                    "self",
                    "arr"
                ],
                "write_string": [
                    "self",
                    "s"
                ],
                "write_element": [
                    "self",
                    "arr",
                    "mdtype"
                ],
                "write_smalldata_element": [
                    "self",
                    "arr",
                    "mdtype",
                    "byte_count"
                ],
                "write_regular_element": [
                    "self",
                    "arr",
                    "mdtype",
                    "byte_count"
                ],
                "write_header": [
                    "self",
                    "shape",
                    "mclass",
                    "is_complex",
                    "is_logical",
                    "nzmax"
                ],
                "update_matrix_tag": [
                    "self",
                    "start_pos"
                ],
                "write_top": [
                    "self",
                    "arr",
                    "name",
                    "is_global"
                ],
                "write": [
                    "self",
                    "arr"
                ],
                "write_numeric": [
                    "self",
                    "arr"
                ],
                "write_char": [
                    "self",
                    "arr",
                    "codec"
                ],
                "write_sparse": [
                    "self",
                    "arr"
                ],
                "write_cells": [
                    "self",
                    "arr"
                ],
                "write_empty_struct": [
                    "self"
                ],
                "write_struct": [
                    "self",
                    "arr"
                ],
                "_write_items": [
                    "self",
                    "arr"
                ],
                "write_object": [
                    "self",
                    "arr"
                ]
            },
            "MatFile5Writer": {
                "__init__": [
                    "self",
                    "file_stream",
                    "do_compression",
                    "unicode_strings",
                    "global_vars",
                    "long_field_names",
                    "oned_as"
                ],
                "write_file_header": [
                    "self"
                ],
                "put_variables": [
                    "self",
                    "mdict",
                    "write_header"
                ]
            }
        },
        "scipy.io.matlab.mio": {
            "_open_file_context": [
                "file_like",
                "appendmat",
                "mode"
            ],
            "_open_file": [
                "file_like",
                "appendmat",
                "mode"
            ],
            "mat_reader_factory": [
                "file_name",
                "appendmat"
            ],
            "loadmat": [
                "file_name",
                "mdict",
                "appendmat"
            ],
            "savemat": [
                "file_name",
                "mdict",
                "appendmat",
                "format",
                "long_field_names",
                "do_compression",
                "oned_as"
            ],
            "whosmat": [
                "file_name",
                "appendmat"
            ]
        },
        "scipy.io.matlab.tests.test_miobase": {
            "test_matdims": []
        },
        "scipy.io.matlab.tests.test_streams": {
            "setup_test_file": [],
            "test_make_stream": [],
            "test_tell_seek": [],
            "test_read": [],
            "TestZlibInputStream": {
                "_get_data": [
                    "self",
                    "size"
                ],
                "test_read": [
                    "self"
                ],
                "test_read_max_length": [
                    "self"
                ],
                "test_read_bad_checksum": [
                    "self"
                ],
                "test_seek": [
                    "self"
                ],
                "test_seek_bad_checksum": [
                    "self"
                ],
                "test_all_data_read": [
                    "self"
                ],
                "test_all_data_read_overlap": [
                    "self"
                ],
                "test_all_data_read_bad_checksum": [
                    "self"
                ]
            }
        },
        "scipy.io.matlab.tests.test_mio": {
            "mlarr": [],
            "types_compatible": [
                "var1",
                "var2"
            ],
            "_check_level": [
                "label",
                "expected",
                "actual"
            ],
            "_load_check_case": [
                "name",
                "files",
                "case"
            ],
            "_whos_check_case": [
                "name",
                "files",
                "case",
                "classes"
            ],
            "_rt_check_case": [
                "name",
                "expected",
                "format"
            ],
            "test_load": [],
            "test_whos": [],
            "test_round_trip": [],
            "test_gzip_simple": [],
            "test_multiple_open": [],
            "test_mat73": [],
            "test_warnings": [],
            "test_regression_653": [],
            "test_structname_len": [],
            "test_4_and_long_field_names_incompatible": [],
            "test_long_field_names": [],
            "test_long_field_names_in_struct": [],
            "test_cell_with_one_thing_in_it": [],
            "test_writer_properties": [],
            "test_use_small_element": [],
            "test_save_dict": [],
            "test_1d_shape": [],
            "test_compression": [],
            "test_single_object": [],
            "test_skip_variable": [],
            "test_empty_struct": [],
            "test_save_empty_dict": [],
            "assert_any_equal": [
                "output",
                "alternatives"
            ],
            "test_to_writeable": [],
            "test_recarray": [],
            "test_save_object": [],
            "test_read_opts": [],
            "test_empty_string": [],
            "test_corrupted_data": [],
            "test_corrupted_data_check_can_be_disabled": [],
            "test_read_both_endian": [],
            "test_write_opposite_endian": [],
            "test_logical_array": [],
            "test_logical_out_type": [],
            "test_mat4_3d": [],
            "test_func_read": [],
            "test_mat_dtype": [],
            "test_sparse_in_struct": [],
            "test_mat_struct_squeeze": [],
            "test_scalar_squeeze": [],
            "test_str_round": [],
            "test_fieldnames": [],
            "test_loadmat_varnames": [],
            "test_round_types": [],
            "test_varmats_from_mat": [],
            "test_one_by_zero": [],
            "test_load_mat4_le": [],
            "test_unicode_mat4": [],
            "test_logical_sparse": [],
            "test_empty_sparse": [],
            "test_empty_mat_error": [],
            "test_miuint32_compromise": [],
            "test_miutf8_for_miint8_compromise": [],
            "test_bad_utf8": [],
            "test_save_unicode_field": [
                "tmpdir"
            ],
            "test_filenotfound": [],
            "test_simplify_cells": []
        },
        "scipy.io.matlab.tests": {},
        "scipy.io.matlab.tests.test_mio_funcs": {
            "read_minimat_vars": [
                "rdr"
            ],
            "read_workspace_vars": [
                "fname"
            ],
            "test_jottings": []
        },
        "scipy.io.matlab.tests.test_mio5_utils": {
            "test_byteswap": [],
            "_make_tag": [
                "base_dt",
                "val",
                "mdtype",
                "sde"
            ],
            "_write_stream": [
                "stream"
            ],
            "_make_readerlike": [
                "stream",
                "byte_order"
            ],
            "test_read_tag": [],
            "test_read_stream": [],
            "test_read_numeric": [],
            "test_read_numeric_writeable": [],
            "test_zero_byte_string": []
        },
        "scipy.io.matlab.tests.test_byteordercodes": {
            "test_native": [],
            "test_to_numpy": []
        },
        "scipy.io.matlab.tests.test_mio_utils": {
            "test_squeeze_element": [],
            "test_chars_strings": []
        },
        "scipy.io.matlab.tests.test_pathological": {
            "test_multiple_fieldnames": [],
            "test_malformed1": []
        },
        "scipy.io.arff.setup": {
            "configuration": [
                "parent_package",
                "top_path"
            ]
        },
        "scipy.io.arff": {},
        "scipy.io.arff.arffread": {
            "to_attribute": [
                "name",
                "attr_string"
            ],
            "csv_sniffer_has_bug_last_field": [],
            "workaround_csv_sniffer_bug_last_field": [
                "sniff_line",
                "dialect",
                "delimiters"
            ],
            "split_data_line": [
                "line",
                "dialect"
            ],
            "tokenize_attribute": [
                "iterable",
                "attribute"
            ],
            "tokenize_single_comma": [
                "val"
            ],
            "tokenize_single_wcomma": [
                "val"
            ],
            "read_relational_attribute": [
                "ofile",
                "relational_attribute",
                "i"
            ],
            "read_header": [
                "ofile"
            ],
            "loadarff": [
                "f"
            ],
            "_loadarff": [
                "ofile"
            ],
            "basic_stats": [
                "data"
            ],
            "print_attribute": [
                "name",
                "tp",
                "data"
            ],
            "test_weka": [
                "filename"
            ],
            "ArffError": {},
            "ParseArffError": {},
            "Attribute": {
                "__init__": [
                    "self",
                    "name"
                ],
                "parse_attribute": [
                    "cls",
                    "name",
                    "attr_string"
                ],
                "parse_data": [
                    "self",
                    "data_str"
                ],
                "__str__": [
                    "self"
                ]
            },
            "NominalAttribute": {
                "__init__": [
                    "self",
                    "name",
                    "values"
                ],
                "_get_nom_val": [
                    "atrv"
                ],
                "parse_attribute": [
                    "cls",
                    "name",
                    "attr_string"
                ],
                "parse_data": [
                    "self",
                    "data_str"
                ],
                "__str__": [
                    "self"
                ]
            },
            "NumericAttribute": {
                "__init__": [
                    "self",
                    "name"
                ],
                "parse_attribute": [
                    "cls",
                    "name",
                    "attr_string"
                ],
                "parse_data": [
                    "self",
                    "data_str"
                ],
                "_basic_stats": [
                    "self",
                    "data"
                ]
            },
            "StringAttribute": {
                "__init__": [
                    "self",
                    "name"
                ],
                "parse_attribute": [
                    "cls",
                    "name",
                    "attr_string"
                ]
            },
            "DateAttribute": {
                "__init__": [
                    "self",
                    "name",
                    "date_format",
                    "datetime_unit"
                ],
                "_get_date_format": [
                    "atrv"
                ],
                "parse_attribute": [
                    "cls",
                    "name",
                    "attr_string"
                ],
                "parse_data": [
                    "self",
                    "data_str"
                ],
                "__str__": [
                    "self"
                ]
            },
            "RelationalAttribute": {
                "__init__": [
                    "self",
                    "name"
                ],
                "parse_attribute": [
                    "cls",
                    "name",
                    "attr_string"
                ],
                "parse_data": [
                    "self",
                    "data_str"
                ],
                "__str__": [
                    "self"
                ]
            },
            "MetaData": {
                "__init__": [
                    "self",
                    "rel",
                    "attr"
                ],
                "__repr__": [
                    "self"
                ],
                "__iter__": [
                    "self"
                ],
                "__getitem__": [
                    "self",
                    "key"
                ],
                "names": [
                    "self"
                ],
                "types": [
                    "self"
                ]
            }
        },
        "scipy.io.arff.tests": {},
        "scipy.io.arff.tests.test_arffread": {
            "TestData": {
                "test1": [
                    "self"
                ],
                "test2": [
                    "self"
                ],
                "test3": [
                    "self"
                ],
                "test4": [
                    "self"
                ],
                "_test": [
                    "self",
                    "test_file"
                ],
                "test_filelike": [
                    "self"
                ],
                "test_path": [
                    "self"
                ]
            },
            "TestMissingData": {
                "test_missing": [
                    "self"
                ]
            },
            "TestNoData": {
                "test_nodata": [
                    "self"
                ]
            },
            "TestHeader": {
                "test_type_parsing": [
                    "self"
                ],
                "test_badtype_parsing": [
                    "self"
                ],
                "test_fullheader1": [
                    "self"
                ],
                "test_dateheader": [
                    "self"
                ],
                "test_dateheader_unsupported": [
                    "self"
                ]
            },
            "TestDateAttribute": {
                "setup_method": [
                    "self"
                ],
                "test_year_attribute": [
                    "self"
                ],
                "test_month_attribute": [
                    "self"
                ],
                "test_date_attribute": [
                    "self"
                ],
                "test_datetime_local_attribute": [
                    "self"
                ],
                "test_datetime_missing": [
                    "self"
                ],
                "test_datetime_timezone": [
                    "self"
                ]
            },
            "TestRelationalAttribute": {
                "setup_method": [
                    "self"
                ],
                "test_attributes": [
                    "self"
                ],
                "test_data": [
                    "self"
                ]
            },
            "TestRelationalAttributeLong": {
                "setup_method": [
                    "self"
                ],
                "test_attributes": [
                    "self"
                ],
                "test_data": [
                    "self"
                ]
            },
            "TestQuotedNominal": {
                "setup_method": [
                    "self"
                ],
                "test_attributes": [
                    "self"
                ],
                "test_data": [
                    "self"
                ]
            },
            "TestQuotedNominalSpaces": {
                "setup_method": [
                    "self"
                ],
                "test_attributes": [
                    "self"
                ],
                "test_data": [
                    "self"
                ]
            }
        },
        "scipy.io.harwell_boeing.hb": {
            "_nbytes_full": [
                "fmt",
                "nlines"
            ],
            "_expect_int": [
                "value",
                "msg"
            ],
            "_read_hb_data": [
                "content",
                "header"
            ],
            "_write_data": [
                "m",
                "fid",
                "header"
            ],
            "hb_read": [
                "path_or_open_file"
            ],
            "hb_write": [
                "path_or_open_file",
                "m",
                "hb_info"
            ],
            "MalformedHeader": {},
            "LineOverflow": {},
            "HBInfo": {
                "from_data": [
                    "cls",
                    "m",
                    "title",
                    "key",
                    "mxtype",
                    "fmt"
                ],
                "from_file": [
                    "cls",
                    "fid"
                ],
                "__init__": [
                    "self",
                    "title",
                    "key",
                    "total_nlines",
                    "pointer_nlines",
                    "indices_nlines",
                    "values_nlines",
                    "mxtype",
                    "nrows",
                    "ncols",
                    "nnon_zeros",
                    "pointer_format_str",
                    "indices_format_str",
                    "values_format_str",
                    "right_hand_sides_nlines",
                    "nelementals"
                ],
                "dump": [
                    "self"
                ]
            },
            "HBMatrixType": {
                "from_fortran": [
                    "cls",
                    "fmt"
                ],
                "__init__": [
                    "self",
                    "value_type",
                    "structure",
                    "storage"
                ],
                "fortran_format": [
                    "self"
                ],
                "__repr__": [
                    "self"
                ]
            },
            "HBFile": {
                "__init__": [
                    "self",
                    "file",
                    "hb_info"
                ],
                "title": [
                    "self"
                ],
                "key": [
                    "self"
                ],
                "type": [
                    "self"
                ],
                "structure": [
                    "self"
                ],
                "storage": [
                    "self"
                ],
                "read_matrix": [
                    "self"
                ],
                "write_matrix": [
                    "self",
                    "m"
                ]
            }
        },
        "scipy.io.harwell_boeing.setup": {
            "configuration": [
                "parent_package",
                "top_path"
            ]
        },
        "scipy.io.harwell_boeing": {},
        "scipy.io.harwell_boeing._fortran_format_parser": {
            "number_digits": [
                "n"
            ],
            "BadFortranFormat": {},
            "IntFormat": {
                "from_number": [
                    "cls",
                    "n",
                    "min"
                ],
                "__init__": [
                    "self",
                    "width",
                    "min",
                    "repeat"
                ],
                "__repr__": [
                    "self"
                ],
                "fortran_format": [
                    "self"
                ],
                "python_format": [
                    "self"
                ]
            },
            "ExpFormat": {
                "from_number": [
                    "cls",
                    "n",
                    "min"
                ],
                "__init__": [
                    "self",
                    "width",
                    "significand",
                    "min",
                    "repeat"
                ],
                "__repr__": [
                    "self"
                ],
                "fortran_format": [
                    "self"
                ],
                "python_format": [
                    "self"
                ]
            },
            "Token": {
                "__init__": [
                    "self",
                    "type",
                    "value",
                    "pos"
                ],
                "__str__": [
                    "self"
                ],
                "__repr__": [
                    "self"
                ]
            },
            "Tokenizer": {
                "__init__": [
                    "self"
                ],
                "input": [
                    "self",
                    "s"
                ],
                "next_token": [
                    "self"
                ]
            },
            "FortranFormatParser": {
                "__init__": [
                    "self"
                ],
                "parse": [
                    "self",
                    "s"
                ],
                "_get_min": [
                    "self",
                    "tokens"
                ],
                "_expect": [
                    "self",
                    "token",
                    "tp"
                ],
                "_parse_format": [
                    "self",
                    "tokens"
                ],
                "_next": [
                    "self",
                    "tokens",
                    "tp"
                ]
            }
        },
        "scipy.io.harwell_boeing.tests.test_hb": {
            "assert_csc_almost_equal": [
                "r",
                "l"
            ],
            "TestHBReader": {
                "test_simple": [
                    "self"
                ]
            },
            "TestHBReadWrite": {
                "check_save_load": [
                    "self",
                    "value"
                ],
                "test_simple": [
                    "self"
                ]
            }
        },
        "scipy.io.harwell_boeing.tests": {},
        "scipy.io.harwell_boeing.tests.test_fortran_format": {
            "TestFortranFormatParser": {
                "setup_method": [
                    "self"
                ],
                "_test_equal": [
                    "self",
                    "format",
                    "ref"
                ],
                "test_simple_int": [
                    "self"
                ],
                "test_simple_repeated_int": [
                    "self"
                ],
                "test_simple_exp": [
                    "self"
                ],
                "test_exp_exp": [
                    "self"
                ],
                "test_repeat_exp": [
                    "self"
                ],
                "test_repeat_exp_exp": [
                    "self"
                ],
                "test_wrong_formats": [
                    "self"
                ]
            },
            "TestIntFormat": {
                "test_to_fortran": [
                    "self"
                ],
                "test_from_number": [
                    "self"
                ]
            },
            "TestExpFormat": {
                "test_to_fortran": [
                    "self"
                ],
                "test_from_number": [
                    "self"
                ]
            }
        },
        "scipy.stats._ksstats": {
            "_log_nfactorial_div_n_pow_n": [
                "n"
            ],
            "_clip_prob": [
                "p"
            ],
            "_select_and_clip_prob": [
                "cdfprob",
                "sfprob",
                "cdf"
            ],
            "_kolmogn_DMTW": [
                "n",
                "d",
                "cdf"
            ],
            "_pomeranz_compute_j1j2": [
                "i",
                "n",
                "ll",
                "ceilf",
                "roundf"
            ],
            "_kolmogn_Pomeranz": [
                "n",
                "x",
                "cdf"
            ],
            "_kolmogn_PelzGood": [
                "n",
                "x",
                "cdf"
            ],
            "_kolmogn": [
                "n",
                "x",
                "cdf"
            ],
            "_kolmogn_p": [
                "n",
                "x"
            ],
            "_kolmogni": [
                "n",
                "p",
                "q"
            ],
            "kolmogn": [
                "n",
                "x",
                "cdf"
            ],
            "kolmognp": [
                "n",
                "x"
            ],
            "kolmogni": [
                "n",
                "q",
                "cdf"
            ]
        },
        "scipy.stats._discrete_distns": {
            "binom_gen": {
                "_rvs": [
                    "self",
                    "n",
                    "p",
                    "size",
                    "random_state"
                ],
                "_argcheck": [
                    "self",
                    "n",
                    "p"
                ],
                "_get_support": [
                    "self",
                    "n",
                    "p"
                ],
                "_logpmf": [
                    "self",
                    "x",
                    "n",
                    "p"
                ],
                "_pmf": [
                    "self",
                    "x",
                    "n",
                    "p"
                ],
                "_cdf": [
                    "self",
                    "x",
                    "n",
                    "p"
                ],
                "_sf": [
                    "self",
                    "x",
                    "n",
                    "p"
                ],
                "_ppf": [
                    "self",
                    "q",
                    "n",
                    "p"
                ],
                "_stats": [
                    "self",
                    "n",
                    "p",
                    "moments"
                ],
                "_entropy": [
                    "self",
                    "n",
                    "p"
                ]
            },
            "bernoulli_gen": {
                "_rvs": [
                    "self",
                    "p",
                    "size",
                    "random_state"
                ],
                "_argcheck": [
                    "self",
                    "p"
                ],
                "_get_support": [
                    "self",
                    "p"
                ],
                "_logpmf": [
                    "self",
                    "x",
                    "p"
                ],
                "_pmf": [
                    "self",
                    "x",
                    "p"
                ],
                "_cdf": [
                    "self",
                    "x",
                    "p"
                ],
                "_sf": [
                    "self",
                    "x",
                    "p"
                ],
                "_ppf": [
                    "self",
                    "q",
                    "p"
                ],
                "_stats": [
                    "self",
                    "p"
                ],
                "_entropy": [
                    "self",
                    "p"
                ]
            },
            "betabinom_gen": {
                "_rvs": [
                    "self",
                    "n",
                    "a",
                    "b",
                    "size",
                    "random_state"
                ],
                "_get_support": [
                    "self",
                    "n",
                    "a",
                    "b"
                ],
                "_argcheck": [
                    "self",
                    "n",
                    "a",
                    "b"
                ],
                "_logpmf": [
                    "self",
                    "x",
                    "n",
                    "a",
                    "b"
                ],
                "_pmf": [
                    "self",
                    "x",
                    "n",
                    "a",
                    "b"
                ],
                "_stats": [
                    "self",
                    "n",
                    "a",
                    "b",
                    "moments"
                ]
            },
            "nbinom_gen": {
                "_rvs": [
                    "self",
                    "n",
                    "p",
                    "size",
                    "random_state"
                ],
                "_argcheck": [
                    "self",
                    "n",
                    "p"
                ],
                "_pmf": [
                    "self",
                    "x",
                    "n",
                    "p"
                ],
                "_logpmf": [
                    "self",
                    "x",
                    "n",
                    "p"
                ],
                "_cdf": [
                    "self",
                    "x",
                    "n",
                    "p"
                ],
                "_sf_skip": [
                    "self",
                    "x",
                    "n",
                    "p"
                ],
                "_ppf": [
                    "self",
                    "q",
                    "n",
                    "p"
                ],
                "_stats": [
                    "self",
                    "n",
                    "p"
                ]
            },
            "geom_gen": {
                "_rvs": [
                    "self",
                    "p",
                    "size",
                    "random_state"
                ],
                "_argcheck": [
                    "self",
                    "p"
                ],
                "_pmf": [
                    "self",
                    "k",
                    "p"
                ],
                "_logpmf": [
                    "self",
                    "k",
                    "p"
                ],
                "_cdf": [
                    "self",
                    "x",
                    "p"
                ],
                "_sf": [
                    "self",
                    "x",
                    "p"
                ],
                "_logsf": [
                    "self",
                    "x",
                    "p"
                ],
                "_ppf": [
                    "self",
                    "q",
                    "p"
                ],
                "_stats": [
                    "self",
                    "p"
                ]
            },
            "hypergeom_gen": {
                "_rvs": [
                    "self",
                    "M",
                    "n",
                    "N",
                    "size",
                    "random_state"
                ],
                "_get_support": [
                    "self",
                    "M",
                    "n",
                    "N"
                ],
                "_argcheck": [
                    "self",
                    "M",
                    "n",
                    "N"
                ],
                "_logpmf": [
                    "self",
                    "k",
                    "M",
                    "n",
                    "N"
                ],
                "_pmf": [
                    "self",
                    "k",
                    "M",
                    "n",
                    "N"
                ],
                "_stats": [
                    "self",
                    "M",
                    "n",
                    "N"
                ],
                "_entropy": [
                    "self",
                    "M",
                    "n",
                    "N"
                ],
                "_sf": [
                    "self",
                    "k",
                    "M",
                    "n",
                    "N"
                ],
                "_logsf": [
                    "self",
                    "k",
                    "M",
                    "n",
                    "N"
                ],
                "_logcdf": [
                    "self",
                    "k",
                    "M",
                    "n",
                    "N"
                ]
            },
            "nhypergeom_gen": {
                "_get_support": [
                    "self",
                    "M",
                    "n",
                    "r"
                ],
                "_argcheck": [
                    "self",
                    "M",
                    "n",
                    "r"
                ],
                "_logpmf": [
                    "self",
                    "k",
                    "M",
                    "n",
                    "r"
                ],
                "_pmf": [
                    "self",
                    "k",
                    "M",
                    "n",
                    "r"
                ],
                "_stats": [
                    "self",
                    "M",
                    "n",
                    "r"
                ]
            },
            "logser_gen": {
                "_rvs": [
                    "self",
                    "p",
                    "size",
                    "random_state"
                ],
                "_argcheck": [
                    "self",
                    "p"
                ],
                "_pmf": [
                    "self",
                    "k",
                    "p"
                ],
                "_stats": [
                    "self",
                    "p"
                ]
            },
            "poisson_gen": {
                "_argcheck": [
                    "self",
                    "mu"
                ],
                "_rvs": [
                    "self",
                    "mu",
                    "size",
                    "random_state"
                ],
                "_logpmf": [
                    "self",
                    "k",
                    "mu"
                ],
                "_pmf": [
                    "self",
                    "k",
                    "mu"
                ],
                "_cdf": [
                    "self",
                    "x",
                    "mu"
                ],
                "_sf": [
                    "self",
                    "x",
                    "mu"
                ],
                "_ppf": [
                    "self",
                    "q",
                    "mu"
                ],
                "_stats": [
                    "self",
                    "mu"
                ]
            },
            "planck_gen": {
                "_argcheck": [
                    "self",
                    "lambda_"
                ],
                "_pmf": [
                    "self",
                    "k",
                    "lambda_"
                ],
                "_cdf": [
                    "self",
                    "x",
                    "lambda_"
                ],
                "_sf": [
                    "self",
                    "x",
                    "lambda_"
                ],
                "_logsf": [
                    "self",
                    "x",
                    "lambda_"
                ],
                "_ppf": [
                    "self",
                    "q",
                    "lambda_"
                ],
                "_rvs": [
                    "self",
                    "lambda_",
                    "size",
                    "random_state"
                ],
                "_stats": [
                    "self",
                    "lambda_"
                ],
                "_entropy": [
                    "self",
                    "lambda_"
                ]
            },
            "boltzmann_gen": {
                "_argcheck": [
                    "self",
                    "lambda_",
                    "N"
                ],
                "_get_support": [
                    "self",
                    "lambda_",
                    "N"
                ],
                "_pmf": [
                    "self",
                    "k",
                    "lambda_",
                    "N"
                ],
                "_cdf": [
                    "self",
                    "x",
                    "lambda_",
                    "N"
                ],
                "_ppf": [
                    "self",
                    "q",
                    "lambda_",
                    "N"
                ],
                "_stats": [
                    "self",
                    "lambda_",
                    "N"
                ]
            },
            "randint_gen": {
                "_argcheck": [
                    "self",
                    "low",
                    "high"
                ],
                "_get_support": [
                    "self",
                    "low",
                    "high"
                ],
                "_pmf": [
                    "self",
                    "k",
                    "low",
                    "high"
                ],
                "_cdf": [
                    "self",
                    "x",
                    "low",
                    "high"
                ],
                "_ppf": [
                    "self",
                    "q",
                    "low",
                    "high"
                ],
                "_stats": [
                    "self",
                    "low",
                    "high"
                ],
                "_rvs": [
                    "self",
                    "low",
                    "high",
                    "size",
                    "random_state"
                ],
                "_entropy": [
                    "self",
                    "low",
                    "high"
                ]
            },
            "zipf_gen": {
                "_rvs": [
                    "self",
                    "a",
                    "size",
                    "random_state"
                ],
                "_argcheck": [
                    "self",
                    "a"
                ],
                "_pmf": [
                    "self",
                    "k",
                    "a"
                ],
                "_munp": [
                    "self",
                    "n",
                    "a"
                ]
            },
            "dlaplace_gen": {
                "_pmf": [
                    "self",
                    "k",
                    "a"
                ],
                "_cdf": [
                    "self",
                    "x",
                    "a"
                ],
                "_ppf": [
                    "self",
                    "q",
                    "a"
                ],
                "_stats": [
                    "self",
                    "a"
                ],
                "_entropy": [
                    "self",
                    "a"
                ],
                "_rvs": [
                    "self",
                    "a",
                    "size",
                    "random_state"
                ]
            },
            "skellam_gen": {
                "_rvs": [
                    "self",
                    "mu1",
                    "mu2",
                    "size",
                    "random_state"
                ],
                "_pmf": [
                    "self",
                    "x",
                    "mu1",
                    "mu2"
                ],
                "_cdf": [
                    "self",
                    "x",
                    "mu1",
                    "mu2"
                ],
                "_stats": [
                    "self",
                    "mu1",
                    "mu2"
                ]
            },
            "yulesimon_gen": {
                "_rvs": [
                    "self",
                    "alpha",
                    "size",
                    "random_state"
                ],
                "_pmf": [
                    "self",
                    "x",
                    "alpha"
                ],
                "_argcheck": [
                    "self",
                    "alpha"
                ],
                "_logpmf": [
                    "self",
                    "x",
                    "alpha"
                ],
                "_cdf": [
                    "self",
                    "x",
                    "alpha"
                ],
                "_sf": [
                    "self",
                    "x",
                    "alpha"
                ],
                "_logsf": [
                    "self",
                    "x",
                    "alpha"
                ],
                "_stats": [
                    "self",
                    "alpha"
                ]
            }
        },
        "scipy.stats._constants": {},
        "scipy.stats.mstats": {},
        "scipy.stats._continuous_distns": {
            "_remove_optimizer_parameters": [
                "kwds"
            ],
            "_norm_pdf": [
                "x"
            ],
            "_norm_logpdf": [
                "x"
            ],
            "_norm_cdf": [
                "x"
            ],
            "_norm_logcdf": [
                "x"
            ],
            "_norm_ppf": [
                "q"
            ],
            "_norm_sf": [
                "x"
            ],
            "_norm_logsf": [
                "x"
            ],
            "_norm_isf": [
                "q"
            ],
            "_beta_mle_a": [
                "a",
                "b",
                "n",
                "s1"
            ],
            "_beta_mle_ab": [
                "theta",
                "n",
                "s1",
                "s2"
            ],
            "_digammainv": [
                "y"
            ],
            "_average_with_log_weights": [
                "x",
                "logweights"
            ],
            "_check_fit_input_parameters": [
                "dist",
                "data",
                "args",
                "kwds"
            ],
            "_lognorm_logpdf": [
                "x",
                "s"
            ],
            "_rayleigh_fit_check_error": [
                "ier",
                "msg"
            ],
            "_truncnorm_get_delta_scalar": [
                "a",
                "b"
            ],
            "_truncnorm_get_delta": [
                "a",
                "b"
            ],
            "_truncnorm_get_logdelta_scalar": [
                "a",
                "b"
            ],
            "_truncnorm_logpdf_scalar": [
                "x",
                "a",
                "b"
            ],
            "_truncnorm_pdf_scalar": [
                "x",
                "a",
                "b"
            ],
            "_truncnorm_logcdf_scalar": [
                "x",
                "a",
                "b"
            ],
            "_truncnorm_cdf_scalar": [
                "x",
                "a",
                "b"
            ],
            "_truncnorm_logsf_scalar": [
                "x",
                "a",
                "b"
            ],
            "_truncnorm_sf_scalar": [
                "x",
                "a",
                "b"
            ],
            "_norm_logcdfprime": [
                "z"
            ],
            "_norm_ilogcdf": [
                "y"
            ],
            "_truncnorm_ppf_scalar": [
                "q",
                "a",
                "b"
            ],
            "_argus_phi": [
                "chi"
            ],
            "ksone_gen": {
                "_pdf": [
                    "self",
                    "x",
                    "n"
                ],
                "_cdf": [
                    "self",
                    "x",
                    "n"
                ],
                "_sf": [
                    "self",
                    "x",
                    "n"
                ],
                "_ppf": [
                    "self",
                    "q",
                    "n"
                ],
                "_isf": [
                    "self",
                    "q",
                    "n"
                ]
            },
            "kstwo_gen": {
                "_get_support": [
                    "self",
                    "n"
                ],
                "_pdf": [
                    "self",
                    "x",
                    "n"
                ],
                "_cdf": [
                    "self",
                    "x",
                    "n"
                ],
                "_sf": [
                    "self",
                    "x",
                    "n"
                ],
                "_ppf": [
                    "self",
                    "q",
                    "n"
                ],
                "_isf": [
                    "self",
                    "q",
                    "n"
                ]
            },
            "kstwobign_gen": {
                "_pdf": [
                    "self",
                    "x"
                ],
                "_cdf": [
                    "self",
                    "x"
                ],
                "_sf": [
                    "self",
                    "x"
                ],
                "_ppf": [
                    "self",
                    "q"
                ],
                "_isf": [
                    "self",
                    "q"
                ]
            },
            "norm_gen": {
                "_rvs": [
                    "self",
                    "size",
                    "random_state"
                ],
                "_pdf": [
                    "self",
                    "x"
                ],
                "_logpdf": [
                    "self",
                    "x"
                ],
                "_cdf": [
                    "self",
                    "x"
                ],
                "_logcdf": [
                    "self",
                    "x"
                ],
                "_sf": [
                    "self",
                    "x"
                ],
                "_logsf": [
                    "self",
                    "x"
                ],
                "_ppf": [
                    "self",
                    "q"
                ],
                "_isf": [
                    "self",
                    "q"
                ],
                "_stats": [
                    "self"
                ],
                "_entropy": [
                    "self"
                ],
                "fit": [
                    "self",
                    "data"
                ],
                "_munp": [
                    "self",
                    "n"
                ]
            },
            "alpha_gen": {
                "_pdf": [
                    "self",
                    "x",
                    "a"
                ],
                "_logpdf": [
                    "self",
                    "x",
                    "a"
                ],
                "_cdf": [
                    "self",
                    "x",
                    "a"
                ],
                "_ppf": [
                    "self",
                    "q",
                    "a"
                ],
                "_stats": [
                    "self",
                    "a"
                ]
            },
            "anglit_gen": {
                "_pdf": [
                    "self",
                    "x"
                ],
                "_cdf": [
                    "self",
                    "x"
                ],
                "_ppf": [
                    "self",
                    "q"
                ],
                "_stats": [
                    "self"
                ],
                "_entropy": [
                    "self"
                ]
            },
            "arcsine_gen": {
                "_pdf": [
                    "self",
                    "x"
                ],
                "_cdf": [
                    "self",
                    "x"
                ],
                "_ppf": [
                    "self",
                    "q"
                ],
                "_stats": [
                    "self"
                ],
                "_entropy": [
                    "self"
                ]
            },
            "FitDataError": {
                "__init__": [
                    "self",
                    "distr",
                    "lower",
                    "upper"
                ]
            },
            "FitSolverError": {
                "__init__": [
                    "self",
                    "mesg"
                ]
            },
            "beta_gen": {
                "_rvs": [
                    "self",
                    "a",
                    "b",
                    "size",
                    "random_state"
                ],
                "_pdf": [
                    "self",
                    "x",
                    "a",
                    "b"
                ],
                "_logpdf": [
                    "self",
                    "x",
                    "a",
                    "b"
                ],
                "_cdf": [
                    "self",
                    "x",
                    "a",
                    "b"
                ],
                "_ppf": [
                    "self",
                    "q",
                    "a",
                    "b"
                ],
                "_stats": [
                    "self",
                    "a",
                    "b"
                ],
                "_fitstart": [
                    "self",
                    "data"
                ],
                "fit": [
                    "self",
                    "data"
                ]
            },
            "betaprime_gen": {
                "_rvs": [
                    "self",
                    "a",
                    "b",
                    "size",
                    "random_state"
                ],
                "_pdf": [
                    "self",
                    "x",
                    "a",
                    "b"
                ],
                "_logpdf": [
                    "self",
                    "x",
                    "a",
                    "b"
                ],
                "_cdf": [
                    "self",
                    "x",
                    "a",
                    "b"
                ],
                "_munp": [
                    "self",
                    "n",
                    "a",
                    "b"
                ]
            },
            "bradford_gen": {
                "_pdf": [
                    "self",
                    "x",
                    "c"
                ],
                "_cdf": [
                    "self",
                    "x",
                    "c"
                ],
                "_ppf": [
                    "self",
                    "q",
                    "c"
                ],
                "_stats": [
                    "self",
                    "c",
                    "moments"
                ],
                "_entropy": [
                    "self",
                    "c"
                ]
            },
            "burr_gen": {
                "_pdf": [
                    "self",
                    "x",
                    "c",
                    "d"
                ],
                "_logpdf": [
                    "self",
                    "x",
                    "c",
                    "d"
                ],
                "_cdf": [
                    "self",
                    "x",
                    "c",
                    "d"
                ],
                "_logcdf": [
                    "self",
                    "x",
                    "c",
                    "d"
                ],
                "_sf": [
                    "self",
                    "x",
                    "c",
                    "d"
                ],
                "_logsf": [
                    "self",
                    "x",
                    "c",
                    "d"
                ],
                "_ppf": [
                    "self",
                    "q",
                    "c",
                    "d"
                ],
                "_stats": [
                    "self",
                    "c",
                    "d"
                ],
                "_munp": [
                    "self",
                    "n",
                    "c",
                    "d"
                ]
            },
            "burr12_gen": {
                "_pdf": [
                    "self",
                    "x",
                    "c",
                    "d"
                ],
                "_logpdf": [
                    "self",
                    "x",
                    "c",
                    "d"
                ],
                "_cdf": [
                    "self",
                    "x",
                    "c",
                    "d"
                ],
                "_logcdf": [
                    "self",
                    "x",
                    "c",
                    "d"
                ],
                "_sf": [
                    "self",
                    "x",
                    "c",
                    "d"
                ],
                "_logsf": [
                    "self",
                    "x",
                    "c",
                    "d"
                ],
                "_ppf": [
                    "self",
                    "q",
                    "c",
                    "d"
                ],
                "_munp": [
                    "self",
                    "n",
                    "c",
                    "d"
                ]
            },
            "fisk_gen": {
                "_pdf": [
                    "self",
                    "x",
                    "c"
                ],
                "_cdf": [
                    "self",
                    "x",
                    "c"
                ],
                "_sf": [
                    "self",
                    "x",
                    "c"
                ],
                "_logpdf": [
                    "self",
                    "x",
                    "c"
                ],
                "_logcdf": [
                    "self",
                    "x",
                    "c"
                ],
                "_logsf": [
                    "self",
                    "x",
                    "c"
                ],
                "_ppf": [
                    "self",
                    "x",
                    "c"
                ],
                "_munp": [
                    "self",
                    "n",
                    "c"
                ],
                "_stats": [
                    "self",
                    "c"
                ],
                "_entropy": [
                    "self",
                    "c"
                ]
            },
            "cauchy_gen": {
                "_pdf": [
                    "self",
                    "x"
                ],
                "_cdf": [
                    "self",
                    "x"
                ],
                "_ppf": [
                    "self",
                    "q"
                ],
                "_sf": [
                    "self",
                    "x"
                ],
                "_isf": [
                    "self",
                    "q"
                ],
                "_stats": [
                    "self"
                ],
                "_entropy": [
                    "self"
                ],
                "_fitstart": [
                    "self",
                    "data",
                    "args"
                ]
            },
            "chi_gen": {
                "_rvs": [
                    "self",
                    "df",
                    "size",
                    "random_state"
                ],
                "_pdf": [
                    "self",
                    "x",
                    "df"
                ],
                "_logpdf": [
                    "self",
                    "x",
                    "df"
                ],
                "_cdf": [
                    "self",
                    "x",
                    "df"
                ],
                "_ppf": [
                    "self",
                    "q",
                    "df"
                ],
                "_stats": [
                    "self",
                    "df"
                ]
            },
            "chi2_gen": {
                "_rvs": [
                    "self",
                    "df",
                    "size",
                    "random_state"
                ],
                "_pdf": [
                    "self",
                    "x",
                    "df"
                ],
                "_logpdf": [
                    "self",
                    "x",
                    "df"
                ],
                "_cdf": [
                    "self",
                    "x",
                    "df"
                ],
                "_sf": [
                    "self",
                    "x",
                    "df"
                ],
                "_isf": [
                    "self",
                    "p",
                    "df"
                ],
                "_ppf": [
                    "self",
                    "p",
                    "df"
                ],
                "_stats": [
                    "self",
                    "df"
                ]
            },
            "cosine_gen": {
                "_pdf": [
                    "self",
                    "x"
                ],
                "_cdf": [
                    "self",
                    "x"
                ],
                "_stats": [
                    "self"
                ],
                "_entropy": [
                    "self"
                ]
            },
            "dgamma_gen": {
                "_rvs": [
                    "self",
                    "a",
                    "size",
                    "random_state"
                ],
                "_pdf": [
                    "self",
                    "x",
                    "a"
                ],
                "_logpdf": [
                    "self",
                    "x",
                    "a"
                ],
                "_cdf": [
                    "self",
                    "x",
                    "a"
                ],
                "_sf": [
                    "self",
                    "x",
                    "a"
                ],
                "_ppf": [
                    "self",
                    "q",
                    "a"
                ],
                "_stats": [
                    "self",
                    "a"
                ]
            },
            "dweibull_gen": {
                "_rvs": [
                    "self",
                    "c",
                    "size",
                    "random_state"
                ],
                "_pdf": [
                    "self",
                    "x",
                    "c"
                ],
                "_logpdf": [
                    "self",
                    "x",
                    "c"
                ],
                "_cdf": [
                    "self",
                    "x",
                    "c"
                ],
                "_ppf": [
                    "self",
                    "q",
                    "c"
                ],
                "_munp": [
                    "self",
                    "n",
                    "c"
                ],
                "_stats": [
                    "self",
                    "c"
                ]
            },
            "expon_gen": {
                "_rvs": [
                    "self",
                    "size",
                    "random_state"
                ],
                "_pdf": [
                    "self",
                    "x"
                ],
                "_logpdf": [
                    "self",
                    "x"
                ],
                "_cdf": [
                    "self",
                    "x"
                ],
                "_ppf": [
                    "self",
                    "q"
                ],
                "_sf": [
                    "self",
                    "x"
                ],
                "_logsf": [
                    "self",
                    "x"
                ],
                "_isf": [
                    "self",
                    "q"
                ],
                "_stats": [
                    "self"
                ],
                "_entropy": [
                    "self"
                ],
                "fit": [
                    "self",
                    "data"
                ]
            },
            "exponnorm_gen": {
                "_rvs": [
                    "self",
                    "K",
                    "size",
                    "random_state"
                ],
                "_pdf": [
                    "self",
                    "x",
                    "K"
                ],
                "_logpdf": [
                    "self",
                    "x",
                    "K"
                ],
                "_cdf": [
                    "self",
                    "x",
                    "K"
                ],
                "_sf": [
                    "self",
                    "x",
                    "K"
                ],
                "_stats": [
                    "self",
                    "K"
                ]
            },
            "exponweib_gen": {
                "_pdf": [
                    "self",
                    "x",
                    "a",
                    "c"
                ],
                "_logpdf": [
                    "self",
                    "x",
                    "a",
                    "c"
                ],
                "_cdf": [
                    "self",
                    "x",
                    "a",
                    "c"
                ],
                "_ppf": [
                    "self",
                    "q",
                    "a",
                    "c"
                ]
            },
            "exponpow_gen": {
                "_pdf": [
                    "self",
                    "x",
                    "b"
                ],
                "_logpdf": [
                    "self",
                    "x",
                    "b"
                ],
                "_cdf": [
                    "self",
                    "x",
                    "b"
                ],
                "_sf": [
                    "self",
                    "x",
                    "b"
                ],
                "_isf": [
                    "self",
                    "x",
                    "b"
                ],
                "_ppf": [
                    "self",
                    "q",
                    "b"
                ]
            },
            "fatiguelife_gen": {
                "_rvs": [
                    "self",
                    "c",
                    "size",
                    "random_state"
                ],
                "_pdf": [
                    "self",
                    "x",
                    "c"
                ],
                "_logpdf": [
                    "self",
                    "x",
                    "c"
                ],
                "_cdf": [
                    "self",
                    "x",
                    "c"
                ],
                "_ppf": [
                    "self",
                    "q",
                    "c"
                ],
                "_stats": [
                    "self",
                    "c"
                ]
            },
            "foldcauchy_gen": {
                "_rvs": [
                    "self",
                    "c",
                    "size",
                    "random_state"
                ],
                "_pdf": [
                    "self",
                    "x",
                    "c"
                ],
                "_cdf": [
                    "self",
                    "x",
                    "c"
                ],
                "_stats": [
                    "self",
                    "c"
                ]
            },
            "f_gen": {
                "_rvs": [
                    "self",
                    "dfn",
                    "dfd",
                    "size",
                    "random_state"
                ],
                "_pdf": [
                    "self",
                    "x",
                    "dfn",
                    "dfd"
                ],
                "_logpdf": [
                    "self",
                    "x",
                    "dfn",
                    "dfd"
                ],
                "_cdf": [
                    "self",
                    "x",
                    "dfn",
                    "dfd"
                ],
                "_sf": [
                    "self",
                    "x",
                    "dfn",
                    "dfd"
                ],
                "_ppf": [
                    "self",
                    "q",
                    "dfn",
                    "dfd"
                ],
                "_stats": [
                    "self",
                    "dfn",
                    "dfd"
                ]
            },
            "foldnorm_gen": {
                "_argcheck": [
                    "self",
                    "c"
                ],
                "_rvs": [
                    "self",
                    "c",
                    "size",
                    "random_state"
                ],
                "_pdf": [
                    "self",
                    "x",
                    "c"
                ],
                "_cdf": [
                    "self",
                    "x",
                    "c"
                ],
                "_stats": [
                    "self",
                    "c"
                ]
            },
            "weibull_min_gen": {
                "_pdf": [
                    "self",
                    "x",
                    "c"
                ],
                "_logpdf": [
                    "self",
                    "x",
                    "c"
                ],
                "_cdf": [
                    "self",
                    "x",
                    "c"
                ],
                "_sf": [
                    "self",
                    "x",
                    "c"
                ],
                "_logsf": [
                    "self",
                    "x",
                    "c"
                ],
                "_ppf": [
                    "self",
                    "q",
                    "c"
                ],
                "_munp": [
                    "self",
                    "n",
                    "c"
                ],
                "_entropy": [
                    "self",
                    "c"
                ]
            },
            "weibull_max_gen": {
                "_pdf": [
                    "self",
                    "x",
                    "c"
                ],
                "_logpdf": [
                    "self",
                    "x",
                    "c"
                ],
                "_cdf": [
                    "self",
                    "x",
                    "c"
                ],
                "_logcdf": [
                    "self",
                    "x",
                    "c"
                ],
                "_sf": [
                    "self",
                    "x",
                    "c"
                ],
                "_ppf": [
                    "self",
                    "q",
                    "c"
                ],
                "_munp": [
                    "self",
                    "n",
                    "c"
                ],
                "_entropy": [
                    "self",
                    "c"
                ]
            },
            "genlogistic_gen": {
                "_pdf": [
                    "self",
                    "x",
                    "c"
                ],
                "_logpdf": [
                    "self",
                    "x",
                    "c"
                ],
                "_cdf": [
                    "self",
                    "x",
                    "c"
                ],
                "_ppf": [
                    "self",
                    "q",
                    "c"
                ],
                "_stats": [
                    "self",
                    "c"
                ]
            },
            "genpareto_gen": {
                "_argcheck": [
                    "self",
                    "c"
                ],
                "_get_support": [
                    "self",
                    "c"
                ],
                "_pdf": [
                    "self",
                    "x",
                    "c"
                ],
                "_logpdf": [
                    "self",
                    "x",
                    "c"
                ],
                "_cdf": [
                    "self",
                    "x",
                    "c"
                ],
                "_sf": [
                    "self",
                    "x",
                    "c"
                ],
                "_logsf": [
                    "self",
                    "x",
                    "c"
                ],
                "_ppf": [
                    "self",
                    "q",
                    "c"
                ],
                "_isf": [
                    "self",
                    "q",
                    "c"
                ],
                "_stats": [
                    "self",
                    "c",
                    "moments"
                ],
                "_munp": [
                    "self",
                    "n",
                    "c"
                ],
                "_entropy": [
                    "self",
                    "c"
                ]
            },
            "genexpon_gen": {
                "_pdf": [
                    "self",
                    "x",
                    "a",
                    "b",
                    "c"
                ],
                "_cdf": [
                    "self",
                    "x",
                    "a",
                    "b",
                    "c"
                ],
                "_logpdf": [
                    "self",
                    "x",
                    "a",
                    "b",
                    "c"
                ]
            },
            "genextreme_gen": {
                "_argcheck": [
                    "self",
                    "c"
                ],
                "_get_support": [
                    "self",
                    "c"
                ],
                "_loglogcdf": [
                    "self",
                    "x",
                    "c"
                ],
                "_pdf": [
                    "self",
                    "x",
                    "c"
                ],
                "_logpdf": [
                    "self",
                    "x",
                    "c"
                ],
                "_logcdf": [
                    "self",
                    "x",
                    "c"
                ],
                "_cdf": [
                    "self",
                    "x",
                    "c"
                ],
                "_sf": [
                    "self",
                    "x",
                    "c"
                ],
                "_ppf": [
                    "self",
                    "q",
                    "c"
                ],
                "_isf": [
                    "self",
                    "q",
                    "c"
                ],
                "_stats": [
                    "self",
                    "c"
                ],
                "_fitstart": [
                    "self",
                    "data"
                ],
                "_munp": [
                    "self",
                    "n",
                    "c"
                ],
                "_entropy": [
                    "self",
                    "c"
                ]
            },
            "gamma_gen": {
                "_rvs": [
                    "self",
                    "a",
                    "size",
                    "random_state"
                ],
                "_pdf": [
                    "self",
                    "x",
                    "a"
                ],
                "_logpdf": [
                    "self",
                    "x",
                    "a"
                ],
                "_cdf": [
                    "self",
                    "x",
                    "a"
                ],
                "_sf": [
                    "self",
                    "x",
                    "a"
                ],
                "_ppf": [
                    "self",
                    "q",
                    "a"
                ],
                "_stats": [
                    "self",
                    "a"
                ],
                "_entropy": [
                    "self",
                    "a"
                ],
                "_fitstart": [
                    "self",
                    "data"
                ],
                "fit": [
                    "self",
                    "data"
                ]
            },
            "erlang_gen": {
                "_argcheck": [
                    "self",
                    "a"
                ],
                "_fitstart": [
                    "self",
                    "data"
                ],
                "fit": [
                    "self",
                    "data"
                ]
            },
            "gengamma_gen": {
                "_argcheck": [
                    "self",
                    "a",
                    "c"
                ],
                "_pdf": [
                    "self",
                    "x",
                    "a",
                    "c"
                ],
                "_logpdf": [
                    "self",
                    "x",
                    "a",
                    "c"
                ],
                "_cdf": [
                    "self",
                    "x",
                    "a",
                    "c"
                ],
                "_rvs": [
                    "self",
                    "a",
                    "c",
                    "size",
                    "random_state"
                ],
                "_sf": [
                    "self",
                    "x",
                    "a",
                    "c"
                ],
                "_ppf": [
                    "self",
                    "q",
                    "a",
                    "c"
                ],
                "_isf": [
                    "self",
                    "q",
                    "a",
                    "c"
                ],
                "_munp": [
                    "self",
                    "n",
                    "a",
                    "c"
                ],
                "_entropy": [
                    "self",
                    "a",
                    "c"
                ]
            },
            "genhalflogistic_gen": {
                "_argcheck": [
                    "self",
                    "c"
                ],
                "_get_support": [
                    "self",
                    "c"
                ],
                "_pdf": [
                    "self",
                    "x",
                    "c"
                ],
                "_cdf": [
                    "self",
                    "x",
                    "c"
                ],
                "_ppf": [
                    "self",
                    "q",
                    "c"
                ],
                "_entropy": [
                    "self",
                    "c"
                ]
            },
            "gompertz_gen": {
                "_pdf": [
                    "self",
                    "x",
                    "c"
                ],
                "_logpdf": [
                    "self",
                    "x",
                    "c"
                ],
                "_cdf": [
                    "self",
                    "x",
                    "c"
                ],
                "_ppf": [
                    "self",
                    "q",
                    "c"
                ],
                "_entropy": [
                    "self",
                    "c"
                ]
            },
            "gumbel_r_gen": {
                "_pdf": [
                    "self",
                    "x"
                ],
                "_logpdf": [
                    "self",
                    "x"
                ],
                "_cdf": [
                    "self",
                    "x"
                ],
                "_logcdf": [
                    "self",
                    "x"
                ],
                "_ppf": [
                    "self",
                    "q"
                ],
                "_sf": [
                    "self",
                    "x"
                ],
                "_isf": [
                    "self",
                    "p"
                ],
                "_stats": [
                    "self"
                ],
                "_entropy": [
                    "self"
                ],
                "fit": [
                    "self",
                    "data"
                ]
            },
            "gumbel_l_gen": {
                "_pdf": [
                    "self",
                    "x"
                ],
                "_logpdf": [
                    "self",
                    "x"
                ],
                "_cdf": [
                    "self",
                    "x"
                ],
                "_ppf": [
                    "self",
                    "q"
                ],
                "_logsf": [
                    "self",
                    "x"
                ],
                "_sf": [
                    "self",
                    "x"
                ],
                "_isf": [
                    "self",
                    "x"
                ],
                "_stats": [
                    "self"
                ],
                "_entropy": [
                    "self"
                ],
                "fit": [
                    "self",
                    "data"
                ]
            },
            "halfcauchy_gen": {
                "_pdf": [
                    "self",
                    "x"
                ],
                "_logpdf": [
                    "self",
                    "x"
                ],
                "_cdf": [
                    "self",
                    "x"
                ],
                "_ppf": [
                    "self",
                    "q"
                ],
                "_stats": [
                    "self"
                ],
                "_entropy": [
                    "self"
                ]
            },
            "halflogistic_gen": {
                "_pdf": [
                    "self",
                    "x"
                ],
                "_logpdf": [
                    "self",
                    "x"
                ],
                "_cdf": [
                    "self",
                    "x"
                ],
                "_ppf": [
                    "self",
                    "q"
                ],
                "_munp": [
                    "self",
                    "n"
                ],
                "_entropy": [
                    "self"
                ]
            },
            "halfnorm_gen": {
                "_rvs": [
                    "self",
                    "size",
                    "random_state"
                ],
                "_pdf": [
                    "self",
                    "x"
                ],
                "_logpdf": [
                    "self",
                    "x"
                ],
                "_cdf": [
                    "self",
                    "x"
                ],
                "_ppf": [
                    "self",
                    "q"
                ],
                "_stats": [
                    "self"
                ],
                "_entropy": [
                    "self"
                ]
            },
            "hypsecant_gen": {
                "_pdf": [
                    "self",
                    "x"
                ],
                "_cdf": [
                    "self",
                    "x"
                ],
                "_ppf": [
                    "self",
                    "q"
                ],
                "_stats": [
                    "self"
                ],
                "_entropy": [
                    "self"
                ]
            },
            "gausshyper_gen": {
                "_argcheck": [
                    "self",
                    "a",
                    "b",
                    "c",
                    "z"
                ],
                "_pdf": [
                    "self",
                    "x",
                    "a",
                    "b",
                    "c",
                    "z"
                ],
                "_munp": [
                    "self",
                    "n",
                    "a",
                    "b",
                    "c",
                    "z"
                ]
            },
            "invgamma_gen": {
                "_pdf": [
                    "self",
                    "x",
                    "a"
                ],
                "_logpdf": [
                    "self",
                    "x",
                    "a"
                ],
                "_cdf": [
                    "self",
                    "x",
                    "a"
                ],
                "_ppf": [
                    "self",
                    "q",
                    "a"
                ],
                "_sf": [
                    "self",
                    "x",
                    "a"
                ],
                "_isf": [
                    "self",
                    "q",
                    "a"
                ],
                "_stats": [
                    "self",
                    "a",
                    "moments"
                ],
                "_entropy": [
                    "self",
                    "a"
                ]
            },
            "invgauss_gen": {
                "_rvs": [
                    "self",
                    "mu",
                    "size",
                    "random_state"
                ],
                "_pdf": [
                    "self",
                    "x",
                    "mu"
                ],
                "_logpdf": [
                    "self",
                    "x",
                    "mu"
                ],
                "_cdf": [
                    "self",
                    "x",
                    "mu"
                ],
                "_stats": [
                    "self",
                    "mu"
                ],
                "fit": [
                    "self",
                    "data"
                ]
            },
            "geninvgauss_gen": {
                "_argcheck": [
                    "self",
                    "p",
                    "b"
                ],
                "_logpdf": [
                    "self",
                    "x",
                    "p",
                    "b"
                ],
                "_pdf": [
                    "self",
                    "x",
                    "p",
                    "b"
                ],
                "_cdf": [
                    "self",
                    "x"
                ],
                "_logquasipdf": [
                    "self",
                    "x",
                    "p",
                    "b"
                ],
                "_rvs": [
                    "self",
                    "p",
                    "b",
                    "size",
                    "random_state"
                ],
                "_rvs_scalar": [
                    "self",
                    "p",
                    "b",
                    "numsamples",
                    "random_state"
                ],
                "_mode": [
                    "self",
                    "p",
                    "b"
                ],
                "_munp": [
                    "self",
                    "n",
                    "p",
                    "b"
                ]
            },
            "norminvgauss_gen": {
                "_argcheck": [
                    "self",
                    "a",
                    "b"
                ],
                "_pdf": [
                    "self",
                    "x",
                    "a",
                    "b"
                ],
                "_rvs": [
                    "self",
                    "a",
                    "b",
                    "size",
                    "random_state"
                ],
                "_stats": [
                    "self",
                    "a",
                    "b"
                ]
            },
            "invweibull_gen": {
                "_pdf": [
                    "self",
                    "x",
                    "c"
                ],
                "_cdf": [
                    "self",
                    "x",
                    "c"
                ],
                "_ppf": [
                    "self",
                    "q",
                    "c"
                ],
                "_munp": [
                    "self",
                    "n",
                    "c"
                ],
                "_entropy": [
                    "self",
                    "c"
                ]
            },
            "johnsonsb_gen": {
                "_argcheck": [
                    "self",
                    "a",
                    "b"
                ],
                "_pdf": [
                    "self",
                    "x",
                    "a",
                    "b"
                ],
                "_cdf": [
                    "self",
                    "x",
                    "a",
                    "b"
                ],
                "_ppf": [
                    "self",
                    "q",
                    "a",
                    "b"
                ]
            },
            "johnsonsu_gen": {
                "_argcheck": [
                    "self",
                    "a",
                    "b"
                ],
                "_pdf": [
                    "self",
                    "x",
                    "a",
                    "b"
                ],
                "_cdf": [
                    "self",
                    "x",
                    "a",
                    "b"
                ],
                "_ppf": [
                    "self",
                    "q",
                    "a",
                    "b"
                ]
            },
            "laplace_gen": {
                "_rvs": [
                    "self",
                    "size",
                    "random_state"
                ],
                "_pdf": [
                    "self",
                    "x"
                ],
                "_cdf": [
                    "self",
                    "x"
                ],
                "_ppf": [
                    "self",
                    "q"
                ],
                "_stats": [
                    "self"
                ],
                "_entropy": [
                    "self"
                ],
                "fit": [
                    "self",
                    "data"
                ]
            },
            "laplace_asymmetric_gen": {
                "_pdf": [
                    "self",
                    "x",
                    "kappa"
                ],
                "_logpdf": [
                    "self",
                    "x",
                    "kappa"
                ],
                "_cdf": [
                    "self",
                    "x",
                    "kappa"
                ],
                "_sf": [
                    "self",
                    "x",
                    "kappa"
                ],
                "_ppf": [
                    "self",
                    "q",
                    "kappa"
                ],
                "_isf": [
                    "self",
                    "q",
                    "kappa"
                ],
                "_stats": [
                    "self",
                    "kappa"
                ],
                "_entropy": [
                    "self",
                    "kappa"
                ]
            },
            "levy_gen": {
                "_pdf": [
                    "self",
                    "x"
                ],
                "_cdf": [
                    "self",
                    "x"
                ],
                "_sf": [
                    "self",
                    "x"
                ],
                "_ppf": [
                    "self",
                    "q"
                ],
                "_stats": [
                    "self"
                ]
            },
            "levy_l_gen": {
                "_pdf": [
                    "self",
                    "x"
                ],
                "_cdf": [
                    "self",
                    "x"
                ],
                "_sf": [
                    "self",
                    "x"
                ],
                "_ppf": [
                    "self",
                    "q"
                ],
                "_isf": [
                    "self",
                    "p"
                ],
                "_stats": [
                    "self"
                ]
            },
            "levy_stable_gen": {
                "_rvs": [
                    "self",
                    "alpha",
                    "beta",
                    "size",
                    "random_state"
                ],
                "_argcheck": [
                    "self",
                    "alpha",
                    "beta"
                ],
                "_cf": [
                    "t",
                    "alpha",
                    "beta"
                ],
                "_pdf_from_cf_with_fft": [
                    "cf",
                    "h",
                    "q"
                ],
                "_pdf_single_value_best": [
                    "x",
                    "alpha",
                    "beta"
                ],
                "_pdf_single_value_cf_integrate": [
                    "x",
                    "alpha",
                    "beta"
                ],
                "_pdf_single_value_zolotarev": [
                    "x",
                    "alpha",
                    "beta"
                ],
                "_cdf_single_value_zolotarev": [
                    "x",
                    "alpha",
                    "beta"
                ],
                "_pdf": [
                    "self",
                    "x",
                    "alpha",
                    "beta"
                ],
                "_cdf": [
                    "self",
                    "x",
                    "alpha",
                    "beta"
                ],
                "_fitstart": [
                    "self",
                    "data"
                ],
                "_stats": [
                    "self",
                    "alpha",
                    "beta"
                ]
            },
            "logistic_gen": {
                "_rvs": [
                    "self",
                    "size",
                    "random_state"
                ],
                "_pdf": [
                    "self",
                    "x"
                ],
                "_logpdf": [
                    "self",
                    "x"
                ],
                "_cdf": [
                    "self",
                    "x"
                ],
                "_ppf": [
                    "self",
                    "q"
                ],
                "_sf": [
                    "self",
                    "x"
                ],
                "_isf": [
                    "self",
                    "q"
                ],
                "_stats": [
                    "self"
                ],
                "_entropy": [
                    "self"
                ],
                "fit": [
                    "self",
                    "data"
                ]
            },
            "loggamma_gen": {
                "_rvs": [
                    "self",
                    "c",
                    "size",
                    "random_state"
                ],
                "_pdf": [
                    "self",
                    "x",
                    "c"
                ],
                "_cdf": [
                    "self",
                    "x",
                    "c"
                ],
                "_ppf": [
                    "self",
                    "q",
                    "c"
                ],
                "_stats": [
                    "self",
                    "c"
                ]
            },
            "loglaplace_gen": {
                "_pdf": [
                    "self",
                    "x",
                    "c"
                ],
                "_cdf": [
                    "self",
                    "x",
                    "c"
                ],
                "_ppf": [
                    "self",
                    "q",
                    "c"
                ],
                "_munp": [
                    "self",
                    "n",
                    "c"
                ],
                "_entropy": [
                    "self",
                    "c"
                ]
            },
            "lognorm_gen": {
                "_rvs": [
                    "self",
                    "s",
                    "size",
                    "random_state"
                ],
                "_pdf": [
                    "self",
                    "x",
                    "s"
                ],
                "_logpdf": [
                    "self",
                    "x",
                    "s"
                ],
                "_cdf": [
                    "self",
                    "x",
                    "s"
                ],
                "_logcdf": [
                    "self",
                    "x",
                    "s"
                ],
                "_ppf": [
                    "self",
                    "q",
                    "s"
                ],
                "_sf": [
                    "self",
                    "x",
                    "s"
                ],
                "_logsf": [
                    "self",
                    "x",
                    "s"
                ],
                "_stats": [
                    "self",
                    "s"
                ],
                "_entropy": [
                    "self",
                    "s"
                ],
                "fit": [
                    "self",
                    "data"
                ]
            },
            "gilbrat_gen": {
                "_rvs": [
                    "self",
                    "size",
                    "random_state"
                ],
                "_pdf": [
                    "self",
                    "x"
                ],
                "_logpdf": [
                    "self",
                    "x"
                ],
                "_cdf": [
                    "self",
                    "x"
                ],
                "_ppf": [
                    "self",
                    "q"
                ],
                "_stats": [
                    "self"
                ],
                "_entropy": [
                    "self"
                ]
            },
            "maxwell_gen": {
                "_rvs": [
                    "self",
                    "size",
                    "random_state"
                ],
                "_pdf": [
                    "self",
                    "x"
                ],
                "_logpdf": [
                    "self",
                    "x"
                ],
                "_cdf": [
                    "self",
                    "x"
                ],
                "_ppf": [
                    "self",
                    "q"
                ],
                "_stats": [
                    "self"
                ],
                "_entropy": [
                    "self"
                ]
            },
            "mielke_gen": {
                "_argcheck": [
                    "self",
                    "k",
                    "s"
                ],
                "_pdf": [
                    "self",
                    "x",
                    "k",
                    "s"
                ],
                "_logpdf": [
                    "self",
                    "x",
                    "k",
                    "s"
                ],
                "_cdf": [
                    "self",
                    "x",
                    "k",
                    "s"
                ],
                "_ppf": [
                    "self",
                    "q",
                    "k",
                    "s"
                ],
                "_munp": [
                    "self",
                    "n",
                    "k",
                    "s"
                ]
            },
            "kappa4_gen": {
                "_argcheck": [
                    "self",
                    "h",
                    "k"
                ],
                "_get_support": [
                    "self",
                    "h",
                    "k"
                ],
                "_pdf": [
                    "self",
                    "x",
                    "h",
                    "k"
                ],
                "_logpdf": [
                    "self",
                    "x",
                    "h",
                    "k"
                ],
                "_cdf": [
                    "self",
                    "x",
                    "h",
                    "k"
                ],
                "_logcdf": [
                    "self",
                    "x",
                    "h",
                    "k"
                ],
                "_ppf": [
                    "self",
                    "q",
                    "h",
                    "k"
                ],
                "_stats": [
                    "self",
                    "h",
                    "k"
                ]
            },
            "kappa3_gen": {
                "_argcheck": [
                    "self",
                    "a"
                ],
                "_pdf": [
                    "self",
                    "x",
                    "a"
                ],
                "_cdf": [
                    "self",
                    "x",
                    "a"
                ],
                "_ppf": [
                    "self",
                    "q",
                    "a"
                ],
                "_stats": [
                    "self",
                    "a"
                ]
            },
            "moyal_gen": {
                "_rvs": [
                    "self",
                    "size",
                    "random_state"
                ],
                "_pdf": [
                    "self",
                    "x"
                ],
                "_cdf": [
                    "self",
                    "x"
                ],
                "_sf": [
                    "self",
                    "x"
                ],
                "_ppf": [
                    "self",
                    "x"
                ],
                "_stats": [
                    "self"
                ],
                "_munp": [
                    "self",
                    "n"
                ]
            },
            "nakagami_gen": {
                "_pdf": [
                    "self",
                    "x",
                    "nu"
                ],
                "_logpdf": [
                    "self",
                    "x",
                    "nu"
                ],
                "_cdf": [
                    "self",
                    "x",
                    "nu"
                ],
                "_ppf": [
                    "self",
                    "q",
                    "nu"
                ],
                "_sf": [
                    "self",
                    "x",
                    "nu"
                ],
                "_isf": [
                    "self",
                    "p",
                    "nu"
                ],
                "_stats": [
                    "self",
                    "nu"
                ]
            },
            "ncx2_gen": {
                "_argcheck": [
                    "self",
                    "df",
                    "nc"
                ],
                "_rvs": [
                    "self",
                    "df",
                    "nc",
                    "size",
                    "random_state"
                ],
                "_logpdf": [
                    "self",
                    "x",
                    "df",
                    "nc"
                ],
                "_pdf": [
                    "self",
                    "x",
                    "df",
                    "nc"
                ],
                "_cdf": [
                    "self",
                    "x",
                    "df",
                    "nc"
                ],
                "_ppf": [
                    "self",
                    "q",
                    "df",
                    "nc"
                ],
                "_stats": [
                    "self",
                    "df",
                    "nc"
                ]
            },
            "ncf_gen": {
                "_argcheck": [
                    "self",
                    "df1",
                    "df2",
                    "nc"
                ],
                "_rvs": [
                    "self",
                    "dfn",
                    "dfd",
                    "nc",
                    "size",
                    "random_state"
                ],
                "_pdf_skip": [
                    "self",
                    "x",
                    "dfn",
                    "dfd",
                    "nc"
                ],
                "_cdf": [
                    "self",
                    "x",
                    "dfn",
                    "dfd",
                    "nc"
                ],
                "_ppf": [
                    "self",
                    "q",
                    "dfn",
                    "dfd",
                    "nc"
                ],
                "_munp": [
                    "self",
                    "n",
                    "dfn",
                    "dfd",
                    "nc"
                ],
                "_stats": [
                    "self",
                    "dfn",
                    "dfd",
                    "nc"
                ]
            },
            "t_gen": {
                "_argcheck": [
                    "self",
                    "df"
                ],
                "_rvs": [
                    "self",
                    "df",
                    "size",
                    "random_state"
                ],
                "_pdf": [
                    "self",
                    "x",
                    "df"
                ],
                "_logpdf": [
                    "self",
                    "x",
                    "df"
                ],
                "_cdf": [
                    "self",
                    "x",
                    "df"
                ],
                "_sf": [
                    "self",
                    "x",
                    "df"
                ],
                "_ppf": [
                    "self",
                    "q",
                    "df"
                ],
                "_isf": [
                    "self",
                    "q",
                    "df"
                ],
                "_stats": [
                    "self",
                    "df"
                ]
            },
            "nct_gen": {
                "_argcheck": [
                    "self",
                    "df",
                    "nc"
                ],
                "_rvs": [
                    "self",
                    "df",
                    "nc",
                    "size",
                    "random_state"
                ],
                "_pdf": [
                    "self",
                    "x",
                    "df",
                    "nc"
                ],
                "_cdf": [
                    "self",
                    "x",
                    "df",
                    "nc"
                ],
                "_ppf": [
                    "self",
                    "q",
                    "df",
                    "nc"
                ],
                "_stats": [
                    "self",
                    "df",
                    "nc",
                    "moments"
                ]
            },
            "pareto_gen": {
                "_pdf": [
                    "self",
                    "x",
                    "b"
                ],
                "_cdf": [
                    "self",
                    "x",
                    "b"
                ],
                "_ppf": [
                    "self",
                    "q",
                    "b"
                ],
                "_sf": [
                    "self",
                    "x",
                    "b"
                ],
                "_stats": [
                    "self",
                    "b",
                    "moments"
                ],
                "_entropy": [
                    "self",
                    "c"
                ],
                "fit": [
                    "self",
                    "data"
                ]
            },
            "lomax_gen": {
                "_pdf": [
                    "self",
                    "x",
                    "c"
                ],
                "_logpdf": [
                    "self",
                    "x",
                    "c"
                ],
                "_cdf": [
                    "self",
                    "x",
                    "c"
                ],
                "_sf": [
                    "self",
                    "x",
                    "c"
                ],
                "_logsf": [
                    "self",
                    "x",
                    "c"
                ],
                "_ppf": [
                    "self",
                    "q",
                    "c"
                ],
                "_stats": [
                    "self",
                    "c"
                ],
                "_entropy": [
                    "self",
                    "c"
                ]
            },
            "pearson3_gen": {
                "_preprocess": [
                    "self",
                    "x",
                    "skew"
                ],
                "_argcheck": [
                    "self",
                    "skew"
                ],
                "_stats": [
                    "self",
                    "skew"
                ],
                "_pdf": [
                    "self",
                    "x",
                    "skew"
                ],
                "_logpdf": [
                    "self",
                    "x",
                    "skew"
                ],
                "_cdf": [
                    "self",
                    "x",
                    "skew"
                ],
                "_rvs": [
                    "self",
                    "skew",
                    "size",
                    "random_state"
                ],
                "_ppf": [
                    "self",
                    "q",
                    "skew"
                ]
            },
            "powerlaw_gen": {
                "_pdf": [
                    "self",
                    "x",
                    "a"
                ],
                "_logpdf": [
                    "self",
                    "x",
                    "a"
                ],
                "_cdf": [
                    "self",
                    "x",
                    "a"
                ],
                "_logcdf": [
                    "self",
                    "x",
                    "a"
                ],
                "_ppf": [
                    "self",
                    "q",
                    "a"
                ],
                "_stats": [
                    "self",
                    "a"
                ],
                "_entropy": [
                    "self",
                    "a"
                ]
            },
            "powerlognorm_gen": {
                "_pdf": [
                    "self",
                    "x",
                    "c",
                    "s"
                ],
                "_cdf": [
                    "self",
                    "x",
                    "c",
                    "s"
                ],
                "_ppf": [
                    "self",
                    "q",
                    "c",
                    "s"
                ]
            },
            "powernorm_gen": {
                "_pdf": [
                    "self",
                    "x",
                    "c"
                ],
                "_logpdf": [
                    "self",
                    "x",
                    "c"
                ],
                "_cdf": [
                    "self",
                    "x",
                    "c"
                ],
                "_ppf": [
                    "self",
                    "q",
                    "c"
                ]
            },
            "rdist_gen": {
                "_pdf": [
                    "self",
                    "x",
                    "c"
                ],
                "_logpdf": [
                    "self",
                    "x",
                    "c"
                ],
                "_cdf": [
                    "self",
                    "x",
                    "c"
                ],
                "_ppf": [
                    "self",
                    "q",
                    "c"
                ],
                "_rvs": [
                    "self",
                    "c",
                    "size",
                    "random_state"
                ],
                "_munp": [
                    "self",
                    "n",
                    "c"
                ]
            },
            "rayleigh_gen": {
                "_rvs": [
                    "self",
                    "size",
                    "random_state"
                ],
                "_pdf": [
                    "self",
                    "r"
                ],
                "_logpdf": [
                    "self",
                    "r"
                ],
                "_cdf": [
                    "self",
                    "r"
                ],
                "_ppf": [
                    "self",
                    "q"
                ],
                "_sf": [
                    "self",
                    "r"
                ],
                "_logsf": [
                    "self",
                    "r"
                ],
                "_isf": [
                    "self",
                    "q"
                ],
                "_stats": [
                    "self"
                ],
                "_entropy": [
                    "self"
                ],
                "fit": [
                    "self",
                    "data"
                ]
            },
            "reciprocal_gen": {
                "_argcheck": [
                    "self",
                    "a",
                    "b"
                ],
                "_get_support": [
                    "self",
                    "a",
                    "b"
                ],
                "_pdf": [
                    "self",
                    "x",
                    "a",
                    "b"
                ],
                "_logpdf": [
                    "self",
                    "x",
                    "a",
                    "b"
                ],
                "_cdf": [
                    "self",
                    "x",
                    "a",
                    "b"
                ],
                "_ppf": [
                    "self",
                    "q",
                    "a",
                    "b"
                ],
                "_munp": [
                    "self",
                    "n",
                    "a",
                    "b"
                ],
                "_entropy": [
                    "self",
                    "a",
                    "b"
                ]
            },
            "rice_gen": {
                "_argcheck": [
                    "self",
                    "b"
                ],
                "_rvs": [
                    "self",
                    "b",
                    "size",
                    "random_state"
                ],
                "_cdf": [
                    "self",
                    "x",
                    "b"
                ],
                "_ppf": [
                    "self",
                    "q",
                    "b"
                ],
                "_pdf": [
                    "self",
                    "x",
                    "b"
                ],
                "_munp": [
                    "self",
                    "n",
                    "b"
                ]
            },
            "recipinvgauss_gen": {
                "_pdf": [
                    "self",
                    "x",
                    "mu"
                ],
                "_logpdf": [
                    "self",
                    "x",
                    "mu"
                ],
                "_cdf": [
                    "self",
                    "x",
                    "mu"
                ],
                "_rvs": [
                    "self",
                    "mu",
                    "size",
                    "random_state"
                ]
            },
            "semicircular_gen": {
                "_pdf": [
                    "self",
                    "x"
                ],
                "_logpdf": [
                    "self",
                    "x"
                ],
                "_cdf": [
                    "self",
                    "x"
                ],
                "_ppf": [
                    "self",
                    "q"
                ],
                "_rvs": [
                    "self",
                    "size",
                    "random_state"
                ],
                "_stats": [
                    "self"
                ],
                "_entropy": [
                    "self"
                ]
            },
            "skew_norm_gen": {
                "_argcheck": [
                    "self",
                    "a"
                ],
                "_pdf": [
                    "self",
                    "x",
                    "a"
                ],
                "_cdf_single": [
                    "self",
                    "x"
                ],
                "_sf": [
                    "self",
                    "x",
                    "a"
                ],
                "_rvs": [
                    "self",
                    "a",
                    "size",
                    "random_state"
                ],
                "_stats": [
                    "self",
                    "a",
                    "moments"
                ]
            },
            "trapezoid_gen": {
                "_argcheck": [
                    "self",
                    "c",
                    "d"
                ],
                "_pdf": [
                    "self",
                    "x",
                    "c",
                    "d"
                ],
                "_cdf": [
                    "self",
                    "x",
                    "c",
                    "d"
                ],
                "_ppf": [
                    "self",
                    "q",
                    "c",
                    "d"
                ],
                "_munp": [
                    "self",
                    "n",
                    "c",
                    "d"
                ],
                "_entropy": [
                    "self",
                    "c",
                    "d"
                ]
            },
            "triang_gen": {
                "_rvs": [
                    "self",
                    "c",
                    "size",
                    "random_state"
                ],
                "_argcheck": [
                    "self",
                    "c"
                ],
                "_pdf": [
                    "self",
                    "x",
                    "c"
                ],
                "_cdf": [
                    "self",
                    "x",
                    "c"
                ],
                "_ppf": [
                    "self",
                    "q",
                    "c"
                ],
                "_stats": [
                    "self",
                    "c"
                ],
                "_entropy": [
                    "self",
                    "c"
                ]
            },
            "truncexpon_gen": {
                "_argcheck": [
                    "self",
                    "b"
                ],
                "_get_support": [
                    "self",
                    "b"
                ],
                "_pdf": [
                    "self",
                    "x",
                    "b"
                ],
                "_logpdf": [
                    "self",
                    "x",
                    "b"
                ],
                "_cdf": [
                    "self",
                    "x",
                    "b"
                ],
                "_ppf": [
                    "self",
                    "q",
                    "b"
                ],
                "_munp": [
                    "self",
                    "n",
                    "b"
                ],
                "_entropy": [
                    "self",
                    "b"
                ]
            },
            "truncnorm_gen": {
                "_argcheck": [
                    "self",
                    "a",
                    "b"
                ],
                "_get_support": [
                    "self",
                    "a",
                    "b"
                ],
                "_pdf": [
                    "self",
                    "x",
                    "a",
                    "b"
                ],
                "_logpdf": [
                    "self",
                    "x",
                    "a",
                    "b"
                ],
                "_cdf": [
                    "self",
                    "x",
                    "a",
                    "b"
                ],
                "_logcdf": [
                    "self",
                    "x",
                    "a",
                    "b"
                ],
                "_sf": [
                    "self",
                    "x",
                    "a",
                    "b"
                ],
                "_logsf": [
                    "self",
                    "x",
                    "a",
                    "b"
                ],
                "_ppf": [
                    "self",
                    "q",
                    "a",
                    "b"
                ],
                "_munp": [
                    "self",
                    "n",
                    "a",
                    "b"
                ],
                "_stats": [
                    "self",
                    "a",
                    "b",
                    "moments"
                ],
                "_rvs": [
                    "self",
                    "a",
                    "b",
                    "size",
                    "random_state"
                ],
                "_rvs_scalar": [
                    "self",
                    "a",
                    "b",
                    "numsamples",
                    "random_state"
                ]
            },
            "tukeylambda_gen": {
                "_argcheck": [
                    "self",
                    "lam"
                ],
                "_pdf": [
                    "self",
                    "x",
                    "lam"
                ],
                "_cdf": [
                    "self",
                    "x",
                    "lam"
                ],
                "_ppf": [
                    "self",
                    "q",
                    "lam"
                ],
                "_stats": [
                    "self",
                    "lam"
                ],
                "_entropy": [
                    "self",
                    "lam"
                ]
            },
            "FitUniformFixedScaleDataError": {
                "__init__": [
                    "self",
                    "ptp",
                    "fscale"
                ]
            },
            "uniform_gen": {
                "_rvs": [
                    "self",
                    "size",
                    "random_state"
                ],
                "_pdf": [
                    "self",
                    "x"
                ],
                "_cdf": [
                    "self",
                    "x"
                ],
                "_ppf": [
                    "self",
                    "q"
                ],
                "_stats": [
                    "self"
                ],
                "_entropy": [
                    "self"
                ],
                "fit": [
                    "self",
                    "data"
                ]
            },
            "vonmises_gen": {
                "_rvs": [
                    "self",
                    "kappa",
                    "size",
                    "random_state"
                ],
                "_pdf": [
                    "self",
                    "x",
                    "kappa"
                ],
                "_cdf": [
                    "self",
                    "x",
                    "kappa"
                ],
                "_stats_skip": [
                    "self",
                    "kappa"
                ],
                "_entropy": [
                    "self",
                    "kappa"
                ]
            },
            "wald_gen": {
                "_rvs": [
                    "self",
                    "size",
                    "random_state"
                ],
                "_pdf": [
                    "self",
                    "x"
                ],
                "_logpdf": [
                    "self",
                    "x"
                ],
                "_cdf": [
                    "self",
                    "x"
                ],
                "_stats": [
                    "self"
                ]
            },
            "wrapcauchy_gen": {
                "_argcheck": [
                    "self",
                    "c"
                ],
                "_pdf": [
                    "self",
                    "x",
                    "c"
                ],
                "_cdf": [
                    "self",
                    "x",
                    "c"
                ],
                "_ppf": [
                    "self",
                    "q",
                    "c"
                ],
                "_entropy": [
                    "self",
                    "c"
                ]
            },
            "gennorm_gen": {
                "_pdf": [
                    "self",
                    "x",
                    "beta"
                ],
                "_logpdf": [
                    "self",
                    "x",
                    "beta"
                ],
                "_cdf": [
                    "self",
                    "x",
                    "beta"
                ],
                "_ppf": [
                    "self",
                    "x",
                    "beta"
                ],
                "_sf": [
                    "self",
                    "x",
                    "beta"
                ],
                "_isf": [
                    "self",
                    "x",
                    "beta"
                ],
                "_stats": [
                    "self",
                    "beta"
                ],
                "_entropy": [
                    "self",
                    "beta"
                ]
            },
            "halfgennorm_gen": {
                "_pdf": [
                    "self",
                    "x",
                    "beta"
                ],
                "_logpdf": [
                    "self",
                    "x",
                    "beta"
                ],
                "_cdf": [
                    "self",
                    "x",
                    "beta"
                ],
                "_ppf": [
                    "self",
                    "x",
                    "beta"
                ],
                "_sf": [
                    "self",
                    "x",
                    "beta"
                ],
                "_isf": [
                    "self",
                    "x",
                    "beta"
                ],
                "_entropy": [
                    "self",
                    "beta"
                ]
            },
            "crystalball_gen": {
                "_pdf": [
                    "self",
                    "x",
                    "beta",
                    "m"
                ],
                "_logpdf": [
                    "self",
                    "x",
                    "beta",
                    "m"
                ],
                "_cdf": [
                    "self",
                    "x",
                    "beta",
                    "m"
                ],
                "_ppf": [
                    "self",
                    "p",
                    "beta",
                    "m"
                ],
                "_munp": [
                    "self",
                    "n",
                    "beta",
                    "m"
                ],
                "_argcheck": [
                    "self",
                    "beta",
                    "m"
                ]
            },
            "argus_gen": {
                "_pdf": [
                    "self",
                    "x",
                    "chi"
                ],
                "_cdf": [
                    "self",
                    "x",
                    "chi"
                ],
                "_sf": [
                    "self",
                    "x",
                    "chi"
                ],
                "_rvs": [
                    "self",
                    "chi",
                    "size",
                    "random_state"
                ],
                "_rvs_scalar": [
                    "self",
                    "chi",
                    "numsamples",
                    "random_state"
                ],
                "_stats": [
                    "self",
                    "chi"
                ]
            },
            "rv_histogram": {
                "__init__": [
                    "self",
                    "histogram"
                ],
                "_pdf": [
                    "self",
                    "x"
                ],
                "_cdf": [
                    "self",
                    "x"
                ],
                "_ppf": [
                    "self",
                    "x"
                ],
                "_munp": [
                    "self",
                    "n"
                ],
                "_entropy": [
                    "self"
                ],
                "_updated_ctor_param": [
                    "self"
                ]
            }
        },
        "scipy.stats.setup": {
            "configuration": [
                "parent_package",
                "top_path"
            ]
        },
        "scipy.stats._stats_mstats_common": {
            "linregress": [
                "x",
                "y"
            ],
            "theilslopes": [
                "y",
                "x",
                "alpha"
            ],
            "_find_repeats": [
                "arr"
            ],
            "siegelslopes": [
                "y",
                "x",
                "method"
            ]
        },
        "scipy.stats.mstats_extras": {
            "hdquantiles": [
                "data",
                "prob",
                "axis",
                "var"
            ],
            "hdmedian": [
                "data",
                "axis",
                "var"
            ],
            "hdquantiles_sd": [
                "data",
                "prob",
                "axis"
            ],
            "trimmed_mean_ci": [
                "data",
                "limits",
                "inclusive",
                "alpha",
                "axis"
            ],
            "mjci": [
                "data",
                "prob",
                "axis"
            ],
            "mquantiles_cimj": [
                "data",
                "prob",
                "alpha",
                "axis"
            ],
            "median_cihs": [
                "data",
                "alpha",
                "axis"
            ],
            "compare_medians_ms": [
                "group_1",
                "group_2",
                "axis"
            ],
            "idealfourths": [
                "data",
                "axis"
            ],
            "rsh": [
                "data",
                "points"
            ]
        },
        "scipy.stats._distn_infrastructure": {
            "_moment": [
                "data",
                "n",
                "mu"
            ],
            "_moment_from_stats": [
                "n",
                "mu",
                "mu2",
                "g1",
                "g2",
                "moment_func",
                "args"
            ],
            "_skew": [
                "data"
            ],
            "_kurtosis": [
                "data"
            ],
            "_fit_determine_optimizer": [
                "optimizer"
            ],
            "argsreduce": [
                "cond"
            ],
            "_ncx2_log_pdf": [
                "x",
                "df",
                "nc"
            ],
            "_ncx2_pdf": [
                "x",
                "df",
                "nc"
            ],
            "_ncx2_cdf": [
                "x",
                "df",
                "nc"
            ],
            "_get_fixed_fit_value": [
                "kwds",
                "names"
            ],
            "_drv2_moment": [
                "self",
                "n"
            ],
            "_drv2_ppfsingle": [
                "self",
                "q"
            ],
            "entropy": [
                "pk",
                "qk",
                "base",
                "axis"
            ],
            "_expect": [
                "fun",
                "lb",
                "ub",
                "x0",
                "inc",
                "maxcount",
                "tolerance",
                "chunksize"
            ],
            "_iter_chunked": [
                "x0",
                "x1",
                "chunksize",
                "inc"
            ],
            "_check_shape": [
                "argshape",
                "size"
            ],
            "get_distribution_names": [
                "namespace_pairs",
                "rv_base_class"
            ],
            "rv_frozen": {
                "__init__": [
                    "self",
                    "dist"
                ],
                "random_state": [
                    "self",
                    "seed"
                ],
                "pdf": [
                    "self",
                    "x"
                ],
                "logpdf": [
                    "self",
                    "x"
                ],
                "cdf": [
                    "self",
                    "x"
                ],
                "logcdf": [
                    "self",
                    "x"
                ],
                "ppf": [
                    "self",
                    "q"
                ],
                "isf": [
                    "self",
                    "q"
                ],
                "rvs": [
                    "self",
                    "size",
                    "random_state"
                ],
                "sf": [
                    "self",
                    "x"
                ],
                "logsf": [
                    "self",
                    "x"
                ],
                "stats": [
                    "self",
                    "moments"
                ],
                "median": [
                    "self"
                ],
                "mean": [
                    "self"
                ],
                "var": [
                    "self"
                ],
                "std": [
                    "self"
                ],
                "moment": [
                    "self",
                    "n"
                ],
                "entropy": [
                    "self"
                ],
                "pmf": [
                    "self",
                    "k"
                ],
                "logpmf": [
                    "self",
                    "k"
                ],
                "interval": [
                    "self",
                    "alpha"
                ],
                "expect": [
                    "self",
                    "func",
                    "lb",
                    "ub",
                    "conditional"
                ],
                "support": [
                    "self"
                ]
            },
            "rv_generic": {
                "__init__": [
                    "self",
                    "seed"
                ],
                "random_state": [
                    "self",
                    "seed"
                ],
                "__setstate__": [
                    "self",
                    "state"
                ],
                "_attach_methods": [
                    "self"
                ],
                "_attach_argparser_methods": [
                    "self"
                ],
                "_construct_argparser": [
                    "self",
                    "meths_to_inspect",
                    "locscale_in",
                    "locscale_out"
                ],
                "_construct_doc": [
                    "self",
                    "docdict",
                    "shapes_vals"
                ],
                "_construct_default_doc": [
                    "self",
                    "longname",
                    "extradoc",
                    "docdict",
                    "discrete"
                ],
                "freeze": [
                    "self"
                ],
                "__call__": [
                    "self"
                ],
                "_stats": [
                    "self"
                ],
                "_munp": [
                    "self",
                    "n"
                ],
                "_argcheck_rvs": [
                    "self"
                ],
                "_argcheck": [
                    "self"
                ],
                "_get_support": [
                    "self"
                ],
                "_support_mask": [
                    "self",
                    "x"
                ],
                "_open_support_mask": [
                    "self",
                    "x"
                ],
                "_rvs": [
                    "self"
                ],
                "_logcdf": [
                    "self",
                    "x"
                ],
                "_sf": [
                    "self",
                    "x"
                ],
                "_logsf": [
                    "self",
                    "x"
                ],
                "_ppf": [
                    "self",
                    "q"
                ],
                "_isf": [
                    "self",
                    "q"
                ],
                "rvs": [
                    "self"
                ],
                "stats": [
                    "self"
                ],
                "entropy": [
                    "self"
                ],
                "moment": [
                    "self",
                    "n"
                ],
                "median": [
                    "self"
                ],
                "mean": [
                    "self"
                ],
                "var": [
                    "self"
                ],
                "std": [
                    "self"
                ],
                "interval": [
                    "self",
                    "alpha"
                ],
                "support": [
                    "self"
                ]
            },
            "rv_continuous": {
                "__init__": [
                    "self",
                    "momtype",
                    "a",
                    "b",
                    "xtol",
                    "badvalue",
                    "name",
                    "longname",
                    "shapes",
                    "extradoc",
                    "seed"
                ],
                "__getstate__": [
                    "self"
                ],
                "_attach_methods": [
                    "self"
                ],
                "_updated_ctor_param": [
                    "self"
                ],
                "_ppf_to_solve": [
                    "self",
                    "x",
                    "q"
                ],
                "_ppf_single": [
                    "self",
                    "q"
                ],
                "_mom_integ0": [
                    "self",
                    "x",
                    "m"
                ],
                "_mom0_sc": [
                    "self",
                    "m"
                ],
                "_mom_integ1": [
                    "self",
                    "q",
                    "m"
                ],
                "_mom1_sc": [
                    "self",
                    "m"
                ],
                "_pdf": [
                    "self",
                    "x"
                ],
                "_logpdf": [
                    "self",
                    "x"
                ],
                "_cdf_single": [
                    "self",
                    "x"
                ],
                "_cdf": [
                    "self",
                    "x"
                ],
                "pdf": [
                    "self",
                    "x"
                ],
                "logpdf": [
                    "self",
                    "x"
                ],
                "cdf": [
                    "self",
                    "x"
                ],
                "logcdf": [
                    "self",
                    "x"
                ],
                "sf": [
                    "self",
                    "x"
                ],
                "logsf": [
                    "self",
                    "x"
                ],
                "ppf": [
                    "self",
                    "q"
                ],
                "isf": [
                    "self",
                    "q"
                ],
                "_nnlf": [
                    "self",
                    "x"
                ],
                "_unpack_loc_scale": [
                    "self",
                    "theta"
                ],
                "nnlf": [
                    "self",
                    "theta",
                    "x"
                ],
                "_nnlf_and_penalty": [
                    "self",
                    "x",
                    "args"
                ],
                "_penalized_nnlf": [
                    "self",
                    "theta",
                    "x"
                ],
                "_fitstart": [
                    "self",
                    "data",
                    "args"
                ],
                "_reduce_func": [
                    "self",
                    "args",
                    "kwds"
                ],
                "fit": [
                    "self",
                    "data"
                ],
                "_fit_loc_scale_support": [
                    "self",
                    "data"
                ],
                "fit_loc_scale": [
                    "self",
                    "data"
                ],
                "_entropy": [
                    "self"
                ],
                "expect": [
                    "self",
                    "func",
                    "args",
                    "loc",
                    "scale",
                    "lb",
                    "ub",
                    "conditional"
                ]
            },
            "rv_discrete": {
                "__new__": [
                    "cls",
                    "a",
                    "b",
                    "name",
                    "badvalue",
                    "moment_tol",
                    "values",
                    "inc",
                    "longname",
                    "shapes",
                    "extradoc",
                    "seed"
                ],
                "__init__": [
                    "self",
                    "a",
                    "b",
                    "name",
                    "badvalue",
                    "moment_tol",
                    "values",
                    "inc",
                    "longname",
                    "shapes",
                    "extradoc",
                    "seed"
                ],
                "__getstate__": [
                    "self"
                ],
                "_attach_methods": [
                    "self"
                ],
                "_construct_docstrings": [
                    "self",
                    "name",
                    "longname",
                    "extradoc"
                ],
                "_updated_ctor_param": [
                    "self"
                ],
                "_nonzero": [
                    "self",
                    "k"
                ],
                "_pmf": [
                    "self",
                    "k"
                ],
                "_logpmf": [
                    "self",
                    "k"
                ],
                "_cdf_single": [
                    "self",
                    "k"
                ],
                "_cdf": [
                    "self",
                    "x"
                ],
                "rvs": [
                    "self"
                ],
                "pmf": [
                    "self",
                    "k"
                ],
                "logpmf": [
                    "self",
                    "k"
                ],
                "cdf": [
                    "self",
                    "k"
                ],
                "logcdf": [
                    "self",
                    "k"
                ],
                "sf": [
                    "self",
                    "k"
                ],
                "logsf": [
                    "self",
                    "k"
                ],
                "ppf": [
                    "self",
                    "q"
                ],
                "isf": [
                    "self",
                    "q"
                ],
                "_entropy": [
                    "self"
                ],
                "expect": [
                    "self",
                    "func",
                    "args",
                    "loc",
                    "lb",
                    "ub",
                    "conditional",
                    "maxcount",
                    "tolerance",
                    "chunksize"
                ]
            },
            "rv_sample": {
                "__init__": [
                    "self",
                    "a",
                    "b",
                    "name",
                    "badvalue",
                    "moment_tol",
                    "values",
                    "inc",
                    "longname",
                    "shapes",
                    "extradoc",
                    "seed"
                ],
                "__getstate__": [
                    "self"
                ],
                "_attach_methods": [
                    "self"
                ],
                "_get_support": [
                    "self"
                ],
                "_pmf": [
                    "self",
                    "x"
                ],
                "_cdf": [
                    "self",
                    "x"
                ],
                "_ppf": [
                    "self",
                    "q"
                ],
                "_rvs": [
                    "self",
                    "size",
                    "random_state"
                ],
                "_entropy": [
                    "self"
                ],
                "generic_moment": [
                    "self",
                    "n"
                ],
                "_expect": [
                    "self",
                    "fun",
                    "lb",
                    "ub"
                ]
            }
        },
        "scipy.stats._binned_statistic": {
            "binned_statistic": [
                "x",
                "values",
                "statistic",
                "bins",
                "range"
            ],
            "binned_statistic_2d": [
                "x",
                "y",
                "values",
                "statistic",
                "bins",
                "range",
                "expand_binnumbers"
            ],
            "binned_statistic_dd": [
                "sample",
                "values",
                "statistic",
                "bins",
                "range",
                "expand_binnumbers",
                "binned_statistic_result"
            ],
            "_calc_binned_statistic": [
                "Vdim",
                "bin_numbers",
                "result",
                "values",
                "stat_func",
                "is_callable"
            ],
            "_create_binned_data": [
                "bin_numbers",
                "unique_bin_numbers",
                "values",
                "vv"
            ],
            "_bin_edges": [
                "sample",
                "bins",
                "range"
            ],
            "_bin_numbers": [
                "sample",
                "nbin",
                "edges",
                "dedges"
            ]
        },
        "scipy.stats": {},
        "scipy.stats._multivariate": {
            "_squeeze_output": [
                "out"
            ],
            "_eigvalsh_to_eps": [
                "spectrum",
                "cond",
                "rcond"
            ],
            "_pinv_1d": [
                "v",
                "eps"
            ],
            "_dirichlet_check_parameters": [
                "alpha"
            ],
            "_dirichlet_check_input": [
                "alpha",
                "x"
            ],
            "_lnB": [
                "alpha"
            ],
            "_cho_inv_batch": [
                "a",
                "check_finite"
            ],
            "_PSD": {
                "__init__": [
                    "self",
                    "M",
                    "cond",
                    "rcond",
                    "lower",
                    "check_finite",
                    "allow_singular"
                ],
                "pinv": [
                    "self"
                ]
            },
            "multi_rv_generic": {
                "__init__": [
                    "self",
                    "seed"
                ],
                "random_state": [
                    "self",
                    "seed"
                ],
                "_get_random_state": [
                    "self",
                    "random_state"
                ]
            },
            "multi_rv_frozen": {
                "random_state": [
                    "self",
                    "seed"
                ]
            },
            "multivariate_normal_gen": {
                "__init__": [
                    "self",
                    "seed"
                ],
                "__call__": [
                    "self",
                    "mean",
                    "cov",
                    "allow_singular",
                    "seed"
                ],
                "_process_parameters": [
                    "self",
                    "dim",
                    "mean",
                    "cov"
                ],
                "_process_quantiles": [
                    "self",
                    "x",
                    "dim"
                ],
                "_logpdf": [
                    "self",
                    "x",
                    "mean",
                    "prec_U",
                    "log_det_cov",
                    "rank"
                ],
                "logpdf": [
                    "self",
                    "x",
                    "mean",
                    "cov",
                    "allow_singular"
                ],
                "pdf": [
                    "self",
                    "x",
                    "mean",
                    "cov",
                    "allow_singular"
                ],
                "_cdf": [
                    "self",
                    "x",
                    "mean",
                    "cov",
                    "maxpts",
                    "abseps",
                    "releps"
                ],
                "logcdf": [
                    "self",
                    "x",
                    "mean",
                    "cov",
                    "allow_singular",
                    "maxpts",
                    "abseps",
                    "releps"
                ],
                "cdf": [
                    "self",
                    "x",
                    "mean",
                    "cov",
                    "allow_singular",
                    "maxpts",
                    "abseps",
                    "releps"
                ],
                "rvs": [
                    "self",
                    "mean",
                    "cov",
                    "size",
                    "random_state"
                ],
                "entropy": [
                    "self",
                    "mean",
                    "cov"
                ]
            },
            "multivariate_normal_frozen": {
                "__init__": [
                    "self",
                    "mean",
                    "cov",
                    "allow_singular",
                    "seed",
                    "maxpts",
                    "abseps",
                    "releps"
                ],
                "logpdf": [
                    "self",
                    "x"
                ],
                "pdf": [
                    "self",
                    "x"
                ],
                "logcdf": [
                    "self",
                    "x"
                ],
                "cdf": [
                    "self",
                    "x"
                ],
                "rvs": [
                    "self",
                    "size",
                    "random_state"
                ],
                "entropy": [
                    "self"
                ]
            },
            "matrix_normal_gen": {
                "__init__": [
                    "self",
                    "seed"
                ],
                "__call__": [
                    "self",
                    "mean",
                    "rowcov",
                    "colcov",
                    "seed"
                ],
                "_process_parameters": [
                    "self",
                    "mean",
                    "rowcov",
                    "colcov"
                ],
                "_process_quantiles": [
                    "self",
                    "X",
                    "dims"
                ],
                "_logpdf": [
                    "self",
                    "dims",
                    "X",
                    "mean",
                    "row_prec_rt",
                    "log_det_rowcov",
                    "col_prec_rt",
                    "log_det_colcov"
                ],
                "logpdf": [
                    "self",
                    "X",
                    "mean",
                    "rowcov",
                    "colcov"
                ],
                "pdf": [
                    "self",
                    "X",
                    "mean",
                    "rowcov",
                    "colcov"
                ],
                "rvs": [
                    "self",
                    "mean",
                    "rowcov",
                    "colcov",
                    "size",
                    "random_state"
                ]
            },
            "matrix_normal_frozen": {
                "__init__": [
                    "self",
                    "mean",
                    "rowcov",
                    "colcov",
                    "seed"
                ],
                "logpdf": [
                    "self",
                    "X"
                ],
                "pdf": [
                    "self",
                    "X"
                ],
                "rvs": [
                    "self",
                    "size",
                    "random_state"
                ]
            },
            "dirichlet_gen": {
                "__init__": [
                    "self",
                    "seed"
                ],
                "__call__": [
                    "self",
                    "alpha",
                    "seed"
                ],
                "_logpdf": [
                    "self",
                    "x",
                    "alpha"
                ],
                "logpdf": [
                    "self",
                    "x",
                    "alpha"
                ],
                "pdf": [
                    "self",
                    "x",
                    "alpha"
                ],
                "mean": [
                    "self",
                    "alpha"
                ],
                "var": [
                    "self",
                    "alpha"
                ],
                "entropy": [
                    "self",
                    "alpha"
                ],
                "rvs": [
                    "self",
                    "alpha",
                    "size",
                    "random_state"
                ]
            },
            "dirichlet_frozen": {
                "__init__": [
                    "self",
                    "alpha",
                    "seed"
                ],
                "logpdf": [
                    "self",
                    "x"
                ],
                "pdf": [
                    "self",
                    "x"
                ],
                "mean": [
                    "self"
                ],
                "var": [
                    "self"
                ],
                "entropy": [
                    "self"
                ],
                "rvs": [
                    "self",
                    "size",
                    "random_state"
                ]
            },
            "wishart_gen": {
                "__init__": [
                    "self",
                    "seed"
                ],
                "__call__": [
                    "self",
                    "df",
                    "scale",
                    "seed"
                ],
                "_process_parameters": [
                    "self",
                    "df",
                    "scale"
                ],
                "_process_quantiles": [
                    "self",
                    "x",
                    "dim"
                ],
                "_process_size": [
                    "self",
                    "size"
                ],
                "_logpdf": [
                    "self",
                    "x",
                    "dim",
                    "df",
                    "scale",
                    "log_det_scale",
                    "C"
                ],
                "logpdf": [
                    "self",
                    "x",
                    "df",
                    "scale"
                ],
                "pdf": [
                    "self",
                    "x",
                    "df",
                    "scale"
                ],
                "_mean": [
                    "self",
                    "dim",
                    "df",
                    "scale"
                ],
                "mean": [
                    "self",
                    "df",
                    "scale"
                ],
                "_mode": [
                    "self",
                    "dim",
                    "df",
                    "scale"
                ],
                "mode": [
                    "self",
                    "df",
                    "scale"
                ],
                "_var": [
                    "self",
                    "dim",
                    "df",
                    "scale"
                ],
                "var": [
                    "self",
                    "df",
                    "scale"
                ],
                "_standard_rvs": [
                    "self",
                    "n",
                    "shape",
                    "dim",
                    "df",
                    "random_state"
                ],
                "_rvs": [
                    "self",
                    "n",
                    "shape",
                    "dim",
                    "df",
                    "C",
                    "random_state"
                ],
                "rvs": [
                    "self",
                    "df",
                    "scale",
                    "size",
                    "random_state"
                ],
                "_entropy": [
                    "self",
                    "dim",
                    "df",
                    "log_det_scale"
                ],
                "entropy": [
                    "self",
                    "df",
                    "scale"
                ],
                "_cholesky_logdet": [
                    "self",
                    "scale"
                ]
            },
            "wishart_frozen": {
                "__init__": [
                    "self",
                    "df",
                    "scale",
                    "seed"
                ],
                "logpdf": [
                    "self",
                    "x"
                ],
                "pdf": [
                    "self",
                    "x"
                ],
                "mean": [
                    "self"
                ],
                "mode": [
                    "self"
                ],
                "var": [
                    "self"
                ],
                "rvs": [
                    "self",
                    "size",
                    "random_state"
                ],
                "entropy": [
                    "self"
                ]
            },
            "invwishart_gen": {
                "__init__": [
                    "self",
                    "seed"
                ],
                "__call__": [
                    "self",
                    "df",
                    "scale",
                    "seed"
                ],
                "_logpdf": [
                    "self",
                    "x",
                    "dim",
                    "df",
                    "scale",
                    "log_det_scale"
                ],
                "logpdf": [
                    "self",
                    "x",
                    "df",
                    "scale"
                ],
                "pdf": [
                    "self",
                    "x",
                    "df",
                    "scale"
                ],
                "_mean": [
                    "self",
                    "dim",
                    "df",
                    "scale"
                ],
                "mean": [
                    "self",
                    "df",
                    "scale"
                ],
                "_mode": [
                    "self",
                    "dim",
                    "df",
                    "scale"
                ],
                "mode": [
                    "self",
                    "df",
                    "scale"
                ],
                "_var": [
                    "self",
                    "dim",
                    "df",
                    "scale"
                ],
                "var": [
                    "self",
                    "df",
                    "scale"
                ],
                "_rvs": [
                    "self",
                    "n",
                    "shape",
                    "dim",
                    "df",
                    "C",
                    "random_state"
                ],
                "rvs": [
                    "self",
                    "df",
                    "scale",
                    "size",
                    "random_state"
                ],
                "entropy": [
                    "self"
                ]
            },
            "invwishart_frozen": {
                "__init__": [
                    "self",
                    "df",
                    "scale",
                    "seed"
                ],
                "logpdf": [
                    "self",
                    "x"
                ],
                "pdf": [
                    "self",
                    "x"
                ],
                "mean": [
                    "self"
                ],
                "mode": [
                    "self"
                ],
                "var": [
                    "self"
                ],
                "rvs": [
                    "self",
                    "size",
                    "random_state"
                ],
                "entropy": [
                    "self"
                ]
            },
            "multinomial_gen": {
                "__init__": [
                    "self",
                    "seed"
                ],
                "__call__": [
                    "self",
                    "n",
                    "p",
                    "seed"
                ],
                "_process_parameters": [
                    "self",
                    "n",
                    "p"
                ],
                "_process_quantiles": [
                    "self",
                    "x",
                    "n",
                    "p"
                ],
                "_checkresult": [
                    "self",
                    "result",
                    "cond",
                    "bad_value"
                ],
                "_logpmf": [
                    "self",
                    "x",
                    "n",
                    "p"
                ],
                "logpmf": [
                    "self",
                    "x",
                    "n",
                    "p"
                ],
                "pmf": [
                    "self",
                    "x",
                    "n",
                    "p"
                ],
                "mean": [
                    "self",
                    "n",
                    "p"
                ],
                "cov": [
                    "self",
                    "n",
                    "p"
                ],
                "entropy": [
                    "self",
                    "n",
                    "p"
                ],
                "rvs": [
                    "self",
                    "n",
                    "p",
                    "size",
                    "random_state"
                ]
            },
            "multinomial_frozen": {
                "__init__": [
                    "self",
                    "n",
                    "p",
                    "seed"
                ],
                "logpmf": [
                    "self",
                    "x"
                ],
                "pmf": [
                    "self",
                    "x"
                ],
                "mean": [
                    "self"
                ],
                "cov": [
                    "self"
                ],
                "entropy": [
                    "self"
                ],
                "rvs": [
                    "self",
                    "size",
                    "random_state"
                ]
            },
            "special_ortho_group_gen": {
                "__init__": [
                    "self",
                    "seed"
                ],
                "__call__": [
                    "self",
                    "dim",
                    "seed"
                ],
                "_process_parameters": [
                    "self",
                    "dim"
                ],
                "rvs": [
                    "self",
                    "dim",
                    "size",
                    "random_state"
                ]
            },
            "special_ortho_group_frozen": {
                "__init__": [
                    "self",
                    "dim",
                    "seed"
                ],
                "rvs": [
                    "self",
                    "size",
                    "random_state"
                ]
            },
            "ortho_group_gen": {
                "__init__": [
                    "self",
                    "seed"
                ],
                "_process_parameters": [
                    "self",
                    "dim"
                ],
                "rvs": [
                    "self",
                    "dim",
                    "size",
                    "random_state"
                ]
            },
            "random_correlation_gen": {
                "__init__": [
                    "self",
                    "seed"
                ],
                "_process_parameters": [
                    "self",
                    "eigs",
                    "tol"
                ],
                "_givens_to_1": [
                    "self",
                    "aii",
                    "ajj",
                    "aij"
                ],
                "_to_corr": [
                    "self",
                    "m"
                ],
                "rvs": [
                    "self",
                    "eigs",
                    "random_state",
                    "tol",
                    "diag_tol"
                ]
            },
            "unitary_group_gen": {
                "__init__": [
                    "self",
                    "seed"
                ],
                "_process_parameters": [
                    "self",
                    "dim"
                ],
                "rvs": [
                    "self",
                    "dim",
                    "size",
                    "random_state"
                ]
            },
            "multivariate_t_gen": {
                "__init__": [
                    "self",
                    "seed"
                ],
                "__call__": [
                    "self",
                    "loc",
                    "shape",
                    "df",
                    "allow_singular",
                    "seed"
                ],
                "pdf": [
                    "self",
                    "x",
                    "loc",
                    "shape",
                    "df",
                    "allow_singular"
                ],
                "logpdf": [
                    "self",
                    "x",
                    "loc",
                    "shape",
                    "df"
                ],
                "_logpdf": [
                    "self",
                    "x",
                    "loc",
                    "prec_U",
                    "log_pdet",
                    "df",
                    "dim",
                    "rank"
                ],
                "rvs": [
                    "self",
                    "loc",
                    "shape",
                    "df",
                    "size",
                    "random_state"
                ],
                "_process_quantiles": [
                    "self",
                    "x",
                    "dim"
                ],
                "_process_parameters": [
                    "self",
                    "loc",
                    "shape",
                    "df"
                ]
            },
            "multivariate_t_frozen": {
                "__init__": [
                    "self",
                    "loc",
                    "shape",
                    "df",
                    "allow_singular",
                    "seed"
                ],
                "logpdf": [
                    "self",
                    "x"
                ],
                "pdf": [
                    "self",
                    "x"
                ],
                "rvs": [
                    "self",
                    "size",
                    "random_state"
                ]
            },
            "multivariate_hypergeom_gen": {
                "__init__": [
                    "self",
                    "seed"
                ],
                "__call__": [
                    "self",
                    "m",
                    "n",
                    "seed"
                ],
                "_process_parameters": [
                    "self",
                    "m",
                    "n"
                ],
                "_process_quantiles": [
                    "self",
                    "x",
                    "M",
                    "m",
                    "n"
                ],
                "_checkresult": [
                    "self",
                    "result",
                    "cond",
                    "bad_value"
                ],
                "_logpmf": [
                    "self",
                    "x",
                    "M",
                    "m",
                    "n",
                    "mxcond",
                    "ncond"
                ],
                "logpmf": [
                    "self",
                    "x",
                    "m",
                    "n"
                ],
                "pmf": [
                    "self",
                    "x",
                    "m",
                    "n"
                ],
                "mean": [
                    "self",
                    "m",
                    "n"
                ],
                "var": [
                    "self",
                    "m",
                    "n"
                ],
                "cov": [
                    "self",
                    "m",
                    "n"
                ],
                "rvs": [
                    "self",
                    "m",
                    "n",
                    "size",
                    "random_state"
                ]
            },
            "multivariate_hypergeom_frozen": {
                "__init__": [
                    "self",
                    "m",
                    "n",
                    "seed"
                ],
                "logpmf": [
                    "self",
                    "x"
                ],
                "pmf": [
                    "self",
                    "x"
                ],
                "mean": [
                    "self"
                ],
                "var": [
                    "self"
                ],
                "cov": [
                    "self"
                ],
                "rvs": [
                    "self",
                    "size",
                    "random_state"
                ]
            }
        },
        "scipy.stats.distributions": {},
        "scipy.stats._hypotests": {
            "epps_singleton_2samp": [
                "x",
                "y",
                "t"
            ],
            "_psi1_mod": [
                "x"
            ],
            "_cdf_cvm_inf": [
                "x"
            ],
            "_cdf_cvm": [
                "x",
                "n"
            ],
            "cramervonmises": [
                "rvs",
                "cdf",
                "args"
            ],
            "_get_wilcoxon_distr": [
                "n"
            ],
            "CramerVonMisesResult": {
                "__init__": [
                    "self",
                    "statistic",
                    "pvalue"
                ],
                "__repr__": [
                    "self"
                ]
            }
        },
        "scipy.stats.morestats": {
            "bayes_mvs": [
                "data",
                "alpha"
            ],
            "mvsdist": [
                "data"
            ],
            "kstat": [
                "data",
                "n"
            ],
            "kstatvar": [
                "data",
                "n"
            ],
            "_calc_uniform_order_statistic_medians": [
                "n"
            ],
            "_parse_dist_kw": [
                "dist",
                "enforce_subclass"
            ],
            "_add_axis_labels_title": [
                "plot",
                "xlabel",
                "ylabel",
                "title"
            ],
            "probplot": [
                "x",
                "sparams",
                "dist",
                "fit",
                "plot",
                "rvalue"
            ],
            "ppcc_max": [
                "x",
                "brack",
                "dist"
            ],
            "ppcc_plot": [
                "x",
                "a",
                "b",
                "dist",
                "plot",
                "N"
            ],
            "boxcox_llf": [
                "lmb",
                "data"
            ],
            "_boxcox_conf_interval": [
                "x",
                "lmax",
                "alpha"
            ],
            "boxcox": [
                "x",
                "lmbda",
                "alpha"
            ],
            "boxcox_normmax": [
                "x",
                "brack",
                "method"
            ],
            "_normplot": [
                "method",
                "x",
                "la",
                "lb",
                "plot",
                "N"
            ],
            "boxcox_normplot": [
                "x",
                "la",
                "lb",
                "plot",
                "N"
            ],
            "yeojohnson": [
                "x",
                "lmbda"
            ],
            "_yeojohnson_transform": [
                "x",
                "lmbda"
            ],
            "yeojohnson_llf": [
                "lmb",
                "data"
            ],
            "yeojohnson_normmax": [
                "x",
                "brack"
            ],
            "yeojohnson_normplot": [
                "x",
                "la",
                "lb",
                "plot",
                "N"
            ],
            "shapiro": [
                "x"
            ],
            "anderson": [
                "x",
                "dist"
            ],
            "_anderson_ksamp_midrank": [
                "samples",
                "Z",
                "Zstar",
                "k",
                "n",
                "N"
            ],
            "_anderson_ksamp_right": [
                "samples",
                "Z",
                "Zstar",
                "k",
                "n",
                "N"
            ],
            "anderson_ksamp": [
                "samples",
                "midrank"
            ],
            "ansari": [
                "x",
                "y"
            ],
            "bartlett": [],
            "levene": [],
            "binom_test": [
                "x",
                "n",
                "p",
                "alternative"
            ],
            "_apply_func": [
                "x",
                "g",
                "func"
            ],
            "fligner": [],
            "mood": [
                "x",
                "y",
                "axis"
            ],
            "wilcoxon": [
                "x",
                "y",
                "zero_method",
                "correction",
                "alternative",
                "mode"
            ],
            "median_test": [],
            "_circfuncs_common": [
                "samples",
                "high",
                "low",
                "nan_policy"
            ],
            "circmean": [
                "samples",
                "high",
                "low",
                "axis",
                "nan_policy"
            ],
            "circvar": [
                "samples",
                "high",
                "low",
                "axis",
                "nan_policy"
            ],
            "circstd": [
                "samples",
                "high",
                "low",
                "axis",
                "nan_policy"
            ]
        },
        "scipy.stats.stats": {
            "_contains_nan": [
                "a",
                "nan_policy"
            ],
            "_chk_asarray": [
                "a",
                "axis"
            ],
            "_chk2_asarray": [
                "a",
                "b",
                "axis"
            ],
            "_shape_with_dropped_axis": [
                "a",
                "axis"
            ],
            "_broadcast_shapes": [
                "shape1",
                "shape2"
            ],
            "_broadcast_shapes_with_dropped_axis": [
                "a",
                "b",
                "axis"
            ],
            "gmean": [
                "a",
                "axis",
                "dtype"
            ],
            "hmean": [
                "a",
                "axis",
                "dtype"
            ],
            "mode": [
                "a",
                "axis",
                "nan_policy"
            ],
            "_mask_to_limits": [
                "a",
                "limits",
                "inclusive"
            ],
            "tmean": [
                "a",
                "limits",
                "inclusive",
                "axis"
            ],
            "tvar": [
                "a",
                "limits",
                "inclusive",
                "axis",
                "ddof"
            ],
            "tmin": [
                "a",
                "lowerlimit",
                "axis",
                "inclusive",
                "nan_policy"
            ],
            "tmax": [
                "a",
                "upperlimit",
                "axis",
                "inclusive",
                "nan_policy"
            ],
            "tstd": [
                "a",
                "limits",
                "inclusive",
                "axis",
                "ddof"
            ],
            "tsem": [
                "a",
                "limits",
                "inclusive",
                "axis",
                "ddof"
            ],
            "moment": [
                "a",
                "moment",
                "axis",
                "nan_policy"
            ],
            "_moment": [
                "a",
                "moment",
                "axis"
            ],
            "variation": [
                "a",
                "axis",
                "nan_policy"
            ],
            "skew": [
                "a",
                "axis",
                "bias",
                "nan_policy"
            ],
            "kurtosis": [
                "a",
                "axis",
                "fisher",
                "bias",
                "nan_policy"
            ],
            "describe": [
                "a",
                "axis",
                "ddof",
                "bias",
                "nan_policy"
            ],
            "skewtest": [
                "a",
                "axis",
                "nan_policy"
            ],
            "kurtosistest": [
                "a",
                "axis",
                "nan_policy"
            ],
            "normaltest": [
                "a",
                "axis",
                "nan_policy"
            ],
            "jarque_bera": [
                "x"
            ],
            "itemfreq": [
                "a"
            ],
            "scoreatpercentile": [
                "a",
                "per",
                "limit",
                "interpolation_method",
                "axis"
            ],
            "_compute_qth_percentile": [
                "sorted_",
                "per",
                "interpolation_method",
                "axis"
            ],
            "percentileofscore": [
                "a",
                "score",
                "kind"
            ],
            "_histogram": [
                "a",
                "numbins",
                "defaultlimits",
                "weights",
                "printextras"
            ],
            "cumfreq": [
                "a",
                "numbins",
                "defaultreallimits",
                "weights"
            ],
            "relfreq": [
                "a",
                "numbins",
                "defaultreallimits",
                "weights"
            ],
            "obrientransform": [],
            "sem": [
                "a",
                "axis",
                "ddof",
                "nan_policy"
            ],
            "_isconst": [
                "x"
            ],
            "_quiet_nanmean": [
                "x"
            ],
            "_quiet_nanstd": [
                "x"
            ],
            "zscore": [
                "a",
                "axis",
                "ddof",
                "nan_policy"
            ],
            "zmap": [
                "scores",
                "compare",
                "axis",
                "ddof"
            ],
            "gstd": [
                "a",
                "axis",
                "ddof"
            ],
            "iqr": [
                "x",
                "axis",
                "rng",
                "scale",
                "nan_policy",
                "interpolation",
                "keepdims"
            ],
            "_mad_1d": [
                "x",
                "center",
                "nan_policy"
            ],
            "median_abs_deviation": [
                "x",
                "axis",
                "center",
                "scale",
                "nan_policy"
            ],
            "median_absolute_deviation": [
                "x",
                "axis",
                "center",
                "scale",
                "nan_policy"
            ],
            "sigmaclip": [
                "a",
                "low",
                "high"
            ],
            "trimboth": [
                "a",
                "proportiontocut",
                "axis"
            ],
            "trim1": [
                "a",
                "proportiontocut",
                "tail",
                "axis"
            ],
            "trim_mean": [
                "a",
                "proportiontocut",
                "axis"
            ],
            "_create_f_oneway_nan_result": [
                "shape",
                "axis"
            ],
            "_first": [
                "arr",
                "axis"
            ],
            "f_oneway": [],
            "pearsonr": [
                "x",
                "y"
            ],
            "fisher_exact": [
                "table",
                "alternative"
            ],
            "spearmanr": [
                "a",
                "b",
                "axis",
                "nan_policy"
            ],
            "pointbiserialr": [
                "x",
                "y"
            ],
            "kendalltau": [
                "x",
                "y",
                "initial_lexsort",
                "nan_policy",
                "method",
                "variant"
            ],
            "weightedtau": [
                "x",
                "y",
                "rank",
                "weigher",
                "additive"
            ],
            "_perm_test": [
                "x",
                "y",
                "stat",
                "reps",
                "workers",
                "random_state"
            ],
            "_euclidean_dist": [
                "x"
            ],
            "multiscale_graphcorr": [
                "x",
                "y",
                "compute_distance",
                "reps",
                "workers",
                "is_twosamp",
                "random_state"
            ],
            "_mgc_stat": [
                "distx",
                "disty"
            ],
            "_threshold_mgc_map": [
                "stat_mgc_map",
                "samp_size"
            ],
            "_smooth_mgc_map": [
                "sig_connect",
                "stat_mgc_map"
            ],
            "_two_sample_transform": [
                "u",
                "v"
            ],
            "ttest_1samp": [
                "a",
                "popmean",
                "axis",
                "nan_policy",
                "alternative"
            ],
            "_ttest_finish": [
                "df",
                "t",
                "alternative"
            ],
            "_ttest_ind_from_stats": [
                "mean1",
                "mean2",
                "denom",
                "df",
                "alternative"
            ],
            "_unequal_var_ttest_denom": [
                "v1",
                "n1",
                "v2",
                "n2"
            ],
            "_equal_var_ttest_denom": [
                "v1",
                "n1",
                "v2",
                "n2"
            ],
            "ttest_ind_from_stats": [
                "mean1",
                "std1",
                "nobs1",
                "mean2",
                "std2",
                "nobs2",
                "equal_var",
                "alternative"
            ],
            "_ttest_nans": [
                "a",
                "b",
                "axis",
                "namedtuple_type"
            ],
            "ttest_ind": [
                "a",
                "b",
                "axis",
                "equal_var",
                "nan_policy",
                "alternative"
            ],
            "_get_len": [
                "a",
                "axis",
                "msg"
            ],
            "ttest_rel": [
                "a",
                "b",
                "axis",
                "nan_policy",
                "alternative"
            ],
            "_count": [
                "a",
                "axis"
            ],
            "power_divergence": [
                "f_obs",
                "f_exp",
                "ddof",
                "axis",
                "lambda_"
            ],
            "chisquare": [
                "f_obs",
                "f_exp",
                "ddof",
                "axis"
            ],
            "_compute_dplus": [
                "cdfvals"
            ],
            "_compute_dminus": [
                "cdfvals"
            ],
            "ks_1samp": [
                "x",
                "cdf",
                "args",
                "alternative",
                "mode"
            ],
            "_compute_prob_inside_method": [
                "m",
                "n",
                "g",
                "h"
            ],
            "_compute_prob_outside_square": [
                "n",
                "h"
            ],
            "_count_paths_outside_method": [
                "m",
                "n",
                "g",
                "h"
            ],
            "_attempt_exact_2kssamp": [
                "n1",
                "n2",
                "g",
                "d",
                "alternative"
            ],
            "ks_2samp": [
                "data1",
                "data2",
                "alternative",
                "mode"
            ],
            "_parse_kstest_args": [
                "data1",
                "data2",
                "args",
                "N"
            ],
            "kstest": [
                "rvs",
                "cdf",
                "args",
                "N",
                "alternative",
                "mode"
            ],
            "tiecorrect": [
                "rankvals"
            ],
            "mannwhitneyu": [
                "x",
                "y",
                "use_continuity",
                "alternative"
            ],
            "ranksums": [
                "x",
                "y"
            ],
            "kruskal": [],
            "friedmanchisquare": [],
            "brunnermunzel": [
                "x",
                "y",
                "alternative",
                "distribution",
                "nan_policy"
            ],
            "combine_pvalues": [
                "pvalues",
                "method",
                "weights"
            ],
            "wasserstein_distance": [
                "u_values",
                "v_values",
                "u_weights",
                "v_weights"
            ],
            "energy_distance": [
                "u_values",
                "v_values",
                "u_weights",
                "v_weights"
            ],
            "_cdf_distance": [
                "p",
                "u_values",
                "v_values",
                "u_weights",
                "v_weights"
            ],
            "_validate_distribution": [
                "values",
                "weights"
            ],
            "find_repeats": [
                "arr"
            ],
            "_sum_of_squares": [
                "a",
                "axis"
            ],
            "_square_of_sums": [
                "a",
                "axis"
            ],
            "rankdata": [
                "a",
                "method"
            ],
            "F_onewayConstantInputWarning": {
                "__init__": [
                    "self",
                    "msg"
                ]
            },
            "F_onewayBadInputSizesWarning": {},
            "PearsonRConstantInputWarning": {
                "__init__": [
                    "self",
                    "msg"
                ]
            },
            "PearsonRNearConstantInputWarning": {
                "__init__": [
                    "self",
                    "msg"
                ]
            },
            "SpearmanRConstantInputWarning": {
                "__init__": [
                    "self",
                    "msg"
                ]
            },
            "_ParallelP": {
                "__init__": [
                    "self",
                    "x",
                    "y",
                    "random_states"
                ],
                "__call__": [
                    "self",
                    "index"
                ]
            }
        },
        "scipy.stats._distr_params": {},
        "scipy.stats._tukeylambda_stats": {
            "tukeylambda_variance": [
                "lam"
            ],
            "tukeylambda_kurtosis": [
                "lam"
            ]
        },
        "scipy.stats._rvs_sampling": {
            "rvs_ratio_uniforms": [
                "pdf",
                "umax",
                "vmin",
                "vmax",
                "size",
                "c",
                "random_state"
            ]
        },
        "scipy.stats.contingency": {
            "margins": [
                "a"
            ],
            "expected_freq": [
                "observed"
            ],
            "chi2_contingency": [
                "observed",
                "correction",
                "lambda_"
            ]
        },
        "scipy.stats._wilcoxon_data": {
            "_generate_wilcoxon_exact_table": [
                "N"
            ],
            "_generate_wilcoxon_exact_table_fast": [
                "N"
            ]
        },
        "scipy.stats.kde": {
            "gaussian_kde": {
                "__init__": [
                    "self",
                    "dataset",
                    "bw_method",
                    "weights"
                ],
                "evaluate": [
                    "self",
                    "points"
                ],
                "integrate_gaussian": [
                    "self",
                    "mean",
                    "cov"
                ],
                "integrate_box_1d": [
                    "self",
                    "low",
                    "high"
                ],
                "integrate_box": [
                    "self",
                    "low_bounds",
                    "high_bounds",
                    "maxpts"
                ],
                "integrate_kde": [
                    "self",
                    "other"
                ],
                "resample": [
                    "self",
                    "size",
                    "seed"
                ],
                "scotts_factor": [
                    "self"
                ],
                "silverman_factor": [
                    "self"
                ],
                "set_bandwidth": [
                    "self",
                    "bw_method"
                ],
                "_compute_covariance": [
                    "self"
                ],
                "pdf": [
                    "self",
                    "x"
                ],
                "logpdf": [
                    "self",
                    "x"
                ],
                "weights": [
                    "self"
                ],
                "neff": [
                    "self"
                ]
            }
        },
        "scipy.stats.mstats_basic": {
            "_chk_asarray": [
                "a",
                "axis"
            ],
            "_chk2_asarray": [
                "a",
                "b",
                "axis"
            ],
            "_chk_size": [
                "a",
                "b"
            ],
            "argstoarray": [],
            "find_repeats": [
                "arr"
            ],
            "count_tied_groups": [
                "x",
                "use_missing"
            ],
            "rankdata": [
                "data",
                "axis",
                "use_missing"
            ],
            "mode": [
                "a",
                "axis"
            ],
            "_betai": [
                "a",
                "b",
                "x"
            ],
            "msign": [
                "x"
            ],
            "pearsonr": [
                "x",
                "y"
            ],
            "spearmanr": [
                "x",
                "y",
                "use_ties",
                "axis",
                "nan_policy"
            ],
            "_kendall_p_exact": [
                "n",
                "c"
            ],
            "kendalltau": [
                "x",
                "y",
                "use_ties",
                "use_missing",
                "method"
            ],
            "kendalltau_seasonal": [
                "x"
            ],
            "pointbiserialr": [
                "x",
                "y"
            ],
            "linregress": [
                "x",
                "y"
            ],
            "theilslopes": [
                "y",
                "x",
                "alpha"
            ],
            "siegelslopes": [
                "y",
                "x",
                "method"
            ],
            "sen_seasonal_slopes": [
                "x"
            ],
            "ttest_1samp": [
                "a",
                "popmean",
                "axis"
            ],
            "ttest_ind": [
                "a",
                "b",
                "axis",
                "equal_var"
            ],
            "ttest_rel": [
                "a",
                "b",
                "axis"
            ],
            "mannwhitneyu": [
                "x",
                "y",
                "use_continuity"
            ],
            "kruskal": [],
            "ks_1samp": [
                "x",
                "cdf",
                "args",
                "alternative",
                "mode"
            ],
            "ks_2samp": [
                "data1",
                "data2",
                "alternative",
                "mode"
            ],
            "kstest": [
                "data1",
                "data2",
                "args",
                "alternative",
                "mode"
            ],
            "trima": [
                "a",
                "limits",
                "inclusive"
            ],
            "trimr": [
                "a",
                "limits",
                "inclusive",
                "axis"
            ],
            "trim": [
                "a",
                "limits",
                "inclusive",
                "relative",
                "axis"
            ],
            "trimboth": [
                "data",
                "proportiontocut",
                "inclusive",
                "axis"
            ],
            "trimtail": [
                "data",
                "proportiontocut",
                "tail",
                "inclusive",
                "axis"
            ],
            "trimmed_mean": [
                "a",
                "limits",
                "inclusive",
                "relative",
                "axis"
            ],
            "trimmed_var": [
                "a",
                "limits",
                "inclusive",
                "relative",
                "axis",
                "ddof"
            ],
            "trimmed_std": [
                "a",
                "limits",
                "inclusive",
                "relative",
                "axis",
                "ddof"
            ],
            "trimmed_stde": [
                "a",
                "limits",
                "inclusive",
                "axis"
            ],
            "_mask_to_limits": [
                "a",
                "limits",
                "inclusive"
            ],
            "tmean": [
                "a",
                "limits",
                "inclusive",
                "axis"
            ],
            "tvar": [
                "a",
                "limits",
                "inclusive",
                "axis",
                "ddof"
            ],
            "tmin": [
                "a",
                "lowerlimit",
                "axis",
                "inclusive"
            ],
            "tmax": [
                "a",
                "upperlimit",
                "axis",
                "inclusive"
            ],
            "tsem": [
                "a",
                "limits",
                "inclusive",
                "axis",
                "ddof"
            ],
            "winsorize": [
                "a",
                "limits",
                "inclusive",
                "inplace",
                "axis",
                "nan_policy"
            ],
            "moment": [
                "a",
                "moment",
                "axis"
            ],
            "variation": [
                "a",
                "axis"
            ],
            "skew": [
                "a",
                "axis",
                "bias"
            ],
            "kurtosis": [
                "a",
                "axis",
                "fisher",
                "bias"
            ],
            "describe": [
                "a",
                "axis",
                "ddof",
                "bias"
            ],
            "stde_median": [
                "data",
                "axis"
            ],
            "skewtest": [
                "a",
                "axis"
            ],
            "kurtosistest": [
                "a",
                "axis"
            ],
            "normaltest": [
                "a",
                "axis"
            ],
            "mquantiles": [
                "a",
                "prob",
                "alphap",
                "betap",
                "axis",
                "limit"
            ],
            "scoreatpercentile": [
                "data",
                "per",
                "limit",
                "alphap",
                "betap"
            ],
            "plotting_positions": [
                "data",
                "alpha",
                "beta"
            ],
            "obrientransform": [],
            "sem": [
                "a",
                "axis",
                "ddof"
            ],
            "f_oneway": [],
            "friedmanchisquare": [],
            "brunnermunzel": [
                "x",
                "y",
                "alternative",
                "distribution"
            ]
        },
        "scipy.stats.tests.test_continuous_basic": {
            "cases_test_cont_basic": [],
            "test_cont_basic": [
                "distname",
                "arg"
            ],
            "test_rvs_scalar": [
                "distname",
                "arg"
            ],
            "test_levy_stable_random_state_property": [],
            "cases_test_moments": [],
            "test_moments": [
                "distname",
                "arg",
                "normalization_ok",
                "higher_ok",
                "is_xfailing"
            ],
            "test_rvs_broadcast": [
                "dist",
                "shape_args"
            ],
            "test_rvs_gh2069_regression": [],
            "test_nomodify_gh9900_regression": [],
            "test_broadcast_gh9990_regression": [],
            "test_broadcast_gh7933_regression": [],
            "test_gh2002_regression": [],
            "test_gh1320_regression": [],
            "check_sample_meanvar_": [
                "distfn",
                "arg",
                "m",
                "v",
                "sm",
                "sv",
                "sn",
                "msg"
            ],
            "check_sample_mean": [
                "sm",
                "v",
                "n",
                "popmean"
            ],
            "check_sample_var": [
                "sv",
                "n",
                "popvar"
            ],
            "check_cdf_ppf": [
                "distfn",
                "arg",
                "msg"
            ],
            "check_sf_isf": [
                "distfn",
                "arg",
                "msg"
            ],
            "check_pdf": [
                "distfn",
                "arg",
                "msg"
            ],
            "check_pdf_logpdf": [
                "distfn",
                "args",
                "msg"
            ],
            "check_pdf_logpdf_at_endpoints": [
                "distfn",
                "args",
                "msg"
            ],
            "check_sf_logsf": [
                "distfn",
                "args",
                "msg"
            ],
            "check_cdf_logcdf": [
                "distfn",
                "args",
                "msg"
            ],
            "check_ppf_broadcast": [
                "distfn",
                "arg",
                "msg"
            ],
            "check_distribution_rvs": [
                "dist",
                "args",
                "alpha",
                "rvs"
            ],
            "check_vecentropy": [
                "distfn",
                "args"
            ],
            "check_loc_scale": [
                "distfn",
                "arg",
                "m",
                "v",
                "msg"
            ],
            "check_ppf_private": [
                "distfn",
                "arg",
                "msg"
            ],
            "check_retrieving_support": [
                "distfn",
                "args"
            ],
            "check_fit_args": [
                "distfn",
                "arg",
                "rvs"
            ],
            "check_fit_args_fix": [
                "distfn",
                "arg",
                "rvs"
            ],
            "test_methods_with_lists": [
                "method",
                "distname",
                "args"
            ]
        },
        "scipy.stats.tests.test_stats": {
            "test_kendalltau": [],
            "test_kendalltau_vs_mstats_basic": [],
            "test_kendalltau_nan_2nd_arg": [],
            "test_weightedtau": [],
            "test_segfault_issue_9710": [],
            "test_kendall_tau_large": [],
            "test_weightedtau_vs_quadratic": [],
            "test_theilslopes": [],
            "test_cumfreq": [],
            "test_relfreq": [],
            "_check_warnings": [
                "warn_list",
                "expected_type",
                "expected_len"
            ],
            "test_percentileofscore": [],
            "test_chiquare_data_types": [
                "n",
                "dtype"
            ],
            "test_chisquare_masked_arrays": [],
            "test_power_divergence_against_cressie_read_data": [],
            "test_friedmanchisquare": [],
            "test_ttest_rel": [],
            "test_ttest_rel_nan_2nd_arg": [],
            "test_ttest_rel_empty_1d_returns_nan": [],
            "test_ttest_rel_axis_size_zero": [
                "b",
                "expected_shape"
            ],
            "test_ttest_rel_nonaxis_size_zero": [],
            "_desc_stats": [
                "x1",
                "x2",
                "axis"
            ],
            "test_ttest_ind": [],
            "test_ttest_ind_with_uneq_var": [],
            "test_ttest_ind_nan_2nd_arg": [],
            "test_ttest_ind_empty_1d_returns_nan": [],
            "test_ttest_ind_axis_size_zero": [
                "b",
                "expected_shape"
            ],
            "test_ttest_ind_nonaxis_size_zero": [],
            "test_ttest_ind_nonaxis_size_zero_different_lengths": [],
            "test_gh5686": [],
            "test_ttest_1samp_new": [],
            "test_normalitytests": [],
            "test_skewtest_too_few_samples": [],
            "test_kurtosistest_too_few_samples": [],
            "test_pointbiserial": [],
            "test_obrientransform": [],
            "check_equal_gmean": [
                "array_like",
                "desired",
                "axis",
                "dtype",
                "rtol"
            ],
            "check_equal_hmean": [
                "array_like",
                "desired",
                "axis",
                "dtype",
                "rtol"
            ],
            "test_binomtest": [],
            "test_binomtest2": [],
            "test_binomtest3": [],
            "TestTrimmedStats": {
                "test_tmean": [
                    "self"
                ],
                "test_tvar": [
                    "self"
                ],
                "test_tstd": [
                    "self"
                ],
                "test_tmin": [
                    "self"
                ],
                "test_tmax": [
                    "self"
                ],
                "test_tsem": [
                    "self"
                ]
            },
            "TestCorrPearsonr": {
                "test_pXX": [
                    "self"
                ],
                "test_pXBIG": [
                    "self"
                ],
                "test_pXLITTLE": [
                    "self"
                ],
                "test_pXHUGE": [
                    "self"
                ],
                "test_pXTINY": [
                    "self"
                ],
                "test_pXROUND": [
                    "self"
                ],
                "test_pBIGBIG": [
                    "self"
                ],
                "test_pBIGLITTLE": [
                    "self"
                ],
                "test_pBIGHUGE": [
                    "self"
                ],
                "test_pBIGTINY": [
                    "self"
                ],
                "test_pBIGROUND": [
                    "self"
                ],
                "test_pLITTLELITTLE": [
                    "self"
                ],
                "test_pLITTLEHUGE": [
                    "self"
                ],
                "test_pLITTLETINY": [
                    "self"
                ],
                "test_pLITTLEROUND": [
                    "self"
                ],
                "test_pHUGEHUGE": [
                    "self"
                ],
                "test_pHUGETINY": [
                    "self"
                ],
                "test_pHUGEROUND": [
                    "self"
                ],
                "test_pTINYTINY": [
                    "self"
                ],
                "test_pTINYROUND": [
                    "self"
                ],
                "test_pROUNDROUND": [
                    "self"
                ],
                "test_r_almost_exactly_pos1": [
                    "self"
                ],
                "test_r_almost_exactly_neg1": [
                    "self"
                ],
                "test_basic": [
                    "self"
                ],
                "test_constant_input": [
                    "self"
                ],
                "test_near_constant_input": [
                    "self"
                ],
                "test_very_small_input_values": [
                    "self"
                ],
                "test_very_large_input_values": [
                    "self"
                ],
                "test_extremely_large_input_values": [
                    "self"
                ],
                "test_length_two_pos1": [
                    "self"
                ],
                "test_length_two_neg2": [
                    "self"
                ],
                "test_more_basic_examples": [
                    "self"
                ],
                "test_unequal_lengths": [
                    "self"
                ],
                "test_len1": [
                    "self"
                ]
            },
            "TestFisherExact": {
                "test_basic": [
                    "self"
                ],
                "test_precise": [
                    "self"
                ],
                "test_large_numbers": [
                    "self"
                ],
                "test_raises": [
                    "self"
                ],
                "test_row_or_col_zero": [
                    "self"
                ],
                "test_less_greater": [
                    "self"
                ],
                "test_gh3014": [
                    "self"
                ]
            },
            "TestCorrSpearmanr": {
                "test_scalar": [
                    "self"
                ],
                "test_uneven_lengths": [
                    "self"
                ],
                "test_uneven_2d_shapes": [
                    "self"
                ],
                "test_ndim_too_high": [
                    "self"
                ],
                "test_nan_policy": [
                    "self"
                ],
                "test_nan_policy_bug_12458": [
                    "self"
                ],
                "test_nan_policy_bug_12411": [
                    "self"
                ],
                "test_sXX": [
                    "self"
                ],
                "test_sXBIG": [
                    "self"
                ],
                "test_sXLITTLE": [
                    "self"
                ],
                "test_sXHUGE": [
                    "self"
                ],
                "test_sXTINY": [
                    "self"
                ],
                "test_sXROUND": [
                    "self"
                ],
                "test_sBIGBIG": [
                    "self"
                ],
                "test_sBIGLITTLE": [
                    "self"
                ],
                "test_sBIGHUGE": [
                    "self"
                ],
                "test_sBIGTINY": [
                    "self"
                ],
                "test_sBIGROUND": [
                    "self"
                ],
                "test_sLITTLELITTLE": [
                    "self"
                ],
                "test_sLITTLEHUGE": [
                    "self"
                ],
                "test_sLITTLETINY": [
                    "self"
                ],
                "test_sLITTLEROUND": [
                    "self"
                ],
                "test_sHUGEHUGE": [
                    "self"
                ],
                "test_sHUGETINY": [
                    "self"
                ],
                "test_sHUGEROUND": [
                    "self"
                ],
                "test_sTINYTINY": [
                    "self"
                ],
                "test_sTINYROUND": [
                    "self"
                ],
                "test_sROUNDROUND": [
                    "self"
                ],
                "test_spearmanr_result_attributes": [
                    "self"
                ],
                "test_1d_vs_2d": [
                    "self"
                ],
                "test_1d_vs_2d_nans": [
                    "self"
                ],
                "test_3cols": [
                    "self"
                ],
                "test_gh_9103": [
                    "self"
                ],
                "test_gh_8111": [
                    "self"
                ]
            },
            "TestCorrSpearmanr2": {
                "test_spearmanr_vs_r": [
                    "self"
                ],
                "test_empty_arrays": [
                    "self"
                ],
                "test_normal_draws": [
                    "self"
                ],
                "test_corr_1": [
                    "self"
                ],
                "test_nan_policies": [
                    "self"
                ],
                "test_unequal_lengths": [
                    "self"
                ],
                "test_omit_paired_value": [
                    "self"
                ],
                "test_gh_issue_6061_windows_overflow": [
                    "self"
                ],
                "test_tie0": [
                    "self"
                ],
                "test_tie1": [
                    "self"
                ],
                "test_tie2": [
                    "self"
                ],
                "test_ties_axis_1": [
                    "self"
                ],
                "test_gh_11111": [
                    "self"
                ],
                "test_index_error": [
                    "self"
                ]
            },
            "TestFindRepeats": {
                "test_basic": [
                    "self"
                ],
                "test_empty_result": [
                    "self"
                ]
            },
            "TestRegression": {
                "test_linregressBIGX": [
                    "self"
                ],
                "test_regressXX": [
                    "self"
                ],
                "test_regressZEROX": [
                    "self"
                ],
                "test_regress_simple": [
                    "self"
                ],
                "test_regress_simple_onearg_rows": [
                    "self"
                ],
                "test_regress_simple_onearg_cols": [
                    "self"
                ],
                "test_regress_shape_error": [
                    "self"
                ],
                "test_linregress": [
                    "self"
                ],
                "test_regress_simple_negative_cor": [
                    "self"
                ],
                "test_linregress_result_attributes": [
                    "self"
                ],
                "test_regress_two_inputs": [
                    "self"
                ],
                "test_regress_two_inputs_horizontal_line": [
                    "self"
                ],
                "test_nist_norris": [
                    "self"
                ],
                "test_compare_to_polyfit": [
                    "self"
                ],
                "test_empty_input": [
                    "self"
                ],
                "test_nan_input": [
                    "self"
                ]
            },
            "TestScoreatpercentile": {
                "setup_method": [
                    "self"
                ],
                "test_basic": [
                    "self"
                ],
                "test_fraction": [
                    "self"
                ],
                "test_lower_higher": [
                    "self"
                ],
                "test_sequence_per": [
                    "self"
                ],
                "test_axis": [
                    "self"
                ],
                "test_exception": [
                    "self"
                ],
                "test_empty": [
                    "self"
                ]
            },
            "TestItemfreq": {
                "test_numeric_types": [
                    "self"
                ],
                "test_object_arrays": [
                    "self"
                ],
                "test_structured_arrays": [
                    "self"
                ]
            },
            "TestMode": {
                "test_empty": [
                    "self"
                ],
                "test_scalar": [
                    "self"
                ],
                "test_basic": [
                    "self"
                ],
                "test_axes": [
                    "self"
                ],
                "test_strings": [
                    "self"
                ],
                "test_mixed_objects": [
                    "self"
                ],
                "test_objects": [
                    "self"
                ],
                "test_mode_result_attributes": [
                    "self"
                ],
                "test_mode_nan": [
                    "self"
                ],
                "test_smallest_equal": [
                    "self",
                    "data"
                ],
                "test_obj_arrays_ndim": [
                    "self"
                ]
            },
            "TestVariability": {
                "test_sem": [
                    "self"
                ],
                "test_zmap": [
                    "self"
                ],
                "test_zmap_axis": [
                    "self"
                ],
                "test_zmap_ddof": [
                    "self"
                ],
                "test_zscore": [
                    "self"
                ],
                "test_zscore_axis": [
                    "self"
                ],
                "test_zscore_ddof": [
                    "self"
                ],
                "test_zscore_nan_propagate": [
                    "self"
                ],
                "test_zscore_nan_omit": [
                    "self"
                ],
                "test_zscore_nan_raise": [
                    "self"
                ],
                "test_zscore_constant_input_1d": [
                    "self"
                ],
                "test_zscore_constant_input_2d": [
                    "self"
                ],
                "test_zscore_constant_input_2d_nan_policy_omit": [
                    "self"
                ],
                "test_zscore_2d_all_nan_row": [
                    "self"
                ],
                "test_zscore_2d_all_nan": [
                    "self"
                ],
                "test_zscore_empty_input": [
                    "self",
                    "x"
                ]
            },
            "TestMedianAbsDeviation": {
                "setup_class": [
                    "self"
                ],
                "test_median_abs_deviation": [
                    "self"
                ],
                "test_mad_nan_omit": [
                    "self"
                ],
                "test_axis_and_nan": [
                    "self"
                ],
                "test_nan_policy_omit_with_inf": [
                    "sef"
                ],
                "test_size_zero_with_axis": [
                    "self",
                    "axis"
                ],
                "test_nan_policy_with_axis": [
                    "self",
                    "nan_policy",
                    "expected"
                ],
                "test_center_mean_with_nan": [
                    "self",
                    "axis",
                    "expected"
                ],
                "test_center_not_callable": [
                    "self"
                ]
            },
            "TestMedianAbsoluteDeviation": {
                "setup_class": [
                    "self"
                ],
                "test_mad_empty": [
                    "self"
                ],
                "test_mad_nan_shape1": [
                    "self"
                ],
                "test_mad_nan_shape2": [
                    "self"
                ],
                "test_mad_nan_propagate": [
                    "self"
                ],
                "test_mad_nan_raise": [
                    "self"
                ],
                "test_mad_scale_default": [
                    "self"
                ],
                "test_mad_scale_normal": [
                    "self"
                ]
            },
            "TestIQR": {
                "test_basic": [
                    "self"
                ],
                "test_api": [
                    "self"
                ],
                "test_empty": [
                    "self"
                ],
                "test_constant": [
                    "self"
                ],
                "test_scalarlike": [
                    "self"
                ],
                "test_2D": [
                    "self"
                ],
                "test_axis": [
                    "self"
                ],
                "test_rng": [
                    "self"
                ],
                "test_interpolation": [
                    "self"
                ],
                "test_keepdims": [
                    "self"
                ],
                "test_nanpolicy": [
                    "self"
                ],
                "test_scale": [
                    "self"
                ]
            },
            "TestMoments": {
                "test_moment": [
                    "self"
                ],
                "test_moment_propagate_nan": [
                    "self"
                ],
                "test_variation": [
                    "self"
                ],
                "test_variation_propagate_nan": [
                    "self"
                ],
                "test_skewness": [
                    "self"
                ],
                "test_skewness_scalar": [
                    "self"
                ],
                "test_skew_propagate_nan": [
                    "self"
                ],
                "test_kurtosis": [
                    "self"
                ],
                "test_kurtosis_array_scalar": [
                    "self"
                ],
                "test_kurtosis_propagate_nan": [
                    "self"
                ],
                "test_moment_accuracy": [
                    "self"
                ]
            },
            "TestStudentTest": {
                "test_onesample": [
                    "self"
                ],
                "test_1samp_alternative": [
                    "self"
                ]
            },
            "TestPowerDivergence": {
                "check_power_divergence": [
                    "self",
                    "f_obs",
                    "f_exp",
                    "ddof",
                    "axis",
                    "lambda_",
                    "expected_stat"
                ],
                "test_basic": [
                    "self"
                ],
                "test_basic_masked": [
                    "self"
                ],
                "test_axis": [
                    "self"
                ],
                "test_ddof_broadcasting": [
                    "self"
                ],
                "test_empty_cases": [
                    "self"
                ],
                "test_power_divergence_result_attributes": [
                    "self"
                ]
            },
            "TestKSTest": {
                "_testOne": [
                    "self",
                    "x",
                    "alternative",
                    "expected_statistic",
                    "expected_prob",
                    "mode",
                    "decimal"
                ],
                "_test_kstest_and_ks1samp": [
                    "self",
                    "x",
                    "alternative",
                    "mode",
                    "decimal"
                ],
                "test_namedtuple_attributes": [
                    "self"
                ],
                "test_agree_with_ks_1samp": [
                    "self"
                ]
            },
            "TestKSOneSample": {
                "_testOne": [
                    "self",
                    "x",
                    "alternative",
                    "expected_statistic",
                    "expected_prob",
                    "mode",
                    "decimal"
                ],
                "test_namedtuple_attributes": [
                    "self"
                ],
                "test_agree_with_r": [
                    "self"
                ],
                "test_known_examples": [
                    "self"
                ],
                "test_ks1samp_allpaths": [
                    "self"
                ]
            },
            "TestKSTwoSamples": {
                "_testOne": [
                    "self",
                    "x1",
                    "x2",
                    "alternative",
                    "expected_statistic",
                    "expected_prob",
                    "mode"
                ],
                "testSmall": [
                    "self"
                ],
                "testTwoVsThree": [
                    "self"
                ],
                "testTwoVsFour": [
                    "self"
                ],
                "test100_100": [
                    "self"
                ],
                "test100_110": [
                    "self"
                ],
                "testRepeatedValues": [
                    "self"
                ],
                "testEqualSizes": [
                    "self"
                ],
                "testMiddlingBoth": [
                    "self"
                ],
                "testMediumBoth": [
                    "self"
                ],
                "testLarge": [
                    "self"
                ],
                "test_gh11184": [
                    "self"
                ],
                "test_gh11184_bigger": [
                    "self"
                ],
                "testLargeBoth": [
                    "self"
                ],
                "testNamedAttributes": [
                    "self"
                ],
                "test_some_code_paths": [
                    "self"
                ],
                "test_argument_checking": [
                    "self"
                ],
                "test_gh12218": [
                    "self"
                ]
            },
            "TestDescribe": {
                "test_describe_scalar": [
                    "self"
                ],
                "test_describe_numbers": [
                    "self"
                ],
                "test_describe_result_attributes": [
                    "self"
                ],
                "test_describe_ddof": [
                    "self"
                ],
                "test_describe_axis_none": [
                    "self"
                ],
                "test_describe_empty": [
                    "self"
                ]
            },
            "TestRankSums": {
                "test_ranksums_result_attributes": [
                    "self"
                ]
            },
            "TestJarqueBera": {
                "test_jarque_bera_stats": [
                    "self"
                ],
                "test_jarque_bera_array_like": [
                    "self"
                ],
                "test_jarque_bera_size": [
                    "self"
                ]
            },
            "TestMannWhitneyU": {
                "test_mannwhitneyu_one_sided": [
                    "self"
                ],
                "test_mannwhitneyu_two_sided": [
                    "self"
                ],
                "test_mannwhitneyu_default": [
                    "self"
                ],
                "test_mannwhitneyu_no_correct_one_sided": [
                    "self"
                ],
                "test_mannwhitneyu_no_correct_two_sided": [
                    "self"
                ],
                "test_mannwhitneyu_no_correct_default": [
                    "self"
                ],
                "test_mannwhitneyu_ones": [
                    "self"
                ],
                "test_mannwhitneyu_result_attributes": [
                    "self"
                ]
            },
            "TestHarMean": {
                "test_1d_list": [
                    "self"
                ],
                "test_1d_array": [
                    "self"
                ],
                "test_1d_array_with_zero": [
                    "self"
                ],
                "test_1d_array_with_negative_value": [
                    "self"
                ],
                "test_2d_list": [
                    "self"
                ],
                "test_2d_array": [
                    "self"
                ],
                "test_2d_axis0": [
                    "self"
                ],
                "test_2d_axis0_with_zero": [
                    "self"
                ],
                "test_2d_axis1": [
                    "self"
                ],
                "test_2d_axis1_with_zero": [
                    "self"
                ],
                "test_2d_matrix_axis0": [
                    "self"
                ],
                "test_2d_matrix_axis1": [
                    "self"
                ]
            },
            "TestGeoMean": {
                "test_1d_list": [
                    "self"
                ],
                "test_1d_array": [
                    "self"
                ],
                "test_2d_list": [
                    "self"
                ],
                "test_2d_array": [
                    "self"
                ],
                "test_2d_axis0": [
                    "self"
                ],
                "test_2d_axis1": [
                    "self"
                ],
                "test_2d_matrix_axis0": [
                    "self"
                ],
                "test_2d_matrix_axis1": [
                    "self"
                ],
                "test_large_values": [
                    "self"
                ],
                "test_1d_list0": [
                    "self"
                ],
                "test_1d_array0": [
                    "self"
                ],
                "test_1d_list_neg": [
                    "self"
                ]
            },
            "TestGeometricStandardDeviation": {
                "test_1d_array": [
                    "self"
                ],
                "test_1d_numeric_array_like_input": [
                    "self"
                ],
                "test_raises_value_error_non_array_like_input": [
                    "self"
                ],
                "test_raises_value_error_zero_entry": [
                    "self"
                ],
                "test_raises_value_error_negative_entry": [
                    "self"
                ],
                "test_raises_value_error_inf_entry": [
                    "self"
                ],
                "test_propagates_nan_values": [
                    "self"
                ],
                "test_ddof_equal_to_number_of_observations": [
                    "self"
                ],
                "test_3d_array": [
                    "self"
                ],
                "test_3d_array_axis_type_tuple": [
                    "self"
                ],
                "test_3d_array_axis_0": [
                    "self"
                ],
                "test_3d_array_axis_1": [
                    "self"
                ],
                "test_3d_array_axis_2": [
                    "self"
                ],
                "test_masked_3d_array": [
                    "self"
                ]
            },
            "TestTrim": {
                "test_trim1": [
                    "self"
                ],
                "test_trimboth": [
                    "self"
                ],
                "test_trim_mean": [
                    "self"
                ]
            },
            "TestSigmaClip": {
                "test_sigmaclip1": [
                    "self"
                ],
                "test_sigmaclip2": [
                    "self"
                ],
                "test_sigmaclip3": [
                    "self"
                ],
                "test_sigmaclip_result_attributes": [
                    "self"
                ],
                "test_std_zero": [
                    "self"
                ]
            },
            "TestFOneWay": {
                "test_trivial": [
                    "self"
                ],
                "test_basic": [
                    "self"
                ],
                "test_known_exact": [
                    "self"
                ],
                "test_large_integer_array": [
                    "self"
                ],
                "test_result_attributes": [
                    "self"
                ],
                "test_nist": [
                    "self"
                ],
                "test_constant_input": [
                    "self",
                    "a",
                    "b",
                    "expected"
                ],
                "test_2d_inputs": [
                    "self",
                    "axis"
                ],
                "test_3d_inputs": [
                    "self"
                ],
                "test_length0_1d_error": [
                    "self"
                ],
                "test_length0_2d_error": [
                    "self"
                ],
                "test_all_length_one": [
                    "self"
                ],
                "test_too_few_inputs": [
                    "self",
                    "args"
                ],
                "test_axis_error": [
                    "self"
                ],
                "test_bad_shapes": [
                    "self"
                ]
            },
            "TestKruskal": {
                "test_simple": [
                    "self"
                ],
                "test_basic": [
                    "self"
                ],
                "test_simple_tie": [
                    "self"
                ],
                "test_another_tie": [
                    "self"
                ],
                "test_three_groups": [
                    "self"
                ],
                "test_empty": [
                    "self"
                ],
                "test_kruskal_result_attributes": [
                    "self"
                ],
                "test_nan_policy": [
                    "self"
                ],
                "test_large_no_samples": [
                    "self"
                ]
            },
            "TestCombinePvalues": {
                "test_fisher": [
                    "self"
                ],
                "test_stouffer": [
                    "self"
                ],
                "test_stouffer2": [
                    "self"
                ],
                "test_weighted_stouffer": [
                    "self"
                ],
                "test_weighted_stouffer2": [
                    "self"
                ],
                "test_pearson": [
                    "self"
                ],
                "test_tippett": [
                    "self"
                ],
                "test_mudholkar_george": [
                    "self"
                ],
                "test_mudholkar_george_equal_fisher_minus_pearson": [
                    "self"
                ]
            },
            "TestCdfDistanceValidation": {
                "test_distinct_value_and_weight_lengths": [
                    "self"
                ],
                "test_zero_weight": [
                    "self"
                ],
                "test_negative_weights": [
                    "self"
                ],
                "test_empty_distribution": [
                    "self"
                ],
                "test_inf_weight": [
                    "self"
                ]
            },
            "TestWassersteinDistance": {
                "test_simple": [
                    "self"
                ],
                "test_same_distribution": [
                    "self"
                ],
                "test_shift": [
                    "self"
                ],
                "test_combine_weights": [
                    "self"
                ],
                "test_collapse": [
                    "self"
                ],
                "test_zero_weight": [
                    "self"
                ],
                "test_inf_values": [
                    "self"
                ]
            },
            "TestEnergyDistance": {
                "test_simple": [
                    "self"
                ],
                "test_same_distribution": [
                    "self"
                ],
                "test_shift": [
                    "self"
                ],
                "test_combine_weights": [
                    "self"
                ],
                "test_zero_weight": [
                    "self"
                ],
                "test_inf_values": [
                    "self"
                ]
            },
            "TestBrunnerMunzel": {
                "test_brunnermunzel_one_sided": [
                    "self"
                ],
                "test_brunnermunzel_two_sided": [
                    "self"
                ],
                "test_brunnermunzel_default": [
                    "self"
                ],
                "test_brunnermunzel_alternative_error": [
                    "self"
                ],
                "test_brunnermunzel_distribution_norm": [
                    "self"
                ],
                "test_brunnermunzel_distribution_error": [
                    "self"
                ],
                "test_brunnermunzel_empty_imput": [
                    "self"
                ],
                "test_brunnermunzel_nan_input_propagate": [
                    "self"
                ],
                "test_brunnermunzel_nan_input_raise": [
                    "self"
                ],
                "test_brunnermunzel_nan_input_omit": [
                    "self"
                ]
            },
            "TestRatioUniforms": {
                "test_rv_generation": [
                    "self"
                ],
                "test_shape": [
                    "self"
                ],
                "test_random_state": [
                    "self"
                ],
                "test_exceptions": [
                    "self"
                ]
            },
            "TestMGCErrorWarnings": {
                "test_error_notndarray": [
                    "self"
                ],
                "test_error_shape": [
                    "self"
                ],
                "test_error_lowsamples": [
                    "self"
                ],
                "test_error_nans": [
                    "self"
                ],
                "test_error_wrongdisttype": [
                    "self"
                ],
                "test_error_reps": [
                    "self",
                    "reps"
                ],
                "test_warns_reps": [
                    "self"
                ],
                "test_error_infty": [
                    "self"
                ]
            },
            "TestMGCStat": {
                "_simulations": [
                    "self",
                    "samps",
                    "dims",
                    "sim_type"
                ],
                "test_oned": [
                    "self",
                    "sim_type",
                    "obs_stat",
                    "obs_pvalue"
                ],
                "test_fived": [
                    "self",
                    "sim_type",
                    "obs_stat",
                    "obs_pvalue"
                ],
                "test_twosamp": [
                    "self"
                ],
                "test_workers": [
                    "self"
                ],
                "test_random_state": [
                    "self"
                ],
                "test_dist_perm": [
                    "self"
                ]
            }
        },
        "scipy.stats.tests.test_hypotests": {
            "TestEppsSingleton": {
                "test_statistic_1": [
                    "self"
                ],
                "test_statistic_2": [
                    "self"
                ],
                "test_epps_singleton_array_like": [
                    "self"
                ],
                "test_epps_singleton_size": [
                    "self"
                ],
                "test_epps_singleton_nonfinite": [
                    "self"
                ],
                "test_epps_singleton_1d_input": [
                    "self"
                ],
                "test_names": [
                    "self"
                ]
            },
            "TestCvm": {
                "test_cdf_4": [
                    "self"
                ],
                "test_cdf_10": [
                    "self"
                ],
                "test_cdf_1000": [
                    "self"
                ],
                "test_cdf_inf": [
                    "self"
                ],
                "test_cdf_support": [
                    "self"
                ],
                "test_cdf_large_n": [
                    "self"
                ],
                "test_large_x": [
                    "self"
                ],
                "test_low_p": [
                    "self"
                ],
                "test_invalid_input": [
                    "self"
                ],
                "test_values_R": [
                    "self"
                ],
                "test_callable_cdf": [
                    "self"
                ]
            }
        },
        "scipy.stats.tests.test_mstats_basic": {
            "check_equal_gmean": [
                "array_like",
                "desired",
                "axis",
                "dtype",
                "rtol"
            ],
            "check_equal_hmean": [
                "array_like",
                "desired",
                "axis",
                "dtype",
                "rtol"
            ],
            "test_kendall_p_exact_large": [],
            "test_regress_simple": [],
            "test_theilslopes": [],
            "test_siegelslopes": [],
            "test_plotting_positions": [],
            "TestMquantiles": {
                "test_mquantiles_limit_keyword": [
                    "self"
                ]
            },
            "TestGeoMean": {
                "test_1d": [
                    "self"
                ],
                "test_1d_ma": [
                    "self"
                ],
                "test_1d_ma_value": [
                    "self"
                ],
                "test_1d_ma0": [
                    "self"
                ],
                "test_1d_ma_inf": [
                    "self"
                ],
                "test_1d_float96": [
                    "self"
                ],
                "test_2d_ma": [
                    "self"
                ]
            },
            "TestHarMean": {
                "test_1d": [
                    "self"
                ],
                "test_1d_float96": [
                    "self"
                ],
                "test_2d": [
                    "self"
                ]
            },
            "TestRanking": {
                "test_ranking": [
                    "self"
                ]
            },
            "TestCorr": {
                "test_pearsonr": [
                    "self"
                ],
                "test_pearsonr_misaligned_mask": [
                    "self"
                ],
                "test_spearmanr": [
                    "self"
                ],
                "test_kendalltau": [
                    "self"
                ],
                "test_kendalltau_seasonal": [
                    "self"
                ]
            },
            "TestTrimming": {
                "test_trim": [
                    "self"
                ],
                "test_trim_old": [
                    "self"
                ],
                "test_trimr": [
                    "self"
                ],
                "test_trimmedmean": [
                    "self"
                ],
                "test_trimmed_stde": [
                    "self"
                ],
                "test_winsorization": [
                    "self"
                ],
                "test_winsorization_nan": [
                    "self"
                ]
            },
            "TestMoments": {
                "test_moment": [
                    "self"
                ],
                "test_variation": [
                    "self"
                ],
                "test_skewness": [
                    "self"
                ],
                "test_kurtosis": [
                    "self"
                ],
                "test_mode": [
                    "self"
                ],
                "test_mode_modifies_input": [
                    "self"
                ]
            },
            "TestPercentile": {
                "setup_method": [
                    "self"
                ],
                "test_percentile": [
                    "self"
                ],
                "test_2D": [
                    "self"
                ]
            },
            "TestVariability": {
                "test_sem": [
                    "self"
                ],
                "test_zmap": [
                    "self"
                ],
                "test_zscore": [
                    "self"
                ]
            },
            "TestMisc": {
                "test_obrientransform": [
                    "self"
                ],
                "test_ks_2samp": [
                    "self"
                ],
                "test_friedmanchisq": [
                    "self"
                ]
            },
            "TestNormalitytests": {
                "test_vs_nonmasked": [
                    "self"
                ],
                "test_axis_None": [
                    "self"
                ],
                "test_maskedarray_input": [
                    "self"
                ],
                "test_nd_input": [
                    "self"
                ],
                "test_normaltest_result_attributes": [
                    "self"
                ],
                "test_kurtosistest_result_attributes": [
                    "self"
                ],
                "regression_test_9033": [
                    "self"
                ]
            },
            "TestFOneway": {
                "test_result_attributes": [
                    "self"
                ]
            },
            "TestMannwhitneyu": {
                "test_result_attributes": [
                    "self"
                ]
            },
            "TestKruskal": {
                "test_result_attributes": [
                    "self"
                ]
            },
            "TestTtest_rel": {
                "test_vs_nonmasked": [
                    "self"
                ],
                "test_fully_masked": [
                    "self"
                ],
                "test_result_attributes": [
                    "self"
                ],
                "test_invalid_input_size": [
                    "self"
                ],
                "test_empty": [
                    "self"
                ],
                "test_zero_division": [
                    "self"
                ]
            },
            "TestTtest_ind": {
                "test_vs_nonmasked": [
                    "self"
                ],
                "test_fully_masked": [
                    "self"
                ],
                "test_result_attributes": [
                    "self"
                ],
                "test_empty": [
                    "self"
                ],
                "test_zero_division": [
                    "self"
                ]
            },
            "TestTtest_1samp": {
                "test_vs_nonmasked": [
                    "self"
                ],
                "test_fully_masked": [
                    "self"
                ],
                "test_result_attributes": [
                    "self"
                ],
                "test_empty": [
                    "self"
                ],
                "test_zero_division": [
                    "self"
                ]
            },
            "TestCompareWithStats": {
                "get_n": [
                    "self"
                ],
                "generate_xy_sample": [
                    "self",
                    "n"
                ],
                "generate_xy_sample2D": [
                    "self",
                    "n",
                    "nx"
                ],
                "test_linregress": [
                    "self"
                ],
                "test_pearsonr": [
                    "self"
                ],
                "test_spearmanr": [
                    "self"
                ],
                "test_spearmanr_backcompat_useties": [
                    "self"
                ],
                "test_gmean": [
                    "self"
                ],
                "test_hmean": [
                    "self"
                ],
                "test_skew": [
                    "self"
                ],
                "test_moment": [
                    "self"
                ],
                "test_zscore": [
                    "self"
                ],
                "test_kurtosis": [
                    "self"
                ],
                "test_sem": [
                    "self"
                ],
                "test_describe": [
                    "self"
                ],
                "test_describe_result_attributes": [
                    "self"
                ],
                "test_rankdata": [
                    "self"
                ],
                "test_tmean": [
                    "self"
                ],
                "test_tmax": [
                    "self"
                ],
                "test_tmin": [
                    "self"
                ],
                "test_zmap": [
                    "self"
                ],
                "test_variation": [
                    "self"
                ],
                "test_tvar": [
                    "self"
                ],
                "test_trimboth": [
                    "self"
                ],
                "test_tsem": [
                    "self"
                ],
                "test_skewtest": [
                    "self"
                ],
                "test_skewtest_result_attributes": [
                    "self"
                ],
                "test_skewtest_2D_notmasked": [
                    "self"
                ],
                "test_skewtest_2D_WithMask": [
                    "self"
                ],
                "test_normaltest": [
                    "self"
                ],
                "test_find_repeats": [
                    "self"
                ],
                "test_kendalltau": [
                    "self"
                ],
                "test_obrientransform": [
                    "self"
                ],
                "test_ks_1samp": [
                    "self"
                ],
                "test_kstest_1samp": [
                    "self"
                ],
                "test_ks_2samp": [
                    "self"
                ],
                "test_kstest_2samp": [
                    "self"
                ],
                "test_nametuples_agree": [
                    "self"
                ]
            },
            "TestBrunnerMunzel": {
                "test_brunnermunzel_one_sided": [
                    "self"
                ],
                "test_brunnermunzel_two_sided": [
                    "self"
                ],
                "test_brunnermunzel_default": [
                    "self"
                ],
                "test_brunnermunzel_alternative_error": [
                    "self"
                ],
                "test_brunnermunzel_distribution_norm": [
                    "self"
                ],
                "test_brunnermunzel_distribution_error": [
                    "self"
                ],
                "test_brunnermunzel_empty_imput": [
                    "self"
                ]
            }
        },
        "scipy.stats.tests.test_distributions": {
            "_assert_hasattr": [
                "a",
                "b",
                "msg"
            ],
            "test_api_regression": [],
            "check_vonmises_pdf_periodic": [
                "k",
                "L",
                "s",
                "x"
            ],
            "check_vonmises_cdf_periodic": [
                "k",
                "L",
                "s",
                "x"
            ],
            "test_vonmises_pdf_periodic": [],
            "test_vonmises_line_support": [],
            "test_vonmises_numerical": [],
            "test_vonmises_pdf": [
                "x",
                "kappa",
                "expected_pdf"
            ],
            "_assert_less_or_close_loglike": [
                "dist",
                "data",
                "func"
            ],
            "assert_fit_warnings": [
                "dist"
            ],
            "test_support": [
                "dist"
            ],
            "test_rvgeneric_std": [],
            "test_moments_t": [],
            "TestArgsreduce": [],
            "test_540_567": [],
            "test_regression_ticket_1316": [],
            "test_regression_ticket_1326": [],
            "test_regression_tukey_lambda": [],
            "test_regression_ticket_1421": [],
            "test_nan_arguments_gh_issue_1362": [],
            "test_frozen_fit_ticket_1536": [],
            "test_regression_ticket_1530": [],
            "test_gh_pr_4806": [],
            "test_tukeylambda_stats_ticket_1545": [],
            "test_poisson_logpmf_ticket_1436": [],
            "test_powerlaw_stats": [],
            "test_powerlaw_edge": [],
            "test_exponpow_edge": [],
            "test_gengamma_edge": [],
            "test_ksone_fit_freeze": [],
            "test_norm_logcdf": [],
            "test_levy_cdf_ppf": [],
            "test_levy_sf": [],
            "test_levy_l_sf": [],
            "test_levy_l_isf": [],
            "test_hypergeom_interval_1802": [],
            "test_distribution_too_many_args": [],
            "test_ncx2_tails_ticket_955": [],
            "test_ncx2_tails_pdf": [],
            "test_ncx2_zero_nc": [
                "method",
                "expected"
            ],
            "test_ncx2_zero_nc_rvs": [],
            "test_foldnorm_zero": [],
            "test_stats_shapes_argcheck": [],
            "test_docstrings": [],
            "test_infinite_input": [],
            "test_lomax_accuracy": [],
            "test_gompertz_accuracy": [],
            "test_truncexpon_accuracy": [],
            "test_rayleigh_accuracy": [],
            "test_genextreme_give_no_warnings": [],
            "test_genextreme_entropy": [],
            "test_genextreme_sf_isf": [],
            "test_burr12_ppf_small_arg": [],
            "test_crystalball_function": [],
            "test_crystalball_function_moments": [],
            "test_ncf_edge_case": [
                "df1",
                "df2",
                "x"
            ],
            "test_ncf_variance": [],
            "test_loguniform": [],
            "test_rvs_no_size_warning": [],
            "TestRandInt": {
                "setup_method": [
                    "self"
                ],
                "test_rvs": [
                    "self"
                ],
                "test_pdf": [
                    "self"
                ],
                "test_cdf": [
                    "self"
                ]
            },
            "TestBinom": {
                "setup_method": [
                    "self"
                ],
                "test_rvs": [
                    "self"
                ],
                "test_pmf": [
                    "self"
                ],
                "test_entropy": [
                    "self"
                ],
                "test_warns_p0": [
                    "self"
                ]
            },
            "TestBernoulli": {
                "setup_method": [
                    "self"
                ],
                "test_rvs": [
                    "self"
                ],
                "test_entropy": [
                    "self"
                ]
            },
            "TestBradford": {
                "test_cdf_ppf": [
                    "self"
                ]
            },
            "TestNBinom": {
                "setup_method": [
                    "self"
                ],
                "test_rvs": [
                    "self"
                ],
                "test_pmf": [
                    "self"
                ]
            },
            "TestGenInvGauss": {
                "setup_method": [
                    "self"
                ],
                "test_rvs_with_mode_shift": [
                    "self"
                ],
                "test_rvs_without_mode_shift": [
                    "self"
                ],
                "test_rvs_new_method": [
                    "self"
                ],
                "test_rvs_p_zero": [
                    "self"
                ],
                "test_rvs_negative_p": [
                    "self"
                ],
                "test_invgauss": [
                    "self"
                ],
                "test_pdf_R": [
                    "self"
                ],
                "test_pdf_zero": [
                    "self"
                ]
            },
            "TestNormInvGauss": {
                "setup_method": [
                    "self"
                ],
                "test_cdf_R": [
                    "self"
                ],
                "test_pdf_R": [
                    "self"
                ],
                "test_stats": [
                    "self"
                ],
                "test_ppf": [
                    "self"
                ]
            },
            "TestGeom": {
                "setup_method": [
                    "self"
                ],
                "test_rvs": [
                    "self"
                ],
                "test_pmf": [
                    "self"
                ],
                "test_logpmf": [
                    "self"
                ],
                "test_cdf_sf": [
                    "self"
                ],
                "test_logcdf_logsf": [
                    "self"
                ],
                "test_ppf": [
                    "self"
                ],
                "test_ppf_underflow": [
                    "self"
                ]
            },
            "TestPlanck": {
                "setup_method": [
                    "self"
                ],
                "test_sf": [
                    "self"
                ],
                "test_logsf": [
                    "self"
                ]
            },
            "TestGennorm": {
                "test_laplace": [
                    "self"
                ],
                "test_norm": [
                    "self"
                ]
            },
            "TestHalfgennorm": {
                "test_expon": [
                    "self"
                ],
                "test_halfnorm": [
                    "self"
                ],
                "test_gennorm": [
                    "self"
                ]
            },
            "TestLaplaceasymmetric": {
                "test_laplace": [
                    "self"
                ],
                "test_asymmetric_laplace_pdf": [
                    "self"
                ],
                "test_asymmetric_laplace_log_10_16": [
                    "self"
                ]
            },
            "TestTruncnorm": {
                "setup_method": [
                    "self"
                ],
                "test_ppf_ticket1131": [
                    "self"
                ],
                "test_isf_ticket1131": [
                    "self"
                ],
                "test_gh_2477_small_values": [
                    "self"
                ],
                "test_gh_2477_large_values": [
                    "self"
                ],
                "test_gh_9403_nontail_values": [
                    "self"
                ],
                "test_gh_9403_medium_tail_values": [
                    "self"
                ],
                "_test_moments_one_range": [
                    "self",
                    "a",
                    "b",
                    "expected",
                    "decimal_s"
                ],
                "test_moments": [
                    "self"
                ],
                "test_9902_moments": [
                    "self"
                ],
                "test_gh_1489_trac_962_rvs": [
                    "self"
                ],
                "test_gh_11299_rvs": [
                    "self"
                ],
                "test_rvs_Generator": [
                    "self"
                ]
            },
            "TestGenLogistic": {
                "test_logpdf": [
                    "self",
                    "x",
                    "expected"
                ]
            },
            "TestHypergeom": {
                "setup_method": [
                    "self"
                ],
                "test_rvs": [
                    "self"
                ],
                "test_precision": [
                    "self"
                ],
                "test_args": [
                    "self"
                ],
                "test_cdf_above_one": [
                    "self"
                ],
                "test_precision2": [
                    "self"
                ],
                "test_entropy": [
                    "self"
                ],
                "test_logsf": [
                    "self"
                ],
                "test_logcdf": [
                    "self"
                ]
            },
            "TestLoggamma": {
                "test_stats": [
                    "self"
                ]
            },
            "TestLogistic": {
                "test_cdf_ppf": [
                    "self"
                ],
                "test_sf_isf": [
                    "self"
                ],
                "test_extreme_values": [
                    "self"
                ],
                "test_logpdf_basic": [
                    "self"
                ],
                "test_logpdf_extreme_values": [
                    "self"
                ],
                "test_fit": [
                    "self",
                    "loc_rvs",
                    "scale_rvs"
                ],
                "test_fit_comp_optimizer": [
                    "self",
                    "loc_rvs",
                    "scale_rvs"
                ]
            },
            "TestLogser": {
                "setup_method": [
                    "self"
                ],
                "test_rvs": [
                    "self"
                ],
                "test_pmf_small_p": [
                    "self"
                ],
                "test_mean_small_p": [
                    "self"
                ]
            },
            "TestGumbel_r_l": {
                "setup_method": [
                    "self"
                ],
                "test_fit_comp_optimizer": [
                    "self",
                    "dist",
                    "loc_rvs",
                    "scale_rvs"
                ],
                "test_fit": [
                    "self",
                    "dist",
                    "sgn"
                ]
            },
            "TestPareto": {
                "test_stats": [
                    "self"
                ],
                "test_sf": [
                    "self"
                ],
                "test_fit": [
                    "self",
                    "rvs_shape",
                    "rvs_loc",
                    "rvs_scale"
                ],
                "test_fit_MLE_comp_optimzer": [
                    "self",
                    "rvs_shape",
                    "rvs_loc",
                    "rvs_scale"
                ],
                "test_fit_warnings": [
                    "self"
                ]
            },
            "TestGenpareto": {
                "test_ab": [
                    "self"
                ],
                "test_c0": [
                    "self"
                ],
                "test_cm1": [
                    "self"
                ],
                "test_x_inf": [
                    "self"
                ],
                "test_c_continuity": [
                    "self"
                ],
                "test_c_continuity_ppf": [
                    "self"
                ],
                "test_c_continuity_isf": [
                    "self"
                ],
                "test_cdf_ppf_roundtrip": [
                    "self"
                ],
                "test_logsf": [
                    "self"
                ],
                "test_stats": [
                    "self",
                    "c",
                    "expected_stats"
                ],
                "test_var": [
                    "self"
                ]
            },
            "TestPearson3": {
                "setup_method": [
                    "self"
                ],
                "test_rvs": [
                    "self"
                ],
                "test_pdf": [
                    "self"
                ],
                "test_cdf": [
                    "self"
                ],
                "test_negative_cdf_bug_11186": [
                    "self"
                ],
                "test_return_array_bug_11746": [
                    "self"
                ]
            },
            "TestKappa4": {
                "test_cdf_genpareto": [
                    "self"
                ],
                "test_cdf_genextreme": [
                    "self"
                ],
                "test_cdf_expon": [
                    "self"
                ],
                "test_cdf_gumbel_r": [
                    "self"
                ],
                "test_cdf_logistic": [
                    "self"
                ],
                "test_cdf_uniform": [
                    "self"
                ],
                "test_integers_ctor": [
                    "self"
                ]
            },
            "TestPoisson": {
                "setup_method": [
                    "self"
                ],
                "test_pmf_basic": [
                    "self"
                ],
                "test_mu0": [
                    "self"
                ],
                "test_rvs": [
                    "self"
                ],
                "test_stats": [
                    "self"
                ]
            },
            "TestKSTwo": {
                "setup_method": [
                    "self"
                ],
                "test_cdf": [
                    "self"
                ],
                "test_sf": [
                    "self"
                ],
                "test_cdf_sqrtn": [
                    "self"
                ],
                "test_cdf_sf": [
                    "self"
                ],
                "test_cdf_sf_sqrtn": [
                    "self"
                ],
                "test_ppf_of_cdf": [
                    "self"
                ],
                "test_isf_of_sf": [
                    "self"
                ],
                "test_ppf_of_cdf_sqrtn": [
                    "self"
                ],
                "test_isf_of_sf_sqrtn": [
                    "self"
                ],
                "test_ppf": [
                    "self"
                ],
                "test_simard_lecuyer_table1": [
                    "self"
                ]
            },
            "TestZipf": {
                "setup_method": [
                    "self"
                ],
                "test_rvs": [
                    "self"
                ],
                "test_moments": [
                    "self"
                ]
            },
            "TestDLaplace": {
                "setup_method": [
                    "self"
                ],
                "test_rvs": [
                    "self"
                ],
                "test_stats": [
                    "self"
                ],
                "test_stats2": [
                    "self"
                ]
            },
            "TestInvgauss": {
                "setup_method": [
                    "self"
                ],
                "test_fit": [
                    "self",
                    "rvs_mu",
                    "rvs_loc",
                    "rvs_scale"
                ],
                "test_fit_MLE_comp_optimzer": [
                    "self",
                    "rvs_mu",
                    "rvs_loc",
                    "rvs_scale"
                ],
                "test_fit_raise_errors": [
                    "self"
                ]
            },
            "TestLaplace": {
                "test_fit": [
                    "self",
                    "rvs_loc",
                    "rvs_scale"
                ],
                "test_fit_MLE_comp_optimzer": [
                    "self",
                    "rvs_loc",
                    "rvs_scale"
                ],
                "test_fit_simple_non_random_data": [
                    "self"
                ]
            },
            "TestInvGamma": {
                "test_invgamma_inf_gh_1866": [
                    "self"
                ],
                "test_cdf_ppf": [
                    "self"
                ],
                "test_sf_isf": [
                    "self"
                ]
            },
            "TestF": {
                "test_endpoints": [
                    "self"
                ],
                "test_f_moments": [
                    "self"
                ],
                "test_moments_warnings": [
                    "self"
                ],
                "test_stats_broadcast": [
                    "self"
                ]
            },
            "TestRvDiscrete": {
                "setup_method": [
                    "self"
                ],
                "test_rvs": [
                    "self"
                ],
                "test_entropy": [
                    "self"
                ],
                "test_pmf": [
                    "self"
                ],
                "test_cdf": [
                    "self"
                ],
                "test_ppf": [
                    "self"
                ],
                "test_cdf_ppf_next": [
                    "self"
                ],
                "test_multidimension": [
                    "self"
                ],
                "test_bad_input": [
                    "self"
                ],
                "test_shape_rv_sample": [
                    "self"
                ],
                "test_expect1": [
                    "self"
                ],
                "test_expect2": [
                    "self"
                ]
            },
            "TestSkewNorm": {
                "setup_method": [
                    "self"
                ],
                "test_normal": [
                    "self"
                ],
                "test_rvs": [
                    "self"
                ],
                "test_moments": [
                    "self"
                ],
                "test_cdf_large_x": [
                    "self"
                ],
                "test_cdf_sf_small_values": [
                    "self"
                ]
            },
            "TestExpon": {
                "test_zero": [
                    "self"
                ],
                "test_tail": [
                    "self"
                ],
                "test_nan_raises_error": [
                    "self"
                ],
                "test_inf_raises_error": [
                    "self"
                ]
            },
            "TestNorm": {
                "test_nan_raises_error": [
                    "self"
                ],
                "test_inf_raises_error": [
                    "self"
                ],
                "test_bad_keyword_arg": [
                    "self"
                ]
            },
            "TestUniform": {
                "test_nan_raises_error": [
                    "self"
                ],
                "test_inf_raises_error": [
                    "self"
                ]
            },
            "TestExponNorm": {
                "test_moments": [
                    "self"
                ],
                "test_nan_raises_error": [
                    "self"
                ],
                "test_inf_raises_error": [
                    "self"
                ],
                "test_extremes_x": [
                    "self"
                ],
                "test_std_pdf": [
                    "self",
                    "x",
                    "K",
                    "expected"
                ],
                "test_cdf_small_K": [
                    "self",
                    "x",
                    "K",
                    "scale",
                    "expected"
                ],
                "test_sf_small_K": [
                    "self",
                    "x",
                    "K",
                    "scale",
                    "expected"
                ]
            },
            "TestGenExpon": {
                "test_pdf_unity_area": [
                    "self"
                ],
                "test_cdf_bounds": [
                    "self"
                ]
            },
            "TestExponpow": {
                "test_tail": [
                    "self"
                ]
            },
            "TestSkellam": {
                "test_pmf": [
                    "self"
                ],
                "test_cdf": [
                    "self"
                ]
            },
            "TestLognorm": {
                "test_pdf": [
                    "self"
                ],
                "test_logcdf": [
                    "self"
                ]
            },
            "TestBeta": {
                "test_logpdf": [
                    "self"
                ],
                "test_logpdf_ticket_1866": [
                    "self"
                ],
                "test_fit_bad_keyword_args": [
                    "self"
                ],
                "test_fit_duplicated_fixed_parameter": [
                    "self"
                ]
            },
            "TestBetaPrime": {
                "test_logpdf": [
                    "self"
                ],
                "test_cdf": [
                    "self"
                ]
            },
            "TestGamma": {
                "test_pdf": [
                    "self"
                ],
                "test_logpdf": [
                    "self"
                ],
                "test_fit_bad_keyword_args": [
                    "self"
                ]
            },
            "TestChi2": {
                "test_precision": [
                    "self"
                ],
                "test_ppf": [
                    "self"
                ]
            },
            "TestGumbelL": {
                "test_cdf_ppf": [
                    "self"
                ],
                "test_logcdf_logsf": [
                    "self"
                ],
                "test_sf_isf": [
                    "self"
                ]
            },
            "TestGumbelR": {
                "test_sf": [
                    "self"
                ],
                "test_isf": [
                    "self"
                ]
            },
            "TestLevyStable": {
                "test_fit": [
                    "self"
                ],
                "test_pdf_nolan_samples": [
                    "self"
                ],
                "test_cdf_nolan_samples": [
                    "self"
                ],
                "test_pdf_alpha_equals_one_beta_non_zero": [
                    "self"
                ],
                "test_stats": [
                    "self"
                ]
            },
            "TestArrayArgument": {
                "setup_method": [
                    "self"
                ],
                "test_noexception": [
                    "self"
                ]
            },
            "TestDocstring": {
                "test_docstrings": [
                    "self"
                ],
                "test_no_name_arg": [
                    "self"
                ]
            },
            "TestEntropy": {
                "test_entropy_positive": [
                    "self"
                ],
                "test_entropy_base": [
                    "self"
                ],
                "test_entropy_zero": [
                    "self"
                ],
                "test_entropy_2d": [
                    "self"
                ],
                "test_entropy_2d_zero": [
                    "self"
                ],
                "test_entropy_base_2d_nondefault_axis": [
                    "self"
                ],
                "test_entropy_2d_nondefault_axis": [
                    "self"
                ],
                "test_entropy_raises_value_error": [
                    "self"
                ],
                "test_base_entropy_with_axis_0_is_equal_to_default": [
                    "self"
                ],
                "test_entropy_with_axis_0_is_equal_to_default": [
                    "self"
                ],
                "test_base_entropy_transposed": [
                    "self"
                ],
                "test_entropy_transposed": [
                    "self"
                ]
            },
            "TestFitMethod": {
                "setup_method": [
                    "self"
                ],
                "test_fit_w_non_finite_data_values": [
                    "self",
                    "dist",
                    "args"
                ],
                "test_fix_fit_2args_lognorm": [
                    "self"
                ],
                "test_fix_fit_norm": [
                    "self"
                ],
                "test_fix_fit_gamma": [
                    "self"
                ],
                "test_fix_fit_beta": [
                    "self"
                ],
                "test_expon_fit": [
                    "self"
                ],
                "test_lognorm_fit": [
                    "self"
                ],
                "test_uniform_fit": [
                    "self"
                ],
                "test_fshapes": [
                    "self"
                ],
                "test_extra_params": [
                    "self"
                ]
            },
            "TestFrozen": {
                "setup_method": [
                    "self"
                ],
                "test_norm": [
                    "self"
                ],
                "test_gamma": [
                    "self"
                ],
                "test_regression_ticket_1293": [
                    "self"
                ],
                "test_ab": [
                    "self"
                ],
                "test_rv_frozen_in_namespace": [
                    "self"
                ],
                "test_random_state": [
                    "self"
                ],
                "test_pickling": [
                    "self"
                ],
                "test_expect": [
                    "self"
                ]
            },
            "TestExpect": {
                "test_norm": [
                    "self"
                ],
                "test_beta": [
                    "self"
                ],
                "test_hypergeom": [
                    "self"
                ],
                "test_poisson": [
                    "self"
                ],
                "test_genhalflogistic": [
                    "self"
                ],
                "test_rice_overflow": [
                    "self"
                ],
                "test_logser": [
                    "self"
                ],
                "test_skellam": [
                    "self"
                ],
                "test_randint": [
                    "self"
                ],
                "test_zipf": [
                    "self"
                ],
                "test_discrete_kwds": [
                    "self"
                ],
                "test_moment": [
                    "self"
                ]
            },
            "TestNct": {
                "test_nc_parameter": [
                    "self"
                ],
                "test_broadcasting": [
                    "self"
                ],
                "test_variance_gh_issue_2401": [
                    "self"
                ],
                "test_nct_inf_moments": [
                    "self"
                ],
                "test_nct_stats_large_df_values": [
                    "self"
                ]
            },
            "TestRice": {
                "test_rice_zero_b": [
                    "self"
                ],
                "test_rice_rvs": [
                    "self"
                ]
            },
            "TestErlang": {
                "setup_method": [
                    "self"
                ],
                "test_erlang_runtimewarning": [
                    "self"
                ],
                "test_gh_pr_10949_argcheck": [
                    "self"
                ]
            },
            "TestRayleigh": {
                "setup_method": [
                    "self"
                ],
                "test_logpdf": [
                    "self"
                ],
                "test_logsf": [
                    "self"
                ],
                "test_fit": [
                    "self",
                    "rvs_loc",
                    "rvs_scale"
                ],
                "test_fit_comparison_super_method": [
                    "self",
                    "rvs_loc",
                    "rvs_scale"
                ],
                "test_fit_warnings": [
                    "self"
                ]
            },
            "TestExponWeib": {
                "test_pdf_logpdf": [
                    "self"
                ],
                "test_a_is_1": [
                    "self"
                ],
                "test_a_is_1_c_is_1": [
                    "self"
                ]
            },
            "TestWeibull": {
                "test_logpdf": [
                    "self"
                ],
                "test_with_maxima_distrib": [
                    "self"
                ]
            },
            "TestRdist": {
                "test_rdist_cdf_gh1285": [
                    "self"
                ],
                "test_rdist_beta": [
                    "self"
                ]
            },
            "TestTrapezoid": {
                "test_reduces_to_triang": [
                    "self"
                ],
                "test_reduces_to_uniform": [
                    "self"
                ],
                "test_cases": [
                    "self"
                ],
                "test_moments_and_entropy": [
                    "self"
                ],
                "test_trapezoid_vect": [
                    "self"
                ],
                "test_trapz": [
                    "self"
                ]
            },
            "TestTriang": {
                "test_edge_cases": [
                    "self"
                ]
            },
            "TestMielke": {
                "test_moments": [
                    "self"
                ],
                "test_burr_equivalence": [
                    "self"
                ]
            },
            "TestBurr": {
                "test_endpoints_7491": [
                    "self"
                ],
                "test_burr_stats_9544": [
                    "self"
                ],
                "test_burr_nan_mean_var_9544": [
                    "self"
                ]
            },
            "_distr_gen": {
                "_pdf": [
                    "self",
                    "x",
                    "a"
                ]
            },
            "_distr2_gen": {
                "_cdf": [
                    "self",
                    "x",
                    "a"
                ]
            },
            "_distr3_gen": {
                "_pdf": [
                    "self",
                    "x",
                    "a",
                    "b"
                ],
                "_cdf": [
                    "self",
                    "x",
                    "a"
                ]
            },
            "_distr6_gen": {
                "_pdf": [
                    "self",
                    "x",
                    "a",
                    "b"
                ],
                "_cdf": [
                    "self",
                    "x",
                    "a",
                    "b"
                ]
            },
            "TestSubclassingExplicitShapes": {
                "test_correct_shapes": [
                    "self"
                ],
                "test_wrong_shapes_1": [
                    "self"
                ],
                "test_wrong_shapes_2": [
                    "self"
                ],
                "test_shapes_string": [
                    "self"
                ],
                "test_shapes_identifiers_1": [
                    "self"
                ],
                "test_shapes_identifiers_2": [
                    "self"
                ],
                "test_shapes_identifiers_3": [
                    "self"
                ],
                "test_shapes_identifiers_nodefaults": [
                    "self"
                ],
                "test_shapes_args": [
                    "self"
                ],
                "test_shapes_kwargs": [
                    "self"
                ],
                "test_shapes_keywords": [
                    "self"
                ],
                "test_shapes_signature": [
                    "self"
                ],
                "test_shapes_signature_inconsistent": [
                    "self"
                ],
                "test_star_args": [
                    "self"
                ],
                "test_star_args_2": [
                    "self"
                ],
                "test_extra_kwarg": [
                    "self"
                ],
                "shapes_empty_string": [
                    "self"
                ]
            },
            "TestSubclassingNoShapes": {
                "test_only__pdf": [
                    "self"
                ],
                "test_only__cdf": [
                    "self"
                ],
                "test_signature_inspection": [
                    "self"
                ],
                "test_signature_inspection_2args": [
                    "self"
                ],
                "test_signature_inspection_2args_incorrect_shapes": [
                    "self"
                ],
                "test_defaults_raise": [
                    "self"
                ],
                "test_starargs_raise": [
                    "self"
                ],
                "test_kwargs_raise": [
                    "self"
                ]
            },
            "TestHistogram": {
                "setup_method": [
                    "self"
                ],
                "test_pdf": [
                    "self"
                ],
                "test_cdf_ppf": [
                    "self"
                ],
                "test_rvs": [
                    "self"
                ],
                "test_munp": [
                    "self"
                ],
                "test_entropy": [
                    "self"
                ]
            },
            "TestArgus": {
                "test_argus_rvs_large_chi": [
                    "self"
                ],
                "test_argus_rvs_ratio_uniforms": [
                    "self"
                ],
                "test_mean": [
                    "self",
                    "chi",
                    "expected_mean"
                ],
                "test_var": [
                    "self",
                    "chi",
                    "expected_var",
                    "rtol"
                ]
            },
            "TestNakagami": {
                "test_logpdf": [
                    "self"
                ],
                "test_sf_isf": [
                    "self"
                ]
            }
        },
        "scipy.stats.tests.test_contingency": {
            "test_margins": [],
            "test_expected_freq": [],
            "test_chi2_contingency_trivial": [],
            "test_chi2_contingency_R": [],
            "test_chi2_contingency_g": [],
            "test_chi2_contingency_bad_args": []
        },
        "scipy.stats.tests": {},
        "scipy.stats.tests.test_multivariate": {
            "test_multivariate_normal_dimensions_mismatch": [],
            "check_pickling": [
                "distfn",
                "args"
            ],
            "test_random_state_property": [],
            "TestMultivariateNormal": {
                "test_input_shape": [
                    "self"
                ],
                "test_scalar_values": [
                    "self"
                ],
                "test_logpdf": [
                    "self"
                ],
                "test_logpdf_default_values": [
                    "self"
                ],
                "test_logcdf": [
                    "self"
                ],
                "test_logcdf_default_values": [
                    "self"
                ],
                "test_rank": [
                    "self"
                ],
                "test_degenerate_distributions": [
                    "self"
                ],
                "test_large_pseudo_determinant": [
                    "self"
                ],
                "test_broadcasting": [
                    "self"
                ],
                "test_normal_1D": [
                    "self"
                ],
                "test_marginalization": [
                    "self"
                ],
                "test_frozen": [
                    "self"
                ],
                "test_pseudodet_pinv": [
                    "self"
                ],
                "test_exception_nonsquare_cov": [
                    "self"
                ],
                "test_exception_nonfinite_cov": [
                    "self"
                ],
                "test_exception_non_psd_cov": [
                    "self"
                ],
                "test_exception_singular_cov": [
                    "self"
                ],
                "test_R_values": [
                    "self"
                ],
                "test_multivariate_normal_rvs_zero_covariance": [
                    "self"
                ],
                "test_rvs_shape": [
                    "self"
                ],
                "test_large_sample": [
                    "self"
                ],
                "test_entropy": [
                    "self"
                ],
                "test_lnB": [
                    "self"
                ]
            },
            "TestMatrixNormal": {
                "test_bad_input": [
                    "self"
                ],
                "test_default_inputs": [
                    "self"
                ],
                "test_covariance_expansion": [
                    "self"
                ],
                "test_frozen_matrix_normal": [
                    "self"
                ],
                "test_matches_multivariate": [
                    "self"
                ],
                "test_array_input": [
                    "self"
                ],
                "test_moments": [
                    "self"
                ]
            },
            "TestDirichlet": {
                "test_frozen_dirichlet": [
                    "self"
                ],
                "test_numpy_rvs_shape_compatibility": [
                    "self"
                ],
                "test_alpha_with_zeros": [
                    "self"
                ],
                "test_alpha_with_negative_entries": [
                    "self"
                ],
                "test_data_with_zeros": [
                    "self"
                ],
                "test_data_with_zeros_and_small_alpha": [
                    "self"
                ],
                "test_data_with_negative_entries": [
                    "self"
                ],
                "test_data_with_too_large_entries": [
                    "self"
                ],
                "test_data_too_deep_c": [
                    "self"
                ],
                "test_alpha_too_deep": [
                    "self"
                ],
                "test_alpha_correct_depth": [
                    "self"
                ],
                "test_non_simplex_data": [
                    "self"
                ],
                "test_data_vector_too_short": [
                    "self"
                ],
                "test_data_vector_too_long": [
                    "self"
                ],
                "test_mean_and_var": [
                    "self"
                ],
                "test_scalar_values": [
                    "self"
                ],
                "test_K_and_K_minus_1_calls_equal": [
                    "self"
                ],
                "test_multiple_entry_calls": [
                    "self"
                ],
                "test_2D_dirichlet_is_beta": [
                    "self"
                ]
            },
            "TestWishart": {
                "test_scale_dimensions": [
                    "self"
                ],
                "test_quantile_dimensions": [
                    "self"
                ],
                "test_frozen": [
                    "self"
                ],
                "test_1D_is_chisquared": [
                    "self"
                ],
                "test_is_scaled_chisquared": [
                    "self"
                ]
            },
            "TestMultinomial": {
                "test_logpmf": [
                    "self"
                ],
                "test_reduces_binomial": [
                    "self"
                ],
                "test_R": [
                    "self"
                ],
                "test_rvs_np": [
                    "self"
                ],
                "test_pmf": [
                    "self"
                ],
                "test_pmf_broadcasting": [
                    "self"
                ],
                "test_cov": [
                    "self"
                ],
                "test_cov_broadcasting": [
                    "self"
                ],
                "test_entropy": [
                    "self"
                ],
                "test_entropy_broadcasting": [
                    "self"
                ],
                "test_mean": [
                    "self"
                ],
                "test_mean_broadcasting": [
                    "self"
                ],
                "test_frozen": [
                    "self"
                ]
            },
            "TestInvwishart": {
                "test_frozen": [
                    "self"
                ],
                "test_1D_is_invgamma": [
                    "self"
                ],
                "test_wishart_invwishart_2D_rvs": [
                    "self"
                ],
                "test_cho_inv_batch": [
                    "self"
                ],
                "test_logpdf_4x4": [
                    "self"
                ]
            },
            "TestSpecialOrthoGroup": {
                "test_reproducibility": [
                    "self"
                ],
                "test_invalid_dim": [
                    "self"
                ],
                "test_frozen_matrix": [
                    "self"
                ],
                "test_det_and_ortho": [
                    "self"
                ],
                "test_haar": [
                    "self"
                ]
            },
            "TestOrthoGroup": {
                "test_reproducibility": [
                    "self"
                ],
                "test_invalid_dim": [
                    "self"
                ],
                "test_det_and_ortho": [
                    "self"
                ],
                "test_haar": [
                    "self"
                ],
                "test_pairwise_distances": [
                    "self"
                ]
            },
            "TestRandomCorrelation": {
                "test_reproducibility": [
                    "self"
                ],
                "test_invalid_eigs": [
                    "self"
                ],
                "test_definition": [
                    "self"
                ],
                "test_to_corr": [
                    "self"
                ]
            },
            "TestUnitaryGroup": {
                "test_reproducibility": [
                    "self"
                ],
                "test_invalid_dim": [
                    "self"
                ],
                "test_unitarity": [
                    "self"
                ],
                "test_haar": [
                    "self"
                ]
            },
            "TestMultivariateT": {
                "test_pdf_correctness": [
                    "self",
                    "x",
                    "loc",
                    "shape",
                    "df",
                    "ans"
                ],
                "test_logpdf_correct": [
                    "self",
                    "x",
                    "loc",
                    "shape",
                    "df",
                    "ans"
                ],
                "test_mvt_with_df_one_is_cauchy": [
                    "self"
                ],
                "test_mvt_with_high_df_is_approx_normal": [
                    "self"
                ],
                "test_mvt_with_inf_df_calls_normal": [
                    "self",
                    "mock"
                ],
                "test_shape_correctness": [
                    "self"
                ],
                "test_default_arguments": [
                    "self"
                ],
                "test_default_args": [
                    "self",
                    "loc",
                    "shape",
                    "df",
                    "loc_ans",
                    "shape_ans",
                    "df_ans"
                ],
                "test_scalar_list_and_ndarray_arguments": [
                    "self",
                    "loc",
                    "shape",
                    "df",
                    "loc_ans",
                    "shape_ans",
                    "df_ans"
                ],
                "test_argument_error_handling": [
                    "self"
                ],
                "test_reproducibility": [
                    "self"
                ],
                "test_allow_singular": [
                    "self"
                ]
            },
            "TestMultivariateHypergeom": {
                "test_logpmf": [
                    "self",
                    "x",
                    "m",
                    "n",
                    "expected"
                ],
                "test_reduces_hypergeom": [
                    "self"
                ],
                "test_rvs": [
                    "self"
                ],
                "test_rvs_broadcasting": [
                    "self"
                ],
                "test_pmf": [
                    "self",
                    "x",
                    "m",
                    "n",
                    "expected"
                ],
                "test_pmf_broadcasting": [
                    "self",
                    "x",
                    "m",
                    "n",
                    "expected"
                ],
                "test_cov": [
                    "self"
                ],
                "test_cov_broadcasting": [
                    "self"
                ],
                "test_var": [
                    "self"
                ],
                "test_var_broadcasting": [
                    "self"
                ],
                "test_mean": [
                    "self"
                ],
                "test_mean_broadcasting": [
                    "self"
                ],
                "test_mean_edge_cases": [
                    "self"
                ],
                "test_var_edge_cases": [
                    "self"
                ],
                "test_cov_edge_cases": [
                    "self"
                ],
                "test_frozen": [
                    "self"
                ],
                "test_invalid_params": [
                    "self"
                ]
            }
        },
        "scipy.stats.tests.test_tukeylambda_stats": {
            "test_tukeylambda_stats_known_exact": [],
            "test_tukeylambda_stats_mpmath": [],
            "test_tukeylambda_stats_invalid": []
        },
        "scipy.stats.tests.test_kdeoth": {
            "test_kde_1d": [],
            "test_kde_1d_weighted": [],
            "test_kde_2d": [],
            "test_kde_2d_weighted": [],
            "test_kde_bandwidth_method": [],
            "test_kde_bandwidth_method_weighted": [],
            "test_gaussian_kde_subclassing": [],
            "test_gaussian_kde_covariance_caching": [],
            "test_gaussian_kde_monkeypatch": [],
            "test_kde_integer_input": [],
            "test_kde_output_dtype": [
                "point_type",
                "dataset_type",
                "weights_type",
                "bw_type"
            ],
            "test_pdf_logpdf": [],
            "test_pdf_logpdf_weighted": [],
            "test_logpdf_overflow": [],
            "test_weights_intact": [],
            "test_weights_integer": [],
            "test_seed": [],
            "_kde_subclass1": {
                "__init__": [
                    "self",
                    "dataset"
                ]
            },
            "_kde_subclass2": {
                "__init__": [
                    "self",
                    "dataset"
                ]
            },
            "_kde_subclass3": {
                "__init__": [
                    "self",
                    "dataset",
                    "covariance"
                ],
                "_compute_covariance": [
                    "self"
                ]
            },
            "_kde_subclass4": {
                "covariance_factor": [
                    "self"
                ]
            }
        },
        "scipy.stats.tests.test_discrete_basic": {
            "cases_test_discrete_basic": [],
            "test_discrete_basic": [
                "distname",
                "arg",
                "first_case"
            ],
            "test_moments": [
                "distname",
                "arg"
            ],
            "test_rvs_broadcast": [
                "dist",
                "shape_args"
            ],
            "test_ppf_with_loc": [
                "dist",
                "args"
            ],
            "check_cdf_ppf": [
                "distfn",
                "arg",
                "supp",
                "msg"
            ],
            "check_pmf_cdf": [
                "distfn",
                "arg",
                "distname"
            ],
            "check_moment_frozen": [
                "distfn",
                "arg",
                "m",
                "k"
            ],
            "check_oth": [
                "distfn",
                "arg",
                "supp",
                "msg"
            ],
            "check_discrete_chisquare": [
                "distfn",
                "arg",
                "rvs",
                "alpha",
                "msg"
            ],
            "check_scale_docstring": [
                "distfn"
            ],
            "test_methods_with_lists": [
                "method",
                "distname",
                "args"
            ]
        },
        "scipy.stats.tests.test_binned_statistic": {
            "TestBinnedStatistic": {
                "setup_class": [
                    "cls"
                ],
                "test_1d_count": [
                    "self"
                ],
                "test_gh5927": [
                    "self"
                ],
                "test_big_number_std": [
                    "self"
                ],
                "test_non_finite_inputs_and_int_bins": [
                    "self"
                ],
                "test_1d_result_attributes": [
                    "self"
                ],
                "test_1d_sum": [
                    "self"
                ],
                "test_1d_mean": [
                    "self"
                ],
                "test_1d_std": [
                    "self"
                ],
                "test_1d_min": [
                    "self"
                ],
                "test_1d_max": [
                    "self"
                ],
                "test_1d_median": [
                    "self"
                ],
                "test_1d_bincode": [
                    "self"
                ],
                "test_1d_range_keyword": [
                    "self"
                ],
                "test_1d_multi_values": [
                    "self"
                ],
                "test_2d_count": [
                    "self"
                ],
                "test_2d_result_attributes": [
                    "self"
                ],
                "test_2d_sum": [
                    "self"
                ],
                "test_2d_mean": [
                    "self"
                ],
                "test_2d_mean_unicode": [
                    "self"
                ],
                "test_2d_std": [
                    "self"
                ],
                "test_2d_min": [
                    "self"
                ],
                "test_2d_max": [
                    "self"
                ],
                "test_2d_median": [
                    "self"
                ],
                "test_2d_bincode": [
                    "self"
                ],
                "test_2d_multi_values": [
                    "self"
                ],
                "test_2d_binnumbers_unraveled": [
                    "self"
                ],
                "test_dd_count": [
                    "self"
                ],
                "test_dd_result_attributes": [
                    "self"
                ],
                "test_dd_sum": [
                    "self"
                ],
                "test_dd_mean": [
                    "self"
                ],
                "test_dd_std": [
                    "self"
                ],
                "test_dd_min": [
                    "self"
                ],
                "test_dd_max": [
                    "self"
                ],
                "test_dd_median": [
                    "self"
                ],
                "test_dd_bincode": [
                    "self"
                ],
                "test_dd_multi_values": [
                    "self"
                ],
                "test_dd_binnumbers_unraveled": [
                    "self"
                ],
                "test_dd_binned_statistic_result": [
                    "self"
                ],
                "test_dd_zero_dedges": [
                    "self"
                ],
                "test_dd_range_errors": [
                    "self"
                ]
            }
        },
        "scipy.stats.tests.test_mstats_extras": {
            "test_compare_medians_ms": [],
            "test_hdmedian": [],
            "test_rsh": [],
            "test_mjci": [],
            "test_trimmed_mean_ci": [],
            "test_idealfourths": [],
            "TestQuantiles": {
                "test_hdquantiles": [
                    "self"
                ],
                "test_hdquantiles_sd": [
                    "self"
                ],
                "test_mquantiles_cimj": [
                    "self"
                ]
            }
        },
        "scipy.stats.tests.test_rank": {
            "test_cases": [],
            "TestTieCorrect": {
                "test_empty": [
                    "self"
                ],
                "test_one": [
                    "self"
                ],
                "test_no_correction": [
                    "self"
                ],
                "test_basic": [
                    "self"
                ],
                "test_overflow": [
                    "self"
                ]
            },
            "TestRankData": {
                "test_empty": [
                    "self"
                ],
                "test_one": [
                    "self"
                ],
                "test_basic": [
                    "self"
                ],
                "test_rankdata_object_string": [
                    "self"
                ],
                "test_large_int": [
                    "self"
                ],
                "test_big_tie": [
                    "self"
                ],
                "test_axis": [
                    "self"
                ],
                "test_size_0_axis": [
                    "self",
                    "axis",
                    "method",
                    "dtype"
                ]
            }
        },
        "scipy.stats.tests.common_tests": {
            "check_named_results": [
                "res",
                "attributes",
                "ma"
            ],
            "check_normalization": [
                "distfn",
                "args",
                "distname"
            ],
            "check_moment": [
                "distfn",
                "arg",
                "m",
                "v",
                "msg"
            ],
            "check_mean_expect": [
                "distfn",
                "arg",
                "m",
                "msg"
            ],
            "check_var_expect": [
                "distfn",
                "arg",
                "m",
                "v",
                "msg"
            ],
            "check_skew_expect": [
                "distfn",
                "arg",
                "m",
                "v",
                "s",
                "msg"
            ],
            "check_kurt_expect": [
                "distfn",
                "arg",
                "m",
                "v",
                "k",
                "msg"
            ],
            "check_entropy": [
                "distfn",
                "arg",
                "msg"
            ],
            "check_private_entropy": [
                "distfn",
                "args",
                "superclass"
            ],
            "check_entropy_vect_scale": [
                "distfn",
                "arg"
            ],
            "check_edge_support": [
                "distfn",
                "args"
            ],
            "check_named_args": [
                "distfn",
                "x",
                "shape_args",
                "defaults",
                "meths"
            ],
            "check_random_state_property": [
                "distfn",
                "args"
            ],
            "check_meth_dtype": [
                "distfn",
                "arg",
                "meths"
            ],
            "check_ppf_dtype": [
                "distfn",
                "arg"
            ],
            "check_cmplx_deriv": [
                "distfn",
                "arg"
            ],
            "check_pickling": [
                "distfn",
                "args"
            ],
            "check_freezing": [
                "distfn",
                "args"
            ],
            "check_rvs_broadcast": [
                "distfunc",
                "distname",
                "allargs",
                "shape",
                "shape_only",
                "otype"
            ]
        },
        "scipy.stats.tests.test_discrete_distns": {
            "test_hypergeom_logpmf": [],
            "test_nhypergeom_pmf": [],
            "test_nhypergeom_pmfcdf": [],
            "test_nhypergeom_r0": [],
            "test_boltzmann_upper_bound": [],
            "test_betabinom_a_and_b_unity": [],
            "test_betabinom_bernoulli": []
        },
        "scipy.stats.tests.test_morestats": {
            "TestBayes_mvs": {
                "test_basic": [
                    "self"
                ],
                "test_empty_input": [
                    "self"
                ],
                "test_result_attributes": [
                    "self"
                ]
            },
            "TestMvsdist": {
                "test_basic": [
                    "self"
                ],
                "test_empty_input": [
                    "self"
                ],
                "test_bad_arg": [
                    "self"
                ],
                "test_warns": [
                    "self"
                ]
            },
            "TestShapiro": {
                "test_basic": [
                    "self"
                ],
                "test_2d": [
                    "self"
                ],
                "test_empty_input": [
                    "self"
                ],
                "test_not_enough_values": [
                    "self"
                ],
                "test_bad_arg": [
                    "self"
                ],
                "test_nan_input": [
                    "self"
                ]
            },
            "TestAnderson": {
                "test_normal": [
                    "self"
                ],
                "test_expon": [
                    "self"
                ],
                "test_gumbel": [
                    "self"
                ],
                "test_bad_arg": [
                    "self"
                ],
                "test_result_attributes": [
                    "self"
                ],
                "test_gumbel_l": [
                    "self"
                ],
                "test_gumbel_r": [
                    "self"
                ]
            },
            "TestAndersonKSamp": {
                "test_example1a": [
                    "self"
                ],
                "test_example1b": [
                    "self"
                ],
                "test_example2a": [
                    "self"
                ],
                "test_example2b": [
                    "self"
                ],
                "test_R_kSamples": [
                    "self"
                ],
                "test_not_enough_samples": [
                    "self"
                ],
                "test_no_distinct_observations": [
                    "self"
                ],
                "test_empty_sample": [
                    "self"
                ],
                "test_result_attributes": [
                    "self"
                ]
            },
            "TestAnsari": {
                "test_small": [
                    "self"
                ],
                "test_approx": [
                    "self"
                ],
                "test_exact": [
                    "self"
                ],
                "test_bad_arg": [
                    "self"
                ],
                "test_result_attributes": [
                    "self"
                ]
            },
            "TestBartlett": {
                "test_data": [
                    "self"
                ],
                "test_bad_arg": [
                    "self"
                ],
                "test_result_attributes": [
                    "self"
                ],
                "test_empty_arg": [
                    "self"
                ],
                "test_1d_input": [
                    "self"
                ]
            },
            "TestLevene": {
                "test_data": [
                    "self"
                ],
                "test_trimmed1": [
                    "self"
                ],
                "test_trimmed2": [
                    "self"
                ],
                "test_equal_mean_median": [
                    "self"
                ],
                "test_bad_keyword": [
                    "self"
                ],
                "test_bad_center_value": [
                    "self"
                ],
                "test_too_few_args": [
                    "self"
                ],
                "test_result_attributes": [
                    "self"
                ],
                "test_1d_input": [
                    "self"
                ]
            },
            "TestBinomP": {
                "test_data": [
                    "self"
                ],
                "test_bad_len_x": [
                    "self"
                ],
                "test_bad_n": [
                    "self"
                ],
                "test_bad_p": [
                    "self"
                ],
                "test_alternatives": [
                    "self"
                ]
            },
            "TestFligner": {
                "test_data": [
                    "self"
                ],
                "test_trimmed1": [
                    "self"
                ],
                "test_trimmed2": [
                    "self"
                ],
                "test_bad_keyword": [
                    "self"
                ],
                "test_bad_center_value": [
                    "self"
                ],
                "test_bad_num_args": [
                    "self"
                ],
                "test_empty_arg": [
                    "self"
                ]
            },
            "TestMood": {
                "test_mood": [
                    "self"
                ],
                "test_mood_order_of_args": [
                    "self"
                ],
                "test_mood_with_axis_none": [
                    "self"
                ],
                "test_mood_2d": [
                    "self"
                ],
                "test_mood_3d": [
                    "self"
                ],
                "test_mood_bad_arg": [
                    "self"
                ]
            },
            "TestProbplot": {
                "test_basic": [
                    "self"
                ],
                "test_sparams_keyword": [
                    "self"
                ],
                "test_dist_keyword": [
                    "self"
                ],
                "test_plot_kwarg": [
                    "self"
                ],
                "test_probplot_bad_args": [
                    "self"
                ],
                "test_empty": [
                    "self"
                ],
                "test_array_of_size_one": [
                    "self"
                ]
            },
            "TestWilcoxon": {
                "test_wilcoxon_bad_arg": [
                    "self"
                ],
                "test_zero_diff": [
                    "self"
                ],
                "test_pratt": [
                    "self"
                ],
                "test_wilcoxon_arg_type": [
                    "self"
                ],
                "test_accuracy_wilcoxon": [
                    "self"
                ],
                "test_wilcoxon_result_attributes": [
                    "self"
                ],
                "test_wilcoxon_tie": [
                    "self"
                ],
                "test_onesided": [
                    "self"
                ],
                "test_exact_basic": [
                    "self"
                ],
                "test_exact_pval": [
                    "self"
                ],
                "test_exact_p_1": [
                    "self",
                    "x"
                ],
                "test_auto": [
                    "self"
                ]
            },
            "TestKstat": {
                "test_moments_normal_distribution": [
                    "self"
                ],
                "test_empty_input": [
                    "self"
                ],
                "test_nan_input": [
                    "self"
                ],
                "test_kstat_bad_arg": [
                    "self"
                ]
            },
            "TestKstatVar": {
                "test_empty_input": [
                    "self"
                ],
                "test_nan_input": [
                    "self"
                ],
                "test_bad_arg": [
                    "self"
                ]
            },
            "TestPpccPlot": {
                "setup_method": [
                    "self"
                ],
                "test_basic": [
                    "self"
                ],
                "test_dist": [
                    "self"
                ],
                "test_plot_kwarg": [
                    "self"
                ],
                "test_invalid_inputs": [
                    "self"
                ],
                "test_empty": [
                    "self"
                ]
            },
            "TestPpccMax": {
                "test_ppcc_max_bad_arg": [
                    "self"
                ],
                "test_ppcc_max_basic": [
                    "self"
                ],
                "test_dist": [
                    "self"
                ],
                "test_brack": [
                    "self"
                ]
            },
            "TestBoxcox_llf": {
                "test_basic": [
                    "self"
                ],
                "test_array_like": [
                    "self"
                ],
                "test_2d_input": [
                    "self"
                ],
                "test_empty": [
                    "self"
                ],
                "test_gh_6873": [
                    "self"
                ]
            },
            "TestBoxcox": {
                "test_fixed_lmbda": [
                    "self"
                ],
                "test_lmbda_None": [
                    "self"
                ],
                "test_alpha": [
                    "self"
                ],
                "test_boxcox_bad_arg": [
                    "self"
                ],
                "test_empty": [
                    "self"
                ],
                "test_gh_6873": [
                    "self"
                ]
            },
            "TestBoxcoxNormmax": {
                "setup_method": [
                    "self"
                ],
                "test_pearsonr": [
                    "self"
                ],
                "test_mle": [
                    "self"
                ],
                "test_all": [
                    "self"
                ]
            },
            "TestBoxcoxNormplot": {
                "setup_method": [
                    "self"
                ],
                "test_basic": [
                    "self"
                ],
                "test_plot_kwarg": [
                    "self"
                ],
                "test_invalid_inputs": [
                    "self"
                ],
                "test_empty": [
                    "self"
                ]
            },
            "TestYeojohnson_llf": {
                "test_array_like": [
                    "self"
                ],
                "test_2d_input": [
                    "self"
                ],
                "test_empty": [
                    "self"
                ]
            },
            "TestYeojohnson": {
                "test_fixed_lmbda": [
                    "self"
                ],
                "test_lmbda_None": [
                    "self",
                    "lmbda"
                ],
                "test_empty": [
                    "self"
                ],
                "test_array_like": [
                    "self"
                ],
                "test_input_dtype_complex": [
                    "self",
                    "dtype"
                ],
                "test_input_dtype_integer": [
                    "self",
                    "dtype"
                ]
            },
            "TestYeojohnsonNormmax": {
                "setup_method": [
                    "self"
                ],
                "test_mle": [
                    "self"
                ],
                "test_darwin_example": [
                    "self"
                ]
            },
            "TestCircFuncs": {
                "test_circfuncs": [
                    "self",
                    "test_func",
                    "expected"
                ],
                "test_circfuncs_small": [
                    "self"
                ],
                "test_circfuncs_close": [
                    "self",
                    "test_func",
                    "numpy_func"
                ],
                "test_circmean_axis": [
                    "self"
                ],
                "test_circvar_axis": [
                    "self"
                ],
                "test_circstd_axis": [
                    "self"
                ],
                "test_circfuncs_array_like": [
                    "self",
                    "test_func",
                    "expected"
                ],
                "test_empty": [
                    "self",
                    "test_func"
                ],
                "test_nan_propagate": [
                    "self",
                    "test_func"
                ],
                "test_nan_propagate_array": [
                    "self",
                    "test_func",
                    "expected"
                ],
                "test_nan_omit_array": [
                    "self",
                    "test_func",
                    "expected"
                ],
                "test_nan_omit": [
                    "self",
                    "test_func",
                    "expected"
                ],
                "test_nan_omit_all": [
                    "self",
                    "test_func"
                ],
                "test_nan_omit_all_axis": [
                    "self",
                    "test_func"
                ],
                "test_nan_raise": [
                    "self",
                    "test_func",
                    "x"
                ],
                "test_bad_nan_policy": [
                    "self",
                    "test_func",
                    "x"
                ],
                "test_circmean_scalar": [
                    "self"
                ],
                "test_circmean_range": [
                    "self"
                ],
                "test_circfuncs_unit8": [
                    "self"
                ]
            },
            "TestMedianTest": {
                "test_bad_n_samples": [
                    "self"
                ],
                "test_empty_sample": [
                    "self"
                ],
                "test_empty_when_ties_ignored": [
                    "self"
                ],
                "test_empty_contingency_row": [
                    "self"
                ],
                "test_bad_ties": [
                    "self"
                ],
                "test_bad_nan_policy": [
                    "self"
                ],
                "test_bad_keyword": [
                    "self"
                ],
                "test_simple": [
                    "self"
                ],
                "test_ties_options": [
                    "self"
                ],
                "test_nan_policy_options": [
                    "self"
                ],
                "test_basic": [
                    "self"
                ]
            }
        },
        "scipy.stats.tests.test_fit": {
            "cases_test_cont_fit": [],
            "test_cont_fit": [
                "distname",
                "arg"
            ],
            "_check_loc_scale_mle_fit": [
                "name",
                "data",
                "desired",
                "atol"
            ],
            "test_non_default_loc_scale_mle_fit": [],
            "test_expon_fit": []
        },
        "scipy.fftpack.basic": {
            "fft": [
                "x",
                "n",
                "axis",
                "overwrite_x"
            ],
            "ifft": [
                "x",
                "n",
                "axis",
                "overwrite_x"
            ],
            "rfft": [
                "x",
                "n",
                "axis",
                "overwrite_x"
            ],
            "irfft": [
                "x",
                "n",
                "axis",
                "overwrite_x"
            ],
            "fftn": [
                "x",
                "shape",
                "axes",
                "overwrite_x"
            ],
            "ifftn": [
                "x",
                "shape",
                "axes",
                "overwrite_x"
            ],
            "fft2": [
                "x",
                "shape",
                "axes",
                "overwrite_x"
            ],
            "ifft2": [
                "x",
                "shape",
                "axes",
                "overwrite_x"
            ]
        },
        "scipy.fftpack.setup": {
            "configuration": [
                "parent_package",
                "top_path"
            ]
        },
        "scipy.fftpack.realtransforms": {
            "dctn": [
                "x",
                "type",
                "shape",
                "axes",
                "norm",
                "overwrite_x"
            ],
            "idctn": [
                "x",
                "type",
                "shape",
                "axes",
                "norm",
                "overwrite_x"
            ],
            "dstn": [
                "x",
                "type",
                "shape",
                "axes",
                "norm",
                "overwrite_x"
            ],
            "idstn": [
                "x",
                "type",
                "shape",
                "axes",
                "norm",
                "overwrite_x"
            ],
            "dct": [
                "x",
                "type",
                "n",
                "axis",
                "norm",
                "overwrite_x"
            ],
            "idct": [
                "x",
                "type",
                "n",
                "axis",
                "norm",
                "overwrite_x"
            ],
            "dst": [
                "x",
                "type",
                "n",
                "axis",
                "norm",
                "overwrite_x"
            ],
            "idst": [
                "x",
                "type",
                "n",
                "axis",
                "norm",
                "overwrite_x"
            ]
        },
        "scipy.fftpack.pseudo_diffs": {
            "diff": [
                "x",
                "order",
                "period",
                "_cache"
            ],
            "tilbert": [
                "x",
                "h",
                "period",
                "_cache"
            ],
            "itilbert": [
                "x",
                "h",
                "period",
                "_cache"
            ],
            "hilbert": [
                "x",
                "_cache"
            ],
            "ihilbert": [
                "x"
            ],
            "cs_diff": [
                "x",
                "a",
                "b",
                "period",
                "_cache"
            ],
            "sc_diff": [
                "x",
                "a",
                "b",
                "period",
                "_cache"
            ],
            "ss_diff": [
                "x",
                "a",
                "b",
                "period",
                "_cache"
            ],
            "cc_diff": [
                "x",
                "a",
                "b",
                "period",
                "_cache"
            ],
            "shift": [
                "x",
                "a",
                "period",
                "_cache"
            ]
        },
        "scipy.fftpack": {},
        "scipy.fftpack.helper": {
            "rfftfreq": [
                "n",
                "d"
            ],
            "next_fast_len": [
                "target"
            ],
            "_good_shape": [
                "x",
                "shape",
                "axes"
            ]
        },
        "scipy.fftpack.tests.test_real_transforms": {
            "fftw_dct_ref": [
                "type",
                "size",
                "dt"
            ],
            "fftw_dst_ref": [
                "type",
                "size",
                "dt"
            ],
            "dct_2d_ref": [
                "x"
            ],
            "idct_2d_ref": [
                "x"
            ],
            "dst_2d_ref": [
                "x"
            ],
            "idst_2d_ref": [
                "x"
            ],
            "naive_dct1": [
                "x",
                "norm"
            ],
            "naive_dst1": [
                "x",
                "norm"
            ],
            "naive_dct4": [
                "x",
                "norm"
            ],
            "naive_dst4": [
                "x",
                "norm"
            ],
            "TestComplex": {
                "test_dct_complex64": [
                    "self"
                ],
                "test_dct_complex": [
                    "self"
                ],
                "test_idct_complex": [
                    "self"
                ],
                "test_dst_complex64": [
                    "self"
                ],
                "test_dst_complex": [
                    "self"
                ],
                "test_idst_complex": [
                    "self"
                ]
            },
            "_TestDCTBase": {
                "setup_method": [
                    "self"
                ],
                "test_definition": [
                    "self"
                ],
                "test_axis": [
                    "self"
                ]
            },
            "_TestDCTIBase": {
                "test_definition_ortho": [
                    "self"
                ]
            },
            "_TestDCTIIBase": {
                "test_definition_matlab": [
                    "self"
                ]
            },
            "_TestDCTIIIBase": {
                "test_definition_ortho": [
                    "self"
                ]
            },
            "_TestDCTIVBase": {
                "test_definition_ortho": [
                    "self"
                ]
            },
            "TestDCTIDouble": {
                "setup_method": [
                    "self"
                ]
            },
            "TestDCTIFloat": {
                "setup_method": [
                    "self"
                ]
            },
            "TestDCTIInt": {
                "setup_method": [
                    "self"
                ]
            },
            "TestDCTIIDouble": {
                "setup_method": [
                    "self"
                ]
            },
            "TestDCTIIFloat": {
                "setup_method": [
                    "self"
                ]
            },
            "TestDCTIIInt": {
                "setup_method": [
                    "self"
                ]
            },
            "TestDCTIIIDouble": {
                "setup_method": [
                    "self"
                ]
            },
            "TestDCTIIIFloat": {
                "setup_method": [
                    "self"
                ]
            },
            "TestDCTIIIInt": {
                "setup_method": [
                    "self"
                ]
            },
            "TestDCTIVDouble": {
                "setup_method": [
                    "self"
                ]
            },
            "TestDCTIVFloat": {
                "setup_method": [
                    "self"
                ]
            },
            "TestDCTIVInt": {
                "setup_method": [
                    "self"
                ]
            },
            "_TestIDCTBase": {
                "setup_method": [
                    "self"
                ],
                "test_definition": [
                    "self"
                ]
            },
            "TestIDCTIDouble": {
                "setup_method": [
                    "self"
                ]
            },
            "TestIDCTIFloat": {
                "setup_method": [
                    "self"
                ]
            },
            "TestIDCTIInt": {
                "setup_method": [
                    "self"
                ]
            },
            "TestIDCTIIDouble": {
                "setup_method": [
                    "self"
                ]
            },
            "TestIDCTIIFloat": {
                "setup_method": [
                    "self"
                ]
            },
            "TestIDCTIIInt": {
                "setup_method": [
                    "self"
                ]
            },
            "TestIDCTIIIDouble": {
                "setup_method": [
                    "self"
                ]
            },
            "TestIDCTIIIFloat": {
                "setup_method": [
                    "self"
                ]
            },
            "TestIDCTIIIInt": {
                "setup_method": [
                    "self"
                ]
            },
            "TestIDCTIVDouble": {
                "setup_method": [
                    "self"
                ]
            },
            "TestIDCTIVFloat": {
                "setup_method": [
                    "self"
                ]
            },
            "TestIDCTIVInt": {
                "setup_method": [
                    "self"
                ]
            },
            "_TestDSTBase": {
                "setup_method": [
                    "self"
                ],
                "test_definition": [
                    "self"
                ]
            },
            "_TestDSTIBase": {
                "test_definition_ortho": [
                    "self"
                ]
            },
            "_TestDSTIVBase": {
                "test_definition_ortho": [
                    "self"
                ]
            },
            "TestDSTIDouble": {
                "setup_method": [
                    "self"
                ]
            },
            "TestDSTIFloat": {
                "setup_method": [
                    "self"
                ]
            },
            "TestDSTIInt": {
                "setup_method": [
                    "self"
                ]
            },
            "TestDSTIIDouble": {
                "setup_method": [
                    "self"
                ]
            },
            "TestDSTIIFloat": {
                "setup_method": [
                    "self"
                ]
            },
            "TestDSTIIInt": {
                "setup_method": [
                    "self"
                ]
            },
            "TestDSTIIIDouble": {
                "setup_method": [
                    "self"
                ]
            },
            "TestDSTIIIFloat": {
                "setup_method": [
                    "self"
                ]
            },
            "TestDSTIIIInt": {
                "setup_method": [
                    "self"
                ]
            },
            "TestDSTIVDouble": {
                "setup_method": [
                    "self"
                ]
            },
            "TestDSTIVFloat": {
                "setup_method": [
                    "self"
                ]
            },
            "TestDSTIVInt": {
                "setup_method": [
                    "self"
                ]
            },
            "_TestIDSTBase": {
                "setup_method": [
                    "self"
                ],
                "test_definition": [
                    "self"
                ]
            },
            "TestIDSTIDouble": {
                "setup_method": [
                    "self"
                ]
            },
            "TestIDSTIFloat": {
                "setup_method": [
                    "self"
                ]
            },
            "TestIDSTIInt": {
                "setup_method": [
                    "self"
                ]
            },
            "TestIDSTIIDouble": {
                "setup_method": [
                    "self"
                ]
            },
            "TestIDSTIIFloat": {
                "setup_method": [
                    "self"
                ]
            },
            "TestIDSTIIInt": {
                "setup_method": [
                    "self"
                ]
            },
            "TestIDSTIIIDouble": {
                "setup_method": [
                    "self"
                ]
            },
            "TestIDSTIIIFloat": {
                "setup_method": [
                    "self"
                ]
            },
            "TestIDSTIIIInt": {
                "setup_method": [
                    "self"
                ]
            },
            "TestIDSTIVDouble": {
                "setup_method": [
                    "self"
                ]
            },
            "TestIDSTIVFloat": {
                "setup_method": [
                    "self"
                ]
            },
            "TestIDSTIVnt": {
                "setup_method": [
                    "self"
                ]
            },
            "TestOverwrite": {
                "_check": [
                    "self",
                    "x",
                    "routine",
                    "type",
                    "fftsize",
                    "axis",
                    "norm",
                    "overwrite_x"
                ],
                "_check_1d": [
                    "self",
                    "routine",
                    "dtype",
                    "shape",
                    "axis"
                ],
                "test_dct": [
                    "self"
                ],
                "test_idct": [
                    "self"
                ],
                "test_dst": [
                    "self"
                ],
                "test_idst": [
                    "self"
                ]
            },
            "Test_DCTN_IDCTN": {
                "test_axes_round_trip": [
                    "self",
                    "fforward",
                    "finverse",
                    "axes",
                    "dct_type",
                    "norm"
                ],
                "test_dctn_vs_2d_reference": [
                    "self",
                    "fforward",
                    "fforward_ref",
                    "dct_type",
                    "norm"
                ],
                "test_idctn_vs_2d_reference": [
                    "self",
                    "finverse",
                    "finverse_ref",
                    "dct_type",
                    "norm"
                ],
                "test_axes_and_shape": [
                    "self",
                    "fforward",
                    "finverse"
                ],
                "test_shape": [
                    "self",
                    "fforward"
                ],
                "test_shape_is_none_with_axes": [
                    "self",
                    "fforward",
                    "finverse",
                    "axes"
                ]
            }
        },
        "scipy.fftpack.tests.test_basic": {
            "_assert_close_in_norm": [
                "x",
                "y",
                "rtol",
                "size",
                "rdt"
            ],
            "random": [
                "size"
            ],
            "get_mat": [
                "n"
            ],
            "direct_dft": [
                "x"
            ],
            "direct_idft": [
                "x"
            ],
            "direct_dftn": [
                "x"
            ],
            "direct_idftn": [
                "x"
            ],
            "direct_rdft": [
                "x"
            ],
            "direct_irdft": [
                "x"
            ],
            "test_shape_axes_ndarray": [
                "func"
            ],
            "_TestFFTBase": {
                "setup_method": [
                    "self"
                ],
                "test_definition": [
                    "self"
                ],
                "test_n_argument_real": [
                    "self"
                ],
                "_test_n_argument_complex": [
                    "self"
                ],
                "test_invalid_sizes": [
                    "self"
                ]
            },
            "TestDoubleFFT": {
                "setup_method": [
                    "self"
                ]
            },
            "TestSingleFFT": {
                "setup_method": [
                    "self"
                ],
                "test_notice": [
                    "self"
                ]
            },
            "TestFloat16FFT": {
                "test_1_argument_real": [
                    "self"
                ],
                "test_n_argument_real": [
                    "self"
                ]
            },
            "_TestIFFTBase": {
                "setup_method": [
                    "self"
                ],
                "test_definition": [
                    "self"
                ],
                "test_definition_real": [
                    "self"
                ],
                "test_random_complex": [
                    "self"
                ],
                "test_random_real": [
                    "self"
                ],
                "test_size_accuracy": [
                    "self"
                ],
                "test_invalid_sizes": [
                    "self"
                ]
            },
            "TestDoubleIFFT": {
                "setup_method": [
                    "self"
                ]
            },
            "TestSingleIFFT": {
                "setup_method": [
                    "self"
                ]
            },
            "_TestRFFTBase": {
                "setup_method": [
                    "self"
                ],
                "test_definition": [
                    "self"
                ],
                "test_invalid_sizes": [
                    "self"
                ],
                "test_non_ndarray_with_dtype": [
                    "self"
                ],
                "test_complex_input": [
                    "self"
                ]
            },
            "TestRFFTDouble": {
                "setup_method": [
                    "self"
                ]
            },
            "TestRFFTSingle": {
                "setup_method": [
                    "self"
                ]
            },
            "_TestIRFFTBase": {
                "setup_method": [
                    "self"
                ],
                "test_definition": [
                    "self"
                ],
                "test_random_real": [
                    "self"
                ],
                "test_size_accuracy": [
                    "self"
                ],
                "test_invalid_sizes": [
                    "self"
                ],
                "test_complex_input": [
                    "self"
                ]
            },
            "TestIRFFTDouble": {
                "setup_method": [
                    "self"
                ]
            },
            "TestIRFFTSingle": {
                "setup_method": [
                    "self"
                ]
            },
            "Testfft2": {
                "setup_method": [
                    "self"
                ],
                "test_regression_244": [
                    "self"
                ],
                "test_invalid_sizes": [
                    "self"
                ]
            },
            "TestFftnSingle": {
                "setup_method": [
                    "self"
                ],
                "test_definition": [
                    "self"
                ],
                "test_size_accuracy_small": [
                    "self",
                    "size"
                ],
                "test_size_accuracy_large": [
                    "self",
                    "size"
                ],
                "test_definition_float16": [
                    "self"
                ],
                "test_float16_input_small": [
                    "self",
                    "size"
                ],
                "test_float16_input_large": [
                    "self",
                    "size"
                ]
            },
            "TestFftn": {
                "setup_method": [
                    "self"
                ],
                "test_definition": [
                    "self"
                ],
                "test_axes_argument": [
                    "self"
                ],
                "test_shape_argument": [
                    "self"
                ],
                "test_shape_axes_argument": [
                    "self"
                ],
                "test_shape_axes_argument2": [
                    "self"
                ],
                "test_shape_argument_more": [
                    "self"
                ],
                "test_invalid_sizes": [
                    "self"
                ]
            },
            "TestIfftn": {
                "setup_method": [
                    "self"
                ],
                "test_definition": [
                    "self",
                    "dtype",
                    "cdtype",
                    "maxnlp"
                ],
                "test_random_complex": [
                    "self",
                    "maxnlp",
                    "size"
                ],
                "test_invalid_sizes": [
                    "self"
                ]
            },
            "FakeArray": {
                "__init__": [
                    "self",
                    "data"
                ]
            },
            "FakeArray2": {
                "__init__": [
                    "self",
                    "data"
                ],
                "__array__": [
                    "self"
                ]
            },
            "TestOverwrite": {
                "_check": [
                    "self",
                    "x",
                    "routine",
                    "fftsize",
                    "axis",
                    "overwrite_x"
                ],
                "_check_1d": [
                    "self",
                    "routine",
                    "dtype",
                    "shape",
                    "axis",
                    "overwritable_dtypes",
                    "fftsize",
                    "overwrite_x"
                ],
                "test_fft_ifft": [
                    "self",
                    "dtype",
                    "fftsize",
                    "overwrite_x",
                    "shape",
                    "axes"
                ],
                "test_rfft_irfft": [
                    "self",
                    "dtype",
                    "fftsize",
                    "overwrite_x",
                    "shape",
                    "axes"
                ],
                "_check_nd_one": [
                    "self",
                    "routine",
                    "dtype",
                    "shape",
                    "axes",
                    "overwritable_dtypes",
                    "overwrite_x"
                ],
                "test_fftn_ifftn": [
                    "self",
                    "dtype",
                    "overwrite_x",
                    "shape",
                    "axes"
                ]
            }
        },
        "scipy.fftpack.tests": {},
        "scipy.fftpack.tests.test_pseudo_diffs": {
            "direct_diff": [
                "x",
                "k",
                "period"
            ],
            "direct_tilbert": [
                "x",
                "h",
                "period"
            ],
            "direct_itilbert": [
                "x",
                "h",
                "period"
            ],
            "direct_hilbert": [
                "x"
            ],
            "direct_ihilbert": [
                "x"
            ],
            "direct_shift": [
                "x",
                "a",
                "period"
            ],
            "TestDiff": {
                "test_definition": [
                    "self"
                ],
                "test_period": [
                    "self"
                ],
                "test_sin": [
                    "self"
                ],
                "test_expr": [
                    "self"
                ],
                "test_expr_large": [
                    "self"
                ],
                "test_int": [
                    "self"
                ],
                "test_random_even": [
                    "self"
                ],
                "test_random_odd": [
                    "self"
                ],
                "test_zero_nyquist": [
                    "self"
                ]
            },
            "TestTilbert": {
                "test_definition": [
                    "self"
                ],
                "test_random_even": [
                    "self"
                ],
                "test_random_odd": [
                    "self"
                ]
            },
            "TestITilbert": {
                "test_definition": [
                    "self"
                ]
            },
            "TestHilbert": {
                "test_definition": [
                    "self"
                ],
                "test_tilbert_relation": [
                    "self"
                ],
                "test_random_odd": [
                    "self"
                ],
                "test_random_even": [
                    "self"
                ]
            },
            "TestIHilbert": {
                "test_definition": [
                    "self"
                ],
                "test_itilbert_relation": [
                    "self"
                ]
            },
            "TestShift": {
                "test_definition": [
                    "self"
                ]
            },
            "TestOverwrite": {
                "_check": [
                    "self",
                    "x",
                    "routine"
                ],
                "_check_1d": [
                    "self",
                    "routine",
                    "dtype",
                    "shape"
                ],
                "test_diff": [
                    "self"
                ],
                "test_tilbert": [
                    "self"
                ],
                "test_itilbert": [
                    "self"
                ],
                "test_hilbert": [
                    "self"
                ],
                "test_cs_diff": [
                    "self"
                ],
                "test_sc_diff": [
                    "self"
                ],
                "test_ss_diff": [
                    "self"
                ],
                "test_cc_diff": [
                    "self"
                ],
                "test_shift": [
                    "self"
                ]
            }
        },
        "scipy.fftpack.tests.gen_fftw_ref": {
            "gen_data": [
                "dt"
            ]
        },
        "scipy.fftpack.tests.gendata": {},
        "scipy.fftpack.tests.test_helper": {
            "TestFFTShift": {
                "test_definition": [
                    "self"
                ],
                "test_inverse": [
                    "self"
                ]
            },
            "TestFFTFreq": {
                "test_definition": [
                    "self"
                ]
            },
            "TestRFFTFreq": {
                "test_definition": [
                    "self"
                ]
            }
        },
        "scipy.fftpack.tests.test_import": {
            "TestFFTPackImport": {
                "test_fftpack_import": [
                    "self"
                ]
            }
        },
        "scipy.optimize.optimize": {
            "_check_unknown_options": [
                "unknown_options"
            ],
            "is_array_scalar": [
                "x"
            ],
            "vecnorm": [
                "x",
                "ord"
            ],
            "_prepare_scalar_function": [
                "fun",
                "x0",
                "jac",
                "args",
                "bounds",
                "epsilon",
                "finite_diff_rel_step",
                "hess"
            ],
            "_clip_x_for_func": [
                "func",
                "bounds"
            ],
            "_check_clip_x": [
                "x",
                "bounds"
            ],
            "rosen": [
                "x"
            ],
            "rosen_der": [
                "x"
            ],
            "rosen_hess": [
                "x"
            ],
            "rosen_hess_prod": [
                "x",
                "p"
            ],
            "wrap_function": [
                "function",
                "args"
            ],
            "fmin": [
                "func",
                "x0",
                "args",
                "xtol",
                "ftol",
                "maxiter",
                "maxfun",
                "full_output",
                "disp",
                "retall",
                "callback",
                "initial_simplex"
            ],
            "_minimize_neldermead": [
                "func",
                "x0",
                "args",
                "callback",
                "maxiter",
                "maxfev",
                "disp",
                "return_all",
                "initial_simplex",
                "xatol",
                "fatol",
                "adaptive"
            ],
            "approx_fprime": [
                "xk",
                "f",
                "epsilon"
            ],
            "check_grad": [
                "func",
                "grad",
                "x0"
            ],
            "approx_fhess_p": [
                "x0",
                "p",
                "fprime",
                "epsilon"
            ],
            "_line_search_wolfe12": [
                "f",
                "fprime",
                "xk",
                "pk",
                "gfk",
                "old_fval",
                "old_old_fval"
            ],
            "fmin_bfgs": [
                "f",
                "x0",
                "fprime",
                "args",
                "gtol",
                "norm",
                "epsilon",
                "maxiter",
                "full_output",
                "disp",
                "retall",
                "callback"
            ],
            "_minimize_bfgs": [
                "fun",
                "x0",
                "args",
                "jac",
                "callback",
                "gtol",
                "norm",
                "eps",
                "maxiter",
                "disp",
                "return_all",
                "finite_diff_rel_step"
            ],
            "fmin_cg": [
                "f",
                "x0",
                "fprime",
                "args",
                "gtol",
                "norm",
                "epsilon",
                "maxiter",
                "full_output",
                "disp",
                "retall",
                "callback"
            ],
            "_minimize_cg": [
                "fun",
                "x0",
                "args",
                "jac",
                "callback",
                "gtol",
                "norm",
                "eps",
                "maxiter",
                "disp",
                "return_all",
                "finite_diff_rel_step"
            ],
            "fmin_ncg": [
                "f",
                "x0",
                "fprime",
                "fhess_p",
                "fhess",
                "args",
                "avextol",
                "epsilon",
                "maxiter",
                "full_output",
                "disp",
                "retall",
                "callback"
            ],
            "_minimize_newtoncg": [
                "fun",
                "x0",
                "args",
                "jac",
                "hess",
                "hessp",
                "callback",
                "xtol",
                "eps",
                "maxiter",
                "disp",
                "return_all"
            ],
            "fminbound": [
                "func",
                "x1",
                "x2",
                "args",
                "xtol",
                "maxfun",
                "full_output",
                "disp"
            ],
            "_minimize_scalar_bounded": [
                "func",
                "bounds",
                "args",
                "xatol",
                "maxiter",
                "disp"
            ],
            "brent": [
                "func",
                "args",
                "brack",
                "tol",
                "full_output",
                "maxiter"
            ],
            "_minimize_scalar_brent": [
                "func",
                "brack",
                "args",
                "xtol",
                "maxiter"
            ],
            "golden": [
                "func",
                "args",
                "brack",
                "tol",
                "full_output",
                "maxiter"
            ],
            "_minimize_scalar_golden": [
                "func",
                "brack",
                "args",
                "xtol",
                "maxiter"
            ],
            "bracket": [
                "func",
                "xa",
                "xb",
                "args",
                "grow_limit",
                "maxiter"
            ],
            "_line_for_search": [
                "x0",
                "alpha",
                "lower_bound",
                "upper_bound"
            ],
            "_linesearch_powell": [
                "func",
                "p",
                "xi",
                "tol",
                "lower_bound",
                "upper_bound",
                "fval"
            ],
            "fmin_powell": [
                "func",
                "x0",
                "args",
                "xtol",
                "ftol",
                "maxiter",
                "maxfun",
                "full_output",
                "disp",
                "retall",
                "callback",
                "direc"
            ],
            "_minimize_powell": [
                "func",
                "x0",
                "args",
                "callback",
                "bounds",
                "xtol",
                "ftol",
                "maxiter",
                "maxfev",
                "disp",
                "direc",
                "return_all"
            ],
            "_endprint": [
                "x",
                "flag",
                "fval",
                "maxfun",
                "xtol",
                "disp"
            ],
            "brute": [
                "func",
                "ranges",
                "args",
                "Ns",
                "full_output",
                "finish",
                "disp",
                "workers"
            ],
            "show_options": [
                "solver",
                "method",
                "disp"
            ],
            "main": [],
            "MemoizeJac": {
                "__init__": [
                    "self",
                    "fun"
                ],
                "_compute_if_needed": [
                    "self",
                    "x"
                ],
                "__call__": [
                    "self",
                    "x"
                ],
                "derivative": [
                    "self",
                    "x"
                ]
            },
            "OptimizeResult": {
                "__getattr__": [
                    "self",
                    "name"
                ],
                "__repr__": [
                    "self"
                ],
                "__dir__": [
                    "self"
                ]
            },
            "OptimizeWarning": {},
            "_LineSearchError": {},
            "Brent": {
                "__init__": [
                    "self",
                    "func",
                    "args",
                    "tol",
                    "maxiter",
                    "full_output"
                ],
                "set_bracket": [
                    "self",
                    "brack"
                ],
                "get_bracket_info": [
                    "self"
                ],
                "optimize": [
                    "self"
                ],
                "get_result": [
                    "self",
                    "full_output"
                ]
            },
            "_Brute_Wrapper": {
                "__init__": [
                    "self",
                    "f",
                    "args"
                ],
                "__call__": [
                    "self",
                    "x"
                ]
            }
        },
        "scipy.optimize._constraints": {
            "_arr_to_scalar": [
                "x"
            ],
            "new_bounds_to_old": [
                "lb",
                "ub",
                "n"
            ],
            "old_bound_to_new": [
                "bounds"
            ],
            "strict_bounds": [
                "lb",
                "ub",
                "keep_feasible",
                "n_vars"
            ],
            "new_constraint_to_old": [
                "con",
                "x0"
            ],
            "old_constraint_to_new": [
                "ic",
                "con"
            ],
            "NonlinearConstraint": {
                "__init__": [
                    "self",
                    "fun",
                    "lb",
                    "ub",
                    "jac",
                    "hess",
                    "keep_feasible",
                    "finite_diff_rel_step",
                    "finite_diff_jac_sparsity"
                ]
            },
            "LinearConstraint": {
                "__init__": [
                    "self",
                    "A",
                    "lb",
                    "ub",
                    "keep_feasible"
                ]
            },
            "Bounds": {
                "__init__": [
                    "self",
                    "lb",
                    "ub",
                    "keep_feasible"
                ],
                "__repr__": [
                    "self"
                ]
            },
            "PreparedConstraint": {
                "__init__": [
                    "self",
                    "constraint",
                    "x0",
                    "sparse_jacobian",
                    "finite_diff_bounds"
                ],
                "violation": [
                    "self",
                    "x"
                ]
            }
        },
        "scipy.optimize._linprog_highs": {
            "_replace_inf": [
                "x"
            ],
            "_convert_to_highs_enum": [
                "option",
                "option_str",
                "choices"
            ],
            "_linprog_highs": [
                "lp",
                "solver",
                "time_limit",
                "presolve",
                "disp",
                "maxiter",
                "dual_feasibility_tolerance",
                "primal_feasibility_tolerance",
                "ipm_optimality_tolerance",
                "simplex_dual_edge_weight_strategy"
            ]
        },
        "scipy.optimize._differentiable_functions": {
            "ScalarFunction": {
                "__init__": [
                    "self",
                    "fun",
                    "x0",
                    "args",
                    "grad",
                    "hess",
                    "finite_diff_rel_step",
                    "finite_diff_bounds",
                    "epsilon"
                ],
                "_update_fun": [
                    "self"
                ],
                "_update_grad": [
                    "self"
                ],
                "_update_hess": [
                    "self"
                ],
                "fun": [
                    "self",
                    "x"
                ],
                "grad": [
                    "self",
                    "x"
                ],
                "hess": [
                    "self",
                    "x"
                ],
                "fun_and_grad": [
                    "self",
                    "x"
                ]
            },
            "VectorFunction": {
                "__init__": [
                    "self",
                    "fun",
                    "x0",
                    "jac",
                    "hess",
                    "finite_diff_rel_step",
                    "finite_diff_jac_sparsity",
                    "finite_diff_bounds",
                    "sparse_jacobian"
                ],
                "_update_v": [
                    "self",
                    "v"
                ],
                "_update_x": [
                    "self",
                    "x"
                ],
                "_update_fun": [
                    "self"
                ],
                "_update_jac": [
                    "self"
                ],
                "_update_hess": [
                    "self"
                ],
                "fun": [
                    "self",
                    "x"
                ],
                "jac": [
                    "self",
                    "x"
                ],
                "hess": [
                    "self",
                    "x",
                    "v"
                ]
            },
            "LinearVectorFunction": {
                "__init__": [
                    "self",
                    "A",
                    "x0",
                    "sparse_jacobian"
                ],
                "_update_x": [
                    "self",
                    "x"
                ],
                "fun": [
                    "self",
                    "x"
                ],
                "jac": [
                    "self",
                    "x"
                ],
                "hess": [
                    "self",
                    "x",
                    "v"
                ]
            },
            "IdentityVectorFunction": {
                "__init__": [
                    "self",
                    "x0",
                    "sparse_jacobian"
                ]
            }
        },
        "scipy.optimize._differentialevolution": {
            "differential_evolution": [
                "func",
                "bounds",
                "args",
                "strategy",
                "maxiter",
                "popsize",
                "tol",
                "mutation",
                "recombination",
                "seed",
                "callback",
                "disp",
                "polish",
                "init",
                "atol",
                "updating",
                "workers",
                "constraints"
            ],
            "DifferentialEvolutionSolver": {
                "__init__": [
                    "self",
                    "func",
                    "bounds",
                    "args",
                    "strategy",
                    "maxiter",
                    "popsize",
                    "tol",
                    "mutation",
                    "recombination",
                    "seed",
                    "maxfun",
                    "callback",
                    "disp",
                    "polish",
                    "init",
                    "atol",
                    "updating",
                    "workers",
                    "constraints"
                ],
                "init_population_lhs": [
                    "self"
                ],
                "init_population_random": [
                    "self"
                ],
                "init_population_array": [
                    "self",
                    "init"
                ],
                "x": [
                    "self"
                ],
                "convergence": [
                    "self"
                ],
                "converged": [
                    "self"
                ],
                "solve": [
                    "self"
                ],
                "_calculate_population_energies": [
                    "self",
                    "population"
                ],
                "_promote_lowest_energy": [
                    "self"
                ],
                "_constraint_violation_fn": [
                    "self",
                    "x"
                ],
                "_calculate_population_feasibilities": [
                    "self",
                    "population"
                ],
                "__iter__": [
                    "self"
                ],
                "__enter__": [
                    "self"
                ],
                "__exit__": [
                    "self"
                ],
                "_accept_trial": [
                    "self",
                    "energy_trial",
                    "feasible_trial",
                    "cv_trial",
                    "energy_orig",
                    "feasible_orig",
                    "cv_orig"
                ],
                "__next__": [
                    "self"
                ],
                "_scale_parameters": [
                    "self",
                    "trial"
                ],
                "_unscale_parameters": [
                    "self",
                    "parameters"
                ],
                "_ensure_constraint": [
                    "self",
                    "trial"
                ],
                "_mutate": [
                    "self",
                    "candidate"
                ],
                "_best1": [
                    "self",
                    "samples"
                ],
                "_rand1": [
                    "self",
                    "samples"
                ],
                "_randtobest1": [
                    "self",
                    "samples"
                ],
                "_currenttobest1": [
                    "self",
                    "candidate",
                    "samples"
                ],
                "_best2": [
                    "self",
                    "samples"
                ],
                "_rand2": [
                    "self",
                    "samples"
                ],
                "_select_samples": [
                    "self",
                    "candidate",
                    "number_samples"
                ]
            },
            "_FunctionWrapper": {
                "__init__": [
                    "self",
                    "f",
                    "args"
                ],
                "__call__": [
                    "self",
                    "x"
                ]
            },
            "_ConstraintWrapper": {
                "__init__": [
                    "self",
                    "constraint",
                    "x0"
                ],
                "__call__": [
                    "self",
                    "x"
                ],
                "violation": [
                    "self",
                    "x"
                ]
            }
        },
        "scipy.optimize.zeros": {
            "results_c": [
                "full_output",
                "r"
            ],
            "_results_select": [
                "full_output",
                "r"
            ],
            "newton": [
                "func",
                "x0",
                "fprime",
                "args",
                "tol",
                "maxiter",
                "fprime2",
                "x1",
                "rtol",
                "full_output",
                "disp"
            ],
            "_array_newton": [
                "func",
                "x0",
                "fprime",
                "args",
                "tol",
                "maxiter",
                "fprime2",
                "full_output"
            ],
            "bisect": [
                "f",
                "a",
                "b",
                "args",
                "xtol",
                "rtol",
                "maxiter",
                "full_output",
                "disp"
            ],
            "ridder": [
                "f",
                "a",
                "b",
                "args",
                "xtol",
                "rtol",
                "maxiter",
                "full_output",
                "disp"
            ],
            "brentq": [
                "f",
                "a",
                "b",
                "args",
                "xtol",
                "rtol",
                "maxiter",
                "full_output",
                "disp"
            ],
            "brenth": [
                "f",
                "a",
                "b",
                "args",
                "xtol",
                "rtol",
                "maxiter",
                "full_output",
                "disp"
            ],
            "_within_tolerance": [
                "x",
                "y",
                "rtol",
                "atol"
            ],
            "_notclose": [
                "fs",
                "rtol",
                "atol"
            ],
            "_secant": [
                "xvals",
                "fvals"
            ],
            "_update_bracket": [
                "ab",
                "fab",
                "c",
                "fc"
            ],
            "_compute_divided_differences": [
                "xvals",
                "fvals",
                "N",
                "full",
                "forward"
            ],
            "_interpolated_poly": [
                "xvals",
                "fvals",
                "x"
            ],
            "_inverse_poly_zero": [
                "a",
                "b",
                "c",
                "d",
                "fa",
                "fb",
                "fc",
                "fd"
            ],
            "_newton_quadratic": [
                "ab",
                "fab",
                "d",
                "fd",
                "k"
            ],
            "toms748": [
                "f",
                "a",
                "b",
                "args",
                "k",
                "xtol",
                "rtol",
                "maxiter",
                "full_output",
                "disp"
            ],
            "RootResults": {
                "__init__": [
                    "self",
                    "root",
                    "iterations",
                    "function_calls",
                    "flag"
                ],
                "__repr__": [
                    "self"
                ]
            },
            "TOMS748Solver": {
                "__init__": [
                    "self"
                ],
                "configure": [
                    "self",
                    "xtol",
                    "rtol",
                    "maxiter",
                    "disp",
                    "k"
                ],
                "_callf": [
                    "self",
                    "x",
                    "error"
                ],
                "get_result": [
                    "self",
                    "x",
                    "flag"
                ],
                "_update_bracket": [
                    "self",
                    "c",
                    "fc"
                ],
                "start": [
                    "self",
                    "f",
                    "a",
                    "b",
                    "args"
                ],
                "get_status": [
                    "self"
                ],
                "iterate": [
                    "self"
                ],
                "solve": [
                    "self",
                    "f",
                    "a",
                    "b",
                    "args",
                    "xtol",
                    "rtol",
                    "k",
                    "maxiter",
                    "disp"
                ]
            }
        },
        "scipy.optimize._shgo": {
            "shgo": [
                "func",
                "bounds",
                "args",
                "constraints",
                "n",
                "iters",
                "callback",
                "minimizer_kwargs",
                "options",
                "sampling_method"
            ],
            "SHGO": {
                "__init__": [
                    "self",
                    "func",
                    "bounds",
                    "args",
                    "constraints",
                    "n",
                    "iters",
                    "callback",
                    "minimizer_kwargs",
                    "options",
                    "sampling_method"
                ],
                "init_options": [
                    "self",
                    "options"
                ],
                "construct_complex": [
                    "self"
                ],
                "find_minima": [
                    "self"
                ],
                "find_lowest_vertex": [
                    "self"
                ],
                "finite_iterations": [
                    "self"
                ],
                "finite_fev": [
                    "self"
                ],
                "finite_ev": [
                    "self"
                ],
                "finite_time": [
                    "self"
                ],
                "finite_precision": [
                    "self"
                ],
                "finite_homology_growth": [
                    "self"
                ],
                "stopping_criteria": [
                    "self"
                ],
                "iterate": [
                    "self"
                ],
                "iterate_hypercube": [
                    "self"
                ],
                "iterate_delaunay": [
                    "self"
                ],
                "simplex_minimizers": [
                    "self"
                ],
                "minimise_pool": [
                    "self",
                    "force_iter"
                ],
                "sort_min_pool": [
                    "self"
                ],
                "trim_min_pool": [
                    "self",
                    "trim_ind"
                ],
                "g_topograph": [
                    "self",
                    "x_min",
                    "X_min"
                ],
                "construct_lcb_simplicial": [
                    "self",
                    "v_min"
                ],
                "construct_lcb_delaunay": [
                    "self",
                    "v_min",
                    "ind"
                ],
                "minimize": [
                    "self",
                    "x_min",
                    "ind"
                ],
                "sort_result": [
                    "self"
                ],
                "fail_routine": [
                    "self",
                    "mes"
                ],
                "sampled_surface": [
                    "self",
                    "infty_cons_sampl"
                ],
                "delaunay_complex_minimisers": [
                    "self"
                ],
                "sobol_points_40": [
                    "self",
                    "n",
                    "d",
                    "skip"
                ],
                "sobol_points_10k": [
                    "self",
                    "N",
                    "D"
                ],
                "sampling_sobol": [
                    "self",
                    "n",
                    "dim"
                ],
                "sampling_custom": [
                    "self",
                    "n",
                    "dim"
                ],
                "sampling_subspace": [
                    "self"
                ],
                "sorted_samples": [
                    "self"
                ],
                "ax_subspace": [
                    "self"
                ],
                "fun_ref": [
                    "self"
                ],
                "surface_topo_ref": [
                    "self"
                ],
                "sample_topo": [
                    "self",
                    "ind"
                ],
                "minimizers_1D": [
                    "self"
                ],
                "delaunay_triangulation": [
                    "self",
                    "grow",
                    "n_prc"
                ],
                "find_neighbors_delaunay": [
                    "pindex",
                    "triang"
                ],
                "sample_delaunay_topo": [
                    "self",
                    "ind"
                ],
                "delaunay_minimizers": [
                    "self"
                ]
            },
            "LMap": {
                "__init__": [
                    "self",
                    "v"
                ]
            },
            "LMapCache": {
                "__init__": [
                    "self"
                ],
                "__getitem__": [
                    "self",
                    "v"
                ],
                "add_res": [
                    "self",
                    "v",
                    "lres",
                    "bounds"
                ],
                "sort_cache_result": [
                    "self"
                ]
            }
        },
        "scipy.optimize.nonlin": {
            "maxnorm": [
                "x"
            ],
            "_as_inexact": [
                "x"
            ],
            "_array_like": [
                "x",
                "x0"
            ],
            "_safe_norm": [
                "v"
            ],
            "_set_doc": [
                "obj"
            ],
            "nonlin_solve": [
                "F",
                "x0",
                "jacobian",
                "iter",
                "verbose",
                "maxiter",
                "f_tol",
                "f_rtol",
                "x_tol",
                "x_rtol",
                "tol_norm",
                "line_search",
                "callback",
                "full_output",
                "raise_exception"
            ],
            "_nonlin_line_search": [
                "func",
                "x",
                "Fx",
                "dx",
                "search_type",
                "rdiff",
                "smin"
            ],
            "asjacobian": [
                "J"
            ],
            "_nonlin_wrapper": [
                "name",
                "jac"
            ],
            "NoConvergence": {},
            "TerminationCondition": {
                "__init__": [
                    "self",
                    "f_tol",
                    "f_rtol",
                    "x_tol",
                    "x_rtol",
                    "iter",
                    "norm"
                ],
                "check": [
                    "self",
                    "f",
                    "x",
                    "dx"
                ]
            },
            "Jacobian": {
                "__init__": [
                    "self"
                ],
                "aspreconditioner": [
                    "self"
                ],
                "solve": [
                    "self",
                    "v",
                    "tol"
                ],
                "update": [
                    "self",
                    "x",
                    "F"
                ],
                "setup": [
                    "self",
                    "x",
                    "F",
                    "func"
                ]
            },
            "InverseJacobian": {
                "__init__": [
                    "self",
                    "jacobian"
                ],
                "shape": [
                    "self"
                ],
                "dtype": [
                    "self"
                ]
            },
            "GenericBroyden": {
                "setup": [
                    "self",
                    "x0",
                    "f0",
                    "func"
                ],
                "_update": [
                    "self",
                    "x",
                    "f",
                    "dx",
                    "df",
                    "dx_norm",
                    "df_norm"
                ],
                "update": [
                    "self",
                    "x",
                    "f"
                ]
            },
            "LowRankMatrix": {
                "__init__": [
                    "self",
                    "alpha",
                    "n",
                    "dtype"
                ],
                "_matvec": [
                    "v",
                    "alpha",
                    "cs",
                    "ds"
                ],
                "_solve": [
                    "v",
                    "alpha",
                    "cs",
                    "ds"
                ],
                "matvec": [
                    "self",
                    "v"
                ],
                "rmatvec": [
                    "self",
                    "v"
                ],
                "solve": [
                    "self",
                    "v",
                    "tol"
                ],
                "rsolve": [
                    "self",
                    "v",
                    "tol"
                ],
                "append": [
                    "self",
                    "c",
                    "d"
                ],
                "__array__": [
                    "self"
                ],
                "collapse": [
                    "self"
                ],
                "restart_reduce": [
                    "self",
                    "rank"
                ],
                "simple_reduce": [
                    "self",
                    "rank"
                ],
                "svd_reduce": [
                    "self",
                    "max_rank",
                    "to_retain"
                ]
            },
            "BroydenFirst": {
                "__init__": [
                    "self",
                    "alpha",
                    "reduction_method",
                    "max_rank"
                ],
                "setup": [
                    "self",
                    "x",
                    "F",
                    "func"
                ],
                "todense": [
                    "self"
                ],
                "solve": [
                    "self",
                    "f",
                    "tol"
                ],
                "matvec": [
                    "self",
                    "f"
                ],
                "rsolve": [
                    "self",
                    "f",
                    "tol"
                ],
                "rmatvec": [
                    "self",
                    "f"
                ],
                "_update": [
                    "self",
                    "x",
                    "f",
                    "dx",
                    "df",
                    "dx_norm",
                    "df_norm"
                ]
            },
            "BroydenSecond": {
                "_update": [
                    "self",
                    "x",
                    "f",
                    "dx",
                    "df",
                    "dx_norm",
                    "df_norm"
                ]
            },
            "Anderson": {
                "__init__": [
                    "self",
                    "alpha",
                    "w0",
                    "M"
                ],
                "solve": [
                    "self",
                    "f",
                    "tol"
                ],
                "matvec": [
                    "self",
                    "f"
                ],
                "_update": [
                    "self",
                    "x",
                    "f",
                    "dx",
                    "df",
                    "dx_norm",
                    "df_norm"
                ]
            },
            "DiagBroyden": {
                "__init__": [
                    "self",
                    "alpha"
                ],
                "setup": [
                    "self",
                    "x",
                    "F",
                    "func"
                ],
                "solve": [
                    "self",
                    "f",
                    "tol"
                ],
                "matvec": [
                    "self",
                    "f"
                ],
                "rsolve": [
                    "self",
                    "f",
                    "tol"
                ],
                "rmatvec": [
                    "self",
                    "f"
                ],
                "todense": [
                    "self"
                ],
                "_update": [
                    "self",
                    "x",
                    "f",
                    "dx",
                    "df",
                    "dx_norm",
                    "df_norm"
                ]
            },
            "LinearMixing": {
                "__init__": [
                    "self",
                    "alpha"
                ],
                "solve": [
                    "self",
                    "f",
                    "tol"
                ],
                "matvec": [
                    "self",
                    "f"
                ],
                "rsolve": [
                    "self",
                    "f",
                    "tol"
                ],
                "rmatvec": [
                    "self",
                    "f"
                ],
                "todense": [
                    "self"
                ],
                "_update": [
                    "self",
                    "x",
                    "f",
                    "dx",
                    "df",
                    "dx_norm",
                    "df_norm"
                ]
            },
            "ExcitingMixing": {
                "__init__": [
                    "self",
                    "alpha",
                    "alphamax"
                ],
                "setup": [
                    "self",
                    "x",
                    "F",
                    "func"
                ],
                "solve": [
                    "self",
                    "f",
                    "tol"
                ],
                "matvec": [
                    "self",
                    "f"
                ],
                "rsolve": [
                    "self",
                    "f",
                    "tol"
                ],
                "rmatvec": [
                    "self",
                    "f"
                ],
                "todense": [
                    "self"
                ],
                "_update": [
                    "self",
                    "x",
                    "f",
                    "dx",
                    "df",
                    "dx_norm",
                    "df_norm"
                ]
            },
            "KrylovJacobian": {
                "__init__": [
                    "self",
                    "rdiff",
                    "method",
                    "inner_maxiter",
                    "inner_M",
                    "outer_k"
                ],
                "_update_diff_step": [
                    "self"
                ],
                "matvec": [
                    "self",
                    "v"
                ],
                "solve": [
                    "self",
                    "rhs",
                    "tol"
                ],
                "update": [
                    "self",
                    "x",
                    "f"
                ],
                "setup": [
                    "self",
                    "x",
                    "f",
                    "func"
                ]
            }
        },
        "scipy.optimize.setup": {
            "configuration": [
                "parent_package",
                "top_path"
            ]
        },
        "scipy.optimize._trustregion_krylov": {
            "_minimize_trust_krylov": [
                "fun",
                "x0",
                "args",
                "jac",
                "hess",
                "hessp",
                "inexact"
            ]
        },
        "scipy.optimize._linprog_util": {
            "_check_sparse_inputs": [
                "options",
                "A_ub",
                "A_eq"
            ],
            "_format_A_constraints": [
                "A",
                "n_x",
                "sparse_lhs"
            ],
            "_format_b_constraints": [
                "b"
            ],
            "_clean_inputs": [
                "lp"
            ],
            "_presolve": [
                "lp",
                "rr",
                "rr_method",
                "tol"
            ],
            "_parse_linprog": [
                "lp",
                "options"
            ],
            "_get_Abc": [
                "lp",
                "c0"
            ],
            "_round_to_power_of_two": [
                "x"
            ],
            "_autoscale": [
                "A",
                "b",
                "c",
                "x0"
            ],
            "_unscale": [
                "x",
                "C",
                "b_scale"
            ],
            "_display_summary": [
                "message",
                "status",
                "fun",
                "iteration"
            ],
            "_postsolve": [
                "x",
                "postsolve_args",
                "complete"
            ],
            "_check_result": [
                "x",
                "fun",
                "status",
                "slack",
                "con",
                "bounds",
                "tol",
                "message"
            ]
        },
        "scipy.optimize._linprog_doc": {
            "_linprog_highs_doc": [
                "c",
                "A_ub",
                "b_ub",
                "A_eq",
                "b_eq",
                "bounds",
                "method",
                "callback",
                "maxiter",
                "disp",
                "presolve",
                "time_limit",
                "dual_feasibility_tolerance",
                "primal_feasibility_tolerance",
                "ipm_optimality_tolerance",
                "simplex_dual_edge_weight_strategy"
            ],
            "_linprog_highs_ds_doc": [
                "c",
                "A_ub",
                "b_ub",
                "A_eq",
                "b_eq",
                "bounds",
                "method",
                "callback",
                "maxiter",
                "disp",
                "presolve",
                "time_limit",
                "dual_feasibility_tolerance",
                "primal_feasibility_tolerance",
                "simplex_dual_edge_weight_strategy"
            ],
            "_linprog_highs_ipm_doc": [
                "c",
                "A_ub",
                "b_ub",
                "A_eq",
                "b_eq",
                "bounds",
                "method",
                "callback",
                "maxiter",
                "disp",
                "presolve",
                "time_limit",
                "dual_feasibility_tolerance",
                "primal_feasibility_tolerance",
                "ipm_optimality_tolerance"
            ],
            "_linprog_ip_doc": [
                "c",
                "A_ub",
                "b_ub",
                "A_eq",
                "b_eq",
                "bounds",
                "method",
                "callback",
                "maxiter",
                "disp",
                "presolve",
                "tol",
                "autoscale",
                "rr",
                "alpha0",
                "beta",
                "sparse",
                "lstsq",
                "sym_pos",
                "cholesky",
                "pc",
                "ip",
                "permc_spec"
            ],
            "_linprog_rs_doc": [
                "c",
                "A_ub",
                "b_ub",
                "A_eq",
                "b_eq",
                "bounds",
                "method",
                "callback",
                "x0",
                "maxiter",
                "disp",
                "presolve",
                "tol",
                "autoscale",
                "rr",
                "maxupdate",
                "mast",
                "pivot"
            ],
            "_linprog_simplex_doc": [
                "c",
                "A_ub",
                "b_ub",
                "A_eq",
                "b_eq",
                "bounds",
                "method",
                "callback",
                "maxiter",
                "disp",
                "presolve",
                "tol",
                "autoscale",
                "rr",
                "bland"
            ]
        },
        "scipy.optimize._qap": {
            "quadratic_assignment": [
                "A",
                "B",
                "method",
                "options"
            ],
            "_calc_score": [
                "A",
                "B",
                "perm"
            ],
            "_common_input_validation": [
                "A",
                "B",
                "partial_match"
            ],
            "_quadratic_assignment_faq": [
                "A",
                "B",
                "maximize",
                "partial_match",
                "rng",
                "P0",
                "shuffle_input",
                "maxiter",
                "tol"
            ],
            "_split_matrix": [
                "X",
                "n"
            ],
            "_doubly_stochastic": [
                "P",
                "tol"
            ],
            "_quadratic_assignment_2opt": [
                "A",
                "B",
                "maximize",
                "rng",
                "partial_match",
                "partial_guess"
            ]
        },
        "scipy.optimize._linprog_ip": {
            "_get_solver": [
                "M",
                "sparse",
                "lstsq",
                "sym_pos",
                "cholesky",
                "permc_spec"
            ],
            "_get_delta": [
                "A",
                "b",
                "c",
                "x",
                "y",
                "z",
                "tau",
                "kappa",
                "gamma",
                "eta",
                "sparse",
                "lstsq",
                "sym_pos",
                "cholesky",
                "pc",
                "ip",
                "permc_spec"
            ],
            "_sym_solve": [
                "Dinv",
                "A",
                "r1",
                "r2",
                "solve"
            ],
            "_get_step": [
                "x",
                "d_x",
                "z",
                "d_z",
                "tau",
                "d_tau",
                "kappa",
                "d_kappa",
                "alpha0"
            ],
            "_get_message": [
                "status"
            ],
            "_do_step": [
                "x",
                "y",
                "z",
                "tau",
                "kappa",
                "d_x",
                "d_y",
                "d_z",
                "d_tau",
                "d_kappa",
                "alpha"
            ],
            "_get_blind_start": [
                "shape"
            ],
            "_indicators": [
                "A",
                "b",
                "c",
                "c0",
                "x",
                "y",
                "z",
                "tau",
                "kappa"
            ],
            "_display_iter": [
                "rho_p",
                "rho_d",
                "rho_g",
                "alpha",
                "rho_mu",
                "obj",
                "header"
            ],
            "_ip_hsd": [
                "A",
                "b",
                "c",
                "c0",
                "alpha0",
                "beta",
                "maxiter",
                "disp",
                "tol",
                "sparse",
                "lstsq",
                "sym_pos",
                "cholesky",
                "pc",
                "ip",
                "permc_spec",
                "callback",
                "postsolve_args"
            ],
            "_linprog_ip": [
                "c",
                "c0",
                "A",
                "b",
                "callback",
                "postsolve_args",
                "maxiter",
                "tol",
                "disp",
                "alpha0",
                "beta",
                "sparse",
                "lstsq",
                "sym_pos",
                "cholesky",
                "pc",
                "ip",
                "permc_spec"
            ]
        },
        "scipy.optimize._lsap": {
            "linear_sum_assignment": [
                "cost_matrix",
                "maximize"
            ]
        },
        "scipy.optimize": {},
        "scipy.optimize._trustregion": {
            "_minimize_trust_region": [
                "fun",
                "x0",
                "args",
                "jac",
                "hess",
                "hessp",
                "subproblem",
                "initial_trust_radius",
                "max_trust_radius",
                "eta",
                "gtol",
                "maxiter",
                "disp",
                "return_all",
                "callback",
                "inexact"
            ],
            "BaseQuadraticSubproblem": {
                "__init__": [
                    "self",
                    "x",
                    "fun",
                    "jac",
                    "hess",
                    "hessp"
                ],
                "__call__": [
                    "self",
                    "p"
                ],
                "fun": [
                    "self"
                ],
                "jac": [
                    "self"
                ],
                "hess": [
                    "self"
                ],
                "hessp": [
                    "self",
                    "p"
                ],
                "jac_mag": [
                    "self"
                ],
                "get_boundaries_intersections": [
                    "self",
                    "z",
                    "d",
                    "trust_radius"
                ],
                "solve": [
                    "self",
                    "trust_radius"
                ]
            }
        },
        "scipy.optimize._hessian_update_strategy": {
            "HessianUpdateStrategy": {
                "initialize": [
                    "self",
                    "n",
                    "approx_type"
                ],
                "update": [
                    "self",
                    "delta_x",
                    "delta_grad"
                ],
                "dot": [
                    "self",
                    "p"
                ],
                "get_matrix": [
                    "self"
                ]
            },
            "FullHessianUpdateStrategy": {
                "__init__": [
                    "self",
                    "init_scale"
                ],
                "initialize": [
                    "self",
                    "n",
                    "approx_type"
                ],
                "_auto_scale": [
                    "self",
                    "delta_x",
                    "delta_grad"
                ],
                "_update_implementation": [
                    "self",
                    "delta_x",
                    "delta_grad"
                ],
                "update": [
                    "self",
                    "delta_x",
                    "delta_grad"
                ],
                "dot": [
                    "self",
                    "p"
                ],
                "get_matrix": [
                    "self"
                ]
            },
            "BFGS": {
                "__init__": [
                    "self",
                    "exception_strategy",
                    "min_curvature",
                    "init_scale"
                ],
                "_update_inverse_hessian": [
                    "self",
                    "ys",
                    "Hy",
                    "yHy",
                    "s"
                ],
                "_update_hessian": [
                    "self",
                    "ys",
                    "Bs",
                    "sBs",
                    "y"
                ],
                "_update_implementation": [
                    "self",
                    "delta_x",
                    "delta_grad"
                ]
            },
            "SR1": {
                "__init__": [
                    "self",
                    "min_denominator",
                    "init_scale"
                ],
                "_update_implementation": [
                    "self",
                    "delta_x",
                    "delta_grad"
                ]
            }
        },
        "scipy.optimize._numdiff": {
            "_adjust_scheme_to_bounds": [
                "x0",
                "h",
                "num_steps",
                "scheme",
                "lb",
                "ub"
            ],
            "_eps_for_method": [
                "x0_dtype",
                "f0_dtype",
                "method"
            ],
            "_compute_absolute_step": [
                "rel_step",
                "x0",
                "f0",
                "method"
            ],
            "_prepare_bounds": [
                "bounds",
                "x0"
            ],
            "group_columns": [
                "A",
                "order"
            ],
            "approx_derivative": [
                "fun",
                "x0",
                "method",
                "rel_step",
                "abs_step",
                "f0",
                "bounds",
                "sparsity",
                "as_linear_operator",
                "args",
                "kwargs"
            ],
            "_linear_operator_difference": [
                "fun",
                "x0",
                "f0",
                "h",
                "method"
            ],
            "_dense_difference": [
                "fun",
                "x0",
                "f0",
                "h",
                "use_one_sided",
                "method"
            ],
            "_sparse_difference": [
                "fun",
                "x0",
                "f0",
                "h",
                "use_one_sided",
                "structure",
                "groups",
                "method"
            ],
            "check_derivative": [
                "fun",
                "jac",
                "x0",
                "bounds",
                "args",
                "kwargs"
            ]
        },
        "scipy.optimize.minpack": {
            "_check_func": [
                "checker",
                "argname",
                "thefunc",
                "x0",
                "args",
                "numinputs",
                "output_shape"
            ],
            "fsolve": [
                "func",
                "x0",
                "args",
                "fprime",
                "full_output",
                "col_deriv",
                "xtol",
                "maxfev",
                "band",
                "epsfcn",
                "factor",
                "diag"
            ],
            "_root_hybr": [
                "func",
                "x0",
                "args",
                "jac",
                "col_deriv",
                "xtol",
                "maxfev",
                "band",
                "eps",
                "factor",
                "diag"
            ],
            "leastsq": [
                "func",
                "x0",
                "args",
                "Dfun",
                "full_output",
                "col_deriv",
                "ftol",
                "xtol",
                "gtol",
                "maxfev",
                "epsfcn",
                "factor",
                "diag"
            ],
            "_wrap_func": [
                "func",
                "xdata",
                "ydata",
                "transform"
            ],
            "_wrap_jac": [
                "jac",
                "xdata",
                "transform"
            ],
            "_initialize_feasible": [
                "lb",
                "ub"
            ],
            "curve_fit": [
                "f",
                "xdata",
                "ydata",
                "p0",
                "sigma",
                "absolute_sigma",
                "check_finite",
                "bounds",
                "method",
                "jac"
            ],
            "check_gradient": [
                "fcn",
                "Dfcn",
                "x0",
                "args",
                "col_deriv"
            ],
            "_del2": [
                "p0",
                "p1",
                "d"
            ],
            "_relerr": [
                "actual",
                "desired"
            ],
            "_fixed_point_helper": [
                "func",
                "x0",
                "args",
                "xtol",
                "maxiter",
                "use_accel"
            ],
            "fixed_point": [
                "func",
                "x0",
                "args",
                "xtol",
                "maxiter",
                "method"
            ]
        },
        "scipy.optimize.tnc": {
            "fmin_tnc": [
                "func",
                "x0",
                "fprime",
                "args",
                "approx_grad",
                "bounds",
                "epsilon",
                "scale",
                "offset",
                "messages",
                "maxCGit",
                "maxfun",
                "eta",
                "stepmx",
                "accuracy",
                "fmin",
                "ftol",
                "xtol",
                "pgtol",
                "rescale",
                "disp",
                "callback"
            ],
            "_minimize_tnc": [
                "fun",
                "x0",
                "args",
                "jac",
                "bounds",
                "eps",
                "scale",
                "offset",
                "mesg_num",
                "maxCGit",
                "maxiter",
                "eta",
                "stepmx",
                "accuracy",
                "minfev",
                "ftol",
                "xtol",
                "gtol",
                "rescale",
                "disp",
                "callback",
                "finite_diff_rel_step",
                "maxfun"
            ]
        },
        "scipy.optimize._spectral": {
            "_root_df_sane": [
                "func",
                "x0",
                "args",
                "ftol",
                "fatol",
                "maxfev",
                "fnorm",
                "callback",
                "disp",
                "M",
                "eta_strategy",
                "sigma_eps",
                "sigma_0",
                "line_search"
            ],
            "_wrap_func": [
                "func",
                "x0",
                "fmerit",
                "nfev_list",
                "maxfev",
                "args"
            ],
            "_wrap_result": [
                "result",
                "is_complex",
                "shape"
            ],
            "_real2complex": [
                "x"
            ],
            "_complex2real": [
                "z"
            ],
            "_NoConvergence": {}
        },
        "scipy.optimize.linesearch": {
            "line_search_wolfe1": [
                "f",
                "fprime",
                "xk",
                "pk",
                "gfk",
                "old_fval",
                "old_old_fval",
                "args",
                "c1",
                "c2",
                "amax",
                "amin",
                "xtol"
            ],
            "scalar_search_wolfe1": [
                "phi",
                "derphi",
                "phi0",
                "old_phi0",
                "derphi0",
                "c1",
                "c2",
                "amax",
                "amin",
                "xtol"
            ],
            "line_search_wolfe2": [
                "f",
                "myfprime",
                "xk",
                "pk",
                "gfk",
                "old_fval",
                "old_old_fval",
                "args",
                "c1",
                "c2",
                "amax",
                "extra_condition",
                "maxiter"
            ],
            "scalar_search_wolfe2": [
                "phi",
                "derphi",
                "phi0",
                "old_phi0",
                "derphi0",
                "c1",
                "c2",
                "amax",
                "extra_condition",
                "maxiter"
            ],
            "_cubicmin": [
                "a",
                "fa",
                "fpa",
                "b",
                "fb",
                "c",
                "fc"
            ],
            "_quadmin": [
                "a",
                "fa",
                "fpa",
                "b",
                "fb"
            ],
            "_zoom": [
                "a_lo",
                "a_hi",
                "phi_lo",
                "phi_hi",
                "derphi_lo",
                "phi",
                "derphi",
                "phi0",
                "derphi0",
                "c1",
                "c2",
                "extra_condition"
            ],
            "line_search_armijo": [
                "f",
                "xk",
                "pk",
                "gfk",
                "old_fval",
                "args",
                "c1",
                "alpha0"
            ],
            "line_search_BFGS": [
                "f",
                "xk",
                "pk",
                "gfk",
                "old_fval",
                "args",
                "c1",
                "alpha0"
            ],
            "scalar_search_armijo": [
                "phi",
                "phi0",
                "derphi0",
                "c1",
                "alpha0",
                "amin"
            ],
            "_nonmonotone_line_search_cruz": [
                "f",
                "x_k",
                "d",
                "prev_fs",
                "eta",
                "gamma",
                "tau_min",
                "tau_max"
            ],
            "_nonmonotone_line_search_cheng": [
                "f",
                "x_k",
                "d",
                "f_k",
                "C",
                "Q",
                "eta",
                "gamma",
                "tau_min",
                "tau_max",
                "nu"
            ],
            "LineSearchWarning": {}
        },
        "scipy.optimize.cobyla": {
            "synchronized": [
                "func"
            ],
            "fmin_cobyla": [
                "func",
                "x0",
                "cons",
                "args",
                "consargs",
                "rhobeg",
                "rhoend",
                "maxfun",
                "disp",
                "catol"
            ],
            "_minimize_cobyla": [
                "fun",
                "x0",
                "args",
                "constraints",
                "rhobeg",
                "tol",
                "maxiter",
                "disp",
                "catol"
            ]
        },
        "scipy.optimize._tstutils": {
            "f1": [
                "x"
            ],
            "f1_fp": [
                "x"
            ],
            "f1_fpp": [
                "x"
            ],
            "f2": [
                "x"
            ],
            "f2_fp": [
                "x"
            ],
            "f2_fpp": [
                "x"
            ],
            "f3": [
                "x"
            ],
            "f3_fp": [
                "x"
            ],
            "f3_fpp": [
                "x"
            ],
            "f4": [
                "x"
            ],
            "f5": [
                "x"
            ],
            "f6": [
                "x"
            ],
            "aps01_f": [
                "x"
            ],
            "aps01_fp": [
                "x"
            ],
            "aps01_fpp": [
                "x"
            ],
            "aps02_f": [
                "x"
            ],
            "aps02_fp": [
                "x"
            ],
            "aps02_fpp": [
                "x"
            ],
            "aps03_f": [
                "x",
                "a",
                "b"
            ],
            "aps03_fp": [
                "x",
                "a",
                "b"
            ],
            "aps03_fpp": [
                "x",
                "a",
                "b"
            ],
            "aps04_f": [
                "x",
                "n",
                "a"
            ],
            "aps04_fp": [
                "x",
                "n",
                "a"
            ],
            "aps04_fpp": [
                "x",
                "n",
                "a"
            ],
            "aps05_f": [
                "x"
            ],
            "aps05_fp": [
                "x"
            ],
            "aps05_fpp": [
                "x"
            ],
            "aps06_f": [
                "x",
                "n"
            ],
            "aps06_fp": [
                "x",
                "n"
            ],
            "aps06_fpp": [
                "x",
                "n"
            ],
            "aps07_f": [
                "x",
                "n"
            ],
            "aps07_fp": [
                "x",
                "n"
            ],
            "aps07_fpp": [
                "x",
                "n"
            ],
            "aps08_f": [
                "x",
                "n"
            ],
            "aps08_fp": [
                "x",
                "n"
            ],
            "aps08_fpp": [
                "x",
                "n"
            ],
            "aps09_f": [
                "x",
                "n"
            ],
            "aps09_fp": [
                "x",
                "n"
            ],
            "aps09_fpp": [
                "x",
                "n"
            ],
            "aps10_f": [
                "x",
                "n"
            ],
            "aps10_fp": [
                "x",
                "n"
            ],
            "aps10_fpp": [
                "x",
                "n"
            ],
            "aps11_f": [
                "x",
                "n"
            ],
            "aps11_fp": [
                "x",
                "n"
            ],
            "aps11_fpp": [
                "x",
                "n"
            ],
            "aps12_f": [
                "x",
                "n"
            ],
            "aps12_fp": [
                "x",
                "n"
            ],
            "aps12_fpp": [
                "x",
                "n"
            ],
            "aps13_f": [
                "x"
            ],
            "aps13_fp": [
                "x"
            ],
            "aps13_fpp": [
                "x"
            ],
            "aps14_f": [
                "x",
                "n"
            ],
            "aps14_fp": [
                "x",
                "n"
            ],
            "aps14_fpp": [
                "x",
                "n"
            ],
            "aps15_f": [
                "x",
                "n"
            ],
            "aps15_fp": [
                "x",
                "n"
            ],
            "aps15_fpp": [
                "x",
                "n"
            ],
            "cplx01_f": [
                "z",
                "n",
                "a"
            ],
            "cplx01_fp": [
                "z",
                "n",
                "a"
            ],
            "cplx01_fpp": [
                "z",
                "n",
                "a"
            ],
            "cplx02_f": [
                "z",
                "a"
            ],
            "cplx02_fp": [
                "z",
                "a"
            ],
            "cplx02_fpp": [
                "z",
                "a"
            ],
            "_add_a_b": [
                "tests"
            ],
            "get_tests": [
                "collection",
                "smoothness"
            ]
        },
        "scipy.optimize._trustregion_dogleg": {
            "_minimize_dogleg": [
                "fun",
                "x0",
                "args",
                "jac",
                "hess"
            ],
            "DoglegSubproblem": {
                "cauchy_point": [
                    "self"
                ],
                "newton_point": [
                    "self"
                ],
                "solve": [
                    "self",
                    "trust_radius"
                ]
            }
        },
        "scipy.optimize._linprog_rs": {
            "_phase_one": [
                "A",
                "b",
                "x0",
                "callback",
                "postsolve_args",
                "maxiter",
                "tol",
                "disp",
                "maxupdate",
                "mast",
                "pivot"
            ],
            "_get_more_basis_columns": [
                "A",
                "basis"
            ],
            "_generate_auxiliary_problem": [
                "A",
                "b",
                "x0",
                "tol"
            ],
            "_select_singleton_columns": [
                "A",
                "b"
            ],
            "_find_nonzero_rows": [
                "A",
                "tol"
            ],
            "_select_enter_pivot": [
                "c_hat",
                "bl",
                "a",
                "rule",
                "tol"
            ],
            "_display_iter": [
                "phase",
                "iteration",
                "slack",
                "con",
                "fun"
            ],
            "_display_and_callback": [
                "phase_one_n",
                "x",
                "postsolve_args",
                "status",
                "iteration",
                "disp",
                "callback"
            ],
            "_phase_two": [
                "c",
                "A",
                "x",
                "b",
                "callback",
                "postsolve_args",
                "maxiter",
                "tol",
                "disp",
                "maxupdate",
                "mast",
                "pivot",
                "iteration",
                "phase_one_n"
            ],
            "_linprog_rs": [
                "c",
                "c0",
                "A",
                "b",
                "x0",
                "callback",
                "postsolve_args",
                "maxiter",
                "tol",
                "disp",
                "maxupdate",
                "mast",
                "pivot"
            ]
        },
        "scipy.optimize._linprog": {
            "linprog_verbose_callback": [
                "res"
            ],
            "linprog_terse_callback": [
                "res"
            ],
            "linprog": [
                "c",
                "A_ub",
                "b_ub",
                "A_eq",
                "b_eq",
                "bounds",
                "method",
                "callback",
                "options",
                "x0"
            ]
        },
        "scipy.optimize._remove_redundancy": {
            "_row_count": [
                "A"
            ],
            "_get_densest": [
                "A",
                "eligibleRows"
            ],
            "_remove_zero_rows": [
                "A",
                "b"
            ],
            "bg_update_dense": [
                "plu",
                "perm_r",
                "v",
                "j"
            ],
            "_remove_redundancy_pivot_dense": [
                "A",
                "rhs",
                "true_rank"
            ],
            "_remove_redundancy_pivot_sparse": [
                "A",
                "rhs"
            ],
            "_remove_redundancy_svd": [
                "A",
                "b"
            ],
            "_remove_redundancy_id": [
                "A",
                "rhs",
                "rank",
                "randomized"
            ]
        },
        "scipy.optimize._dual_annealing": {
            "dual_annealing": [
                "func",
                "bounds",
                "args",
                "maxiter",
                "local_search_options",
                "initial_temp",
                "restart_temp_ratio",
                "visit",
                "accept",
                "maxfun",
                "seed",
                "no_local_search",
                "callback",
                "x0"
            ],
            "VisitingDistribution": {
                "__init__": [
                    "self",
                    "lb",
                    "ub",
                    "visiting_param",
                    "rand_gen"
                ],
                "visiting": [
                    "self",
                    "x",
                    "step",
                    "temperature"
                ],
                "visit_fn": [
                    "self",
                    "temperature",
                    "dim"
                ]
            },
            "EnergyState": {
                "__init__": [
                    "self",
                    "lower",
                    "upper",
                    "callback"
                ],
                "reset": [
                    "self",
                    "func_wrapper",
                    "rand_gen",
                    "x0"
                ],
                "update_best": [
                    "self",
                    "e",
                    "x",
                    "context"
                ],
                "update_current": [
                    "self",
                    "e",
                    "x"
                ]
            },
            "StrategyChain": {
                "__init__": [
                    "self",
                    "acceptance_param",
                    "visit_dist",
                    "func_wrapper",
                    "minimizer_wrapper",
                    "rand_gen",
                    "energy_state"
                ],
                "accept_reject": [
                    "self",
                    "j",
                    "e",
                    "x_visit"
                ],
                "run": [
                    "self",
                    "step",
                    "temperature"
                ],
                "local_search": [
                    "self"
                ]
            },
            "ObjectiveFunWrapper": {
                "__init__": [
                    "self",
                    "func",
                    "maxfun"
                ],
                "fun": [
                    "self",
                    "x"
                ]
            },
            "LocalSearchWrapper": {
                "__init__": [
                    "self",
                    "search_bounds",
                    "func_wrapper"
                ],
                "local_search": [
                    "self",
                    "x",
                    "e"
                ]
            }
        },
        "scipy.optimize._root": {
            "root": [
                "fun",
                "x0",
                "args",
                "method",
                "jac",
                "tol",
                "callback",
                "options"
            ],
            "_warn_jac_unused": [
                "jac",
                "method"
            ],
            "_root_leastsq": [
                "fun",
                "x0",
                "args",
                "jac",
                "col_deriv",
                "xtol",
                "ftol",
                "gtol",
                "maxiter",
                "eps",
                "factor",
                "diag"
            ],
            "_root_nonlin_solve": [
                "fun",
                "x0",
                "args",
                "jac",
                "_callback",
                "_method",
                "nit",
                "disp",
                "maxiter",
                "ftol",
                "fatol",
                "xtol",
                "xatol",
                "tol_norm",
                "line_search",
                "jac_options"
            ],
            "_root_broyden1_doc": [],
            "_root_broyden2_doc": [],
            "_root_anderson_doc": [],
            "_root_linearmixing_doc": [],
            "_root_diagbroyden_doc": [],
            "_root_excitingmixing_doc": [],
            "_root_krylov_doc": []
        },
        "scipy.optimize._minimize": {
            "minimize": [
                "fun",
                "x0",
                "args",
                "method",
                "jac",
                "hess",
                "hessp",
                "bounds",
                "constraints",
                "tol",
                "callback",
                "options"
            ],
            "minimize_scalar": [
                "fun",
                "bracket",
                "bounds",
                "args",
                "method",
                "tol",
                "options"
            ],
            "standardize_bounds": [
                "bounds",
                "x0",
                "meth"
            ],
            "standardize_constraints": [
                "constraints",
                "x0",
                "meth"
            ]
        },
        "scipy.optimize.lbfgsb": {
            "fmin_l_bfgs_b": [
                "func",
                "x0",
                "fprime",
                "args",
                "approx_grad",
                "bounds",
                "m",
                "factr",
                "pgtol",
                "epsilon",
                "iprint",
                "maxfun",
                "maxiter",
                "disp",
                "callback",
                "maxls"
            ],
            "_minimize_lbfgsb": [
                "fun",
                "x0",
                "args",
                "jac",
                "bounds",
                "disp",
                "maxcor",
                "ftol",
                "gtol",
                "eps",
                "maxfun",
                "maxiter",
                "iprint",
                "callback",
                "maxls",
                "finite_diff_rel_step"
            ],
            "LbfgsInvHessProduct": {
                "__init__": [
                    "self",
                    "sk",
                    "yk"
                ],
                "_matvec": [
                    "self",
                    "x"
                ],
                "todense": [
                    "self"
                ]
            }
        },
        "scipy.optimize._trustregion_exact": {
            "_minimize_trustregion_exact": [
                "fun",
                "x0",
                "args",
                "jac",
                "hess"
            ],
            "estimate_smallest_singular_value": [
                "U"
            ],
            "gershgorin_bounds": [
                "H"
            ],
            "singular_leading_submatrix": [
                "A",
                "U",
                "k"
            ],
            "IterativeSubproblem": {
                "__init__": [
                    "self",
                    "x",
                    "fun",
                    "jac",
                    "hess",
                    "hessp",
                    "k_easy",
                    "k_hard"
                ],
                "_initial_values": [
                    "self",
                    "tr_radius"
                ],
                "solve": [
                    "self",
                    "tr_radius"
                ]
            }
        },
        "scipy.optimize._trustregion_ncg": {
            "_minimize_trust_ncg": [
                "fun",
                "x0",
                "args",
                "jac",
                "hess",
                "hessp"
            ],
            "CGSteihaugSubproblem": {
                "solve": [
                    "self",
                    "trust_radius"
                ]
            }
        },
        "scipy.optimize.slsqp": {
            "approx_jacobian": [
                "x",
                "func",
                "epsilon"
            ],
            "fmin_slsqp": [
                "func",
                "x0",
                "eqcons",
                "f_eqcons",
                "ieqcons",
                "f_ieqcons",
                "bounds",
                "fprime",
                "fprime_eqcons",
                "fprime_ieqcons",
                "args",
                "iter",
                "acc",
                "iprint",
                "disp",
                "full_output",
                "epsilon",
                "callback"
            ],
            "_minimize_slsqp": [
                "func",
                "x0",
                "args",
                "jac",
                "bounds",
                "constraints",
                "maxiter",
                "ftol",
                "iprint",
                "disp",
                "eps",
                "callback",
                "finite_diff_rel_step"
            ],
            "_eval_constraint": [
                "x",
                "cons"
            ],
            "_eval_con_normals": [
                "x",
                "cons",
                "la",
                "n",
                "m",
                "meq",
                "mieq"
            ]
        },
        "scipy.optimize._basinhopping": {
            "basinhopping": [
                "func",
                "x0",
                "niter",
                "T",
                "stepsize",
                "minimizer_kwargs",
                "take_step",
                "accept_test",
                "callback",
                "interval",
                "disp",
                "niter_success",
                "seed"
            ],
            "_test_func2d_nograd": [
                "x"
            ],
            "_test_func2d": [
                "x"
            ],
            "Storage": {
                "__init__": [
                    "self",
                    "minres"
                ],
                "_add": [
                    "self",
                    "minres"
                ],
                "update": [
                    "self",
                    "minres"
                ],
                "get_lowest": [
                    "self"
                ]
            },
            "BasinHoppingRunner": {
                "__init__": [
                    "self",
                    "x0",
                    "minimizer",
                    "step_taking",
                    "accept_tests",
                    "disp"
                ],
                "_monte_carlo_step": [
                    "self"
                ],
                "one_cycle": [
                    "self"
                ],
                "print_report": [
                    "self",
                    "energy_trial",
                    "accept"
                ]
            },
            "AdaptiveStepsize": {
                "__init__": [
                    "self",
                    "takestep",
                    "accept_rate",
                    "interval",
                    "factor",
                    "verbose"
                ],
                "__call__": [
                    "self",
                    "x"
                ],
                "_adjust_step_size": [
                    "self"
                ],
                "take_step": [
                    "self",
                    "x"
                ],
                "report": [
                    "self",
                    "accept"
                ]
            },
            "RandomDisplacement": {
                "__init__": [
                    "self",
                    "stepsize",
                    "random_gen"
                ],
                "__call__": [
                    "self",
                    "x"
                ]
            },
            "MinimizerWrapper": {
                "__init__": [
                    "self",
                    "minimizer",
                    "func"
                ],
                "__call__": [
                    "self",
                    "x0"
                ]
            },
            "Metropolis": {
                "__init__": [
                    "self",
                    "T",
                    "random_gen"
                ],
                "accept_reject": [
                    "self",
                    "energy_new",
                    "energy_old"
                ],
                "__call__": [
                    "self"
                ]
            }
        },
        "scipy.optimize._nnls": {
            "nnls": [
                "A",
                "b",
                "maxiter"
            ]
        },
        "scipy.optimize._linprog_simplex": {
            "_pivot_col": [
                "T",
                "tol",
                "bland"
            ],
            "_pivot_row": [
                "T",
                "basis",
                "pivcol",
                "phase",
                "tol",
                "bland"
            ],
            "_apply_pivot": [
                "T",
                "basis",
                "pivrow",
                "pivcol",
                "tol"
            ],
            "_solve_simplex": [
                "T",
                "n",
                "basis",
                "callback",
                "postsolve_args",
                "maxiter",
                "tol",
                "phase",
                "bland",
                "nit0"
            ],
            "_linprog_simplex": [
                "c",
                "c0",
                "A",
                "b",
                "callback",
                "postsolve_args",
                "maxiter",
                "tol",
                "disp",
                "bland"
            ]
        },
        "scipy.optimize._root_scalar": {
            "root_scalar": [
                "f",
                "args",
                "method",
                "bracket",
                "fprime",
                "fprime2",
                "x0",
                "x1",
                "xtol",
                "rtol",
                "maxiter",
                "options"
            ],
            "_root_scalar_brentq_doc": [],
            "_root_scalar_brenth_doc": [],
            "_root_scalar_toms748_doc": [],
            "_root_scalar_secant_doc": [],
            "_root_scalar_newton_doc": [],
            "_root_scalar_halley_doc": [],
            "_root_scalar_ridder_doc": [],
            "_root_scalar_bisect_doc": [],
            "MemoizeDer": {
                "__init__": [
                    "self",
                    "fun"
                ],
                "__call__": [
                    "self",
                    "x"
                ],
                "fprime": [
                    "self",
                    "x"
                ],
                "fprime2": [
                    "self",
                    "x"
                ],
                "ncalls": [
                    "self"
                ]
            }
        },
        "scipy.optimize.cython_optimize": {},
        "scipy.optimize._highs.setup": {
            "pre_build_hook": [
                "build_ext",
                "ext"
            ],
            "basiclu_pre_build_hook": [
                "build_clib",
                "build_info"
            ],
            "_get_sources": [
                "CMakeLists",
                "start_token",
                "end_token"
            ],
            "_get_version": [
                "CMakeLists",
                "start_token",
                "end_token"
            ],
            "configuration": [
                "parent_package",
                "top_path"
            ]
        },
        "scipy.optimize._highs": {},
        "scipy.optimize._highs.cython": {},
        "scipy.optimize._highs.cython.src": {},
        "scipy.optimize.tests.test__basinhopping": {
            "func1d": [
                "x"
            ],
            "func2d_nograd": [
                "x"
            ],
            "func2d": [
                "x"
            ],
            "func2d_easyderiv": [
                "x"
            ],
            "myTakeStep2": [
                "x"
            ],
            "MyTakeStep1": {
                "__init__": [
                    "self"
                ],
                "__call__": [
                    "self",
                    "x"
                ]
            },
            "MyAcceptTest": {
                "__init__": [
                    "self"
                ],
                "__call__": [
                    "self"
                ]
            },
            "MyCallBack": {
                "__init__": [
                    "self"
                ],
                "__call__": [
                    "self",
                    "x",
                    "f",
                    "accepted"
                ]
            },
            "TestBasinHopping": {
                "setup_method": [
                    "self"
                ],
                "test_TypeError": [
                    "self"
                ],
                "test_1d_grad": [
                    "self"
                ],
                "test_2d": [
                    "self"
                ],
                "test_njev": [
                    "self"
                ],
                "test_jac": [
                    "self"
                ],
                "test_2d_nograd": [
                    "self"
                ],
                "test_all_minimizers": [
                    "self"
                ],
                "test_all_nograd_minimizers": [
                    "self"
                ],
                "test_pass_takestep": [
                    "self"
                ],
                "test_pass_simple_takestep": [
                    "self"
                ],
                "test_pass_accept_test": [
                    "self"
                ],
                "test_pass_callback": [
                    "self"
                ],
                "test_minimizer_fail": [
                    "self"
                ],
                "test_niter_zero": [
                    "self"
                ],
                "test_seed_reproducibility": [
                    "self"
                ],
                "test_random_gen": [
                    "self"
                ],
                "test_monotonic_basin_hopping": [
                    "self"
                ]
            },
            "Test_Storage": {
                "setup_method": [
                    "self"
                ],
                "test_higher_f_rejected": [
                    "self"
                ],
                "test_lower_f_accepted": [
                    "self"
                ]
            },
            "Test_RandomDisplacement": {
                "setup_method": [
                    "self"
                ],
                "test_random": [
                    "self"
                ]
            },
            "Test_Metropolis": {
                "setup_method": [
                    "self"
                ],
                "test_boolean_return": [
                    "self"
                ],
                "test_lower_f_accepted": [
                    "self"
                ],
                "test_KeyError": [
                    "self"
                ],
                "test_accept": [
                    "self"
                ],
                "test_GH7495": [
                    "self"
                ]
            },
            "Test_AdaptiveStepsize": {
                "setup_method": [
                    "self"
                ],
                "test_adaptive_increase": [
                    "self"
                ],
                "test_adaptive_decrease": [
                    "self"
                ],
                "test_all_accepted": [
                    "self"
                ],
                "test_all_rejected": [
                    "self"
                ]
            }
        },
        "scipy.optimize.tests.test_quadratic_assignment": {
            "chr12c": [],
            "_range_matrix": [
                "a",
                "b"
            ],
            "_doubly_stochastic": [
                "P",
                "tol"
            ],
            "QAPCommonTests": {
                "setup_method": [
                    "self"
                ],
                "test_accuracy_1": [
                    "self"
                ],
                "test_accuracy_2": [
                    "self"
                ],
                "test_accuracy_3": [
                    "self"
                ],
                "test_unknown_options": [
                    "self"
                ]
            },
            "TestFAQ": {
                "test_options": [
                    "self"
                ],
                "test_specific_input_validation": [
                    "self"
                ]
            },
            "Test2opt": {
                "test_deterministic": [
                    "self"
                ],
                "test_partial_guess": [
                    "self"
                ],
                "test_specific_input_validation": [
                    "self"
                ]
            },
            "TestQAPOnce": {
                "setup_method": [
                    "self"
                ],
                "test_common_input_validation": [
                    "self"
                ]
            }
        },
        "scipy.optimize.tests.test_slsqp": {
            "MyCallBack": {
                "__init__": [
                    "self"
                ],
                "__call__": [
                    "self",
                    "x"
                ]
            },
            "TestSLSQP": {
                "setup_method": [
                    "self"
                ],
                "fun": [
                    "self",
                    "d",
                    "sign"
                ],
                "jac": [
                    "self",
                    "d",
                    "sign"
                ],
                "fun_and_jac": [
                    "self",
                    "d",
                    "sign"
                ],
                "f_eqcon": [
                    "self",
                    "x",
                    "sign"
                ],
                "fprime_eqcon": [
                    "self",
                    "x",
                    "sign"
                ],
                "f_eqcon_scalar": [
                    "self",
                    "x",
                    "sign"
                ],
                "fprime_eqcon_scalar": [
                    "self",
                    "x",
                    "sign"
                ],
                "f_ieqcon": [
                    "self",
                    "x",
                    "sign"
                ],
                "fprime_ieqcon": [
                    "self",
                    "x",
                    "sign"
                ],
                "f_ieqcon2": [
                    "self",
                    "x"
                ],
                "fprime_ieqcon2": [
                    "self",
                    "x"
                ],
                "test_minimize_unbounded_approximated": [
                    "self"
                ],
                "test_minimize_unbounded_given": [
                    "self"
                ],
                "test_minimize_bounded_approximated": [
                    "self"
                ],
                "test_minimize_unbounded_combined": [
                    "self"
                ],
                "test_minimize_equality_approximated": [
                    "self"
                ],
                "test_minimize_equality_given": [
                    "self"
                ],
                "test_minimize_equality_given2": [
                    "self"
                ],
                "test_minimize_equality_given_cons_scalar": [
                    "self"
                ],
                "test_minimize_inequality_given": [
                    "self"
                ],
                "test_minimize_inequality_given_vector_constraints": [
                    "self"
                ],
                "test_minimize_bounded_constraint": [
                    "self"
                ],
                "test_minimize_bound_equality_given2": [
                    "self"
                ],
                "test_unbounded_approximated": [
                    "self"
                ],
                "test_unbounded_given": [
                    "self"
                ],
                "test_equality_approximated": [
                    "self"
                ],
                "test_equality_given": [
                    "self"
                ],
                "test_equality_given2": [
                    "self"
                ],
                "test_inequality_given": [
                    "self"
                ],
                "test_bound_equality_given2": [
                    "self"
                ],
                "test_scalar_constraints": [
                    "self"
                ],
                "test_integer_bounds": [
                    "self"
                ],
                "test_array_bounds": [
                    "self"
                ],
                "test_obj_must_return_scalar": [
                    "self"
                ],
                "test_obj_returns_scalar_in_list": [
                    "self"
                ],
                "test_callback": [
                    "self"
                ],
                "test_inconsistent_linearization": [
                    "self"
                ],
                "test_regression_5743": [
                    "self"
                ],
                "test_gh_6676": [
                    "self"
                ],
                "test_invalid_bounds": [
                    "self"
                ],
                "test_bounds_clipping": [
                    "self"
                ],
                "test_infeasible_initial": [
                    "self"
                ],
                "test_inconsistent_inequalities": [
                    "self"
                ],
                "test_new_bounds_type": [
                    "self"
                ],
                "test_nested_minimization": [
                    "self"
                ],
                "test_gh1758": [
                    "self"
                ],
                "test_gh9640": [
                    "self"
                ],
                "test_parameters_stay_within_bounds": [
                    "self"
                ]
            }
        },
        "scipy.optimize.tests.test_minpack": {
            "dummy_func": [
                "x",
                "shape"
            ],
            "sequence_parallel": [
                "fs"
            ],
            "pressure_network": [
                "flow_rates",
                "Qtot",
                "k"
            ],
            "pressure_network_jacobian": [
                "flow_rates",
                "Qtot",
                "k"
            ],
            "pressure_network_fun_and_grad": [
                "flow_rates",
                "Qtot",
                "k"
            ],
            "ReturnShape": {
                "__init__": [
                    "self",
                    "shape"
                ],
                "__call__": [
                    "self",
                    "x"
                ]
            },
            "TestFSolve": {
                "test_pressure_network_no_gradient": [
                    "self"
                ],
                "test_pressure_network_with_gradient": [
                    "self"
                ],
                "test_wrong_shape_func_callable": [
                    "self"
                ],
                "test_wrong_shape_func_function": [
                    "self"
                ],
                "test_wrong_shape_fprime_callable": [
                    "self"
                ],
                "test_wrong_shape_fprime_function": [
                    "self"
                ],
                "test_func_can_raise": [
                    "self"
                ],
                "test_Dfun_can_raise": [
                    "self"
                ],
                "test_float32": [
                    "self"
                ],
                "test_reentrant_func": [
                    "self"
                ],
                "test_reentrant_Dfunc": [
                    "self"
                ],
                "test_concurrent_no_gradient": [
                    "self"
                ],
                "test_concurrent_with_gradient": [
                    "self"
                ]
            },
            "TestRootHybr": {
                "test_pressure_network_no_gradient": [
                    "self"
                ],
                "test_pressure_network_with_gradient": [
                    "self"
                ],
                "test_pressure_network_with_gradient_combined": [
                    "self"
                ]
            },
            "TestRootLM": {
                "test_pressure_network_no_gradient": [
                    "self"
                ]
            },
            "TestLeastSq": {
                "setup_method": [
                    "self"
                ],
                "residuals": [
                    "self",
                    "p",
                    "y",
                    "x"
                ],
                "residuals_jacobian": [
                    "self",
                    "_p",
                    "_y",
                    "x"
                ],
                "test_basic": [
                    "self"
                ],
                "test_basic_with_gradient": [
                    "self"
                ],
                "test_full_output": [
                    "self"
                ],
                "test_input_untouched": [
                    "self"
                ],
                "test_wrong_shape_func_callable": [
                    "self"
                ],
                "test_wrong_shape_func_function": [
                    "self"
                ],
                "test_wrong_shape_Dfun_callable": [
                    "self"
                ],
                "test_wrong_shape_Dfun_function": [
                    "self"
                ],
                "test_float32": [
                    "self"
                ],
                "test_func_can_raise": [
                    "self"
                ],
                "test_Dfun_can_raise": [
                    "self"
                ],
                "test_reentrant_func": [
                    "self"
                ],
                "test_reentrant_Dfun": [
                    "self"
                ],
                "test_concurrent_no_gradient": [
                    "self"
                ],
                "test_concurrent_with_gradient": [
                    "self"
                ]
            },
            "TestCurveFit": {
                "setup_method": [
                    "self"
                ],
                "test_one_argument": [
                    "self"
                ],
                "test_two_argument": [
                    "self"
                ],
                "test_func_is_classmethod": [
                    "self"
                ],
                "test_regression_2639": [
                    "self"
                ],
                "test_pcov": [
                    "self"
                ],
                "test_array_like": [
                    "self"
                ],
                "test_indeterminate_covariance": [
                    "self"
                ],
                "test_NaN_handling": [
                    "self"
                ],
                "test_empty_inputs": [
                    "self"
                ],
                "test_function_zero_params": [
                    "self"
                ],
                "test_None_x": [
                    "self"
                ],
                "test_method_argument": [
                    "self"
                ],
                "test_bounds": [
                    "self"
                ],
                "test_bounds_p0": [
                    "self"
                ],
                "test_jac": [
                    "self"
                ],
                "test_maxfev_and_bounds": [
                    "self"
                ],
                "test_curvefit_simplecovariance": [
                    "self"
                ],
                "test_curvefit_covariance": [
                    "self"
                ],
                "test_dtypes": [
                    "self"
                ],
                "test_dtypes2": [
                    "self"
                ],
                "test_broadcast_y": [
                    "self"
                ],
                "test_args_in_kwargs": [
                    "self"
                ]
            },
            "TestFixedPoint": {
                "test_scalar_trivial": [
                    "self"
                ],
                "test_scalar_basic1": [
                    "self"
                ],
                "test_scalar_basic2": [
                    "self"
                ],
                "test_array_trivial": [
                    "self"
                ],
                "test_array_basic1": [
                    "self"
                ],
                "test_array_basic2": [
                    "self"
                ],
                "test_lambertw": [
                    "self"
                ],
                "test_no_acceleration": [
                    "self"
                ]
            }
        },
        "scipy.optimize.tests.test_trustregion_krylov": {
            "TestKrylovQuadraticSubproblem": {
                "test_for_the_easy_case": [
                    "self"
                ],
                "test_for_the_hard_case": [
                    "self"
                ],
                "test_for_interior_convergence": [
                    "self"
                ],
                "test_for_very_close_to_zero": [
                    "self"
                ],
                "test_disp": [
                    "self",
                    "capsys"
                ]
            }
        },
        "scipy.optimize.tests.test_optimize": {
            "test_check_grad": [],
            "test_obj_func_returns_scalar": [],
            "test_neldermead_xatol_fatol": [],
            "test_neldermead_adaptive": [],
            "test_bounded_powell_outsidebounds": [],
            "test_bounded_powell_vs_powell": [],
            "test_onesided_bounded_powell_stability": [],
            "test_brent_negative_tolerance": [],
            "test_line_for_search": [],
            "test_linesearch_powell": [],
            "test_linesearch_powell_bounded": [],
            "himmelblau": [
                "p"
            ],
            "himmelblau_grad": [
                "p"
            ],
            "himmelblau_hess": [
                "p"
            ],
            "test_minimize_multiple_constraints": [],
            "f1": [
                "z"
            ],
            "f2": [
                "z"
            ],
            "f3": [
                "z"
            ],
            "brute_func": [
                "z"
            ],
            "test_cobyla_threadsafe": [],
            "test_result_x_shape_when_len_x_is_one": [],
            "function_with_gradient": [],
            "test_memoize_jac_function_before_gradient": [
                "function_with_gradient"
            ],
            "test_memoize_jac_gradient_before_function": [
                "function_with_gradient"
            ],
            "test_memoize_jac_with_bfgs": [
                "function_with_gradient"
            ],
            "test_gh12696": [],
            "test_show_options": [],
            "CheckOptimize": {
                "setup_method": [
                    "self"
                ],
                "func": [
                    "self",
                    "x"
                ],
                "grad": [
                    "self",
                    "x"
                ],
                "hess": [
                    "self",
                    "x"
                ],
                "hessp": [
                    "self",
                    "x",
                    "p"
                ]
            },
            "CheckOptimizeParameterized": {
                "test_cg": [
                    "self"
                ],
                "test_cg_cornercase": [
                    "self"
                ],
                "test_bfgs": [
                    "self"
                ],
                "test_bfgs_infinite": [
                    "self"
                ],
                "test_powell": [
                    "self"
                ],
                "test_powell_bounded": [
                    "self"
                ],
                "test_neldermead": [
                    "self"
                ],
                "test_neldermead_initial_simplex": [
                    "self"
                ],
                "test_neldermead_initial_simplex_bad": [
                    "self"
                ],
                "test_ncg_negative_maxiter": [
                    "self"
                ],
                "test_ncg": [
                    "self"
                ],
                "test_ncg_hess": [
                    "self"
                ],
                "test_ncg_hessp": [
                    "self"
                ]
            },
            "TestOptimizeWrapperDisp": {},
            "TestOptimizeWrapperNoDisp": {},
            "TestOptimizeNoWrapperDisp": {},
            "TestOptimizeNoWrapperNoDisp": {},
            "TestOptimizeSimple": {
                "test_bfgs_nan": [
                    "self"
                ],
                "test_bfgs_nan_return": [
                    "self"
                ],
                "test_bfgs_numerical_jacobian": [
                    "self"
                ],
                "test_finite_differences": [
                    "self"
                ],
                "test_bfgs_gh_2169": [
                    "self"
                ],
                "test_bfgs_double_evaluations": [
                    "self"
                ],
                "test_l_bfgs_b": [
                    "self"
                ],
                "test_l_bfgs_b_numjac": [
                    "self"
                ],
                "test_l_bfgs_b_funjac": [
                    "self"
                ],
                "test_l_bfgs_b_maxiter": [
                    "self"
                ],
                "test_minimize_l_bfgs_b": [
                    "self"
                ],
                "test_minimize_l_bfgs_b_ftol": [
                    "self"
                ],
                "test_minimize_l_bfgs_maxls": [
                    "self"
                ],
                "test_minimize_l_bfgs_b_maxfun_interruption": [
                    "self"
                ],
                "test_custom": [
                    "self"
                ],
                "test_gh10771": [
                    "self"
                ],
                "test_minimize_tol_parameter": [
                    "self"
                ],
                "test_minimize_callback_copies_array": [
                    "self",
                    "method"
                ],
                "test_no_increase": [
                    "self",
                    "method"
                ],
                "test_slsqp_respect_bounds": [
                    "self"
                ],
                "test_respect_maxiter": [
                    "self",
                    "method"
                ],
                "test_respect_maxiter_trust_constr_ineq_constraints": [
                    "self"
                ],
                "test_minimize_automethod": [
                    "self"
                ],
                "test_minimize_coerce_args_param": [
                    "self"
                ],
                "test_initial_step_scaling": [
                    "self"
                ],
                "test_nan_values": [
                    "self",
                    "method"
                ],
                "test_duplicate_evaluations": [
                    "self",
                    "method"
                ]
            },
            "TestLBFGSBBounds": {
                "setup_method": [
                    "self"
                ],
                "fun": [
                    "self",
                    "x",
                    "p"
                ],
                "jac": [
                    "self",
                    "x",
                    "p"
                ],
                "fj": [
                    "self",
                    "x",
                    "p"
                ],
                "test_l_bfgs_b_bounds": [
                    "self"
                ],
                "test_l_bfgs_b_funjac": [
                    "self"
                ],
                "test_minimize_l_bfgs_b_bounds": [
                    "self"
                ],
                "test_minimize_l_bfgs_b_incorrect_bounds": [
                    "self",
                    "bounds"
                ],
                "test_minimize_l_bfgs_b_bounds_FD": [
                    "self"
                ]
            },
            "TestOptimizeScalar": {
                "setup_method": [
                    "self"
                ],
                "fun": [
                    "self",
                    "x",
                    "a"
                ],
                "test_brent": [
                    "self"
                ],
                "test_golden": [
                    "self"
                ],
                "test_fminbound": [
                    "self"
                ],
                "test_fminbound_scalar": [
                    "self"
                ],
                "test_gh11207": [
                    "self"
                ],
                "test_minimize_scalar": [
                    "self"
                ],
                "test_minimize_scalar_custom": [
                    "self"
                ],
                "test_minimize_scalar_coerce_args_param": [
                    "self"
                ],
                "test_nan_values": [
                    "self",
                    "method"
                ]
            },
            "TestNewtonCg": {
                "test_rosenbrock": [
                    "self"
                ],
                "test_himmelblau": [
                    "self"
                ]
            },
            "TestRosen": {
                "test_hess": [
                    "self"
                ]
            },
            "TestOptimizeResultAttributes": {
                "setup_method": [
                    "self"
                ],
                "test_attributes_present": [
                    "self"
                ]
            },
            "TestBrute": {
                "setup_method": [
                    "self"
                ],
                "brute_func": [
                    "self",
                    "z"
                ],
                "test_brute": [
                    "self"
                ],
                "test_1D": [
                    "self"
                ],
                "test_workers": [
                    "self"
                ]
            },
            "TestIterationLimits": {
                "setup_method": [
                    "self"
                ],
                "slow_func": [
                    "self",
                    "v"
                ],
                "test_neldermead_limit": [
                    "self"
                ],
                "test_powell_limit": [
                    "self"
                ],
                "check_limits": [
                    "self",
                    "method",
                    "default_iters"
                ]
            },
            "FunctionWithGradient": {
                "__init__": [
                    "self"
                ],
                "__call__": [
                    "self",
                    "x"
                ]
            }
        },
        "scipy.optimize.tests.test_regression": {
            "TestRegression": {
                "test_newton_x0_is_0": [
                    "self"
                ],
                "test_newton_integers": [
                    "self"
                ],
                "test_lmdif_errmsg": [
                    "self"
                ]
            }
        },
        "scipy.optimize.tests.test__numdiff": {
            "test_group_columns": [],
            "test_correct_eps": [],
            "test_absolute_step": [],
            "TestAdjustSchemeToBounds": {
                "test_no_bounds": [
                    "self"
                ],
                "test_with_bound": [
                    "self"
                ],
                "test_tight_bounds": [
                    "self"
                ]
            },
            "TestApproxDerivativesDense": {
                "fun_scalar_scalar": [
                    "self",
                    "x"
                ],
                "jac_scalar_scalar": [
                    "self",
                    "x"
                ],
                "fun_scalar_vector": [
                    "self",
                    "x"
                ],
                "jac_scalar_vector": [
                    "self",
                    "x"
                ],
                "fun_vector_scalar": [
                    "self",
                    "x"
                ],
                "wrong_dimensions_fun": [
                    "self",
                    "x"
                ],
                "jac_vector_scalar": [
                    "self",
                    "x"
                ],
                "fun_vector_vector": [
                    "self",
                    "x"
                ],
                "jac_vector_vector": [
                    "self",
                    "x"
                ],
                "fun_parametrized": [
                    "self",
                    "x",
                    "c0",
                    "c1"
                ],
                "jac_parametrized": [
                    "self",
                    "x",
                    "c0",
                    "c1"
                ],
                "fun_with_nan": [
                    "self",
                    "x"
                ],
                "jac_with_nan": [
                    "self",
                    "x"
                ],
                "fun_zero_jacobian": [
                    "self",
                    "x"
                ],
                "jac_zero_jacobian": [
                    "self",
                    "x"
                ],
                "fun_non_numpy": [
                    "self",
                    "x"
                ],
                "jac_non_numpy": [
                    "self",
                    "x"
                ],
                "test_scalar_scalar": [
                    "self"
                ],
                "test_scalar_scalar_abs_step": [
                    "self"
                ],
                "test_scalar_vector": [
                    "self"
                ],
                "test_vector_scalar": [
                    "self"
                ],
                "test_vector_scalar_abs_step": [
                    "self"
                ],
                "test_vector_vector": [
                    "self"
                ],
                "test_wrong_dimensions": [
                    "self"
                ],
                "test_custom_rel_step": [
                    "self"
                ],
                "test_options": [
                    "self"
                ],
                "test_with_bounds_2_point": [
                    "self"
                ],
                "test_with_bounds_3_point": [
                    "self"
                ],
                "test_tight_bounds": [
                    "self"
                ],
                "test_bound_switches": [
                    "self"
                ],
                "test_non_numpy": [
                    "self"
                ],
                "test_fp": [
                    "self"
                ],
                "test_check_derivative": [
                    "self"
                ]
            },
            "TestApproxDerivativeSparse": {
                "setup_method": [
                    "self"
                ],
                "fun": [
                    "self",
                    "x"
                ],
                "jac": [
                    "self",
                    "x"
                ],
                "structure": [
                    "self",
                    "n"
                ],
                "test_all": [
                    "self"
                ],
                "test_no_precomputed_groups": [
                    "self"
                ],
                "test_equivalence": [
                    "self"
                ],
                "test_check_derivative": [
                    "self"
                ]
            },
            "TestApproxDerivativeLinearOperator": {
                "fun_scalar_scalar": [
                    "self",
                    "x"
                ],
                "jac_scalar_scalar": [
                    "self",
                    "x"
                ],
                "fun_scalar_vector": [
                    "self",
                    "x"
                ],
                "jac_scalar_vector": [
                    "self",
                    "x"
                ],
                "fun_vector_scalar": [
                    "self",
                    "x"
                ],
                "jac_vector_scalar": [
                    "self",
                    "x"
                ],
                "fun_vector_vector": [
                    "self",
                    "x"
                ],
                "jac_vector_vector": [
                    "self",
                    "x"
                ],
                "test_scalar_scalar": [
                    "self"
                ],
                "test_scalar_vector": [
                    "self"
                ],
                "test_vector_scalar": [
                    "self"
                ],
                "test_vector_vector": [
                    "self"
                ],
                "test_exception": [
                    "self"
                ]
            }
        },
        "scipy.optimize.tests.test_constraint_conversion": {
            "TestOldToNew": {
                "test_constraint_dictionary_1": [
                    "self"
                ],
                "test_constraint_dictionary_2": [
                    "self"
                ],
                "test_constraint_dictionary_3": [
                    "self"
                ]
            },
            "TestNewToOld": {
                "test_multiple_constraint_objects": [
                    "self"
                ],
                "test_individual_constraint_objects": [
                    "self"
                ]
            },
            "TestNewToOldSLSQP": {
                "test_list_of_problems": [
                    "self"
                ],
                "test_warn_mixed_constraints": [
                    "self"
                ],
                "test_warn_ignored_options": [
                    "self"
                ]
            },
            "TestNewToOldCobyla": {
                "test_list_of_problems": [
                    "self"
                ]
            }
        },
        "scipy.optimize.tests.test_constraints": {
            "test_prepare_constraint_infeasible_x0": [],
            "test_violation": [],
            "test_new_bounds_to_old": [],
            "test_old_bounds_to_new": [],
            "test_bounds_repr": [],
            "TestStrictBounds": {
                "test_scalarvalue_unique_enforce_feasibility": [
                    "self"
                ],
                "test_vectorvalue_unique_enforce_feasibility": [
                    "self"
                ],
                "test_scalarvalue_vector_enforce_feasibility": [
                    "self"
                ],
                "test_vectorvalue_vector_enforce_feasibility": [
                    "self"
                ]
            }
        },
        "scipy.optimize.tests.test__root": {
            "TestRoot": {
                "test_tol_parameter": [
                    "self"
                ],
                "test_tol_norm": [
                    "self"
                ],
                "test_minimize_scalar_coerce_args_param": [
                    "self"
                ],
                "test_f_size": [
                    "self"
                ]
            }
        },
        "scipy.optimize.tests.test_zeros": {
            "f1": [
                "x"
            ],
            "f1_1": [
                "x"
            ],
            "f1_2": [
                "x"
            ],
            "f1_and_p_and_pp": [
                "x"
            ],
            "f2": [
                "x"
            ],
            "f2_1": [
                "x"
            ],
            "f2_2": [
                "x"
            ],
            "f_lrucached": [
                "x"
            ],
            "test_gh_5555": [],
            "test_gh_5557": [],
            "test_complex_halley": [],
            "test_zero_der_nz_dp": [],
            "test_array_newton_failures": [],
            "test_gh8904_zeroder_at_root_fails": [],
            "test_gh_8881": [],
            "test_gh_9608_preserve_array_shape": [],
            "test_gh9254_flag_if_maxiter_exceeded": [
                "maximum_iterations",
                "flag_expected"
            ],
            "test_gh9551_raise_error_if_disp_true": [],
            "TestBasic": {
                "run_check_by_name": [
                    "self",
                    "name",
                    "smoothness"
                ],
                "run_check": [
                    "self",
                    "method",
                    "name"
                ],
                "run_check_lru_cached": [
                    "self",
                    "method",
                    "name"
                ],
                "_run_one_test": [
                    "self",
                    "tc",
                    "method",
                    "sig_args_keys",
                    "sig_kwargs_keys"
                ],
                "run_tests": [
                    "self",
                    "tests",
                    "method",
                    "name",
                    "xtol",
                    "rtol",
                    "known_fail"
                ],
                "run_collection": [
                    "self",
                    "collection",
                    "method",
                    "name",
                    "smoothness",
                    "known_fail",
                    "xtol",
                    "rtol"
                ],
                "test_bisect": [
                    "self"
                ],
                "test_ridder": [
                    "self"
                ],
                "test_brentq": [
                    "self"
                ],
                "test_brenth": [
                    "self"
                ],
                "test_toms748": [
                    "self"
                ],
                "test_newton_collections": [
                    "self"
                ],
                "test_halley_collections": [
                    "self"
                ],
                "f1": [
                    "x"
                ],
                "f1_1": [
                    "x"
                ],
                "f1_2": [
                    "x"
                ],
                "f2": [
                    "x"
                ],
                "f2_1": [
                    "x"
                ],
                "f2_2": [
                    "x"
                ],
                "test_newton": [
                    "self"
                ],
                "test_newton_by_name": [
                    "self"
                ],
                "test_secant_by_name": [
                    "self"
                ],
                "test_halley_by_name": [
                    "self"
                ],
                "test_root_scalar_fail": [
                    "self"
                ],
                "test_array_newton": [
                    "self"
                ],
                "test_array_newton_complex": [
                    "self"
                ],
                "test_array_secant_active_zero_der": [
                    "self"
                ],
                "test_array_newton_integers": [
                    "self"
                ],
                "test_array_newton_zero_der_failures": [
                    "self"
                ],
                "test_newton_combined": [
                    "self"
                ],
                "test_newton_full_output": [
                    "self"
                ],
                "test_deriv_zero_warning": [
                    "self"
                ],
                "test_newton_does_not_modify_x0": [
                    "self"
                ],
                "test_maxiter_int_check": [
                    "self"
                ]
            },
            "TestRootResults": {
                "test_repr": [
                    "self"
                ]
            }
        },
        "scipy.optimize.tests.test__differential_evolution": {
            "TestDifferentialEvolutionSolver": {
                "setup_method": [
                    "self"
                ],
                "teardown_method": [
                    "self"
                ],
                "quadratic": [
                    "self",
                    "x"
                ],
                "test__strategy_resolves": [
                    "self"
                ],
                "test__mutate1": [
                    "self"
                ],
                "test__mutate2": [
                    "self"
                ],
                "test__randtobest1": [
                    "self"
                ],
                "test__currenttobest1": [
                    "self"
                ],
                "test_can_init_with_dithering": [
                    "self"
                ],
                "test_invalid_mutation_values_arent_accepted": [
                    "self"
                ],
                "test__scale_parameters": [
                    "self"
                ],
                "test__unscale_parameters": [
                    "self"
                ],
                "test__ensure_constraint": [
                    "self"
                ],
                "test_differential_evolution": [
                    "self"
                ],
                "test_best_solution_retrieval": [
                    "self"
                ],
                "test_callback_terminates": [
                    "self"
                ],
                "test_args_tuple_is_passed": [
                    "self"
                ],
                "test_init_with_invalid_strategy": [
                    "self"
                ],
                "test_bounds_checking": [
                    "self"
                ],
                "test_select_samples": [
                    "self"
                ],
                "test_maxiter_stops_solve": [
                    "self"
                ],
                "test_maxfun_stops_solve": [
                    "self"
                ],
                "test_quadratic": [
                    "self"
                ],
                "test_quadratic_from_diff_ev": [
                    "self"
                ],
                "test_seed_gives_repeatability": [
                    "self"
                ],
                "test_random_generator": [
                    "self"
                ],
                "test_exp_runs": [
                    "self"
                ],
                "test_gh_4511_regression": [
                    "self"
                ],
                "test_calculate_population_energies": [
                    "self"
                ],
                "test_iteration": [
                    "self"
                ],
                "test_convergence": [
                    "self"
                ],
                "test_maxiter_none_GH5731": [
                    "self"
                ],
                "test_population_initiation": [
                    "self"
                ],
                "test_infinite_objective_function": [
                    "self"
                ],
                "test_deferred_updating": [
                    "self"
                ],
                "test_immediate_updating": [
                    "self"
                ],
                "test_parallel": [
                    "self"
                ],
                "test_converged": [
                    "self"
                ],
                "test_constraint_violation_fn": [
                    "self"
                ],
                "test_constraint_population_feasibilities": [
                    "self"
                ],
                "test_constraint_solve": [
                    "self"
                ],
                "test_impossible_constraint": [
                    "self"
                ],
                "test_accept_trial": [
                    "self"
                ],
                "test_constraint_wrapper": [
                    "self"
                ],
                "test_constraint_wrapper_violation": [
                    "self"
                ],
                "test_L1": [
                    "self"
                ],
                "test_L2": [
                    "self"
                ],
                "test_L3": [
                    "self"
                ],
                "test_L4": [
                    "self"
                ],
                "test_L5": [
                    "self"
                ],
                "test_L6": [
                    "self"
                ],
                "test_L7": [
                    "self"
                ],
                "test_L8": [
                    "self"
                ],
                "test_L9": [
                    "self"
                ]
            }
        },
        "scipy.optimize.tests.test_linprog": {
            "_assert_iteration_limit_reached": [
                "res",
                "maxiter"
            ],
            "_assert_infeasible": [
                "res"
            ],
            "_assert_unbounded": [
                "res"
            ],
            "_assert_unable_to_find_basic_feasible_sol": [
                "res"
            ],
            "_assert_success": [
                "res",
                "desired_fun",
                "desired_x",
                "rtol",
                "atol"
            ],
            "magic_square": [
                "n"
            ],
            "lpgen_2d": [
                "m",
                "n"
            ],
            "very_random_gen": [
                "seed"
            ],
            "nontrivial_problem": [],
            "generic_callback_test": [
                "self"
            ],
            "test_unknown_solvers_and_options": [],
            "test_choose_solver": [],
            "LinprogCommonTests": {
                "test_callback": [
                    "self"
                ],
                "test_disp": [
                    "self"
                ],
                "test_docstring_example": [
                    "self"
                ],
                "test_type_error": [
                    "self"
                ],
                "test_aliasing_b_ub": [
                    "self"
                ],
                "test_aliasing_b_eq": [
                    "self"
                ],
                "test_non_ndarray_args": [
                    "self"
                ],
                "test_unknown_options": [
                    "self"
                ],
                "test_invalid_inputs": [
                    "self"
                ],
                "test_maxiter": [
                    "self"
                ],
                "test_bounds_fixed": [
                    "self"
                ],
                "test_bounds_infeasible": [
                    "self"
                ],
                "test_bounds_infeasible_2": [
                    "self"
                ],
                "test_empty_constraint_1": [
                    "self"
                ],
                "test_empty_constraint_2": [
                    "self"
                ],
                "test_empty_constraint_3": [
                    "self"
                ],
                "test_inequality_constraints": [
                    "self"
                ],
                "test_inequality_constraints2": [
                    "self"
                ],
                "test_bounds_simple": [
                    "self"
                ],
                "test_bounded_below_only_1": [
                    "self"
                ],
                "test_bounded_below_only_2": [
                    "self"
                ],
                "test_bounded_above_only_1": [
                    "self"
                ],
                "test_bounded_above_only_2": [
                    "self"
                ],
                "test_bounds_infinity": [
                    "self"
                ],
                "test_bounds_mixed": [
                    "self"
                ],
                "test_bounds_equal_but_infeasible": [
                    "self"
                ],
                "test_bounds_equal_but_infeasible2": [
                    "self"
                ],
                "test_bounds_equal_no_presolve": [
                    "self"
                ],
                "test_zero_column_1": [
                    "self"
                ],
                "test_zero_column_2": [
                    "self"
                ],
                "test_zero_row_1": [
                    "self"
                ],
                "test_zero_row_2": [
                    "self"
                ],
                "test_zero_row_3": [
                    "self"
                ],
                "test_zero_row_4": [
                    "self"
                ],
                "test_singleton_row_eq_1": [
                    "self"
                ],
                "test_singleton_row_eq_2": [
                    "self"
                ],
                "test_singleton_row_ub_1": [
                    "self"
                ],
                "test_singleton_row_ub_2": [
                    "self"
                ],
                "test_infeasible": [
                    "self"
                ],
                "test_infeasible_inequality_bounds": [
                    "self"
                ],
                "test_unbounded": [
                    "self"
                ],
                "test_unbounded_below_no_presolve_corrected": [
                    "self"
                ],
                "test_unbounded_no_nontrivial_constraints_1": [
                    "self"
                ],
                "test_unbounded_no_nontrivial_constraints_2": [
                    "self"
                ],
                "test_cyclic_recovery": [
                    "self"
                ],
                "test_cyclic_bland": [
                    "self"
                ],
                "test_remove_redundancy_infeasibility": [
                    "self"
                ],
                "test_nontrivial_problem": [
                    "self"
                ],
                "test_lpgen_problem": [
                    "self"
                ],
                "test_network_flow": [
                    "self"
                ],
                "test_network_flow_limited_capacity": [
                    "self"
                ],
                "test_simplex_algorithm_wikipedia_example": [
                    "self"
                ],
                "test_enzo_example": [
                    "self"
                ],
                "test_enzo_example_b": [
                    "self"
                ],
                "test_enzo_example_c_with_degeneracy": [
                    "self"
                ],
                "test_enzo_example_c_with_unboundedness": [
                    "self"
                ],
                "test_enzo_example_c_with_infeasibility": [
                    "self"
                ],
                "test_basic_artificial_vars": [
                    "self"
                ],
                "test_optimize_result": [
                    "self"
                ],
                "test_bug_5400": [
                    "self"
                ],
                "test_bug_6139": [
                    "self"
                ],
                "test_bug_6690": [
                    "self"
                ],
                "test_bug_7044": [
                    "self"
                ],
                "test_bug_7237": [
                    "self"
                ],
                "test_bug_8174": [
                    "self"
                ],
                "test_bug_8174_2": [
                    "self"
                ],
                "test_bug_8561": [
                    "self"
                ],
                "test_bug_8662": [
                    "self"
                ],
                "test_bug_8663": [
                    "self"
                ],
                "test_bug_8664": [
                    "self"
                ],
                "test_bug_8973": [
                    "self"
                ],
                "test_bug_8973_2": [
                    "self"
                ],
                "test_bug_10124": [
                    "self"
                ],
                "test_bug_10349": [
                    "self"
                ],
                "test_bug_10466": [
                    "self"
                ]
            },
            "LinprogSimplexTests": {},
            "LinprogIPTests": {},
            "LinprogRSTests": {
                "test_bug_5400": [
                    "self"
                ],
                "test_bug_8662": [
                    "self"
                ],
                "test_network_flow": [
                    "self"
                ]
            },
            "LinprogHiGHSTests": {
                "test_callback": [
                    "self"
                ],
                "test_invalid_option_values": [
                    "self",
                    "options"
                ],
                "test_crossover": [
                    "self"
                ]
            },
            "TestLinprogSimplexDefault": {
                "setup_method": [
                    "self"
                ],
                "test_bug_5400": [
                    "self"
                ],
                "test_bug_7237_low_tol": [
                    "self"
                ],
                "test_bug_8174_low_tol": [
                    "self"
                ]
            },
            "TestLinprogSimplexBland": {
                "setup_method": [
                    "self"
                ],
                "test_bug_5400": [
                    "self"
                ],
                "test_bug_8174_low_tol": [
                    "self"
                ]
            },
            "TestLinprogSimplexNoPresolve": {
                "setup_method": [
                    "self"
                ],
                "test_bug_5400": [
                    "self"
                ],
                "test_bug_6139_low_tol": [
                    "self"
                ],
                "test_bug_7237_low_tol": [
                    "self"
                ],
                "test_bug_8174_low_tol": [
                    "self"
                ],
                "test_unbounded_no_nontrivial_constraints_1": [
                    "self"
                ],
                "test_unbounded_no_nontrivial_constraints_2": [
                    "self"
                ]
            },
            "TestLinprogIPDense": {},
            "TestLinprogIPSparse": {
                "test_bug_6139": [
                    "self"
                ],
                "test_bug_6690": [
                    "self"
                ],
                "test_magic_square_sparse_no_presolve": [
                    "self"
                ],
                "test_sparse_solve_options": [
                    "self"
                ]
            },
            "TestLinprogIPSparsePresolve": {
                "test_bug_6139": [
                    "self"
                ],
                "test_enzo_example_c_with_infeasibility": [
                    "self"
                ],
                "test_bug_6690": [
                    "self"
                ]
            },
            "TestLinprogIPSpecific": {
                "test_solver_select": [
                    "self"
                ],
                "test_unbounded_below_no_presolve_original": [
                    "self"
                ],
                "test_cholesky": [
                    "self"
                ],
                "test_alternate_initial_point": [
                    "self"
                ],
                "test_bug_8664": [
                    "self"
                ]
            },
            "TestLinprogRSCommon": {
                "test_cyclic_bland": [
                    "self"
                ],
                "test_nontrivial_problem_with_guess": [
                    "self"
                ],
                "test_nontrivial_problem_with_unbounded_variables": [
                    "self"
                ],
                "test_nontrivial_problem_with_bounded_variables": [
                    "self"
                ],
                "test_nontrivial_problem_with_negative_unbounded_variable": [
                    "self"
                ],
                "test_nontrivial_problem_with_bad_guess": [
                    "self"
                ],
                "test_redundant_constraints_with_guess": [
                    "self"
                ]
            },
            "TestLinprogRSBland": {},
            "TestLinprogHiGHSSimplexDual": {},
            "TestLinprogHiGHSIPM": {},
            "AutoscaleTests": {},
            "TestAutoscaleIP": {
                "test_bug_6139": [
                    "self"
                ]
            },
            "TestAutoscaleSimplex": {},
            "TestAutoscaleRS": {
                "test_nontrivial_problem_with_guess": [
                    "self"
                ],
                "test_nontrivial_problem_with_bad_guess": [
                    "self"
                ]
            },
            "RRTests": {},
            "TestRRSVD": {},
            "TestRRPivot": {},
            "TestRRID": {}
        },
        "scipy.optimize.tests.test_minimize_constrained": {
            "test_bug_11886": [],
            "Maratos": {
                "__init__": [
                    "self",
                    "degrees",
                    "constr_jac",
                    "constr_hess"
                ],
                "fun": [
                    "self",
                    "x"
                ],
                "grad": [
                    "self",
                    "x"
                ],
                "hess": [
                    "self",
                    "x"
                ],
                "constr": [
                    "self"
                ]
            },
            "MaratosTestArgs": {
                "__init__": [
                    "self",
                    "a",
                    "b",
                    "degrees",
                    "constr_jac",
                    "constr_hess"
                ],
                "_test_args": [
                    "self",
                    "a",
                    "b"
                ],
                "fun": [
                    "self",
                    "x",
                    "a",
                    "b"
                ],
                "grad": [
                    "self",
                    "x",
                    "a",
                    "b"
                ],
                "hess": [
                    "self",
                    "x",
                    "a",
                    "b"
                ],
                "constr": [
                    "self"
                ]
            },
            "MaratosGradInFunc": {
                "__init__": [
                    "self",
                    "degrees",
                    "constr_jac",
                    "constr_hess"
                ],
                "fun": [
                    "self",
                    "x"
                ],
                "grad": [
                    "self"
                ],
                "hess": [
                    "self",
                    "x"
                ],
                "constr": [
                    "self"
                ]
            },
            "HyperbolicIneq": {
                "__init__": [
                    "self",
                    "constr_jac",
                    "constr_hess"
                ],
                "fun": [
                    "self",
                    "x"
                ],
                "grad": [
                    "self",
                    "x"
                ],
                "hess": [
                    "self",
                    "x"
                ],
                "constr": [
                    "self"
                ]
            },
            "Rosenbrock": {
                "__init__": [
                    "self",
                    "n",
                    "random_state"
                ],
                "fun": [
                    "self",
                    "x"
                ],
                "grad": [
                    "self",
                    "x"
                ],
                "hess": [
                    "self",
                    "x"
                ],
                "constr": [
                    "self"
                ]
            },
            "IneqRosenbrock": {
                "__init__": [
                    "self",
                    "random_state"
                ],
                "constr": [
                    "self"
                ]
            },
            "BoundedRosenbrock": {
                "__init__": [
                    "self",
                    "random_state"
                ]
            },
            "EqIneqRosenbrock": {
                "__init__": [
                    "self",
                    "random_state"
                ],
                "constr": [
                    "self"
                ]
            },
            "Elec": {
                "__init__": [
                    "self",
                    "n_electrons",
                    "random_state",
                    "constr_jac",
                    "constr_hess"
                ],
                "_get_cordinates": [
                    "self",
                    "x"
                ],
                "_compute_coordinate_deltas": [
                    "self",
                    "x"
                ],
                "fun": [
                    "self",
                    "x"
                ],
                "grad": [
                    "self",
                    "x"
                ],
                "hess": [
                    "self",
                    "x"
                ],
                "constr": [
                    "self"
                ]
            },
            "TestTrustRegionConstr": {
                "test_list_of_problems": [
                    "self"
                ],
                "test_default_jac_and_hess": [
                    "self"
                ],
                "test_default_hess": [
                    "self"
                ],
                "test_no_constraints": [
                    "self"
                ],
                "test_hessp": [
                    "self"
                ],
                "test_args": [
                    "self"
                ],
                "test_raise_exception": [
                    "self"
                ],
                "test_issue_9044": [
                    "self"
                ]
            },
            "TestEmptyConstraint": {
                "test_empty_constraint": [
                    "self"
                ]
            }
        },
        "scipy.optimize.tests.test_nnls": {
            "TestNNLS": {
                "test_nnls": [
                    "self"
                ],
                "test_maxiter": [
                    "self"
                ]
            }
        },
        "scipy.optimize.tests": {},
        "scipy.optimize.tests.test_trustregion_exact": {
            "random_entry": [
                "n",
                "min_eig",
                "max_eig",
                "case"
            ],
            "TestEstimateSmallestSingularValue": {
                "test_for_ill_condiotioned_matrix": [
                    "self"
                ]
            },
            "TestSingularLeadingSubmatrix": {
                "test_for_already_singular_leading_submatrix": [
                    "self"
                ],
                "test_for_simetric_indefinite_matrix": [
                    "self"
                ],
                "test_for_first_element_equal_to_zero": [
                    "self"
                ]
            },
            "TestIterativeSubproblem": {
                "test_for_the_easy_case": [
                    "self"
                ],
                "test_for_the_hard_case": [
                    "self"
                ],
                "test_for_interior_convergence": [
                    "self"
                ],
                "test_for_jac_equal_zero": [
                    "self"
                ],
                "test_for_jac_very_close_to_zero": [
                    "self"
                ],
                "test_for_random_entries": [
                    "self"
                ]
            }
        },
        "scipy.optimize.tests.test_lbfgsb_setulb": {
            "objfun": [
                "x"
            ],
            "test_setulb_floatround": []
        },
        "scipy.optimize.tests.test_tnc": {
            "TestTnc": {
                "setup_method": [
                    "self"
                ],
                "f1": [
                    "self",
                    "x",
                    "a"
                ],
                "g1": [
                    "self",
                    "x",
                    "a"
                ],
                "fg1": [
                    "self",
                    "x",
                    "a"
                ],
                "f3": [
                    "self",
                    "x"
                ],
                "g3": [
                    "self",
                    "x"
                ],
                "fg3": [
                    "self",
                    "x"
                ],
                "f4": [
                    "self",
                    "x"
                ],
                "g4": [
                    "self",
                    "x"
                ],
                "fg4": [
                    "self",
                    "x"
                ],
                "f5": [
                    "self",
                    "x"
                ],
                "g5": [
                    "self",
                    "x"
                ],
                "fg5": [
                    "self",
                    "x"
                ],
                "f38": [
                    "self",
                    "x"
                ],
                "g38": [
                    "self",
                    "x"
                ],
                "fg38": [
                    "self",
                    "x"
                ],
                "f45": [
                    "self",
                    "x"
                ],
                "g45": [
                    "self",
                    "x"
                ],
                "fg45": [
                    "self",
                    "x"
                ],
                "test_minimize_tnc1": [
                    "self"
                ],
                "test_minimize_tnc1b": [
                    "self"
                ],
                "test_minimize_tnc1c": [
                    "self"
                ],
                "test_minimize_tnc2": [
                    "self"
                ],
                "test_minimize_tnc3": [
                    "self"
                ],
                "test_minimize_tnc4": [
                    "self"
                ],
                "test_minimize_tnc5": [
                    "self"
                ],
                "test_minimize_tnc38": [
                    "self"
                ],
                "test_minimize_tnc45": [
                    "self"
                ],
                "test_tnc1": [
                    "self"
                ],
                "test_tnc1b": [
                    "self"
                ],
                "test_tnc1c": [
                    "self"
                ],
                "test_tnc2": [
                    "self"
                ],
                "test_tnc3": [
                    "self"
                ],
                "test_tnc4": [
                    "self"
                ],
                "test_tnc5": [
                    "self"
                ],
                "test_tnc38": [
                    "self"
                ],
                "test_tnc45": [
                    "self"
                ]
            }
        },
        "scipy.optimize.tests.test__shgo": {
            "wrap_constraints": [
                "g"
            ],
            "run_test": [
                "test",
                "args",
                "test_atol",
                "n",
                "iters",
                "callback",
                "minimizer_kwargs",
                "options",
                "sampling_method"
            ],
            "StructTestFunction": {
                "__init__": [
                    "self",
                    "bounds",
                    "expected_x",
                    "expected_fun",
                    "expected_xl",
                    "expected_funl"
                ]
            },
            "StructTest1": {
                "f": [
                    "self",
                    "x"
                ],
                "g": [
                    "x"
                ]
            },
            "StructTest2": {
                "f": [
                    "self",
                    "x"
                ],
                "g": [
                    "x"
                ]
            },
            "StructTest3": {
                "f": [
                    "self",
                    "x"
                ],
                "g1": [
                    "x"
                ],
                "g2": [
                    "x"
                ]
            },
            "StructTest4": {
                "f": [
                    "self",
                    "x"
                ],
                "g1": [
                    "x"
                ],
                "g2": [
                    "x"
                ],
                "g3": [
                    "x"
                ],
                "g4": [
                    "x"
                ]
            },
            "StructTest5": {
                "f": [
                    "self",
                    "x"
                ]
            },
            "StructTestLJ": {
                "f": [
                    "self",
                    "x"
                ]
            },
            "StructTestTable": {
                "f": [
                    "self",
                    "x"
                ]
            },
            "StructTestInfeasible": {
                "f": [
                    "self",
                    "x"
                ],
                "g1": [
                    "x"
                ],
                "g2": [
                    "x"
                ],
                "g3": [
                    "x"
                ],
                "g4": [
                    "x"
                ]
            },
            "TestShgoSobolTestFunctions": {
                "test_f1_1_sobol": [
                    "self"
                ],
                "test_f1_2_sobol": [
                    "self"
                ],
                "test_f1_3_sobol": [
                    "self"
                ],
                "test_f2_1_sobol": [
                    "self"
                ],
                "test_f2_2_sobol": [
                    "self"
                ],
                "test_f3_sobol": [
                    "self"
                ],
                "test_f4_sobol": [
                    "self"
                ],
                "test_f5_1_sobol": [
                    "self"
                ],
                "test_f5_2_sobol": [
                    "self"
                ]
            },
            "TestShgoSimplicialTestFunctions": {
                "test_f1_1_simplicial": [
                    "self"
                ],
                "test_f1_2_simplicial": [
                    "self"
                ],
                "test_f1_3_simplicial": [
                    "self"
                ],
                "test_f2_1_simplicial": [
                    "self"
                ],
                "test_f2_2_simplicial": [
                    "self"
                ],
                "test_f3_simplicial": [
                    "self"
                ],
                "test_f4_simplicial": [
                    "self"
                ],
                "test_lj_symmetry": [
                    "self"
                ]
            },
            "TestShgoArguments": {
                "test_1_1_simpl_iter": [
                    "self"
                ],
                "test_1_2_simpl_iter": [
                    "self"
                ],
                "test_2_1_sobol_iter": [
                    "self"
                ],
                "test_2_2_sobol_iter": [
                    "self"
                ],
                "test_3_1_disp_simplicial": [
                    "self"
                ],
                "test_3_2_disp_sobol": [
                    "self"
                ],
                "test_4_1_known_f_min": [
                    "self"
                ],
                "test_4_2_known_f_min": [
                    "self"
                ],
                "test_4_3_known_f_min": [
                    "self"
                ],
                "test_4_4_known_f_min": [
                    "self"
                ],
                "test_5_1_simplicial_argless": [
                    "self"
                ],
                "test_5_2_sobol_argless": [
                    "self"
                ],
                "test_6_1_simplicial_max_iter": [
                    "self"
                ],
                "test_6_2_simplicial_min_iter": [
                    "self"
                ],
                "test_7_1_minkwargs": [
                    "self"
                ],
                "test_7_2_minkwargs": [
                    "self"
                ],
                "test_7_3_minkwargs": [
                    "self"
                ],
                "test_8_homology_group_diff": [
                    "self"
                ],
                "test_9_cons_g": [
                    "self"
                ],
                "test_10_finite_time": [
                    "self"
                ],
                "test_11_f_min_time": [
                    "self"
                ],
                "test_12_sobol_inf_cons": [
                    "self"
                ],
                "test_13_high_sobol": [
                    "self"
                ],
                "test_14_local_iter": [
                    "self"
                ],
                "test_15_min_every_iter": [
                    "self"
                ],
                "test_16_disp_bounds_minimizer": [
                    "self"
                ],
                "test_17_custom_sampling": [
                    "self"
                ]
            },
            "TestShgoFailures": {
                "test_1_maxiter": [
                    "self"
                ],
                "test_2_sampling": [
                    "self"
                ],
                "test_3_1_no_min_pool_sobol": [
                    "self"
                ],
                "test_3_2_no_min_pool_simplicial": [
                    "self"
                ],
                "test_4_1_bound_err": [
                    "self"
                ],
                "test_4_2_bound_err": [
                    "self"
                ],
                "test_5_1_1_infeasible_sobol": [
                    "self"
                ],
                "test_5_1_2_infeasible_sobol": [
                    "self"
                ],
                "test_5_2_infeasible_simplicial": [
                    "self"
                ],
                "test_6_1_lower_known_f_min": [
                    "self"
                ]
            }
        },
        "scipy.optimize.tests.test_lsq_linear": {
            "BaseMixin": {
                "setup_method": [
                    "self"
                ],
                "test_dense_no_bounds": [
                    "self"
                ],
                "test_dense_bounds": [
                    "self"
                ],
                "test_np_matrix": [
                    "self"
                ],
                "test_dense_rank_deficient": [
                    "self"
                ],
                "test_full_result": [
                    "self"
                ],
                "test_almost_singular": [
                    "self"
                ],
                "test_large_rank_deficient": [
                    "self"
                ],
                "test_convergence_small_matrix": [
                    "self"
                ]
            },
            "SparseMixin": {
                "test_sparse_and_LinearOperator": [
                    "self"
                ],
                "test_sparse_bounds": [
                    "self"
                ]
            },
            "TestTRF": {},
            "TestBVLS": {}
        },
        "scipy.optimize.tests.test_trustregion": {
            "Accumulator": {
                "__init__": [
                    "self"
                ],
                "__call__": [
                    "self",
                    "x"
                ]
            },
            "TestTrustRegionSolvers": {
                "setup_method": [
                    "self"
                ],
                "test_dogleg_accuracy": [
                    "self"
                ],
                "test_dogleg_callback": [
                    "self"
                ],
                "test_solver_concordance": [
                    "self"
                ],
                "test_trust_ncg_hessp": [
                    "self"
                ],
                "test_trust_ncg_start_in_optimum": [
                    "self"
                ],
                "test_trust_krylov_start_in_optimum": [
                    "self"
                ],
                "test_trust_exact_start_in_optimum": [
                    "self"
                ]
            }
        },
        "scipy.optimize.tests.test__spectral": {
            "test_performance": [],
            "test_complex": [],
            "test_linear_definite": [],
            "test_shape": [],
            "F_1": [
                "x",
                "n"
            ],
            "x0_1": [
                "n"
            ],
            "F_2": [
                "x",
                "n"
            ],
            "x0_2": [
                "n"
            ],
            "F_4": [
                "x",
                "n"
            ],
            "x0_4": [
                "n"
            ],
            "F_6": [
                "x",
                "n"
            ],
            "x0_6": [
                "n"
            ],
            "F_7": [
                "x",
                "n"
            ],
            "x0_7": [
                "n"
            ],
            "F_9": [
                "x",
                "n"
            ],
            "x0_9": [
                "n"
            ],
            "F_10": [
                "x",
                "n"
            ],
            "x0_10": [
                "n"
            ]
        },
        "scipy.optimize.tests.test__remove_redundancy": {
            "setup_module": [],
            "_assert_success": [
                "res",
                "desired_fun",
                "desired_x",
                "rtol",
                "atol"
            ],
            "redundancy_removed": [
                "A",
                "B"
            ],
            "RRCommonTests": {
                "test_no_redundancy": [
                    "self"
                ],
                "test_infeasible_zero_row": [
                    "self"
                ],
                "test_remove_zero_row": [
                    "self"
                ],
                "test_infeasible_m_gt_n": [
                    "self"
                ],
                "test_infeasible_m_eq_n": [
                    "self"
                ],
                "test_infeasible_m_lt_n": [
                    "self"
                ],
                "test_m_gt_n": [
                    "self"
                ],
                "test_m_gt_n_rank_deficient": [
                    "self"
                ],
                "test_m_lt_n_rank_deficient": [
                    "self"
                ],
                "test_dense1": [
                    "self"
                ],
                "test_dense2": [
                    "self"
                ],
                "test_dense3": [
                    "self"
                ],
                "test_m_gt_n_sparse": [
                    "self"
                ],
                "test_m_lt_n_sparse": [
                    "self"
                ],
                "test_m_eq_n_sparse": [
                    "self"
                ],
                "test_magic_square": [
                    "self"
                ],
                "test_magic_square2": [
                    "self"
                ]
            },
            "TestRRSVD": {
                "rr": [
                    "self",
                    "A",
                    "b"
                ]
            },
            "TestRRPivotDense": {
                "rr": [
                    "self",
                    "A",
                    "b"
                ]
            },
            "TestRRID": {
                "rr": [
                    "self",
                    "A",
                    "b"
                ]
            },
            "TestRRPivotSparse": {
                "rr": [
                    "self",
                    "A",
                    "b"
                ]
            }
        },
        "scipy.optimize.tests.test_least_squares": {
            "fun_trivial": [
                "x",
                "a"
            ],
            "jac_trivial": [
                "x",
                "a"
            ],
            "fun_2d_trivial": [
                "x"
            ],
            "jac_2d_trivial": [
                "x"
            ],
            "fun_rosenbrock": [
                "x"
            ],
            "jac_rosenbrock": [
                "x"
            ],
            "jac_rosenbrock_bad_dim": [
                "x"
            ],
            "fun_rosenbrock_cropped": [
                "x"
            ],
            "jac_rosenbrock_cropped": [
                "x"
            ],
            "fun_wrong_dimensions": [
                "x"
            ],
            "jac_wrong_dimensions": [
                "x",
                "a"
            ],
            "fun_bvp": [
                "x"
            ],
            "cubic_soft_l1": [
                "z"
            ],
            "test_basic": [],
            "test_small_tolerances_for_lm": [],
            "test_fp32_gh12991": [],
            "BroydenTridiagonal": {
                "__init__": [
                    "self",
                    "n",
                    "mode"
                ],
                "fun": [
                    "self",
                    "x"
                ],
                "_jac": [
                    "self",
                    "x"
                ]
            },
            "ExponentialFittingProblem": {
                "__init__": [
                    "self",
                    "a",
                    "b",
                    "noise",
                    "n_outliers",
                    "x_range",
                    "n_points",
                    "random_seed"
                ],
                "fun": [
                    "self",
                    "p"
                ],
                "jac": [
                    "self",
                    "p"
                ]
            },
            "BaseMixin": {
                "test_basic": [
                    "self"
                ],
                "test_args_kwargs": [
                    "self"
                ],
                "test_jac_options": [
                    "self"
                ],
                "test_nfev_options": [
                    "self"
                ],
                "test_x_scale_options": [
                    "self"
                ],
                "test_diff_step": [
                    "self"
                ],
                "test_incorrect_options_usage": [
                    "self"
                ],
                "test_full_result": [
                    "self"
                ],
                "test_full_result_single_fev": [
                    "self"
                ],
                "test_rosenbrock": [
                    "self"
                ],
                "test_rosenbrock_cropped": [
                    "self"
                ],
                "test_fun_wrong_dimensions": [
                    "self"
                ],
                "test_jac_wrong_dimensions": [
                    "self"
                ],
                "test_fun_and_jac_inconsistent_dimensions": [
                    "self"
                ],
                "test_x0_multidimensional": [
                    "self"
                ],
                "test_x0_complex_scalar": [
                    "self"
                ],
                "test_x0_complex_array": [
                    "self"
                ],
                "test_bvp": [
                    "self"
                ],
                "test_error_raised_when_all_tolerances_below_eps": [
                    "self"
                ],
                "test_convergence_with_only_one_tolerance_enabled": [
                    "self"
                ]
            },
            "BoundsMixin": {
                "test_inconsistent": [
                    "self"
                ],
                "test_infeasible": [
                    "self"
                ],
                "test_wrong_number": [
                    "self"
                ],
                "test_inconsistent_shape": [
                    "self"
                ],
                "test_in_bounds": [
                    "self"
                ],
                "test_bounds_shape": [
                    "self"
                ],
                "test_rosenbrock_bounds": [
                    "self"
                ]
            },
            "SparseMixin": {
                "test_exact_tr_solver": [
                    "self"
                ],
                "test_equivalence": [
                    "self"
                ],
                "test_tr_options": [
                    "self"
                ],
                "test_wrong_parameters": [
                    "self"
                ],
                "test_solver_selection": [
                    "self"
                ],
                "test_numerical_jac": [
                    "self"
                ],
                "test_with_bounds": [
                    "self"
                ],
                "test_wrong_jac_sparsity": [
                    "self"
                ],
                "test_linear_operator": [
                    "self"
                ],
                "test_x_scale_jac_scale": [
                    "self"
                ]
            },
            "LossFunctionMixin": {
                "test_options": [
                    "self"
                ],
                "test_fun": [
                    "self"
                ],
                "test_grad": [
                    "self"
                ],
                "test_jac": [
                    "self"
                ],
                "test_robustness": [
                    "self"
                ]
            },
            "TestDogbox": {},
            "TestTRF": {
                "test_lsmr_regularization": [
                    "self"
                ]
            },
            "TestLM": {
                "test_bounds_not_supported": [
                    "self"
                ],
                "test_m_less_n_not_supported": [
                    "self"
                ],
                "test_sparse_not_supported": [
                    "self"
                ],
                "test_jac_sparsity_not_supported": [
                    "self"
                ],
                "test_LinearOperator_not_supported": [
                    "self"
                ],
                "test_loss": [
                    "self"
                ]
            }
        },
        "scipy.optimize.tests.test_linesearch": {
            "assert_wolfe": [
                "s",
                "phi",
                "derphi",
                "c1",
                "c2",
                "err_msg"
            ],
            "assert_armijo": [
                "s",
                "phi",
                "c1",
                "err_msg"
            ],
            "assert_line_wolfe": [
                "x",
                "p",
                "s",
                "f",
                "fprime"
            ],
            "assert_line_armijo": [
                "x",
                "p",
                "s",
                "f"
            ],
            "assert_fp_equal": [
                "x",
                "y",
                "err_msg",
                "nulp"
            ],
            "TestLineSearch": {
                "_scalar_func_1": [
                    "self",
                    "s"
                ],
                "_scalar_func_2": [
                    "self",
                    "s"
                ],
                "_scalar_func_3": [
                    "self",
                    "s"
                ],
                "_line_func_1": [
                    "self",
                    "x"
                ],
                "_line_func_2": [
                    "self",
                    "x"
                ],
                "setup_method": [
                    "self"
                ],
                "scalar_iter": [
                    "self"
                ],
                "line_iter": [
                    "self"
                ],
                "test_scalar_search_wolfe1": [
                    "self"
                ],
                "test_scalar_search_wolfe2": [
                    "self"
                ],
                "test_scalar_search_wolfe2_with_low_amax": [
                    "self"
                ],
                "test_scalar_search_wolfe2_regression": [
                    "self"
                ],
                "test_scalar_search_armijo": [
                    "self"
                ],
                "test_line_search_wolfe1": [
                    "self"
                ],
                "test_line_search_wolfe2": [
                    "self"
                ],
                "test_line_search_wolfe2_bounds": [
                    "self"
                ],
                "test_line_search_armijo": [
                    "self"
                ],
                "test_armijo_terminate_1": [
                    "self"
                ],
                "test_wolfe_terminate": [
                    "self"
                ]
            }
        },
        "scipy.optimize.tests.test_nonlin": {
            "F": [
                "x"
            ],
            "F2": [
                "x"
            ],
            "F2_lucky": [
                "x"
            ],
            "F3": [
                "x"
            ],
            "F4_powell": [
                "x"
            ],
            "F5": [
                "x"
            ],
            "F6": [
                "x"
            ],
            "TestNonlin": {
                "_check_nonlin_func": [
                    "self",
                    "f",
                    "func",
                    "f_tol"
                ],
                "_check_root": [
                    "self",
                    "f",
                    "method",
                    "f_tol"
                ],
                "_check_func_fail": [
                    "self"
                ],
                "test_problem_nonlin": [
                    "self"
                ],
                "test_tol_norm_called": [
                    "self"
                ],
                "test_problem_root": [
                    "self"
                ]
            },
            "TestSecant": {
                "_check_secant": [
                    "self",
                    "jac_cls",
                    "npoints"
                ],
                "test_broyden1": [
                    "self"
                ],
                "test_broyden2": [
                    "self"
                ],
                "test_broyden1_update": [
                    "self"
                ],
                "test_broyden2_update": [
                    "self"
                ],
                "test_anderson": [
                    "self"
                ]
            },
            "TestLinear": {
                "_check": [
                    "self",
                    "jac",
                    "N",
                    "maxiter",
                    "complex"
                ],
                "test_broyden1": [
                    "self"
                ],
                "test_broyden2": [
                    "self"
                ],
                "test_anderson": [
                    "self"
                ],
                "test_krylov": [
                    "self"
                ]
            },
            "TestJacobianDotSolve": {
                "_func": [
                    "self",
                    "x"
                ],
                "_check_dot": [
                    "self",
                    "jac_cls",
                    "complex",
                    "tol"
                ],
                "test_broyden1": [
                    "self"
                ],
                "test_broyden2": [
                    "self"
                ],
                "test_anderson": [
                    "self"
                ],
                "test_diagbroyden": [
                    "self"
                ],
                "test_linearmixing": [
                    "self"
                ],
                "test_excitingmixing": [
                    "self"
                ],
                "test_krylov": [
                    "self"
                ]
            },
            "TestNonlinOldTests": {
                "test_broyden1": [
                    "self"
                ],
                "test_broyden2": [
                    "self"
                ],
                "test_anderson": [
                    "self"
                ],
                "test_linearmixing": [
                    "self"
                ],
                "test_exciting": [
                    "self"
                ],
                "test_diagbroyden": [
                    "self"
                ],
                "test_root_broyden1": [
                    "self"
                ],
                "test_root_broyden2": [
                    "self"
                ],
                "test_root_anderson": [
                    "self"
                ],
                "test_root_linearmixing": [
                    "self"
                ],
                "test_root_excitingmixing": [
                    "self"
                ],
                "test_root_diagbroyden": [
                    "self"
                ]
            }
        },
        "scipy.optimize.tests.test_hessian_update_strategy": {
            "Rosenbrock": {
                "__init__": [
                    "self",
                    "n",
                    "random_state"
                ],
                "fun": [
                    "self",
                    "x"
                ],
                "grad": [
                    "self",
                    "x"
                ],
                "hess": [
                    "self",
                    "x"
                ]
            },
            "TestHessianUpdateStrategy": {
                "test_hessian_initialization": [
                    "self"
                ],
                "test_rosenbrock_with_no_exception": [
                    "self"
                ],
                "test_SR1_skip_update": [
                    "self"
                ],
                "test_BFGS_skip_update": [
                    "self"
                ]
            }
        },
        "scipy.optimize.tests.test_lsq_common": {
            "test_reflective_transformation": [],
            "test_linear_operators": [],
            "TestBounds": {
                "test_step_size_to_bounds": [
                    "self"
                ],
                "test_find_active_constraints": [
                    "self"
                ],
                "test_make_strictly_feasible": [
                    "self"
                ],
                "test_scaling_vector": [
                    "self"
                ]
            },
            "TestQuadraticFunction": {
                "setup_method": [
                    "self"
                ],
                "test_build_quadratic_1d": [
                    "self"
                ],
                "test_minimize_quadratic_1d": [
                    "self"
                ],
                "test_evaluate_quadratic": [
                    "self"
                ]
            },
            "TestTrustRegion": {
                "test_intersect": [
                    "self"
                ]
            }
        },
        "scipy.optimize.tests.test_cython_optimize": {
            "test_bisect": [],
            "test_ridder": [],
            "test_brenth": [],
            "test_brentq": [],
            "test_brentq_full_output": []
        },
        "scipy.optimize.tests.test_linear_assignment": {
            "test_linear_sum_assignment_input_validation": [],
            "test_constant_cost_matrix": []
        },
        "scipy.optimize.tests.test__linprog_clean_inputs": {
            "test_aliasing": [],
            "test_aliasing2": [],
            "test_missing_inputs": [],
            "test_too_many_dimensions": [],
            "test_too_few_dimensions": [],
            "test_inconsistent_dimensions": [],
            "test_type_errors": [],
            "test_non_finite_errors": [],
            "test__clean_inputs1": [],
            "test__clean_inputs2": [],
            "test__clean_inputs3": [],
            "test_bad_bounds": [],
            "test_good_bounds": []
        },
        "scipy.optimize.tests.test_differentiable_functions": {
            "test_LinearVectorFunction": [],
            "test_LinearVectorFunction_memoization": [],
            "test_IdentityVectorFunction": [],
            "ExScalarFunction": {
                "__init__": [
                    "self"
                ],
                "fun": [
                    "self",
                    "x"
                ],
                "grad": [
                    "self",
                    "x"
                ],
                "hess": [
                    "self",
                    "x"
                ]
            },
            "TestScalarFunction": {
                "test_finite_difference_grad": [
                    "self"
                ],
                "test_fun_and_grad": [
                    "self"
                ],
                "test_finite_difference_hess_linear_operator": [
                    "self"
                ],
                "test_x_storage_overlap": [
                    "self"
                ]
            },
            "ExVectorialFunction": {
                "__init__": [
                    "self"
                ],
                "fun": [
                    "self",
                    "x"
                ],
                "jac": [
                    "self",
                    "x"
                ],
                "hess": [
                    "self",
                    "x",
                    "v"
                ]
            },
            "TestVectorialFunction": {
                "test_finite_difference_jac": [
                    "self"
                ],
                "test_finite_difference_hess_linear_operator": [
                    "self"
                ],
                "test_x_storage_overlap": [
                    "self"
                ]
            }
        },
        "scipy.optimize.tests.test_cobyla": {
            "test_vector_constraints": [],
            "TestCobyla": {
                "setup_method": [
                    "self"
                ],
                "fun": [
                    "self",
                    "x"
                ],
                "con1": [
                    "self",
                    "x"
                ],
                "con2": [
                    "self",
                    "x"
                ],
                "test_simple": [
                    "self"
                ],
                "test_minimize_simple": [
                    "self"
                ],
                "test_minimize_constraint_violation": [
                    "self"
                ]
            }
        },
        "scipy.optimize.tests.test__dual_annealing": {
            "TestDualAnnealing": {
                "setup_method": [
                    "self"
                ],
                "callback": [
                    "self",
                    "x",
                    "f",
                    "context"
                ],
                "func": [
                    "self",
                    "x",
                    "args"
                ],
                "rosen_der_wrapper": [
                    "self",
                    "x",
                    "args"
                ],
                "test_visiting_stepping": [
                    "self"
                ],
                "test_visiting_dist_high_temperature": [
                    "self"
                ],
                "test_reset": [
                    "self"
                ],
                "test_low_dim": [
                    "self"
                ],
                "test_high_dim": [
                    "self"
                ],
                "test_low_dim_no_ls": [
                    "self"
                ],
                "test_high_dim_no_ls": [
                    "self"
                ],
                "test_nb_fun_call": [
                    "self"
                ],
                "test_nb_fun_call_no_ls": [
                    "self"
                ],
                "test_max_reinit": [
                    "self"
                ],
                "test_reproduce": [
                    "self"
                ],
                "test_rand_gen": [
                    "self"
                ],
                "test_bounds_integrity": [
                    "self"
                ],
                "test_bound_validity": [
                    "self"
                ],
                "test_local_search_option_bounds": [
                    "self"
                ],
                "test_max_fun_ls": [
                    "self"
                ],
                "test_max_fun_no_ls": [
                    "self"
                ],
                "test_maxiter": [
                    "self"
                ],
                "test_fun_args_ls": [
                    "self"
                ],
                "test_fun_args_no_ls": [
                    "self"
                ],
                "test_callback_stop": [
                    "self"
                ],
                "test_multi_ls_minimizer": [
                    "self",
                    "method",
                    "atol"
                ],
                "test_wrong_restart_temp": [
                    "self"
                ],
                "test_gradient_gnev": [
                    "self"
                ],
                "test_from_docstring": [
                    "self"
                ],
                "test_accept_reject_probabilistic": [
                    "self",
                    "new_e",
                    "temp_step",
                    "accepted",
                    "accept_rate"
                ]
            }
        },
        "scipy.optimize.tests.test_lbfgsb_hessinv": {
            "test_1": [],
            "test_2": []
        },
        "scipy.optimize._lsq.common": {
            "intersect_trust_region": [
                "x",
                "s",
                "Delta"
            ],
            "solve_lsq_trust_region": [
                "n",
                "m",
                "uf",
                "s",
                "V",
                "Delta",
                "initial_alpha",
                "rtol",
                "max_iter"
            ],
            "solve_trust_region_2d": [
                "B",
                "g",
                "Delta"
            ],
            "update_tr_radius": [
                "Delta",
                "actual_reduction",
                "predicted_reduction",
                "step_norm",
                "bound_hit"
            ],
            "build_quadratic_1d": [
                "J",
                "g",
                "s",
                "diag",
                "s0"
            ],
            "minimize_quadratic_1d": [
                "a",
                "b",
                "lb",
                "ub",
                "c"
            ],
            "evaluate_quadratic": [
                "J",
                "g",
                "s",
                "diag"
            ],
            "in_bounds": [
                "x",
                "lb",
                "ub"
            ],
            "step_size_to_bound": [
                "x",
                "s",
                "lb",
                "ub"
            ],
            "find_active_constraints": [
                "x",
                "lb",
                "ub",
                "rtol"
            ],
            "make_strictly_feasible": [
                "x",
                "lb",
                "ub",
                "rstep"
            ],
            "CL_scaling_vector": [
                "x",
                "g",
                "lb",
                "ub"
            ],
            "reflective_transformation": [
                "y",
                "lb",
                "ub"
            ],
            "print_header_nonlinear": [],
            "print_iteration_nonlinear": [
                "iteration",
                "nfev",
                "cost",
                "cost_reduction",
                "step_norm",
                "optimality"
            ],
            "print_header_linear": [],
            "print_iteration_linear": [
                "iteration",
                "cost",
                "cost_reduction",
                "step_norm",
                "optimality"
            ],
            "compute_grad": [
                "J",
                "f"
            ],
            "compute_jac_scale": [
                "J",
                "scale_inv_old"
            ],
            "left_multiplied_operator": [
                "J",
                "d"
            ],
            "right_multiplied_operator": [
                "J",
                "d"
            ],
            "regularized_lsq_operator": [
                "J",
                "diag"
            ],
            "right_multiply": [
                "J",
                "d",
                "copy"
            ],
            "left_multiply": [
                "J",
                "d",
                "copy"
            ],
            "check_termination": [
                "dF",
                "F",
                "dx_norm",
                "x_norm",
                "ratio",
                "ftol",
                "xtol"
            ],
            "scale_for_robust_loss_function": [
                "J",
                "f",
                "rho"
            ]
        },
        "scipy.optimize._lsq.trf_linear": {
            "regularized_lsq_with_qr": [
                "m",
                "n",
                "R",
                "QTb",
                "perm",
                "diag",
                "copy_R"
            ],
            "backtracking": [
                "A",
                "g",
                "x",
                "p",
                "theta",
                "p_dot_g",
                "lb",
                "ub"
            ],
            "select_step": [
                "x",
                "A_h",
                "g_h",
                "c_h",
                "p",
                "p_h",
                "d",
                "lb",
                "ub",
                "theta"
            ],
            "trf_linear": [
                "A",
                "b",
                "x_lsq",
                "lb",
                "ub",
                "tol",
                "lsq_solver",
                "lsmr_tol",
                "max_iter",
                "verbose"
            ]
        },
        "scipy.optimize._lsq.dogbox": {
            "lsmr_operator": [
                "Jop",
                "d",
                "active_set"
            ],
            "find_intersection": [
                "x",
                "tr_bounds",
                "lb",
                "ub"
            ],
            "dogleg_step": [
                "x",
                "newton_step",
                "g",
                "a",
                "b",
                "tr_bounds",
                "lb",
                "ub"
            ],
            "dogbox": [
                "fun",
                "jac",
                "x0",
                "f0",
                "J0",
                "lb",
                "ub",
                "ftol",
                "xtol",
                "gtol",
                "max_nfev",
                "x_scale",
                "loss_function",
                "tr_solver",
                "tr_options",
                "verbose"
            ]
        },
        "scipy.optimize._lsq.trf": {
            "trf": [
                "fun",
                "jac",
                "x0",
                "f0",
                "J0",
                "lb",
                "ub",
                "ftol",
                "xtol",
                "gtol",
                "max_nfev",
                "x_scale",
                "loss_function",
                "tr_solver",
                "tr_options",
                "verbose"
            ],
            "select_step": [
                "x",
                "J_h",
                "diag_h",
                "g_h",
                "p",
                "p_h",
                "d",
                "Delta",
                "lb",
                "ub",
                "theta"
            ],
            "trf_bounds": [
                "fun",
                "jac",
                "x0",
                "f0",
                "J0",
                "lb",
                "ub",
                "ftol",
                "xtol",
                "gtol",
                "max_nfev",
                "x_scale",
                "loss_function",
                "tr_solver",
                "tr_options",
                "verbose"
            ],
            "trf_no_bounds": [
                "fun",
                "jac",
                "x0",
                "f0",
                "J0",
                "ftol",
                "xtol",
                "gtol",
                "max_nfev",
                "x_scale",
                "loss_function",
                "tr_solver",
                "tr_options",
                "verbose"
            ]
        },
        "scipy.optimize._lsq.setup": {
            "configuration": [
                "parent_package",
                "top_path"
            ]
        },
        "scipy.optimize._lsq": {},
        "scipy.optimize._lsq.bvls": {
            "compute_kkt_optimality": [
                "g",
                "on_bound"
            ],
            "bvls": [
                "A",
                "b",
                "x_lsq",
                "lb",
                "ub",
                "tol",
                "max_iter",
                "verbose",
                "rcond"
            ]
        },
        "scipy.optimize._lsq.least_squares": {
            "call_minpack": [
                "fun",
                "x0",
                "jac",
                "ftol",
                "xtol",
                "gtol",
                "max_nfev",
                "x_scale",
                "diff_step"
            ],
            "prepare_bounds": [
                "bounds",
                "n"
            ],
            "check_tolerance": [
                "ftol",
                "xtol",
                "gtol",
                "method"
            ],
            "check_x_scale": [
                "x_scale",
                "x0"
            ],
            "check_jac_sparsity": [
                "jac_sparsity",
                "m",
                "n"
            ],
            "huber": [
                "z",
                "rho",
                "cost_only"
            ],
            "soft_l1": [
                "z",
                "rho",
                "cost_only"
            ],
            "cauchy": [
                "z",
                "rho",
                "cost_only"
            ],
            "arctan": [
                "z",
                "rho",
                "cost_only"
            ],
            "construct_loss_function": [
                "m",
                "loss",
                "f_scale"
            ],
            "least_squares": [
                "fun",
                "x0",
                "jac",
                "bounds",
                "method",
                "ftol",
                "xtol",
                "gtol",
                "x_scale",
                "loss",
                "f_scale",
                "diff_step",
                "tr_solver",
                "tr_options",
                "jac_sparsity",
                "max_nfev",
                "verbose",
                "args",
                "kwargs"
            ]
        },
        "scipy.optimize._lsq.lsq_linear": {
            "prepare_bounds": [
                "bounds",
                "n"
            ],
            "lsq_linear": [
                "A",
                "b",
                "bounds",
                "method",
                "tol",
                "lsq_solver",
                "lsmr_tol",
                "max_iter",
                "verbose"
            ]
        },
        "scipy.optimize._trlib.setup": {
            "configuration": [
                "parent_package",
                "top_path"
            ]
        },
        "scipy.optimize._trlib": {
            "get_trlib_quadratic_subproblem": [
                "tol_rel_i",
                "tol_rel_b",
                "disp"
            ]
        },
        "scipy.optimize._trustregion_constr.setup": {
            "configuration": [
                "parent_package",
                "top_path"
            ]
        },
        "scipy.optimize._trustregion_constr.projections": {
            "orthogonality": [
                "A",
                "g"
            ],
            "normal_equation_projections": [
                "A",
                "m",
                "n",
                "orth_tol",
                "max_refin",
                "tol"
            ],
            "augmented_system_projections": [
                "A",
                "m",
                "n",
                "orth_tol",
                "max_refin",
                "tol"
            ],
            "qr_factorization_projections": [
                "A",
                "m",
                "n",
                "orth_tol",
                "max_refin",
                "tol"
            ],
            "svd_factorization_projections": [
                "A",
                "m",
                "n",
                "orth_tol",
                "max_refin",
                "tol"
            ],
            "projections": [
                "A",
                "method",
                "orth_tol",
                "max_refin",
                "tol"
            ]
        },
        "scipy.optimize._trustregion_constr.tr_interior_point": {
            "tr_interior_point": [
                "fun",
                "grad",
                "lagr_hess",
                "n_vars",
                "n_ineq",
                "n_eq",
                "constr",
                "jac",
                "x0",
                "fun0",
                "grad0",
                "constr_ineq0",
                "jac_ineq0",
                "constr_eq0",
                "jac_eq0",
                "stop_criteria",
                "enforce_feasibility",
                "xtol",
                "state",
                "initial_barrier_parameter",
                "initial_tolerance",
                "initial_penalty",
                "initial_trust_radius",
                "factorization_method"
            ],
            "BarrierSubproblem": {
                "__init__": [
                    "self",
                    "x0",
                    "s0",
                    "fun",
                    "grad",
                    "lagr_hess",
                    "n_vars",
                    "n_ineq",
                    "n_eq",
                    "constr",
                    "jac",
                    "barrier_parameter",
                    "tolerance",
                    "enforce_feasibility",
                    "global_stop_criteria",
                    "xtol",
                    "fun0",
                    "grad0",
                    "constr_ineq0",
                    "jac_ineq0",
                    "constr_eq0",
                    "jac_eq0"
                ],
                "update": [
                    "self",
                    "barrier_parameter",
                    "tolerance"
                ],
                "get_slack": [
                    "self",
                    "z"
                ],
                "get_variables": [
                    "self",
                    "z"
                ],
                "function_and_constraints": [
                    "self",
                    "z"
                ],
                "_compute_function": [
                    "self",
                    "f",
                    "c_ineq",
                    "s"
                ],
                "_compute_constr": [
                    "self",
                    "c_ineq",
                    "c_eq",
                    "s"
                ],
                "scaling": [
                    "self",
                    "z"
                ],
                "gradient_and_jacobian": [
                    "self",
                    "z"
                ],
                "_compute_gradient": [
                    "self",
                    "g"
                ],
                "_compute_jacobian": [
                    "self",
                    "J_eq",
                    "J_ineq",
                    "s"
                ],
                "_assemble_sparse_jacobian": [
                    "self",
                    "J_eq",
                    "J_ineq",
                    "s"
                ],
                "lagrangian_hessian_x": [
                    "self",
                    "z",
                    "v"
                ],
                "lagrangian_hessian_s": [
                    "self",
                    "z",
                    "v"
                ],
                "lagrangian_hessian": [
                    "self",
                    "z",
                    "v"
                ],
                "stop_criteria": [
                    "self",
                    "state",
                    "z",
                    "last_iteration_failed",
                    "optimality",
                    "constr_violation",
                    "trust_radius",
                    "penalty",
                    "cg_info"
                ]
            }
        },
        "scipy.optimize._trustregion_constr": {},
        "scipy.optimize._trustregion_constr.minimize_trustregion_constr": {
            "update_state_sqp": [
                "state",
                "x",
                "last_iteration_failed",
                "objective",
                "prepared_constraints",
                "start_time",
                "tr_radius",
                "constr_penalty",
                "cg_info"
            ],
            "update_state_ip": [
                "state",
                "x",
                "last_iteration_failed",
                "objective",
                "prepared_constraints",
                "start_time",
                "tr_radius",
                "constr_penalty",
                "cg_info",
                "barrier_parameter",
                "barrier_tolerance"
            ],
            "_minimize_trustregion_constr": [
                "fun",
                "x0",
                "args",
                "grad",
                "hess",
                "hessp",
                "bounds",
                "constraints",
                "xtol",
                "gtol",
                "barrier_tol",
                "sparse_jacobian",
                "callback",
                "maxiter",
                "verbose",
                "finite_diff_rel_step",
                "initial_constr_penalty",
                "initial_tr_radius",
                "initial_barrier_parameter",
                "initial_barrier_tolerance",
                "factorization_method",
                "disp"
            ],
            "HessianLinearOperator": {
                "__init__": [
                    "self",
                    "hessp",
                    "n"
                ],
                "__call__": [
                    "self",
                    "x"
                ]
            },
            "LagrangianHessian": {
                "__init__": [
                    "self",
                    "n",
                    "objective_hess",
                    "constraints_hess"
                ],
                "__call__": [
                    "self",
                    "x",
                    "v_eq",
                    "v_ineq"
                ]
            }
        },
        "scipy.optimize._trustregion_constr.qp_subproblem": {
            "eqp_kktfact": [
                "H",
                "c",
                "A",
                "b"
            ],
            "sphere_intersections": [
                "z",
                "d",
                "trust_radius",
                "entire_line"
            ],
            "box_intersections": [
                "z",
                "d",
                "lb",
                "ub",
                "entire_line"
            ],
            "box_sphere_intersections": [
                "z",
                "d",
                "lb",
                "ub",
                "trust_radius",
                "entire_line",
                "extra_info"
            ],
            "inside_box_boundaries": [
                "x",
                "lb",
                "ub"
            ],
            "reinforce_box_boundaries": [
                "x",
                "lb",
                "ub"
            ],
            "modified_dogleg": [
                "A",
                "Y",
                "b",
                "trust_radius",
                "lb",
                "ub"
            ],
            "projected_cg": [
                "H",
                "c",
                "Z",
                "Y",
                "b",
                "trust_radius",
                "lb",
                "ub",
                "tol",
                "max_iter",
                "max_infeasible_iter",
                "return_all"
            ]
        },
        "scipy.optimize._trustregion_constr.report": {
            "ReportBase": {
                "print_header": [
                    "cls"
                ],
                "print_iteration": [
                    "cls"
                ],
                "print_footer": [
                    "cls"
                ]
            },
            "BasicReport": {},
            "SQPReport": {},
            "IPReport": {}
        },
        "scipy.optimize._trustregion_constr.canonical_constraint": {
            "initial_constraints_as_canonical": [
                "n",
                "prepared_constraints",
                "sparse_jacobian"
            ],
            "CanonicalConstraint": {
                "__init__": [
                    "self",
                    "n_eq",
                    "n_ineq",
                    "fun",
                    "jac",
                    "hess",
                    "keep_feasible"
                ],
                "from_PreparedConstraint": [
                    "cls",
                    "constraint"
                ],
                "empty": [
                    "cls",
                    "n"
                ],
                "concatenate": [
                    "cls",
                    "canonical_constraints",
                    "sparse_jacobian"
                ],
                "_equal_to_canonical": [
                    "cls",
                    "cfun",
                    "value"
                ],
                "_less_to_canonical": [
                    "cls",
                    "cfun",
                    "ub",
                    "keep_feasible"
                ],
                "_greater_to_canonical": [
                    "cls",
                    "cfun",
                    "lb",
                    "keep_feasible"
                ],
                "_interval_to_canonical": [
                    "cls",
                    "cfun",
                    "lb",
                    "ub",
                    "keep_feasible"
                ]
            }
        },
        "scipy.optimize._trustregion_constr.equality_constrained_sqp": {
            "default_scaling": [
                "x"
            ],
            "equality_constrained_sqp": [
                "fun_and_constr",
                "grad_and_jac",
                "lagr_hess",
                "x0",
                "fun0",
                "grad0",
                "constr0",
                "jac0",
                "stop_criteria",
                "state",
                "initial_penalty",
                "initial_trust_radius",
                "factorization_method",
                "trust_lb",
                "trust_ub",
                "scaling"
            ]
        },
        "scipy.optimize._trustregion_constr.tests.test_canonical_constraint": {
            "create_quadratic_function": [
                "n",
                "m",
                "rng"
            ],
            "test_bounds_cases": [],
            "test_nonlinear_constraint": [],
            "test_concatenation": [],
            "test_empty": [],
            "test_initial_constraints_as_canonical": [],
            "test_initial_constraints_as_canonical_empty": []
        },
        "scipy.optimize._trustregion_constr.tests": {},
        "scipy.optimize._trustregion_constr.tests.test_projections": {
            "TestProjections": {
                "test_nullspace_and_least_squares_sparse": [
                    "self"
                ],
                "test_iterative_refinements_sparse": [
                    "self"
                ],
                "test_rowspace_sparse": [
                    "self"
                ],
                "test_nullspace_and_least_squares_dense": [
                    "self"
                ],
                "test_compare_dense_and_sparse": [
                    "self"
                ],
                "test_compare_dense_and_sparse2": [
                    "self"
                ],
                "test_iterative_refinements_dense": [
                    "self"
                ],
                "test_rowspace_dense": [
                    "self"
                ]
            },
            "TestOrthogonality": {
                "test_dense_matrix": [
                    "self"
                ],
                "test_sparse_matrix": [
                    "self"
                ]
            }
        },
        "scipy.optimize._trustregion_constr.tests.test_qp_subproblem": {
            "TestEQPDirectFactorization": {
                "test_nocedal_example": [
                    "self"
                ]
            },
            "TestSphericalBoundariesIntersections": {
                "test_2d_sphere_constraints": [
                    "self"
                ],
                "test_2d_sphere_constraints_line_intersections": [
                    "self"
                ]
            },
            "TestBoxBoundariesIntersections": {
                "test_2d_box_constraints": [
                    "self"
                ],
                "test_2d_box_constraints_entire_line": [
                    "self"
                ],
                "test_3d_box_constraints": [
                    "self"
                ],
                "test_3d_box_constraints_entire_line": [
                    "self"
                ]
            },
            "TestBoxSphereBoundariesIntersections": {
                "test_2d_box_constraints": [
                    "self"
                ],
                "test_2d_box_constraints_entire_line": [
                    "self"
                ]
            },
            "TestModifiedDogleg": {
                "test_cauchypoint_equalsto_newtonpoint": [
                    "self"
                ],
                "test_3d_example": [
                    "self"
                ]
            },
            "TestProjectCG": {
                "test_nocedal_example": [
                    "self"
                ],
                "test_compare_with_direct_fact": [
                    "self"
                ],
                "test_trust_region_infeasible": [
                    "self"
                ],
                "test_trust_region_barely_feasible": [
                    "self"
                ],
                "test_hits_boundary": [
                    "self"
                ],
                "test_negative_curvature_unconstrained": [
                    "self"
                ],
                "test_negative_curvature": [
                    "self"
                ],
                "test_inactive_box_constraints": [
                    "self"
                ],
                "test_active_box_constraints_maximum_iterations_reached": [
                    "self"
                ],
                "test_active_box_constraints_hits_boundaries": [
                    "self"
                ],
                "test_active_box_constraints_hits_boundaries_infeasible_iter": [
                    "self"
                ],
                "test_active_box_constraints_negative_curvature": [
                    "self"
                ]
            }
        },
        "scipy.optimize._trustregion_constr.tests.test_report": {
            "test_gh10880": []
        },
        "scipy.optimize._shgo_lib": {},
        "scipy.optimize._shgo_lib.triangulation": {
            "Complex": {
                "__init__": [
                    "self",
                    "dim",
                    "func",
                    "func_args",
                    "symmetry",
                    "bounds",
                    "g_cons",
                    "g_args"
                ],
                "__call__": [
                    "self"
                ],
                "n_cube": [
                    "self",
                    "dim",
                    "symmetry",
                    "printout"
                ],
                "perm": [
                    "self",
                    "i_parents",
                    "x_parents",
                    "xi"
                ],
                "perm_symmetry": [
                    "self",
                    "i_s",
                    "x_parents",
                    "xi"
                ],
                "add_centroid": [
                    "self"
                ],
                "incidence": [
                    "self"
                ],
                "graph_map": [
                    "self"
                ],
                "sub_generate_cell": [
                    "self",
                    "C_i",
                    "gen"
                ],
                "split_generation": [
                    "self"
                ],
                "construct_hypercube": [
                    "self",
                    "origin",
                    "supremum",
                    "gen",
                    "hgr",
                    "printout"
                ],
                "split_simplex_symmetry": [
                    "self",
                    "S",
                    "gen"
                ],
                "plot_complex": [
                    "self"
                ]
            },
            "VertexGroup": {
                "__init__": [
                    "self",
                    "p_gen",
                    "p_hgr"
                ],
                "__call__": [
                    "self"
                ],
                "add_vertex": [
                    "self",
                    "V"
                ],
                "homology_group_rank": [
                    "self"
                ],
                "homology_group_differential": [
                    "self"
                ],
                "polytopial_sperner_lemma": [
                    "self"
                ],
                "print_out": [
                    "self"
                ]
            },
            "Cell": {
                "__init__": [
                    "self",
                    "p_gen",
                    "p_hgr",
                    "origin",
                    "supremum"
                ]
            },
            "Simplex": {
                "__init__": [
                    "self",
                    "p_gen",
                    "p_hgr",
                    "generation_cycle",
                    "dim"
                ]
            },
            "Vertex": {
                "__init__": [
                    "self",
                    "x",
                    "bounds",
                    "func",
                    "func_args",
                    "g_cons",
                    "g_cons_args",
                    "nn",
                    "index"
                ],
                "__hash__": [
                    "self"
                ],
                "connect": [
                    "self",
                    "v"
                ],
                "disconnect": [
                    "self",
                    "v"
                ],
                "minimiser": [
                    "self"
                ],
                "print_out": [
                    "self"
                ]
            },
            "VertexCache": {
                "__init__": [
                    "self",
                    "func",
                    "func_args",
                    "bounds",
                    "g_cons",
                    "g_cons_args",
                    "indexed"
                ],
                "__getitem__": [
                    "self",
                    "x",
                    "indexed"
                ]
            }
        },
        "scipy.optimize._shgo_lib.sobol_seq": {
            "Sobol": {
                "__init__": [
                    "self"
                ],
                "i4_sobol_generate": [
                    "self",
                    "dim_num",
                    "n",
                    "skip"
                ],
                "i4_bit_hi1": [
                    "self",
                    "n"
                ],
                "i4_bit_lo0": [
                    "self",
                    "n"
                ],
                "i4_sobol": [
                    "self",
                    "dim_num",
                    "seed"
                ]
            }
        },
        "scipy.misc.common": {
            "central_diff_weights": [
                "Np",
                "ndiv"
            ],
            "derivative": [
                "func",
                "x0",
                "dx",
                "n",
                "args",
                "order"
            ],
            "ascent": [],
            "face": [
                "gray"
            ],
            "electrocardiogram": []
        },
        "scipy.misc.setup": {
            "configuration": [
                "parent_package",
                "top_path"
            ]
        },
        "scipy.misc": {},
        "scipy.misc.doccer": {
            "docformat": [
                "docstring",
                "docdict"
            ],
            "inherit_docstring_from": [
                "cls"
            ],
            "extend_notes_in_docstring": [
                "cls",
                "notes"
            ],
            "replace_notes_in_docstring": [
                "cls",
                "notes"
            ],
            "indentcount_lines": [
                "lines"
            ],
            "filldoc": [
                "docdict",
                "unindent_params"
            ],
            "unindent_dict": [
                "docdict"
            ],
            "unindent_string": [
                "docstring"
            ]
        },
        "scipy.misc.tests": {},
        "scipy.misc.tests.test_common": {
            "test_face": [],
            "test_ascent": [],
            "test_electrocardiogram": []
        },
        "scipy.misc.tests.test_doccer": {
            "test_unindent": [],
            "test_unindent_dict": [],
            "test_docformat": [],
            "test_decorator": [],
            "test_inherit_docstring_from": []
        },
        "scipy.fft._helper": {
            "next_fast_len": [
                "target",
                "real"
            ],
            "_init_nd_shape_and_axes": [
                "x",
                "shape",
                "axes"
            ]
        },
        "scipy.fft.setup": {
            "configuration": [
                "parent_package",
                "top_path"
            ]
        },
        "scipy.fft._basic": {
            "_x_replacer": [
                "args",
                "kwargs",
                "dispatchables"
            ],
            "_dispatch": [
                "func"
            ],
            "fft": [
                "x",
                "n",
                "axis",
                "norm",
                "overwrite_x",
                "workers"
            ],
            "ifft": [
                "x",
                "n",
                "axis",
                "norm",
                "overwrite_x",
                "workers"
            ],
            "rfft": [
                "x",
                "n",
                "axis",
                "norm",
                "overwrite_x",
                "workers"
            ],
            "irfft": [
                "x",
                "n",
                "axis",
                "norm",
                "overwrite_x",
                "workers"
            ],
            "hfft": [
                "x",
                "n",
                "axis",
                "norm",
                "overwrite_x",
                "workers"
            ],
            "ihfft": [
                "x",
                "n",
                "axis",
                "norm",
                "overwrite_x",
                "workers"
            ],
            "fftn": [
                "x",
                "s",
                "axes",
                "norm",
                "overwrite_x",
                "workers"
            ],
            "ifftn": [
                "x",
                "s",
                "axes",
                "norm",
                "overwrite_x",
                "workers"
            ],
            "fft2": [
                "x",
                "s",
                "axes",
                "norm",
                "overwrite_x",
                "workers"
            ],
            "ifft2": [
                "x",
                "s",
                "axes",
                "norm",
                "overwrite_x",
                "workers"
            ],
            "rfftn": [
                "x",
                "s",
                "axes",
                "norm",
                "overwrite_x",
                "workers"
            ],
            "rfft2": [
                "x",
                "s",
                "axes",
                "norm",
                "overwrite_x",
                "workers"
            ],
            "irfftn": [
                "x",
                "s",
                "axes",
                "norm",
                "overwrite_x",
                "workers"
            ],
            "irfft2": [
                "x",
                "s",
                "axes",
                "norm",
                "overwrite_x",
                "workers"
            ],
            "hfftn": [
                "x",
                "s",
                "axes",
                "norm",
                "overwrite_x",
                "workers"
            ],
            "hfft2": [
                "x",
                "s",
                "axes",
                "norm",
                "overwrite_x",
                "workers"
            ],
            "ihfftn": [
                "x",
                "s",
                "axes",
                "norm",
                "overwrite_x",
                "workers"
            ],
            "ihfft2": [
                "x",
                "s",
                "axes",
                "norm",
                "overwrite_x",
                "workers"
            ]
        },
        "scipy.fft": {},
        "scipy.fft._realtransforms": {
            "dctn": [
                "x",
                "type",
                "s",
                "axes",
                "norm",
                "overwrite_x",
                "workers"
            ],
            "idctn": [
                "x",
                "type",
                "s",
                "axes",
                "norm",
                "overwrite_x",
                "workers"
            ],
            "dstn": [
                "x",
                "type",
                "s",
                "axes",
                "norm",
                "overwrite_x",
                "workers"
            ],
            "idstn": [
                "x",
                "type",
                "s",
                "axes",
                "norm",
                "overwrite_x",
                "workers"
            ],
            "dct": [
                "x",
                "type",
                "n",
                "axis",
                "norm",
                "overwrite_x",
                "workers"
            ],
            "idct": [
                "x",
                "type",
                "n",
                "axis",
                "norm",
                "overwrite_x",
                "workers"
            ],
            "dst": [
                "x",
                "type",
                "n",
                "axis",
                "norm",
                "overwrite_x",
                "workers"
            ],
            "idst": [
                "x",
                "type",
                "n",
                "axis",
                "norm",
                "overwrite_x",
                "workers"
            ]
        },
        "scipy.fft._debug_backends": {
            "NumPyBackend": {
                "__ua_function__": [
                    "method",
                    "args",
                    "kwargs"
                ]
            },
            "EchoBackend": {
                "__ua_function__": [
                    "method",
                    "args",
                    "kwargs"
                ]
            }
        },
        "scipy.fft._backend": {
            "_backend_from_arg": [
                "backend"
            ],
            "set_global_backend": [
                "backend"
            ],
            "register_backend": [
                "backend"
            ],
            "set_backend": [
                "backend",
                "coerce",
                "only"
            ],
            "skip_backend": [
                "backend"
            ],
            "_ScipyBackend": {
                "__ua_function__": [
                    "method",
                    "args",
                    "kwargs"
                ]
            }
        },
        "scipy.fft._pocketfft.basic": {
            "c2c": [
                "forward",
                "x",
                "n",
                "axis",
                "norm",
                "overwrite_x",
                "workers"
            ],
            "r2c": [
                "forward",
                "x",
                "n",
                "axis",
                "norm",
                "overwrite_x",
                "workers"
            ],
            "c2r": [
                "forward",
                "x",
                "n",
                "axis",
                "norm",
                "overwrite_x",
                "workers"
            ],
            "fft2": [
                "x",
                "s",
                "axes",
                "norm",
                "overwrite_x",
                "workers"
            ],
            "ifft2": [
                "x",
                "s",
                "axes",
                "norm",
                "overwrite_x",
                "workers"
            ],
            "rfft2": [
                "x",
                "s",
                "axes",
                "norm",
                "overwrite_x",
                "workers"
            ],
            "irfft2": [
                "x",
                "s",
                "axes",
                "norm",
                "overwrite_x",
                "workers"
            ],
            "hfft2": [
                "x",
                "s",
                "axes",
                "norm",
                "overwrite_x",
                "workers"
            ],
            "ihfft2": [
                "x",
                "s",
                "axes",
                "norm",
                "overwrite_x",
                "workers"
            ],
            "c2cn": [
                "forward",
                "x",
                "s",
                "axes",
                "norm",
                "overwrite_x",
                "workers"
            ],
            "r2cn": [
                "forward",
                "x",
                "s",
                "axes",
                "norm",
                "overwrite_x",
                "workers"
            ],
            "c2rn": [
                "forward",
                "x",
                "s",
                "axes",
                "norm",
                "overwrite_x",
                "workers"
            ],
            "r2r_fftpack": [
                "forward",
                "x",
                "n",
                "axis",
                "norm",
                "overwrite_x"
            ]
        },
        "scipy.fft._pocketfft.setup": {
            "pre_build_hook": [
                "build_ext",
                "ext"
            ],
            "configuration": [
                "parent_package",
                "top_path"
            ]
        },
        "scipy.fft._pocketfft.realtransforms": {
            "_r2r": [
                "forward",
                "transform",
                "x",
                "type",
                "n",
                "axis",
                "norm",
                "overwrite_x",
                "workers"
            ],
            "_r2rn": [
                "forward",
                "transform",
                "x",
                "type",
                "s",
                "axes",
                "norm",
                "overwrite_x",
                "workers"
            ]
        },
        "scipy.fft._pocketfft": {},
        "scipy.fft._pocketfft.helper": {
            "_iterable_of_int": [
                "x",
                "name"
            ],
            "_init_nd_shape_and_axes": [
                "x",
                "shape",
                "axes"
            ],
            "_asfarray": [
                "x"
            ],
            "_datacopied": [
                "arr",
                "original"
            ],
            "_fix_shape": [
                "x",
                "shape",
                "axes"
            ],
            "_fix_shape_1d": [
                "x",
                "n",
                "axis"
            ],
            "_normalization": [
                "norm",
                "forward"
            ],
            "_workers": [
                "workers"
            ],
            "set_workers": [
                "workers"
            ],
            "get_workers": []
        },
        "scipy.fft._pocketfft.tests.test_real_transforms": {
            "is_longdouble_binary_compatible": [],
            "get_reference_data": [],
            "fftwdata_size": [
                "request"
            ],
            "mdata_x": [
                "request"
            ],
            "mdata_xy": [
                "request"
            ],
            "fftw_dct_ref": [
                "type",
                "size",
                "dt"
            ],
            "fftw_dst_ref": [
                "type",
                "size",
                "dt"
            ],
            "ref_2d": [
                "func",
                "x"
            ],
            "naive_dct1": [
                "x",
                "norm"
            ],
            "naive_dst1": [
                "x",
                "norm"
            ],
            "naive_dct4": [
                "x",
                "norm"
            ],
            "naive_dst4": [
                "x",
                "norm"
            ],
            "test_complex": [
                "transform",
                "dtype"
            ],
            "test_dct1_definition_ortho": [
                "rdt",
                "mdata_x"
            ],
            "test_dct2_definition_matlab": [
                "mdata_xy",
                "rdt"
            ],
            "test_dct3_definition_ortho": [
                "mdata_x",
                "rdt"
            ],
            "test_dct4_definition_ortho": [
                "mdata_x",
                "rdt"
            ],
            "test_idct_definition": [
                "fftwdata_size",
                "rdt",
                "type"
            ],
            "test_definition": [
                "fftwdata_size",
                "rdt",
                "type"
            ],
            "test_dst1_definition_ortho": [
                "rdt",
                "mdata_x"
            ],
            "test_dst4_definition_ortho": [
                "rdt",
                "mdata_x"
            ],
            "test_idst_definition": [
                "fftwdata_size",
                "rdt",
                "type"
            ],
            "test_overwrite": [
                "routine",
                "dtype",
                "shape",
                "axis",
                "type",
                "norm",
                "overwrite_x"
            ],
            "test_swapped_byte_order": [
                "func"
            ],
            "TestDCT": {
                "test_definition": [
                    "self",
                    "rdt",
                    "type",
                    "fftwdata_size"
                ],
                "test_axis": [
                    "self",
                    "rdt",
                    "type",
                    "size"
                ]
            },
            "Test_DCTN_IDCTN": {
                "test_axes_round_trip": [
                    "self",
                    "fforward",
                    "finverse",
                    "axes",
                    "dct_type",
                    "norm"
                ],
                "test_dctn_vs_2d_reference": [
                    "self",
                    "funcn",
                    "func",
                    "dct_type",
                    "norm"
                ],
                "test_idctn_vs_2d_reference": [
                    "self",
                    "funcn",
                    "func",
                    "dct_type",
                    "norm"
                ],
                "test_axes_and_shape": [
                    "self",
                    "fforward",
                    "finverse"
                ],
                "test_shape": [
                    "self",
                    "fforward"
                ],
                "test_shape_is_none_with_axes": [
                    "self",
                    "fforward",
                    "finverse",
                    "axes"
                ]
            }
        },
        "scipy.fft._pocketfft.tests.test_basic": {
            "_assert_close_in_norm": [
                "x",
                "y",
                "rtol",
                "size",
                "rdt"
            ],
            "random": [
                "size"
            ],
            "swap_byteorder": [
                "arr"
            ],
            "get_mat": [
                "n"
            ],
            "direct_dft": [
                "x"
            ],
            "direct_idft": [
                "x"
            ],
            "direct_dftn": [
                "x"
            ],
            "direct_idftn": [
                "x"
            ],
            "direct_rdft": [
                "x"
            ],
            "direct_irdft": [
                "x",
                "n"
            ],
            "direct_rdftn": [
                "x"
            ],
            "test_invalid_norm": [
                "func"
            ],
            "test_swapped_byte_order_complex": [
                "func"
            ],
            "test_swapped_byte_order_real": [
                "func"
            ],
            "_TestFFTBase": {
                "setup_method": [
                    "self"
                ],
                "test_definition": [
                    "self"
                ],
                "test_n_argument_real": [
                    "self"
                ],
                "_test_n_argument_complex": [
                    "self"
                ],
                "test_djbfft": [
                    "self"
                ],
                "test_invalid_sizes": [
                    "self"
                ]
            },
            "TestLongDoubleFFT": {
                "setup_method": [
                    "self"
                ]
            },
            "TestDoubleFFT": {
                "setup_method": [
                    "self"
                ]
            },
            "TestSingleFFT": {
                "setup_method": [
                    "self"
                ]
            },
            "TestFloat16FFT": {
                "test_1_argument_real": [
                    "self"
                ],
                "test_n_argument_real": [
                    "self"
                ]
            },
            "_TestIFFTBase": {
                "setup_method": [
                    "self"
                ],
                "test_definition": [
                    "self"
                ],
                "test_definition_real": [
                    "self"
                ],
                "test_djbfft": [
                    "self"
                ],
                "test_random_complex": [
                    "self"
                ],
                "test_random_real": [
                    "self"
                ],
                "test_size_accuracy": [
                    "self"
                ],
                "test_invalid_sizes": [
                    "self"
                ]
            },
            "TestLongDoubleIFFT": {
                "setup_method": [
                    "self"
                ]
            },
            "TestDoubleIFFT": {
                "setup_method": [
                    "self"
                ]
            },
            "TestSingleIFFT": {
                "setup_method": [
                    "self"
                ]
            },
            "_TestRFFTBase": {
                "setup_method": [
                    "self"
                ],
                "test_definition": [
                    "self"
                ],
                "test_djbfft": [
                    "self"
                ],
                "test_invalid_sizes": [
                    "self"
                ],
                "test_complex_input": [
                    "self"
                ],
                "test_non_ndarray_with_dtype": [
                    "self"
                ]
            },
            "TestRFFTLongDouble": {
                "setup_method": [
                    "self"
                ]
            },
            "TestRFFTDouble": {
                "setup_method": [
                    "self"
                ]
            },
            "TestRFFTSingle": {
                "setup_method": [
                    "self"
                ]
            },
            "_TestIRFFTBase": {
                "setup_method": [
                    "self"
                ],
                "test_definition": [
                    "self"
                ],
                "test_djbfft": [
                    "self"
                ],
                "test_random_real": [
                    "self"
                ],
                "test_size_accuracy": [
                    "self"
                ],
                "test_invalid_sizes": [
                    "self"
                ]
            },
            "TestIRFFTLongDouble": {
                "setup_method": [
                    "self"
                ]
            },
            "TestIRFFTDouble": {
                "setup_method": [
                    "self"
                ]
            },
            "TestIRFFTSingle": {
                "setup_method": [
                    "self"
                ]
            },
            "Testfft2": {
                "setup_method": [
                    "self"
                ],
                "test_regression_244": [
                    "self"
                ],
                "test_invalid_sizes": [
                    "self"
                ]
            },
            "TestFftnSingle": {
                "setup_method": [
                    "self"
                ],
                "test_definition": [
                    "self"
                ],
                "test_size_accuracy_small": [
                    "self",
                    "size"
                ],
                "test_size_accuracy_large": [
                    "self",
                    "size"
                ],
                "test_definition_float16": [
                    "self"
                ],
                "test_float16_input_small": [
                    "self",
                    "size"
                ],
                "test_float16_input_large": [
                    "self",
                    "size"
                ]
            },
            "TestFftn": {
                "setup_method": [
                    "self"
                ],
                "test_definition": [
                    "self"
                ],
                "test_axes_argument": [
                    "self"
                ],
                "test_shape_argument": [
                    "self"
                ],
                "test_shape_axes_argument": [
                    "self"
                ],
                "test_shape_axes_argument2": [
                    "self"
                ],
                "test_shape_argument_more": [
                    "self"
                ],
                "test_invalid_sizes": [
                    "self"
                ],
                "test_no_axes": [
                    "self"
                ]
            },
            "TestIfftn": {
                "setup_method": [
                    "self"
                ],
                "test_definition": [
                    "self",
                    "dtype",
                    "cdtype",
                    "maxnlp"
                ],
                "test_random_complex": [
                    "self",
                    "maxnlp",
                    "size"
                ],
                "test_invalid_sizes": [
                    "self"
                ],
                "test_no_axes": [
                    "self"
                ]
            },
            "TestRfftn": {
                "setup_method": [
                    "self"
                ],
                "test_definition": [
                    "self",
                    "dtype",
                    "cdtype",
                    "maxnlp"
                ],
                "test_random": [
                    "self",
                    "size"
                ],
                "test_invalid_sizes": [
                    "self",
                    "func"
                ],
                "test_no_axes": [
                    "self",
                    "func"
                ],
                "test_complex_input": [
                    "self"
                ]
            },
            "FakeArray": {
                "__init__": [
                    "self",
                    "data"
                ]
            },
            "FakeArray2": {
                "__init__": [
                    "self",
                    "data"
                ],
                "__array__": [
                    "self"
                ]
            },
            "TestOverwrite": {
                "_check": [
                    "self",
                    "x",
                    "routine",
                    "fftsize",
                    "axis",
                    "overwrite_x",
                    "should_overwrite"
                ],
                "_check_1d": [
                    "self",
                    "routine",
                    "dtype",
                    "shape",
                    "axis",
                    "overwritable_dtypes",
                    "fftsize",
                    "overwrite_x"
                ],
                "test_fft_ifft": [
                    "self",
                    "dtype",
                    "fftsize",
                    "overwrite_x",
                    "shape",
                    "axes"
                ],
                "test_rfft_irfft": [
                    "self",
                    "dtype",
                    "fftsize",
                    "overwrite_x",
                    "shape",
                    "axes"
                ],
                "_check_nd_one": [
                    "self",
                    "routine",
                    "dtype",
                    "shape",
                    "axes",
                    "overwritable_dtypes",
                    "overwrite_x"
                ],
                "test_fftn_ifftn": [
                    "self",
                    "dtype",
                    "overwrite_x",
                    "shape",
                    "axes"
                ]
            }
        },
        "scipy.fft._pocketfft.tests": {},
        "scipy.linalg.basic": {
            "_solve_check": [
                "n",
                "info",
                "lamch",
                "rcond"
            ],
            "solve": [
                "a",
                "b",
                "sym_pos",
                "lower",
                "overwrite_a",
                "overwrite_b",
                "debug",
                "check_finite",
                "assume_a",
                "transposed"
            ],
            "solve_triangular": [
                "a",
                "b",
                "trans",
                "lower",
                "unit_diagonal",
                "overwrite_b",
                "debug",
                "check_finite"
            ],
            "solve_banded": [
                "l_and_u",
                "ab",
                "b",
                "overwrite_ab",
                "overwrite_b",
                "debug",
                "check_finite"
            ],
            "solveh_banded": [
                "ab",
                "b",
                "overwrite_ab",
                "overwrite_b",
                "lower",
                "check_finite"
            ],
            "solve_toeplitz": [
                "c_or_cr",
                "b",
                "check_finite"
            ],
            "_get_axis_len": [
                "aname",
                "a",
                "axis"
            ],
            "solve_circulant": [
                "c",
                "b",
                "singular",
                "tol",
                "caxis",
                "baxis",
                "outaxis"
            ],
            "inv": [
                "a",
                "overwrite_a",
                "check_finite"
            ],
            "det": [
                "a",
                "overwrite_a",
                "check_finite"
            ],
            "lstsq": [
                "a",
                "b",
                "cond",
                "overwrite_a",
                "overwrite_b",
                "check_finite",
                "lapack_driver"
            ],
            "pinv": [
                "a",
                "cond",
                "rcond",
                "return_rank",
                "check_finite"
            ],
            "pinv2": [
                "a",
                "cond",
                "rcond",
                "return_rank",
                "check_finite"
            ],
            "pinvh": [
                "a",
                "cond",
                "rcond",
                "lower",
                "return_rank",
                "check_finite"
            ],
            "matrix_balance": [
                "A",
                "permute",
                "scale",
                "separate",
                "overwrite_a"
            ],
            "_validate_args_for_toeplitz_ops": [
                "c_or_cr",
                "b",
                "check_finite",
                "keep_b_shape",
                "enforce_square"
            ],
            "matmul_toeplitz": [
                "c_or_cr",
                "x",
                "check_finite",
                "workers"
            ]
        },
        "scipy.linalg._sketches": {
            "cwt_matrix": [
                "n_rows",
                "n_columns",
                "seed"
            ],
            "clarkson_woodruff_transform": [
                "input_matrix",
                "sketch_size",
                "seed"
            ]
        },
        "scipy.linalg._decomp_cossin": {
            "cossin": [
                "X",
                "p",
                "q",
                "separate",
                "swap_sign",
                "compute_u",
                "compute_vh"
            ]
        },
        "scipy.linalg._decomp_polar": {
            "polar": [
                "a",
                "side"
            ]
        },
        "scipy.linalg.interpolative": {
            "_is_real": [
                "A"
            ],
            "seed": [
                "seed"
            ],
            "rand": [],
            "interp_decomp": [
                "A",
                "eps_or_k",
                "rand"
            ],
            "reconstruct_matrix_from_id": [
                "B",
                "idx",
                "proj"
            ],
            "reconstruct_interp_matrix": [
                "idx",
                "proj"
            ],
            "reconstruct_skel_matrix": [
                "A",
                "k",
                "idx"
            ],
            "id_to_svd": [
                "B",
                "idx",
                "proj"
            ],
            "estimate_spectral_norm": [
                "A",
                "its"
            ],
            "estimate_spectral_norm_diff": [
                "A",
                "B",
                "its"
            ],
            "svd": [
                "A",
                "eps_or_k",
                "rand"
            ],
            "estimate_rank": [
                "A",
                "eps"
            ]
        },
        "scipy.linalg.decomp_lu": {
            "lu_factor": [
                "a",
                "overwrite_a",
                "check_finite"
            ],
            "lu_solve": [
                "lu_and_piv",
                "b",
                "trans",
                "overwrite_b",
                "check_finite"
            ],
            "lu": [
                "a",
                "permute_l",
                "overwrite_a",
                "check_finite"
            ]
        },
        "scipy.linalg.lapack": {
            "backtickrepl": [
                "m"
            ],
            "get_lapack_funcs": [
                "names",
                "arrays",
                "dtype",
                "ilp64"
            ],
            "_compute_lwork": [
                "routine"
            ],
            "_check_work_float": [
                "value",
                "dtype",
                "int_dtype"
            ]
        },
        "scipy.linalg._generate_pyx": {
            "arg_names_and_types": [
                "args"
            ],
            "arg_casts": [
                "arg"
            ],
            "pyx_decl_func": [
                "name",
                "ret_type",
                "args",
                "header_name"
            ],
            "pyx_decl_sub": [
                "name",
                "args",
                "header_name"
            ],
            "make_blas_pyx_preamble": [
                "all_sigs"
            ],
            "make_lapack_pyx_preamble": [
                "all_sigs"
            ],
            "generate_blas_pyx": [
                "func_sigs",
                "sub_sigs",
                "all_sigs",
                "header_name"
            ],
            "generate_lapack_pyx": [
                "func_sigs",
                "sub_sigs",
                "all_sigs",
                "header_name"
            ],
            "pxd_decl": [
                "name",
                "ret_type",
                "args"
            ],
            "generate_blas_pxd": [
                "all_sigs"
            ],
            "generate_lapack_pxd": [
                "all_sigs"
            ],
            "process_fortran_name": [
                "name",
                "funcname"
            ],
            "called_name": [
                "name"
            ],
            "fort_subroutine_wrapper": [
                "name",
                "ret_type",
                "args"
            ],
            "generate_fortran": [
                "func_sigs"
            ],
            "make_c_args": [
                "args"
            ],
            "c_func_decl": [
                "name",
                "return_type",
                "args"
            ],
            "c_sub_decl": [
                "name",
                "return_type",
                "args"
            ],
            "generate_c_header": [
                "func_sigs",
                "sub_sigs",
                "all_sigs",
                "lib_name"
            ],
            "split_signature": [
                "sig"
            ],
            "filter_lines": [
                "lines"
            ],
            "all_newer": [
                "src_files",
                "dst_files"
            ],
            "make_all": [
                "blas_signature_file",
                "lapack_signature_file",
                "blas_name",
                "lapack_name",
                "blas_fortran_name",
                "lapack_fortran_name",
                "blas_header_name",
                "lapack_header_name"
            ]
        },
        "scipy.linalg.decomp_qr": {
            "safecall": [
                "f",
                "name"
            ],
            "qr": [
                "a",
                "overwrite_a",
                "lwork",
                "mode",
                "pivoting",
                "check_finite"
            ],
            "qr_multiply": [
                "a",
                "c",
                "mode",
                "pivoting",
                "conjugate",
                "overwrite_a",
                "overwrite_c"
            ],
            "rq": [
                "a",
                "overwrite_a",
                "lwork",
                "mode",
                "check_finite"
            ]
        },
        "scipy.linalg.blas": {
            "find_best_blas_type": [
                "arrays",
                "dtype"
            ],
            "_get_funcs": [
                "names",
                "arrays",
                "dtype",
                "lib_name",
                "fmodule",
                "cmodule",
                "fmodule_name",
                "cmodule_name",
                "alias",
                "ilp64"
            ],
            "_memoize_get_funcs": [
                "func"
            ],
            "get_blas_funcs": [
                "names",
                "arrays",
                "dtype",
                "ilp64"
            ]
        },
        "scipy.linalg._matfuncs_sqrtm": {
            "_sqrtm_triu": [
                "T",
                "blocksize"
            ],
            "sqrtm": [
                "A",
                "disp",
                "blocksize"
            ],
            "SqrtmError": {}
        },
        "scipy.linalg._cython_signature_generator": {
            "get_type": [
                "info",
                "arg"
            ],
            "make_signature": [
                "filename"
            ],
            "get_sig_name": [
                "line"
            ],
            "sigs_from_dir": [
                "directory",
                "outfile",
                "manual_wrappers",
                "exclusions"
            ]
        },
        "scipy.linalg.setup": {
            "configuration": [
                "parent_package",
                "top_path"
            ]
        },
        "scipy.linalg._interpolative_backend": {
            "_asfortranarray_copy": [
                "A"
            ],
            "id_srand": [
                "n"
            ],
            "id_srandi": [
                "t"
            ],
            "id_srando": [],
            "idd_frm": [
                "n",
                "w",
                "x"
            ],
            "idd_sfrm": [
                "l",
                "n",
                "w",
                "x"
            ],
            "idd_frmi": [
                "m"
            ],
            "idd_sfrmi": [
                "l",
                "m"
            ],
            "iddp_id": [
                "eps",
                "A"
            ],
            "iddr_id": [
                "A",
                "k"
            ],
            "idd_reconid": [
                "B",
                "idx",
                "proj"
            ],
            "idd_reconint": [
                "idx",
                "proj"
            ],
            "idd_copycols": [
                "A",
                "k",
                "idx"
            ],
            "idd_id2svd": [
                "B",
                "idx",
                "proj"
            ],
            "idd_snorm": [
                "m",
                "n",
                "matvect",
                "matvec",
                "its"
            ],
            "idd_diffsnorm": [
                "m",
                "n",
                "matvect",
                "matvect2",
                "matvec",
                "matvec2",
                "its"
            ],
            "iddr_svd": [
                "A",
                "k"
            ],
            "iddp_svd": [
                "eps",
                "A"
            ],
            "iddp_aid": [
                "eps",
                "A"
            ],
            "idd_estrank": [
                "eps",
                "A"
            ],
            "iddp_asvd": [
                "eps",
                "A"
            ],
            "iddp_rid": [
                "eps",
                "m",
                "n",
                "matvect"
            ],
            "idd_findrank": [
                "eps",
                "m",
                "n",
                "matvect"
            ],
            "iddp_rsvd": [
                "eps",
                "m",
                "n",
                "matvect",
                "matvec"
            ],
            "iddr_aid": [
                "A",
                "k"
            ],
            "iddr_aidi": [
                "m",
                "n",
                "k"
            ],
            "iddr_asvd": [
                "A",
                "k"
            ],
            "iddr_rid": [
                "m",
                "n",
                "matvect",
                "k"
            ],
            "iddr_rsvd": [
                "m",
                "n",
                "matvect",
                "matvec",
                "k"
            ],
            "idz_frm": [
                "n",
                "w",
                "x"
            ],
            "idz_sfrm": [
                "l",
                "n",
                "w",
                "x"
            ],
            "idz_frmi": [
                "m"
            ],
            "idz_sfrmi": [
                "l",
                "m"
            ],
            "idzp_id": [
                "eps",
                "A"
            ],
            "idzr_id": [
                "A",
                "k"
            ],
            "idz_reconid": [
                "B",
                "idx",
                "proj"
            ],
            "idz_reconint": [
                "idx",
                "proj"
            ],
            "idz_copycols": [
                "A",
                "k",
                "idx"
            ],
            "idz_id2svd": [
                "B",
                "idx",
                "proj"
            ],
            "idz_snorm": [
                "m",
                "n",
                "matveca",
                "matvec",
                "its"
            ],
            "idz_diffsnorm": [
                "m",
                "n",
                "matveca",
                "matveca2",
                "matvec",
                "matvec2",
                "its"
            ],
            "idzr_svd": [
                "A",
                "k"
            ],
            "idzp_svd": [
                "eps",
                "A"
            ],
            "idzp_aid": [
                "eps",
                "A"
            ],
            "idz_estrank": [
                "eps",
                "A"
            ],
            "idzp_asvd": [
                "eps",
                "A"
            ],
            "idzp_rid": [
                "eps",
                "m",
                "n",
                "matveca"
            ],
            "idz_findrank": [
                "eps",
                "m",
                "n",
                "matveca"
            ],
            "idzp_rsvd": [
                "eps",
                "m",
                "n",
                "matveca",
                "matvec"
            ],
            "idzr_aid": [
                "A",
                "k"
            ],
            "idzr_aidi": [
                "m",
                "n",
                "k"
            ],
            "idzr_asvd": [
                "A",
                "k"
            ],
            "idzr_rid": [
                "m",
                "n",
                "matveca",
                "k"
            ],
            "idzr_rsvd": [
                "m",
                "n",
                "matveca",
                "matvec",
                "k"
            ]
        },
        "scipy.linalg.decomp": {
            "_make_complex_eigvecs": [
                "w",
                "vin",
                "dtype"
            ],
            "_make_eigvals": [
                "alpha",
                "beta",
                "homogeneous_eigvals"
            ],
            "_geneig": [
                "a1",
                "b1",
                "left",
                "right",
                "overwrite_a",
                "overwrite_b",
                "homogeneous_eigvals"
            ],
            "eig": [
                "a",
                "b",
                "left",
                "right",
                "overwrite_a",
                "overwrite_b",
                "check_finite",
                "homogeneous_eigvals"
            ],
            "eigh": [
                "a",
                "b",
                "lower",
                "eigvals_only",
                "overwrite_a",
                "overwrite_b",
                "turbo",
                "eigvals",
                "type",
                "check_finite",
                "subset_by_index",
                "subset_by_value",
                "driver"
            ],
            "_check_select": [
                "select",
                "select_range",
                "max_ev",
                "max_len"
            ],
            "eig_banded": [
                "a_band",
                "lower",
                "eigvals_only",
                "overwrite_a_band",
                "select",
                "select_range",
                "max_ev",
                "check_finite"
            ],
            "eigvals": [
                "a",
                "b",
                "overwrite_a",
                "check_finite",
                "homogeneous_eigvals"
            ],
            "eigvalsh": [
                "a",
                "b",
                "lower",
                "overwrite_a",
                "overwrite_b",
                "turbo",
                "eigvals",
                "type",
                "check_finite",
                "subset_by_index",
                "subset_by_value",
                "driver"
            ],
            "eigvals_banded": [
                "a_band",
                "lower",
                "overwrite_a_band",
                "select",
                "select_range",
                "check_finite"
            ],
            "eigvalsh_tridiagonal": [
                "d",
                "e",
                "select",
                "select_range",
                "check_finite",
                "tol",
                "lapack_driver"
            ],
            "eigh_tridiagonal": [
                "d",
                "e",
                "eigvals_only",
                "select",
                "select_range",
                "check_finite",
                "tol",
                "lapack_driver"
            ],
            "_check_info": [
                "info",
                "driver",
                "positive"
            ],
            "hessenberg": [
                "a",
                "calc_q",
                "overwrite_a",
                "check_finite"
            ],
            "cdf2rdf": [
                "w",
                "v"
            ]
        },
        "scipy.linalg._expm_frechet": {
            "expm_frechet": [
                "A",
                "E",
                "method",
                "compute_expm",
                "check_finite"
            ],
            "expm_frechet_block_enlarge": [
                "A",
                "E"
            ],
            "_diff_pade3": [
                "A",
                "E",
                "ident"
            ],
            "_diff_pade5": [
                "A",
                "E",
                "ident"
            ],
            "_diff_pade7": [
                "A",
                "E",
                "ident"
            ],
            "_diff_pade9": [
                "A",
                "E",
                "ident"
            ],
            "expm_frechet_algo_64": [
                "A",
                "E"
            ],
            "vec": [
                "M"
            ],
            "expm_frechet_kronform": [
                "A",
                "method",
                "check_finite"
            ],
            "expm_cond": [
                "A",
                "check_finite"
            ]
        },
        "scipy.linalg._decomp_ldl": {
            "ldl": [
                "A",
                "lower",
                "hermitian",
                "overwrite_a",
                "check_finite"
            ],
            "_ldl_sanitize_ipiv": [
                "a",
                "lower"
            ],
            "_ldl_get_d_and_l": [
                "ldu",
                "pivs",
                "lower",
                "hermitian"
            ],
            "_ldl_construct_tri_factor": [
                "lu",
                "swap_vec",
                "pivs",
                "lower"
            ]
        },
        "scipy.linalg": {},
        "scipy.linalg.decomp_svd": {
            "svd": [
                "a",
                "full_matrices",
                "compute_uv",
                "overwrite_a",
                "check_finite",
                "lapack_driver"
            ],
            "svdvals": [
                "a",
                "overwrite_a",
                "check_finite"
            ],
            "diagsvd": [
                "s",
                "M",
                "N"
            ],
            "orth": [
                "A",
                "rcond"
            ],
            "null_space": [
                "A",
                "rcond"
            ],
            "subspace_angles": [
                "A",
                "B"
            ]
        },
        "scipy.linalg._procrustes": {
            "orthogonal_procrustes": [
                "A",
                "B",
                "check_finite"
            ]
        },
        "scipy.linalg.misc": {
            "norm": [
                "a",
                "ord",
                "axis",
                "keepdims",
                "check_finite"
            ],
            "_datacopied": [
                "arr",
                "original"
            ],
            "LinAlgWarning": {}
        },
        "scipy.linalg._solvers": {
            "solve_sylvester": [
                "a",
                "b",
                "q"
            ],
            "solve_continuous_lyapunov": [
                "a",
                "q"
            ],
            "_solve_discrete_lyapunov_direct": [
                "a",
                "q"
            ],
            "_solve_discrete_lyapunov_bilinear": [
                "a",
                "q"
            ],
            "solve_discrete_lyapunov": [
                "a",
                "q",
                "method"
            ],
            "solve_continuous_are": [
                "a",
                "b",
                "q",
                "r",
                "e",
                "s",
                "balanced"
            ],
            "solve_discrete_are": [
                "a",
                "b",
                "q",
                "r",
                "e",
                "s",
                "balanced"
            ],
            "_are_validate_args": [
                "a",
                "b",
                "q",
                "r",
                "e",
                "s",
                "eq_type"
            ]
        },
        "scipy.linalg._testutils": {
            "_get_array": [
                "shape",
                "dtype"
            ],
            "_id": [
                "x"
            ],
            "assert_no_overwrite": [
                "call",
                "shapes",
                "dtypes"
            ],
            "_FakeMatrix": {
                "__init__": [
                    "self",
                    "data"
                ]
            },
            "_FakeMatrix2": {
                "__init__": [
                    "self",
                    "data"
                ],
                "__array__": [
                    "self"
                ]
            }
        },
        "scipy.linalg.decomp_schur": {
            "schur": [
                "a",
                "output",
                "lwork",
                "overwrite_a",
                "sort",
                "check_finite"
            ],
            "_commonType": [],
            "_castCopy": [
                "type"
            ],
            "rsf2csf": [
                "T",
                "Z",
                "check_finite"
            ]
        },
        "scipy.linalg.special_matrices": {
            "tri": [
                "N",
                "M",
                "k",
                "dtype"
            ],
            "tril": [
                "m",
                "k"
            ],
            "triu": [
                "m",
                "k"
            ],
            "toeplitz": [
                "c",
                "r"
            ],
            "circulant": [
                "c"
            ],
            "hankel": [
                "c",
                "r"
            ],
            "hadamard": [
                "n",
                "dtype"
            ],
            "leslie": [
                "f",
                "s"
            ],
            "kron": [
                "a",
                "b"
            ],
            "block_diag": [],
            "companion": [
                "a"
            ],
            "helmert": [
                "n",
                "full"
            ],
            "hilbert": [
                "n"
            ],
            "invhilbert": [
                "n",
                "exact"
            ],
            "pascal": [
                "n",
                "kind",
                "exact"
            ],
            "invpascal": [
                "n",
                "kind",
                "exact"
            ],
            "dft": [
                "n",
                "scale"
            ],
            "fiedler": [
                "a"
            ],
            "fiedler_companion": [
                "a"
            ],
            "convolution_matrix": [
                "a",
                "n",
                "mode"
            ]
        },
        "scipy.linalg._decomp_qz": {
            "_select_function": [
                "sort"
            ],
            "_lhp": [
                "x",
                "y"
            ],
            "_rhp": [
                "x",
                "y"
            ],
            "_iuc": [
                "x",
                "y"
            ],
            "_ouc": [
                "x",
                "y"
            ],
            "_qz": [
                "A",
                "B",
                "output",
                "lwork",
                "sort",
                "overwrite_a",
                "overwrite_b",
                "check_finite"
            ],
            "qz": [
                "A",
                "B",
                "output",
                "lwork",
                "sort",
                "overwrite_a",
                "overwrite_b",
                "check_finite"
            ],
            "ordqz": [
                "A",
                "B",
                "sort",
                "output",
                "overwrite_a",
                "overwrite_b",
                "check_finite"
            ]
        },
        "scipy.linalg.decomp_cholesky": {
            "_cholesky": [
                "a",
                "lower",
                "overwrite_a",
                "clean",
                "check_finite"
            ],
            "cholesky": [
                "a",
                "lower",
                "overwrite_a",
                "check_finite"
            ],
            "cho_factor": [
                "a",
                "lower",
                "overwrite_a",
                "check_finite"
            ],
            "cho_solve": [
                "c_and_lower",
                "b",
                "overwrite_b",
                "check_finite"
            ],
            "cholesky_banded": [
                "ab",
                "overwrite_ab",
                "lower",
                "check_finite"
            ],
            "cho_solve_banded": [
                "cb_and_lower",
                "b",
                "overwrite_b",
                "check_finite"
            ]
        },
        "scipy.linalg.flinalg": {
            "has_column_major_storage": [
                "arr"
            ],
            "get_flinalg_funcs": [
                "names",
                "arrays",
                "debug"
            ]
        },
        "scipy.linalg.matfuncs": {
            "_asarray_square": [
                "A"
            ],
            "_maybe_real": [
                "A",
                "B",
                "tol"
            ],
            "fractional_matrix_power": [
                "A",
                "t"
            ],
            "logm": [
                "A",
                "disp"
            ],
            "expm": [
                "A"
            ],
            "cosm": [
                "A"
            ],
            "sinm": [
                "A"
            ],
            "tanm": [
                "A"
            ],
            "coshm": [
                "A"
            ],
            "sinhm": [
                "A"
            ],
            "tanhm": [
                "A"
            ],
            "funm": [
                "A",
                "func",
                "disp"
            ],
            "signm": [
                "A",
                "disp"
            ],
            "khatri_rao": [
                "a",
                "b"
            ]
        },
        "scipy.linalg._matfuncs_inv_ssq": {
            "_onenormest_m1_power": [
                "A",
                "p",
                "t",
                "itmax",
                "compute_v",
                "compute_w"
            ],
            "_unwindk": [
                "z"
            ],
            "_briggs_helper_function": [
                "a",
                "k"
            ],
            "_fractional_power_superdiag_entry": [
                "l1",
                "l2",
                "t12",
                "p"
            ],
            "_logm_superdiag_entry": [
                "l1",
                "l2",
                "t12"
            ],
            "_inverse_squaring_helper": [
                "T0",
                "theta"
            ],
            "_fractional_power_pade_constant": [
                "i",
                "t"
            ],
            "_fractional_power_pade": [
                "R",
                "t",
                "m"
            ],
            "_remainder_matrix_power_triu": [
                "T",
                "t"
            ],
            "_remainder_matrix_power": [
                "A",
                "t"
            ],
            "_fractional_matrix_power": [
                "A",
                "p"
            ],
            "_logm_triu": [
                "T"
            ],
            "_logm_force_nonsingular_triangular_matrix": [
                "T",
                "inplace"
            ],
            "_logm": [
                "A"
            ],
            "LogmRankWarning": {},
            "LogmExactlySingularWarning": {},
            "LogmNearlySingularWarning": {},
            "LogmError": {},
            "FractionalMatrixPowerError": {},
            "_MatrixM1PowerOperator": {
                "__init__": [
                    "self",
                    "A",
                    "p"
                ],
                "_matvec": [
                    "self",
                    "x"
                ],
                "_rmatvec": [
                    "self",
                    "x"
                ],
                "_matmat": [
                    "self",
                    "X"
                ],
                "_adjoint": [
                    "self"
                ]
            }
        },
        "scipy.linalg.tests.test_decomp_cholesky": {
            "TestCholesky": {
                "test_simple": [
                    "self"
                ],
                "test_check_finite": [
                    "self"
                ],
                "test_simple_complex": [
                    "self"
                ],
                "test_random": [
                    "self"
                ],
                "test_random_complex": [
                    "self"
                ]
            },
            "TestCholeskyBanded": {
                "test_check_finite": [
                    "self"
                ],
                "test_upper_real": [
                    "self"
                ],
                "test_upper_complex": [
                    "self"
                ],
                "test_lower_real": [
                    "self"
                ],
                "test_lower_complex": [
                    "self"
                ]
            },
            "TestOverwrite": {
                "test_cholesky": [
                    "self"
                ],
                "test_cho_factor": [
                    "self"
                ],
                "test_cho_solve": [
                    "self"
                ],
                "test_cholesky_banded": [
                    "self"
                ],
                "test_cho_solve_banded": [
                    "self"
                ]
            },
            "TestEmptyArray": {
                "test_cho_factor_empty_square": [
                    "self"
                ]
            }
        },
        "scipy.linalg.tests.test_procrustes": {
            "test_orthogonal_procrustes_ndim_too_large": [],
            "test_orthogonal_procrustes_ndim_too_small": [],
            "test_orthogonal_procrustes_shape_mismatch": [],
            "test_orthogonal_procrustes_checkfinite_exception": [],
            "test_orthogonal_procrustes_scale_invariance": [],
            "test_orthogonal_procrustes_array_conversion": [],
            "test_orthogonal_procrustes": [],
            "_centered": [
                "A"
            ],
            "test_orthogonal_procrustes_exact_example": [],
            "test_orthogonal_procrustes_stretched_example": [],
            "test_orthogonal_procrustes_skbio_example": []
        },
        "scipy.linalg.tests.test_blas": {
            "test_get_blas_funcs": [],
            "test_get_blas_funcs_alias": [],
            "_get_func": [
                "func",
                "ps"
            ],
            "test_trsm": [],
            "TestCBLAS1Simple": {
                "test_axpy": [
                    "self"
                ]
            },
            "TestFBLAS1Simple": {
                "test_axpy": [
                    "self"
                ],
                "test_copy": [
                    "self"
                ],
                "test_asum": [
                    "self"
                ],
                "test_dot": [
                    "self"
                ],
                "test_complex_dotu": [
                    "self"
                ],
                "test_complex_dotc": [
                    "self"
                ],
                "test_nrm2": [
                    "self"
                ],
                "test_scal": [
                    "self"
                ],
                "test_swap": [
                    "self"
                ],
                "test_amax": [
                    "self"
                ]
            },
            "TestFBLAS2Simple": {
                "test_gemv": [
                    "self"
                ],
                "test_ger": [
                    "self"
                ],
                "test_syr_her": [
                    "self"
                ],
                "test_syr2": [
                    "self"
                ],
                "test_her2": [
                    "self"
                ],
                "test_gbmv": [
                    "self"
                ],
                "test_sbmv_hbmv": [
                    "self"
                ],
                "test_spmv_hpmv": [
                    "self"
                ],
                "test_spr_hpr": [
                    "self"
                ],
                "test_spr2_hpr2": [
                    "self"
                ],
                "test_tbmv": [
                    "self"
                ],
                "test_tbsv": [
                    "self"
                ],
                "test_tpmv": [
                    "self"
                ],
                "test_tpsv": [
                    "self"
                ],
                "test_trmv": [
                    "self"
                ],
                "test_trsv": [
                    "self"
                ]
            },
            "TestFBLAS3Simple": {
                "test_gemm": [
                    "self"
                ]
            },
            "TestBLAS3Symm": {
                "setup_method": [
                    "self"
                ],
                "test_symm": [
                    "self"
                ],
                "test_summ_wrong_side": [
                    "self"
                ],
                "test_symm_wrong_uplo": [
                    "self"
                ]
            },
            "TestBLAS3Syrk": {
                "setup_method": [
                    "self"
                ],
                "test_syrk": [
                    "self"
                ],
                "test_syrk_wrong_c": [
                    "self"
                ]
            },
            "TestBLAS3Syr2k": {
                "setup_method": [
                    "self"
                ],
                "test_syr2k": [
                    "self"
                ],
                "test_syr2k_wrong_c": [
                    "self"
                ]
            },
            "TestSyHe": {
                "setup_method": [
                    "self"
                ],
                "test_symm_zc": [
                    "self"
                ],
                "test_hemm_zc": [
                    "self"
                ],
                "test_syrk_zr": [
                    "self"
                ],
                "test_herk_zr": [
                    "self"
                ],
                "test_syr2k_zr": [
                    "self"
                ],
                "test_her2k_zr": [
                    "self"
                ]
            },
            "TestTRMM": {
                "setup_method": [
                    "self"
                ],
                "test_side": [
                    "self",
                    "dtype_"
                ],
                "test_ab": [
                    "self"
                ],
                "test_ab_lower": [
                    "self"
                ],
                "test_b_overwrites": [
                    "self"
                ]
            }
        },
        "scipy.linalg.tests.test_sketches": {
            "TestClarksonWoodruffTransform": {
                "test_sketch_dimensions": [
                    "self"
                ],
                "test_seed_returns_identical_transform_matrix": [
                    "self"
                ],
                "test_seed_returns_identically": [
                    "self"
                ],
                "test_sketch_preserves_frobenius_norm": [
                    "self"
                ],
                "test_sketch_preserves_vector_norm": [
                    "self"
                ]
            }
        },
        "scipy.linalg.tests.test_decomp_polar": {
            "check_precomputed_polar": [
                "a",
                "side",
                "expected_u",
                "expected_p"
            ],
            "verify_polar": [
                "a"
            ],
            "test_precomputed_cases": [],
            "test_verify_cases": []
        },
        "scipy.linalg.tests.test_build": {
            "FindDependenciesLdd": {
                "__init__": [
                    "self"
                ],
                "get_dependencies": [
                    "self",
                    "file"
                ],
                "grep_dependencies": [
                    "self",
                    "file",
                    "deps"
                ]
            },
            "TestF77Mismatch": {
                "test_lapack": [
                    "self"
                ]
            }
        },
        "scipy.linalg.tests.test_basic": {
            "_eps_cast": [
                "dtyp"
            ],
            "direct_lstsq": [
                "a",
                "b",
                "cmplx"
            ],
            "test_pinv_pinv2_comparison": [],
            "test_auto_rcond": [
                "scale",
                "pinv_"
            ],
            "TestSolveBanded": {
                "test_real": [
                    "self"
                ],
                "test_complex": [
                    "self"
                ],
                "test_tridiag_real": [
                    "self"
                ],
                "test_tridiag_complex": [
                    "self"
                ],
                "test_check_finite": [
                    "self"
                ],
                "test_bad_shape": [
                    "self"
                ],
                "test_1x1": [
                    "self"
                ],
                "test_native_list_arguments": [
                    "self"
                ]
            },
            "TestSolveHBanded": {
                "test_01_upper": [
                    "self"
                ],
                "test_02_upper": [
                    "self"
                ],
                "test_03_upper": [
                    "self"
                ],
                "test_01_lower": [
                    "self"
                ],
                "test_02_lower": [
                    "self"
                ],
                "test_01_float32": [
                    "self"
                ],
                "test_02_float32": [
                    "self"
                ],
                "test_01_complex": [
                    "self"
                ],
                "test_02_complex": [
                    "self"
                ],
                "test_tridiag_01_upper": [
                    "self"
                ],
                "test_tridiag_02_upper": [
                    "self"
                ],
                "test_tridiag_03_upper": [
                    "self"
                ],
                "test_tridiag_01_lower": [
                    "self"
                ],
                "test_tridiag_02_lower": [
                    "self"
                ],
                "test_tridiag_01_float32": [
                    "self"
                ],
                "test_tridiag_02_float32": [
                    "self"
                ],
                "test_tridiag_01_complex": [
                    "self"
                ],
                "test_tridiag_02_complex": [
                    "self"
                ],
                "test_check_finite": [
                    "self"
                ],
                "test_bad_shapes": [
                    "self"
                ],
                "test_1x1": [
                    "self"
                ],
                "test_native_list_arguments": [
                    "self"
                ]
            },
            "TestSolve": {
                "setup_method": [
                    "self"
                ],
                "test_20Feb04_bug": [
                    "self"
                ],
                "test_simple": [
                    "self"
                ],
                "test_simple_sym": [
                    "self"
                ],
                "test_simple_sym_complex": [
                    "self"
                ],
                "test_simple_complex": [
                    "self"
                ],
                "test_nils_20Feb04": [
                    "self"
                ],
                "test_random": [
                    "self"
                ],
                "test_random_complex": [
                    "self"
                ],
                "test_random_sym": [
                    "self"
                ],
                "test_random_sym_complex": [
                    "self"
                ],
                "test_check_finite": [
                    "self"
                ],
                "test_scalar_a_and_1D_b": [
                    "self"
                ],
                "test_simple2": [
                    "self"
                ],
                "test_simple_complex2": [
                    "self"
                ],
                "test_hermitian": [
                    "self"
                ],
                "test_pos_and_sym": [
                    "self"
                ],
                "test_singularity": [
                    "self"
                ],
                "test_ill_condition_warning": [
                    "self"
                ],
                "test_empty_rhs": [
                    "self"
                ],
                "test_multiple_rhs": [
                    "self"
                ],
                "test_transposed_keyword": [
                    "self"
                ],
                "test_transposed_notimplemented": [
                    "self"
                ],
                "test_nonsquare_a": [
                    "self"
                ],
                "test_size_mismatch_with_1D_b": [
                    "self"
                ],
                "test_assume_a_keyword": [
                    "self"
                ],
                "test_all_type_size_routine_combinations": [
                    "self"
                ]
            },
            "TestSolveTriangular": {
                "test_simple": [
                    "self"
                ],
                "test_simple_complex": [
                    "self"
                ],
                "test_check_finite": [
                    "self"
                ]
            },
            "TestInv": {
                "setup_method": [
                    "self"
                ],
                "test_simple": [
                    "self"
                ],
                "test_random": [
                    "self"
                ],
                "test_simple_complex": [
                    "self"
                ],
                "test_random_complex": [
                    "self"
                ],
                "test_check_finite": [
                    "self"
                ]
            },
            "TestDet": {
                "setup_method": [
                    "self"
                ],
                "test_simple": [
                    "self"
                ],
                "test_simple_complex": [
                    "self"
                ],
                "test_random": [
                    "self"
                ],
                "test_random_complex": [
                    "self"
                ],
                "test_check_finite": [
                    "self"
                ]
            },
            "TestLstsq": {
                "setup_method": [
                    "self"
                ],
                "test_simple_exact": [
                    "self"
                ],
                "test_simple_overdet": [
                    "self"
                ],
                "test_simple_overdet_complex": [
                    "self"
                ],
                "test_simple_underdet": [
                    "self"
                ],
                "test_random_exact": [
                    "self"
                ],
                "test_random_complex_exact": [
                    "self"
                ],
                "test_random_overdet": [
                    "self"
                ],
                "test_random_complex_overdet": [
                    "self"
                ],
                "test_check_finite": [
                    "self"
                ],
                "test_zero_size": [
                    "self"
                ]
            },
            "TestPinv": {
                "test_simple_real": [
                    "self"
                ],
                "test_simple_complex": [
                    "self"
                ],
                "test_simple_singular": [
                    "self"
                ],
                "test_simple_cols": [
                    "self"
                ],
                "test_simple_rows": [
                    "self"
                ],
                "test_check_finite": [
                    "self"
                ],
                "test_native_list_argument": [
                    "self"
                ],
                "test_tall_transposed": [
                    "self"
                ]
            },
            "TestPinvSymmetric": {
                "test_simple_real": [
                    "self"
                ],
                "test_nonpositive": [
                    "self"
                ],
                "test_simple_complex": [
                    "self"
                ],
                "test_native_list_argument": [
                    "self"
                ]
            },
            "TestVectorNorms": {
                "test_types": [
                    "self"
                ],
                "test_overflow": [
                    "self"
                ],
                "test_stable": [
                    "self"
                ],
                "test_zero_norm": [
                    "self"
                ],
                "test_axis_kwd": [
                    "self"
                ],
                "test_keepdims_kwd": [
                    "self"
                ],
                "test_large_vector": [
                    "self"
                ]
            },
            "TestMatrixNorms": {
                "test_matrix_norms": [
                    "self"
                ],
                "test_axis_kwd": [
                    "self"
                ],
                "test_keepdims_kwd": [
                    "self"
                ]
            },
            "TestOverwrite": {
                "test_solve": [
                    "self"
                ],
                "test_solve_triangular": [
                    "self"
                ],
                "test_solve_banded": [
                    "self"
                ],
                "test_solveh_banded": [
                    "self"
                ],
                "test_inv": [
                    "self"
                ],
                "test_det": [
                    "self"
                ],
                "test_lstsq": [
                    "self"
                ],
                "test_pinv": [
                    "self"
                ],
                "test_pinv2": [
                    "self"
                ],
                "test_pinvh": [
                    "self"
                ]
            },
            "TestSolveCirculant": {
                "test_basic1": [
                    "self"
                ],
                "test_basic2": [
                    "self"
                ],
                "test_basic3": [
                    "self"
                ],
                "test_complex": [
                    "self"
                ],
                "test_random_b_and_c": [
                    "self"
                ],
                "test_singular": [
                    "self"
                ],
                "test_axis_args": [
                    "self"
                ],
                "test_native_list_arguments": [
                    "self"
                ]
            },
            "TestMatrix_Balance": {
                "test_string_arg": [
                    "self"
                ],
                "test_infnan_arg": [
                    "self"
                ],
                "test_scaling": [
                    "self"
                ],
                "test_scaling_order": [
                    "self"
                ],
                "test_separate": [
                    "self"
                ],
                "test_permutation": [
                    "self"
                ],
                "test_perm_and_scaling": [
                    "self"
                ]
            }
        },
        "scipy.linalg.tests.test_decomp_cossin": {
            "test_cossin": [
                "dtype_",
                "m",
                "p",
                "q",
                "swap_sign"
            ],
            "test_cossin_mixed_types": [],
            "test_cossin_error_incorrect_subblocks": [],
            "test_cossin_error_empty_subblocks": [],
            "test_cossin_error_missing_partitioning": [],
            "test_cossin_error_non_iterable": [],
            "test_cossin_error_non_square": [],
            "test_cossin_error_partitioning": [],
            "test_cossin_separate": [
                "dtype_"
            ]
        },
        "scipy.linalg.tests.test_fblas": {
            "matrixmultiply": [
                "a",
                "b"
            ],
            "BaseAxpy": {
                "test_default_a": [
                    "self"
                ],
                "test_simple": [
                    "self"
                ],
                "test_x_stride": [
                    "self"
                ],
                "test_y_stride": [
                    "self"
                ],
                "test_x_and_y_stride": [
                    "self"
                ],
                "test_x_bad_size": [
                    "self"
                ],
                "test_y_bad_size": [
                    "self"
                ]
            },
            "TestDaxpy": {},
            "TestZaxpy": {},
            "BaseScal": {
                "test_simple": [
                    "self"
                ],
                "test_x_stride": [
                    "self"
                ],
                "test_x_bad_size": [
                    "self"
                ]
            },
            "TestDscal": {},
            "TestZscal": {},
            "BaseCopy": {
                "test_simple": [
                    "self"
                ],
                "test_x_stride": [
                    "self"
                ],
                "test_y_stride": [
                    "self"
                ],
                "test_x_and_y_stride": [
                    "self"
                ],
                "test_x_bad_size": [
                    "self"
                ],
                "test_y_bad_size": [
                    "self"
                ]
            },
            "TestDcopy": {},
            "TestZcopy": {},
            "BaseSwap": {
                "test_simple": [
                    "self"
                ],
                "test_x_stride": [
                    "self"
                ],
                "test_y_stride": [
                    "self"
                ],
                "test_x_and_y_stride": [
                    "self"
                ],
                "test_x_bad_size": [
                    "self"
                ],
                "test_y_bad_size": [
                    "self"
                ]
            },
            "TestDswap": {},
            "TestZswap": {},
            "BaseGemv": {
                "get_data": [
                    "self",
                    "x_stride",
                    "y_stride"
                ],
                "test_simple": [
                    "self"
                ],
                "test_default_beta_y": [
                    "self"
                ],
                "test_simple_transpose": [
                    "self"
                ],
                "test_simple_transpose_conj": [
                    "self"
                ],
                "test_x_stride": [
                    "self"
                ],
                "test_x_stride_transpose": [
                    "self"
                ],
                "test_x_stride_assert": [
                    "self"
                ],
                "test_y_stride": [
                    "self"
                ],
                "test_y_stride_transpose": [
                    "self"
                ],
                "test_y_stride_assert": [
                    "self"
                ]
            },
            "TestDgemv": {},
            "TestZgemv": {}
        },
        "scipy.linalg.tests.test_solve_toeplitz": {
            "test_solve_equivalence": [],
            "test_multiple_rhs": [],
            "test_native_list_arguments": [],
            "test_zero_diag_error": [],
            "test_wikipedia_counterexample": [],
            "test_reflection_coeffs": [],
            "test_unstable": []
        },
        "scipy.linalg.tests.test_cython_blas": {
            "TestDGEMM": {
                "test_transposes": [
                    "self"
                ],
                "test_shapes": [
                    "self"
                ]
            },
            "TestWfuncPointers": {
                "test_complex_args": [
                    "self"
                ],
                "test_double_args": [
                    "self"
                ],
                "test_float_args": [
                    "self"
                ],
                "test_double_complex_args": [
                    "self"
                ]
            }
        },
        "scipy.linalg.tests": {},
        "scipy.linalg.tests.test_decomp": {
            "_random_hermitian_matrix": [
                "n",
                "posdef",
                "dtype"
            ],
            "clear_fuss": [
                "ar",
                "fuss_binary_bits"
            ],
            "assert_dtype_equal": [
                "act",
                "des"
            ],
            "symrand": [
                "dim_or_eigv"
            ],
            "_complex_symrand": [
                "dim",
                "dtype"
            ],
            "_make_pos": [
                "X"
            ],
            "test_aligned_mem_float": [],
            "test_aligned_mem": [],
            "test_aligned_mem_complex": [],
            "check_lapack_misaligned": [
                "func",
                "args",
                "kwargs"
            ],
            "test_lapack_misaligned": [],
            "_check_orth": [
                "n",
                "dtype",
                "skip_big"
            ],
            "test_orth_memory_efficiency": [],
            "test_orth": [],
            "test_null_space": [],
            "test_subspace_angles": [],
            "TestEigVals": {
                "test_simple": [
                    "self"
                ],
                "test_simple_tr": [
                    "self"
                ],
                "test_simple_complex": [
                    "self"
                ],
                "test_finite": [
                    "self"
                ]
            },
            "TestEig": {
                "test_simple": [
                    "self"
                ],
                "test_simple_complex_eig": [
                    "self"
                ],
                "test_simple_complex": [
                    "self"
                ],
                "test_gh_3054": [
                    "self"
                ],
                "_check_gen_eig": [
                    "self",
                    "A",
                    "B"
                ],
                "test_singular": [
                    "self"
                ],
                "test_falker": [
                    "self"
                ],
                "test_bad_geneig": [
                    "self"
                ],
                "test_make_eigvals": [
                    "self"
                ],
                "test_check_finite": [
                    "self"
                ],
                "test_not_square_error": [
                    "self"
                ],
                "test_shape_mismatch": [
                    "self"
                ]
            },
            "TestEigBanded": {
                "setup_method": [
                    "self"
                ],
                "create_bandmat": [
                    "self"
                ],
                "test_dsbev": [
                    "self"
                ],
                "test_dsbevd": [
                    "self"
                ],
                "test_dsbevx": [
                    "self"
                ],
                "test_zhbevd": [
                    "self"
                ],
                "test_zhbevx": [
                    "self"
                ],
                "test_eigvals_banded": [
                    "self"
                ],
                "test_eig_banded": [
                    "self"
                ],
                "test_dgbtrf": [
                    "self"
                ],
                "test_zgbtrf": [
                    "self"
                ],
                "test_dgbtrs": [
                    "self"
                ],
                "test_zgbtrs": [
                    "self"
                ]
            },
            "TestEigTridiagonal": {
                "setup_method": [
                    "self"
                ],
                "create_trimat": [
                    "self"
                ],
                "test_degenerate": [
                    "self"
                ],
                "test_eigvalsh_tridiagonal": [
                    "self"
                ],
                "test_eigh_tridiagonal": [
                    "self"
                ]
            },
            "TestEigh": {
                "setup_class": [
                    "self"
                ],
                "test_wrong_inputs": [
                    "self"
                ],
                "test_nonpositive_b": [
                    "self"
                ],
                "test_value_subsets": [
                    "self"
                ],
                "test_eigh_integer": [
                    "self"
                ],
                "test_eigh_of_sparse": [
                    "self"
                ],
                "test_various_drivers_standard": [
                    "self",
                    "driver"
                ],
                "test_various_drivers_generalized": [
                    "self",
                    "driver",
                    "type"
                ],
                "test_eigh": [
                    "self",
                    "dim",
                    "dtype_",
                    "overwrite",
                    "lower",
                    "turbo",
                    "eigvals"
                ],
                "test_eigvalsh_new_args": [
                    "self"
                ]
            },
            "TestLU": {
                "setup_method": [
                    "self"
                ],
                "_test_common": [
                    "self",
                    "data"
                ],
                "test_simple": [
                    "self"
                ],
                "test_simple_complex": [
                    "self"
                ],
                "test_simple2": [
                    "self"
                ],
                "test_simple2_complex": [
                    "self"
                ],
                "test_hrectangular": [
                    "self"
                ],
                "test_vrectangular": [
                    "self"
                ],
                "test_hrectangular_complex": [
                    "self"
                ],
                "test_vrectangular_complex": [
                    "self"
                ],
                "test_medium1": [
                    "self"
                ],
                "test_medium1_complex": [
                    "self"
                ],
                "test_check_finite": [
                    "self"
                ],
                "test_simple_known": [
                    "self"
                ]
            },
            "TestLUSingle": {
                "setup_method": [
                    "self"
                ]
            },
            "TestLUSolve": {
                "setup_method": [
                    "self"
                ],
                "test_lu": [
                    "self"
                ],
                "test_check_finite": [
                    "self"
                ]
            },
            "TestSVD_GESDD": {
                "setup_method": [
                    "self"
                ],
                "test_degenerate": [
                    "self"
                ],
                "test_simple": [
                    "self"
                ],
                "test_simple_singular": [
                    "self"
                ],
                "test_simple_underdet": [
                    "self"
                ],
                "test_simple_overdet": [
                    "self"
                ],
                "test_random": [
                    "self"
                ],
                "test_simple_complex": [
                    "self"
                ],
                "test_random_complex": [
                    "self"
                ],
                "test_crash_1580": [
                    "self"
                ],
                "test_check_finite": [
                    "self"
                ],
                "test_gh_5039": [
                    "self"
                ],
                "test_large_matrix": [
                    "self"
                ]
            },
            "TestSVD_GESVD": {
                "setup_method": [
                    "self"
                ]
            },
            "TestSVDVals": {
                "test_empty": [
                    "self"
                ],
                "test_simple": [
                    "self"
                ],
                "test_simple_underdet": [
                    "self"
                ],
                "test_simple_overdet": [
                    "self"
                ],
                "test_simple_complex": [
                    "self"
                ],
                "test_simple_underdet_complex": [
                    "self"
                ],
                "test_simple_overdet_complex": [
                    "self"
                ],
                "test_check_finite": [
                    "self"
                ],
                "test_crash_2609": [
                    "self"
                ]
            },
            "TestDiagSVD": {
                "test_simple": [
                    "self"
                ]
            },
            "TestQR": {
                "setup_method": [
                    "self"
                ],
                "test_simple": [
                    "self"
                ],
                "test_simple_left": [
                    "self"
                ],
                "test_simple_right": [
                    "self"
                ],
                "test_simple_pivoting": [
                    "self"
                ],
                "test_simple_left_pivoting": [
                    "self"
                ],
                "test_simple_right_pivoting": [
                    "self"
                ],
                "test_simple_trap": [
                    "self"
                ],
                "test_simple_trap_pivoting": [
                    "self"
                ],
                "test_simple_tall": [
                    "self"
                ],
                "test_simple_tall_pivoting": [
                    "self"
                ],
                "test_simple_tall_e": [
                    "self"
                ],
                "test_simple_tall_e_pivoting": [
                    "self"
                ],
                "test_simple_tall_left": [
                    "self"
                ],
                "test_simple_tall_left_pivoting": [
                    "self"
                ],
                "test_simple_tall_right": [
                    "self"
                ],
                "test_simple_tall_right_pivoting": [
                    "self"
                ],
                "test_simple_fat": [
                    "self"
                ],
                "test_simple_fat_pivoting": [
                    "self"
                ],
                "test_simple_fat_e": [
                    "self"
                ],
                "test_simple_fat_e_pivoting": [
                    "self"
                ],
                "test_simple_fat_left": [
                    "self"
                ],
                "test_simple_fat_left_pivoting": [
                    "self"
                ],
                "test_simple_fat_right": [
                    "self"
                ],
                "test_simple_fat_right_pivoting": [
                    "self"
                ],
                "test_simple_complex": [
                    "self"
                ],
                "test_simple_complex_left": [
                    "self"
                ],
                "test_simple_complex_right": [
                    "self"
                ],
                "test_simple_tall_complex_left": [
                    "self"
                ],
                "test_simple_complex_left_conjugate": [
                    "self"
                ],
                "test_simple_complex_tall_left_conjugate": [
                    "self"
                ],
                "test_simple_complex_right_conjugate": [
                    "self"
                ],
                "test_simple_complex_pivoting": [
                    "self"
                ],
                "test_simple_complex_left_pivoting": [
                    "self"
                ],
                "test_simple_complex_right_pivoting": [
                    "self"
                ],
                "test_random": [
                    "self"
                ],
                "test_random_left": [
                    "self"
                ],
                "test_random_right": [
                    "self"
                ],
                "test_random_pivoting": [
                    "self"
                ],
                "test_random_tall": [
                    "self"
                ],
                "test_random_tall_left": [
                    "self"
                ],
                "test_random_tall_right": [
                    "self"
                ],
                "test_random_tall_pivoting": [
                    "self"
                ],
                "test_random_tall_e": [
                    "self"
                ],
                "test_random_tall_e_pivoting": [
                    "self"
                ],
                "test_random_trap": [
                    "self"
                ],
                "test_random_trap_pivoting": [
                    "self"
                ],
                "test_random_complex": [
                    "self"
                ],
                "test_random_complex_left": [
                    "self"
                ],
                "test_random_complex_right": [
                    "self"
                ],
                "test_random_complex_pivoting": [
                    "self"
                ],
                "test_check_finite": [
                    "self"
                ],
                "test_lwork": [
                    "self"
                ]
            },
            "TestRQ": {
                "setup_method": [
                    "self"
                ],
                "test_simple": [
                    "self"
                ],
                "test_r": [
                    "self"
                ],
                "test_random": [
                    "self"
                ],
                "test_simple_trap": [
                    "self"
                ],
                "test_simple_tall": [
                    "self"
                ],
                "test_simple_fat": [
                    "self"
                ],
                "test_simple_complex": [
                    "self"
                ],
                "test_random_tall": [
                    "self"
                ],
                "test_random_trap": [
                    "self"
                ],
                "test_random_trap_economic": [
                    "self"
                ],
                "test_random_complex": [
                    "self"
                ],
                "test_random_complex_economic": [
                    "self"
                ],
                "test_check_finite": [
                    "self"
                ]
            },
            "TestSchur": {
                "test_simple": [
                    "self"
                ],
                "test_sort": [
                    "self"
                ],
                "test_sort_errors": [
                    "self"
                ],
                "test_check_finite": [
                    "self"
                ]
            },
            "TestHessenberg": {
                "test_simple": [
                    "self"
                ],
                "test_simple_complex": [
                    "self"
                ],
                "test_simple2": [
                    "self"
                ],
                "test_simple3": [
                    "self"
                ],
                "test_random": [
                    "self"
                ],
                "test_random_complex": [
                    "self"
                ],
                "test_check_finite": [
                    "self"
                ],
                "test_2x2": [
                    "self"
                ]
            },
            "TestQZ": {
                "setup_method": [
                    "self"
                ],
                "test_qz_single": [
                    "self"
                ],
                "test_qz_double": [
                    "self"
                ],
                "test_qz_complex": [
                    "self"
                ],
                "test_qz_complex64": [
                    "self"
                ],
                "test_qz_double_complex": [
                    "self"
                ],
                "test_qz_double_sort": [
                    "self"
                ],
                "test_check_finite": [
                    "self"
                ]
            },
            "TestOrdQZ": {
                "setup_class": [
                    "cls"
                ],
                "qz_decomp": [
                    "self",
                    "sort"
                ],
                "check": [
                    "self",
                    "A",
                    "B",
                    "sort",
                    "AA",
                    "BB",
                    "alpha",
                    "beta",
                    "Q",
                    "Z"
                ],
                "check_all": [
                    "self",
                    "sort"
                ],
                "test_lhp": [
                    "self"
                ],
                "test_rhp": [
                    "self"
                ],
                "test_iuc": [
                    "self"
                ],
                "test_ouc": [
                    "self"
                ],
                "test_ref": [
                    "self"
                ],
                "test_cef": [
                    "self"
                ],
                "test_diff_input_types": [
                    "self"
                ],
                "test_sort_explicit": [
                    "self"
                ]
            },
            "TestOrdQZWorkspaceSize": {
                "setup_method": [
                    "self"
                ],
                "test_decompose": [
                    "self"
                ],
                "test_decompose_ouc": [
                    "self"
                ]
            },
            "TestDatacopied": {
                "test_datacopied": [
                    "self"
                ]
            },
            "TestOverwrite": {
                "test_eig": [
                    "self"
                ],
                "test_eigh": [
                    "self"
                ],
                "test_eig_banded": [
                    "self"
                ],
                "test_eigvals": [
                    "self"
                ],
                "test_eigvalsh": [
                    "self"
                ],
                "test_eigvals_banded": [
                    "self"
                ],
                "test_hessenberg": [
                    "self"
                ],
                "test_lu_factor": [
                    "self"
                ],
                "test_lu_solve": [
                    "self"
                ],
                "test_lu": [
                    "self"
                ],
                "test_qr": [
                    "self"
                ],
                "test_rq": [
                    "self"
                ],
                "test_schur": [
                    "self"
                ],
                "test_schur_complex": [
                    "self"
                ],
                "test_svd": [
                    "self"
                ],
                "test_svdvals": [
                    "self"
                ]
            },
            "TestCDF2RDF": {
                "matmul": [
                    "self",
                    "a",
                    "b"
                ],
                "assert_eig_valid": [
                    "self",
                    "w",
                    "v",
                    "x"
                ],
                "test_single_array0x0real": [
                    "self"
                ],
                "test_single_array2x2_real": [
                    "self"
                ],
                "test_single_array2x2_complex": [
                    "self"
                ],
                "test_single_array3x3_real": [
                    "self"
                ],
                "test_single_array3x3_complex": [
                    "self"
                ],
                "test_random_1d_stacked_arrays": [
                    "self"
                ],
                "test_random_2d_stacked_arrays": [
                    "self"
                ],
                "test_low_dimensionality_error": [
                    "self"
                ],
                "test_not_square_error": [
                    "self"
                ],
                "test_swapped_v_w_error": [
                    "self"
                ],
                "test_non_associated_error": [
                    "self"
                ],
                "test_not_conjugate_pairs": [
                    "self"
                ]
            }
        },
        "scipy.linalg.tests.test_cython_lapack": {
            "TestLamch": {
                "test_slamch": [
                    "self"
                ],
                "test_dlamch": [
                    "self"
                ]
            }
        },
        "scipy.linalg.tests.test_matmul_toeplitz": {
            "TestMatmulToeplitz": {
                "setup_method": [
                    "self"
                ],
                "test_real": [
                    "self"
                ],
                "test_complex": [
                    "self"
                ],
                "test_exceptions": [
                    "self"
                ],
                "do": [
                    "self",
                    "x",
                    "c",
                    "r",
                    "check_finite",
                    "workers"
                ]
            }
        },
        "scipy.linalg.tests.test_decomp_update": {
            "assert_unitary": [
                "a",
                "rtol",
                "atol",
                "assert_sqr"
            ],
            "assert_upper_tri": [
                "a",
                "rtol",
                "atol"
            ],
            "check_qr": [
                "q",
                "r",
                "a",
                "rtol",
                "atol",
                "assert_sqr"
            ],
            "make_strided": [
                "arrs"
            ],
            "negate_strides": [
                "arrs"
            ],
            "nonitemsize_strides": [
                "arrs"
            ],
            "make_nonnative": [
                "arrs"
            ],
            "test_form_qTu": [],
            "check_form_qTu": [
                "q_order",
                "q_shape",
                "u_order",
                "u_shape",
                "u_ndim",
                "dtype"
            ],
            "BaseQRdeltas": {
                "setup_method": [
                    "self"
                ],
                "generate": [
                    "self",
                    "type",
                    "mode"
                ]
            },
            "BaseQRdelete": {
                "test_sqr_1_row": [
                    "self"
                ],
                "test_sqr_p_row": [
                    "self"
                ],
                "test_sqr_1_col": [
                    "self"
                ],
                "test_sqr_p_col": [
                    "self"
                ],
                "test_tall_1_row": [
                    "self"
                ],
                "test_tall_p_row": [
                    "self"
                ],
                "test_tall_1_col": [
                    "self"
                ],
                "test_tall_p_col": [
                    "self"
                ],
                "test_fat_1_row": [
                    "self"
                ],
                "test_fat_p_row": [
                    "self"
                ],
                "test_fat_1_col": [
                    "self"
                ],
                "test_fat_p_col": [
                    "self"
                ],
                "test_economic_1_row": [
                    "self"
                ],
                "base_economic_p_row_xxx": [
                    "self",
                    "ndel"
                ],
                "test_economic_p_row_economic": [
                    "self"
                ],
                "test_economic_p_row_sqr": [
                    "self"
                ],
                "test_economic_p_row_fat": [
                    "self"
                ],
                "test_economic_1_col": [
                    "self"
                ],
                "test_economic_p_col": [
                    "self"
                ],
                "test_Mx1_1_row": [
                    "self"
                ],
                "test_Mx1_p_row": [
                    "self"
                ],
                "test_1xN_1_col": [
                    "self"
                ],
                "test_1xN_p_col": [
                    "self"
                ],
                "test_Mx1_economic_1_row": [
                    "self"
                ],
                "test_Mx1_economic_p_row": [
                    "self"
                ],
                "test_delete_last_1_row": [
                    "self"
                ],
                "test_delete_last_p_row": [
                    "self"
                ],
                "test_delete_last_1_col": [
                    "self"
                ],
                "test_delete_last_p_col": [
                    "self"
                ],
                "test_delete_1x1_row_col": [
                    "self"
                ],
                "base_non_simple_strides": [
                    "self",
                    "adjust_strides",
                    "ks",
                    "p",
                    "which",
                    "overwriteable"
                ],
                "test_non_unit_strides_1_row": [
                    "self"
                ],
                "test_non_unit_strides_p_row": [
                    "self"
                ],
                "test_non_unit_strides_1_col": [
                    "self"
                ],
                "test_non_unit_strides_p_col": [
                    "self"
                ],
                "test_neg_strides_1_row": [
                    "self"
                ],
                "test_neg_strides_p_row": [
                    "self"
                ],
                "test_neg_strides_1_col": [
                    "self"
                ],
                "test_neg_strides_p_col": [
                    "self"
                ],
                "test_non_itemize_strides_1_row": [
                    "self"
                ],
                "test_non_itemize_strides_p_row": [
                    "self"
                ],
                "test_non_itemize_strides_1_col": [
                    "self"
                ],
                "test_non_itemize_strides_p_col": [
                    "self"
                ],
                "test_non_native_byte_order_1_row": [
                    "self"
                ],
                "test_non_native_byte_order_p_row": [
                    "self"
                ],
                "test_non_native_byte_order_1_col": [
                    "self"
                ],
                "test_non_native_byte_order_p_col": [
                    "self"
                ],
                "test_neg_k": [
                    "self"
                ],
                "base_overwrite_qr": [
                    "self",
                    "which",
                    "p",
                    "test_C",
                    "test_F",
                    "mode"
                ],
                "test_overwrite_qr_1_row": [
                    "self"
                ],
                "test_overwrite_economic_qr_1_row": [
                    "self"
                ],
                "test_overwrite_qr_1_col": [
                    "self"
                ],
                "test_overwrite_qr_p_row": [
                    "self"
                ],
                "test_overwrite_economic_qr_p_row": [
                    "self"
                ],
                "test_overwrite_qr_p_col": [
                    "self"
                ],
                "test_bad_which": [
                    "self"
                ],
                "test_bad_k": [
                    "self"
                ],
                "test_bad_p": [
                    "self"
                ],
                "test_empty_q": [
                    "self"
                ],
                "test_empty_r": [
                    "self"
                ],
                "test_mismatched_q_and_r": [
                    "self"
                ],
                "test_unsupported_dtypes": [
                    "self"
                ],
                "test_check_finite": [
                    "self"
                ],
                "test_qr_scalar": [
                    "self"
                ]
            },
            "TestQRdelete_f": {},
            "TestQRdelete_F": {},
            "TestQRdelete_d": {},
            "TestQRdelete_D": {},
            "BaseQRinsert": {
                "generate": [
                    "self",
                    "type",
                    "mode",
                    "which",
                    "p"
                ],
                "test_sqr_1_row": [
                    "self"
                ],
                "test_sqr_p_row": [
                    "self"
                ],
                "test_sqr_1_col": [
                    "self"
                ],
                "test_sqr_p_col": [
                    "self"
                ],
                "test_tall_1_row": [
                    "self"
                ],
                "test_tall_p_row": [
                    "self"
                ],
                "test_tall_1_col": [
                    "self"
                ],
                "base_tall_p_col_xxx": [
                    "self",
                    "p"
                ],
                "test_tall_p_col_tall": [
                    "self"
                ],
                "test_tall_p_col_sqr": [
                    "self"
                ],
                "test_tall_p_col_fat": [
                    "self"
                ],
                "test_fat_1_row": [
                    "self"
                ],
                "base_fat_p_row_xxx": [
                    "self",
                    "p"
                ],
                "test_fat_p_row_fat": [
                    "self"
                ],
                "test_fat_p_row_sqr": [
                    "self"
                ],
                "test_fat_p_row_tall": [
                    "self"
                ],
                "test_fat_1_col": [
                    "self"
                ],
                "test_fat_p_col": [
                    "self"
                ],
                "test_economic_1_row": [
                    "self"
                ],
                "test_economic_p_row": [
                    "self"
                ],
                "test_economic_1_col": [
                    "self"
                ],
                "test_economic_1_col_bad_update": [
                    "self"
                ],
                "base_economic_p_col_xxx": [
                    "self",
                    "p"
                ],
                "test_economic_p_col_eco": [
                    "self"
                ],
                "test_economic_p_col_sqr": [
                    "self"
                ],
                "test_economic_p_col_fat": [
                    "self"
                ],
                "test_Mx1_1_row": [
                    "self"
                ],
                "test_Mx1_p_row": [
                    "self"
                ],
                "test_Mx1_1_col": [
                    "self"
                ],
                "test_Mx1_p_col": [
                    "self"
                ],
                "test_Mx1_economic_1_row": [
                    "self"
                ],
                "test_Mx1_economic_p_row": [
                    "self"
                ],
                "test_Mx1_economic_1_col": [
                    "self"
                ],
                "test_Mx1_economic_p_col": [
                    "self"
                ],
                "test_1xN_1_row": [
                    "self"
                ],
                "test_1xN_p_row": [
                    "self"
                ],
                "test_1xN_1_col": [
                    "self"
                ],
                "test_1xN_p_col": [
                    "self"
                ],
                "test_1x1_1_row": [
                    "self"
                ],
                "test_1x1_p_row": [
                    "self"
                ],
                "test_1x1_1_col": [
                    "self"
                ],
                "test_1x1_p_col": [
                    "self"
                ],
                "test_1x1_1_scalar": [
                    "self"
                ],
                "base_non_simple_strides": [
                    "self",
                    "adjust_strides",
                    "k",
                    "p",
                    "which"
                ],
                "test_non_unit_strides_1_row": [
                    "self"
                ],
                "test_non_unit_strides_p_row": [
                    "self"
                ],
                "test_non_unit_strides_1_col": [
                    "self"
                ],
                "test_non_unit_strides_p_col": [
                    "self"
                ],
                "test_neg_strides_1_row": [
                    "self"
                ],
                "test_neg_strides_p_row": [
                    "self"
                ],
                "test_neg_strides_1_col": [
                    "self"
                ],
                "test_neg_strides_p_col": [
                    "self"
                ],
                "test_non_itemsize_strides_1_row": [
                    "self"
                ],
                "test_non_itemsize_strides_p_row": [
                    "self"
                ],
                "test_non_itemsize_strides_1_col": [
                    "self"
                ],
                "test_non_itemsize_strides_p_col": [
                    "self"
                ],
                "test_non_native_byte_order_1_row": [
                    "self"
                ],
                "test_non_native_byte_order_p_row": [
                    "self"
                ],
                "test_non_native_byte_order_1_col": [
                    "self"
                ],
                "test_non_native_byte_order_p_col": [
                    "self"
                ],
                "test_overwrite_qu_rank_1": [
                    "self"
                ],
                "test_overwrite_qu_rank_p": [
                    "self"
                ],
                "test_empty_inputs": [
                    "self"
                ],
                "test_mismatched_shapes": [
                    "self"
                ],
                "test_unsupported_dtypes": [
                    "self"
                ],
                "test_check_finite": [
                    "self"
                ]
            },
            "TestQRinsert_f": {},
            "TestQRinsert_F": {},
            "TestQRinsert_d": {},
            "TestQRinsert_D": {},
            "BaseQRupdate": {
                "generate": [
                    "self",
                    "type",
                    "mode",
                    "p"
                ],
                "test_sqr_rank_1": [
                    "self"
                ],
                "test_sqr_rank_p": [
                    "self"
                ],
                "test_tall_rank_1": [
                    "self"
                ],
                "test_tall_rank_p": [
                    "self"
                ],
                "test_fat_rank_1": [
                    "self"
                ],
                "test_fat_rank_p": [
                    "self"
                ],
                "test_economic_rank_1": [
                    "self"
                ],
                "test_economic_rank_p": [
                    "self"
                ],
                "test_Mx1_rank_1": [
                    "self"
                ],
                "test_Mx1_rank_p": [
                    "self"
                ],
                "test_Mx1_economic_rank_1": [
                    "self"
                ],
                "test_Mx1_economic_rank_p": [
                    "self"
                ],
                "test_1xN_rank_1": [
                    "self"
                ],
                "test_1xN_rank_p": [
                    "self"
                ],
                "test_1x1_rank_1": [
                    "self"
                ],
                "test_1x1_rank_p": [
                    "self"
                ],
                "test_1x1_rank_1_scalar": [
                    "self"
                ],
                "base_non_simple_strides": [
                    "self",
                    "adjust_strides",
                    "mode",
                    "p",
                    "overwriteable"
                ],
                "test_non_unit_strides_rank_1": [
                    "self"
                ],
                "test_non_unit_strides_economic_rank_1": [
                    "self"
                ],
                "test_non_unit_strides_rank_p": [
                    "self"
                ],
                "test_non_unit_strides_economic_rank_p": [
                    "self"
                ],
                "test_neg_strides_rank_1": [
                    "self"
                ],
                "test_neg_strides_economic_rank_1": [
                    "self"
                ],
                "test_neg_strides_rank_p": [
                    "self"
                ],
                "test_neg_strides_economic_rank_p": [
                    "self"
                ],
                "test_non_itemsize_strides_rank_1": [
                    "self"
                ],
                "test_non_itemsize_strides_economic_rank_1": [
                    "self"
                ],
                "test_non_itemsize_strides_rank_p": [
                    "self"
                ],
                "test_non_itemsize_strides_economic_rank_p": [
                    "self"
                ],
                "test_non_native_byte_order_rank_1": [
                    "self"
                ],
                "test_non_native_byte_order_economic_rank_1": [
                    "self"
                ],
                "test_non_native_byte_order_rank_p": [
                    "self"
                ],
                "test_non_native_byte_order_economic_rank_p": [
                    "self"
                ],
                "test_overwrite_qruv_rank_1": [
                    "self"
                ],
                "test_overwrite_qruv_rank_1_economic": [
                    "self"
                ],
                "test_overwrite_qruv_rank_p": [
                    "self"
                ],
                "test_empty_inputs": [
                    "self"
                ],
                "test_mismatched_shapes": [
                    "self"
                ],
                "test_unsupported_dtypes": [
                    "self"
                ],
                "test_integer_input": [
                    "self"
                ],
                "test_check_finite": [
                    "self"
                ],
                "test_economic_check_finite": [
                    "self"
                ],
                "test_u_exactly_in_span_q": [
                    "self"
                ]
            },
            "TestQRupdate_f": {},
            "TestQRupdate_F": {},
            "TestQRupdate_d": {},
            "TestQRupdate_D": {}
        },
        "scipy.linalg.tests.test_lapack": {
            "generate_random_dtype_array": [
                "shape",
                "dtype"
            ],
            "test_lapack_documented": [],
            "test_geqrf_lwork": [
                "dtype",
                "shape"
            ],
            "test_lartg": [],
            "test_rot": [],
            "test_larfg_larf": [],
            "test_sgesdd_lwork_bug_workaround": [],
            "test_gglse": [],
            "test_sycon_hecon": [],
            "test_sygst": [],
            "test_hegst": [],
            "test_tzrzf": [],
            "test_tfsm": [],
            "test_ormrz_unmrz": [],
            "test_tfttr_trttf": [],
            "test_tpttr_trttp": [],
            "test_pftrf": [],
            "test_pftri": [],
            "test_pftrs": [],
            "test_sfrk_hfrk": [],
            "test_syconv": [],
            "test_pstrf": [],
            "test_pstf2": [],
            "test_geequ": [],
            "test_syequb": [],
            "test_heequb": [],
            "test_getc2_gesc2": [],
            "test_gejsv_general": [
                "size",
                "dtype",
                "joba",
                "jobu",
                "jobv",
                "jobr",
                "jobp",
                "jobt"
            ],
            "test_gejsv_edge_arguments": [
                "dtype"
            ],
            "test_gejsv_invalid_job_arguments": [
                "kwargs"
            ],
            "test_gejsv_NAG": [
                "A",
                "sva_expect",
                "u_expect",
                "v_expect"
            ],
            "test_gttrf_gttrs": [
                "dtype"
            ],
            "test_gttrf_gttrs_NAG_f07cdf_f07cef_f07crf_f07csf": [
                "du",
                "d",
                "dl",
                "du_exp",
                "d_exp",
                "du2_exp",
                "ipiv_exp",
                "b",
                "x"
            ],
            "test_geqrfp_lwork": [
                "dtype",
                "shape"
            ],
            "test_pttrf_pttrs": [
                "ddtype",
                "dtype"
            ],
            "test_pttrf_pttrs_errors_incompatible_shape": [
                "ddtype",
                "dtype"
            ],
            "test_pttrf_pttrs_errors_singular_nonSPD": [
                "ddtype",
                "dtype"
            ],
            "test_pttrf_pttrs_NAG": [
                "d",
                "e",
                "d_expect",
                "e_expect",
                "b",
                "x_expect"
            ],
            "pteqr_get_d_e_A_z": [
                "dtype",
                "realtype",
                "n",
                "compute_z"
            ],
            "test_pteqr": [
                "dtype",
                "realtype",
                "compute_z"
            ],
            "test_pteqr_error_non_spd": [
                "dtype",
                "realtype",
                "compute_z"
            ],
            "test_pteqr_raise_error_wrong_shape": [
                "dtype",
                "realtype",
                "compute_z"
            ],
            "test_pteqr_error_singular": [
                "dtype",
                "realtype",
                "compute_z"
            ],
            "test_pteqr_NAG_f08jgf": [
                "compute_z",
                "d",
                "e",
                "d_expect",
                "z_expect"
            ],
            "test_geqrfp": [
                "dtype",
                "matrix_size"
            ],
            "test_geqrfp_errors_with_empty_array": [],
            "test_standard_eigh_lworks": [
                "pfx",
                "driver"
            ],
            "test_generalized_eigh_lworks": [
                "pfx",
                "driver"
            ],
            "test_orcsd_uncsd_lwork": [
                "dtype_",
                "m"
            ],
            "test_orcsd_uncsd": [
                "dtype_"
            ],
            "test_gtsvx": [
                "dtype",
                "trans_bool",
                "fact"
            ],
            "test_gtsvx_error_singular": [
                "dtype",
                "trans_bool",
                "fact"
            ],
            "test_gtsvx_error_incompatible_size": [
                "dtype",
                "trans_bool",
                "fact"
            ],
            "test_gtsvx_NAG": [
                "du",
                "d",
                "dl",
                "b",
                "x"
            ],
            "test_ptsvx": [
                "dtype",
                "realtype",
                "fact",
                "df_de_lambda"
            ],
            "test_ptsvx_error_raise_errors": [
                "dtype",
                "realtype",
                "fact",
                "df_de_lambda"
            ],
            "test_ptsvx_non_SPD_singular": [
                "dtype",
                "realtype",
                "fact",
                "df_de_lambda"
            ],
            "test_ptsvx_NAG": [
                "d",
                "e",
                "b",
                "x"
            ],
            "test_pptrs_pptri_pptrf_ppsv_ppcon": [
                "dtype",
                "lower"
            ],
            "TestFlapackSimple": {
                "test_gebal": [
                    "self"
                ],
                "test_gehrd": [
                    "self"
                ],
                "test_trsyl": [
                    "self"
                ],
                "test_lange": [
                    "self"
                ]
            },
            "TestLapack": {
                "test_flapack": [
                    "self"
                ],
                "test_clapack": [
                    "self"
                ]
            },
            "TestLeastSquaresSolvers": {
                "test_gels": [
                    "self"
                ],
                "test_gelsd": [
                    "self"
                ],
                "test_gelss": [
                    "self"
                ],
                "test_gelsy": [
                    "self"
                ]
            },
            "TestRegression": {
                "test_ticket_1645": [
                    "self"
                ]
            },
            "TestDpotr": {
                "test_gh_2691": [
                    "self"
                ]
            },
            "TestDlasd4": {
                "test_sing_val_update": [
                    "self"
                ]
            },
            "TestTbtrs": {
                "test_nag_example_f07vef_f07vsf": [
                    "self",
                    "dtype"
                ],
                "test_random_matrices": [
                    "self",
                    "dtype",
                    "trans",
                    "uplo",
                    "diag"
                ],
                "test_invalid_argument_raises_exception": [
                    "self",
                    "uplo",
                    "trans",
                    "diag"
                ],
                "test_zero_element_in_diagonal": [
                    "self"
                ],
                "test_invalid_matrix_shapes": [
                    "self",
                    "ldab",
                    "n",
                    "ldb",
                    "nrhs"
                ]
            },
            "TestSytrd": {
                "test_sytrd_with_zero_dim_array": [
                    "self",
                    "dtype"
                ],
                "test_sytrd": [
                    "self",
                    "dtype",
                    "n"
                ]
            },
            "TestHetrd": {
                "test_hetrd_with_zero_dim_array": [
                    "self",
                    "complex_dtype"
                ],
                "test_hetrd": [
                    "self",
                    "n",
                    "real_dtype",
                    "complex_dtype"
                ]
            },
            "TestBlockedQR": {
                "test_geqrt_gemqrt": [
                    "self"
                ],
                "test_tpqrt_tpmqrt": [
                    "self"
                ]
            }
        },
        "scipy.linalg.tests.test_decomp_ldl": {
            "test_args": [],
            "test_empty_array": [],
            "test_simple": [],
            "test_permutations": [],
            "test_ldl_type_size_combinations": []
        },
        "scipy.linalg.tests.test_interpolative": {
            "_debug_print": [
                "s"
            ],
            "TestInterpolativeDecomposition": {
                "test_id": [
                    "self"
                ],
                "check_id": [
                    "self",
                    "dtype"
                ],
                "test_rand": [
                    "self"
                ],
                "test_badcall": [
                    "self"
                ],
                "test_rank_too_large": [
                    "self"
                ],
                "test_full_rank": [
                    "self"
                ],
                "test_bug_9793": [
                    "self"
                ]
            }
        },
        "scipy.linalg.tests.test_solvers": {
            "_load_data": [
                "name"
            ],
            "test_solve_continuous_are": [],
            "test_solve_discrete_are": [],
            "test_solve_generalized_continuous_are": [],
            "test_solve_generalized_discrete_are": [],
            "test_are_validate_args": [],
            "TestSolveLyapunov": {
                "test_continuous_squareness_and_shape": [
                    "self"
                ],
                "check_continuous_case": [
                    "self",
                    "a",
                    "q"
                ],
                "check_discrete_case": [
                    "self",
                    "a",
                    "q",
                    "method"
                ],
                "test_cases": [
                    "self"
                ]
            },
            "TestSolveSylvester": {
                "check_case": [
                    "self",
                    "a",
                    "b",
                    "c"
                ],
                "test_cases": [
                    "self"
                ],
                "test_trivial": [
                    "self"
                ]
            }
        },
        "scipy.linalg.tests.test_matfuncs": {
            "_get_al_mohy_higham_2012_experiment_1": [],
            "_help_expm_cond_search": [
                "A",
                "A_norm",
                "X",
                "X_norm",
                "eps",
                "p"
            ],
            "_normalized_like": [
                "A",
                "B"
            ],
            "_relative_error": [
                "f",
                "A",
                "perturbation"
            ],
            "TestSignM": {
                "test_nils": [
                    "self"
                ],
                "test_defective1": [
                    "self"
                ],
                "test_defective2": [
                    "self"
                ],
                "test_defective3": [
                    "self"
                ]
            },
            "TestLogM": {
                "test_nils": [
                    "self"
                ],
                "test_al_mohy_higham_2012_experiment_1_logm": [
                    "self"
                ],
                "test_al_mohy_higham_2012_experiment_1_funm_log": [
                    "self"
                ],
                "test_round_trip_random_float": [
                    "self"
                ],
                "test_round_trip_random_complex": [
                    "self"
                ],
                "test_logm_type_preservation_and_conversion": [
                    "self"
                ],
                "test_complex_spectrum_real_logm": [
                    "self"
                ],
                "test_real_mixed_sign_spectrum": [
                    "self"
                ],
                "test_exactly_singular": [
                    "self"
                ],
                "test_nearly_singular": [
                    "self"
                ],
                "test_opposite_sign_complex_eigenvalues": [
                    "self"
                ]
            },
            "TestSqrtM": {
                "test_round_trip_random_float": [
                    "self"
                ],
                "test_round_trip_random_complex": [
                    "self"
                ],
                "test_bad": [
                    "self"
                ],
                "test_sqrtm_type_preservation_and_conversion": [
                    "self"
                ],
                "test_sqrtm_type_conversion_mixed_sign_or_complex_spectrum": [
                    "self"
                ],
                "test_blocksizes": [
                    "self"
                ],
                "test_al_mohy_higham_2012_experiment_1": [
                    "self"
                ],
                "test_strict_upper_triangular": [
                    "self"
                ],
                "test_weird_matrix": [
                    "self"
                ],
                "test_disp": [
                    "self"
                ],
                "test_opposite_sign_complex_eigenvalues": [
                    "self"
                ],
                "test_gh4866": [
                    "self"
                ],
                "test_gh5336": [
                    "self"
                ],
                "test_gh7839": [
                    "self"
                ]
            },
            "TestFractionalMatrixPower": {
                "test_round_trip_random_complex": [
                    "self"
                ],
                "test_round_trip_random_float": [
                    "self"
                ],
                "test_larger_abs_fractional_matrix_powers": [
                    "self"
                ],
                "test_random_matrices_and_powers": [
                    "self"
                ],
                "test_al_mohy_higham_2012_experiment_1": [
                    "self"
                ],
                "test_briggs_helper_function": [
                    "self"
                ],
                "test_type_preservation_and_conversion": [
                    "self"
                ],
                "test_type_conversion_mixed_sign_or_complex_spectrum": [
                    "self"
                ],
                "test_singular": [
                    "self"
                ],
                "test_opposite_sign_complex_eigenvalues": [
                    "self"
                ]
            },
            "TestExpM": {
                "test_zero": [
                    "self"
                ],
                "test_single_elt": [
                    "self"
                ],
                "test_empty_matrix_input": [
                    "self"
                ]
            },
            "TestExpmFrechet": {
                "test_expm_frechet": [
                    "self"
                ],
                "test_small_norm_expm_frechet": [
                    "self"
                ],
                "test_fuzz": [
                    "self"
                ],
                "test_problematic_matrix": [
                    "self"
                ],
                "test_medium_matrix": [
                    "self"
                ]
            },
            "TestExpmConditionNumber": {
                "test_expm_cond_smoke": [
                    "self"
                ],
                "test_expm_bad_condition_number": [
                    "self"
                ],
                "test_univariate": [
                    "self"
                ],
                "test_expm_cond_fuzz": [
                    "self"
                ]
            },
            "TestKhatriRao": {
                "test_basic": [
                    "self"
                ],
                "test_number_of_columns_equality": [
                    "self"
                ],
                "test_to_assure_2d_array": [
                    "self"
                ],
                "test_equality_of_two_equations": [
                    "self"
                ]
            }
        },
        "scipy.linalg.tests.test_special_matrices": {
            "get_mat": [
                "n"
            ],
            "test_invpascal": [],
            "test_dft": [],
            "test_fiedler": [],
            "test_fiedler_companion": [],
            "TestTri": {
                "test_basic": [
                    "self"
                ],
                "test_diag": [
                    "self"
                ],
                "test_2d": [
                    "self"
                ],
                "test_diag2d": [
                    "self"
                ]
            },
            "TestTril": {
                "test_basic": [
                    "self"
                ],
                "test_diag": [
                    "self"
                ]
            },
            "TestTriu": {
                "test_basic": [
                    "self"
                ],
                "test_diag": [
                    "self"
                ]
            },
            "TestToeplitz": {
                "test_basic": [
                    "self"
                ],
                "test_complex_01": [
                    "self"
                ],
                "test_scalar_00": [
                    "self"
                ],
                "test_scalar_01": [
                    "self"
                ],
                "test_scalar_02": [
                    "self"
                ],
                "test_scalar_03": [
                    "self"
                ],
                "test_scalar_04": [
                    "self"
                ]
            },
            "TestHankel": {
                "test_basic": [
                    "self"
                ]
            },
            "TestCirculant": {
                "test_basic": [
                    "self"
                ]
            },
            "TestHadamard": {
                "test_basic": [
                    "self"
                ]
            },
            "TestLeslie": {
                "test_bad_shapes": [
                    "self"
                ],
                "test_basic": [
                    "self"
                ]
            },
            "TestCompanion": {
                "test_bad_shapes": [
                    "self"
                ],
                "test_basic": [
                    "self"
                ]
            },
            "TestBlockDiag": {
                "test_basic": [
                    "self"
                ],
                "test_dtype": [
                    "self"
                ],
                "test_mixed_dtypes": [
                    "self"
                ],
                "test_scalar_and_1d_args": [
                    "self"
                ],
                "test_bad_arg": [
                    "self"
                ],
                "test_no_args": [
                    "self"
                ],
                "test_empty_matrix_arg": [
                    "self"
                ],
                "test_zerosized_matrix_arg": [
                    "self"
                ]
            },
            "TestKron": {
                "test_basic": [
                    "self"
                ]
            },
            "TestHelmert": {
                "test_orthogonality": [
                    "self"
                ],
                "test_subspace": [
                    "self"
                ]
            },
            "TestHilbert": {
                "test_basic": [
                    "self"
                ]
            },
            "TestInvHilbert": {
                "test_basic": [
                    "self"
                ],
                "test_inverse": [
                    "self"
                ]
            },
            "TestPascal": {
                "check_case": [
                    "self",
                    "n",
                    "sym",
                    "low"
                ],
                "test_cases": [
                    "self"
                ],
                "test_big": [
                    "self"
                ],
                "test_threshold": [
                    "self"
                ]
            },
            "TestConvolutionMatrix": {
                "create_vector": [
                    "self",
                    "n",
                    "cpx"
                ],
                "test_bad_n": [
                    "self"
                ],
                "test_bad_first_arg": [
                    "self"
                ],
                "test_empty_first_arg": [
                    "self"
                ],
                "test_bad_mode": [
                    "self"
                ],
                "test_against_numpy_convolve": [
                    "self",
                    "cpx",
                    "na",
                    "nv",
                    "mode"
                ]
            }
        },
        "scipy.signal.lti_conversion": {
            "tf2ss": [
                "num",
                "den"
            ],
            "_none_to_empty_2d": [
                "arg"
            ],
            "_atleast_2d_or_none": [
                "arg"
            ],
            "_shape_or_none": [
                "M"
            ],
            "_choice_not_none": [],
            "_restore": [
                "M",
                "shape"
            ],
            "abcd_normalize": [
                "A",
                "B",
                "C",
                "D"
            ],
            "ss2tf": [
                "A",
                "B",
                "C",
                "D",
                "input"
            ],
            "zpk2ss": [
                "z",
                "p",
                "k"
            ],
            "ss2zpk": [
                "A",
                "B",
                "C",
                "D",
                "input"
            ],
            "cont2discrete": [
                "system",
                "dt",
                "method",
                "alpha"
            ]
        },
        "scipy.signal.spectral": {
            "lombscargle": [
                "x",
                "y",
                "freqs",
                "precenter",
                "normalize"
            ],
            "periodogram": [
                "x",
                "fs",
                "window",
                "nfft",
                "detrend",
                "return_onesided",
                "scaling",
                "axis"
            ],
            "welch": [
                "x",
                "fs",
                "window",
                "nperseg",
                "noverlap",
                "nfft",
                "detrend",
                "return_onesided",
                "scaling",
                "axis",
                "average"
            ],
            "csd": [
                "x",
                "y",
                "fs",
                "window",
                "nperseg",
                "noverlap",
                "nfft",
                "detrend",
                "return_onesided",
                "scaling",
                "axis",
                "average"
            ],
            "spectrogram": [
                "x",
                "fs",
                "window",
                "nperseg",
                "noverlap",
                "nfft",
                "detrend",
                "return_onesided",
                "scaling",
                "axis",
                "mode"
            ],
            "check_COLA": [
                "window",
                "nperseg",
                "noverlap",
                "tol"
            ],
            "check_NOLA": [
                "window",
                "nperseg",
                "noverlap",
                "tol"
            ],
            "stft": [
                "x",
                "fs",
                "window",
                "nperseg",
                "noverlap",
                "nfft",
                "detrend",
                "return_onesided",
                "boundary",
                "padded",
                "axis"
            ],
            "istft": [
                "Zxx",
                "fs",
                "window",
                "nperseg",
                "noverlap",
                "nfft",
                "input_onesided",
                "boundary",
                "time_axis",
                "freq_axis"
            ],
            "coherence": [
                "x",
                "y",
                "fs",
                "window",
                "nperseg",
                "noverlap",
                "nfft",
                "detrend",
                "axis"
            ],
            "_spectral_helper": [
                "x",
                "y",
                "fs",
                "window",
                "nperseg",
                "noverlap",
                "nfft",
                "detrend",
                "return_onesided",
                "scaling",
                "axis",
                "mode",
                "boundary",
                "padded"
            ],
            "_fft_helper": [
                "x",
                "win",
                "detrend_func",
                "nperseg",
                "noverlap",
                "nfft",
                "sides"
            ],
            "_triage_segments": [
                "window",
                "nperseg",
                "input_length"
            ],
            "_median_bias": [
                "n"
            ]
        },
        "scipy.signal.signaltools": {
            "_valfrommode": [
                "mode"
            ],
            "_bvalfromboundary": [
                "boundary"
            ],
            "_inputs_swap_needed": [
                "mode",
                "shape1",
                "shape2",
                "axes"
            ],
            "correlate": [
                "in1",
                "in2",
                "mode",
                "method"
            ],
            "correlation_lags": [
                "in1_len",
                "in2_len",
                "mode"
            ],
            "_centered": [
                "arr",
                "newshape"
            ],
            "_init_freq_conv_axes": [
                "in1",
                "in2",
                "mode",
                "axes",
                "sorted_axes"
            ],
            "_freq_domain_conv": [
                "in1",
                "in2",
                "axes",
                "shape",
                "calc_fast_len"
            ],
            "_apply_conv_mode": [
                "ret",
                "s1",
                "s2",
                "mode",
                "axes"
            ],
            "fftconvolve": [
                "in1",
                "in2",
                "mode",
                "axes"
            ],
            "_calc_oa_lens": [
                "s1",
                "s2"
            ],
            "oaconvolve": [
                "in1",
                "in2",
                "mode",
                "axes"
            ],
            "_numeric_arrays": [
                "arrays",
                "kinds"
            ],
            "_conv_ops": [
                "x_shape",
                "h_shape",
                "mode"
            ],
            "_fftconv_faster": [
                "x",
                "h",
                "mode"
            ],
            "_reverse_and_conj": [
                "x"
            ],
            "_np_conv_ok": [
                "volume",
                "kernel",
                "mode"
            ],
            "_timeit_fast": [
                "stmt",
                "setup",
                "repeat"
            ],
            "choose_conv_method": [
                "in1",
                "in2",
                "mode",
                "measure"
            ],
            "convolve": [
                "in1",
                "in2",
                "mode",
                "method"
            ],
            "order_filter": [
                "a",
                "domain",
                "rank"
            ],
            "medfilt": [
                "volume",
                "kernel_size"
            ],
            "wiener": [
                "im",
                "mysize",
                "noise"
            ],
            "convolve2d": [
                "in1",
                "in2",
                "mode",
                "boundary",
                "fillvalue"
            ],
            "correlate2d": [
                "in1",
                "in2",
                "mode",
                "boundary",
                "fillvalue"
            ],
            "medfilt2d": [
                "input",
                "kernel_size"
            ],
            "lfilter": [
                "b",
                "a",
                "x",
                "axis",
                "zi"
            ],
            "lfiltic": [
                "b",
                "a",
                "y",
                "x"
            ],
            "deconvolve": [
                "signal",
                "divisor"
            ],
            "hilbert": [
                "x",
                "N",
                "axis"
            ],
            "hilbert2": [
                "x",
                "N"
            ],
            "cmplx_sort": [
                "p"
            ],
            "unique_roots": [
                "p",
                "tol",
                "rtype"
            ],
            "invres": [
                "r",
                "p",
                "k",
                "tol",
                "rtype"
            ],
            "_compute_factors": [
                "roots",
                "multiplicity",
                "include_powers"
            ],
            "_compute_residues": [
                "poles",
                "multiplicity",
                "numerator"
            ],
            "residue": [
                "b",
                "a",
                "tol",
                "rtype"
            ],
            "residuez": [
                "b",
                "a",
                "tol",
                "rtype"
            ],
            "_group_poles": [
                "poles",
                "tol",
                "rtype"
            ],
            "invresz": [
                "r",
                "p",
                "k",
                "tol",
                "rtype"
            ],
            "resample": [
                "x",
                "num",
                "t",
                "axis",
                "window",
                "domain"
            ],
            "resample_poly": [
                "x",
                "up",
                "down",
                "axis",
                "window",
                "padtype",
                "cval"
            ],
            "vectorstrength": [
                "events",
                "period"
            ],
            "detrend": [
                "data",
                "axis",
                "type",
                "bp",
                "overwrite_data"
            ],
            "lfilter_zi": [
                "b",
                "a"
            ],
            "sosfilt_zi": [
                "sos"
            ],
            "_filtfilt_gust": [
                "b",
                "a",
                "x",
                "axis",
                "irlen"
            ],
            "filtfilt": [
                "b",
                "a",
                "x",
                "axis",
                "padtype",
                "padlen",
                "method",
                "irlen"
            ],
            "_validate_pad": [
                "padtype",
                "padlen",
                "x",
                "axis",
                "ntaps"
            ],
            "_validate_x": [
                "x"
            ],
            "sosfilt": [
                "sos",
                "x",
                "axis",
                "zi"
            ],
            "sosfiltfilt": [
                "sos",
                "x",
                "axis",
                "padtype",
                "padlen"
            ],
            "decimate": [
                "x",
                "q",
                "n",
                "ftype",
                "axis",
                "zero_phase"
            ]
        },
        "scipy.signal._upfirdn": {
            "_pad_h": [
                "h",
                "up"
            ],
            "_check_mode": [
                "mode"
            ],
            "upfirdn": [
                "h",
                "x",
                "up",
                "down",
                "axis",
                "mode",
                "cval"
            ],
            "_UpFIRDn": {
                "__init__": [
                    "self",
                    "h",
                    "x_dtype",
                    "up",
                    "down"
                ],
                "apply_filter": [
                    "self",
                    "x",
                    "axis",
                    "mode",
                    "cval"
                ]
            }
        },
        "scipy.signal.fir_filter_design": {
            "_get_fs": [
                "fs",
                "nyq"
            ],
            "kaiser_beta": [
                "a"
            ],
            "kaiser_atten": [
                "numtaps",
                "width"
            ],
            "kaiserord": [
                "ripple",
                "width"
            ],
            "firwin": [
                "numtaps",
                "cutoff",
                "width",
                "window",
                "pass_zero",
                "scale",
                "nyq",
                "fs"
            ],
            "firwin2": [
                "numtaps",
                "freq",
                "gain",
                "nfreqs",
                "window",
                "nyq",
                "antisymmetric",
                "fs"
            ],
            "remez": [
                "numtaps",
                "bands",
                "desired",
                "weight",
                "Hz",
                "type",
                "maxiter",
                "grid_density",
                "fs"
            ],
            "firls": [
                "numtaps",
                "bands",
                "desired",
                "weight",
                "nyq",
                "fs"
            ],
            "_dhtm": [
                "mag"
            ],
            "minimum_phase": [
                "h",
                "method",
                "n_fft"
            ]
        },
        "scipy.signal.setup": {
            "configuration": [
                "parent_package",
                "top_path"
            ]
        },
        "scipy.signal._max_len_seq": {
            "max_len_seq": [
                "nbits",
                "state",
                "length",
                "taps"
            ]
        },
        "scipy.signal.waveforms": {
            "sawtooth": [
                "t",
                "width"
            ],
            "square": [
                "t",
                "duty"
            ],
            "gausspulse": [
                "t",
                "fc",
                "bw",
                "bwr",
                "tpr",
                "retquad",
                "retenv"
            ],
            "chirp": [
                "t",
                "f0",
                "t1",
                "f1",
                "method",
                "phi",
                "vertex_zero"
            ],
            "_chirp_phase": [
                "t",
                "f0",
                "t1",
                "f1",
                "method",
                "vertex_zero"
            ],
            "sweep_poly": [
                "t",
                "poly",
                "phi"
            ],
            "_sweep_poly_phase": [
                "t",
                "poly"
            ],
            "unit_impulse": [
                "shape",
                "idx",
                "dtype"
            ]
        },
        "scipy.signal.ltisys": {
            "_atleast_2d_or_none": [
                "arg"
            ],
            "lsim2": [
                "system",
                "U",
                "T",
                "X0"
            ],
            "_cast_to_array_dtype": [
                "in1",
                "in2"
            ],
            "lsim": [
                "system",
                "U",
                "T",
                "X0",
                "interp"
            ],
            "_default_response_times": [
                "A",
                "n"
            ],
            "impulse": [
                "system",
                "X0",
                "T",
                "N"
            ],
            "impulse2": [
                "system",
                "X0",
                "T",
                "N"
            ],
            "step": [
                "system",
                "X0",
                "T",
                "N"
            ],
            "step2": [
                "system",
                "X0",
                "T",
                "N"
            ],
            "bode": [
                "system",
                "w",
                "n"
            ],
            "freqresp": [
                "system",
                "w",
                "n"
            ],
            "_valid_inputs": [
                "A",
                "B",
                "poles",
                "method",
                "rtol",
                "maxiter"
            ],
            "_order_complex_poles": [
                "poles"
            ],
            "_KNV0": [
                "B",
                "ker_pole",
                "transfer_matrix",
                "j",
                "poles"
            ],
            "_YT_real": [
                "ker_pole",
                "Q",
                "transfer_matrix",
                "i",
                "j"
            ],
            "_YT_complex": [
                "ker_pole",
                "Q",
                "transfer_matrix",
                "i",
                "j"
            ],
            "_YT_loop": [
                "ker_pole",
                "transfer_matrix",
                "poles",
                "B",
                "maxiter",
                "rtol"
            ],
            "_KNV0_loop": [
                "ker_pole",
                "transfer_matrix",
                "poles",
                "B",
                "maxiter",
                "rtol"
            ],
            "place_poles": [
                "A",
                "B",
                "poles",
                "method",
                "rtol",
                "maxiter"
            ],
            "dlsim": [
                "system",
                "u",
                "t",
                "x0"
            ],
            "dimpulse": [
                "system",
                "x0",
                "t",
                "n"
            ],
            "dstep": [
                "system",
                "x0",
                "t",
                "n"
            ],
            "dfreqresp": [
                "system",
                "w",
                "n",
                "whole"
            ],
            "dbode": [
                "system",
                "w",
                "n"
            ],
            "LinearTimeInvariant": {
                "__new__": [
                    "cls"
                ],
                "__init__": [
                    "self"
                ],
                "dt": [
                    "self"
                ],
                "_dt_dict": [
                    "self"
                ],
                "zeros": [
                    "self"
                ],
                "poles": [
                    "self"
                ],
                "_as_ss": [
                    "self"
                ],
                "_as_zpk": [
                    "self"
                ],
                "_as_tf": [
                    "self"
                ]
            },
            "lti": {
                "__new__": [
                    "cls"
                ],
                "__init__": [
                    "self"
                ],
                "impulse": [
                    "self",
                    "X0",
                    "T",
                    "N"
                ],
                "step": [
                    "self",
                    "X0",
                    "T",
                    "N"
                ],
                "output": [
                    "self",
                    "U",
                    "T",
                    "X0"
                ],
                "bode": [
                    "self",
                    "w",
                    "n"
                ],
                "freqresp": [
                    "self",
                    "w",
                    "n"
                ],
                "to_discrete": [
                    "self",
                    "dt",
                    "method",
                    "alpha"
                ]
            },
            "dlti": {
                "__new__": [
                    "cls"
                ],
                "__init__": [
                    "self"
                ],
                "dt": [
                    "self",
                    "dt"
                ],
                "impulse": [
                    "self",
                    "x0",
                    "t",
                    "n"
                ],
                "step": [
                    "self",
                    "x0",
                    "t",
                    "n"
                ],
                "output": [
                    "self",
                    "u",
                    "t",
                    "x0"
                ],
                "bode": [
                    "self",
                    "w",
                    "n"
                ],
                "freqresp": [
                    "self",
                    "w",
                    "n",
                    "whole"
                ]
            },
            "TransferFunction": {
                "__new__": [
                    "cls"
                ],
                "__init__": [
                    "self"
                ],
                "__repr__": [
                    "self"
                ],
                "num": [
                    "self",
                    "num"
                ],
                "den": [
                    "self",
                    "den"
                ],
                "_copy": [
                    "self",
                    "system"
                ],
                "to_tf": [
                    "self"
                ],
                "to_zpk": [
                    "self"
                ],
                "to_ss": [
                    "self"
                ],
                "_z_to_zinv": [
                    "num",
                    "den"
                ],
                "_zinv_to_z": [
                    "num",
                    "den"
                ]
            },
            "TransferFunctionContinuous": {
                "to_discrete": [
                    "self",
                    "dt",
                    "method",
                    "alpha"
                ]
            },
            "TransferFunctionDiscrete": {},
            "ZerosPolesGain": {
                "__new__": [
                    "cls"
                ],
                "__init__": [
                    "self"
                ],
                "__repr__": [
                    "self"
                ],
                "zeros": [
                    "self",
                    "zeros"
                ],
                "poles": [
                    "self",
                    "poles"
                ],
                "gain": [
                    "self",
                    "gain"
                ],
                "_copy": [
                    "self",
                    "system"
                ],
                "to_tf": [
                    "self"
                ],
                "to_zpk": [
                    "self"
                ],
                "to_ss": [
                    "self"
                ]
            },
            "ZerosPolesGainContinuous": {
                "to_discrete": [
                    "self",
                    "dt",
                    "method",
                    "alpha"
                ]
            },
            "ZerosPolesGainDiscrete": {},
            "StateSpace": {
                "__new__": [
                    "cls"
                ],
                "__init__": [
                    "self"
                ],
                "__repr__": [
                    "self"
                ],
                "_check_binop_other": [
                    "self",
                    "other"
                ],
                "__mul__": [
                    "self",
                    "other"
                ],
                "__rmul__": [
                    "self",
                    "other"
                ],
                "__neg__": [
                    "self"
                ],
                "__add__": [
                    "self",
                    "other"
                ],
                "__sub__": [
                    "self",
                    "other"
                ],
                "__radd__": [
                    "self",
                    "other"
                ],
                "__rsub__": [
                    "self",
                    "other"
                ],
                "__truediv__": [
                    "self",
                    "other"
                ],
                "A": [
                    "self",
                    "A"
                ],
                "B": [
                    "self",
                    "B"
                ],
                "C": [
                    "self",
                    "C"
                ],
                "D": [
                    "self",
                    "D"
                ],
                "_copy": [
                    "self",
                    "system"
                ],
                "to_tf": [
                    "self"
                ],
                "to_zpk": [
                    "self"
                ],
                "to_ss": [
                    "self"
                ]
            },
            "StateSpaceContinuous": {
                "to_discrete": [
                    "self",
                    "dt",
                    "method",
                    "alpha"
                ]
            },
            "StateSpaceDiscrete": {},
            "Bunch": {
                "__init__": [
                    "self"
                ]
            }
        },
        "scipy.signal": {
            "deco": [
                "name"
            ]
        },
        "scipy.signal._arraytools": {
            "axis_slice": [
                "a",
                "start",
                "stop",
                "step",
                "axis"
            ],
            "axis_reverse": [
                "a",
                "axis"
            ],
            "odd_ext": [
                "x",
                "n",
                "axis"
            ],
            "even_ext": [
                "x",
                "n",
                "axis"
            ],
            "const_ext": [
                "x",
                "n",
                "axis"
            ],
            "zero_ext": [
                "x",
                "n",
                "axis"
            ]
        },
        "scipy.signal._peak_finding": {
            "_boolrelextrema": [
                "data",
                "comparator",
                "axis",
                "order",
                "mode"
            ],
            "argrelmin": [
                "data",
                "axis",
                "order",
                "mode"
            ],
            "argrelmax": [
                "data",
                "axis",
                "order",
                "mode"
            ],
            "argrelextrema": [
                "data",
                "comparator",
                "axis",
                "order",
                "mode"
            ],
            "_arg_x_as_expected": [
                "value"
            ],
            "_arg_peaks_as_expected": [
                "value"
            ],
            "_arg_wlen_as_expected": [
                "value"
            ],
            "peak_prominences": [
                "x",
                "peaks",
                "wlen"
            ],
            "peak_widths": [
                "x",
                "peaks",
                "rel_height",
                "prominence_data",
                "wlen"
            ],
            "_unpack_condition_args": [
                "interval",
                "x",
                "peaks"
            ],
            "_select_by_property": [
                "peak_properties",
                "pmin",
                "pmax"
            ],
            "_select_by_peak_threshold": [
                "x",
                "peaks",
                "tmin",
                "tmax"
            ],
            "find_peaks": [
                "x",
                "height",
                "threshold",
                "distance",
                "prominence",
                "width",
                "wlen",
                "rel_height",
                "plateau_size"
            ],
            "_identify_ridge_lines": [
                "matr",
                "max_distances",
                "gap_thresh"
            ],
            "_filter_ridge_lines": [
                "cwt",
                "ridge_lines",
                "window_size",
                "min_length",
                "min_snr",
                "noise_perc"
            ],
            "find_peaks_cwt": [
                "vector",
                "widths",
                "wavelet",
                "max_distances",
                "gap_thresh",
                "min_length",
                "min_snr",
                "noise_perc",
                "window_size"
            ]
        },
        "scipy.signal._savitzky_golay": {
            "savgol_coeffs": [
                "window_length",
                "polyorder",
                "deriv",
                "delta",
                "pos",
                "use"
            ],
            "_polyder": [
                "p",
                "m"
            ],
            "_fit_edge": [
                "x",
                "window_start",
                "window_stop",
                "interp_start",
                "interp_stop",
                "axis",
                "polyorder",
                "deriv",
                "delta",
                "y"
            ],
            "_fit_edges_polyfit": [
                "x",
                "window_length",
                "polyorder",
                "deriv",
                "delta",
                "axis",
                "y"
            ],
            "savgol_filter": [
                "x",
                "window_length",
                "polyorder",
                "deriv",
                "delta",
                "axis",
                "mode",
                "cval"
            ]
        },
        "scipy.signal.bsplines": {
            "spline_filter": [
                "Iin",
                "lmbda"
            ],
            "_bspline_piecefunctions": [
                "order"
            ],
            "bspline": [
                "x",
                "n"
            ],
            "gauss_spline": [
                "x",
                "n"
            ],
            "cubic": [
                "x"
            ],
            "quadratic": [
                "x"
            ],
            "_coeff_smooth": [
                "lam"
            ],
            "_hc": [
                "k",
                "cs",
                "rho",
                "omega"
            ],
            "_hs": [
                "k",
                "cs",
                "rho",
                "omega"
            ],
            "_cubic_smooth_coeff": [
                "signal",
                "lamb"
            ],
            "_cubic_coeff": [
                "signal"
            ],
            "_quadratic_coeff": [
                "signal"
            ],
            "cspline1d": [
                "signal",
                "lamb"
            ],
            "qspline1d": [
                "signal",
                "lamb"
            ],
            "cspline1d_eval": [
                "cj",
                "newx",
                "dx",
                "x0"
            ],
            "qspline1d_eval": [
                "cj",
                "newx",
                "dx",
                "x0"
            ]
        },
        "scipy.signal.filter_design": {
            "_is_int_type": [
                "x"
            ],
            "findfreqs": [
                "num",
                "den",
                "N",
                "kind"
            ],
            "freqs": [
                "b",
                "a",
                "worN",
                "plot"
            ],
            "freqs_zpk": [
                "z",
                "p",
                "k",
                "worN"
            ],
            "freqz": [
                "b",
                "a",
                "worN",
                "whole",
                "plot",
                "fs",
                "include_nyquist"
            ],
            "freqz_zpk": [
                "z",
                "p",
                "k",
                "worN",
                "whole",
                "fs"
            ],
            "group_delay": [
                "system",
                "w",
                "whole",
                "fs"
            ],
            "_validate_sos": [
                "sos"
            ],
            "sosfreqz": [
                "sos",
                "worN",
                "whole",
                "fs"
            ],
            "_cplxreal": [
                "z",
                "tol"
            ],
            "_cplxpair": [
                "z",
                "tol"
            ],
            "tf2zpk": [
                "b",
                "a"
            ],
            "zpk2tf": [
                "z",
                "p",
                "k"
            ],
            "tf2sos": [
                "b",
                "a",
                "pairing"
            ],
            "sos2tf": [
                "sos"
            ],
            "sos2zpk": [
                "sos"
            ],
            "_nearest_real_complex_idx": [
                "fro",
                "to",
                "which"
            ],
            "zpk2sos": [
                "z",
                "p",
                "k",
                "pairing"
            ],
            "_align_nums": [
                "nums"
            ],
            "normalize": [
                "b",
                "a"
            ],
            "lp2lp": [
                "b",
                "a",
                "wo"
            ],
            "lp2hp": [
                "b",
                "a",
                "wo"
            ],
            "lp2bp": [
                "b",
                "a",
                "wo",
                "bw"
            ],
            "lp2bs": [
                "b",
                "a",
                "wo",
                "bw"
            ],
            "bilinear": [
                "b",
                "a",
                "fs"
            ],
            "_validate_gpass_gstop": [
                "gpass",
                "gstop"
            ],
            "iirdesign": [
                "wp",
                "ws",
                "gpass",
                "gstop",
                "analog",
                "ftype",
                "output",
                "fs"
            ],
            "iirfilter": [
                "N",
                "Wn",
                "rp",
                "rs",
                "btype",
                "analog",
                "ftype",
                "output",
                "fs"
            ],
            "_relative_degree": [
                "z",
                "p"
            ],
            "bilinear_zpk": [
                "z",
                "p",
                "k",
                "fs"
            ],
            "lp2lp_zpk": [
                "z",
                "p",
                "k",
                "wo"
            ],
            "lp2hp_zpk": [
                "z",
                "p",
                "k",
                "wo"
            ],
            "lp2bp_zpk": [
                "z",
                "p",
                "k",
                "wo",
                "bw"
            ],
            "lp2bs_zpk": [
                "z",
                "p",
                "k",
                "wo",
                "bw"
            ],
            "butter": [
                "N",
                "Wn",
                "btype",
                "analog",
                "output",
                "fs"
            ],
            "cheby1": [
                "N",
                "rp",
                "Wn",
                "btype",
                "analog",
                "output",
                "fs"
            ],
            "cheby2": [
                "N",
                "rs",
                "Wn",
                "btype",
                "analog",
                "output",
                "fs"
            ],
            "ellip": [
                "N",
                "rp",
                "rs",
                "Wn",
                "btype",
                "analog",
                "output",
                "fs"
            ],
            "bessel": [
                "N",
                "Wn",
                "btype",
                "analog",
                "output",
                "norm",
                "fs"
            ],
            "maxflat": [],
            "yulewalk": [],
            "band_stop_obj": [
                "wp",
                "ind",
                "passb",
                "stopb",
                "gpass",
                "gstop",
                "type"
            ],
            "buttord": [
                "wp",
                "ws",
                "gpass",
                "gstop",
                "analog",
                "fs"
            ],
            "cheb1ord": [
                "wp",
                "ws",
                "gpass",
                "gstop",
                "analog",
                "fs"
            ],
            "cheb2ord": [
                "wp",
                "ws",
                "gpass",
                "gstop",
                "analog",
                "fs"
            ],
            "ellipord": [
                "wp",
                "ws",
                "gpass",
                "gstop",
                "analog",
                "fs"
            ],
            "buttap": [
                "N"
            ],
            "cheb1ap": [
                "N",
                "rp"
            ],
            "cheb2ap": [
                "N",
                "rs"
            ],
            "_vratio": [
                "u",
                "ineps",
                "mp"
            ],
            "_kratio": [
                "m",
                "k_ratio"
            ],
            "ellipap": [
                "N",
                "rp",
                "rs"
            ],
            "_falling_factorial": [
                "x",
                "n"
            ],
            "_bessel_poly": [
                "n",
                "reverse"
            ],
            "_campos_zeros": [
                "n"
            ],
            "_aberth": [
                "f",
                "fp",
                "x0",
                "tol",
                "maxiter"
            ],
            "_bessel_zeros": [
                "N"
            ],
            "_norm_factor": [
                "p",
                "k"
            ],
            "besselap": [
                "N",
                "norm"
            ],
            "iirnotch": [
                "w0",
                "Q",
                "fs"
            ],
            "iirpeak": [
                "w0",
                "Q",
                "fs"
            ],
            "_design_notch_peak_filter": [
                "w0",
                "Q",
                "ftype",
                "fs"
            ],
            "iircomb": [
                "w0",
                "Q",
                "ftype",
                "fs"
            ],
            "_hz_to_erb": [
                "hz"
            ],
            "gammatone": [
                "freq",
                "ftype",
                "order",
                "numtaps",
                "fs"
            ],
            "BadCoefficients": {}
        },
        "scipy.signal.wavelets": {
            "daub": [
                "p"
            ],
            "qmf": [
                "hk"
            ],
            "cascade": [
                "hk",
                "J"
            ],
            "morlet": [
                "M",
                "w",
                "s",
                "complete"
            ],
            "ricker": [
                "points",
                "a"
            ],
            "morlet2": [
                "M",
                "s",
                "w"
            ],
            "cwt": [
                "data",
                "wavelet",
                "widths",
                "dtype"
            ]
        },
        "scipy.signal.tests.test_cont2discrete": {
            "TestC2D": {
                "test_zoh": [
                    "self"
                ],
                "test_foh": [
                    "self"
                ],
                "test_impulse": [
                    "self"
                ],
                "test_gbt": [
                    "self"
                ],
                "test_euler": [
                    "self"
                ],
                "test_backward_diff": [
                    "self"
                ],
                "test_bilinear": [
                    "self"
                ],
                "test_transferfunction": [
                    "self"
                ],
                "test_zerospolesgain": [
                    "self"
                ],
                "test_gbt_with_sio_tf_and_zpk": [
                    "self"
                ],
                "test_discrete_approx": [
                    "self"
                ],
                "test_simo_tf": [
                    "self"
                ],
                "test_multioutput": [
                    "self"
                ]
            },
            "TestC2dLti": {
                "test_c2d_ss": [
                    "self"
                ],
                "test_c2d_tf": [
                    "self"
                ]
            },
            "TestC2dInvariants": {
                "test_impulse_invariant": [
                    "self",
                    "sys",
                    "sample_time",
                    "samples_number"
                ],
                "test_step_invariant": [
                    "self",
                    "sys",
                    "sample_time",
                    "samples_number"
                ],
                "test_linear_invariant": [
                    "self",
                    "sys",
                    "sample_time",
                    "samples_number"
                ]
            }
        },
        "scipy.signal.tests.test_array_tools": {
            "TestArrayTools": {
                "test_axis_slice": [
                    "self"
                ],
                "test_axis_reverse": [
                    "self"
                ],
                "test_odd_ext": [
                    "self"
                ],
                "test_even_ext": [
                    "self"
                ],
                "test_const_ext": [
                    "self"
                ],
                "test_zero_ext": [
                    "self"
                ]
            }
        },
        "scipy.signal.tests.test_upfirdn": {
            "upfirdn_naive": [
                "x",
                "h",
                "up",
                "down"
            ],
            "UpFIRDnCase": {
                "__init__": [
                    "self",
                    "up",
                    "down",
                    "h",
                    "x_dtype"
                ],
                "__call__": [
                    "self"
                ],
                "scrub": [
                    "self",
                    "x",
                    "axis"
                ]
            },
            "TestUpfirdn": {
                "test_valid_input": [
                    "self"
                ],
                "test_singleton": [
                    "self",
                    "len_h",
                    "len_x"
                ],
                "test_shift_x": [
                    "self"
                ],
                "test_length_factors": [
                    "self",
                    "len_h",
                    "len_x",
                    "up",
                    "down",
                    "expected"
                ],
                "test_vs_convolve": [
                    "self",
                    "down",
                    "want_len"
                ],
                "test_vs_naive_delta": [
                    "self",
                    "x_dtype",
                    "h",
                    "up",
                    "down"
                ],
                "test_vs_naive": [
                    "self",
                    "x_dtype",
                    "h_dtype",
                    "p_max",
                    "q_max"
                ],
                "_random_factors": [
                    "self",
                    "p_max",
                    "q_max",
                    "h_dtype",
                    "x_dtype"
                ],
                "test_extensions": [
                    "self",
                    "mode"
                ],
                "test_modes": [
                    "self",
                    "size",
                    "h_len",
                    "mode",
                    "dtype"
                ]
            }
        },
        "scipy.signal.tests.test_signaltools": {
            "fftconvolve_err": [],
            "gen_oa_shapes": [
                "sizes"
            ],
            "gen_oa_shapes_2d": [
                "sizes"
            ],
            "gen_oa_shapes_eq": [
                "sizes"
            ],
            "test_lfilter_bad_object": [],
            "test_lfilter_notimplemented_input": [],
            "test_correlation_lags": [
                "mode",
                "behind",
                "input_size"
            ],
            "filtfilt_gust_opt": [
                "b",
                "a",
                "x"
            ],
            "check_filtfilt_gust": [
                "b",
                "a",
                "shape",
                "axis",
                "irlen"
            ],
            "test_choose_conv_method": [],
            "test_filtfilt_gust": [],
            "cast_tf2sos": [
                "b",
                "a"
            ],
            "assert_allclose_cast": [
                "actual",
                "desired",
                "rtol",
                "atol"
            ],
            "test_nonnumeric_dtypes": [
                "func"
            ],
            "_TestConvolve": {
                "test_basic": [
                    "self"
                ],
                "test_same": [
                    "self"
                ],
                "test_same_eq": [
                    "self"
                ],
                "test_complex": [
                    "self"
                ],
                "test_zero_rank": [
                    "self"
                ],
                "test_broadcastable": [
                    "self"
                ],
                "test_single_element": [
                    "self"
                ],
                "test_2d_arrays": [
                    "self"
                ],
                "test_input_swapping": [
                    "self"
                ],
                "test_invalid_params": [
                    "self"
                ]
            },
            "TestConvolve": {
                "test_valid_mode2": [
                    "self"
                ],
                "test_same_mode": [
                    "self"
                ],
                "test_invalid_shapes": [
                    "self"
                ],
                "test_convolve_method": [
                    "self",
                    "n"
                ],
                "test_convolve_method_large_input": [
                    "self"
                ],
                "test_mismatched_dims": [
                    "self"
                ]
            },
            "_TestConvolve2d": {
                "test_2d_arrays": [
                    "self"
                ],
                "test_valid_mode": [
                    "self"
                ],
                "test_valid_mode_complx": [
                    "self"
                ],
                "test_fillvalue": [
                    "self"
                ],
                "test_fillvalue_deprecations": [
                    "self"
                ],
                "test_fillvalue_empty": [
                    "self"
                ],
                "test_wrap_boundary": [
                    "self"
                ],
                "test_sym_boundary": [
                    "self"
                ],
                "test_invalid_shapes": [
                    "self"
                ]
            },
            "TestConvolve2d": {
                "test_same_mode": [
                    "self"
                ],
                "test_valid_mode2": [
                    "self"
                ],
                "test_consistency_convolve_funcs": [
                    "self"
                ],
                "test_invalid_dims": [
                    "self"
                ],
                "test_large_array": [
                    "self"
                ]
            },
            "TestFFTConvolve": {
                "test_real": [
                    "self",
                    "axes"
                ],
                "test_real_axes": [
                    "self",
                    "axes"
                ],
                "test_complex": [
                    "self",
                    "axes"
                ],
                "test_complex_axes": [
                    "self",
                    "axes"
                ],
                "test_2d_real_same": [
                    "self",
                    "axes"
                ],
                "test_2d_real_same_axes": [
                    "self",
                    "axes"
                ],
                "test_2d_complex_same": [
                    "self",
                    "axes"
                ],
                "test_2d_complex_same_axes": [
                    "self",
                    "axes"
                ],
                "test_real_same_mode": [
                    "self",
                    "axes"
                ],
                "test_real_same_mode_axes": [
                    "self",
                    "axes"
                ],
                "test_valid_mode_real": [
                    "self",
                    "axes"
                ],
                "test_valid_mode_real_axes": [
                    "self",
                    "axes"
                ],
                "test_valid_mode_complex": [
                    "self",
                    "axes"
                ],
                "test_valid_mode_complex_axes": [
                    "self",
                    "axes"
                ],
                "test_valid_mode_ignore_nonaxes": [
                    "self"
                ],
                "test_empty": [
                    "self"
                ],
                "test_zero_rank": [
                    "self"
                ],
                "test_single_element": [
                    "self"
                ],
                "test_random_data": [
                    "self",
                    "axes"
                ],
                "test_random_data_axes": [
                    "self",
                    "axes"
                ],
                "test_random_data_multidim_axes": [
                    "self",
                    "axes"
                ],
                "test_many_sizes": [
                    "self",
                    "n"
                ]
            },
            "TestOAConvolve": {
                "test_real_manylens": [
                    "self",
                    "shape_a_0",
                    "shape_b_0"
                ],
                "test_1d_noaxes": [
                    "self",
                    "shape_a_0",
                    "shape_b_0",
                    "is_complex",
                    "mode",
                    "monkeypatch"
                ],
                "test_1d_axes": [
                    "self",
                    "axes",
                    "shape_a_0",
                    "shape_b_0",
                    "shape_a_extra",
                    "shape_b_extra",
                    "is_complex",
                    "mode",
                    "monkeypatch"
                ],
                "test_2d_noaxes": [
                    "self",
                    "shape_a_0",
                    "shape_b_0",
                    "shape_a_1",
                    "shape_b_1",
                    "mode",
                    "is_complex",
                    "monkeypatch"
                ],
                "test_2d_axes": [
                    "self",
                    "axes",
                    "shape_a_0",
                    "shape_b_0",
                    "shape_a_1",
                    "shape_b_1",
                    "mode",
                    "shape_a_extra",
                    "shape_b_extra",
                    "is_complex",
                    "monkeypatch"
                ],
                "test_empty": [
                    "self"
                ],
                "test_zero_rank": [
                    "self"
                ],
                "test_single_element": [
                    "self"
                ]
            },
            "TestAllFreqConvolves": {
                "test_invalid_shapes": [
                    "self",
                    "convapproach"
                ],
                "test_invalid_shapes_axes": [
                    "self",
                    "convapproach"
                ],
                "test_mismatched_dims": [
                    "self",
                    "a",
                    "b",
                    "convapproach"
                ],
                "test_invalid_flags": [
                    "self",
                    "convapproach"
                ],
                "test_longdtype_input": [
                    "self",
                    "dtype"
                ]
            },
            "TestMedFilt": {
                "test_basic": [
                    "self"
                ],
                "test_none": [
                    "self"
                ],
                "test_refcounting": [
                    "self"
                ]
            },
            "TestWiener": {
                "test_basic": [
                    "self"
                ]
            },
            "TestResample": {
                "test_basic": [
                    "self"
                ],
                "test_rfft": [
                    "self",
                    "N",
                    "num",
                    "window"
                ],
                "test_input_domain": [
                    "self"
                ],
                "test_dc": [
                    "self",
                    "nx",
                    "ny",
                    "dtype"
                ],
                "test_mutable_window": [
                    "self",
                    "padtype"
                ],
                "test_output_float32": [
                    "self",
                    "padtype"
                ],
                "test_resample_methods": [
                    "self",
                    "method",
                    "ext",
                    "padtype"
                ],
                "test_poly_vs_filtfilt": [
                    "self"
                ],
                "test_correlate1d": [
                    "self"
                ]
            },
            "TestCSpline1DEval": {
                "test_basic": [
                    "self"
                ],
                "test_complex": [
                    "self"
                ]
            },
            "TestOrderFilt": {
                "test_basic": [
                    "self"
                ]
            },
            "_TestLinearFilter": {
                "generate": [
                    "self",
                    "shape"
                ],
                "convert_dtype": [
                    "self",
                    "arr"
                ],
                "test_rank_1_IIR": [
                    "self"
                ],
                "test_rank_1_FIR": [
                    "self"
                ],
                "test_rank_1_IIR_init_cond": [
                    "self"
                ],
                "test_rank_1_FIR_init_cond": [
                    "self"
                ],
                "test_rank_2_IIR_axis_0": [
                    "self"
                ],
                "test_rank_2_IIR_axis_1": [
                    "self"
                ],
                "test_rank_2_IIR_axis_0_init_cond": [
                    "self"
                ],
                "test_rank_2_IIR_axis_1_init_cond": [
                    "self"
                ],
                "test_rank_3_IIR": [
                    "self"
                ],
                "test_rank_3_IIR_init_cond": [
                    "self"
                ],
                "test_rank_3_FIR": [
                    "self"
                ],
                "test_rank_3_FIR_init_cond": [
                    "self"
                ],
                "test_zi_pseudobroadcast": [
                    "self"
                ],
                "test_scalar_a": [
                    "self"
                ],
                "test_zi_some_singleton_dims": [
                    "self"
                ],
                "base_bad_size_zi": [
                    "self",
                    "b",
                    "a",
                    "x",
                    "axis",
                    "zi"
                ],
                "test_bad_size_zi": [
                    "self"
                ],
                "test_empty_zi": [
                    "self"
                ],
                "test_lfiltic_bad_zi": [
                    "self"
                ],
                "test_short_x_FIR": [
                    "self"
                ],
                "test_short_x_IIR": [
                    "self"
                ],
                "test_do_not_modify_a_b_IIR": [
                    "self"
                ],
                "test_do_not_modify_a_b_FIR": [
                    "self"
                ]
            },
            "TestLinearFilterFloat32": {},
            "TestLinearFilterFloat64": {},
            "TestLinearFilterFloatExtended": {},
            "TestLinearFilterComplex64": {},
            "TestLinearFilterComplex128": {},
            "TestLinearFilterComplexExtended": {},
            "TestLinearFilterDecimal": {
                "type": [
                    "self",
                    "x"
                ]
            },
            "TestLinearFilterObject": {},
            "TestCorrelateReal": {
                "_setup_rank1": [
                    "self",
                    "dt"
                ],
                "equal_tolerance": [
                    "self",
                    "res_dt"
                ],
                "equal_tolerance_fft": [
                    "self",
                    "res_dt"
                ],
                "test_method": [
                    "self",
                    "dt"
                ],
                "test_rank1_valid": [
                    "self",
                    "dt"
                ],
                "test_rank1_same": [
                    "self",
                    "dt"
                ],
                "test_rank1_full": [
                    "self",
                    "dt"
                ],
                "_setup_rank3": [
                    "self",
                    "dt"
                ],
                "test_rank3_valid": [
                    "self",
                    "dt"
                ],
                "test_rank3_same": [
                    "self",
                    "dt"
                ],
                "test_rank3_all": [
                    "self",
                    "dt"
                ]
            },
            "TestCorrelate": {
                "test_invalid_shapes": [
                    "self"
                ],
                "test_invalid_params": [
                    "self"
                ],
                "test_mismatched_dims": [
                    "self"
                ],
                "test_numpy_fastpath": [
                    "self"
                ]
            },
            "TestCorrelateComplex": {
                "decimal": [
                    "self",
                    "dt"
                ],
                "_setup_rank1": [
                    "self",
                    "dt",
                    "mode"
                ],
                "test_rank1_valid": [
                    "self",
                    "dt"
                ],
                "test_rank1_same": [
                    "self",
                    "dt"
                ],
                "test_rank1_full": [
                    "self",
                    "dt"
                ],
                "test_swap_full": [
                    "self",
                    "dt"
                ],
                "test_swap_same": [
                    "self",
                    "dt"
                ],
                "test_rank3": [
                    "self",
                    "dt"
                ],
                "test_rank0": [
                    "self",
                    "dt"
                ]
            },
            "TestCorrelate2d": {
                "test_consistency_correlate_funcs": [
                    "self"
                ],
                "test_invalid_shapes": [
                    "self"
                ],
                "test_complex_input": [
                    "self"
                ]
            },
            "TestLFilterZI": {
                "test_basic": [
                    "self"
                ],
                "test_scale_invariance": [
                    "self"
                ]
            },
            "TestFiltFilt": {
                "filtfilt": [
                    "self",
                    "zpk",
                    "x",
                    "axis",
                    "padtype",
                    "padlen",
                    "method",
                    "irlen"
                ],
                "test_basic": [
                    "self"
                ],
                "test_sine": [
                    "self"
                ],
                "test_axis": [
                    "self"
                ],
                "test_acoeff": [
                    "self"
                ],
                "test_gust_simple": [
                    "self"
                ],
                "test_gust_scalars": [
                    "self"
                ]
            },
            "TestSOSFiltFilt": {
                "test_equivalence": [
                    "self"
                ]
            },
            "TestDecimate": {
                "test_bad_args": [
                    "self"
                ],
                "test_basic_IIR": [
                    "self"
                ],
                "test_basic_FIR": [
                    "self"
                ],
                "test_shape": [
                    "self"
                ],
                "test_phaseshift_FIR": [
                    "self"
                ],
                "test_zero_phase_FIR": [
                    "self"
                ],
                "test_phaseshift_IIR": [
                    "self"
                ],
                "test_zero_phase_IIR": [
                    "self"
                ],
                "_test_phaseshift": [
                    "self",
                    "method",
                    "zero_phase"
                ],
                "test_auto_n": [
                    "self"
                ]
            },
            "TestHilbert": {
                "test_bad_args": [
                    "self"
                ],
                "test_hilbert_theoretical": [
                    "self"
                ],
                "test_hilbert_axisN": [
                    "self"
                ]
            },
            "TestHilbert2": {
                "test_bad_args": [
                    "self"
                ]
            },
            "TestPartialFractionExpansion": {
                "assert_rp_almost_equal": [
                    "r",
                    "p",
                    "r_true",
                    "p_true",
                    "decimal"
                ],
                "test_compute_factors": [
                    "self"
                ],
                "test_group_poles": [
                    "self"
                ],
                "test_residue_general": [
                    "self"
                ],
                "test_residue_leading_zeros": [
                    "self"
                ],
                "test_resiude_degenerate": [
                    "self"
                ],
                "test_residuez_general": [
                    "self"
                ],
                "test_residuez_trailing_zeros": [
                    "self"
                ],
                "test_residuez_degenerate": [
                    "self"
                ],
                "test_inverse_unique_roots_different_rtypes": [
                    "self"
                ],
                "test_inverse_repeated_roots_different_rtypes": [
                    "self"
                ],
                "test_inverse_bad_rtype": [
                    "self"
                ],
                "test_invresz_one_coefficient_bug": [
                    "self"
                ],
                "test_invres": [
                    "self"
                ],
                "test_invresz": [
                    "self"
                ],
                "test_inverse_scalar_arguments": [
                    "self"
                ]
            },
            "TestVectorstrength": {
                "test_single_1dperiod": [
                    "self"
                ],
                "test_single_2dperiod": [
                    "self"
                ],
                "test_equal_1dperiod": [
                    "self"
                ],
                "test_equal_2dperiod": [
                    "self"
                ],
                "test_spaced_1dperiod": [
                    "self"
                ],
                "test_spaced_2dperiod": [
                    "self"
                ],
                "test_partial_1dperiod": [
                    "self"
                ],
                "test_partial_2dperiod": [
                    "self"
                ],
                "test_opposite_1dperiod": [
                    "self"
                ],
                "test_opposite_2dperiod": [
                    "self"
                ],
                "test_2d_events_ValueError": [
                    "self"
                ],
                "test_2d_period_ValueError": [
                    "self"
                ],
                "test_zero_period_ValueError": [
                    "self"
                ],
                "test_negative_period_ValueError": [
                    "self"
                ]
            },
            "TestSOSFilt": {
                "test_rank1": [
                    "self",
                    "dt"
                ],
                "test_rank2": [
                    "self",
                    "dt"
                ],
                "test_rank3": [
                    "self",
                    "dt"
                ],
                "test_initial_conditions": [
                    "self",
                    "dt"
                ],
                "test_initial_conditions_3d_axis1": [
                    "self",
                    "dt"
                ],
                "test_bad_zi_shape": [
                    "self",
                    "dt"
                ],
                "test_sosfilt_zi": [
                    "self",
                    "dt"
                ]
            },
            "TestDeconvolve": {
                "test_basic": [
                    "self"
                ]
            },
            "TestDetrend": {
                "test_basic": [
                    "self"
                ],
                "test_copy": [
                    "self"
                ]
            },
            "TestUniqueRoots": {
                "test_real_no_repeat": [
                    "self"
                ],
                "test_real_repeat": [
                    "self"
                ],
                "test_complex_no_repeat": [
                    "self"
                ],
                "test_complex_repeat": [
                    "self"
                ],
                "test_gh_4915": [
                    "self"
                ],
                "test_complex_roots_extra": [
                    "self"
                ],
                "test_single_unique_root": [
                    "self"
                ]
            }
        },
        "scipy.signal.tests.test_spectral": {
            "TestPeriodogram": {
                "test_real_onesided_even": [
                    "self"
                ],
                "test_real_onesided_odd": [
                    "self"
                ],
                "test_real_twosided": [
                    "self"
                ],
                "test_real_spectrum": [
                    "self"
                ],
                "test_integer_even": [
                    "self"
                ],
                "test_integer_odd": [
                    "self"
                ],
                "test_integer_twosided": [
                    "self"
                ],
                "test_complex": [
                    "self"
                ],
                "test_unk_scaling": [
                    "self"
                ],
                "test_nd_axis_m1": [
                    "self"
                ],
                "test_nd_axis_0": [
                    "self"
                ],
                "test_window_external": [
                    "self"
                ],
                "test_padded_fft": [
                    "self"
                ],
                "test_empty_input": [
                    "self"
                ],
                "test_empty_input_other_axis": [
                    "self"
                ],
                "test_short_nfft": [
                    "self"
                ],
                "test_nfft_is_xshape": [
                    "self"
                ],
                "test_real_onesided_even_32": [
                    "self"
                ],
                "test_real_onesided_odd_32": [
                    "self"
                ],
                "test_real_twosided_32": [
                    "self"
                ],
                "test_complex_32": [
                    "self"
                ]
            },
            "TestWelch": {
                "test_real_onesided_even": [
                    "self"
                ],
                "test_real_onesided_odd": [
                    "self"
                ],
                "test_real_twosided": [
                    "self"
                ],
                "test_real_spectrum": [
                    "self"
                ],
                "test_integer_onesided_even": [
                    "self"
                ],
                "test_integer_onesided_odd": [
                    "self"
                ],
                "test_integer_twosided": [
                    "self"
                ],
                "test_complex": [
                    "self"
                ],
                "test_unk_scaling": [
                    "self"
                ],
                "test_detrend_linear": [
                    "self"
                ],
                "test_no_detrending": [
                    "self"
                ],
                "test_detrend_external": [
                    "self"
                ],
                "test_detrend_external_nd_m1": [
                    "self"
                ],
                "test_detrend_external_nd_0": [
                    "self"
                ],
                "test_nd_axis_m1": [
                    "self"
                ],
                "test_nd_axis_0": [
                    "self"
                ],
                "test_window_external": [
                    "self"
                ],
                "test_empty_input": [
                    "self"
                ],
                "test_empty_input_other_axis": [
                    "self"
                ],
                "test_short_data": [
                    "self"
                ],
                "test_window_long_or_nd": [
                    "self"
                ],
                "test_nondefault_noverlap": [
                    "self"
                ],
                "test_bad_noverlap": [
                    "self"
                ],
                "test_nfft_too_short": [
                    "self"
                ],
                "test_real_onesided_even_32": [
                    "self"
                ],
                "test_real_onesided_odd_32": [
                    "self"
                ],
                "test_real_twosided_32": [
                    "self"
                ],
                "test_complex_32": [
                    "self"
                ],
                "test_padded_freqs": [
                    "self"
                ],
                "test_window_correction": [
                    "self"
                ],
                "test_axis_rolling": [
                    "self"
                ],
                "test_average": [
                    "self"
                ]
            },
            "TestCSD": {
                "test_pad_shorter_x": [
                    "self"
                ],
                "test_pad_shorter_y": [
                    "self"
                ],
                "test_real_onesided_even": [
                    "self"
                ],
                "test_real_onesided_odd": [
                    "self"
                ],
                "test_real_twosided": [
                    "self"
                ],
                "test_real_spectrum": [
                    "self"
                ],
                "test_integer_onesided_even": [
                    "self"
                ],
                "test_integer_onesided_odd": [
                    "self"
                ],
                "test_integer_twosided": [
                    "self"
                ],
                "test_complex": [
                    "self"
                ],
                "test_unk_scaling": [
                    "self"
                ],
                "test_detrend_linear": [
                    "self"
                ],
                "test_no_detrending": [
                    "self"
                ],
                "test_detrend_external": [
                    "self"
                ],
                "test_detrend_external_nd_m1": [
                    "self"
                ],
                "test_detrend_external_nd_0": [
                    "self"
                ],
                "test_nd_axis_m1": [
                    "self"
                ],
                "test_nd_axis_0": [
                    "self"
                ],
                "test_window_external": [
                    "self"
                ],
                "test_empty_input": [
                    "self"
                ],
                "test_empty_input_other_axis": [
                    "self"
                ],
                "test_short_data": [
                    "self"
                ],
                "test_window_long_or_nd": [
                    "self"
                ],
                "test_nondefault_noverlap": [
                    "self"
                ],
                "test_bad_noverlap": [
                    "self"
                ],
                "test_nfft_too_short": [
                    "self"
                ],
                "test_real_onesided_even_32": [
                    "self"
                ],
                "test_real_onesided_odd_32": [
                    "self"
                ],
                "test_real_twosided_32": [
                    "self"
                ],
                "test_complex_32": [
                    "self"
                ],
                "test_padded_freqs": [
                    "self"
                ]
            },
            "TestCoherence": {
                "test_identical_input": [
                    "self"
                ],
                "test_phase_shifted_input": [
                    "self"
                ]
            },
            "TestSpectrogram": {
                "test_average_all_segments": [
                    "self"
                ],
                "test_window_external": [
                    "self"
                ],
                "test_short_data": [
                    "self"
                ]
            },
            "TestLombscargle": {
                "test_frequency": [
                    "self"
                ],
                "test_amplitude": [
                    "self"
                ],
                "test_precenter": [
                    "self"
                ],
                "test_normalize": [
                    "self"
                ],
                "test_wrong_shape": [
                    "self"
                ],
                "test_zero_division": [
                    "self"
                ],
                "test_lombscargle_atan_vs_atan2": [
                    "self"
                ]
            },
            "TestSTFT": {
                "test_input_validation": [
                    "self"
                ],
                "test_check_COLA": [
                    "self"
                ],
                "test_check_NOLA": [
                    "self"
                ],
                "test_average_all_segments": [
                    "self"
                ],
                "test_permute_axes": [
                    "self"
                ],
                "test_roundtrip_real": [
                    "self"
                ],
                "test_roundtrip_not_nola": [
                    "self"
                ],
                "test_roundtrip_nola_not_cola": [
                    "self"
                ],
                "test_roundtrip_float32": [
                    "self"
                ],
                "test_roundtrip_complex": [
                    "self"
                ],
                "test_roundtrip_boundary_extension": [
                    "self"
                ],
                "test_roundtrip_padded_signal": [
                    "self"
                ],
                "test_roundtrip_padded_FFT": [
                    "self"
                ],
                "test_axis_rolling": [
                    "self"
                ]
            }
        },
        "scipy.signal.tests.test_fir_filter_design": {
            "test_kaiser_beta": [],
            "test_kaiser_atten": [],
            "test_kaiserord": [],
            "TestFirwin": {
                "check_response": [
                    "self",
                    "h",
                    "expected_response",
                    "tol"
                ],
                "test_response": [
                    "self"
                ],
                "mse": [
                    "self",
                    "h",
                    "bands"
                ],
                "test_scaling": [
                    "self"
                ]
            },
            "TestFirWinMore": {
                "test_lowpass": [
                    "self"
                ],
                "test_highpass": [
                    "self"
                ],
                "test_bandpass": [
                    "self"
                ],
                "test_bandstop_multi": [
                    "self"
                ],
                "test_fs_nyq": [
                    "self"
                ],
                "test_bad_cutoff": [
                    "self"
                ],
                "test_even_highpass_raises_value_error": [
                    "self"
                ],
                "test_bad_pass_zero": [
                    "self"
                ]
            },
            "TestFirwin2": {
                "test_invalid_args": [
                    "self"
                ],
                "test01": [
                    "self"
                ],
                "test02": [
                    "self"
                ],
                "test03": [
                    "self"
                ],
                "test04": [
                    "self"
                ],
                "test05": [
                    "self"
                ],
                "test06": [
                    "self"
                ],
                "test_fs_nyq": [
                    "self"
                ],
                "test_tuple": [
                    "self"
                ],
                "test_input_modyfication": [
                    "self"
                ]
            },
            "TestRemez": {
                "test_bad_args": [
                    "self"
                ],
                "test_hilbert": [
                    "self"
                ],
                "test_compare": [
                    "self"
                ]
            },
            "TestFirls": {
                "test_bad_args": [
                    "self"
                ],
                "test_firls": [
                    "self"
                ],
                "test_compare": [
                    "self"
                ],
                "test_rank_deficient": [
                    "self"
                ]
            },
            "TestMinimumPhase": {
                "test_bad_args": [
                    "self"
                ],
                "test_homomorphic": [
                    "self"
                ],
                "test_hilbert": [
                    "self"
                ]
            }
        },
        "scipy.signal.tests.test_bsplines": {
            "test_sepfir2d_invalid_filter": [],
            "test_sepfir2d_invalid_image": [],
            "TestBSplines": {
                "test_spline_filter": [
                    "self"
                ],
                "test_bspline": [
                    "self"
                ],
                "test_gauss_spline": [
                    "self"
                ],
                "test_gauss_spline_list": [
                    "self"
                ],
                "test_cubic": [
                    "self"
                ],
                "test_quadratic": [
                    "self"
                ],
                "test_cspline1d": [
                    "self"
                ],
                "test_qspline1d": [
                    "self"
                ],
                "test_cspline1d_eval": [
                    "self"
                ],
                "test_qspline1d_eval": [
                    "self"
                ]
            }
        },
        "scipy.signal.tests.test_max_len_seq": {
            "TestMLS": {
                "test_mls_inputs": [
                    "self"
                ],
                "test_mls_output": [
                    "self"
                ]
            }
        },
        "scipy.signal.tests.test_windows": {
            "test_exponential": [],
            "test_windowfunc_basics": [],
            "test_needs_params": [],
            "test_deprecation": [],
            "test_deprecated_pickleable": [],
            "TestBartHann": {
                "test_basic": [
                    "self"
                ]
            },
            "TestBartlett": {
                "test_basic": [
                    "self"
                ]
            },
            "TestBlackman": {
                "test_basic": [
                    "self"
                ]
            },
            "TestBlackmanHarris": {
                "test_basic": [
                    "self"
                ]
            },
            "TestTaylor": {
                "test_normalized": [
                    "self"
                ],
                "test_non_normalized": [
                    "self"
                ],
                "test_correctness": [
                    "self"
                ]
            },
            "TestBohman": {
                "test_basic": [
                    "self"
                ]
            },
            "TestBoxcar": {
                "test_basic": [
                    "self"
                ]
            },
            "TestChebWin": {
                "test_basic": [
                    "self"
                ],
                "test_cheb_odd_high_attenuation": [
                    "self"
                ],
                "test_cheb_even_high_attenuation": [
                    "self"
                ],
                "test_cheb_odd_low_attenuation": [
                    "self"
                ],
                "test_cheb_even_low_attenuation": [
                    "self"
                ]
            },
            "TestFlatTop": {
                "test_basic": [
                    "self"
                ]
            },
            "TestGaussian": {
                "test_basic": [
                    "self"
                ]
            },
            "TestGeneralCosine": {
                "test_basic": [
                    "self"
                ]
            },
            "TestGeneralHamming": {
                "test_basic": [
                    "self"
                ]
            },
            "TestHamming": {
                "test_basic": [
                    "self"
                ]
            },
            "TestHann": {
                "test_basic": [
                    "self"
                ]
            },
            "TestKaiser": {
                "test_basic": [
                    "self"
                ]
            },
            "TestNuttall": {
                "test_basic": [
                    "self"
                ]
            },
            "TestParzen": {
                "test_basic": [
                    "self"
                ]
            },
            "TestTriang": {
                "test_basic": [
                    "self"
                ]
            },
            "TestTukey": {
                "test_basic": [
                    "self"
                ],
                "test_extremes": [
                    "self"
                ]
            },
            "TestDPSS": {
                "test_basic": [
                    "self"
                ],
                "test_unity": [
                    "self"
                ],
                "test_extremes": [
                    "self"
                ],
                "test_degenerate": [
                    "self"
                ]
            },
            "TestGetWindow": {
                "test_boxcar": [
                    "self"
                ],
                "test_cheb_odd": [
                    "self"
                ],
                "test_cheb_even": [
                    "self"
                ],
                "test_kaiser_float": [
                    "self"
                ],
                "test_invalid_inputs": [
                    "self"
                ],
                "test_array_as_window": [
                    "self"
                ]
            }
        },
        "scipy.signal.tests": {},
        "scipy.signal.tests.mpsig": {
            "_prod": [
                "seq"
            ],
            "_relative_degree": [
                "z",
                "p"
            ],
            "_zpkbilinear": [
                "z",
                "p",
                "k",
                "fs"
            ],
            "_zpklp2lp": [
                "z",
                "p",
                "k",
                "wo"
            ],
            "_butter_analog_poles": [
                "n"
            ],
            "butter_lp": [
                "n",
                "Wn"
            ],
            "zpkfreqz": [
                "z",
                "p",
                "k",
                "worN"
            ]
        },
        "scipy.signal.tests.test_dltisys": {
            "TestDLTI": {
                "test_dlsim": [
                    "self"
                ],
                "test_dstep": [
                    "self"
                ],
                "test_dimpulse": [
                    "self"
                ],
                "test_dlsim_trivial": [
                    "self"
                ],
                "test_dlsim_simple1d": [
                    "self"
                ],
                "test_dlsim_simple2d": [
                    "self"
                ],
                "test_more_step_and_impulse": [
                    "self"
                ]
            },
            "TestDlti": {
                "test_dlti_instantiation": [
                    "self"
                ]
            },
            "TestStateSpaceDisc": {
                "test_initialization": [
                    "self"
                ],
                "test_conversion": [
                    "self"
                ],
                "test_properties": [
                    "self"
                ]
            },
            "TestTransferFunction": {
                "test_initialization": [
                    "self"
                ],
                "test_conversion": [
                    "self"
                ],
                "test_properties": [
                    "self"
                ]
            },
            "TestZerosPolesGain": {
                "test_initialization": [
                    "self"
                ],
                "test_conversion": [
                    "self"
                ]
            },
            "Test_dfreqresp": {
                "test_manual": [
                    "self"
                ],
                "test_auto": [
                    "self"
                ],
                "test_freq_range": [
                    "self"
                ],
                "test_pole_one": [
                    "self"
                ],
                "test_error": [
                    "self"
                ],
                "test_from_state_space": [
                    "self"
                ],
                "test_from_zpk": [
                    "self"
                ]
            },
            "Test_bode": {
                "test_manual": [
                    "self"
                ],
                "test_auto": [
                    "self"
                ],
                "test_range": [
                    "self"
                ],
                "test_pole_one": [
                    "self"
                ],
                "test_imaginary": [
                    "self"
                ],
                "test_error": [
                    "self"
                ]
            },
            "TestTransferFunctionZConversion": {
                "test_full": [
                    "self"
                ],
                "test_numerator": [
                    "self"
                ],
                "test_denominator": [
                    "self"
                ]
            }
        },
        "scipy.signal.tests.test_wavelets": {
            "TestWavelets": {
                "test_qmf": [
                    "self"
                ],
                "test_daub": [
                    "self"
                ],
                "test_cascade": [
                    "self"
                ],
                "test_morlet": [
                    "self"
                ],
                "test_morlet2": [
                    "self"
                ],
                "test_ricker": [
                    "self"
                ],
                "test_cwt": [
                    "self"
                ]
            }
        },
        "scipy.signal.tests.test_filter_design": {
            "mpmath_check": [
                "min_ver"
            ],
            "dB": [
                "x"
            ],
            "test_sos_consistency": [],
            "TestCplxPair": {
                "test_trivial_input": [
                    "self"
                ],
                "test_output_order": [
                    "self"
                ],
                "test_real_integer_input": [
                    "self"
                ],
                "test_tolerances": [
                    "self"
                ],
                "test_unmatched_conjugates": [
                    "self"
                ]
            },
            "TestCplxReal": {
                "test_trivial_input": [
                    "self"
                ],
                "test_output_order": [
                    "self"
                ],
                "test_unmatched_conjugates": [
                    "self"
                ],
                "test_real_integer_input": [
                    "self"
                ]
            },
            "TestTf2zpk": {
                "test_simple": [
                    "self",
                    "dt"
                ],
                "test_bad_filter": [
                    "self"
                ]
            },
            "TestZpk2Tf": {
                "test_identity": [
                    "self"
                ]
            },
            "TestSos2Zpk": {
                "test_basic": [
                    "self"
                ],
                "test_fewer_zeros": [
                    "self"
                ]
            },
            "TestSos2Tf": {
                "test_basic": [
                    "self"
                ]
            },
            "TestTf2Sos": {
                "test_basic": [
                    "self"
                ]
            },
            "TestZpk2Sos": {
                "test_dtypes": [
                    "self",
                    "dt",
                    "pairing"
                ],
                "test_basic": [
                    "self"
                ]
            },
            "TestFreqs": {
                "test_basic": [
                    "self"
                ],
                "test_output": [
                    "self"
                ],
                "test_freq_range": [
                    "self"
                ],
                "test_plot": [
                    "self"
                ],
                "test_backward_compat": [
                    "self"
                ],
                "test_w_or_N_types": [
                    "self"
                ]
            },
            "TestFreqs_zpk": {
                "test_basic": [
                    "self"
                ],
                "test_output": [
                    "self"
                ],
                "test_freq_range": [
                    "self"
                ],
                "test_vs_freqs": [
                    "self"
                ],
                "test_backward_compat": [
                    "self"
                ],
                "test_w_or_N_types": [
                    "self"
                ]
            },
            "TestFreqz": {
                "test_ticket1441": [
                    "self"
                ],
                "test_basic": [
                    "self"
                ],
                "test_basic_whole": [
                    "self"
                ],
                "test_plot": [
                    "self"
                ],
                "test_fft_wrapping": [
                    "self"
                ],
                "test_broadcasting1": [
                    "self"
                ],
                "test_broadcasting2": [
                    "self"
                ],
                "test_broadcasting3": [
                    "self"
                ],
                "test_broadcasting4": [
                    "self"
                ],
                "test_backward_compat": [
                    "self"
                ],
                "test_fs_param": [
                    "self"
                ],
                "test_w_or_N_types": [
                    "self"
                ],
                "test_nyquist": [
                    "self"
                ]
            },
            "TestSOSFreqz": {
                "test_sosfreqz_basic": [
                    "self"
                ],
                "test_sosfrez_design": [
                    "self"
                ],
                "test_sosfreqz_design_ellip": [
                    "self"
                ],
                "test_sos_freqz_against_mp": [
                    "self"
                ],
                "test_fs_param": [
                    "self"
                ],
                "test_w_or_N_types": [
                    "self"
                ]
            },
            "TestFreqz_zpk": {
                "test_ticket1441": [
                    "self"
                ],
                "test_basic": [
                    "self"
                ],
                "test_basic_whole": [
                    "self"
                ],
                "test_vs_freqz": [
                    "self"
                ],
                "test_backward_compat": [
                    "self"
                ],
                "test_fs_param": [
                    "self"
                ],
                "test_w_or_N_types": [
                    "self"
                ]
            },
            "TestNormalize": {
                "test_allclose": [
                    "self"
                ],
                "test_errors": [
                    "self"
                ]
            },
            "TestLp2lp": {
                "test_basic": [
                    "self"
                ]
            },
            "TestLp2hp": {
                "test_basic": [
                    "self"
                ]
            },
            "TestLp2bp": {
                "test_basic": [
                    "self"
                ]
            },
            "TestLp2bs": {
                "test_basic": [
                    "self"
                ]
            },
            "TestBilinear": {
                "test_basic": [
                    "self"
                ]
            },
            "TestLp2lp_zpk": {
                "test_basic": [
                    "self"
                ]
            },
            "TestLp2hp_zpk": {
                "test_basic": [
                    "self"
                ]
            },
            "TestLp2bp_zpk": {
                "test_basic": [
                    "self"
                ]
            },
            "TestLp2bs_zpk": {
                "test_basic": [
                    "self"
                ]
            },
            "TestBilinear_zpk": {
                "test_basic": [
                    "self"
                ]
            },
            "TestPrototypeType": {
                "test_output_type": [
                    "self"
                ]
            },
            "TestButtord": {
                "test_lowpass": [
                    "self"
                ],
                "test_highpass": [
                    "self"
                ],
                "test_bandpass": [
                    "self"
                ],
                "test_bandstop": [
                    "self"
                ],
                "test_analog": [
                    "self"
                ],
                "test_fs_param": [
                    "self"
                ],
                "test_invalid_input": [
                    "self"
                ]
            },
            "TestCheb1ord": {
                "test_lowpass": [
                    "self"
                ],
                "test_highpass": [
                    "self"
                ],
                "test_bandpass": [
                    "self"
                ],
                "test_bandstop": [
                    "self"
                ],
                "test_analog": [
                    "self"
                ],
                "test_fs_param": [
                    "self"
                ],
                "test_invalid_input": [
                    "self"
                ]
            },
            "TestCheb2ord": {
                "test_lowpass": [
                    "self"
                ],
                "test_highpass": [
                    "self"
                ],
                "test_bandpass": [
                    "self"
                ],
                "test_bandstop": [
                    "self"
                ],
                "test_analog": [
                    "self"
                ],
                "test_fs_param": [
                    "self"
                ],
                "test_invalid_input": [
                    "self"
                ]
            },
            "TestEllipord": {
                "test_lowpass": [
                    "self"
                ],
                "test_highpass": [
                    "self"
                ],
                "test_bandpass": [
                    "self"
                ],
                "test_bandstop": [
                    "self"
                ],
                "test_analog": [
                    "self"
                ],
                "test_fs_param": [
                    "self"
                ],
                "test_invalid_input": [
                    "self"
                ]
            },
            "TestBessel": {
                "test_degenerate": [
                    "self"
                ],
                "test_high_order": [
                    "self"
                ],
                "test_refs": [
                    "self"
                ],
                "test_hardcoded": [
                    "self"
                ],
                "test_norm_phase": [
                    "self"
                ],
                "test_norm_mag": [
                    "self"
                ],
                "test_norm_delay": [
                    "self"
                ],
                "test_norm_factor": [
                    "self"
                ],
                "test_bessel_poly": [
                    "self"
                ],
                "test_bessel_zeros": [
                    "self"
                ],
                "test_invalid": [
                    "self"
                ],
                "test_fs_param": [
                    "self"
                ]
            },
            "TestButter": {
                "test_degenerate": [
                    "self"
                ],
                "test_basic": [
                    "self"
                ],
                "test_highpass": [
                    "self"
                ],
                "test_bandpass": [
                    "self"
                ],
                "test_bandstop": [
                    "self"
                ],
                "test_ba_output": [
                    "self"
                ],
                "test_fs_param": [
                    "self"
                ]
            },
            "TestCheby1": {
                "test_degenerate": [
                    "self"
                ],
                "test_basic": [
                    "self"
                ],
                "test_highpass": [
                    "self"
                ],
                "test_bandpass": [
                    "self"
                ],
                "test_bandstop": [
                    "self"
                ],
                "test_ba_output": [
                    "self"
                ],
                "test_fs_param": [
                    "self"
                ]
            },
            "TestCheby2": {
                "test_degenerate": [
                    "self"
                ],
                "test_basic": [
                    "self"
                ],
                "test_highpass": [
                    "self"
                ],
                "test_bandpass": [
                    "self"
                ],
                "test_bandstop": [
                    "self"
                ],
                "test_ba_output": [
                    "self"
                ],
                "test_fs_param": [
                    "self"
                ]
            },
            "TestEllip": {
                "test_degenerate": [
                    "self"
                ],
                "test_basic": [
                    "self"
                ],
                "test_highpass": [
                    "self"
                ],
                "test_bandpass": [
                    "self"
                ],
                "test_bandstop": [
                    "self"
                ],
                "test_ba_output": [
                    "self"
                ],
                "test_fs_param": [
                    "self"
                ]
            },
            "TestIIRNotch": {
                "test_ba_output": [
                    "self"
                ],
                "test_frequency_response": [
                    "self"
                ],
                "test_errors": [
                    "self"
                ],
                "test_fs_param": [
                    "self"
                ]
            },
            "TestIIRPeak": {
                "test_ba_output": [
                    "self"
                ],
                "test_frequency_response": [
                    "self"
                ],
                "test_errors": [
                    "self"
                ],
                "test_fs_param": [
                    "self"
                ]
            },
            "TestIIRComb": {
                "test_invalid_input": [
                    "self"
                ],
                "test_frequency_response": [
                    "self",
                    "ftype"
                ],
                "test_iir_symmetry": [
                    "self"
                ],
                "test_ba_output": [
                    "self"
                ]
            },
            "TestIIRDesign": {
                "test_exceptions": [
                    "self"
                ]
            },
            "TestIIRFilter": {
                "test_symmetry": [
                    "self"
                ],
                "test_int_inputs": [
                    "self"
                ],
                "test_invalid_wn_size": [
                    "self"
                ],
                "test_invalid_wn_range": [
                    "self"
                ]
            },
            "TestGroupDelay": {
                "test_identity_filter": [
                    "self"
                ],
                "test_fir": [
                    "self"
                ],
                "test_iir": [
                    "self"
                ],
                "test_singular": [
                    "self"
                ],
                "test_backward_compat": [
                    "self"
                ],
                "test_fs_param": [
                    "self"
                ],
                "test_w_or_N_types": [
                    "self"
                ]
            },
            "TestGammatone": {
                "test_invalid_input": [
                    "self"
                ],
                "test_frequency_response": [
                    "self"
                ],
                "test_iir_symmetry": [
                    "self"
                ],
                "test_fir_ba_output": [
                    "self"
                ],
                "test_iir_ba_output": [
                    "self"
                ]
            }
        },
        "scipy.signal.tests.test_savitzky_golay": {
            "check_polyder": [
                "p",
                "m",
                "expected"
            ],
            "test_polyder": [],
            "alt_sg_coeffs": [
                "window_length",
                "polyorder",
                "pos"
            ],
            "test_sg_coeffs_trivial": [],
            "compare_coeffs_to_alt": [
                "window_length",
                "order"
            ],
            "test_sg_coeffs_compare": [],
            "test_sg_coeffs_exact": [],
            "test_sg_coeffs_deriv": [],
            "test_sg_coeffs_deriv_gt_polyorder": [],
            "test_sg_coeffs_large": [],
            "test_sg_filter_trivial": [],
            "test_sg_filter_basic": [],
            "test_sg_filter_2d": [],
            "test_sg_filter_interp_edges": [],
            "test_sg_filter_interp_edges_3d": []
        },
        "scipy.signal.tests.test_result_type": {
            "test_decimate": [],
            "test_lfilter_zi": [],
            "test_lfiltic": [],
            "test_sos2tf": [],
            "test_sosfilt_zi": []
        },
        "scipy.signal.tests.test_waveforms": {
            "chirp_linear": [
                "t",
                "f0",
                "f1",
                "t1"
            ],
            "chirp_quadratic": [
                "t",
                "f0",
                "f1",
                "t1",
                "vertex_zero"
            ],
            "chirp_geometric": [
                "t",
                "f0",
                "f1",
                "t1"
            ],
            "chirp_hyperbolic": [
                "t",
                "f0",
                "f1",
                "t1"
            ],
            "compute_frequency": [
                "t",
                "theta"
            ],
            "TestChirp": {
                "test_linear_at_zero": [
                    "self"
                ],
                "test_linear_freq_01": [
                    "self"
                ],
                "test_linear_freq_02": [
                    "self"
                ],
                "test_quadratic_at_zero": [
                    "self"
                ],
                "test_quadratic_at_zero2": [
                    "self"
                ],
                "test_quadratic_freq_01": [
                    "self"
                ],
                "test_quadratic_freq_02": [
                    "self"
                ],
                "test_logarithmic_at_zero": [
                    "self"
                ],
                "test_logarithmic_freq_01": [
                    "self"
                ],
                "test_logarithmic_freq_02": [
                    "self"
                ],
                "test_logarithmic_freq_03": [
                    "self"
                ],
                "test_hyperbolic_at_zero": [
                    "self"
                ],
                "test_hyperbolic_freq_01": [
                    "self"
                ],
                "test_hyperbolic_zero_freq": [
                    "self"
                ],
                "test_unknown_method": [
                    "self"
                ],
                "test_integer_t1": [
                    "self"
                ],
                "test_integer_f0": [
                    "self"
                ],
                "test_integer_f1": [
                    "self"
                ],
                "test_integer_all": [
                    "self"
                ]
            },
            "TestSweepPoly": {
                "test_sweep_poly_quad1": [
                    "self"
                ],
                "test_sweep_poly_const": [
                    "self"
                ],
                "test_sweep_poly_linear": [
                    "self"
                ],
                "test_sweep_poly_quad2": [
                    "self"
                ],
                "test_sweep_poly_cubic": [
                    "self"
                ],
                "test_sweep_poly_cubic2": [
                    "self"
                ],
                "test_sweep_poly_cubic3": [
                    "self"
                ]
            },
            "TestGaussPulse": {
                "test_integer_fc": [
                    "self"
                ],
                "test_integer_bw": [
                    "self"
                ],
                "test_integer_bwr": [
                    "self"
                ],
                "test_integer_tpr": [
                    "self"
                ]
            },
            "TestUnitImpulse": {
                "test_no_index": [
                    "self"
                ],
                "test_index": [
                    "self"
                ],
                "test_mid": [
                    "self"
                ],
                "test_dtype": [
                    "self"
                ]
            }
        },
        "scipy.signal.tests.test_ltisys": {
            "_assert_poles_close": [
                "P1",
                "P2",
                "rtol",
                "atol"
            ],
            "TestPlacePoles": {
                "_check": [
                    "self",
                    "A",
                    "B",
                    "P"
                ],
                "test_real": [
                    "self"
                ],
                "test_complex": [
                    "self"
                ],
                "test_tricky_B": [
                    "self"
                ],
                "test_errors": [
                    "self"
                ]
            },
            "TestSS2TF": {
                "check_matrix_shapes": [
                    "self",
                    "p",
                    "q",
                    "r"
                ],
                "test_shapes": [
                    "self"
                ],
                "test_basic": [
                    "self"
                ],
                "test_zero_order_round_trip": [
                    "self"
                ],
                "test_simo_round_trip": [
                    "self"
                ],
                "test_all_int_arrays": [
                    "self"
                ],
                "test_multioutput": [
                    "self"
                ]
            },
            "TestLsim": {
                "lti_nowarn": [
                    "self"
                ],
                "test_first_order": [
                    "self"
                ],
                "test_integrator": [
                    "self"
                ],
                "test_double_integrator": [
                    "self"
                ],
                "test_jordan_block": [
                    "self"
                ],
                "test_miso": [
                    "self"
                ],
                "test_nonzero_initial_time": [
                    "self"
                ]
            },
            "Test_lsim2": {
                "test_01": [
                    "self"
                ],
                "test_02": [
                    "self"
                ],
                "test_03": [
                    "self"
                ],
                "test_04": [
                    "self"
                ],
                "test_05": [
                    "self"
                ],
                "test_06": [
                    "self"
                ]
            },
            "_TestImpulseFuncs": {
                "test_01": [
                    "self"
                ],
                "test_02": [
                    "self"
                ],
                "test_03": [
                    "self"
                ],
                "test_04": [
                    "self"
                ],
                "test_05": [
                    "self"
                ],
                "test_06": [
                    "self"
                ],
                "test_array_like": [
                    "self"
                ],
                "test_array_like2": [
                    "self"
                ]
            },
            "TestImpulse2": {
                "setup_method": [
                    "self"
                ]
            },
            "TestImpulse": {
                "setup_method": [
                    "self"
                ]
            },
            "_TestStepFuncs": {
                "test_01": [
                    "self"
                ],
                "test_02": [
                    "self"
                ],
                "test_03": [
                    "self"
                ],
                "test_04": [
                    "self"
                ],
                "test_05": [
                    "self"
                ],
                "test_06": [
                    "self"
                ],
                "test_array_like": [
                    "self"
                ]
            },
            "TestStep2": {
                "setup_method": [
                    "self"
                ],
                "test_05": [
                    "self"
                ]
            },
            "TestStep": {
                "setup_method": [
                    "self"
                ],
                "test_complex_input": [
                    "self"
                ]
            },
            "TestLti": {
                "test_lti_instantiation": [
                    "self"
                ]
            },
            "TestStateSpace": {
                "test_initialization": [
                    "self"
                ],
                "test_conversion": [
                    "self"
                ],
                "test_properties": [
                    "self"
                ],
                "test_operators": [
                    "self"
                ]
            },
            "TestTransferFunction": {
                "test_initialization": [
                    "self"
                ],
                "test_conversion": [
                    "self"
                ],
                "test_properties": [
                    "self"
                ]
            },
            "TestZerosPolesGain": {
                "test_initialization": [
                    "self"
                ],
                "test_conversion": [
                    "self"
                ]
            },
            "Test_abcd_normalize": {
                "setup_method": [
                    "self"
                ],
                "test_no_matrix_fails": [
                    "self"
                ],
                "test_A_nosquare_fails": [
                    "self"
                ],
                "test_AB_mismatch_fails": [
                    "self"
                ],
                "test_AC_mismatch_fails": [
                    "self"
                ],
                "test_CD_mismatch_fails": [
                    "self"
                ],
                "test_BD_mismatch_fails": [
                    "self"
                ],
                "test_normalized_matrices_unchanged": [
                    "self"
                ],
                "test_shapes": [
                    "self"
                ],
                "test_zero_dimension_is_not_none1": [
                    "self"
                ],
                "test_zero_dimension_is_not_none2": [
                    "self"
                ],
                "test_missing_A": [
                    "self"
                ],
                "test_missing_B": [
                    "self"
                ],
                "test_missing_C": [
                    "self"
                ],
                "test_missing_D": [
                    "self"
                ],
                "test_missing_AB": [
                    "self"
                ],
                "test_missing_AC": [
                    "self"
                ],
                "test_missing_AD": [
                    "self"
                ],
                "test_missing_BC": [
                    "self"
                ],
                "test_missing_ABC_fails": [
                    "self"
                ],
                "test_missing_BD_fails": [
                    "self"
                ],
                "test_missing_CD_fails": [
                    "self"
                ]
            },
            "Test_bode": {
                "test_01": [
                    "self"
                ],
                "test_02": [
                    "self"
                ],
                "test_03": [
                    "self"
                ],
                "test_04": [
                    "self"
                ],
                "test_05": [
                    "self"
                ],
                "test_06": [
                    "self"
                ],
                "test_07": [
                    "self"
                ],
                "test_08": [
                    "self"
                ],
                "test_from_state_space": [
                    "self"
                ]
            },
            "Test_freqresp": {
                "test_output_manual": [
                    "self"
                ],
                "test_output": [
                    "self"
                ],
                "test_freq_range": [
                    "self"
                ],
                "test_pole_zero": [
                    "self"
                ],
                "test_from_state_space": [
                    "self"
                ],
                "test_from_zpk": [
                    "self"
                ]
            }
        },
        "scipy.signal.tests.test_peak_finding": {
            "_gen_gaussians": [
                "center_locs",
                "sigmas",
                "total_length"
            ],
            "_gen_gaussians_even": [
                "sigmas",
                "total_length"
            ],
            "_gen_ridge_line": [
                "start_locs",
                "max_locs",
                "length",
                "distances",
                "gaps"
            ],
            "test_unpack_condition_args": [],
            "TestLocalMaxima1d": {
                "test_empty": [
                    "self"
                ],
                "test_linear": [
                    "self"
                ],
                "test_simple": [
                    "self"
                ],
                "test_flat_maxima": [
                    "self"
                ],
                "test_signal_edges": [
                    "self",
                    "x"
                ],
                "test_exceptions": [
                    "self"
                ]
            },
            "TestRidgeLines": {
                "test_empty": [
                    "self"
                ],
                "test_minimal": [
                    "self"
                ],
                "test_single_pass": [
                    "self"
                ],
                "test_single_bigdist": [
                    "self"
                ],
                "test_single_biggap": [
                    "self"
                ],
                "test_single_biggaps": [
                    "self"
                ]
            },
            "TestArgrel": {
                "test_empty": [
                    "self"
                ],
                "test_basic": [
                    "self"
                ],
                "test_highorder": [
                    "self"
                ],
                "test_2d_gaussians": [
                    "self"
                ]
            },
            "TestPeakProminences": {
                "test_empty": [
                    "self"
                ],
                "test_basic": [
                    "self"
                ],
                "test_edge_cases": [
                    "self"
                ],
                "test_non_contiguous": [
                    "self"
                ],
                "test_wlen": [
                    "self"
                ],
                "test_exceptions": [
                    "self"
                ],
                "test_warnings": [
                    "self"
                ]
            },
            "TestPeakWidths": {
                "test_empty": [
                    "self"
                ],
                "test_basic": [
                    "self"
                ],
                "test_non_contiguous": [
                    "self"
                ],
                "test_exceptions": [
                    "self"
                ],
                "test_warnings": [
                    "self"
                ],
                "test_mismatching_prominence_data": [
                    "self"
                ],
                "test_intersection_rules": [
                    "self"
                ]
            },
            "TestFindPeaks": {
                "test_constant": [
                    "self"
                ],
                "test_plateau_size": [
                    "self"
                ],
                "test_height_condition": [
                    "self"
                ],
                "test_threshold_condition": [
                    "self"
                ],
                "test_distance_condition": [
                    "self"
                ],
                "test_prominence_condition": [
                    "self"
                ],
                "test_width_condition": [
                    "self"
                ],
                "test_properties": [
                    "self"
                ],
                "test_raises": [
                    "self"
                ],
                "test_wlen_smaller_plateau": [
                    "self"
                ]
            },
            "TestFindPeaksCwt": {
                "test_find_peaks_exact": [
                    "self"
                ],
                "test_find_peaks_withnoise": [
                    "self"
                ],
                "test_find_peaks_nopeak": [
                    "self"
                ],
                "test_find_peaks_window_size": [
                    "self"
                ]
            }
        },
        "scipy.signal.windows.setup": {
            "configuration": [
                "parent_package",
                "top_path"
            ]
        },
        "scipy.signal.windows": {},
        "scipy.signal.windows.windows": {
            "_len_guards": [
                "M"
            ],
            "_extend": [
                "M",
                "sym"
            ],
            "_truncate": [
                "w",
                "needed"
            ],
            "general_cosine": [
                "M",
                "a",
                "sym"
            ],
            "boxcar": [
                "M",
                "sym"
            ],
            "triang": [
                "M",
                "sym"
            ],
            "parzen": [
                "M",
                "sym"
            ],
            "bohman": [
                "M",
                "sym"
            ],
            "blackman": [
                "M",
                "sym"
            ],
            "nuttall": [
                "M",
                "sym"
            ],
            "blackmanharris": [
                "M",
                "sym"
            ],
            "flattop": [
                "M",
                "sym"
            ],
            "bartlett": [
                "M",
                "sym"
            ],
            "hann": [
                "M",
                "sym"
            ],
            "hanning": [],
            "tukey": [
                "M",
                "alpha",
                "sym"
            ],
            "barthann": [
                "M",
                "sym"
            ],
            "general_hamming": [
                "M",
                "alpha",
                "sym"
            ],
            "hamming": [
                "M",
                "sym"
            ],
            "kaiser": [
                "M",
                "beta",
                "sym"
            ],
            "gaussian": [
                "M",
                "std",
                "sym"
            ],
            "general_gaussian": [
                "M",
                "p",
                "sig",
                "sym"
            ],
            "chebwin": [
                "M",
                "at",
                "sym"
            ],
            "cosine": [
                "M",
                "sym"
            ],
            "exponential": [
                "M",
                "center",
                "tau",
                "sym"
            ],
            "taylor": [
                "M",
                "nbar",
                "sll",
                "norm",
                "sym"
            ],
            "dpss": [
                "M",
                "NW",
                "Kmax",
                "sym",
                "norm",
                "return_ratios"
            ],
            "_fftautocorr": [
                "x"
            ],
            "get_window": [
                "window",
                "Nx",
                "fftbins"
            ]
        },
        "scipy.sparse.sparsetools": {
            "_deprecated": []
        },
        "scipy.sparse.csc": {
            "isspmatrix_csc": [
                "x"
            ],
            "csc_matrix": {
                "transpose": [
                    "self",
                    "axes",
                    "copy"
                ],
                "__iter__": [
                    "self"
                ],
                "tocsc": [
                    "self",
                    "copy"
                ],
                "tocsr": [
                    "self",
                    "copy"
                ],
                "nonzero": [
                    "self"
                ],
                "getrow": [
                    "self",
                    "i"
                ],
                "getcol": [
                    "self",
                    "i"
                ],
                "_get_intXarray": [
                    "self",
                    "row",
                    "col"
                ],
                "_get_intXslice": [
                    "self",
                    "row",
                    "col"
                ],
                "_get_sliceXint": [
                    "self",
                    "row",
                    "col"
                ],
                "_get_sliceXarray": [
                    "self",
                    "row",
                    "col"
                ],
                "_get_arrayXint": [
                    "self",
                    "row",
                    "col"
                ],
                "_get_arrayXslice": [
                    "self",
                    "row",
                    "col"
                ],
                "_swap": [
                    "self",
                    "x"
                ]
            }
        },
        "scipy.sparse._index": {
            "_broadcast_arrays": [
                "a",
                "b"
            ],
            "_unpack_index": [
                "index"
            ],
            "_check_ellipsis": [
                "index"
            ],
            "_maybe_bool_ndarray": [
                "idx"
            ],
            "_first_element_bool": [
                "idx",
                "max_dim"
            ],
            "_compatible_boolean_index": [
                "idx"
            ],
            "_boolean_index_to_array": [
                "idx"
            ],
            "IndexMixin": {
                "__getitem__": [
                    "self",
                    "key"
                ],
                "__setitem__": [
                    "self",
                    "key",
                    "x"
                ],
                "_validate_indices": [
                    "self",
                    "key"
                ],
                "_asindices": [
                    "self",
                    "idx",
                    "length"
                ],
                "getrow": [
                    "self",
                    "i"
                ],
                "getcol": [
                    "self",
                    "i"
                ],
                "_get_intXint": [
                    "self",
                    "row",
                    "col"
                ],
                "_get_intXarray": [
                    "self",
                    "row",
                    "col"
                ],
                "_get_intXslice": [
                    "self",
                    "row",
                    "col"
                ],
                "_get_sliceXint": [
                    "self",
                    "row",
                    "col"
                ],
                "_get_sliceXslice": [
                    "self",
                    "row",
                    "col"
                ],
                "_get_sliceXarray": [
                    "self",
                    "row",
                    "col"
                ],
                "_get_arrayXint": [
                    "self",
                    "row",
                    "col"
                ],
                "_get_arrayXslice": [
                    "self",
                    "row",
                    "col"
                ],
                "_get_columnXarray": [
                    "self",
                    "row",
                    "col"
                ],
                "_get_arrayXarray": [
                    "self",
                    "row",
                    "col"
                ],
                "_set_intXint": [
                    "self",
                    "row",
                    "col",
                    "x"
                ],
                "_set_arrayXarray": [
                    "self",
                    "row",
                    "col",
                    "x"
                ],
                "_set_arrayXarray_sparse": [
                    "self",
                    "row",
                    "col",
                    "x"
                ]
            }
        },
        "scipy.sparse.spfuncs": {
            "extract_diagonal": [
                "A"
            ],
            "estimate_blocksize": [
                "A",
                "efficiency"
            ],
            "count_blocks": [
                "A",
                "blocksize"
            ]
        },
        "scipy.sparse.setup": {
            "configuration": [
                "parent_package",
                "top_path"
            ]
        },
        "scipy.sparse.sputils": {
            "upcast": [],
            "upcast_char": [],
            "upcast_scalar": [
                "dtype",
                "scalar"
            ],
            "downcast_intp_index": [
                "arr"
            ],
            "to_native": [
                "A"
            ],
            "getdtype": [
                "dtype",
                "a",
                "default"
            ],
            "getdata": [
                "obj",
                "dtype",
                "copy"
            ],
            "get_index_dtype": [
                "arrays",
                "maxval",
                "check_contents"
            ],
            "get_sum_dtype": [
                "dtype"
            ],
            "isscalarlike": [
                "x"
            ],
            "isintlike": [
                "x"
            ],
            "isshape": [
                "x",
                "nonneg"
            ],
            "issequence": [
                "t"
            ],
            "ismatrix": [
                "t"
            ],
            "isdense": [
                "x"
            ],
            "validateaxis": [
                "axis"
            ],
            "check_shape": [
                "args",
                "current_shape"
            ],
            "check_reshape_kwargs": [
                "kwargs"
            ],
            "is_pydata_spmatrix": [
                "m"
            ],
            "matrix": [],
            "asmatrix": [
                "data",
                "dtype"
            ]
        },
        "scipy.sparse": {},
        "scipy.sparse.dok": {
            "isspmatrix_dok": [
                "x"
            ],
            "dok_matrix": {
                "__init__": [
                    "self",
                    "arg1",
                    "shape",
                    "dtype",
                    "copy"
                ],
                "update": [
                    "self",
                    "val"
                ],
                "_update": [
                    "self",
                    "data"
                ],
                "set_shape": [
                    "self",
                    "shape"
                ],
                "getnnz": [
                    "self",
                    "axis"
                ],
                "count_nonzero": [
                    "self"
                ],
                "__len__": [
                    "self"
                ],
                "get": [
                    "self",
                    "key",
                    "default"
                ],
                "_get_intXint": [
                    "self",
                    "row",
                    "col"
                ],
                "_get_intXslice": [
                    "self",
                    "row",
                    "col"
                ],
                "_get_sliceXint": [
                    "self",
                    "row",
                    "col"
                ],
                "_get_sliceXslice": [
                    "self",
                    "row",
                    "col"
                ],
                "_get_intXarray": [
                    "self",
                    "row",
                    "col"
                ],
                "_get_arrayXint": [
                    "self",
                    "row",
                    "col"
                ],
                "_get_sliceXarray": [
                    "self",
                    "row",
                    "col"
                ],
                "_get_arrayXslice": [
                    "self",
                    "row",
                    "col"
                ],
                "_get_columnXarray": [
                    "self",
                    "row",
                    "col"
                ],
                "_get_arrayXarray": [
                    "self",
                    "row",
                    "col"
                ],
                "_set_intXint": [
                    "self",
                    "row",
                    "col",
                    "x"
                ],
                "_set_arrayXarray": [
                    "self",
                    "row",
                    "col",
                    "x"
                ],
                "__add__": [
                    "self",
                    "other"
                ],
                "__radd__": [
                    "self",
                    "other"
                ],
                "__neg__": [
                    "self"
                ],
                "_mul_scalar": [
                    "self",
                    "other"
                ],
                "_mul_vector": [
                    "self",
                    "other"
                ],
                "_mul_multivector": [
                    "self",
                    "other"
                ],
                "__imul__": [
                    "self",
                    "other"
                ],
                "__truediv__": [
                    "self",
                    "other"
                ],
                "__itruediv__": [
                    "self",
                    "other"
                ],
                "__reduce__": [
                    "self"
                ],
                "transpose": [
                    "self",
                    "axes",
                    "copy"
                ],
                "conjtransp": [
                    "self"
                ],
                "copy": [
                    "self"
                ],
                "tocoo": [
                    "self",
                    "copy"
                ],
                "todok": [
                    "self",
                    "copy"
                ],
                "tocsc": [
                    "self",
                    "copy"
                ],
                "resize": [
                    "self"
                ]
            }
        },
        "scipy.sparse.csr": {
            "isspmatrix_csr": [
                "x"
            ],
            "csr_matrix": {
                "transpose": [
                    "self",
                    "axes",
                    "copy"
                ],
                "tolil": [
                    "self",
                    "copy"
                ],
                "tocsr": [
                    "self",
                    "copy"
                ],
                "tocsc": [
                    "self",
                    "copy"
                ],
                "tobsr": [
                    "self",
                    "blocksize",
                    "copy"
                ],
                "_swap": [
                    "self",
                    "x"
                ],
                "__iter__": [
                    "self"
                ],
                "getrow": [
                    "self",
                    "i"
                ],
                "getcol": [
                    "self",
                    "i"
                ],
                "_get_intXarray": [
                    "self",
                    "row",
                    "col"
                ],
                "_get_intXslice": [
                    "self",
                    "row",
                    "col"
                ],
                "_get_sliceXint": [
                    "self",
                    "row",
                    "col"
                ],
                "_get_sliceXarray": [
                    "self",
                    "row",
                    "col"
                ],
                "_get_arrayXint": [
                    "self",
                    "row",
                    "col"
                ],
                "_get_arrayXslice": [
                    "self",
                    "row",
                    "col"
                ]
            }
        },
        "scipy.sparse.extract": {
            "find": [
                "A"
            ],
            "tril": [
                "A",
                "k",
                "format"
            ],
            "triu": [
                "A",
                "k",
                "format"
            ],
            "_masked_coo": [
                "A",
                "mask"
            ]
        },
        "scipy.sparse.construct": {
            "spdiags": [
                "data",
                "diags",
                "m",
                "n",
                "format"
            ],
            "diags": [
                "diagonals",
                "offsets",
                "shape",
                "format",
                "dtype"
            ],
            "identity": [
                "n",
                "dtype",
                "format"
            ],
            "eye": [
                "m",
                "n",
                "k",
                "dtype",
                "format"
            ],
            "kron": [
                "A",
                "B",
                "format"
            ],
            "kronsum": [
                "A",
                "B",
                "format"
            ],
            "_compressed_sparse_stack": [
                "blocks",
                "axis"
            ],
            "hstack": [
                "blocks",
                "format",
                "dtype"
            ],
            "vstack": [
                "blocks",
                "format",
                "dtype"
            ],
            "bmat": [
                "blocks",
                "format",
                "dtype"
            ],
            "block_diag": [
                "mats",
                "format",
                "dtype"
            ],
            "random": [
                "m",
                "n",
                "density",
                "format",
                "dtype",
                "random_state",
                "data_rvs"
            ],
            "rand": [
                "m",
                "n",
                "density",
                "format",
                "dtype",
                "random_state"
            ]
        },
        "scipy.sparse.coo": {
            "isspmatrix_coo": [
                "x"
            ],
            "coo_matrix": {
                "__init__": [
                    "self",
                    "arg1",
                    "shape",
                    "dtype",
                    "copy"
                ],
                "reshape": [
                    "self"
                ],
                "getnnz": [
                    "self",
                    "axis"
                ],
                "_check": [
                    "self"
                ],
                "transpose": [
                    "self",
                    "axes",
                    "copy"
                ],
                "resize": [
                    "self"
                ],
                "toarray": [
                    "self",
                    "order",
                    "out"
                ],
                "tocsc": [
                    "self",
                    "copy"
                ],
                "tocsr": [
                    "self",
                    "copy"
                ],
                "tocoo": [
                    "self",
                    "copy"
                ],
                "todia": [
                    "self",
                    "copy"
                ],
                "todok": [
                    "self",
                    "copy"
                ],
                "diagonal": [
                    "self",
                    "k"
                ],
                "_setdiag": [
                    "self",
                    "values",
                    "k"
                ],
                "_with_data": [
                    "self",
                    "data",
                    "copy"
                ],
                "sum_duplicates": [
                    "self"
                ],
                "_sum_duplicates": [
                    "self",
                    "row",
                    "col",
                    "data"
                ],
                "eliminate_zeros": [
                    "self"
                ],
                "_add_dense": [
                    "self",
                    "other"
                ],
                "_mul_vector": [
                    "self",
                    "other"
                ],
                "_mul_multivector": [
                    "self",
                    "other"
                ]
            }
        },
        "scipy.sparse.base": {
            "isspmatrix": [
                "x"
            ],
            "SparseWarning": {},
            "SparseFormatWarning": {},
            "SparseEfficiencyWarning": {},
            "spmatrix": {
                "__init__": [
                    "self",
                    "maxprint"
                ],
                "set_shape": [
                    "self",
                    "shape"
                ],
                "get_shape": [
                    "self"
                ],
                "reshape": [
                    "self"
                ],
                "resize": [
                    "self",
                    "shape"
                ],
                "astype": [
                    "self",
                    "dtype",
                    "casting",
                    "copy"
                ],
                "asfptype": [
                    "self"
                ],
                "__iter__": [
                    "self"
                ],
                "getmaxprint": [
                    "self"
                ],
                "count_nonzero": [
                    "self"
                ],
                "getnnz": [
                    "self",
                    "axis"
                ],
                "nnz": [
                    "self"
                ],
                "getformat": [
                    "self"
                ],
                "__repr__": [
                    "self"
                ],
                "__str__": [
                    "self"
                ],
                "__bool__": [
                    "self"
                ],
                "__len__": [
                    "self"
                ],
                "asformat": [
                    "self",
                    "format",
                    "copy"
                ],
                "multiply": [
                    "self",
                    "other"
                ],
                "maximum": [
                    "self",
                    "other"
                ],
                "minimum": [
                    "self",
                    "other"
                ],
                "dot": [
                    "self",
                    "other"
                ],
                "power": [
                    "self",
                    "n",
                    "dtype"
                ],
                "__eq__": [
                    "self",
                    "other"
                ],
                "__ne__": [
                    "self",
                    "other"
                ],
                "__lt__": [
                    "self",
                    "other"
                ],
                "__gt__": [
                    "self",
                    "other"
                ],
                "__le__": [
                    "self",
                    "other"
                ],
                "__ge__": [
                    "self",
                    "other"
                ],
                "__abs__": [
                    "self"
                ],
                "__round__": [
                    "self",
                    "ndigits"
                ],
                "_add_sparse": [
                    "self",
                    "other"
                ],
                "_add_dense": [
                    "self",
                    "other"
                ],
                "_sub_sparse": [
                    "self",
                    "other"
                ],
                "_sub_dense": [
                    "self",
                    "other"
                ],
                "_rsub_dense": [
                    "self",
                    "other"
                ],
                "__add__": [
                    "self",
                    "other"
                ],
                "__radd__": [
                    "self",
                    "other"
                ],
                "__sub__": [
                    "self",
                    "other"
                ],
                "__rsub__": [
                    "self",
                    "other"
                ],
                "__mul__": [
                    "self",
                    "other"
                ],
                "_mul_scalar": [
                    "self",
                    "other"
                ],
                "_mul_vector": [
                    "self",
                    "other"
                ],
                "_mul_multivector": [
                    "self",
                    "other"
                ],
                "_mul_sparse_matrix": [
                    "self",
                    "other"
                ],
                "__rmul__": [
                    "self",
                    "other"
                ],
                "__matmul__": [
                    "self",
                    "other"
                ],
                "__rmatmul__": [
                    "self",
                    "other"
                ],
                "_divide": [
                    "self",
                    "other",
                    "true_divide",
                    "rdivide"
                ],
                "__truediv__": [
                    "self",
                    "other"
                ],
                "__div__": [
                    "self",
                    "other"
                ],
                "__rtruediv__": [
                    "self",
                    "other"
                ],
                "__rdiv__": [
                    "self",
                    "other"
                ],
                "__neg__": [
                    "self"
                ],
                "__iadd__": [
                    "self",
                    "other"
                ],
                "__isub__": [
                    "self",
                    "other"
                ],
                "__imul__": [
                    "self",
                    "other"
                ],
                "__idiv__": [
                    "self",
                    "other"
                ],
                "__itruediv__": [
                    "self",
                    "other"
                ],
                "__pow__": [
                    "self",
                    "other"
                ],
                "__getattr__": [
                    "self",
                    "attr"
                ],
                "transpose": [
                    "self",
                    "axes",
                    "copy"
                ],
                "conj": [
                    "self",
                    "copy"
                ],
                "conjugate": [
                    "self",
                    "copy"
                ],
                "getH": [
                    "self"
                ],
                "_real": [
                    "self"
                ],
                "_imag": [
                    "self"
                ],
                "nonzero": [
                    "self"
                ],
                "getcol": [
                    "self",
                    "j"
                ],
                "getrow": [
                    "self",
                    "i"
                ],
                "todense": [
                    "self",
                    "order",
                    "out"
                ],
                "toarray": [
                    "self",
                    "order",
                    "out"
                ],
                "tocsr": [
                    "self",
                    "copy"
                ],
                "todok": [
                    "self",
                    "copy"
                ],
                "tocoo": [
                    "self",
                    "copy"
                ],
                "tolil": [
                    "self",
                    "copy"
                ],
                "todia": [
                    "self",
                    "copy"
                ],
                "tobsr": [
                    "self",
                    "blocksize",
                    "copy"
                ],
                "tocsc": [
                    "self",
                    "copy"
                ],
                "copy": [
                    "self"
                ],
                "sum": [
                    "self",
                    "axis",
                    "dtype",
                    "out"
                ],
                "mean": [
                    "self",
                    "axis",
                    "dtype",
                    "out"
                ],
                "diagonal": [
                    "self",
                    "k"
                ],
                "setdiag": [
                    "self",
                    "values",
                    "k"
                ],
                "_setdiag": [
                    "self",
                    "values",
                    "k"
                ],
                "_process_toarray_args": [
                    "self",
                    "order",
                    "out"
                ]
            }
        },
        "scipy.sparse.compressed": {
            "_process_slice": [
                "sl",
                "num"
            ],
            "_cs_matrix": {
                "__init__": [
                    "self",
                    "arg1",
                    "shape",
                    "dtype",
                    "copy"
                ],
                "getnnz": [
                    "self",
                    "axis"
                ],
                "_set_self": [
                    "self",
                    "other",
                    "copy"
                ],
                "check_format": [
                    "self",
                    "full_check"
                ],
                "_scalar_binopt": [
                    "self",
                    "other",
                    "op"
                ],
                "__eq__": [
                    "self",
                    "other"
                ],
                "__ne__": [
                    "self",
                    "other"
                ],
                "_inequality": [
                    "self",
                    "other",
                    "op",
                    "op_name",
                    "bad_scalar_msg"
                ],
                "__lt__": [
                    "self",
                    "other"
                ],
                "__gt__": [
                    "self",
                    "other"
                ],
                "__le__": [
                    "self",
                    "other"
                ],
                "__ge__": [
                    "self",
                    "other"
                ],
                "_add_dense": [
                    "self",
                    "other"
                ],
                "_add_sparse": [
                    "self",
                    "other"
                ],
                "_sub_sparse": [
                    "self",
                    "other"
                ],
                "multiply": [
                    "self",
                    "other"
                ],
                "_mul_vector": [
                    "self",
                    "other"
                ],
                "_mul_multivector": [
                    "self",
                    "other"
                ],
                "_mul_sparse_matrix": [
                    "self",
                    "other"
                ],
                "diagonal": [
                    "self",
                    "k"
                ],
                "_maximum_minimum": [
                    "self",
                    "other",
                    "npop",
                    "op_name",
                    "dense_check"
                ],
                "maximum": [
                    "self",
                    "other"
                ],
                "minimum": [
                    "self",
                    "other"
                ],
                "sum": [
                    "self",
                    "axis",
                    "dtype",
                    "out"
                ],
                "_minor_reduce": [
                    "self",
                    "ufunc",
                    "data"
                ],
                "_get_intXint": [
                    "self",
                    "row",
                    "col"
                ],
                "_get_sliceXslice": [
                    "self",
                    "row",
                    "col"
                ],
                "_get_arrayXarray": [
                    "self",
                    "row",
                    "col"
                ],
                "_get_columnXarray": [
                    "self",
                    "row",
                    "col"
                ],
                "_major_index_fancy": [
                    "self",
                    "idx"
                ],
                "_major_slice": [
                    "self",
                    "idx",
                    "copy"
                ],
                "_minor_index_fancy": [
                    "self",
                    "idx"
                ],
                "_minor_slice": [
                    "self",
                    "idx",
                    "copy"
                ],
                "_get_submatrix": [
                    "self",
                    "major",
                    "minor",
                    "copy"
                ],
                "_set_intXint": [
                    "self",
                    "row",
                    "col",
                    "x"
                ],
                "_set_arrayXarray": [
                    "self",
                    "row",
                    "col",
                    "x"
                ],
                "_set_arrayXarray_sparse": [
                    "self",
                    "row",
                    "col",
                    "x"
                ],
                "_setdiag": [
                    "self",
                    "values",
                    "k"
                ],
                "_prepare_indices": [
                    "self",
                    "i",
                    "j"
                ],
                "_set_many": [
                    "self",
                    "i",
                    "j",
                    "x"
                ],
                "_zero_many": [
                    "self",
                    "i",
                    "j"
                ],
                "_insert_many": [
                    "self",
                    "i",
                    "j",
                    "x"
                ],
                "tocoo": [
                    "self",
                    "copy"
                ],
                "toarray": [
                    "self",
                    "order",
                    "out"
                ],
                "eliminate_zeros": [
                    "self"
                ],
                "__get_has_canonical_format": [
                    "self"
                ],
                "__set_has_canonical_format": [
                    "self",
                    "val"
                ],
                "sum_duplicates": [
                    "self"
                ],
                "__get_sorted": [
                    "self"
                ],
                "__set_sorted": [
                    "self",
                    "val"
                ],
                "sorted_indices": [
                    "self"
                ],
                "sort_indices": [
                    "self"
                ],
                "prune": [
                    "self"
                ],
                "resize": [
                    "self"
                ],
                "_with_data": [
                    "self",
                    "data",
                    "copy"
                ],
                "_binopt": [
                    "self",
                    "other",
                    "op"
                ],
                "_divide_sparse": [
                    "self",
                    "other"
                ]
            }
        },
        "scipy.sparse.bsr": {
            "isspmatrix_bsr": [
                "x"
            ],
            "bsr_matrix": {
                "__init__": [
                    "self",
                    "arg1",
                    "shape",
                    "dtype",
                    "copy",
                    "blocksize"
                ],
                "check_format": [
                    "self",
                    "full_check"
                ],
                "_get_blocksize": [
                    "self"
                ],
                "getnnz": [
                    "self",
                    "axis"
                ],
                "__repr__": [
                    "self"
                ],
                "diagonal": [
                    "self",
                    "k"
                ],
                "__getitem__": [
                    "self",
                    "key"
                ],
                "__setitem__": [
                    "self",
                    "key",
                    "val"
                ],
                "matvec": [
                    "self",
                    "other"
                ],
                "matmat": [
                    "self",
                    "other"
                ],
                "_add_dense": [
                    "self",
                    "other"
                ],
                "_mul_vector": [
                    "self",
                    "other"
                ],
                "_mul_multivector": [
                    "self",
                    "other"
                ],
                "_mul_sparse_matrix": [
                    "self",
                    "other"
                ],
                "tobsr": [
                    "self",
                    "blocksize",
                    "copy"
                ],
                "tocsr": [
                    "self",
                    "copy"
                ],
                "tocsc": [
                    "self",
                    "copy"
                ],
                "tocoo": [
                    "self",
                    "copy"
                ],
                "toarray": [
                    "self",
                    "order",
                    "out"
                ],
                "transpose": [
                    "self",
                    "axes",
                    "copy"
                ],
                "eliminate_zeros": [
                    "self"
                ],
                "sum_duplicates": [
                    "self"
                ],
                "sort_indices": [
                    "self"
                ],
                "prune": [
                    "self"
                ],
                "_binopt": [
                    "self",
                    "other",
                    "op",
                    "in_shape",
                    "out_shape"
                ],
                "_with_data": [
                    "self",
                    "data",
                    "copy"
                ]
            }
        },
        "scipy.sparse.dia": {
            "isspmatrix_dia": [
                "x"
            ],
            "dia_matrix": {
                "__init__": [
                    "self",
                    "arg1",
                    "shape",
                    "dtype",
                    "copy"
                ],
                "__repr__": [
                    "self"
                ],
                "_data_mask": [
                    "self"
                ],
                "count_nonzero": [
                    "self"
                ],
                "getnnz": [
                    "self",
                    "axis"
                ],
                "sum": [
                    "self",
                    "axis",
                    "dtype",
                    "out"
                ],
                "_mul_vector": [
                    "self",
                    "other"
                ],
                "_mul_multimatrix": [
                    "self",
                    "other"
                ],
                "_setdiag": [
                    "self",
                    "values",
                    "k"
                ],
                "todia": [
                    "self",
                    "copy"
                ],
                "transpose": [
                    "self",
                    "axes",
                    "copy"
                ],
                "diagonal": [
                    "self",
                    "k"
                ],
                "tocsc": [
                    "self",
                    "copy"
                ],
                "tocoo": [
                    "self",
                    "copy"
                ],
                "_with_data": [
                    "self",
                    "data",
                    "copy"
                ],
                "resize": [
                    "self"
                ]
            }
        },
        "scipy.sparse.lil": {
            "_prepare_index_for_memoryview": [
                "i",
                "j",
                "x"
            ],
            "isspmatrix_lil": [
                "x"
            ],
            "lil_matrix": {
                "__init__": [
                    "self",
                    "arg1",
                    "shape",
                    "dtype",
                    "copy"
                ],
                "__iadd__": [
                    "self",
                    "other"
                ],
                "__isub__": [
                    "self",
                    "other"
                ],
                "__imul__": [
                    "self",
                    "other"
                ],
                "__itruediv__": [
                    "self",
                    "other"
                ],
                "getnnz": [
                    "self",
                    "axis"
                ],
                "count_nonzero": [
                    "self"
                ],
                "__str__": [
                    "self"
                ],
                "getrowview": [
                    "self",
                    "i"
                ],
                "getrow": [
                    "self",
                    "i"
                ],
                "__getitem__": [
                    "self",
                    "key"
                ],
                "_asindices": [
                    "self",
                    "idx",
                    "N"
                ],
                "_get_intXint": [
                    "self",
                    "row",
                    "col"
                ],
                "_get_sliceXint": [
                    "self",
                    "row",
                    "col"
                ],
                "_get_arrayXint": [
                    "self",
                    "row",
                    "col"
                ],
                "_get_intXslice": [
                    "self",
                    "row",
                    "col"
                ],
                "_get_sliceXslice": [
                    "self",
                    "row",
                    "col"
                ],
                "_get_arrayXslice": [
                    "self",
                    "row",
                    "col"
                ],
                "_get_intXarray": [
                    "self",
                    "row",
                    "col"
                ],
                "_get_sliceXarray": [
                    "self",
                    "row",
                    "col"
                ],
                "_get_columnXarray": [
                    "self",
                    "row",
                    "col"
                ],
                "_get_arrayXarray": [
                    "self",
                    "row",
                    "col"
                ],
                "_get_row_ranges": [
                    "self",
                    "rows",
                    "col_slice"
                ],
                "_set_intXint": [
                    "self",
                    "row",
                    "col",
                    "x"
                ],
                "_set_arrayXarray": [
                    "self",
                    "row",
                    "col",
                    "x"
                ],
                "_set_arrayXarray_sparse": [
                    "self",
                    "row",
                    "col",
                    "x"
                ],
                "__setitem__": [
                    "self",
                    "key",
                    "x"
                ],
                "_mul_scalar": [
                    "self",
                    "other"
                ],
                "__truediv__": [
                    "self",
                    "other"
                ],
                "copy": [
                    "self"
                ],
                "reshape": [
                    "self"
                ],
                "resize": [
                    "self"
                ],
                "toarray": [
                    "self",
                    "order",
                    "out"
                ],
                "transpose": [
                    "self",
                    "axes",
                    "copy"
                ],
                "tolil": [
                    "self",
                    "copy"
                ],
                "tocsr": [
                    "self",
                    "copy"
                ]
            }
        },
        "scipy.sparse.generate_sparsetools": {
            "get_thunk_type_set": [],
            "parse_routine": [
                "name",
                "args",
                "types"
            ],
            "main": [],
            "write_autogen_blurb": [
                "stream"
            ]
        },
        "scipy.sparse._matrix_io": {
            "save_npz": [
                "file",
                "matrix",
                "compressed"
            ],
            "load_npz": [
                "file"
            ]
        },
        "scipy.sparse.data": {
            "_find_missing_index": [
                "ind",
                "n"
            ],
            "_data_matrix": {
                "__init__": [
                    "self"
                ],
                "_get_dtype": [
                    "self"
                ],
                "_set_dtype": [
                    "self",
                    "newtype"
                ],
                "_deduped_data": [
                    "self"
                ],
                "__abs__": [
                    "self"
                ],
                "__round__": [
                    "self",
                    "ndigits"
                ],
                "_real": [
                    "self"
                ],
                "_imag": [
                    "self"
                ],
                "__neg__": [
                    "self"
                ],
                "__imul__": [
                    "self",
                    "other"
                ],
                "__itruediv__": [
                    "self",
                    "other"
                ],
                "astype": [
                    "self",
                    "dtype",
                    "casting",
                    "copy"
                ],
                "conj": [
                    "self",
                    "copy"
                ],
                "copy": [
                    "self"
                ],
                "count_nonzero": [
                    "self"
                ],
                "power": [
                    "self",
                    "n",
                    "dtype"
                ],
                "_mul_scalar": [
                    "self",
                    "other"
                ]
            },
            "_minmax_mixin": {
                "_min_or_max_axis": [
                    "self",
                    "axis",
                    "min_or_max"
                ],
                "_min_or_max": [
                    "self",
                    "axis",
                    "out",
                    "min_or_max"
                ],
                "_arg_min_or_max_axis": [
                    "self",
                    "axis",
                    "op",
                    "compare"
                ],
                "_arg_min_or_max": [
                    "self",
                    "axis",
                    "out",
                    "op",
                    "compare"
                ],
                "max": [
                    "self",
                    "axis",
                    "out"
                ],
                "min": [
                    "self",
                    "axis",
                    "out"
                ],
                "argmax": [
                    "self",
                    "axis",
                    "out"
                ],
                "argmin": [
                    "self",
                    "axis",
                    "out"
                ]
            }
        },
        "scipy.sparse.tests.test_csc": {
            "test_csc_getrow": [],
            "test_csc_getcol": [],
            "test_csc_empty_slices": [
                "matrix_input",
                "axis",
                "expected_shape"
            ]
        },
        "scipy.sparse.tests": {},
        "scipy.sparse.tests.test_matrix_io": {
            "_save_and_load": [
                "matrix"
            ],
            "_check_save_and_load": [
                "dense_matrix"
            ],
            "test_save_and_load_random": [],
            "test_save_and_load_empty": [],
            "test_save_and_load_one_entry": [],
            "test_malicious_load": [],
            "test_py23_compatibility": [],
            "test_implemented_error": []
        },
        "scipy.sparse.tests.test_csr": {
            "_check_csr_rowslice": [
                "i",
                "sl",
                "X",
                "Xcsr"
            ],
            "test_csr_rowslice": [],
            "test_csr_getrow": [],
            "test_csr_getcol": [],
            "test_csr_empty_slices": [
                "matrix_input",
                "axis",
                "expected_shape"
            ],
            "test_csr_bool_indexing": []
        },
        "scipy.sparse.tests.test_sputils": {
            "TestSparseUtils": {
                "test_upcast": [
                    "self"
                ],
                "test_getdtype": [
                    "self"
                ],
                "test_isscalarlike": [
                    "self"
                ],
                "test_isintlike": [
                    "self"
                ],
                "test_isshape": [
                    "self"
                ],
                "test_issequence": [
                    "self"
                ],
                "test_ismatrix": [
                    "self"
                ],
                "test_isdense": [
                    "self"
                ],
                "test_validateaxis": [
                    "self"
                ],
                "test_get_index_dtype": [
                    "self"
                ],
                "test_check_shape_overflow": [
                    "self"
                ],
                "test_matrix": [
                    "self"
                ],
                "test_asmatrix": [
                    "self"
                ]
            }
        },
        "scipy.sparse.tests.test_construct": {
            "_sprandn": [
                "m",
                "n",
                "density",
                "format",
                "dtype",
                "random_state"
            ],
            "TestConstructUtils": {
                "test_spdiags": [
                    "self"
                ],
                "test_diags": [
                    "self"
                ],
                "test_diags_default": [
                    "self"
                ],
                "test_diags_default_bad": [
                    "self"
                ],
                "test_diags_bad": [
                    "self"
                ],
                "test_diags_vs_diag": [
                    "self"
                ],
                "test_diags_dtype": [
                    "self"
                ],
                "test_diags_one_diagonal": [
                    "self"
                ],
                "test_diags_empty": [
                    "self"
                ],
                "test_identity": [
                    "self"
                ],
                "test_eye": [
                    "self"
                ],
                "test_eye_one": [
                    "self"
                ],
                "test_kron": [
                    "self"
                ],
                "test_kron_large": [
                    "self"
                ],
                "test_kronsum": [
                    "self"
                ],
                "test_vstack": [
                    "self"
                ],
                "test_hstack": [
                    "self"
                ],
                "test_bmat": [
                    "self"
                ],
                "test_concatenate_int32_overflow": [
                    "self"
                ],
                "test_block_diag_basic": [
                    "self"
                ],
                "test_block_diag_scalar_1d_args": [
                    "self"
                ],
                "test_block_diag_1": [
                    "self"
                ],
                "test_block_diag_sparse_matrices": [
                    "self"
                ],
                "test_random_sampling": [
                    "self"
                ],
                "test_rand": [
                    "self"
                ],
                "test_randn": [
                    "self"
                ],
                "test_random_accept_str_dtype": [
                    "self"
                ],
                "test_random_sparse_matrix_returns_correct_number_of_non_zero_elements": [
                    "self"
                ]
            }
        },
        "scipy.sparse.tests.test_spfuncs": {
            "TestSparseFunctions": {
                "test_scale_rows_and_cols": [
                    "self"
                ],
                "test_estimate_blocksize": [
                    "self"
                ],
                "test_count_blocks": [
                    "self"
                ]
            }
        },
        "scipy.sparse.tests.test_sparsetools": {
            "test_exception": [],
            "test_threads": [],
            "test_regression_std_vector_dtypes": [],
            "test_nnz_overflow": [],
            "test_csr_matmat_int64_overflow": [],
            "test_upcast": [],
            "test_endianness": [],
            "TestInt32Overflow": {
                "setup_method": [
                    "self"
                ],
                "teardown_method": [
                    "self"
                ],
                "test_coo_todense": [
                    "self"
                ],
                "test_matvecs": [
                    "self"
                ],
                "test_dia_matvec": [
                    "self"
                ],
                "test_bsr_1_block": [
                    "self",
                    "op"
                ],
                "test_bsr_n_block": [
                    "self",
                    "op"
                ],
                "_check_bsr_matvecs": [
                    "self",
                    "m"
                ],
                "_check_bsr_matvec": [
                    "self",
                    "m"
                ],
                "_check_bsr_diagonal": [
                    "self",
                    "m"
                ],
                "_check_bsr_sort_indices": [
                    "self",
                    "m"
                ],
                "_check_bsr_transpose": [
                    "self",
                    "m"
                ],
                "_check_bsr_matmat": [
                    "self",
                    "m"
                ]
            }
        },
        "scipy.sparse.tests.test_extract": {
            "TestExtract": {
                "setup_method": [
                    "self"
                ],
                "find": [
                    "self"
                ],
                "test_tril": [
                    "self"
                ],
                "test_triu": [
                    "self"
                ]
            }
        },
        "scipy.sparse.tests.test_base": {
            "assert_in": [
                "member",
                "collection",
                "msg"
            ],
            "assert_array_equal_dtype": [
                "x",
                "y"
            ],
            "sparse_may_share_memory": [
                "A",
                "B"
            ],
            "with_64bit_maxval_limit": [
                "maxval_limit",
                "random",
                "fixed_dtype",
                "downcast_maxval",
                "assert_32bit"
            ],
            "todense": [
                "a"
            ],
            "check_remains_sorted": [
                "X"
            ],
            "_possibly_unimplemented": [
                "cls",
                "require"
            ],
            "sparse_test_class": [
                "getset",
                "slicing",
                "slicing_assign",
                "fancy_indexing",
                "fancy_assign",
                "fancy_multidim_indexing",
                "fancy_multidim_assign",
                "minmax",
                "nnz_axis"
            ],
            "_same_sum_duplicate": [
                "data"
            ],
            "cases_64bit": [],
            "BinopTester": {
                "__add__": [
                    "self",
                    "mat"
                ],
                "__mul__": [
                    "self",
                    "mat"
                ],
                "__sub__": [
                    "self",
                    "mat"
                ],
                "__radd__": [
                    "self",
                    "mat"
                ],
                "__rmul__": [
                    "self",
                    "mat"
                ],
                "__rsub__": [
                    "self",
                    "mat"
                ],
                "__matmul__": [
                    "self",
                    "mat"
                ],
                "__rmatmul__": [
                    "self",
                    "mat"
                ]
            },
            "BinopTester_with_shape": {
                "__init__": [
                    "self",
                    "shape"
                ],
                "shape": [
                    "self"
                ],
                "ndim": [
                    "self"
                ],
                "__add__": [
                    "self",
                    "mat"
                ],
                "__mul__": [
                    "self",
                    "mat"
                ],
                "__sub__": [
                    "self",
                    "mat"
                ],
                "__radd__": [
                    "self",
                    "mat"
                ],
                "__rmul__": [
                    "self",
                    "mat"
                ],
                "__rsub__": [
                    "self",
                    "mat"
                ],
                "__matmul__": [
                    "self",
                    "mat"
                ],
                "__rmatmul__": [
                    "self",
                    "mat"
                ]
            },
            "_TestCommon": {
                "init_class": [
                    "cls"
                ],
                "test_bool": [
                    "self"
                ],
                "test_bool_rollover": [
                    "self"
                ],
                "test_eq": [
                    "self"
                ],
                "test_ne": [
                    "self"
                ],
                "test_lt": [
                    "self"
                ],
                "test_gt": [
                    "self"
                ],
                "test_le": [
                    "self"
                ],
                "test_ge": [
                    "self"
                ],
                "test_empty": [
                    "self"
                ],
                "test_count_nonzero": [
                    "self"
                ],
                "test_invalid_shapes": [
                    "self"
                ],
                "test_repr": [
                    "self"
                ],
                "test_str": [
                    "self"
                ],
                "test_empty_arithmetic": [
                    "self"
                ],
                "test_abs": [
                    "self"
                ],
                "test_round": [
                    "self"
                ],
                "test_elementwise_power": [
                    "self"
                ],
                "test_neg": [
                    "self"
                ],
                "test_real": [
                    "self"
                ],
                "test_imag": [
                    "self"
                ],
                "test_diagonal": [
                    "self"
                ],
                "test_reshape": [
                    "self"
                ],
                "test_setdiag_comprehensive": [
                    "self"
                ],
                "test_setdiag": [
                    "self"
                ],
                "test_nonzero": [
                    "self"
                ],
                "test_numpy_nonzero": [
                    "self"
                ],
                "test_getrow": [
                    "self"
                ],
                "test_getcol": [
                    "self"
                ],
                "test_sum": [
                    "self"
                ],
                "test_sum_invalid_params": [
                    "self"
                ],
                "test_sum_dtype": [
                    "self"
                ],
                "test_sum_out": [
                    "self"
                ],
                "test_numpy_sum": [
                    "self"
                ],
                "test_mean": [
                    "self"
                ],
                "test_mean_invalid_params": [
                    "self"
                ],
                "test_mean_dtype": [
                    "self"
                ],
                "test_mean_out": [
                    "self"
                ],
                "test_numpy_mean": [
                    "self"
                ],
                "test_expm": [
                    "self"
                ],
                "test_inv": [
                    "self"
                ],
                "test_from_array": [
                    "self"
                ],
                "test_from_matrix": [
                    "self"
                ],
                "test_from_list": [
                    "self"
                ],
                "test_from_sparse": [
                    "self"
                ],
                "test_todense": [
                    "self"
                ],
                "test_toarray": [
                    "self"
                ],
                "test_astype": [
                    "self"
                ],
                "test_asfptype": [
                    "self"
                ],
                "test_mul_scalar": [
                    "self"
                ],
                "test_rmul_scalar": [
                    "self"
                ],
                "test_add": [
                    "self"
                ],
                "test_radd": [
                    "self"
                ],
                "test_sub": [
                    "self"
                ],
                "test_rsub": [
                    "self"
                ],
                "test_add0": [
                    "self"
                ],
                "test_elementwise_multiply": [
                    "self"
                ],
                "test_elementwise_multiply_broadcast": [
                    "self"
                ],
                "test_elementwise_divide": [
                    "self"
                ],
                "test_pow": [
                    "self"
                ],
                "test_rmatvec": [
                    "self"
                ],
                "test_small_multiplication": [
                    "self"
                ],
                "test_binop_custom_type": [
                    "self"
                ],
                "test_binop_custom_type_with_shape": [
                    "self"
                ],
                "test_matmul": [
                    "self"
                ],
                "test_matvec": [
                    "self"
                ],
                "test_matmat_sparse": [
                    "self"
                ],
                "test_matmat_dense": [
                    "self"
                ],
                "test_sparse_format_conversions": [
                    "self"
                ],
                "test_tobsr": [
                    "self"
                ],
                "test_transpose": [
                    "self"
                ],
                "test_add_dense": [
                    "self"
                ],
                "test_sub_dense": [
                    "self"
                ],
                "test_maximum_minimum": [
                    "self"
                ],
                "test_copy": [
                    "self"
                ],
                "test_iterator": [
                    "self"
                ],
                "test_size_zero_matrix_arithmetic": [
                    "self"
                ],
                "test_size_zero_conversions": [
                    "self"
                ],
                "test_pickle": [
                    "self"
                ],
                "test_unary_ufunc_overrides": [
                    "self"
                ],
                "test_resize": [
                    "self"
                ],
                "test_constructor1_base": [
                    "self"
                ]
            },
            "_TestInplaceArithmetic": {
                "test_inplace_dense": [
                    "self"
                ],
                "test_imul_scalar": [
                    "self"
                ],
                "test_idiv_scalar": [
                    "self"
                ],
                "test_inplace_success": [
                    "self"
                ]
            },
            "_TestGetSet": {
                "test_getelement": [
                    "self"
                ],
                "test_setelement": [
                    "self"
                ],
                "test_negative_index_assignment": [
                    "self"
                ],
                "test_scalar_assign_2": [
                    "self"
                ],
                "test_index_scalar_assign": [
                    "self"
                ]
            },
            "_TestSolve": {
                "test_solve": [
                    "self"
                ]
            },
            "_TestSlicing": {
                "test_dtype_preservation": [
                    "self"
                ],
                "test_get_horiz_slice": [
                    "self"
                ],
                "test_get_vert_slice": [
                    "self"
                ],
                "test_get_slices": [
                    "self"
                ],
                "test_non_unit_stride_2d_indexing": [
                    "self"
                ],
                "test_slicing_2": [
                    "self"
                ],
                "test_slicing_3": [
                    "self"
                ],
                "test_ellipsis_slicing": [
                    "self"
                ],
                "test_multiple_ellipsis_slicing": [
                    "self"
                ]
            },
            "_TestSlicingAssign": {
                "test_slice_scalar_assign": [
                    "self"
                ],
                "test_slice_assign_2": [
                    "self"
                ],
                "test_self_self_assignment": [
                    "self"
                ],
                "test_slice_assignment": [
                    "self"
                ],
                "test_sparsity_modifying_assignment": [
                    "self"
                ],
                "test_set_slice": [
                    "self"
                ],
                "test_assign_empty_spmatrix": [
                    "self"
                ],
                "test_assign_1d_slice": [
                    "self"
                ]
            },
            "_TestFancyIndexing": {
                "test_bad_index": [
                    "self"
                ],
                "test_fancy_indexing": [
                    "self"
                ],
                "test_fancy_indexing_randomized": [
                    "self"
                ],
                "test_fancy_indexing_boolean": [
                    "self"
                ],
                "test_fancy_indexing_sparse_boolean": [
                    "self"
                ],
                "test_fancy_indexing_regression_3087": [
                    "self"
                ],
                "test_fancy_indexing_seq_assign": [
                    "self"
                ],
                "test_fancy_indexing_2d_assign": [
                    "self"
                ],
                "test_fancy_indexing_empty": [
                    "self"
                ]
            },
            "_TestFancyIndexingAssign": {
                "test_bad_index_assign": [
                    "self"
                ],
                "test_fancy_indexing_set": [
                    "self"
                ],
                "test_fancy_assignment_dtypes": [
                    "self"
                ],
                "test_sequence_assignment": [
                    "self"
                ],
                "test_fancy_assign_empty": [
                    "self"
                ]
            },
            "_TestFancyMultidim": {
                "test_fancy_indexing_ndarray": [
                    "self"
                ]
            },
            "_TestFancyMultidimAssign": {
                "test_fancy_assign_ndarray": [
                    "self"
                ],
                "test_fancy_indexing_multidim_set": [
                    "self"
                ],
                "test_fancy_assign_list": [
                    "self"
                ],
                "test_fancy_assign_slice": [
                    "self"
                ]
            },
            "_TestArithmetic": {
                "__arith_init": [
                    "self"
                ],
                "test_add_sub": [
                    "self"
                ],
                "test_mu": [
                    "self"
                ]
            },
            "_TestMinMax": {
                "test_minmax": [
                    "self"
                ],
                "test_minmax_axis": [
                    "self"
                ],
                "test_minmax_invalid_params": [
                    "self"
                ],
                "test_numpy_minmax": [
                    "self"
                ],
                "test_argmax": [
                    "self"
                ]
            },
            "_TestGetNnzAxis": {
                "test_getnnz_axis": [
                    "self"
                ]
            },
            "TestCSR": {
                "spmatrix": [
                    "cls"
                ],
                "test_constructor1": [
                    "self"
                ],
                "test_constructor2": [
                    "self"
                ],
                "test_constructor3": [
                    "self"
                ],
                "test_constructor4": [
                    "self"
                ],
                "test_constructor5": [
                    "self"
                ],
                "test_constructor6": [
                    "self"
                ],
                "test_constructor_smallcol": [
                    "self"
                ],
                "test_constructor_largecol": [
                    "self"
                ],
                "test_sort_indices": [
                    "self"
                ],
                "test_eliminate_zeros": [
                    "self"
                ],
                "test_ufuncs": [
                    "self"
                ],
                "test_unsorted_arithmetic": [
                    "self"
                ],
                "test_fancy_indexing_broadcast": [
                    "self"
                ],
                "test_has_sorted_indices": [
                    "self"
                ],
                "test_has_canonical_format": [
                    "self"
                ],
                "test_scalar_idx_dtype": [
                    "self"
                ],
                "test_binop_explicit_zeros": [
                    "self"
                ]
            },
            "TestCSC": {
                "spmatrix": [
                    "cls"
                ],
                "test_constructor1": [
                    "self"
                ],
                "test_constructor2": [
                    "self"
                ],
                "test_constructor3": [
                    "self"
                ],
                "test_constructor4": [
                    "self"
                ],
                "test_constructor5": [
                    "self"
                ],
                "test_constructor6": [
                    "self"
                ],
                "test_eliminate_zeros": [
                    "self"
                ],
                "test_sort_indices": [
                    "self"
                ],
                "test_ufuncs": [
                    "self"
                ],
                "test_unsorted_arithmetic": [
                    "self"
                ],
                "test_fancy_indexing_broadcast": [
                    "self"
                ],
                "test_scalar_idx_dtype": [
                    "self"
                ]
            },
            "TestDOK": {
                "test_mult": [
                    "self"
                ],
                "test_add_nonzero": [
                    "self"
                ],
                "test_dok_divide_scalar": [
                    "self"
                ],
                "test_convert": [
                    "self"
                ],
                "test_ctor": [
                    "self"
                ],
                "test_ticket1160": [
                    "self"
                ]
            },
            "TestLIL": {
                "test_dot": [
                    "self"
                ],
                "test_scalar_mul": [
                    "self"
                ],
                "test_inplace_ops": [
                    "self"
                ],
                "test_lil_iteration": [
                    "self"
                ],
                "test_lil_from_csr": [
                    "self"
                ],
                "test_fancy_indexing_lil": [
                    "self"
                ],
                "test_point_wise_multiply": [
                    "self"
                ],
                "test_lil_multiply_removal": [
                    "self"
                ]
            },
            "TestCOO": {
                "test_constructor1": [
                    "self"
                ],
                "test_constructor2": [
                    "self"
                ],
                "test_constructor3": [
                    "self"
                ],
                "test_constructor4": [
                    "self"
                ],
                "test_constructor_data_ij_dtypeNone": [
                    "self"
                ],
                "test_iterator": [
                    "self"
                ],
                "test_todia_all_zeros": [
                    "self"
                ],
                "test_sum_duplicates": [
                    "self"
                ],
                "test_todok_duplicates": [
                    "self"
                ],
                "test_eliminate_zeros": [
                    "self"
                ],
                "test_reshape_copy": [
                    "self"
                ],
                "test_large_dimensions_reshape": [
                    "self"
                ]
            },
            "TestDIA": {
                "test_constructor1": [
                    "self"
                ],
                "test_iterator": [
                    "self"
                ],
                "test_setdiag_dtype": [
                    "self"
                ],
                "test_getnnz_axis": [
                    "self"
                ]
            },
            "TestBSR": {
                "test_constructor1": [
                    "self"
                ],
                "test_constructor2": [
                    "self"
                ],
                "test_constructor3": [
                    "self"
                ],
                "test_constructor4": [
                    "self"
                ],
                "test_default_dtype": [
                    "self"
                ],
                "test_bsr_tocsr": [
                    "self"
                ],
                "test_eliminate_zeros": [
                    "self"
                ],
                "test_eliminate_zeros_all_zero": [
                    "self"
                ],
                "test_bsr_matvec": [
                    "self"
                ],
                "test_bsr_matvecs": [
                    "self"
                ],
                "test_iterator": [
                    "self"
                ],
                "test_setdiag": [
                    "self"
                ],
                "test_resize_blocked": [
                    "self"
                ],
                "test_setdiag_comprehensive": [
                    "self"
                ],
                "test_scalar_idx_dtype": [
                    "self"
                ]
            },
            "_NonCanonicalMixin": {
                "spmatrix": [
                    "self",
                    "D",
                    "sorted_indices"
                ],
                "test_bool": [
                    "self"
                ],
                "test_getnnz_axis": [
                    "self"
                ],
                "test_empty": [
                    "self"
                ]
            },
            "_NonCanonicalCompressedMixin": {
                "_arg1_for_noncanonical": [
                    "self",
                    "M",
                    "sorted_indices"
                ],
                "_insert_explicit_zero": [
                    "self",
                    "M",
                    "i",
                    "j"
                ]
            },
            "_NonCanonicalCSMixin": {
                "test_getelement": [
                    "self"
                ],
                "test_setitem_sparse": [
                    "self"
                ],
                "test_inv": [
                    "self"
                ],
                "test_solve": [
                    "self"
                ]
            },
            "TestCSRNonCanonical": {},
            "TestCSCNonCanonical": {},
            "TestBSRNonCanonical": {
                "_insert_explicit_zero": [
                    "self",
                    "M",
                    "i",
                    "j"
                ],
                "test_diagonal": [
                    "self"
                ],
                "test_expm": [
                    "self"
                ]
            },
            "TestCOONonCanonical": {
                "_arg1_for_noncanonical": [
                    "self",
                    "M",
                    "sorted_indices"
                ],
                "_insert_explicit_zero": [
                    "self",
                    "M",
                    "i",
                    "j"
                ],
                "test_setdiag_noncanonical": [
                    "self"
                ]
            },
            "Test64Bit": {
                "_create_some_matrix": [
                    "self",
                    "mat_cls",
                    "m",
                    "n"
                ],
                "_compare_index_dtype": [
                    "self",
                    "m",
                    "dtype"
                ],
                "test_decorator_maxval_limit": [
                    "self"
                ],
                "test_decorator_maxval_random": [
                    "self"
                ],
                "_check_resiliency": [
                    "self",
                    "cls",
                    "method_name"
                ],
                "test_resiliency_limit_10": [
                    "self",
                    "cls",
                    "method_name"
                ],
                "test_resiliency_random": [
                    "self",
                    "cls",
                    "method_name"
                ],
                "test_resiliency_all_32": [
                    "self",
                    "cls",
                    "method_name"
                ],
                "test_resiliency_all_64": [
                    "self",
                    "cls",
                    "method_name"
                ],
                "test_no_64": [
                    "self",
                    "cls",
                    "method_name"
                ],
                "test_downcast_intp": [
                    "self"
                ]
            }
        },
        "scipy.sparse.linalg.interface": {
            "_get_dtype": [
                "operators",
                "dtypes"
            ],
            "aslinearoperator": [
                "A"
            ],
            "LinearOperator": {
                "__new__": [
                    "cls"
                ],
                "__init__": [
                    "self",
                    "dtype",
                    "shape"
                ],
                "_init_dtype": [
                    "self"
                ],
                "_matmat": [
                    "self",
                    "X"
                ],
                "_matvec": [
                    "self",
                    "x"
                ],
                "matvec": [
                    "self",
                    "x"
                ],
                "rmatvec": [
                    "self",
                    "x"
                ],
                "_rmatvec": [
                    "self",
                    "x"
                ],
                "matmat": [
                    "self",
                    "X"
                ],
                "rmatmat": [
                    "self",
                    "X"
                ],
                "_rmatmat": [
                    "self",
                    "X"
                ],
                "__call__": [
                    "self",
                    "x"
                ],
                "__mul__": [
                    "self",
                    "x"
                ],
                "dot": [
                    "self",
                    "x"
                ],
                "__matmul__": [
                    "self",
                    "other"
                ],
                "__rmatmul__": [
                    "self",
                    "other"
                ],
                "__rmul__": [
                    "self",
                    "x"
                ],
                "__pow__": [
                    "self",
                    "p"
                ],
                "__add__": [
                    "self",
                    "x"
                ],
                "__neg__": [
                    "self"
                ],
                "__sub__": [
                    "self",
                    "x"
                ],
                "__repr__": [
                    "self"
                ],
                "adjoint": [
                    "self"
                ],
                "transpose": [
                    "self"
                ],
                "_adjoint": [
                    "self"
                ],
                "_transpose": [
                    "self"
                ]
            },
            "_CustomLinearOperator": {
                "__init__": [
                    "self",
                    "shape",
                    "matvec",
                    "rmatvec",
                    "matmat",
                    "dtype",
                    "rmatmat"
                ],
                "_matmat": [
                    "self",
                    "X"
                ],
                "_matvec": [
                    "self",
                    "x"
                ],
                "_rmatvec": [
                    "self",
                    "x"
                ],
                "_rmatmat": [
                    "self",
                    "X"
                ],
                "_adjoint": [
                    "self"
                ]
            },
            "_AdjointLinearOperator": {
                "__init__": [
                    "self",
                    "A"
                ],
                "_matvec": [
                    "self",
                    "x"
                ],
                "_rmatvec": [
                    "self",
                    "x"
                ],
                "_matmat": [
                    "self",
                    "x"
                ],
                "_rmatmat": [
                    "self",
                    "x"
                ]
            },
            "_TransposedLinearOperator": {
                "__init__": [
                    "self",
                    "A"
                ],
                "_matvec": [
                    "self",
                    "x"
                ],
                "_rmatvec": [
                    "self",
                    "x"
                ],
                "_matmat": [
                    "self",
                    "x"
                ],
                "_rmatmat": [
                    "self",
                    "x"
                ]
            },
            "_SumLinearOperator": {
                "__init__": [
                    "self",
                    "A",
                    "B"
                ],
                "_matvec": [
                    "self",
                    "x"
                ],
                "_rmatvec": [
                    "self",
                    "x"
                ],
                "_rmatmat": [
                    "self",
                    "x"
                ],
                "_matmat": [
                    "self",
                    "x"
                ],
                "_adjoint": [
                    "self"
                ]
            },
            "_ProductLinearOperator": {
                "__init__": [
                    "self",
                    "A",
                    "B"
                ],
                "_matvec": [
                    "self",
                    "x"
                ],
                "_rmatvec": [
                    "self",
                    "x"
                ],
                "_rmatmat": [
                    "self",
                    "x"
                ],
                "_matmat": [
                    "self",
                    "x"
                ],
                "_adjoint": [
                    "self"
                ]
            },
            "_ScaledLinearOperator": {
                "__init__": [
                    "self",
                    "A",
                    "alpha"
                ],
                "_matvec": [
                    "self",
                    "x"
                ],
                "_rmatvec": [
                    "self",
                    "x"
                ],
                "_rmatmat": [
                    "self",
                    "x"
                ],
                "_matmat": [
                    "self",
                    "x"
                ],
                "_adjoint": [
                    "self"
                ]
            },
            "_PowerLinearOperator": {
                "__init__": [
                    "self",
                    "A",
                    "p"
                ],
                "_power": [
                    "self",
                    "fun",
                    "x"
                ],
                "_matvec": [
                    "self",
                    "x"
                ],
                "_rmatvec": [
                    "self",
                    "x"
                ],
                "_rmatmat": [
                    "self",
                    "x"
                ],
                "_matmat": [
                    "self",
                    "x"
                ],
                "_adjoint": [
                    "self"
                ]
            },
            "MatrixLinearOperator": {
                "__init__": [
                    "self",
                    "A"
                ],
                "_matmat": [
                    "self",
                    "X"
                ],
                "_adjoint": [
                    "self"
                ]
            },
            "_AdjointMatrixOperator": {
                "__init__": [
                    "self",
                    "adjoint"
                ],
                "dtype": [
                    "self"
                ],
                "_adjoint": [
                    "self"
                ]
            },
            "IdentityOperator": {
                "__init__": [
                    "self",
                    "shape",
                    "dtype"
                ],
                "_matvec": [
                    "self",
                    "x"
                ],
                "_rmatvec": [
                    "self",
                    "x"
                ],
                "_rmatmat": [
                    "self",
                    "x"
                ],
                "_matmat": [
                    "self",
                    "x"
                ],
                "_adjoint": [
                    "self"
                ]
            }
        },
        "scipy.sparse.linalg.setup": {
            "configuration": [
                "parent_package",
                "top_path"
            ]
        },
        "scipy.sparse.linalg._expm_multiply": {
            "_exact_inf_norm": [
                "A"
            ],
            "_exact_1_norm": [
                "A"
            ],
            "_trace": [
                "A"
            ],
            "_ident_like": [
                "A"
            ],
            "expm_multiply": [
                "A",
                "B",
                "start",
                "stop",
                "num",
                "endpoint"
            ],
            "_expm_multiply_simple": [
                "A",
                "B",
                "t",
                "balance"
            ],
            "_expm_multiply_simple_core": [
                "A",
                "B",
                "t",
                "mu",
                "m_star",
                "s",
                "tol",
                "balance"
            ],
            "_onenormest_matrix_power": [
                "A",
                "p",
                "t",
                "itmax",
                "compute_v",
                "compute_w"
            ],
            "_compute_cost_div_m": [
                "m",
                "p",
                "norm_info"
            ],
            "_compute_p_max": [
                "m_max"
            ],
            "_fragment_3_1": [
                "norm_info",
                "n0",
                "tol",
                "m_max",
                "ell"
            ],
            "_condition_3_13": [
                "A_1_norm",
                "n0",
                "m_max",
                "ell"
            ],
            "_expm_multiply_interval": [
                "A",
                "B",
                "start",
                "stop",
                "num",
                "endpoint",
                "balance",
                "status_only"
            ],
            "_expm_multiply_interval_core_0": [
                "A",
                "X",
                "h",
                "mu",
                "q",
                "norm_info",
                "tol",
                "ell",
                "n0"
            ],
            "_expm_multiply_interval_core_1": [
                "A",
                "X",
                "h",
                "mu",
                "m_star",
                "s",
                "q",
                "tol"
            ],
            "_expm_multiply_interval_core_2": [
                "A",
                "X",
                "h",
                "mu",
                "m_star",
                "s",
                "q",
                "tol"
            ],
            "LazyOperatorNormInfo": {
                "__init__": [
                    "self",
                    "A",
                    "A_1_norm",
                    "ell",
                    "scale"
                ],
                "set_scale": [
                    "self",
                    "scale"
                ],
                "onenorm": [
                    "self"
                ],
                "d": [
                    "self",
                    "p"
                ],
                "alpha": [
                    "self",
                    "p"
                ]
            }
        },
        "scipy.sparse.linalg": {},
        "scipy.sparse.linalg._norm": {
            "_sparse_frobenius_norm": [
                "x"
            ],
            "norm": [
                "x",
                "ord",
                "axis"
            ]
        },
        "scipy.sparse.linalg._onenormest": {
            "onenormest": [
                "A",
                "t",
                "itmax",
                "compute_v",
                "compute_w"
            ],
            "_blocked_elementwise": [
                "func"
            ],
            "sign_round_up": [
                "X"
            ],
            "_max_abs_axis1": [
                "X"
            ],
            "_sum_abs_axis0": [
                "X"
            ],
            "elementary_vector": [
                "n",
                "i"
            ],
            "vectors_are_parallel": [
                "v",
                "w"
            ],
            "every_col_of_X_is_parallel_to_a_col_of_Y": [
                "X",
                "Y"
            ],
            "column_needs_resampling": [
                "i",
                "X",
                "Y"
            ],
            "resample_column": [
                "i",
                "X"
            ],
            "less_than_or_close": [
                "a",
                "b"
            ],
            "_algorithm_2_2": [
                "A",
                "AT",
                "t"
            ],
            "_onenormest_core": [
                "A",
                "AT",
                "t",
                "itmax"
            ]
        },
        "scipy.sparse.linalg.matfuncs": {
            "inv": [
                "A"
            ],
            "_onenorm_matrix_power_nnm": [
                "A",
                "p"
            ],
            "_is_upper_triangular": [
                "A"
            ],
            "_smart_matrix_product": [
                "A",
                "B",
                "alpha",
                "structure"
            ],
            "_onenormest_matrix_power": [
                "A",
                "p",
                "t",
                "itmax",
                "compute_v",
                "compute_w",
                "structure"
            ],
            "_onenormest_product": [
                "operator_seq",
                "t",
                "itmax",
                "compute_v",
                "compute_w",
                "structure"
            ],
            "expm": [
                "A"
            ],
            "_expm": [
                "A",
                "use_exact_onenorm"
            ],
            "_solve_P_Q": [
                "U",
                "V",
                "structure"
            ],
            "_exp_sinch": [
                "a",
                "x"
            ],
            "_eq_10_42": [
                "lam_1",
                "lam_2",
                "t_12"
            ],
            "_fragment_2_1": [
                "X",
                "T",
                "s"
            ],
            "_ell": [
                "A",
                "m"
            ],
            "MatrixPowerOperator": {
                "__init__": [
                    "self",
                    "A",
                    "p",
                    "structure"
                ],
                "_matvec": [
                    "self",
                    "x"
                ],
                "_rmatvec": [
                    "self",
                    "x"
                ],
                "_matmat": [
                    "self",
                    "X"
                ],
                "T": [
                    "self"
                ]
            },
            "ProductOperator": {
                "__init__": [
                    "self"
                ],
                "_matvec": [
                    "self",
                    "x"
                ],
                "_rmatvec": [
                    "self",
                    "x"
                ],
                "_matmat": [
                    "self",
                    "X"
                ],
                "T": [
                    "self"
                ]
            },
            "_ExpmPadeHelper": {
                "__init__": [
                    "self",
                    "A",
                    "structure",
                    "use_exact_onenorm"
                ],
                "A2": [
                    "self"
                ],
                "A4": [
                    "self"
                ],
                "A6": [
                    "self"
                ],
                "A8": [
                    "self"
                ],
                "A10": [
                    "self"
                ],
                "d4_tight": [
                    "self"
                ],
                "d6_tight": [
                    "self"
                ],
                "d8_tight": [
                    "self"
                ],
                "d10_tight": [
                    "self"
                ],
                "d4_loose": [
                    "self"
                ],
                "d6_loose": [
                    "self"
                ],
                "d8_loose": [
                    "self"
                ],
                "d10_loose": [
                    "self"
                ],
                "pade3": [
                    "self"
                ],
                "pade5": [
                    "self"
                ],
                "pade7": [
                    "self"
                ],
                "pade9": [
                    "self"
                ],
                "pade13_scaled": [
                    "self",
                    "s"
                ]
            }
        },
        "scipy.sparse.linalg.tests.test_onenormest": {
            "MatrixProductOperator": {
                "__init__": [
                    "self",
                    "A",
                    "B"
                ],
                "_matvec": [
                    "self",
                    "x"
                ],
                "_rmatvec": [
                    "self",
                    "x"
                ],
                "_matmat": [
                    "self",
                    "X"
                ],
                "T": [
                    "self"
                ]
            },
            "TestOnenormest": {
                "test_onenormest_table_3_t_2": [
                    "self"
                ],
                "test_onenormest_table_4_t_7": [
                    "self"
                ],
                "test_onenormest_table_5_t_1": [
                    "self"
                ],
                "test_onenormest_table_6_t_1": [
                    "self"
                ],
                "_help_product_norm_slow": [
                    "self",
                    "A",
                    "B"
                ],
                "_help_product_norm_fast": [
                    "self",
                    "A",
                    "B"
                ],
                "test_onenormest_linear_operator": [
                    "self"
                ],
                "test_returns": [
                    "self"
                ]
            },
            "TestAlgorithm_2_2": {
                "test_randn_inv": [
                    "self"
                ]
            }
        },
        "scipy.sparse.linalg.tests.test_norm": {
            "TestNorm": {
                "setup_method": [
                    "self"
                ],
                "test_matrix_norm": [
                    "self"
                ],
                "test_matrix_norm_axis": [
                    "self"
                ],
                "test_vector_norm": [
                    "self"
                ],
                "test_norm_exceptions": [
                    "self"
                ]
            },
            "TestVsNumpyNorm": {
                "test_sparse_matrix_norms": [
                    "self"
                ],
                "test_sparse_matrix_norms_with_axis": [
                    "self"
                ],
                "test_sparse_vector_norms": [
                    "self"
                ]
            }
        },
        "scipy.sparse.linalg.tests.test_interface": {
            "test_repr": [],
            "test_identity": [],
            "test_attributes": [],
            "matvec": [
                "x"
            ],
            "test_pickle": [],
            "test_inheritance": [],
            "test_dtypes_of_operator_sum": [],
            "test_no_double_init": [],
            "test_adjoint_conjugate": [],
            "test_ndim": [],
            "test_transpose_noconjugate": [],
            "TestLinearOperator": {
                "setup_method": [
                    "self"
                ],
                "test_matvec": [
                    "self"
                ],
                "test_matmul": [
                    "self"
                ]
            },
            "TestAsLinearOperator": {
                "setup_method": [
                    "self"
                ],
                "test_basic": [
                    "self"
                ],
                "test_dot": [
                    "self"
                ]
            }
        },
        "scipy.sparse.linalg.tests.test_expm_multiply": {
            "less_than_or_close": [
                "a",
                "b"
            ],
            "TestExpmActionSimple": {
                "test_theta_monotonicity": [
                    "self"
                ],
                "test_p_max_default": [
                    "self"
                ],
                "test_p_max_range": [
                    "self"
                ],
                "test_onenormest_matrix_power": [
                    "self"
                ],
                "test_expm_multiply": [
                    "self"
                ],
                "test_matrix_vector_multiply": [
                    "self"
                ],
                "test_scaled_expm_multiply": [
                    "self"
                ],
                "test_scaled_expm_multiply_single_timepoint": [
                    "self"
                ],
                "test_sparse_expm_multiply": [
                    "self"
                ],
                "test_complex": [
                    "self"
                ]
            },
            "TestExpmActionInterval": {
                "test_sparse_expm_multiply_interval": [
                    "self"
                ],
                "test_expm_multiply_interval_vector": [
                    "self"
                ],
                "test_expm_multiply_interval_matrix": [
                    "self"
                ],
                "test_sparse_expm_multiply_interval_dtypes": [
                    "self"
                ],
                "test_expm_multiply_interval_status_0": [
                    "self"
                ],
                "test_expm_multiply_interval_status_1": [
                    "self"
                ],
                "test_expm_multiply_interval_status_2": [
                    "self"
                ],
                "_help_test_specific_expm_interval_status": [
                    "self",
                    "target_status"
                ]
            }
        },
        "scipy.sparse.linalg.tests": {},
        "scipy.sparse.linalg.tests.test_pydata_sparse": {
            "sparse_cls": [
                "request"
            ],
            "sp_sparse_cls": [
                "request"
            ],
            "same_matrix": [
                "sparse_cls",
                "sp_sparse_cls"
            ],
            "matrices": [
                "sparse_cls"
            ],
            "test_isolve_gmres": [
                "matrices"
            ],
            "test_lsmr": [
                "matrices"
            ],
            "test_lsqr": [
                "matrices"
            ],
            "test_eigs": [
                "matrices"
            ],
            "test_svds": [
                "matrices"
            ],
            "test_lobpcg": [
                "matrices"
            ],
            "test_spsolve": [
                "matrices"
            ],
            "test_splu": [
                "matrices"
            ],
            "test_spilu": [
                "matrices"
            ],
            "test_spsolve_triangular": [
                "matrices"
            ],
            "test_onenormest": [
                "matrices"
            ],
            "test_inv": [
                "matrices"
            ],
            "test_expm": [
                "matrices"
            ],
            "test_expm_multiply": [
                "matrices"
            ],
            "test_eq": [
                "same_matrix"
            ],
            "test_ne": [
                "same_matrix"
            ]
        },
        "scipy.sparse.linalg.tests.test_matfuncs": {
            "_burkardt_13_power": [
                "n",
                "p"
            ],
            "test_onenorm_matrix_power_nnm": [],
            "TestExpM": {
                "test_zero_ndarray": [
                    "self"
                ],
                "test_zero_sparse": [
                    "self"
                ],
                "test_zero_matrix": [
                    "self"
                ],
                "test_misc_types": [
                    "self"
                ],
                "test_bidiagonal_sparse": [
                    "self"
                ],
                "test_padecases_dtype_float": [
                    "self"
                ],
                "test_padecases_dtype_complex": [
                    "self"
                ],
                "test_padecases_dtype_sparse_float": [
                    "self"
                ],
                "test_padecases_dtype_sparse_complex": [
                    "self"
                ],
                "test_logm_consistency": [
                    "self"
                ],
                "test_integer_matrix": [
                    "self"
                ],
                "test_integer_matrix_2": [
                    "self"
                ],
                "test_triangularity_perturbation": [
                    "self"
                ],
                "test_burkardt_1": [
                    "self"
                ],
                "test_burkardt_2": [
                    "self"
                ],
                "test_burkardt_3": [
                    "self"
                ],
                "test_burkardt_4": [
                    "self"
                ],
                "test_burkardt_5": [
                    "self"
                ],
                "test_burkardt_6": [
                    "self"
                ],
                "test_burkardt_7": [
                    "self"
                ],
                "test_burkardt_8": [
                    "self"
                ],
                "test_burkardt_9": [
                    "self"
                ],
                "test_burkardt_10": [
                    "self"
                ],
                "test_burkardt_11": [
                    "self"
                ],
                "test_burkardt_12": [
                    "self"
                ],
                "test_burkardt_13": [
                    "self"
                ],
                "test_burkardt_14": [
                    "self"
                ],
                "test_pascal": [
                    "self"
                ],
                "test_matrix_input": [
                    "self"
                ],
                "test_exp_sinch_overflow": [
                    "self"
                ]
            },
            "TestOperators": {
                "test_product_operator": [
                    "self"
                ],
                "test_matrix_power_operator": [
                    "self"
                ]
            }
        },
        "scipy.sparse.linalg.isolve.lsmr": {
            "lsmr": [
                "A",
                "b",
                "damp",
                "atol",
                "btol",
                "conlim",
                "maxiter",
                "show",
                "x0"
            ]
        },
        "scipy.sparse.linalg.isolve.lsqr": {
            "_sym_ortho": [
                "a",
                "b"
            ],
            "lsqr": [
                "A",
                "b",
                "damp",
                "atol",
                "btol",
                "conlim",
                "iter_lim",
                "show",
                "calc_var",
                "x0"
            ]
        },
        "scipy.sparse.linalg.isolve.lgmres": {
            "lgmres": [
                "A",
                "b",
                "x0",
                "tol",
                "maxiter",
                "M",
                "callback",
                "inner_m",
                "outer_k",
                "outer_v",
                "store_outer_Av",
                "prepend_outer_v",
                "atol"
            ]
        },
        "scipy.sparse.linalg.isolve.setup": {
            "configuration": [
                "parent_package",
                "top_path"
            ]
        },
        "scipy.sparse.linalg.isolve.utils": {
            "coerce": [
                "x",
                "y"
            ],
            "id": [
                "x"
            ],
            "make_system": [
                "A",
                "M",
                "x0",
                "b"
            ]
        },
        "scipy.sparse.linalg.isolve.minres": {
            "minres": [
                "A",
                "b",
                "x0",
                "shift",
                "tol",
                "maxiter",
                "M",
                "callback",
                "show",
                "check"
            ]
        },
        "scipy.sparse.linalg.isolve._gcrotmk": {
            "_fgmres": [
                "matvec",
                "v0",
                "m",
                "atol",
                "lpsolve",
                "rpsolve",
                "cs",
                "outer_v",
                "prepend_outer_v"
            ],
            "gcrotmk": [
                "A",
                "b",
                "x0",
                "tol",
                "maxiter",
                "M",
                "callback",
                "m",
                "k",
                "CU",
                "discard_C",
                "truncate",
                "atol"
            ]
        },
        "scipy.sparse.linalg.isolve": {},
        "scipy.sparse.linalg.isolve.iterative": {
            "_stoptest": [
                "residual",
                "atol"
            ],
            "_get_atol": [
                "tol",
                "atol",
                "bnrm2",
                "get_residual",
                "routine_name"
            ],
            "set_docstring": [
                "header",
                "Ainfo",
                "footer",
                "atol_default"
            ],
            "bicg": [
                "A",
                "b",
                "x0",
                "tol",
                "maxiter",
                "M",
                "callback",
                "atol"
            ],
            "bicgstab": [
                "A",
                "b",
                "x0",
                "tol",
                "maxiter",
                "M",
                "callback",
                "atol"
            ],
            "cg": [
                "A",
                "b",
                "x0",
                "tol",
                "maxiter",
                "M",
                "callback",
                "atol"
            ],
            "cgs": [
                "A",
                "b",
                "x0",
                "tol",
                "maxiter",
                "M",
                "callback",
                "atol"
            ],
            "gmres": [
                "A",
                "b",
                "x0",
                "tol",
                "restart",
                "maxiter",
                "M",
                "callback",
                "restrt",
                "atol",
                "callback_type"
            ],
            "qmr": [
                "A",
                "b",
                "x0",
                "tol",
                "maxiter",
                "M1",
                "M2",
                "callback",
                "atol"
            ]
        },
        "scipy.sparse.linalg.isolve.tests.test_lsqr": {
            "test_basic": [],
            "test_gh_2466": [],
            "test_well_conditioned_problems": [],
            "test_b_shapes": [],
            "test_initialization": []
        },
        "scipy.sparse.linalg.isolve.tests.demo_lgmres": {
            "matvec": [
                "v"
            ]
        },
        "scipy.sparse.linalg.isolve.tests.test_utils": {
            "test_make_system_bad_shape": []
        },
        "scipy.sparse.linalg.isolve.tests": {},
        "scipy.sparse.linalg.isolve.tests.test_iterative": {
            "check_maxiter": [
                "solver",
                "case"
            ],
            "test_maxiter": [],
            "assert_normclose": [
                "a",
                "b",
                "tol"
            ],
            "check_convergence": [
                "solver",
                "case"
            ],
            "test_convergence": [],
            "check_precond_dummy": [
                "solver",
                "case"
            ],
            "test_precond_dummy": [],
            "check_precond_inverse": [
                "solver",
                "case"
            ],
            "test_precond_inverse": [],
            "test_gmres_basic": [],
            "test_reentrancy": [],
            "_check_reentrancy": [
                "solver",
                "is_reentrant"
            ],
            "test_atol": [
                "solver"
            ],
            "test_zero_rhs": [
                "solver"
            ],
            "test_maxiter_worsening": [
                "solver"
            ],
            "test_x0_working": [
                "solver"
            ],
            "Case": {
                "__init__": [
                    "self",
                    "name",
                    "A",
                    "b",
                    "skip",
                    "nonconvergence"
                ],
                "__repr__": [
                    "self"
                ]
            },
            "IterativeParams": {
                "__init__": [
                    "self"
                ]
            },
            "TestQMR": {
                "test_leftright_precond": [
                    "self"
                ]
            },
            "TestGMRES": {
                "test_callback": [
                    "self"
                ],
                "test_abi": [
                    "self"
                ],
                "test_atol_legacy": [
                    "self"
                ],
                "test_defective_precond_breakdown": [
                    "self"
                ],
                "test_defective_matrix_breakdown": [
                    "self"
                ],
                "test_callback_type": [
                    "self"
                ],
                "test_callback_x_monotonic": [
                    "self"
                ]
            }
        },
        "scipy.sparse.linalg.isolve.tests.test_lsmr": {
            "lowerBidiagonalMatrix": [
                "m",
                "n"
            ],
            "lsmrtest": [
                "m",
                "n",
                "damp"
            ],
            "TestLSMR": {
                "setup_method": [
                    "self"
                ],
                "assertCompatibleSystem": [
                    "self",
                    "A",
                    "xtrue"
                ],
                "testIdentityACase1": [
                    "self"
                ],
                "testIdentityACase2": [
                    "self"
                ],
                "testIdentityACase3": [
                    "self"
                ],
                "testBidiagonalA": [
                    "self"
                ],
                "testScalarB": [
                    "self"
                ],
                "testComplexX": [
                    "self"
                ],
                "testComplexX0": [
                    "self"
                ],
                "testComplexA": [
                    "self"
                ],
                "testComplexB": [
                    "self"
                ],
                "testColumnB": [
                    "self"
                ],
                "testInitialization": [
                    "self"
                ]
            },
            "TestLSMRReturns": {
                "setup_method": [
                    "self"
                ],
                "testNormr": [
                    "self"
                ],
                "testNormar": [
                    "self"
                ],
                "testNormx": [
                    "self"
                ]
            }
        },
        "scipy.sparse.linalg.isolve.tests.test_lgmres": {
            "matvec": [
                "v"
            ],
            "do_solve": [],
            "TestLGMRES": {
                "test_preconditioner": [
                    "self"
                ],
                "test_outer_v": [
                    "self"
                ],
                "test_arnoldi": [
                    "self"
                ],
                "test_cornercase": [
                    "self"
                ],
                "test_nans": [
                    "self"
                ],
                "test_breakdown_with_outer_v": [
                    "self"
                ],
                "test_breakdown_underdetermined": [
                    "self"
                ],
                "test_denormals": [
                    "self"
                ]
            }
        },
        "scipy.sparse.linalg.isolve.tests.test_minres": {
            "get_sample_problem": [],
            "test_singular": [],
            "test_x0_is_used_by": [],
            "test_shift": [],
            "test_asymmetric_fail": [],
            "test_minres_non_default_x0": [],
            "test_minres_precond_non_default_x0": [],
            "test_minres_precond_exact_x0": []
        },
        "scipy.sparse.linalg.isolve.tests.test_gcrotmk": {
            "matvec": [
                "v"
            ],
            "do_solve": [],
            "TestGCROTMK": {
                "test_preconditioner": [
                    "self"
                ],
                "test_arnoldi": [
                    "self"
                ],
                "test_cornercase": [
                    "self"
                ],
                "test_nans": [
                    "self"
                ],
                "test_truncate": [
                    "self"
                ],
                "test_CU": [
                    "self"
                ],
                "test_denormals": [
                    "self"
                ]
            }
        },
        "scipy.sparse.linalg.dsolve._add_newdocs": {},
        "scipy.sparse.linalg.dsolve.linsolve": {
            "use_solver": [],
            "_get_umf_family": [
                "A"
            ],
            "spsolve": [
                "A",
                "b",
                "permc_spec",
                "use_umfpack"
            ],
            "splu": [
                "A",
                "permc_spec",
                "diag_pivot_thresh",
                "relax",
                "panel_size",
                "options"
            ],
            "spilu": [
                "A",
                "drop_tol",
                "fill_factor",
                "drop_rule",
                "permc_spec",
                "diag_pivot_thresh",
                "relax",
                "panel_size",
                "options"
            ],
            "factorized": [
                "A"
            ],
            "spsolve_triangular": [
                "A",
                "b",
                "lower",
                "overwrite_A",
                "overwrite_b",
                "unit_diagonal"
            ],
            "MatrixRankWarning": {}
        },
        "scipy.sparse.linalg.dsolve.setup": {
            "configuration": [
                "parent_package",
                "top_path"
            ]
        },
        "scipy.sparse.linalg.dsolve": {},
        "scipy.sparse.linalg.dsolve.tests.test_linsolve": {
            "toarray": [
                "a"
            ],
            "setup_bug_8278": [],
            "TestFactorized": {
                "setup_method": [
                    "self"
                ],
                "_check_singular": [
                    "self"
                ],
                "_check_non_singular": [
                    "self"
                ],
                "test_singular_without_umfpack": [
                    "self"
                ],
                "test_singular_with_umfpack": [
                    "self"
                ],
                "test_non_singular_without_umfpack": [
                    "self"
                ],
                "test_non_singular_with_umfpack": [
                    "self"
                ],
                "test_cannot_factorize_nonsquare_matrix_without_umfpack": [
                    "self"
                ],
                "test_factorizes_nonsquare_matrix_with_umfpack": [
                    "self"
                ],
                "test_call_with_incorrectly_sized_matrix_without_umfpack": [
                    "self"
                ],
                "test_call_with_incorrectly_sized_matrix_with_umfpack": [
                    "self"
                ],
                "test_call_with_cast_to_complex_without_umfpack": [
                    "self"
                ],
                "test_call_with_cast_to_complex_with_umfpack": [
                    "self"
                ],
                "test_assume_sorted_indices_flag": [
                    "self"
                ],
                "test_bug_8278": [
                    "self"
                ]
            },
            "TestLinsolve": {
                "setup_method": [
                    "self"
                ],
                "test_singular": [
                    "self"
                ],
                "test_singular_gh_3312": [
                    "self"
                ],
                "test_twodiags": [
                    "self"
                ],
                "test_bvector_smoketest": [
                    "self"
                ],
                "test_bmatrix_smoketest": [
                    "self"
                ],
                "test_non_square": [
                    "self"
                ],
                "test_example_comparison": [
                    "self"
                ],
                "test_shape_compatibility": [
                    "self"
                ],
                "test_ndarray_support": [
                    "self"
                ],
                "test_gssv_badinput": [
                    "self"
                ],
                "test_sparsity_preservation": [
                    "self"
                ],
                "test_dtype_cast": [
                    "self"
                ],
                "test_bug_8278": [
                    "self"
                ]
            },
            "TestSplu": {
                "setup_method": [
                    "self"
                ],
                "_smoketest": [
                    "self",
                    "spxlu",
                    "check",
                    "dtype"
                ],
                "test_splu_smoketest": [
                    "self"
                ],
                "_internal_test_splu_smoketest": [
                    "self"
                ],
                "test_spilu_smoketest": [
                    "self"
                ],
                "_internal_test_spilu_smoketest": [
                    "self"
                ],
                "test_spilu_drop_rule": [
                    "self"
                ],
                "test_splu_nnz0": [
                    "self"
                ],
                "test_spilu_nnz0": [
                    "self"
                ],
                "test_splu_basic": [
                    "self"
                ],
                "test_splu_perm": [
                    "self"
                ],
                "test_natural_permc": [
                    "self",
                    "splu_fun",
                    "rtol"
                ],
                "test_lu_refcount": [
                    "self"
                ],
                "test_bad_inputs": [
                    "self"
                ],
                "test_superlu_dlamch_i386_nan": [
                    "self"
                ],
                "test_lu_attr": [
                    "self"
                ],
                "test_threads_parallel": [
                    "self"
                ]
            },
            "TestSpsolveTriangular": {
                "setup_method": [
                    "self"
                ],
                "test_singular": [
                    "self"
                ],
                "test_bad_shape": [
                    "self"
                ],
                "test_input_types": [
                    "self"
                ],
                "test_random": [
                    "self"
                ]
            }
        },
        "scipy.sparse.linalg.dsolve.tests": {},
        "scipy.sparse.linalg.eigen.setup": {
            "configuration": [
                "parent_package",
                "top_path"
            ]
        },
        "scipy.sparse.linalg.eigen": {},
        "scipy.sparse.linalg.eigen.lobpcg.lobpcg": {
            "_report_nonhermitian": [
                "M",
                "name"
            ],
            "_as2d": [
                "ar"
            ],
            "_makeOperator": [
                "operatorInput",
                "expectedShape"
            ],
            "_applyConstraints": [
                "blockVectorV",
                "factYBY",
                "blockVectorBY",
                "blockVectorY"
            ],
            "_b_orthonormalize": [
                "B",
                "blockVectorV",
                "blockVectorBV",
                "retInvR"
            ],
            "_get_indx": [
                "_lambda",
                "num",
                "largest"
            ],
            "lobpcg": [
                "A",
                "X",
                "B",
                "M",
                "Y",
                "tol",
                "maxiter",
                "largest",
                "verbosityLevel",
                "retLambdaHistory",
                "retResidualNormsHistory"
            ]
        },
        "scipy.sparse.linalg.eigen.lobpcg.setup": {
            "configuration": [
                "parent_package",
                "top_path"
            ]
        },
        "scipy.sparse.linalg.eigen.lobpcg": {},
        "scipy.sparse.linalg.eigen.lobpcg.tests": {},
        "scipy.sparse.linalg.eigen.lobpcg.tests.test_lobpcg": {
            "ElasticRod": [
                "n"
            ],
            "MikotaPair": [
                "n"
            ],
            "compare_solutions": [
                "A",
                "B",
                "m"
            ],
            "test_Small": [],
            "test_ElasticRod": [],
            "test_MikotaPair": [],
            "test_regression": [],
            "test_diagonal": [],
            "_check_eigen": [
                "M",
                "w",
                "V",
                "rtol",
                "atol"
            ],
            "_check_fiedler": [
                "n",
                "p"
            ],
            "test_fiedler_small_8": [],
            "test_fiedler_large_12": [],
            "test_hermitian": [],
            "test_eigs_consistency": [
                "n",
                "atol"
            ],
            "test_verbosity": [
                "tmpdir"
            ],
            "test_tolerance_float32": [],
            "test_random_initial_float32": [],
            "test_maxit_None": [],
            "test_diagonal_data_types": []
        },
        "scipy.sparse.linalg.eigen.arpack.setup": {
            "configuration": [
                "parent_package",
                "top_path"
            ]
        },
        "scipy.sparse.linalg.eigen.arpack": {},
        "scipy.sparse.linalg.eigen.arpack.arpack": {
            "choose_ncv": [
                "k"
            ],
            "_aslinearoperator_with_dtype": [
                "m"
            ],
            "gmres_loose": [
                "A",
                "b",
                "tol"
            ],
            "_fast_spmatrix_to_csc": [
                "A",
                "hermitian"
            ],
            "get_inv_matvec": [
                "M",
                "hermitian",
                "tol"
            ],
            "get_OPinv_matvec": [
                "A",
                "M",
                "sigma",
                "hermitian",
                "tol"
            ],
            "eigs": [
                "A",
                "k",
                "M",
                "sigma",
                "which",
                "v0",
                "ncv",
                "maxiter",
                "tol",
                "return_eigenvectors",
                "Minv",
                "OPinv",
                "OPpart"
            ],
            "eigsh": [
                "A",
                "k",
                "M",
                "sigma",
                "which",
                "v0",
                "ncv",
                "maxiter",
                "tol",
                "return_eigenvectors",
                "Minv",
                "OPinv",
                "mode"
            ],
            "_augmented_orthonormal_cols": [
                "x",
                "k"
            ],
            "_augmented_orthonormal_rows": [
                "x",
                "k"
            ],
            "_herm": [
                "x"
            ],
            "svds": [
                "A",
                "k",
                "ncv",
                "tol",
                "which",
                "v0",
                "maxiter",
                "return_singular_vectors",
                "solver"
            ],
            "ArpackError": {
                "__init__": [
                    "self",
                    "info",
                    "infodict"
                ]
            },
            "ArpackNoConvergence": {
                "__init__": [
                    "self",
                    "msg",
                    "eigenvalues",
                    "eigenvectors"
                ]
            },
            "_ArpackParams": {
                "__init__": [
                    "self",
                    "n",
                    "k",
                    "tp",
                    "mode",
                    "sigma",
                    "ncv",
                    "v0",
                    "maxiter",
                    "which",
                    "tol"
                ],
                "_raise_no_convergence": [
                    "self"
                ]
            },
            "_SymmetricArpackParams": {
                "__init__": [
                    "self",
                    "n",
                    "k",
                    "tp",
                    "matvec",
                    "mode",
                    "M_matvec",
                    "Minv_matvec",
                    "sigma",
                    "ncv",
                    "v0",
                    "maxiter",
                    "which",
                    "tol"
                ],
                "iterate": [
                    "self"
                ],
                "extract": [
                    "self",
                    "return_eigenvectors"
                ]
            },
            "_UnsymmetricArpackParams": {
                "__init__": [
                    "self",
                    "n",
                    "k",
                    "tp",
                    "matvec",
                    "mode",
                    "M_matvec",
                    "Minv_matvec",
                    "sigma",
                    "ncv",
                    "v0",
                    "maxiter",
                    "which",
                    "tol"
                ],
                "iterate": [
                    "self"
                ],
                "extract": [
                    "self",
                    "return_eigenvectors"
                ]
            },
            "SpLuInv": {
                "__init__": [
                    "self",
                    "M"
                ],
                "_matvec": [
                    "self",
                    "x"
                ]
            },
            "LuInv": {
                "__init__": [
                    "self",
                    "M"
                ],
                "_matvec": [
                    "self",
                    "x"
                ]
            },
            "IterInv": {
                "__init__": [
                    "self",
                    "M",
                    "ifunc",
                    "tol"
                ],
                "_matvec": [
                    "self",
                    "x"
                ]
            },
            "IterOpInv": {
                "__init__": [
                    "self",
                    "A",
                    "M",
                    "sigma",
                    "ifunc",
                    "tol"
                ],
                "_matvec": [
                    "self",
                    "x"
                ],
                "dtype": [
                    "self"
                ]
            }
        },
        "scipy.sparse.linalg.eigen.arpack.tests": {},
        "scipy.sparse.linalg.eigen.arpack.tests.test_arpack": {
            "_get_test_tolerance": [
                "type_char",
                "mattype"
            ],
            "generate_matrix": [
                "N",
                "complex_",
                "hermitian",
                "pos_definite",
                "sparse"
            ],
            "generate_matrix_symmetric": [
                "N",
                "pos_definite",
                "sparse"
            ],
            "_aslinearoperator_with_dtype": [
                "m"
            ],
            "assert_allclose_cc": [
                "actual",
                "desired"
            ],
            "argsort_which": [
                "eigenvalues",
                "typ",
                "k",
                "which",
                "sigma",
                "OPpart",
                "mode"
            ],
            "eval_evec": [
                "symmetric",
                "d",
                "typ",
                "k",
                "which",
                "v0",
                "sigma",
                "mattype",
                "OPpart",
                "mode"
            ],
            "test_symmetric_modes": [],
            "test_hermitian_modes": [],
            "test_symmetric_starting_vector": [],
            "test_symmetric_no_convergence": [],
            "test_real_nonsymmetric_modes": [],
            "test_complex_nonsymmetric_modes": [],
            "test_standard_nonsymmetric_starting_vector": [],
            "test_general_nonsymmetric_starting_vector": [],
            "test_standard_nonsymmetric_no_convergence": [],
            "test_eigen_bad_shapes": [],
            "test_eigen_bad_kwargs": [],
            "test_ticket_1459_arpack_crash": [],
            "sorted_svd": [
                "m",
                "k",
                "which"
            ],
            "svd_estimate": [
                "u",
                "s",
                "vh"
            ],
            "svd_test_input_check": [],
            "test_svd_simple_real": [],
            "test_svd_simple_complex": [],
            "test_svd_maxiter": [],
            "test_svd_return": [],
            "test_svd_which": [],
            "test_svd_v0": [],
            "_check_svds": [
                "A",
                "k",
                "U",
                "s",
                "VH"
            ],
            "test_svd_LM_ones_matrix": [],
            "test_svd_LM_zeros_matrix": [],
            "test_svd_LM_zeros_matrix_gh_3452": [],
            "test_svd_linop": [],
            "test_linearoperator_deallocation": [],
            "test_svds_partial_return": [],
            "test_svds_wrong_eigen_type": [],
            "test_parallel_threads": [],
            "test_reentering": [],
            "test_regression_arpackng_1315": [],
            "test_eigs_for_k_greater": [],
            "test_eigsh_for_k_greater": [],
            "test_real_eigs_real_k_subset": [],
            "DictWithRepr": {
                "__init__": [
                    "self",
                    "name"
                ],
                "__repr__": [
                    "self"
                ]
            },
            "SymmetricParams": {
                "__init__": [
                    "self"
                ]
            },
            "NonSymmetricParams": {
                "__init__": [
                    "self"
                ]
            },
            "CheckingLinearOperator": {
                "__init__": [
                    "self",
                    "A"
                ],
                "_matvec": [
                    "self",
                    "x"
                ],
                "_rmatvec": [
                    "self",
                    "x"
                ]
            }
        },
        "scipy.sparse.csgraph._laplacian": {
            "laplacian": [
                "csgraph",
                "normed",
                "return_diag",
                "use_out_degree"
            ],
            "_setdiag_dense": [
                "A",
                "d"
            ],
            "_laplacian_sparse": [
                "graph",
                "normed",
                "axis"
            ],
            "_laplacian_dense": [
                "graph",
                "normed",
                "axis"
            ]
        },
        "scipy.sparse.csgraph.setup": {
            "configuration": [
                "parent_package",
                "top_path"
            ]
        },
        "scipy.sparse.csgraph._validation": {
            "validate_graph": [
                "csgraph",
                "directed",
                "dtype",
                "csr_output",
                "dense_output",
                "copy_if_dense",
                "copy_if_sparse",
                "null_value_in",
                "null_value_out",
                "infinity_null",
                "nan_null"
            ]
        },
        "scipy.sparse.csgraph": {},
        "scipy.sparse.csgraph.tests.test_reordering": {
            "test_graph_reverse_cuthill_mckee": [],
            "test_graph_reverse_cuthill_mckee_ordering": [],
            "test_graph_structural_rank": []
        },
        "scipy.sparse.csgraph.tests.test_graph_laplacian": {
            "_explicit_laplacian": [
                "x",
                "normed"
            ],
            "_check_symmetric_graph_laplacian": [
                "mat",
                "normed"
            ],
            "test_laplacian_value_error": [],
            "test_symmetric_graph_laplacian": [],
            "_assert_allclose_sparse": [
                "a",
                "b"
            ],
            "_check_laplacian": [
                "A",
                "desired_L",
                "desired_d",
                "normed",
                "use_out_degree"
            ],
            "test_asymmetric_laplacian": [],
            "test_sparse_formats": []
        },
        "scipy.sparse.csgraph.tests.test_flow": {
            "test_raises_on_dense_input": [],
            "test_raises_on_csc_input": [],
            "test_raises_on_floating_point_input": [],
            "test_raises_when_source_is_sink": [],
            "test_raises_when_source_is_out_of_bounds": [
                "source"
            ],
            "test_raises_when_sink_is_out_of_bounds": [
                "sink"
            ],
            "test_simple_graph": [],
            "test_bottle_neck_graph": [],
            "test_backwards_flow": [],
            "test_example_from_clrs_chapter_26_1": [],
            "test_disconnected_graph": []
        },
        "scipy.sparse.csgraph.tests.test_shortest_path": {
            "test_dijkstra_limit": [],
            "test_directed": [],
            "test_undirected": [],
            "test_directed_sparse_zero": [],
            "test_undirected_sparse_zero": [],
            "test_dijkstra_indices_min_only": [
                "directed",
                "SP_ans",
                "indices"
            ],
            "test_shortest_path_min_only_random": [
                "n"
            ],
            "test_shortest_path_indices": [],
            "test_predecessors": [],
            "test_construct_shortest_path": [],
            "test_unweighted_path": [],
            "test_negative_cycles": [],
            "test_masked_input": [],
            "test_overwrite": [],
            "test_buffer": [
                "method"
            ],
            "test_NaN_warnings": [],
            "test_sparse_matrices": []
        },
        "scipy.sparse.csgraph.tests.test_matching": {
            "test_maximum_bipartite_matching_raises_on_dense_input": [],
            "test_maximum_bipartite_matching_empty_graph": [],
            "test_maximum_bipartite_matching_empty_left_partition": [],
            "test_maximum_bipartite_matching_empty_right_partition": [],
            "test_maximum_bipartite_matching_graph_with_no_edges": [],
            "test_maximum_bipartite_matching_graph_that_causes_augmentation": [],
            "test_maximum_bipartite_matching_graph_with_more_rows_than_columns": [],
            "test_maximum_bipartite_matching_graph_with_more_columns_than_rows": [],
            "test_maximum_bipartite_matching_explicit_zeros_count_as_edges": [],
            "test_maximum_bipartite_matching_feasibility_of_result": [],
            "test_matching_large_random_graph_with_one_edge_incident_to_each_vertex": [],
            "test_min_weight_full_matching_trivial_graph": [
                "num_rows",
                "num_cols"
            ],
            "test_min_weight_full_matching_infeasible_problems": [
                "biadjacency_matrix"
            ],
            "test_explicit_zero_causes_warning": []
        },
        "scipy.sparse.csgraph.tests.test_spanning_tree": {
            "test_minimum_spanning_tree": []
        },
        "scipy.sparse.csgraph.tests": {},
        "scipy.sparse.csgraph.tests.test_traversal": {
            "test_graph_breadth_first": [],
            "test_graph_depth_first": [],
            "test_graph_breadth_first_trivial_graph": [],
            "test_graph_depth_first_trivial_graph": []
        },
        "scipy.sparse.csgraph.tests.test_conversions": {
            "test_csgraph_from_dense": [],
            "test_csgraph_to_dense": [],
            "test_multiple_edges": []
        },
        "scipy.sparse.csgraph.tests.test_connected_components": {
            "test_weak_connections": [],
            "test_strong_connections": [],
            "test_strong_connections2": [],
            "test_weak_connections2": [],
            "test_ticket1876": [],
            "test_fully_connected_graph": []
        },
        "scipy.spatial.setup": {
            "configuration": [
                "parent_package",
                "top_path"
            ]
        },
        "scipy.spatial._spherical_voronoi": {
            "calculate_solid_angles": [
                "R"
            ],
            "SphericalVoronoi": {
                "__init__": [
                    "self",
                    "points",
                    "radius",
                    "center",
                    "threshold"
                ],
                "_calc_vertices_regions": [
                    "self"
                ],
                "sort_vertices_of_regions": [
                    "self"
                ],
                "_calculate_areas_3d": [
                    "self"
                ],
                "_calculate_areas_2d": [
                    "self"
                ],
                "calculate_areas": [
                    "self"
                ]
            }
        },
        "scipy.spatial": {},
        "scipy.spatial._procrustes": {
            "procrustes": [
                "data1",
                "data2"
            ]
        },
        "scipy.spatial.distance": {
            "_args_to_kwargs_xdist": [
                "args",
                "kwargs",
                "metric",
                "func_name"
            ],
            "_copy_array_if_base_present": [
                "a"
            ],
            "_correlation_cdist_wrap": [
                "XA",
                "XB",
                "dm"
            ],
            "_correlation_pdist_wrap": [
                "X",
                "dm"
            ],
            "_convert_to_type": [
                "X",
                "out_type"
            ],
            "_filter_deprecated_kwargs": [
                "kwargs",
                "args_blocklist"
            ],
            "_nbool_correspond_all": [
                "u",
                "v",
                "w"
            ],
            "_nbool_correspond_ft_tf": [
                "u",
                "v",
                "w"
            ],
            "_validate_cdist_input": [
                "XA",
                "XB",
                "mA",
                "mB",
                "n",
                "metric_name"
            ],
            "_validate_hamming_kwargs": [
                "X",
                "m",
                "n"
            ],
            "_validate_mahalanobis_kwargs": [
                "X",
                "m",
                "n"
            ],
            "_validate_minkowski_kwargs": [
                "X",
                "m",
                "n"
            ],
            "_validate_pdist_input": [
                "X",
                "m",
                "n",
                "metric_name"
            ],
            "_validate_seuclidean_kwargs": [
                "X",
                "m",
                "n"
            ],
            "_validate_vector": [
                "u",
                "dtype"
            ],
            "_validate_weights": [
                "w",
                "dtype"
            ],
            "_validate_wminkowski_kwargs": [
                "X",
                "m",
                "n"
            ],
            "directed_hausdorff": [
                "u",
                "v",
                "seed"
            ],
            "minkowski": [
                "u",
                "v",
                "p",
                "w"
            ],
            "wminkowski": [
                "u",
                "v",
                "p",
                "w"
            ],
            "euclidean": [
                "u",
                "v",
                "w"
            ],
            "sqeuclidean": [
                "u",
                "v",
                "w"
            ],
            "correlation": [
                "u",
                "v",
                "w",
                "centered"
            ],
            "cosine": [
                "u",
                "v",
                "w"
            ],
            "hamming": [
                "u",
                "v",
                "w"
            ],
            "jaccard": [
                "u",
                "v",
                "w"
            ],
            "kulsinski": [
                "u",
                "v",
                "w"
            ],
            "seuclidean": [
                "u",
                "v",
                "V"
            ],
            "cityblock": [
                "u",
                "v",
                "w"
            ],
            "mahalanobis": [
                "u",
                "v",
                "VI"
            ],
            "chebyshev": [
                "u",
                "v",
                "w"
            ],
            "braycurtis": [
                "u",
                "v",
                "w"
            ],
            "canberra": [
                "u",
                "v",
                "w"
            ],
            "jensenshannon": [
                "p",
                "q",
                "base"
            ],
            "yule": [
                "u",
                "v",
                "w"
            ],
            "matching": [
                "u",
                "v",
                "w"
            ],
            "dice": [
                "u",
                "v",
                "w"
            ],
            "rogerstanimoto": [
                "u",
                "v",
                "w"
            ],
            "russellrao": [
                "u",
                "v",
                "w"
            ],
            "sokalmichener": [
                "u",
                "v",
                "w"
            ],
            "sokalsneath": [
                "u",
                "v",
                "w"
            ],
            "_select_weighted_metric": [
                "mstr",
                "kwargs",
                "out"
            ],
            "pdist": [
                "X",
                "metric"
            ],
            "squareform": [
                "X",
                "force",
                "checks"
            ],
            "is_valid_dm": [
                "D",
                "tol",
                "throw",
                "name",
                "warning"
            ],
            "is_valid_y": [
                "y",
                "warning",
                "throw",
                "name"
            ],
            "num_obs_dm": [
                "d"
            ],
            "num_obs_y": [
                "Y"
            ],
            "cdist": [
                "XA",
                "XB",
                "metric"
            ]
        },
        "scipy.spatial._plotutils": {
            "_held_figure": [
                "func",
                "obj",
                "ax"
            ],
            "_adjust_bounds": [
                "ax",
                "points"
            ],
            "delaunay_plot_2d": [
                "tri",
                "ax"
            ],
            "convex_hull_plot_2d": [
                "hull",
                "ax"
            ],
            "voronoi_plot_2d": [
                "vor",
                "ax"
            ]
        },
        "scipy.spatial.kdtree": {
            "minkowski_distance_p": [
                "x",
                "y",
                "p"
            ],
            "minkowski_distance": [
                "x",
                "y",
                "p"
            ],
            "distance_matrix": [
                "x",
                "y",
                "p",
                "threshold"
            ],
            "Rectangle": {
                "__init__": [
                    "self",
                    "maxes",
                    "mins"
                ],
                "__repr__": [
                    "self"
                ],
                "volume": [
                    "self"
                ],
                "split": [
                    "self",
                    "d",
                    "split"
                ],
                "min_distance_point": [
                    "self",
                    "x",
                    "p"
                ],
                "max_distance_point": [
                    "self",
                    "x",
                    "p"
                ],
                "min_distance_rectangle": [
                    "self",
                    "other",
                    "p"
                ],
                "max_distance_rectangle": [
                    "self",
                    "other",
                    "p"
                ]
            },
            "KDTree": {
                "tree": [
                    "self"
                ],
                "__init__": [
                    "self",
                    "data",
                    "leafsize",
                    "compact_nodes",
                    "copy_data",
                    "balanced_tree",
                    "boxsize"
                ],
                "query": [
                    "self",
                    "x",
                    "k",
                    "eps",
                    "p",
                    "distance_upper_bound",
                    "workers"
                ],
                "query_ball_point": [
                    "self",
                    "x",
                    "r",
                    "p",
                    "eps",
                    "workers",
                    "return_sorted",
                    "return_length"
                ],
                "query_ball_tree": [
                    "self",
                    "other",
                    "r",
                    "p",
                    "eps"
                ],
                "query_pairs": [
                    "self",
                    "r",
                    "p",
                    "eps",
                    "output_type"
                ],
                "count_neighbors": [
                    "self",
                    "other",
                    "r",
                    "p",
                    "weights",
                    "cumulative"
                ],
                "sparse_distance_matrix": [
                    "self",
                    "other",
                    "max_distance",
                    "p",
                    "output_type"
                ]
            }
        },
        "scipy.spatial._geometric_slerp": {
            "_geometric_slerp": [
                "start",
                "end",
                "t"
            ],
            "geometric_slerp": [
                "start",
                "end",
                "t",
                "tol"
            ]
        },
        "scipy.spatial.tests.test_hausdorff": {
            "TestHausdorff": {
                "setup_method": [
                    "self"
                ],
                "test_symmetry": [
                    "self"
                ],
                "test_brute_force_comparison_forward": [
                    "self"
                ],
                "test_brute_force_comparison_reverse": [
                    "self"
                ],
                "test_degenerate_case": [
                    "self"
                ],
                "test_2d_data_forward": [
                    "self"
                ],
                "test_4d_data_reverse": [
                    "self"
                ],
                "test_indices": [
                    "self"
                ],
                "test_random_state": [
                    "self"
                ],
                "test_random_state_None_int": [
                    "self"
                ],
                "test_invalid_dimensions": [
                    "self"
                ],
                "test_subsets": [
                    "self",
                    "A",
                    "B",
                    "seed",
                    "expected"
                ]
            }
        },
        "scipy.spatial.tests.test_spherical_voronoi": {
            "_generate_tetrahedron": [],
            "_generate_cube": [],
            "_generate_octahedron": [],
            "_generate_dodecahedron": [],
            "_generate_icosahedron": [],
            "_generate_polytope": [
                "name"
            ],
            "_hypersphere_area": [
                "dim",
                "radius"
            ],
            "_sample_sphere": [
                "n",
                "dim",
                "seed"
            ],
            "TestSphericalVoronoi": {
                "setup_method": [
                    "self"
                ],
                "test_constructor": [
                    "self"
                ],
                "test_vertices_regions_translation_invariance": [
                    "self"
                ],
                "test_vertices_regions_scaling_invariance": [
                    "self"
                ],
                "test_old_radius_api": [
                    "self"
                ],
                "test_old_radius_api_warning": [
                    "self"
                ],
                "test_sort_vertices_of_regions": [
                    "self"
                ],
                "test_sort_vertices_of_regions_flattened": [
                    "self"
                ],
                "test_sort_vertices_of_regions_dimensionality": [
                    "self"
                ],
                "test_num_vertices": [
                    "self"
                ],
                "test_voronoi_circles": [
                    "self"
                ],
                "test_duplicate_point_handling": [
                    "self"
                ],
                "test_incorrect_radius_handling": [
                    "self"
                ],
                "test_incorrect_center_handling": [
                    "self"
                ],
                "test_single_hemisphere_handling": [
                    "self",
                    "dim",
                    "shift"
                ],
                "test_rank_deficient": [
                    "self",
                    "n",
                    "dim",
                    "shift"
                ],
                "test_higher_dimensions": [
                    "self",
                    "dim"
                ],
                "test_cross_polytope_regions": [
                    "self",
                    "dim"
                ],
                "test_hypercube_regions": [
                    "self",
                    "dim"
                ],
                "test_area_reconstitution": [
                    "self",
                    "n",
                    "dim",
                    "radius",
                    "shift",
                    "single_hemisphere"
                ],
                "test_equal_area_reconstitution": [
                    "self",
                    "poly"
                ],
                "test_area_unsupported_dimension": [
                    "self"
                ],
                "test_attribute_types": [
                    "self",
                    "radius",
                    "center"
                ],
                "test_region_types": [
                    "self"
                ]
            }
        },
        "scipy.spatial.tests.test_slerp": {
            "_generate_spherical_points": [
                "ndim",
                "n_pts"
            ],
            "TestGeometricSlerp": {
                "test_shape_property": [
                    "self",
                    "n_dims",
                    "n_pts"
                ],
                "test_include_ends": [
                    "self",
                    "n_dims",
                    "n_pts"
                ],
                "test_input_shape_flat": [
                    "self",
                    "start",
                    "end"
                ],
                "test_input_dim_mismatch": [
                    "self",
                    "start",
                    "end"
                ],
                "test_input_at_least1d": [
                    "self",
                    "start",
                    "end"
                ],
                "test_handle_antipodes": [
                    "self",
                    "start",
                    "end",
                    "expected"
                ],
                "test_straightforward_examples": [
                    "self",
                    "start",
                    "end",
                    "expected"
                ],
                "test_t_values_limits": [
                    "self",
                    "t"
                ],
                "test_0_sphere_handling": [
                    "self",
                    "start",
                    "end"
                ],
                "test_tol_type": [
                    "self",
                    "tol"
                ],
                "test_tol_sign": [
                    "self",
                    "tol"
                ],
                "test_unit_sphere_enforcement": [
                    "self",
                    "start",
                    "end"
                ],
                "test_order_handling": [
                    "self",
                    "start",
                    "end",
                    "t_func"
                ],
                "test_t_values_conversion": [
                    "self",
                    "t"
                ],
                "test_accept_arraylike": [
                    "self"
                ],
                "test_scalar_t": [
                    "self"
                ],
                "test_degenerate_input": [
                    "self",
                    "start"
                ],
                "test_numerical_stability_pi": [
                    "self",
                    "k"
                ]
            }
        },
        "scipy.spatial.tests.test_qhull": {
            "sorted_tuple": [
                "x"
            ],
            "sorted_unique_tuple": [
                "x"
            ],
            "assert_unordered_tuple_list_equal": [
                "a",
                "b",
                "tpl"
            ],
            "_add_inc_data": [
                "name",
                "chunksize"
            ],
            "assert_hulls_equal": [
                "points",
                "facets_1",
                "facets_2"
            ],
            "Test_Qhull": {
                "test_swapping": [
                    "self"
                ],
                "test_issue_8051": [
                    "self"
                ]
            },
            "TestUtilities": {
                "test_find_simplex": [
                    "self"
                ],
                "test_plane_distance": [
                    "self"
                ],
                "test_convex_hull": [
                    "self"
                ],
                "test_volume_area": [
                    "self"
                ],
                "test_random_volume_area": [
                    "self"
                ],
                "test_incremental_volume_area_random_input": [
                    "self"
                ],
                "_check_barycentric_transforms": [
                    "self",
                    "tri",
                    "err_msg",
                    "unit_cube",
                    "unit_cube_tol"
                ],
                "test_degenerate_barycentric_transforms": [
                    "self"
                ],
                "test_more_barycentric_transforms": [
                    "self"
                ]
            },
            "TestVertexNeighborVertices": {
                "_check": [
                    "self",
                    "tri"
                ],
                "test_triangle": [
                    "self"
                ],
                "test_rectangle": [
                    "self"
                ],
                "test_complicated": [
                    "self"
                ]
            },
            "TestDelaunay": {
                "test_masked_array_fails": [
                    "self"
                ],
                "test_array_with_nans_fails": [
                    "self"
                ],
                "test_nd_simplex": [
                    "self"
                ],
                "test_2d_square": [
                    "self"
                ],
                "test_duplicate_points": [
                    "self"
                ],
                "test_pathological": [
                    "self"
                ],
                "test_joggle": [
                    "self"
                ],
                "test_coplanar": [
                    "self"
                ],
                "test_furthest_site": [
                    "self"
                ],
                "test_incremental": [
                    "self",
                    "name"
                ]
            },
            "TestConvexHull": {
                "test_masked_array_fails": [
                    "self"
                ],
                "test_array_with_nans_fails": [
                    "self"
                ],
                "test_hull_consistency_tri": [
                    "self",
                    "name"
                ],
                "test_incremental": [
                    "self",
                    "name"
                ],
                "test_vertices_2d": [
                    "self"
                ],
                "test_volume_area": [
                    "self"
                ],
                "test_good2d": [
                    "self",
                    "incremental"
                ],
                "test_good2d_incremental_changes": [
                    "self",
                    "new_gen",
                    "expected",
                    "visibility"
                ],
                "test_good2d_no_option": [
                    "self",
                    "incremental"
                ],
                "test_good2d_inside": [
                    "self",
                    "incremental"
                ],
                "test_good3d": [
                    "self",
                    "incremental"
                ]
            },
            "TestVoronoi": {
                "test_masked_array_fails": [
                    "self"
                ],
                "test_simple": [
                    "self"
                ],
                "_compare_qvoronoi": [
                    "self",
                    "points",
                    "output"
                ],
                "test_ridges": [
                    "self",
                    "name"
                ],
                "test_furthest_site": [
                    "self"
                ],
                "test_furthest_site_flag": [
                    "self"
                ],
                "test_incremental": [
                    "self",
                    "name"
                ]
            },
            "Test_HalfspaceIntersection": {
                "assert_unordered_allclose": [
                    "self",
                    "arr1",
                    "arr2",
                    "rtol"
                ],
                "test_cube_halfspace_intersection": [
                    "self"
                ],
                "test_self_dual_polytope_intersection": [
                    "self"
                ],
                "test_wrong_feasible_point": [
                    "self"
                ],
                "test_incremental": [
                    "self"
                ],
                "test_cube": [
                    "self"
                ]
            }
        },
        "scipy.spatial.tests.test__procrustes": {
            "TestProcrustes": {
                "setup_method": [
                    "self"
                ],
                "test_procrustes": [
                    "self"
                ],
                "test_procrustes2": [
                    "self"
                ],
                "test_procrustes_shape_mismatch": [
                    "self"
                ],
                "test_procrustes_empty_rows_or_cols": [
                    "self"
                ],
                "test_procrustes_no_variation": [
                    "self"
                ],
                "test_procrustes_bad_number_of_dimensions": [
                    "self"
                ]
            }
        },
        "scipy.spatial.tests.test_kdtree": {
            "kdtree_type": [
                "request"
            ],
            "KDTreeTest": [
                "kls"
            ],
            "distance_box": [
                "a",
                "b",
                "p",
                "boxsize"
            ],
            "test_random_ball_vectorized": [
                "kdtree_type"
            ],
            "test_query_ball_point_multithreading": [
                "kdtree_type"
            ],
            "test_n_jobs": [],
            "test_distance_l2": [],
            "test_distance_l1": [],
            "test_distance_linf": [],
            "test_distance_vectorization": [],
            "test_distance_matrix": [],
            "test_distance_matrix_looping": [],
            "check_onetree_query": [
                "T",
                "d"
            ],
            "test_onetree_query": [
                "kdtree_type"
            ],
            "test_query_pairs_single_node": [
                "kdtree_type"
            ],
            "test_kdtree_query_pairs": [
                "kdtree_type"
            ],
            "test_ball_point_ints": [
                "kdtree_type"
            ],
            "test_kdtree_comparisons": [],
            "test_kdtree_build_modes": [
                "kdtree_type"
            ],
            "test_kdtree_pickle": [
                "kdtree_type"
            ],
            "test_kdtree_pickle_boxsize": [
                "kdtree_type"
            ],
            "test_kdtree_copy_data": [
                "kdtree_type"
            ],
            "test_ckdtree_parallel": [
                "kdtree_type",
                "monkeypatch"
            ],
            "test_ckdtree_view": [],
            "test_kdtree_list_k": [
                "kdtree_type"
            ],
            "test_kdtree_box": [
                "kdtree_type"
            ],
            "test_kdtree_box_0boxsize": [
                "kdtree_type"
            ],
            "test_kdtree_box_upper_bounds": [
                "kdtree_type"
            ],
            "test_kdtree_box_lower_bounds": [
                "kdtree_type"
            ],
            "simulate_periodic_box": [
                "kdtree",
                "data",
                "k",
                "boxsize",
                "p"
            ],
            "test_ckdtree_memuse": [],
            "test_kdtree_weights": [
                "kdtree_type"
            ],
            "test_kdtree_count_neighbous_multiple_r": [
                "kdtree_type"
            ],
            "test_len0_arrays": [
                "kdtree_type"
            ],
            "test_kdtree_duplicated_inputs": [
                "kdtree_type"
            ],
            "test_kdtree_noncumulative_nondecreasing": [
                "kdtree_type"
            ],
            "test_short_knn": [
                "kdtree_type"
            ],
            "test_query_ball_point_vector_r": [
                "kdtree_type"
            ],
            "test_query_ball_point_length": [
                "kdtree_type"
            ],
            "test_discontiguous": [
                "kdtree_type"
            ],
            "test_kdtree_empty_input": [
                "kdtree_type",
                "balanced_tree",
                "compact_nodes"
            ],
            "test_kdtree_complex_data": [],
            "test_kdtree_tree_access": [],
            "test_kdtree_attributes": [],
            "test_kdtree_count_neighbors_weighted": [
                "kdtree_class"
            ],
            "ConsistencyTests": {
                "distance": [
                    "self",
                    "a",
                    "b",
                    "p"
                ],
                "test_nearest": [
                    "self"
                ],
                "test_m_nearest": [
                    "self"
                ],
                "test_points_near": [
                    "self"
                ],
                "test_points_near_l1": [
                    "self"
                ],
                "test_points_near_linf": [
                    "self"
                ],
                "test_approx": [
                    "self"
                ]
            },
            "_Test_random": {
                "setup_method": [
                    "self"
                ]
            },
            "_Test_random_far": {
                "setup_method": [
                    "self"
                ]
            },
            "_Test_small": {
                "setup_method": [
                    "self"
                ],
                "test_nearest": [
                    "self"
                ],
                "test_nearest_two": [
                    "self"
                ]
            },
            "_Test_small_nonleaf": {
                "setup_method": [
                    "self"
                ]
            },
            "Test_vectorization_KDTree": {
                "setup_method": [
                    "self"
                ],
                "test_single_query": [
                    "self"
                ],
                "test_vectorized_query": [
                    "self"
                ],
                "test_single_query_multiple_neighbors": [
                    "self"
                ],
                "test_vectorized_query_multiple_neighbors": [
                    "self"
                ],
                "test_single_query_all_neighbors": [
                    "self",
                    "r"
                ],
                "test_vectorized_query_all_neighbors": [
                    "self"
                ]
            },
            "Test_vectorization_cKDTree": {
                "setup_method": [
                    "self"
                ],
                "test_single_query": [
                    "self"
                ],
                "test_vectorized_query": [
                    "self"
                ],
                "test_vectorized_query_noncontiguous_values": [
                    "self"
                ],
                "test_single_query_multiple_neighbors": [
                    "self"
                ],
                "test_vectorized_query_multiple_neighbors": [
                    "self"
                ]
            },
            "ball_consistency": {
                "distance": [
                    "self",
                    "a",
                    "b",
                    "p"
                ],
                "test_in_ball": [
                    "self"
                ],
                "test_found_all": [
                    "self"
                ]
            },
            "_Test_random_ball": {
                "setup_method": [
                    "self"
                ]
            },
            "_Test_random_ball_periodic": {
                "distance": [
                    "self",
                    "a",
                    "b",
                    "p"
                ],
                "setup_method": [
                    "self"
                ],
                "test_in_ball_outside": [
                    "self"
                ],
                "test_found_all_outside": [
                    "self"
                ]
            },
            "_Test_random_ball_largep_issue9890": {
                "setup_method": [
                    "self"
                ]
            },
            "_Test_random_ball_approx": {
                "setup_method": [
                    "self"
                ]
            },
            "_Test_random_ball_approx_periodic": {
                "setup_method": [
                    "self"
                ]
            },
            "_Test_random_ball_far": {
                "setup_method": [
                    "self"
                ]
            },
            "_Test_random_ball_far_periodic": {
                "setup_method": [
                    "self"
                ]
            },
            "_Test_random_ball_l1": {
                "setup_method": [
                    "self"
                ]
            },
            "_Test_random_ball_linf": {
                "setup_method": [
                    "self"
                ]
            },
            "two_trees_consistency": {
                "distance": [
                    "self",
                    "a",
                    "b",
                    "p"
                ],
                "test_all_in_ball": [
                    "self"
                ],
                "test_found_all": [
                    "self"
                ]
            },
            "_Test_two_random_trees": {
                "setup_method": [
                    "self"
                ]
            },
            "_Test_two_random_trees_periodic": {
                "distance": [
                    "self",
                    "a",
                    "b",
                    "p"
                ],
                "setup_method": [
                    "self"
                ]
            },
            "_Test_two_random_trees_far": {
                "setup_method": [
                    "self"
                ]
            },
            "_Test_two_random_trees_far_periodic": {
                "setup_method": [
                    "self"
                ]
            },
            "_Test_two_random_trees_linf": {
                "setup_method": [
                    "self"
                ]
            },
            "_Test_two_random_trees_linf_periodic": {
                "setup_method": [
                    "self"
                ]
            },
            "Test_rectangle": {
                "setup_method": [
                    "self"
                ],
                "test_min_inside": [
                    "self"
                ],
                "test_min_one_side": [
                    "self"
                ],
                "test_min_two_sides": [
                    "self"
                ],
                "test_max_inside": [
                    "self"
                ],
                "test_max_one_side": [
                    "self"
                ],
                "test_max_two_sides": [
                    "self"
                ],
                "test_split": [
                    "self"
                ]
            },
            "count_neighbors_consistency": {
                "test_one_radius": [
                    "self"
                ],
                "test_large_radius": [
                    "self"
                ],
                "test_multiple_radius": [
                    "self"
                ]
            },
            "_Test_count_neighbors": {
                "setup_method": [
                    "self"
                ]
            },
            "sparse_distance_matrix_consistency": {
                "distance": [
                    "self",
                    "a",
                    "b",
                    "p"
                ],
                "test_consistency_with_neighbors": [
                    "self"
                ],
                "test_zero_distance": [
                    "self"
                ],
                "test_consistency": [
                    "self"
                ],
                "test_against_logic_error_regression": [
                    "self"
                ],
                "test_ckdtree_return_types": [
                    "self"
                ]
            },
            "_Test_sparse_distance_matrix": {
                "setup_method": [
                    "self"
                ]
            },
            "_Test_sorted_query_ball_point": {
                "setup_method": [
                    "self"
                ],
                "test_return_sorted_True": [
                    "self"
                ],
                "test_return_sorted_None": [
                    "self"
                ]
            }
        },
        "scipy.spatial.tests": {},
        "scipy.spatial.tests.test_distance": {
            "load_testing_files": [],
            "_is_32bit": [],
            "_chk_asarrays": [
                "arrays",
                "axis"
            ],
            "_chk_weights": [
                "arrays",
                "weights",
                "axis",
                "force_weights",
                "simplify_weights",
                "pos_only",
                "neg_check",
                "nan_screen",
                "mask_screen",
                "ddof"
            ],
            "_freq_weights": [
                "weights"
            ],
            "_weight_masked": [
                "arrays",
                "weights",
                "axis"
            ],
            "within_tol": [
                "a",
                "b",
                "tol"
            ],
            "_assert_within_tol": [
                "a",
                "b",
                "atol",
                "rtol",
                "verbose_"
            ],
            "_rand_split": [
                "arrays",
                "weights",
                "axis",
                "split_per",
                "seed"
            ],
            "_rough_check": [
                "a",
                "b",
                "compare_assert",
                "key",
                "w"
            ],
            "_weight_checked": [
                "fn",
                "n_args",
                "default_axis",
                "key",
                "weight_arg",
                "squeeze",
                "silent",
                "ones_test",
                "const_test",
                "dup_test",
                "split_test",
                "dud_test",
                "ma_safe",
                "ma_very_safe",
                "nan_safe",
                "split_per",
                "seed",
                "compare_assert"
            ],
            "is_valid_dm_throw": [
                "D"
            ],
            "is_valid_y_throw": [
                "y"
            ],
            "test_bad_p": [],
            "test_sokalsneath_all_false": [],
            "test_canberra": [],
            "test_braycurtis": [],
            "test_euclideans": [],
            "test_hamming_unequal_length": [],
            "test_hamming_string_array": [],
            "test_minkowski_w": [],
            "test_sqeuclidean_dtypes": [],
            "test_sokalmichener": [],
            "test_modifies_input": [],
            "test_Xdist_deprecated_args": [],
            "test_Xdist_non_negative_weights": [],
            "test__validate_vector": [],
            "test_yule_all_same": [],
            "TestCdist": {
                "setup_method": [
                    "self"
                ],
                "test_cdist_extra_args": [
                    "self"
                ],
                "test_cdist_euclidean_random_unicode": [
                    "self"
                ],
                "test_cdist_minkowski_random": [
                    "self",
                    "p"
                ],
                "test_cdist_cosine_random": [
                    "self"
                ],
                "test_cdist_mahalanobis": [
                    "self"
                ],
                "test_cdist_custom_notdouble": [
                    "self"
                ],
                "_check_calling_conventions": [
                    "self",
                    "X1",
                    "X2",
                    "metric",
                    "eps"
                ],
                "test_cdist_calling_conventions": [
                    "self"
                ],
                "test_cdist_dtype_equivalence": [
                    "self"
                ],
                "test_cdist_out": [
                    "self"
                ],
                "test_striding": [
                    "self"
                ]
            },
            "TestPdist": {
                "setup_method": [
                    "self"
                ],
                "test_pdist_extra_args": [
                    "self"
                ],
                "test_pdist_euclidean_random": [
                    "self"
                ],
                "test_pdist_euclidean_random_u": [
                    "self"
                ],
                "test_pdist_euclidean_random_float32": [
                    "self"
                ],
                "test_pdist_euclidean_random_nonC": [
                    "self"
                ],
                "test_pdist_euclidean_iris_double": [
                    "self"
                ],
                "test_pdist_euclidean_iris_float32": [
                    "self"
                ],
                "test_pdist_euclidean_iris_nonC": [
                    "self"
                ],
                "test_pdist_seuclidean_random": [
                    "self"
                ],
                "test_pdist_seuclidean_random_float32": [
                    "self"
                ],
                "test_pdist_seuclidean_random_nonC": [
                    "self"
                ],
                "test_pdist_seuclidean_iris": [
                    "self"
                ],
                "test_pdist_seuclidean_iris_float32": [
                    "self"
                ],
                "test_pdist_seuclidean_iris_nonC": [
                    "self"
                ],
                "test_pdist_cosine_random": [
                    "self"
                ],
                "test_pdist_cosine_random_float32": [
                    "self"
                ],
                "test_pdist_cosine_random_nonC": [
                    "self"
                ],
                "test_pdist_cosine_iris": [
                    "self"
                ],
                "test_pdist_cosine_iris_float32": [
                    "self"
                ],
                "test_pdist_cosine_iris_nonC": [
                    "self"
                ],
                "test_pdist_cosine_bounds": [
                    "self"
                ],
                "test_pdist_cityblock_random": [
                    "self"
                ],
                "test_pdist_cityblock_random_float32": [
                    "self"
                ],
                "test_pdist_cityblock_random_nonC": [
                    "self"
                ],
                "test_pdist_cityblock_iris": [
                    "self"
                ],
                "test_pdist_cityblock_iris_float32": [
                    "self"
                ],
                "test_pdist_cityblock_iris_nonC": [
                    "self"
                ],
                "test_pdist_correlation_random": [
                    "self"
                ],
                "test_pdist_correlation_random_float32": [
                    "self"
                ],
                "test_pdist_correlation_random_nonC": [
                    "self"
                ],
                "test_pdist_correlation_iris": [
                    "self"
                ],
                "test_pdist_correlation_iris_float32": [
                    "self"
                ],
                "test_pdist_correlation_iris_nonC": [
                    "self"
                ],
                "test_pdist_minkowski_random_p": [
                    "self",
                    "p"
                ],
                "test_pdist_minkowski_random": [
                    "self"
                ],
                "test_pdist_minkowski_random_float32": [
                    "self"
                ],
                "test_pdist_minkowski_random_nonC": [
                    "self"
                ],
                "test_pdist_minkowski_3_2_iris": [
                    "self"
                ],
                "test_pdist_minkowski_3_2_iris_float32": [
                    "self"
                ],
                "test_pdist_minkowski_3_2_iris_nonC": [
                    "self"
                ],
                "test_pdist_minkowski_5_8_iris": [
                    "self"
                ],
                "test_pdist_minkowski_5_8_iris_float32": [
                    "self"
                ],
                "test_pdist_minkowski_5_8_iris_nonC": [
                    "self"
                ],
                "test_pdist_mahalanobis": [
                    "self"
                ],
                "test_pdist_hamming_random": [
                    "self"
                ],
                "test_pdist_hamming_random_float32": [
                    "self"
                ],
                "test_pdist_hamming_random_nonC": [
                    "self"
                ],
                "test_pdist_dhamming_random": [
                    "self"
                ],
                "test_pdist_dhamming_random_float32": [
                    "self"
                ],
                "test_pdist_dhamming_random_nonC": [
                    "self"
                ],
                "test_pdist_jaccard_random": [
                    "self"
                ],
                "test_pdist_jaccard_random_float32": [
                    "self"
                ],
                "test_pdist_jaccard_random_nonC": [
                    "self"
                ],
                "test_pdist_djaccard_random": [
                    "self"
                ],
                "test_pdist_djaccard_random_float32": [
                    "self"
                ],
                "test_pdist_djaccard_allzeros": [
                    "self"
                ],
                "test_pdist_djaccard_random_nonC": [
                    "self"
                ],
                "test_pdist_jensenshannon_random": [
                    "self"
                ],
                "test_pdist_jensenshannon_random_float32": [
                    "self"
                ],
                "test_pdist_jensenshannon_random_nonC": [
                    "self"
                ],
                "test_pdist_jensenshannon_iris": [
                    "self"
                ],
                "test_pdist_jensenshannon_iris_float32": [
                    "self"
                ],
                "test_pdist_jensenshannon_iris_nonC": [
                    "self"
                ],
                "test_pdist_djaccard_allzeros_nonC": [
                    "self"
                ],
                "test_pdist_chebyshev_random": [
                    "self"
                ],
                "test_pdist_chebyshev_random_float32": [
                    "self"
                ],
                "test_pdist_chebyshev_random_nonC": [
                    "self"
                ],
                "test_pdist_chebyshev_iris": [
                    "self"
                ],
                "test_pdist_chebyshev_iris_float32": [
                    "self"
                ],
                "test_pdist_chebyshev_iris_nonC": [
                    "self"
                ],
                "test_pdist_matching_mtica1": [
                    "self"
                ],
                "test_pdist_matching_mtica2": [
                    "self"
                ],
                "test_pdist_jaccard_mtica1": [
                    "self"
                ],
                "test_pdist_jaccard_mtica2": [
                    "self"
                ],
                "test_pdist_yule_mtica1": [
                    "self"
                ],
                "test_pdist_yule_mtica2": [
                    "self"
                ],
                "test_pdist_dice_mtica1": [
                    "self"
                ],
                "test_pdist_dice_mtica2": [
                    "self"
                ],
                "test_pdist_sokalsneath_mtica1": [
                    "self"
                ],
                "test_pdist_sokalsneath_mtica2": [
                    "self"
                ],
                "test_pdist_rogerstanimoto_mtica1": [
                    "self"
                ],
                "test_pdist_rogerstanimoto_mtica2": [
                    "self"
                ],
                "test_pdist_russellrao_mtica1": [
                    "self"
                ],
                "test_pdist_russellrao_mtica2": [
                    "self"
                ],
                "test_pdist_canberra_match": [
                    "self"
                ],
                "test_pdist_canberra_ticket_711": [
                    "self"
                ],
                "test_pdist_custom_notdouble": [
                    "self"
                ],
                "_check_calling_conventions": [
                    "self",
                    "X",
                    "metric",
                    "eps"
                ],
                "test_pdist_calling_conventions": [
                    "self"
                ],
                "test_pdist_dtype_equivalence": [
                    "self"
                ],
                "test_pdist_out": [
                    "self"
                ],
                "test_striding": [
                    "self"
                ]
            },
            "TestSomeDistanceFunctions": {
                "setup_method": [
                    "self"
                ],
                "test_minkowski": [
                    "self"
                ],
                "test_old_wminkowski": [
                    "self"
                ],
                "test_euclidean": [
                    "self"
                ],
                "test_sqeuclidean": [
                    "self"
                ],
                "test_cosine": [
                    "self"
                ],
                "test_correlation": [
                    "self"
                ],
                "test_correlation_positive": [
                    "self"
                ],
                "test_mahalanobis": [
                    "self"
                ]
            },
            "TestSquareForm": {
                "test_squareform_matrix": [
                    "self"
                ],
                "test_squareform_vector": [
                    "self"
                ],
                "check_squareform_matrix": [
                    "self",
                    "dtype"
                ],
                "check_squareform_vector": [
                    "self",
                    "dtype"
                ],
                "test_squareform_multi_matrix": [
                    "self"
                ],
                "check_squareform_multi_matrix": [
                    "self",
                    "n"
                ]
            },
            "TestNumObsY": {
                "test_num_obs_y_multi_matrix": [
                    "self"
                ],
                "test_num_obs_y_1": [
                    "self"
                ],
                "test_num_obs_y_2": [
                    "self"
                ],
                "test_num_obs_y_3": [
                    "self"
                ],
                "test_num_obs_y_4": [
                    "self"
                ],
                "test_num_obs_y_5_10": [
                    "self"
                ],
                "test_num_obs_y_2_100": [
                    "self"
                ],
                "minit": [
                    "self",
                    "n"
                ],
                "bad_y": [
                    "self",
                    "n"
                ],
                "check_y": [
                    "self",
                    "n"
                ],
                "make_y": [
                    "self",
                    "n"
                ]
            },
            "TestNumObsDM": {
                "test_num_obs_dm_multi_matrix": [
                    "self"
                ],
                "test_num_obs_dm_0": [
                    "self"
                ],
                "test_num_obs_dm_1": [
                    "self"
                ],
                "test_num_obs_dm_2": [
                    "self"
                ],
                "test_num_obs_dm_3": [
                    "self"
                ],
                "test_num_obs_dm_4": [
                    "self"
                ],
                "check_D": [
                    "self",
                    "n"
                ],
                "make_D": [
                    "self",
                    "n"
                ]
            },
            "TestIsValidDM": {
                "test_is_valid_dm_improper_shape_1D_E": [
                    "self"
                ],
                "test_is_valid_dm_improper_shape_1D_F": [
                    "self"
                ],
                "test_is_valid_dm_improper_shape_3D_E": [
                    "self"
                ],
                "test_is_valid_dm_improper_shape_3D_F": [
                    "self"
                ],
                "test_is_valid_dm_nonzero_diagonal_E": [
                    "self"
                ],
                "test_is_valid_dm_nonzero_diagonal_F": [
                    "self"
                ],
                "test_is_valid_dm_asymmetric_E": [
                    "self"
                ],
                "test_is_valid_dm_asymmetric_F": [
                    "self"
                ],
                "test_is_valid_dm_correct_1_by_1": [
                    "self"
                ],
                "test_is_valid_dm_correct_2_by_2": [
                    "self"
                ],
                "test_is_valid_dm_correct_3_by_3": [
                    "self"
                ],
                "test_is_valid_dm_correct_4_by_4": [
                    "self"
                ],
                "test_is_valid_dm_correct_5_by_5": [
                    "self"
                ]
            },
            "TestIsValidY": {
                "test_is_valid_y_improper_shape_2D_E": [
                    "self"
                ],
                "test_is_valid_y_improper_shape_2D_F": [
                    "self"
                ],
                "test_is_valid_y_improper_shape_3D_E": [
                    "self"
                ],
                "test_is_valid_y_improper_shape_3D_F": [
                    "self"
                ],
                "test_is_valid_y_correct_2_by_2": [
                    "self"
                ],
                "test_is_valid_y_correct_3_by_3": [
                    "self"
                ],
                "test_is_valid_y_correct_4_by_4": [
                    "self"
                ],
                "test_is_valid_y_correct_5_by_5": [
                    "self"
                ],
                "test_is_valid_y_2_100": [
                    "self"
                ],
                "bad_y": [
                    "self",
                    "n"
                ],
                "correct_n_by_n": [
                    "self",
                    "n"
                ]
            }
        },
        "scipy.spatial.tests.test__plotutils": {
            "TestPlotting": {
                "test_delaunay": [
                    "self"
                ],
                "test_voronoi": [
                    "self"
                ],
                "test_convex_hull": [
                    "self"
                ]
            }
        },
        "scipy.spatial.transform.setup": {
            "configuration": [
                "parent_package",
                "top_path"
            ]
        },
        "scipy.spatial.transform._rotation_groups": {
            "icosahedral": [
                "cls"
            ],
            "octahedral": [
                "cls"
            ],
            "tetrahedral": [
                "cls"
            ],
            "dicyclic": [
                "cls",
                "n",
                "axis"
            ],
            "cyclic": [
                "cls",
                "n",
                "axis"
            ],
            "create_group": [
                "cls",
                "group",
                "axis"
            ]
        },
        "scipy.spatial.transform": {},
        "scipy.spatial.transform._rotation_spline": {
            "_create_skew_matrix": [
                "x"
            ],
            "_matrix_vector_product_of_stacks": [
                "A",
                "b"
            ],
            "_angular_rate_to_rotvec_dot_matrix": [
                "rotvecs"
            ],
            "_rotvec_dot_to_angular_rate_matrix": [
                "rotvecs"
            ],
            "_angular_acceleration_nonlinear_term": [
                "rotvecs",
                "rotvecs_dot"
            ],
            "_compute_angular_rate": [
                "rotvecs",
                "rotvecs_dot"
            ],
            "_compute_angular_acceleration": [
                "rotvecs",
                "rotvecs_dot",
                "rotvecs_dot_dot"
            ],
            "_create_block_3_diagonal_matrix": [
                "A",
                "B",
                "d"
            ],
            "RotationSpline": {
                "_solve_for_angular_rates": [
                    "self",
                    "dt",
                    "angular_rates",
                    "rotvecs"
                ],
                "__init__": [
                    "self",
                    "times",
                    "rotations"
                ],
                "__call__": [
                    "self",
                    "times",
                    "order"
                ]
            }
        },
        "scipy.spatial.transform.tests.test_rotation": {
            "test_generic_quat_matrix": [],
            "test_from_single_1d_quaternion": [],
            "test_from_single_2d_quaternion": [],
            "test_from_square_quat_matrix": [],
            "test_malformed_1d_from_quat": [],
            "test_malformed_2d_from_quat": [],
            "test_zero_norms_from_quat": [],
            "test_as_matrix_single_1d_quaternion": [],
            "test_as_matrix_single_2d_quaternion": [],
            "test_as_matrix_from_square_input": [],
            "test_as_matrix_from_generic_input": [],
            "test_from_single_2d_matrix": [],
            "test_from_single_3d_matrix": [],
            "test_from_matrix_calculation": [],
            "test_matrix_calculation_pipeline": [],
            "test_from_matrix_ortho_output": [],
            "test_from_1d_single_rotvec": [],
            "test_from_2d_single_rotvec": [],
            "test_from_generic_rotvec": [],
            "test_from_rotvec_small_angle": [],
            "test_malformed_1d_from_rotvec": [],
            "test_malformed_2d_from_rotvec": [],
            "test_as_generic_rotvec": [],
            "test_as_rotvec_single_1d_input": [],
            "test_as_rotvec_single_2d_input": [],
            "test_rotvec_calc_pipeline": [],
            "test_from_1d_single_mrp": [],
            "test_from_2d_single_mrp": [],
            "test_from_generic_mrp": [],
            "test_malformed_1d_from_mrp": [],
            "test_malformed_2d_from_mrp": [],
            "test_as_generic_mrp": [],
            "test_past_180_degree_rotation": [],
            "test_as_mrp_single_1d_input": [],
            "test_as_mrp_single_2d_input": [],
            "test_mrp_calc_pipeline": [],
            "test_from_euler_single_rotation": [],
            "test_single_intrinsic_extrinsic_rotation": [],
            "test_from_euler_rotation_order": [],
            "test_from_euler_elementary_extrinsic_rotation": [],
            "test_from_euler_intrinsic_rotation_312": [],
            "test_from_euler_intrinsic_rotation_313": [],
            "test_from_euler_extrinsic_rotation_312": [],
            "test_from_euler_extrinsic_rotation_313": [],
            "test_as_euler_asymmetric_axes": [],
            "test_as_euler_symmetric_axes": [],
            "test_as_euler_degenerate_asymmetric_axes": [],
            "test_as_euler_degenerate_symmetric_axes": [],
            "test_inv": [],
            "test_inv_single_rotation": [],
            "test_identity_magnitude": [],
            "test_single_identity_magnitude": [],
            "test_identity_invariance": [],
            "test_single_identity_invariance": [],
            "test_magnitude": [],
            "test_magnitude_single_rotation": [],
            "test_mean": [],
            "test_weighted_mean": [],
            "test_mean_invalid_weights": [],
            "test_reduction_no_indices": [],
            "test_reduction_none_indices": [],
            "test_reduction_scalar_calculation": [],
            "test_apply_single_rotation_single_point": [],
            "test_apply_single_rotation_multiple_points": [],
            "test_apply_multiple_rotations_single_point": [],
            "test_apply_multiple_rotations_multiple_points": [],
            "test_getitem": [],
            "test_n_rotations": [],
            "test_align_vectors_no_rotation": [],
            "test_align_vectors_no_noise": [],
            "test_align_vectors_improper_rotation": [],
            "test_align_vectors_scaled_weights": [],
            "test_align_vectors_noise": [],
            "test_align_vectors_single_vector": [],
            "test_align_vectors_invalid_input": [],
            "test_random_rotation_shape": [],
            "test_slerp": [],
            "test_slerp_single_rot": [],
            "test_slerp_time_dim_mismatch": [],
            "test_slerp_num_rotations_mismatch": [],
            "test_slerp_equal_times": [],
            "test_slerp_decreasing_times": [],
            "test_slerp_call_time_dim_mismatch": [],
            "test_slerp_call_time_out_of_range": [],
            "test_slerp_call_scalar_time": [],
            "test_multiplication_stability": [],
            "test_rotation_within_numpy_array": [],
            "test_pickling": [],
            "test_deepcopy": [],
            "test_as_euler_contiguous": []
        },
        "scipy.spatial.transform.tests.test_rotation_spline": {
            "test_angular_rate_to_rotvec_conversions": [],
            "test_angular_rate_nonlinear_term": [],
            "test_create_block_3_diagonal_matrix": [],
            "test_spline_2_rotations": [],
            "test_constant_attitude": [],
            "test_spline_properties": [],
            "test_error_handling": []
        },
        "scipy.spatial.transform.tests": {},
        "scipy.spatial.transform.tests.test_rotation_groups": {
            "_calculate_rmsd": [
                "P",
                "Q"
            ],
            "_generate_pyramid": [
                "n",
                "axis"
            ],
            "_generate_prism": [
                "n",
                "axis"
            ],
            "_generate_icosahedron": [],
            "_generate_octahedron": [],
            "_generate_tetrahedron": [],
            "test_group_type": [
                "name"
            ],
            "test_group_name": [
                "name"
            ],
            "test_group_order_positive": [
                "name"
            ],
            "test_axis_valid": [
                "axis"
            ],
            "test_icosahedral": [],
            "test_octahedral": [],
            "test_tetrahedral": [],
            "test_dicyclic": [
                "n",
                "axis"
            ],
            "test_cyclic": [
                "n",
                "axis"
            ],
            "test_group_sizes": [
                "name",
                "size"
            ],
            "test_group_no_duplicates": [
                "name",
                "size"
            ],
            "test_group_symmetry": [
                "name",
                "size"
            ],
            "test_reduction": [
                "name"
            ],
            "test_single_reduction": [
                "name"
            ]
        },
        "scipy.ndimage._ni_support": {
            "_extend_mode_to_code": [
                "mode"
            ],
            "_normalize_sequence": [
                "input",
                "rank"
            ],
            "_get_output": [
                "output",
                "input",
                "shape",
                "complex_output"
            ]
        },
        "scipy.ndimage._ni_docstrings": {},
        "scipy.ndimage.morphology": {
            "_center_is_true": [
                "structure",
                "origin"
            ],
            "iterate_structure": [
                "structure",
                "iterations",
                "origin"
            ],
            "generate_binary_structure": [
                "rank",
                "connectivity"
            ],
            "_binary_erosion": [
                "input",
                "structure",
                "iterations",
                "mask",
                "output",
                "border_value",
                "origin",
                "invert",
                "brute_force"
            ],
            "binary_erosion": [
                "input",
                "structure",
                "iterations",
                "mask",
                "output",
                "border_value",
                "origin",
                "brute_force"
            ],
            "binary_dilation": [
                "input",
                "structure",
                "iterations",
                "mask",
                "output",
                "border_value",
                "origin",
                "brute_force"
            ],
            "binary_opening": [
                "input",
                "structure",
                "iterations",
                "output",
                "origin",
                "mask",
                "border_value",
                "brute_force"
            ],
            "binary_closing": [
                "input",
                "structure",
                "iterations",
                "output",
                "origin",
                "mask",
                "border_value",
                "brute_force"
            ],
            "binary_hit_or_miss": [
                "input",
                "structure1",
                "structure2",
                "output",
                "origin1",
                "origin2"
            ],
            "binary_propagation": [
                "input",
                "structure",
                "mask",
                "output",
                "border_value",
                "origin"
            ],
            "binary_fill_holes": [
                "input",
                "structure",
                "output",
                "origin"
            ],
            "grey_erosion": [
                "input",
                "size",
                "footprint",
                "structure",
                "output",
                "mode",
                "cval",
                "origin"
            ],
            "grey_dilation": [
                "input",
                "size",
                "footprint",
                "structure",
                "output",
                "mode",
                "cval",
                "origin"
            ],
            "grey_opening": [
                "input",
                "size",
                "footprint",
                "structure",
                "output",
                "mode",
                "cval",
                "origin"
            ],
            "grey_closing": [
                "input",
                "size",
                "footprint",
                "structure",
                "output",
                "mode",
                "cval",
                "origin"
            ],
            "morphological_gradient": [
                "input",
                "size",
                "footprint",
                "structure",
                "output",
                "mode",
                "cval",
                "origin"
            ],
            "morphological_laplace": [
                "input",
                "size",
                "footprint",
                "structure",
                "output",
                "mode",
                "cval",
                "origin"
            ],
            "white_tophat": [
                "input",
                "size",
                "footprint",
                "structure",
                "output",
                "mode",
                "cval",
                "origin"
            ],
            "black_tophat": [
                "input",
                "size",
                "footprint",
                "structure",
                "output",
                "mode",
                "cval",
                "origin"
            ],
            "distance_transform_bf": [
                "input",
                "metric",
                "sampling",
                "return_distances",
                "return_indices",
                "distances",
                "indices"
            ],
            "distance_transform_cdt": [
                "input",
                "metric",
                "return_distances",
                "return_indices",
                "distances",
                "indices"
            ],
            "distance_transform_edt": [
                "input",
                "sampling",
                "return_distances",
                "return_indices",
                "distances",
                "indices"
            ]
        },
        "scipy.ndimage.measurements": {
            "label": [
                "input",
                "structure",
                "output"
            ],
            "find_objects": [
                "input",
                "max_label"
            ],
            "labeled_comprehension": [
                "input",
                "labels",
                "index",
                "func",
                "out_dtype",
                "default",
                "pass_positions"
            ],
            "_safely_castable_to_int": [
                "dt"
            ],
            "_stats": [
                "input",
                "labels",
                "index",
                "centered"
            ],
            "sum": [
                "input",
                "labels",
                "index"
            ],
            "sum_labels": [
                "input",
                "labels",
                "index"
            ],
            "mean": [
                "input",
                "labels",
                "index"
            ],
            "variance": [
                "input",
                "labels",
                "index"
            ],
            "standard_deviation": [
                "input",
                "labels",
                "index"
            ],
            "_select": [
                "input",
                "labels",
                "index",
                "find_min",
                "find_max",
                "find_min_positions",
                "find_max_positions",
                "find_median"
            ],
            "minimum": [
                "input",
                "labels",
                "index"
            ],
            "maximum": [
                "input",
                "labels",
                "index"
            ],
            "median": [
                "input",
                "labels",
                "index"
            ],
            "minimum_position": [
                "input",
                "labels",
                "index"
            ],
            "maximum_position": [
                "input",
                "labels",
                "index"
            ],
            "extrema": [
                "input",
                "labels",
                "index"
            ],
            "center_of_mass": [
                "input",
                "labels",
                "index"
            ],
            "histogram": [
                "input",
                "min",
                "max",
                "bins",
                "labels",
                "index"
            ],
            "watershed_ift": [
                "input",
                "markers",
                "structure",
                "output"
            ]
        },
        "scipy.ndimage.setup": {
            "configuration": [
                "parent_package",
                "top_path"
            ]
        },
        "scipy.ndimage": {},
        "scipy.ndimage.interpolation": {
            "spline_filter1d": [
                "input",
                "order",
                "axis",
                "output",
                "mode"
            ],
            "spline_filter": [
                "input",
                "order",
                "output",
                "mode"
            ],
            "_prepad_for_spline_filter": [
                "input",
                "mode",
                "cval"
            ],
            "geometric_transform": [
                "input",
                "mapping",
                "output_shape",
                "output",
                "order",
                "mode",
                "cval",
                "prefilter",
                "extra_arguments",
                "extra_keywords"
            ],
            "map_coordinates": [
                "input",
                "coordinates",
                "output",
                "order",
                "mode",
                "cval",
                "prefilter"
            ],
            "affine_transform": [
                "input",
                "matrix",
                "offset",
                "output_shape",
                "output",
                "order",
                "mode",
                "cval",
                "prefilter"
            ],
            "shift": [
                "input",
                "shift",
                "output",
                "order",
                "mode",
                "cval",
                "prefilter"
            ],
            "zoom": [
                "input",
                "zoom",
                "output",
                "order",
                "mode",
                "cval",
                "prefilter"
            ],
            "rotate": [
                "input",
                "angle",
                "axes",
                "reshape",
                "output",
                "order",
                "mode",
                "cval",
                "prefilter"
            ]
        },
        "scipy.ndimage.filters": {
            "_invalid_origin": [
                "origin",
                "lenw"
            ],
            "_complex_via_real_components": [
                "func",
                "input",
                "weights",
                "output",
                "cval"
            ],
            "correlate1d": [
                "input",
                "weights",
                "axis",
                "output",
                "mode",
                "cval",
                "origin"
            ],
            "convolve1d": [
                "input",
                "weights",
                "axis",
                "output",
                "mode",
                "cval",
                "origin"
            ],
            "_gaussian_kernel1d": [
                "sigma",
                "order",
                "radius"
            ],
            "gaussian_filter1d": [
                "input",
                "sigma",
                "axis",
                "order",
                "output",
                "mode",
                "cval",
                "truncate"
            ],
            "gaussian_filter": [
                "input",
                "sigma",
                "order",
                "output",
                "mode",
                "cval",
                "truncate"
            ],
            "prewitt": [
                "input",
                "axis",
                "output",
                "mode",
                "cval"
            ],
            "sobel": [
                "input",
                "axis",
                "output",
                "mode",
                "cval"
            ],
            "generic_laplace": [
                "input",
                "derivative2",
                "output",
                "mode",
                "cval",
                "extra_arguments",
                "extra_keywords"
            ],
            "laplace": [
                "input",
                "output",
                "mode",
                "cval"
            ],
            "gaussian_laplace": [
                "input",
                "sigma",
                "output",
                "mode",
                "cval"
            ],
            "generic_gradient_magnitude": [
                "input",
                "derivative",
                "output",
                "mode",
                "cval",
                "extra_arguments",
                "extra_keywords"
            ],
            "gaussian_gradient_magnitude": [
                "input",
                "sigma",
                "output",
                "mode",
                "cval"
            ],
            "_correlate_or_convolve": [
                "input",
                "weights",
                "output",
                "mode",
                "cval",
                "origin",
                "convolution"
            ],
            "correlate": [
                "input",
                "weights",
                "output",
                "mode",
                "cval",
                "origin"
            ],
            "convolve": [
                "input",
                "weights",
                "output",
                "mode",
                "cval",
                "origin"
            ],
            "uniform_filter1d": [
                "input",
                "size",
                "axis",
                "output",
                "mode",
                "cval",
                "origin"
            ],
            "uniform_filter": [
                "input",
                "size",
                "output",
                "mode",
                "cval",
                "origin"
            ],
            "minimum_filter1d": [
                "input",
                "size",
                "axis",
                "output",
                "mode",
                "cval",
                "origin"
            ],
            "maximum_filter1d": [
                "input",
                "size",
                "axis",
                "output",
                "mode",
                "cval",
                "origin"
            ],
            "_min_or_max_filter": [
                "input",
                "size",
                "footprint",
                "structure",
                "output",
                "mode",
                "cval",
                "origin",
                "minimum"
            ],
            "minimum_filter": [
                "input",
                "size",
                "footprint",
                "output",
                "mode",
                "cval",
                "origin"
            ],
            "maximum_filter": [
                "input",
                "size",
                "footprint",
                "output",
                "mode",
                "cval",
                "origin"
            ],
            "_rank_filter": [
                "input",
                "rank",
                "size",
                "footprint",
                "output",
                "mode",
                "cval",
                "origin",
                "operation"
            ],
            "rank_filter": [
                "input",
                "rank",
                "size",
                "footprint",
                "output",
                "mode",
                "cval",
                "origin"
            ],
            "median_filter": [
                "input",
                "size",
                "footprint",
                "output",
                "mode",
                "cval",
                "origin"
            ],
            "percentile_filter": [
                "input",
                "percentile",
                "size",
                "footprint",
                "output",
                "mode",
                "cval",
                "origin"
            ],
            "generic_filter1d": [
                "input",
                "function",
                "filter_size",
                "axis",
                "output",
                "mode",
                "cval",
                "origin",
                "extra_arguments",
                "extra_keywords"
            ],
            "generic_filter": [
                "input",
                "function",
                "size",
                "footprint",
                "output",
                "mode",
                "cval",
                "origin",
                "extra_arguments",
                "extra_keywords"
            ]
        },
        "scipy.ndimage.fourier": {
            "_get_output_fourier": [
                "output",
                "input"
            ],
            "_get_output_fourier_complex": [
                "output",
                "input"
            ],
            "fourier_gaussian": [
                "input",
                "sigma",
                "n",
                "axis",
                "output"
            ],
            "fourier_uniform": [
                "input",
                "size",
                "n",
                "axis",
                "output"
            ],
            "fourier_ellipsoid": [
                "input",
                "size",
                "n",
                "axis",
                "output"
            ],
            "fourier_shift": [
                "input",
                "shift",
                "n",
                "axis",
                "output"
            ]
        },
        "scipy.ndimage.tests.test_fourier": {
            "TestNdimageFourier": {
                "test_fourier_gaussian_real01": [
                    "self",
                    "shape",
                    "dtype",
                    "dec"
                ],
                "test_fourier_gaussian_complex01": [
                    "self",
                    "shape",
                    "dtype",
                    "dec"
                ],
                "test_fourier_uniform_real01": [
                    "self",
                    "shape",
                    "dtype",
                    "dec"
                ],
                "test_fourier_uniform_complex01": [
                    "self",
                    "shape",
                    "dtype",
                    "dec"
                ],
                "test_fourier_shift_real01": [
                    "self",
                    "shape",
                    "dtype",
                    "dec"
                ],
                "test_fourier_shift_complex01": [
                    "self",
                    "shape",
                    "dtype",
                    "dec"
                ],
                "test_fourier_ellipsoid_real01": [
                    "self",
                    "shape",
                    "dtype",
                    "dec"
                ],
                "test_fourier_ellipsoid_complex01": [
                    "self",
                    "shape",
                    "dtype",
                    "dec"
                ],
                "test_fourier_ellipsoid_1d_complex": [
                    "self"
                ],
                "test_fourier_zero_length_dims": [
                    "self",
                    "shape",
                    "dtype",
                    "test_func"
                ]
            }
        },
        "scipy.ndimage.tests.test_splines": {
            "get_spline_knot_values": [
                "order"
            ],
            "make_spline_knot_matrix": [
                "n",
                "order",
                "mode"
            ],
            "test_spline_filter_vs_matrix_solution": [
                "order",
                "mode"
            ]
        },
        "scipy.ndimage.tests.test_c_api": {
            "test_generic_filter": [],
            "test_generic_filter1d": [],
            "test_geometric_transform": []
        },
        "scipy.ndimage.tests": {},
        "scipy.ndimage.tests.test_interpolation": {
            "test_zoom_output_shape": [],
            "TestNdimageInterpolation": {
                "test_boundaries": [
                    "self",
                    "mode",
                    "expected_value"
                ],
                "test_boundaries2": [
                    "self",
                    "mode",
                    "expected_value"
                ],
                "test_boundary_spline_accuracy": [
                    "self",
                    "mode",
                    "order"
                ],
                "test_spline01": [
                    "self",
                    "dtype",
                    "order"
                ],
                "test_spline02": [
                    "self",
                    "dtype",
                    "order"
                ],
                "test_spline03": [
                    "self",
                    "dtype",
                    "order"
                ],
                "test_spline04": [
                    "self",
                    "dtype",
                    "order"
                ],
                "test_spline05": [
                    "self",
                    "dtype",
                    "order"
                ],
                "test_geometric_transform01": [
                    "self",
                    "order"
                ],
                "test_geometric_transform02": [
                    "self",
                    "order"
                ],
                "test_geometric_transform03": [
                    "self",
                    "order"
                ],
                "test_geometric_transform04": [
                    "self",
                    "order"
                ],
                "test_geometric_transform05": [
                    "self",
                    "order",
                    "dtype"
                ],
                "test_geometric_transform06": [
                    "self",
                    "order"
                ],
                "test_geometric_transform07": [
                    "self",
                    "order"
                ],
                "test_geometric_transform08": [
                    "self",
                    "order"
                ],
                "test_geometric_transform10": [
                    "self",
                    "order"
                ],
                "test_geometric_transform13": [
                    "self",
                    "order"
                ],
                "test_geometric_transform14": [
                    "self",
                    "order"
                ],
                "test_geometric_transform15": [
                    "self",
                    "order"
                ],
                "test_geometric_transform16": [
                    "self",
                    "order"
                ],
                "test_geometric_transform17": [
                    "self",
                    "order"
                ],
                "test_geometric_transform18": [
                    "self",
                    "order"
                ],
                "test_geometric_transform19": [
                    "self",
                    "order"
                ],
                "test_geometric_transform20": [
                    "self",
                    "order"
                ],
                "test_geometric_transform21": [
                    "self",
                    "order"
                ],
                "test_geometric_transform22": [
                    "self",
                    "order"
                ],
                "test_geometric_transform23": [
                    "self",
                    "order"
                ],
                "test_geometric_transform24": [
                    "self",
                    "order"
                ],
                "test_geometric_transform_grid_constant_order1": [
                    "self"
                ],
                "test_geometric_transform_vs_padded": [
                    "self",
                    "order",
                    "mode"
                ],
                "test_geometric_transform_endianness_with_output_parameter": [
                    "self"
                ],
                "test_geometric_transform_with_string_output": [
                    "self"
                ],
                "test_map_coordinates01": [
                    "self",
                    "order",
                    "dtype"
                ],
                "test_map_coordinates02": [
                    "self",
                    "order"
                ],
                "test_map_coordinates03": [
                    "self"
                ],
                "test_map_coordinates_endianness_with_output_parameter": [
                    "self"
                ],
                "test_map_coordinates_with_string_output": [
                    "self"
                ],
                "test_map_coordinates_large_data": [
                    "self"
                ],
                "test_affine_transform01": [
                    "self",
                    "order"
                ],
                "test_affine_transform02": [
                    "self",
                    "order"
                ],
                "test_affine_transform03": [
                    "self",
                    "order"
                ],
                "test_affine_transform04": [
                    "self",
                    "order"
                ],
                "test_affine_transform05": [
                    "self",
                    "order",
                    "dtype"
                ],
                "test_affine_transform06": [
                    "self",
                    "order"
                ],
                "test_affine_transform07": [
                    "self",
                    "order"
                ],
                "test_affine_transform08": [
                    "self",
                    "order"
                ],
                "test_affine_transform09": [
                    "self",
                    "order"
                ],
                "test_affine_transform10": [
                    "self",
                    "order"
                ],
                "test_affine_transform11": [
                    "self",
                    "order"
                ],
                "test_affine_transform12": [
                    "self",
                    "order"
                ],
                "test_affine_transform13": [
                    "self",
                    "order"
                ],
                "test_affine_transform14": [
                    "self",
                    "order"
                ],
                "test_affine_transform15": [
                    "self",
                    "order"
                ],
                "test_affine_transform16": [
                    "self",
                    "order"
                ],
                "test_affine_transform17": [
                    "self",
                    "order"
                ],
                "test_affine_transform18": [
                    "self",
                    "order"
                ],
                "test_affine_transform19": [
                    "self",
                    "order"
                ],
                "test_affine_transform20": [
                    "self",
                    "order"
                ],
                "test_affine_transform21": [
                    "self",
                    "order"
                ],
                "test_affine_transform22": [
                    "self",
                    "order"
                ],
                "test_affine_transform23": [
                    "self",
                    "order"
                ],
                "test_affine_transform24": [
                    "self",
                    "order"
                ],
                "test_affine_transform25": [
                    "self",
                    "order"
                ],
                "test_affine_transform26": [
                    "self",
                    "order"
                ],
                "test_affine_transform27": [
                    "self"
                ],
                "test_affine_transform_1d_endianness_with_output_parameter": [
                    "self"
                ],
                "test_affine_transform_multi_d_endianness_with_output_parameter": [
                    "self"
                ],
                "test_affine_transform_with_string_output": [
                    "self"
                ],
                "test_affine_transform_shift_via_grid_wrap": [
                    "self",
                    "shift",
                    "order"
                ],
                "test_affine_transform_shift_reflect": [
                    "self",
                    "order"
                ],
                "test_shift01": [
                    "self",
                    "order"
                ],
                "test_shift02": [
                    "self",
                    "order"
                ],
                "test_shift03": [
                    "self",
                    "order"
                ],
                "test_shift04": [
                    "self",
                    "order"
                ],
                "test_shift05": [
                    "self",
                    "order",
                    "dtype"
                ],
                "test_shift_with_nonzero_cval": [
                    "self",
                    "order",
                    "mode",
                    "dtype"
                ],
                "test_shift06": [
                    "self",
                    "order"
                ],
                "test_shift07": [
                    "self",
                    "order"
                ],
                "test_shift08": [
                    "self",
                    "order"
                ],
                "test_shift09": [
                    "self",
                    "order"
                ],
                "test_shift_grid_wrap": [
                    "self",
                    "shift",
                    "order"
                ],
                "test_shift_grid_constant1": [
                    "self",
                    "shift",
                    "order"
                ],
                "test_shift_grid_constant_order1": [
                    "self"
                ],
                "test_shift_reflect": [
                    "self",
                    "order"
                ],
                "test_shift_nearest_boundary": [
                    "self",
                    "order",
                    "prefilter"
                ],
                "test_shift_vs_padded": [
                    "self",
                    "order",
                    "mode"
                ],
                "test_zoom1": [
                    "self",
                    "order"
                ],
                "test_zoom2": [
                    "self"
                ],
                "test_zoom3": [
                    "self"
                ],
                "test_zoom_affine01": [
                    "self",
                    "order",
                    "dtype"
                ],
                "test_zoom_infinity": [
                    "self"
                ],
                "test_zoom_zoomfactor_one": [
                    "self"
                ],
                "test_zoom_output_shape_roundoff": [
                    "self"
                ],
                "test_zoom_by_int_order0": [
                    "self",
                    "zoom",
                    "mode"
                ],
                "test_zoom_grid_by_int_order0": [
                    "self",
                    "shape",
                    "zoom",
                    "mode"
                ],
                "test_zoom_grid_mode_warnings": [
                    "self",
                    "mode"
                ],
                "test_rotate01": [
                    "self",
                    "order"
                ],
                "test_rotate02": [
                    "self",
                    "order"
                ],
                "test_rotate03": [
                    "self",
                    "order",
                    "dtype"
                ],
                "test_rotate04": [
                    "self",
                    "order"
                ],
                "test_rotate05": [
                    "self",
                    "order"
                ],
                "test_rotate06": [
                    "self",
                    "order"
                ],
                "test_rotate07": [
                    "self",
                    "order"
                ],
                "test_rotate08": [
                    "self",
                    "order"
                ],
                "test_rotate09": [
                    "self"
                ],
                "test_rotate10": [
                    "self"
                ],
                "test_rotate_exact_180": [
                    "self"
                ]
            }
        },
        "scipy.ndimage.tests.test_filters": {
            "sumsq": [
                "a",
                "b"
            ],
            "_complex_correlate": [
                "array",
                "kernel",
                "real_dtype",
                "convolve",
                "mode",
                "cval"
            ],
            "test_ticket_701": [],
            "test_gh_5430": [],
            "test_gaussian_kernel1d": [],
            "test_orders_gauss": [],
            "test_valid_origins": [],
            "test_bad_convolve_and_correlate_origins": [],
            "test_multiple_modes": [],
            "test_multiple_modes_sequentially": [],
            "test_multiple_modes_prewitt": [],
            "test_multiple_modes_sobel": [],
            "test_multiple_modes_laplace": [],
            "test_multiple_modes_gaussian_laplace": [],
            "test_multiple_modes_gaussian_gradient_magnitude": [],
            "test_multiple_modes_uniform": [],
            "test_gaussian_truncate": [],
            "test_minmaximum_filter1d": [],
            "test_uniform_filter1d_roundoff_errors": [],
            "test_footprint_all_zeros": [],
            "test_gaussian_filter": [],
            "test_rank_filter_noninteger_rank": [],
            "test_size_footprint_both_set": [],
            "test_byte_order_median": [],
            "TestNdimageFilters": {
                "_validate_complex": [
                    "self",
                    "array",
                    "kernel",
                    "type2",
                    "mode",
                    "cval"
                ],
                "test_correlate01": [
                    "self"
                ],
                "test_correlate01_overlap": [
                    "self"
                ],
                "test_correlate02": [
                    "self"
                ],
                "test_correlate03": [
                    "self"
                ],
                "test_correlate04": [
                    "self"
                ],
                "test_correlate05": [
                    "self"
                ],
                "test_correlate06": [
                    "self"
                ],
                "test_correlate07": [
                    "self"
                ],
                "test_correlate08": [
                    "self"
                ],
                "test_correlate09": [
                    "self"
                ],
                "test_correlate10": [
                    "self"
                ],
                "test_correlate11": [
                    "self"
                ],
                "test_correlate12": [
                    "self"
                ],
                "test_correlate13": [
                    "self",
                    "dtype_array",
                    "dtype_kernel"
                ],
                "test_correlate14": [
                    "self",
                    "dtype_array",
                    "dtype_output"
                ],
                "test_correlate15": [
                    "self",
                    "dtype_array"
                ],
                "test_correlate16": [
                    "self",
                    "dtype_array"
                ],
                "test_correlate17": [
                    "self"
                ],
                "test_correlate18": [
                    "self",
                    "dtype_array"
                ],
                "test_correlate_mode_sequence": [
                    "self"
                ],
                "test_correlate19": [
                    "self",
                    "dtype_array"
                ],
                "test_correlate20": [
                    "self",
                    "dtype_array",
                    "dtype_output"
                ],
                "test_correlate21": [
                    "self"
                ],
                "test_correlate22": [
                    "self",
                    "dtype_array",
                    "dtype_output"
                ],
                "test_correlate23": [
                    "self",
                    "dtype_array",
                    "dtype_output"
                ],
                "test_correlate24": [
                    "self",
                    "dtype_array",
                    "dtype_output"
                ],
                "test_correlate25": [
                    "self",
                    "dtype_array",
                    "dtype_output"
                ],
                "test_correlate26": [
                    "self"
                ],
                "test_correlate_complex_kernel": [
                    "self",
                    "dtype_input",
                    "dtype_kernel",
                    "dtype_output"
                ],
                "test_correlate_complex_kernel_cval": [
                    "self",
                    "dtype_input",
                    "dtype_kernel",
                    "dtype_output",
                    "mode"
                ],
                "test_correlate_complex_kernel_invalid_cval": [
                    "self",
                    "dtype_input",
                    "dtype_kernel"
                ],
                "test_correlate1d_complex_kernel": [
                    "self",
                    "dtype_input",
                    "dtype_kernel",
                    "dtype_output"
                ],
                "test_correlate1d_complex_kernel_cval": [
                    "self",
                    "dtype_input",
                    "dtype_kernel",
                    "dtype_output"
                ],
                "test_correlate_complex_input": [
                    "self",
                    "dtype_input",
                    "dtype_kernel",
                    "dtype_output"
                ],
                "test_correlate1d_complex_input": [
                    "self",
                    "dtype_input",
                    "dtype_kernel",
                    "dtype_output"
                ],
                "test_correlate1d_complex_input_cval": [
                    "self",
                    "dtype_input",
                    "dtype_kernel",
                    "dtype_output"
                ],
                "test_correlate_complex_input_and_kernel": [
                    "self",
                    "dtype",
                    "dtype_output"
                ],
                "test_correlate_complex_input_and_kernel_cval": [
                    "self",
                    "dtype",
                    "dtype_output"
                ],
                "test_correlate1d_complex_input_and_kernel": [
                    "self",
                    "dtype",
                    "dtype_output"
                ],
                "test_correlate1d_complex_input_and_kernel_cval": [
                    "self",
                    "dtype",
                    "dtype_output"
                ],
                "test_gauss01": [
                    "self"
                ],
                "test_gauss02": [
                    "self"
                ],
                "test_gauss03": [
                    "self"
                ],
                "test_gauss04": [
                    "self"
                ],
                "test_gauss05": [
                    "self"
                ],
                "test_gauss06": [
                    "self"
                ],
                "test_gauss_memory_overlap": [
                    "self"
                ],
                "test_prewitt01": [
                    "self",
                    "dtype"
                ],
                "test_prewitt02": [
                    "self",
                    "dtype"
                ],
                "test_prewitt03": [
                    "self",
                    "dtype"
                ],
                "test_prewitt04": [
                    "self",
                    "dtype"
                ],
                "test_sobel01": [
                    "sel",
                    "dtype"
                ],
                "test_sobel02": [
                    "self",
                    "dtype"
                ],
                "test_sobel03": [
                    "self",
                    "dtype"
                ],
                "test_sobel04": [
                    "self",
                    "dtype"
                ],
                "test_laplace01": [
                    "self",
                    "dtype"
                ],
                "test_laplace02": [
                    "self",
                    "dtype"
                ],
                "test_gaussian_laplace01": [
                    "self",
                    "dtype"
                ],
                "test_gaussian_laplace02": [
                    "self",
                    "dtype"
                ],
                "test_generic_laplace01": [
                    "self",
                    "dtype"
                ],
                "test_gaussian_gradient_magnitude01": [
                    "self",
                    "dtype"
                ],
                "test_gaussian_gradient_magnitude02": [
                    "self",
                    "dtype"
                ],
                "test_generic_gradient_magnitude01": [
                    "self"
                ],
                "test_uniform01": [
                    "self"
                ],
                "test_uniform01_complex": [
                    "self"
                ],
                "test_uniform02": [
                    "self"
                ],
                "test_uniform03": [
                    "self"
                ],
                "test_uniform04": [
                    "self"
                ],
                "test_uniform05": [
                    "self"
                ],
                "test_uniform06": [
                    "self",
                    "dtype_array",
                    "dtype_output"
                ],
                "test_uniform06_complex": [
                    "self",
                    "dtype_array",
                    "dtype_output"
                ],
                "test_minimum_filter01": [
                    "self"
                ],
                "test_minimum_filter02": [
                    "self"
                ],
                "test_minimum_filter03": [
                    "self"
                ],
                "test_minimum_filter04": [
                    "self"
                ],
                "test_minimum_filter05": [
                    "self"
                ],
                "test_minimum_filter05_overlap": [
                    "self"
                ],
                "test_minimum_filter06": [
                    "self"
                ],
                "test_minimum_filter07": [
                    "self"
                ],
                "test_minimum_filter08": [
                    "self"
                ],
                "test_minimum_filter09": [
                    "self"
                ],
                "test_maximum_filter01": [
                    "self"
                ],
                "test_maximum_filter02": [
                    "self"
                ],
                "test_maximum_filter03": [
                    "self"
                ],
                "test_maximum_filter04": [
                    "self"
                ],
                "test_maximum_filter05": [
                    "self"
                ],
                "test_maximum_filter06": [
                    "self"
                ],
                "test_maximum_filter07": [
                    "self"
                ],
                "test_maximum_filter08": [
                    "self"
                ],
                "test_maximum_filter09": [
                    "self"
                ],
                "test_rank01": [
                    "self"
                ],
                "test_rank02": [
                    "self"
                ],
                "test_rank03": [
                    "self"
                ],
                "test_rank04": [
                    "self"
                ],
                "test_rank05": [
                    "self"
                ],
                "test_rank06": [
                    "self"
                ],
                "test_rank06_overlap": [
                    "self"
                ],
                "test_rank07": [
                    "self"
                ],
                "test_rank08": [
                    "self"
                ],
                "test_rank09": [
                    "self",
                    "dtype"
                ],
                "test_rank10": [
                    "self"
                ],
                "test_rank11": [
                    "self"
                ],
                "test_rank12": [
                    "self",
                    "dtype"
                ],
                "test_rank13": [
                    "self",
                    "dtype"
                ],
                "test_rank14": [
                    "self",
                    "dtype"
                ],
                "test_rank15": [
                    "self",
                    "dtype"
                ],
                "test_generic_filter1d01": [
                    "self",
                    "dtype"
                ],
                "test_generic_filter01": [
                    "self",
                    "dtype"
                ],
                "test_extend01": [
                    "self",
                    "mode",
                    "expected_value"
                ],
                "test_extend02": [
                    "self",
                    "mode",
                    "expected_value"
                ],
                "test_extend03": [
                    "self",
                    "mode",
                    "expected_value"
                ],
                "test_extend04": [
                    "self",
                    "mode",
                    "expected_value"
                ],
                "test_extend05": [
                    "self",
                    "mode",
                    "expected_value"
                ],
                "test_extend06": [
                    "self",
                    "mode",
                    "expected_value"
                ],
                "test_extend07": [
                    "self",
                    "mode",
                    "expected_value"
                ],
                "test_extend08": [
                    "self",
                    "mode",
                    "expected_value"
                ],
                "test_extend09": [
                    "self",
                    "mode",
                    "expected_value"
                ],
                "test_extend10": [
                    "self",
                    "mode",
                    "expected_value"
                ]
            },
            "TestThreading": {
                "check_func_thread": [
                    "self",
                    "n",
                    "fun",
                    "args",
                    "out"
                ],
                "check_func_serial": [
                    "self",
                    "n",
                    "fun",
                    "args",
                    "out"
                ],
                "test_correlate1d": [
                    "self"
                ],
                "test_correlate": [
                    "self"
                ],
                "test_median_filter": [
                    "self"
                ],
                "test_uniform_filter1d": [
                    "self"
                ],
                "test_minmax_filter": [
                    "self"
                ]
            }
        },
        "scipy.ndimage.tests.test_measurements": {
            "test_label01": [],
            "test_label02": [],
            "test_label03": [],
            "test_label04": [],
            "test_label05": [],
            "test_label06": [],
            "test_label07": [],
            "test_label08": [],
            "test_label09": [],
            "test_label10": [],
            "test_label11": [],
            "test_label11_inplace": [],
            "test_label12": [],
            "test_label13": [],
            "test_label_output_typed": [],
            "test_label_output_dtype": [],
            "test_label_output_wrong_size": [],
            "test_label_structuring_elements": [],
            "test_ticket_742": [],
            "test_gh_issue_3025": [],
            "test_label_default_dtype": [],
            "test_find_objects01": [],
            "test_find_objects02": [],
            "test_find_objects03": [],
            "test_find_objects04": [],
            "test_find_objects05": [],
            "test_find_objects06": [],
            "test_find_objects07": [],
            "test_find_objects08": [],
            "test_find_objects09": [],
            "test_sum01": [],
            "test_sum02": [],
            "test_sum03": [],
            "test_sum04": [],
            "test_sum05": [],
            "test_sum06": [],
            "test_sum07": [],
            "test_sum08": [],
            "test_sum09": [],
            "test_sum10": [],
            "test_sum11": [],
            "test_sum12": [],
            "test_sum_labels": [],
            "test_mean01": [],
            "test_mean02": [],
            "test_mean03": [],
            "test_mean04": [],
            "test_minimum01": [],
            "test_minimum02": [],
            "test_minimum03": [],
            "test_minimum04": [],
            "test_maximum01": [],
            "test_maximum02": [],
            "test_maximum03": [],
            "test_maximum04": [],
            "test_maximum05": [],
            "test_median01": [],
            "test_median02": [],
            "test_median03": [],
            "test_median_gh12836_bool": [],
            "test_median_no_int_overflow": [],
            "test_variance01": [],
            "test_variance02": [],
            "test_variance03": [],
            "test_variance04": [],
            "test_variance05": [],
            "test_variance06": [],
            "test_standard_deviation01": [],
            "test_standard_deviation02": [],
            "test_standard_deviation03": [],
            "test_standard_deviation04": [],
            "test_standard_deviation05": [],
            "test_standard_deviation06": [],
            "test_standard_deviation07": [],
            "test_minimum_position01": [],
            "test_minimum_position02": [],
            "test_minimum_position03": [],
            "test_minimum_position04": [],
            "test_minimum_position05": [],
            "test_minimum_position06": [],
            "test_minimum_position07": [],
            "test_maximum_position01": [],
            "test_maximum_position02": [],
            "test_maximum_position03": [],
            "test_maximum_position04": [],
            "test_maximum_position05": [],
            "test_maximum_position06": [],
            "test_maximum_position07": [],
            "test_extrema01": [],
            "test_extrema02": [],
            "test_extrema03": [],
            "test_extrema04": [],
            "test_center_of_mass01": [],
            "test_center_of_mass02": [],
            "test_center_of_mass03": [],
            "test_center_of_mass04": [],
            "test_center_of_mass05": [],
            "test_center_of_mass06": [],
            "test_center_of_mass07": [],
            "test_center_of_mass08": [],
            "test_center_of_mass09": [],
            "test_histogram01": [],
            "test_histogram02": [],
            "test_histogram03": [],
            "test_stat_funcs_2d": [],
            "Test_measurements_stats": {
                "test_a": [
                    "self"
                ],
                "test_b": [
                    "self"
                ],
                "test_a_centered": [
                    "self"
                ],
                "test_b_centered": [
                    "self"
                ],
                "test_nonint_labels": [
                    "self"
                ]
            },
            "Test_measurements_select": {
                "test_basic": [
                    "self"
                ]
            },
            "TestWatershedIft": {
                "test_watershed_ift01": [
                    "self"
                ],
                "test_watershed_ift02": [
                    "self"
                ],
                "test_watershed_ift03": [
                    "self"
                ],
                "test_watershed_ift04": [
                    "self"
                ],
                "test_watershed_ift05": [
                    "self"
                ],
                "test_watershed_ift06": [
                    "self"
                ],
                "test_watershed_ift07": [
                    "self"
                ],
                "test_watershed_ift08": [
                    "self"
                ]
            }
        },
        "scipy.ndimage.tests.test_datatypes": {
            "test_map_coordinates_dts": [],
            "test_uint64_max": []
        },
        "scipy.ndimage.tests.test_morphology": {
            "test_binary_erosion_noninteger_iterations": [],
            "test_binary_dilation_noninteger_iterations": [],
            "test_binary_opening_noninteger_iterations": [],
            "test_binary_closing_noninteger_iterations": [],
            "test_binary_closing_noninteger_brute_force_passes_when_true": [],
            "TestNdimageMorphology": {
                "test_distance_transform_bf01": [
                    "self",
                    "dtype"
                ],
                "test_distance_transform_bf02": [
                    "self",
                    "dtype"
                ],
                "test_distance_transform_bf03": [
                    "self",
                    "dtype"
                ],
                "test_distance_transform_bf04": [
                    "self",
                    "dtype"
                ],
                "test_distance_transform_bf05": [
                    "self",
                    "dtype"
                ],
                "test_distance_transform_bf06": [
                    "self",
                    "dtype"
                ],
                "test_distance_transform_cdt01": [
                    "self",
                    "dtype"
                ],
                "test_distance_transform_cdt02": [
                    "self",
                    "dtype"
                ],
                "test_distance_transform_cdt03": [
                    "self",
                    "dtype"
                ],
                "test_distance_transform_edt01": [
                    "self",
                    "dtype"
                ],
                "test_distance_transform_edt02": [
                    "self",
                    "dtype"
                ],
                "test_distance_transform_edt03": [
                    "self",
                    "dtype"
                ],
                "test_distance_transform_edt4": [
                    "self",
                    "dtype"
                ],
                "test_distance_transform_edt5": [
                    "self"
                ],
                "test_generate_structure01": [
                    "self"
                ],
                "test_generate_structure02": [
                    "self"
                ],
                "test_generate_structure03": [
                    "self"
                ],
                "test_generate_structure04": [
                    "self"
                ],
                "test_iterate_structure01": [
                    "self"
                ],
                "test_iterate_structure02": [
                    "self"
                ],
                "test_iterate_structure03": [
                    "self"
                ],
                "test_binary_erosion01": [
                    "self",
                    "dtype"
                ],
                "test_binary_erosion02": [
                    "self",
                    "dtype"
                ],
                "test_binary_erosion03": [
                    "self",
                    "dtype"
                ],
                "test_binary_erosion04": [
                    "self",
                    "dtype"
                ],
                "test_binary_erosion05": [
                    "self",
                    "dtype"
                ],
                "test_binary_erosion06": [
                    "self",
                    "dtype"
                ],
                "test_binary_erosion07": [
                    "self",
                    "dtype"
                ],
                "test_binary_erosion08": [
                    "self",
                    "dtype"
                ],
                "test_binary_erosion09": [
                    "self",
                    "dtype"
                ],
                "test_binary_erosion10": [
                    "self",
                    "dtype"
                ],
                "test_binary_erosion11": [
                    "self",
                    "dtype"
                ],
                "test_binary_erosion12": [
                    "self",
                    "dtype"
                ],
                "test_binary_erosion13": [
                    "self",
                    "dtype"
                ],
                "test_binary_erosion14": [
                    "self",
                    "dtype"
                ],
                "test_binary_erosion15": [
                    "self",
                    "dtype"
                ],
                "test_binary_erosion16": [
                    "self",
                    "dtype"
                ],
                "test_binary_erosion17": [
                    "self",
                    "dtype"
                ],
                "test_binary_erosion18": [
                    "self",
                    "dtype"
                ],
                "test_binary_erosion19": [
                    "self",
                    "dtype"
                ],
                "test_binary_erosion20": [
                    "self",
                    "dtype"
                ],
                "test_binary_erosion21": [
                    "self",
                    "dtype"
                ],
                "test_binary_erosion22": [
                    "self",
                    "dtype"
                ],
                "test_binary_erosion23": [
                    "self",
                    "dtype"
                ],
                "test_binary_erosion24": [
                    "self",
                    "dtype"
                ],
                "test_binary_erosion25": [
                    "self",
                    "dtype"
                ],
                "test_binary_erosion26": [
                    "self",
                    "dtype"
                ],
                "test_binary_erosion27": [
                    "self"
                ],
                "test_binary_erosion28": [
                    "self"
                ],
                "test_binary_erosion29": [
                    "self"
                ],
                "test_binary_erosion30": [
                    "self"
                ],
                "test_binary_erosion31": [
                    "self"
                ],
                "test_binary_erosion32": [
                    "self"
                ],
                "test_binary_erosion33": [
                    "self"
                ],
                "test_binary_erosion34": [
                    "self"
                ],
                "test_binary_erosion35": [
                    "self"
                ],
                "test_binary_erosion36": [
                    "self"
                ],
                "test_binary_erosion37": [
                    "self"
                ],
                "test_binary_erosion38": [
                    "self"
                ],
                "test_binary_erosion39": [
                    "self"
                ],
                "test_binary_erosion40": [
                    "self"
                ],
                "test_binary_dilation01": [
                    "self",
                    "dtype"
                ],
                "test_binary_dilation02": [
                    "self",
                    "dtype"
                ],
                "test_binary_dilation03": [
                    "self",
                    "dtype"
                ],
                "test_binary_dilation04": [
                    "self",
                    "dtype"
                ],
                "test_binary_dilation05": [
                    "self",
                    "dtype"
                ],
                "test_binary_dilation06": [
                    "self",
                    "dtype"
                ],
                "test_binary_dilation07": [
                    "self",
                    "dtype"
                ],
                "test_binary_dilation08": [
                    "self",
                    "dtype"
                ],
                "test_binary_dilation09": [
                    "self",
                    "dtype"
                ],
                "test_binary_dilation10": [
                    "self",
                    "dtype"
                ],
                "test_binary_dilation11": [
                    "self",
                    "dtype"
                ],
                "test_binary_dilation12": [
                    "self",
                    "dtype"
                ],
                "test_binary_dilation13": [
                    "self",
                    "dtype"
                ],
                "test_binary_dilation14": [
                    "self",
                    "dtype"
                ],
                "test_binary_dilation15": [
                    "self",
                    "dtype"
                ],
                "test_binary_dilation16": [
                    "self",
                    "dtype"
                ],
                "test_binary_dilation17": [
                    "self",
                    "dtype"
                ],
                "test_binary_dilation18": [
                    "self",
                    "dtype"
                ],
                "test_binary_dilation19": [
                    "self",
                    "dtype"
                ],
                "test_binary_dilation20": [
                    "self",
                    "dtype"
                ],
                "test_binary_dilation21": [
                    "self",
                    "dtype"
                ],
                "test_binary_dilation22": [
                    "self",
                    "dtype"
                ],
                "test_binary_dilation23": [
                    "self",
                    "dtype"
                ],
                "test_binary_dilation24": [
                    "self",
                    "dtype"
                ],
                "test_binary_dilation25": [
                    "self",
                    "dtype"
                ],
                "test_binary_dilation26": [
                    "self",
                    "dtype"
                ],
                "test_binary_dilation27": [
                    "self",
                    "dtype"
                ],
                "test_binary_dilation28": [
                    "self",
                    "dtype"
                ],
                "test_binary_dilation29": [
                    "self"
                ],
                "test_binary_dilation30": [
                    "self"
                ],
                "test_binary_dilation31": [
                    "self"
                ],
                "test_binary_dilation32": [
                    "self"
                ],
                "test_binary_dilation33": [
                    "self"
                ],
                "test_binary_dilation34": [
                    "self"
                ],
                "test_binary_dilation35": [
                    "self",
                    "dtype"
                ],
                "test_binary_propagation01": [
                    "self"
                ],
                "test_binary_propagation02": [
                    "self"
                ],
                "test_binary_opening01": [
                    "self",
                    "dtype"
                ],
                "test_binary_opening02": [
                    "self",
                    "dtype"
                ],
                "test_binary_closing01": [
                    "self",
                    "dtype"
                ],
                "test_binary_closing02": [
                    "self",
                    "dtype"
                ],
                "test_binary_fill_holes01": [
                    "self"
                ],
                "test_binary_fill_holes02": [
                    "self"
                ],
                "test_binary_fill_holes03": [
                    "self"
                ],
                "test_grey_erosion01": [
                    "self"
                ],
                "test_grey_erosion01_overlap": [
                    "self"
                ],
                "test_grey_erosion02": [
                    "self"
                ],
                "test_grey_erosion03": [
                    "self"
                ],
                "test_grey_dilation01": [
                    "self"
                ],
                "test_grey_dilation02": [
                    "self"
                ],
                "test_grey_dilation03": [
                    "self"
                ],
                "test_grey_opening01": [
                    "self"
                ],
                "test_grey_opening02": [
                    "self"
                ],
                "test_grey_closing01": [
                    "self"
                ],
                "test_grey_closing02": [
                    "self"
                ],
                "test_morphological_gradient01": [
                    "self"
                ],
                "test_morphological_gradient02": [
                    "self"
                ],
                "test_morphological_laplace01": [
                    "self"
                ],
                "test_morphological_laplace02": [
                    "self"
                ],
                "test_white_tophat01": [
                    "self"
                ],
                "test_white_tophat02": [
                    "self"
                ],
                "test_white_tophat03": [
                    "self"
                ],
                "test_white_tophat04": [
                    "self"
                ],
                "test_black_tophat01": [
                    "self"
                ],
                "test_black_tophat02": [
                    "self"
                ],
                "test_black_tophat03": [
                    "self"
                ],
                "test_black_tophat04": [
                    "self"
                ],
                "test_hit_or_miss01": [
                    "self",
                    "dtype"
                ],
                "test_hit_or_miss02": [
                    "self",
                    "dtype"
                ],
                "test_hit_or_miss03": [
                    "self",
                    "dtype"
                ]
            },
            "TestDilateFix": {
                "setup_method": [
                    "self"
                ],
                "test_dilation_square_structure": [
                    "self"
                ],
                "test_dilation_scalar_size": [
                    "self"
                ]
            },
            "TestBinaryOpeningClosing": {
                "setup_method": [
                    "self"
                ],
                "test_opening_new_arguments": [
                    "self"
                ],
                "test_closing_new_arguments": [
                    "self"
                ]
            }
        },
        "scipy.odr._add_newdocs": {},
        "scipy.odr.setup": {
            "configuration": [
                "parent_package",
                "top_path"
            ]
        },
        "scipy.odr.odrpack": {
            "_conv": [
                "obj",
                "dtype"
            ],
            "_report_error": [
                "info"
            ],
            "OdrWarning": {},
            "OdrError": {},
            "OdrStop": {},
            "Data": {
                "__init__": [
                    "self",
                    "x",
                    "y",
                    "we",
                    "wd",
                    "fix",
                    "meta"
                ],
                "set_meta": [
                    "self"
                ],
                "__getattr__": [
                    "self",
                    "attr"
                ]
            },
            "RealData": {
                "__init__": [
                    "self",
                    "x",
                    "y",
                    "sx",
                    "sy",
                    "covx",
                    "covy",
                    "fix",
                    "meta"
                ],
                "_sd2wt": [
                    "self",
                    "sd"
                ],
                "_cov2wt": [
                    "self",
                    "cov"
                ],
                "__getattr__": [
                    "self",
                    "attr"
                ]
            },
            "Model": {
                "__init__": [
                    "self",
                    "fcn",
                    "fjacb",
                    "fjacd",
                    "extra_args",
                    "estimate",
                    "implicit",
                    "meta"
                ],
                "set_meta": [
                    "self"
                ],
                "__getattr__": [
                    "self",
                    "attr"
                ]
            },
            "Output": {
                "__init__": [
                    "self",
                    "output"
                ],
                "pprint": [
                    "self"
                ]
            },
            "ODR": {
                "__init__": [
                    "self",
                    "data",
                    "model",
                    "beta0",
                    "delta0",
                    "ifixb",
                    "ifixx",
                    "job",
                    "iprint",
                    "errfile",
                    "rptfile",
                    "ndigit",
                    "taufac",
                    "sstol",
                    "partol",
                    "maxit",
                    "stpb",
                    "stpd",
                    "sclb",
                    "scld",
                    "work",
                    "iwork",
                    "overwrite"
                ],
                "_check": [
                    "self"
                ],
                "_gen_work": [
                    "self"
                ],
                "set_job": [
                    "self",
                    "fit_type",
                    "deriv",
                    "var_calc",
                    "del_init",
                    "restart"
                ],
                "set_iprint": [
                    "self",
                    "init",
                    "so_init",
                    "iter",
                    "so_iter",
                    "iter_step",
                    "final",
                    "so_final"
                ],
                "run": [
                    "self"
                ],
                "restart": [
                    "self",
                    "iter"
                ]
            }
        },
        "scipy.odr": {},
        "scipy.odr.models": {
            "_lin_fcn": [
                "B",
                "x"
            ],
            "_lin_fjb": [
                "B",
                "x"
            ],
            "_lin_fjd": [
                "B",
                "x"
            ],
            "_lin_est": [
                "data"
            ],
            "_poly_fcn": [
                "B",
                "x",
                "powers"
            ],
            "_poly_fjacb": [
                "B",
                "x",
                "powers"
            ],
            "_poly_fjacd": [
                "B",
                "x",
                "powers"
            ],
            "_exp_fcn": [
                "B",
                "x"
            ],
            "_exp_fjd": [
                "B",
                "x"
            ],
            "_exp_fjb": [
                "B",
                "x"
            ],
            "_exp_est": [
                "data"
            ],
            "polynomial": [
                "order"
            ],
            "_unilin": [
                "B",
                "x"
            ],
            "_unilin_fjd": [
                "B",
                "x"
            ],
            "_unilin_fjb": [
                "B",
                "x"
            ],
            "_unilin_est": [
                "data"
            ],
            "_quadratic": [
                "B",
                "x"
            ],
            "_quad_fjd": [
                "B",
                "x"
            ],
            "_quad_fjb": [
                "B",
                "x"
            ],
            "_quad_est": [
                "data"
            ],
            "_MultilinearModel": {
                "__init__": [
                    "self"
                ]
            },
            "_ExponentialModel": {
                "__init__": [
                    "self"
                ]
            },
            "_UnilinearModel": {
                "__init__": [
                    "self"
                ]
            },
            "_QuadraticModel": {
                "__init__": [
                    "self"
                ]
            }
        },
        "scipy.odr.tests.test_odr": {
            "TestODR": {
                "test_bad_data": [
                    "self"
                ],
                "empty_data_func": [
                    "self",
                    "B",
                    "x"
                ],
                "test_empty_data": [
                    "self"
                ],
                "explicit_fcn": [
                    "self",
                    "B",
                    "x"
                ],
                "explicit_fjd": [
                    "self",
                    "B",
                    "x"
                ],
                "explicit_fjb": [
                    "self",
                    "B",
                    "x"
                ],
                "test_explicit": [
                    "self"
                ],
                "implicit_fcn": [
                    "self",
                    "B",
                    "x"
                ],
                "test_implicit": [
                    "self"
                ],
                "multi_fcn": [
                    "self",
                    "B",
                    "x"
                ],
                "test_multi": [
                    "self"
                ],
                "pearson_fcn": [
                    "self",
                    "B",
                    "x"
                ],
                "test_pearson": [
                    "self"
                ],
                "lorentz": [
                    "self",
                    "beta",
                    "x"
                ],
                "test_lorentz": [
                    "self"
                ],
                "test_ticket_1253": [
                    "self"
                ],
                "test_ifixx": [
                    "self"
                ],
                "test_ticket_11800": [
                    "self"
                ],
                "test_multilinear_model": [
                    "self"
                ],
                "test_exponential_model": [
                    "self"
                ],
                "test_polynomial_model": [
                    "self"
                ],
                "test_unilinear_model": [
                    "self"
                ],
                "test_quadratic_model": [
                    "self"
                ],
                "test_work_ind": [
                    "self"
                ],
                "test_output_file_overwrite": [
                    "self"
                ]
            }
        },
        "scipy.odr.tests": {},
        "scipy.constants.codata": {
            "parse_constants_2002to2014": [
                "d"
            ],
            "parse_constants_2018toXXXX": [
                "d"
            ],
            "_check_obsolete": [
                "key"
            ],
            "value": [
                "key"
            ],
            "unit": [
                "key"
            ],
            "precision": [
                "key"
            ],
            "find": [
                "sub",
                "disp"
            ],
            "ConstantWarning": {}
        },
        "scipy.constants.setup": {
            "configuration": [
                "parent_package",
                "top_path"
            ]
        },
        "scipy.constants": {},
        "scipy.constants.constants": {
            "convert_temperature": [
                "val",
                "old_scale",
                "new_scale"
            ],
            "lambda2nu": [
                "lambda_"
            ],
            "nu2lambda": [
                "nu"
            ]
        },
        "scipy.constants.tests.test_constants": {
            "test_convert_temperature": [],
            "test_lambda_to_nu": [],
            "test_nu_to_lambda": []
        },
        "scipy.constants.tests": {},
        "scipy.constants.tests.test_codata": {
            "test_find": [],
            "test_basic_table_parse": [],
            "test_basic_lookup": [],
            "test_find_all": [],
            "test_find_single": [],
            "test_2002_vs_2006": [],
            "test_exact_values": []
        },
        "scipy._build_utils.setup": {
            "configuration": [
                "parent_package",
                "top_path"
            ]
        },
        "scipy._build_utils": {
            "uses_blas64": []
        },
        "scipy._build_utils.compiler_helper": {
            "try_compile": [
                "compiler",
                "code",
                "flags",
                "ext"
            ],
            "has_flag": [
                "compiler",
                "flag",
                "ext"
            ],
            "get_cxx_std_flag": [
                "compiler"
            ],
            "get_c_std_flag": [
                "compiler"
            ],
            "try_add_flag": [
                "args",
                "compiler",
                "flag",
                "ext"
            ],
            "set_c_flags_hook": [
                "build_ext",
                "ext"
            ],
            "set_cxx_flags_hook": [
                "build_ext",
                "ext"
            ],
            "set_cxx_flags_clib_hook": [
                "build_clib",
                "build_info"
            ]
        },
        "scipy._build_utils._fortran": {
            "get_fcompiler_ilp64_flags": [],
            "get_fcompiler_macro_include_flags": [
                "path"
            ],
            "uses_mkl": [
                "info"
            ],
            "needs_g77_abi_wrapper": [
                "info"
            ],
            "get_g77_abi_wrappers": [
                "info"
            ],
            "gfortran_legacy_flag_hook": [
                "cmd",
                "ext"
            ],
            "_get_build_src_dir": [],
            "get_f2py_int64_options": [],
            "ilp64_pre_build_hook": [
                "cmd",
                "ext"
            ],
            "blas_ilp64_pre_build_hook": [
                "blas_info"
            ],
            "_blas_ilp64_pre_build_hook": [
                "cmd",
                "ext",
                "blas_info"
            ],
            "generic_pre_build_hook": [
                "cmd",
                "ext",
                "fcompiler_flags",
                "patch_source_func",
                "source_fnpart"
            ],
            "_generic_patch_sources": [
                "filenames",
                "patch_source_func",
                "source_fnpart",
                "root_dir"
            ],
            "write_file_content": [
                "filename",
                "content"
            ],
            "get_blas_lapack_symbols": []
        },
        "scipy._build_utils.system_info": {
            "combine_dict": []
        },
        "scipy._build_utils.tests": {},
        "scipy._build_utils.tests.test_scipy_version": {
            "test_valid_scipy_version": []
        },
        "scipy.cluster.setup": {
            "configuration": [
                "parent_package",
                "top_path"
            ]
        },
        "scipy.cluster.hierarchy": {
            "_warning": [
                "s"
            ],
            "_copy_array_if_base_present": [
                "a"
            ],
            "_copy_arrays_if_base_present": [
                "T"
            ],
            "_randdm": [
                "pnts"
            ],
            "single": [
                "y"
            ],
            "complete": [
                "y"
            ],
            "average": [
                "y"
            ],
            "weighted": [
                "y"
            ],
            "centroid": [
                "y"
            ],
            "median": [
                "y"
            ],
            "ward": [
                "y"
            ],
            "linkage": [
                "y",
                "method",
                "metric",
                "optimal_ordering"
            ],
            "_order_cluster_tree": [
                "Z"
            ],
            "cut_tree": [
                "Z",
                "n_clusters",
                "height"
            ],
            "to_tree": [
                "Z",
                "rd"
            ],
            "optimal_leaf_ordering": [
                "Z",
                "y",
                "metric"
            ],
            "_convert_to_bool": [
                "X"
            ],
            "_convert_to_double": [
                "X"
            ],
            "cophenet": [
                "Z",
                "Y"
            ],
            "inconsistent": [
                "Z",
                "d"
            ],
            "from_mlab_linkage": [
                "Z"
            ],
            "to_mlab_linkage": [
                "Z"
            ],
            "is_monotonic": [
                "Z"
            ],
            "is_valid_im": [
                "R",
                "warning",
                "throw",
                "name"
            ],
            "is_valid_linkage": [
                "Z",
                "warning",
                "throw",
                "name"
            ],
            "_check_hierarchy_uses_cluster_before_formed": [
                "Z"
            ],
            "_check_hierarchy_uses_cluster_more_than_once": [
                "Z"
            ],
            "_check_hierarchy_not_all_clusters_used": [
                "Z"
            ],
            "num_obs_linkage": [
                "Z"
            ],
            "correspond": [
                "Z",
                "Y"
            ],
            "fcluster": [
                "Z",
                "t",
                "criterion",
                "depth",
                "R",
                "monocrit"
            ],
            "fclusterdata": [
                "X",
                "t",
                "criterion",
                "metric",
                "depth",
                "method",
                "R"
            ],
            "leaves_list": [
                "Z"
            ],
            "_remove_dups": [
                "L"
            ],
            "_get_tick_text_size": [
                "p"
            ],
            "_get_tick_rotation": [
                "p"
            ],
            "_plot_dendrogram": [
                "icoords",
                "dcoords",
                "ivl",
                "p",
                "n",
                "mh",
                "orientation",
                "no_labels",
                "color_list",
                "leaf_font_size",
                "leaf_rotation",
                "contraction_marks",
                "ax",
                "above_threshold_color"
            ],
            "set_link_color_palette": [
                "palette"
            ],
            "dendrogram": [
                "Z",
                "p",
                "truncate_mode",
                "color_threshold",
                "get_leaves",
                "orientation",
                "labels",
                "count_sort",
                "distance_sort",
                "show_leaf_counts",
                "no_plot",
                "no_labels",
                "leaf_font_size",
                "leaf_rotation",
                "leaf_label_func",
                "show_contracted",
                "link_color_func",
                "ax",
                "above_threshold_color"
            ],
            "_get_leaves_color_list": [
                "R"
            ],
            "_append_singleton_leaf_node": [
                "Z",
                "p",
                "n",
                "level",
                "lvs",
                "ivl",
                "leaf_label_func",
                "i",
                "labels"
            ],
            "_append_nonsingleton_leaf_node": [
                "Z",
                "p",
                "n",
                "level",
                "lvs",
                "ivl",
                "leaf_label_func",
                "i",
                "labels",
                "show_leaf_counts"
            ],
            "_append_contraction_marks": [
                "Z",
                "iv",
                "i",
                "n",
                "contraction_marks"
            ],
            "_append_contraction_marks_sub": [
                "Z",
                "iv",
                "i",
                "n",
                "contraction_marks"
            ],
            "_dendrogram_calculate_info": [
                "Z",
                "p",
                "truncate_mode",
                "color_threshold",
                "get_leaves",
                "orientation",
                "labels",
                "count_sort",
                "distance_sort",
                "show_leaf_counts",
                "i",
                "iv",
                "ivl",
                "n",
                "icoord_list",
                "dcoord_list",
                "lvs",
                "mhr",
                "current_color",
                "color_list",
                "currently_below_threshold",
                "leaf_label_func",
                "level",
                "contraction_marks",
                "link_color_func",
                "above_threshold_color"
            ],
            "is_isomorphic": [
                "T1",
                "T2"
            ],
            "maxdists": [
                "Z"
            ],
            "maxinconsts": [
                "Z",
                "R"
            ],
            "maxRstat": [
                "Z",
                "R",
                "i"
            ],
            "leaders": [
                "Z",
                "T"
            ],
            "ClusterWarning": {},
            "ClusterNode": {
                "__init__": [
                    "self",
                    "id",
                    "left",
                    "right",
                    "dist",
                    "count"
                ],
                "__lt__": [
                    "self",
                    "node"
                ],
                "__gt__": [
                    "self",
                    "node"
                ],
                "__eq__": [
                    "self",
                    "node"
                ],
                "get_id": [
                    "self"
                ],
                "get_count": [
                    "self"
                ],
                "get_left": [
                    "self"
                ],
                "get_right": [
                    "self"
                ],
                "is_leaf": [
                    "self"
                ],
                "pre_order": [
                    "self",
                    "func"
                ]
            }
        },
        "scipy.cluster": {},
        "scipy.cluster.vq": {
            "whiten": [
                "obs",
                "check_finite"
            ],
            "vq": [
                "obs",
                "code_book",
                "check_finite"
            ],
            "py_vq": [
                "obs",
                "code_book",
                "check_finite"
            ],
            "_kmeans": [
                "obs",
                "guess",
                "thresh"
            ],
            "kmeans": [
                "obs",
                "k_or_guess",
                "iter",
                "thresh",
                "check_finite"
            ],
            "_kpoints": [
                "data",
                "k"
            ],
            "_krandinit": [
                "data",
                "k"
            ],
            "_kpp": [
                "data",
                "k"
            ],
            "_missing_warn": [],
            "_missing_raise": [],
            "kmeans2": [
                "data",
                "k",
                "iter",
                "thresh",
                "minit",
                "missing",
                "check_finite"
            ],
            "ClusterError": {}
        },
        "scipy.cluster.tests.test_vq": {
            "TestWhiten": {
                "test_whiten": [
                    "self"
                ],
                "test_whiten_zero_std": [
                    "self"
                ],
                "test_whiten_not_finite": [
                    "self"
                ]
            },
            "TestVq": {
                "test_py_vq": [
                    "self"
                ],
                "test_vq": [
                    "self"
                ],
                "test_vq_1d": [
                    "self"
                ],
                "test__vq_sametype": [
                    "self"
                ],
                "test__vq_invalid_type": [
                    "self"
                ],
                "test_vq_large_nfeat": [
                    "self"
                ],
                "test_vq_large_features": [
                    "self"
                ]
            },
            "TestKMean": {
                "test_large_features": [
                    "self"
                ],
                "test_kmeans_simple": [
                    "self"
                ],
                "test_kmeans_lost_cluster": [
                    "self"
                ],
                "test_kmeans2_simple": [
                    "self"
                ],
                "test_kmeans2_rank1": [
                    "self"
                ],
                "test_kmeans2_rank1_2": [
                    "self"
                ],
                "test_kmeans2_high_dim": [
                    "self"
                ],
                "test_kmeans2_init": [
                    "self"
                ],
                "test_krandinit": [
                    "self"
                ],
                "test_kmeans2_empty": [
                    "self"
                ],
                "test_kmeans_0k": [
                    "self"
                ],
                "test_kmeans_large_thres": [
                    "self"
                ],
                "test_kmeans2_kpp_low_dim": [
                    "self"
                ],
                "test_kmeans2_kpp_high_dim": [
                    "self"
                ]
            }
        },
        "scipy.cluster.tests.test_hierarchy": {
            "calculate_maximum_distances": [
                "Z"
            ],
            "calculate_maximum_inconsistencies": [
                "Z",
                "R",
                "k"
            ],
            "within_tol": [
                "a",
                "b",
                "tol"
            ],
            "test_unsupported_uncondensed_distance_matrix_linkage_warning": [],
            "test_euclidean_linkage_value_error": [],
            "test_2x2_linkage": [],
            "test_node_compare": [],
            "test_cut_tree": [],
            "test_optimal_leaf_ordering": [],
            "test_Heap": [],
            "TestLinkage": {
                "test_linkage_non_finite_elements_in_distance_matrix": [
                    "self"
                ],
                "test_linkage_empty_distance_matrix": [
                    "self"
                ],
                "test_linkage_tdist": [
                    "self"
                ],
                "check_linkage_tdist": [
                    "self",
                    "method"
                ],
                "test_linkage_X": [
                    "self"
                ],
                "check_linkage_q": [
                    "self",
                    "method"
                ],
                "test_compare_with_trivial": [
                    "self"
                ],
                "test_optimal_leaf_ordering": [
                    "self"
                ]
            },
            "TestLinkageTies": {
                "test_linkage_ties": [
                    "self"
                ],
                "check_linkage_ties": [
                    "self",
                    "method"
                ]
            },
            "TestInconsistent": {
                "test_inconsistent_tdist": [
                    "self"
                ],
                "check_inconsistent_tdist": [
                    "self",
                    "depth"
                ]
            },
            "TestCopheneticDistance": {
                "test_linkage_cophenet_tdist_Z": [
                    "self"
                ],
                "test_linkage_cophenet_tdist_Z_Y": [
                    "self"
                ]
            },
            "TestMLabLinkageConversion": {
                "test_mlab_linkage_conversion_empty": [
                    "self"
                ],
                "test_mlab_linkage_conversion_single_row": [
                    "self"
                ],
                "test_mlab_linkage_conversion_multiple_rows": [
                    "self"
                ]
            },
            "TestFcluster": {
                "test_fclusterdata": [
                    "self"
                ],
                "check_fclusterdata": [
                    "self",
                    "t",
                    "criterion"
                ],
                "test_fcluster": [
                    "self"
                ],
                "check_fcluster": [
                    "self",
                    "t",
                    "criterion"
                ],
                "test_fcluster_monocrit": [
                    "self"
                ],
                "check_fcluster_monocrit": [
                    "self",
                    "t"
                ],
                "check_fcluster_maxclust_monocrit": [
                    "self",
                    "t"
                ]
            },
            "TestLeaders": {
                "test_leaders_single": [
                    "self"
                ]
            },
            "TestIsIsomorphic": {
                "test_is_isomorphic_1": [
                    "self"
                ],
                "test_is_isomorphic_2": [
                    "self"
                ],
                "test_is_isomorphic_3": [
                    "self"
                ],
                "test_is_isomorphic_4A": [
                    "self"
                ],
                "test_is_isomorphic_4B": [
                    "self"
                ],
                "test_is_isomorphic_4C": [
                    "self"
                ],
                "test_is_isomorphic_5": [
                    "self"
                ],
                "test_is_isomorphic_6": [
                    "self"
                ],
                "test_is_isomorphic_7": [
                    "self"
                ],
                "help_is_isomorphic_randperm": [
                    "self",
                    "nobs",
                    "nclusters",
                    "noniso",
                    "nerrors"
                ]
            },
            "TestIsValidLinkage": {
                "test_is_valid_linkage_various_size": [
                    "self"
                ],
                "check_is_valid_linkage_various_size": [
                    "self",
                    "nrow",
                    "ncol",
                    "valid"
                ],
                "test_is_valid_linkage_int_type": [
                    "self"
                ],
                "test_is_valid_linkage_empty": [
                    "self"
                ],
                "test_is_valid_linkage_4_and_up": [
                    "self"
                ],
                "test_is_valid_linkage_4_and_up_neg_index_left": [
                    "self"
                ],
                "test_is_valid_linkage_4_and_up_neg_index_right": [
                    "self"
                ],
                "test_is_valid_linkage_4_and_up_neg_dist": [
                    "self"
                ],
                "test_is_valid_linkage_4_and_up_neg_counts": [
                    "self"
                ]
            },
            "TestIsValidInconsistent": {
                "test_is_valid_im_int_type": [
                    "self"
                ],
                "test_is_valid_im_various_size": [
                    "self"
                ],
                "check_is_valid_im_various_size": [
                    "self",
                    "nrow",
                    "ncol",
                    "valid"
                ],
                "test_is_valid_im_empty": [
                    "self"
                ],
                "test_is_valid_im_4_and_up": [
                    "self"
                ],
                "test_is_valid_im_4_and_up_neg_index_left": [
                    "self"
                ],
                "test_is_valid_im_4_and_up_neg_index_right": [
                    "self"
                ],
                "test_is_valid_im_4_and_up_neg_dist": [
                    "self"
                ]
            },
            "TestNumObsLinkage": {
                "test_num_obs_linkage_empty": [
                    "self"
                ],
                "test_num_obs_linkage_1x4": [
                    "self"
                ],
                "test_num_obs_linkage_2x4": [
                    "self"
                ],
                "test_num_obs_linkage_4_and_up": [
                    "self"
                ]
            },
            "TestLeavesList": {
                "test_leaves_list_1x4": [
                    "self"
                ],
                "test_leaves_list_2x4": [
                    "self"
                ],
                "test_leaves_list_Q": [
                    "self"
                ],
                "check_leaves_list_Q": [
                    "self",
                    "method"
                ],
                "test_Q_subtree_pre_order": [
                    "self"
                ]
            },
            "TestCorrespond": {
                "test_correspond_empty": [
                    "self"
                ],
                "test_correspond_2_and_up": [
                    "self"
                ],
                "test_correspond_4_and_up": [
                    "self"
                ],
                "test_correspond_4_and_up_2": [
                    "self"
                ],
                "test_num_obs_linkage_multi_matrix": [
                    "self"
                ]
            },
            "TestIsMonotonic": {
                "test_is_monotonic_empty": [
                    "self"
                ],
                "test_is_monotonic_1x4": [
                    "self"
                ],
                "test_is_monotonic_2x4_T": [
                    "self"
                ],
                "test_is_monotonic_2x4_F": [
                    "self"
                ],
                "test_is_monotonic_3x4_T": [
                    "self"
                ],
                "test_is_monotonic_3x4_F1": [
                    "self"
                ],
                "test_is_monotonic_3x4_F2": [
                    "self"
                ],
                "test_is_monotonic_3x4_F3": [
                    "self"
                ],
                "test_is_monotonic_tdist_linkage1": [
                    "self"
                ],
                "test_is_monotonic_tdist_linkage2": [
                    "self"
                ],
                "test_is_monotonic_Q_linkage": [
                    "self"
                ]
            },
            "TestMaxDists": {
                "test_maxdists_empty_linkage": [
                    "self"
                ],
                "test_maxdists_one_cluster_linkage": [
                    "self"
                ],
                "test_maxdists_Q_linkage": [
                    "self"
                ],
                "check_maxdists_Q_linkage": [
                    "self",
                    "method"
                ]
            },
            "TestMaxInconsts": {
                "test_maxinconsts_empty_linkage": [
                    "self"
                ],
                "test_maxinconsts_difrow_linkage": [
                    "self"
                ],
                "test_maxinconsts_one_cluster_linkage": [
                    "self"
                ],
                "test_maxinconsts_Q_linkage": [
                    "self"
                ],
                "check_maxinconsts_Q_linkage": [
                    "self",
                    "method"
                ]
            },
            "TestMaxRStat": {
                "test_maxRstat_invalid_index": [
                    "self"
                ],
                "check_maxRstat_invalid_index": [
                    "self",
                    "i"
                ],
                "test_maxRstat_empty_linkage": [
                    "self"
                ],
                "check_maxRstat_empty_linkage": [
                    "self",
                    "i"
                ],
                "test_maxRstat_difrow_linkage": [
                    "self"
                ],
                "check_maxRstat_difrow_linkage": [
                    "self",
                    "i"
                ],
                "test_maxRstat_one_cluster_linkage": [
                    "self"
                ],
                "check_maxRstat_one_cluster_linkage": [
                    "self",
                    "i"
                ],
                "test_maxRstat_Q_linkage": [
                    "self"
                ],
                "check_maxRstat_Q_linkage": [
                    "self",
                    "method",
                    "i"
                ]
            },
            "TestDendrogram": {
                "test_dendrogram_single_linkage_tdist": [
                    "self"
                ],
                "test_valid_orientation": [
                    "self"
                ],
                "test_labels_as_array_or_list": [
                    "self"
                ],
                "test_valid_label_size": [
                    "self"
                ],
                "test_dendrogram_plot": [
                    "self"
                ],
                "check_dendrogram_plot": [
                    "self",
                    "orientation"
                ],
                "test_dendrogram_truncate_mode": [
                    "self"
                ],
                "test_dendrogram_colors": [
                    "self"
                ]
            }
        },
        "scipy.cluster.tests.test_disjoint_set": {
            "generate_random_token": [],
            "get_elements": [
                "n"
            ],
            "test_init": [],
            "test_len": [],
            "test_contains": [
                "n"
            ],
            "test_add": [
                "n"
            ],
            "test_element_not_present": [],
            "test_linear_union_sequence": [
                "n",
                "direction"
            ],
            "test_self_unions": [
                "n"
            ],
            "test_equal_size_ordering": [
                "n",
                "order"
            ],
            "test_binary_tree": [
                "kmax"
            ],
            "test_subsets": [
                "n"
            ]
        },
        "scipy.cluster.tests": {},
        "scipy.cluster.tests.hierarchy_test_data": {},
        "scipy.integrate._bvp": {
            "estimate_fun_jac": [
                "fun",
                "x",
                "y",
                "p",
                "f0"
            ],
            "estimate_bc_jac": [
                "bc",
                "ya",
                "yb",
                "p",
                "bc0"
            ],
            "compute_jac_indices": [
                "n",
                "m",
                "k"
            ],
            "stacked_matmul": [
                "a",
                "b"
            ],
            "construct_global_jac": [
                "n",
                "m",
                "k",
                "i_jac",
                "j_jac",
                "h",
                "df_dy",
                "df_dy_middle",
                "df_dp",
                "df_dp_middle",
                "dbc_dya",
                "dbc_dyb",
                "dbc_dp"
            ],
            "collocation_fun": [
                "fun",
                "y",
                "p",
                "x",
                "h"
            ],
            "prepare_sys": [
                "n",
                "m",
                "k",
                "fun",
                "bc",
                "fun_jac",
                "bc_jac",
                "x",
                "h"
            ],
            "solve_newton": [
                "n",
                "m",
                "h",
                "col_fun",
                "bc",
                "jac",
                "y",
                "p",
                "B",
                "bvp_tol",
                "bc_tol"
            ],
            "print_iteration_header": [],
            "print_iteration_progress": [
                "iteration",
                "residual",
                "bc_residual",
                "total_nodes",
                "nodes_added"
            ],
            "estimate_rms_residuals": [
                "fun",
                "sol",
                "x",
                "h",
                "p",
                "r_middle",
                "f_middle"
            ],
            "create_spline": [
                "y",
                "yp",
                "x",
                "h"
            ],
            "modify_mesh": [
                "x",
                "insert_1",
                "insert_2"
            ],
            "wrap_functions": [
                "fun",
                "bc",
                "fun_jac",
                "bc_jac",
                "k",
                "a",
                "S",
                "D",
                "dtype"
            ],
            "solve_bvp": [
                "fun",
                "bc",
                "x",
                "y",
                "p",
                "S",
                "fun_jac",
                "bc_jac",
                "tol",
                "max_nodes",
                "verbose",
                "bc_tol"
            ],
            "BVPResult": {}
        },
        "scipy.integrate._quadrature": {
            "_copy_func": [
                "f"
            ],
            "trapz": [
                "y",
                "x",
                "dx",
                "axis"
            ],
            "_cached_roots_legendre": [
                "n"
            ],
            "fixed_quad": [
                "func",
                "a",
                "b",
                "args",
                "n"
            ],
            "vectorize1": [
                "func",
                "args",
                "vec_func"
            ],
            "quadrature": [
                "func",
                "a",
                "b",
                "args",
                "tol",
                "rtol",
                "maxiter",
                "vec_func",
                "miniter"
            ],
            "tupleset": [
                "t",
                "i",
                "value"
            ],
            "cumtrapz": [
                "y",
                "x",
                "dx",
                "axis",
                "initial"
            ],
            "cumulative_trapezoid": [
                "y",
                "x",
                "dx",
                "axis",
                "initial"
            ],
            "_basic_simpson": [
                "y",
                "start",
                "stop",
                "x",
                "dx",
                "axis"
            ],
            "simps": [
                "y",
                "x",
                "dx",
                "axis",
                "even"
            ],
            "simpson": [
                "y",
                "x",
                "dx",
                "axis",
                "even"
            ],
            "romb": [
                "y",
                "dx",
                "axis",
                "show"
            ],
            "_difftrap": [
                "function",
                "interval",
                "numtraps"
            ],
            "_romberg_diff": [
                "b",
                "c",
                "k"
            ],
            "_printresmat": [
                "function",
                "interval",
                "resmat"
            ],
            "romberg": [
                "function",
                "a",
                "b",
                "args",
                "tol",
                "rtol",
                "show",
                "divmax",
                "vec_func"
            ],
            "newton_cotes": [
                "rn",
                "equal"
            ],
            "AccuracyWarning": {}
        },
        "scipy.integrate._quad_vec": {
            "_max_norm": [
                "x"
            ],
            "_get_sizeof": [
                "obj"
            ],
            "quad_vec": [
                "f",
                "a",
                "b",
                "epsabs",
                "epsrel",
                "norm",
                "cache_size",
                "limit",
                "workers",
                "points",
                "quadrature",
                "full_output"
            ],
            "_subdivide_interval": [
                "args"
            ],
            "_quadrature_trapezoid": [
                "x1",
                "x2",
                "f",
                "norm_func"
            ],
            "_quadrature_gk": [
                "a",
                "b",
                "f",
                "norm_func",
                "x",
                "w",
                "v"
            ],
            "_quadrature_gk21": [
                "a",
                "b",
                "f",
                "norm_func"
            ],
            "_quadrature_gk15": [
                "a",
                "b",
                "f",
                "norm_func"
            ],
            "LRUDict": {
                "__init__": [
                    "self",
                    "max_size"
                ],
                "__setitem__": [
                    "self",
                    "key",
                    "value"
                ],
                "update": [
                    "self",
                    "other"
                ]
            },
            "SemiInfiniteFunc": {
                "__init__": [
                    "self",
                    "func",
                    "start",
                    "infty"
                ],
                "get_t": [
                    "self",
                    "x"
                ],
                "__call__": [
                    "self",
                    "t"
                ]
            },
            "DoubleInfiniteFunc": {
                "__init__": [
                    "self",
                    "func"
                ],
                "get_t": [
                    "self",
                    "x"
                ],
                "__call__": [
                    "self",
                    "t"
                ]
            },
            "_Bunch": {
                "__init__": [
                    "self"
                ],
                "__repr__": [
                    "self"
                ]
            }
        },
        "scipy.integrate.setup": {
            "configuration": [
                "parent_package",
                "top_path"
            ]
        },
        "scipy.integrate": {},
        "scipy.integrate._ode": {
            "_transform_banded_jac": [
                "bjac"
            ],
            "find_integrator": [
                "name"
            ],
            "_vode_banded_jac_wrapper": [
                "jacfunc",
                "ml",
                "jac_params"
            ],
            "ode": {
                "__init__": [
                    "self",
                    "f",
                    "jac"
                ],
                "y": [
                    "self"
                ],
                "set_initial_value": [
                    "self",
                    "y",
                    "t"
                ],
                "set_integrator": [
                    "self",
                    "name"
                ],
                "integrate": [
                    "self",
                    "t",
                    "step",
                    "relax"
                ],
                "successful": [
                    "self"
                ],
                "get_return_code": [
                    "self"
                ],
                "set_f_params": [
                    "self"
                ],
                "set_jac_params": [
                    "self"
                ],
                "set_solout": [
                    "self",
                    "solout"
                ]
            },
            "complex_ode": {
                "__init__": [
                    "self",
                    "f",
                    "jac"
                ],
                "_wrap": [
                    "self",
                    "t",
                    "y"
                ],
                "_wrap_jac": [
                    "self",
                    "t",
                    "y"
                ],
                "y": [
                    "self"
                ],
                "set_integrator": [
                    "self",
                    "name"
                ],
                "set_initial_value": [
                    "self",
                    "y",
                    "t"
                ],
                "integrate": [
                    "self",
                    "t",
                    "step",
                    "relax"
                ],
                "set_solout": [
                    "self",
                    "solout"
                ]
            },
            "IntegratorConcurrencyError": {
                "__init__": [
                    "self",
                    "name"
                ]
            },
            "IntegratorBase": {
                "acquire_new_handle": [
                    "self"
                ],
                "check_handle": [
                    "self"
                ],
                "reset": [
                    "self",
                    "n",
                    "has_jac"
                ],
                "run": [
                    "self",
                    "f",
                    "jac",
                    "y0",
                    "t0",
                    "t1",
                    "f_params",
                    "jac_params"
                ],
                "step": [
                    "self",
                    "f",
                    "jac",
                    "y0",
                    "t0",
                    "t1",
                    "f_params",
                    "jac_params"
                ],
                "run_relax": [
                    "self",
                    "f",
                    "jac",
                    "y0",
                    "t0",
                    "t1",
                    "f_params",
                    "jac_params"
                ]
            },
            "vode": {
                "__init__": [
                    "self",
                    "method",
                    "with_jacobian",
                    "rtol",
                    "atol",
                    "lband",
                    "uband",
                    "order",
                    "nsteps",
                    "max_step",
                    "min_step",
                    "first_step"
                ],
                "_determine_mf_and_set_bands": [
                    "self",
                    "has_jac"
                ],
                "reset": [
                    "self",
                    "n",
                    "has_jac"
                ],
                "run": [
                    "self",
                    "f",
                    "jac",
                    "y0",
                    "t0",
                    "t1",
                    "f_params",
                    "jac_params"
                ],
                "step": [
                    "self"
                ],
                "run_relax": [
                    "self"
                ]
            },
            "zvode": {
                "reset": [
                    "self",
                    "n",
                    "has_jac"
                ]
            },
            "dopri5": {
                "__init__": [
                    "self",
                    "rtol",
                    "atol",
                    "nsteps",
                    "max_step",
                    "first_step",
                    "safety",
                    "ifactor",
                    "dfactor",
                    "beta",
                    "method",
                    "verbosity"
                ],
                "set_solout": [
                    "self",
                    "solout",
                    "complex"
                ],
                "reset": [
                    "self",
                    "n",
                    "has_jac"
                ],
                "run": [
                    "self",
                    "f",
                    "jac",
                    "y0",
                    "t0",
                    "t1",
                    "f_params",
                    "jac_params"
                ],
                "_solout": [
                    "self",
                    "nr",
                    "xold",
                    "x",
                    "y",
                    "nd",
                    "icomp",
                    "con"
                ]
            },
            "dop853": {
                "__init__": [
                    "self",
                    "rtol",
                    "atol",
                    "nsteps",
                    "max_step",
                    "first_step",
                    "safety",
                    "ifactor",
                    "dfactor",
                    "beta",
                    "method",
                    "verbosity"
                ],
                "reset": [
                    "self",
                    "n",
                    "has_jac"
                ]
            },
            "lsoda": {
                "__init__": [
                    "self",
                    "with_jacobian",
                    "rtol",
                    "atol",
                    "lband",
                    "uband",
                    "nsteps",
                    "max_step",
                    "min_step",
                    "first_step",
                    "ixpr",
                    "max_hnil",
                    "max_order_ns",
                    "max_order_s",
                    "method"
                ],
                "reset": [
                    "self",
                    "n",
                    "has_jac"
                ],
                "run": [
                    "self",
                    "f",
                    "jac",
                    "y0",
                    "t0",
                    "t1",
                    "f_params",
                    "jac_params"
                ],
                "step": [
                    "self"
                ],
                "run_relax": [
                    "self"
                ]
            }
        },
        "scipy.integrate.odepack": {
            "odeint": [
                "func",
                "y0",
                "t",
                "args",
                "Dfun",
                "col_deriv",
                "full_output",
                "ml",
                "mu",
                "rtol",
                "atol",
                "tcrit",
                "h0",
                "hmax",
                "hmin",
                "ixpr",
                "mxstep",
                "mxhnil",
                "mxordn",
                "mxords",
                "printmessg",
                "tfirst"
            ],
            "ODEintWarning": {}
        },
        "scipy.integrate.quadpack": {
            "quad_explain": [
                "output"
            ],
            "quad": [
                "func",
                "a",
                "b",
                "args",
                "full_output",
                "epsabs",
                "epsrel",
                "limit",
                "points",
                "weight",
                "wvar",
                "wopts",
                "maxp1",
                "limlst"
            ],
            "_quad": [
                "func",
                "a",
                "b",
                "args",
                "full_output",
                "epsabs",
                "epsrel",
                "limit",
                "points"
            ],
            "_quad_weight": [
                "func",
                "a",
                "b",
                "args",
                "full_output",
                "epsabs",
                "epsrel",
                "limlst",
                "limit",
                "maxp1",
                "weight",
                "wvar",
                "wopts"
            ],
            "dblquad": [
                "func",
                "a",
                "b",
                "gfun",
                "hfun",
                "args",
                "epsabs",
                "epsrel"
            ],
            "tplquad": [
                "func",
                "a",
                "b",
                "gfun",
                "hfun",
                "qfun",
                "rfun",
                "args",
                "epsabs",
                "epsrel"
            ],
            "nquad": [
                "func",
                "ranges",
                "args",
                "opts",
                "full_output"
            ],
            "IntegrationWarning": {},
            "_RangeFunc": {
                "__init__": [
                    "self",
                    "range_"
                ],
                "__call__": [
                    "self"
                ]
            },
            "_OptFunc": {
                "__init__": [
                    "self",
                    "opt"
                ],
                "__call__": [
                    "self"
                ]
            },
            "_NQuad": {
                "__init__": [
                    "self",
                    "func",
                    "ranges",
                    "opts",
                    "full_output"
                ],
                "integrate": [
                    "self"
                ]
            }
        },
        "scipy.integrate.tests.test_banded_ode_solvers": {
            "_band_count": [
                "a"
            ],
            "_linear_func": [
                "t",
                "y",
                "a"
            ],
            "_linear_jac": [
                "t",
                "y",
                "a"
            ],
            "_linear_banded_jac": [
                "t",
                "y",
                "a"
            ],
            "_solve_linear_sys": [
                "a",
                "y0",
                "tend",
                "dt",
                "solver",
                "method",
                "use_jac",
                "with_jacobian",
                "banded"
            ],
            "_analytical_solution": [
                "a",
                "y0",
                "t"
            ],
            "test_banded_ode_solvers": []
        },
        "scipy.integrate.tests.test_quadpack": {
            "assert_quad": [
                "value_and_err",
                "tabled_value",
                "errTol"
            ],
            "get_clib_test_routine": [
                "name",
                "restype"
            ],
            "TestCtypesQuad": {
                "setup_method": [
                    "self"
                ],
                "test_typical": [
                    "self"
                ],
                "test_ctypes_sine": [
                    "self"
                ],
                "test_ctypes_variants": [
                    "self"
                ]
            },
            "TestMultivariateCtypesQuad": {
                "setup_method": [
                    "self"
                ],
                "test_typical": [
                    "self"
                ],
                "test_indefinite": [
                    "self"
                ],
                "test_threadsafety": [
                    "self"
                ]
            },
            "TestQuad": {
                "test_typical": [
                    "self"
                ],
                "test_indefinite": [
                    "self"
                ],
                "test_singular": [
                    "self"
                ],
                "test_sine_weighted_finite": [
                    "self"
                ],
                "test_sine_weighted_infinite": [
                    "self"
                ],
                "test_cosine_weighted_infinite": [
                    "self"
                ],
                "test_algebraic_log_weight": [
                    "self"
                ],
                "test_cauchypv_weight": [
                    "self"
                ],
                "test_b_less_than_a": [
                    "self"
                ],
                "test_b_less_than_a_2": [
                    "self"
                ],
                "test_b_less_than_a_3": [
                    "self"
                ],
                "test_b_less_than_a_full_output": [
                    "self"
                ],
                "test_double_integral": [
                    "self"
                ],
                "test_double_integral2": [
                    "self"
                ],
                "test_double_integral3": [
                    "self"
                ],
                "test_triple_integral": [
                    "self"
                ]
            },
            "TestNQuad": {
                "test_fixed_limits": [
                    "self"
                ],
                "test_variable_limits": [
                    "self"
                ],
                "test_square_separate_ranges_and_opts": [
                    "self"
                ],
                "test_square_aliased_ranges_and_opts": [
                    "self"
                ],
                "test_square_separate_fn_ranges_and_opts": [
                    "self"
                ],
                "test_square_aliased_fn_ranges_and_opts": [
                    "self"
                ],
                "test_matching_quad": [
                    "self"
                ],
                "test_matching_dblquad": [
                    "self"
                ],
                "test_matching_tplquad": [
                    "self"
                ],
                "test_dict_as_opts": [
                    "self"
                ]
            }
        },
        "scipy.integrate.tests.test_odeint_jac": {
            "rhs": [
                "y",
                "t"
            ],
            "jac": [
                "y",
                "t"
            ],
            "bjac": [
                "y",
                "t"
            ],
            "check_odeint": [
                "jactype"
            ],
            "test_odeint_full_jac": [],
            "test_odeint_banded_jac": []
        },
        "scipy.integrate.tests": {},
        "scipy.integrate.tests.test__quad_vec": {
            "test_quad_vec_simple": [
                "quadrature"
            ],
            "test_quad_vec_simple_inf": [
                "quadrature"
            ],
            "_lorenzian": [
                "x"
            ],
            "test_quad_vec_pool": [],
            "test_num_eval": [
                "quadrature"
            ],
            "test_info": [],
            "test_nan_inf": [],
            "test_points": [
                "a",
                "b"
            ]
        },
        "scipy.integrate.tests.test_integrate": {
            "f": [
                "t",
                "x"
            ],
            "jac": [
                "t",
                "x"
            ],
            "f1": [
                "t",
                "x",
                "omega"
            ],
            "jac1": [
                "t",
                "x",
                "omega"
            ],
            "f2": [
                "t",
                "x",
                "omega1",
                "omega2"
            ],
            "jac2": [
                "t",
                "x",
                "omega1",
                "omega2"
            ],
            "fv": [
                "t",
                "x",
                "omega"
            ],
            "jacv": [
                "t",
                "x",
                "omega"
            ],
            "test_odeint_trivial_time": [],
            "test_odeint_banded_jacobian": [],
            "test_odeint_errors": [],
            "test_odeint_bad_shapes": [],
            "test_repeated_t_values": [],
            "TestOdeint": {
                "_do_problem": [
                    "self",
                    "problem"
                ],
                "test_odeint": [
                    "self"
                ]
            },
            "TestODEClass": {
                "_do_problem": [
                    "self",
                    "problem",
                    "integrator",
                    "method"
                ]
            },
            "TestOde": {
                "test_vode": [
                    "self"
                ],
                "test_zvode": [
                    "self"
                ],
                "test_lsoda": [
                    "self"
                ],
                "test_dopri5": [
                    "self"
                ],
                "test_dop853": [
                    "self"
                ],
                "test_concurrent_fail": [
                    "self"
                ],
                "test_concurrent_ok": [
                    "self"
                ]
            },
            "TestComplexOde": {
                "test_vode": [
                    "self"
                ],
                "test_lsoda": [
                    "self"
                ],
                "test_dopri5": [
                    "self"
                ],
                "test_dop853": [
                    "self"
                ]
            },
            "TestSolout": {
                "_run_solout_test": [
                    "self",
                    "integrator"
                ],
                "test_solout": [
                    "self"
                ],
                "_run_solout_after_initial_test": [
                    "self",
                    "integrator"
                ],
                "test_solout_after_initial": [
                    "self"
                ],
                "_run_solout_break_test": [
                    "self",
                    "integrator"
                ],
                "test_solout_break": [
                    "self"
                ]
            },
            "TestComplexSolout": {
                "_run_solout_test": [
                    "self",
                    "integrator"
                ],
                "test_solout": [
                    "self"
                ],
                "_run_solout_break_test": [
                    "self",
                    "integrator"
                ],
                "test_solout_break": [
                    "self"
                ]
            },
            "ODE": {},
            "SimpleOscillator": {
                "f": [
                    "self",
                    "z",
                    "t"
                ],
                "verify": [
                    "self",
                    "zs",
                    "t"
                ]
            },
            "ComplexExp": {
                "f": [
                    "self",
                    "z",
                    "t"
                ],
                "jac": [
                    "self",
                    "z",
                    "t"
                ],
                "verify": [
                    "self",
                    "zs",
                    "t"
                ]
            },
            "Pi": {
                "f": [
                    "self",
                    "z",
                    "t"
                ],
                "verify": [
                    "self",
                    "zs",
                    "t"
                ]
            },
            "CoupledDecay": {
                "f": [
                    "self",
                    "z",
                    "t"
                ],
                "jac": [
                    "self",
                    "z",
                    "t"
                ],
                "verify": [
                    "self",
                    "zs",
                    "t"
                ]
            },
            "ODECheckParameterUse": {
                "_get_solver": [
                    "self",
                    "f",
                    "jac"
                ],
                "_check_solver": [
                    "self",
                    "solver"
                ],
                "test_no_params": [
                    "self"
                ],
                "test_one_scalar_param": [
                    "self"
                ],
                "test_two_scalar_params": [
                    "self"
                ],
                "test_vector_param": [
                    "self"
                ],
                "test_warns_on_failure": [
                    "self"
                ]
            },
            "TestDOPRI5CheckParameterUse": {},
            "TestDOP853CheckParameterUse": {},
            "TestVODECheckParameterUse": {},
            "TestZVODECheckParameterUse": {},
            "TestLSODACheckParameterUse": {}
        },
        "scipy.integrate.tests.test_quadrature": {
            "TestFixedQuad": {
                "test_scalar": [
                    "self"
                ],
                "test_vector": [
                    "self"
                ]
            },
            "TestQuadrature": {
                "quad": [
                    "self",
                    "x",
                    "a",
                    "b",
                    "args"
                ],
                "test_quadrature": [
                    "self"
                ],
                "test_quadrature_rtol": [
                    "self"
                ],
                "test_quadrature_miniter": [
                    "self"
                ],
                "test_quadrature_single_args": [
                    "self"
                ],
                "test_romberg": [
                    "self"
                ],
                "test_romberg_rtol": [
                    "self"
                ],
                "test_romb": [
                    "self"
                ],
                "test_romb_gh_3731": [
                    "self"
                ],
                "test_non_dtype": [
                    "self"
                ],
                "test_newton_cotes": [
                    "self"
                ],
                "test_newton_cotes2": [
                    "self"
                ],
                "test_simpson": [
                    "self"
                ],
                "test_simps": [
                    "self"
                ]
            },
            "TestCumulative_trapezoid": {
                "test_1d": [
                    "self"
                ],
                "test_y_nd_x_nd": [
                    "self"
                ],
                "test_y_nd_x_1d": [
                    "self"
                ],
                "test_x_none": [
                    "self"
                ],
                "test_cumtrapz": [
                    "self"
                ]
            },
            "TestTrapezoid": {
                "test_trapezoid": [
                    "self"
                ],
                "test_trapz": [
                    "self"
                ]
            }
        },
        "scipy.integrate.tests.test_bvp": {
            "exp_fun": [
                "x",
                "y"
            ],
            "exp_fun_jac": [
                "x",
                "y"
            ],
            "exp_bc": [
                "ya",
                "yb"
            ],
            "exp_bc_complex": [
                "ya",
                "yb"
            ],
            "exp_bc_jac": [
                "ya",
                "yb"
            ],
            "exp_sol": [
                "x"
            ],
            "sl_fun": [
                "x",
                "y",
                "p"
            ],
            "sl_fun_jac": [
                "x",
                "y",
                "p"
            ],
            "sl_bc": [
                "ya",
                "yb",
                "p"
            ],
            "sl_bc_jac": [
                "ya",
                "yb",
                "p"
            ],
            "sl_sol": [
                "x",
                "p"
            ],
            "emden_fun": [
                "x",
                "y"
            ],
            "emden_fun_jac": [
                "x",
                "y"
            ],
            "emden_bc": [
                "ya",
                "yb"
            ],
            "emden_bc_jac": [
                "ya",
                "yb"
            ],
            "emden_sol": [
                "x"
            ],
            "undefined_fun": [
                "x",
                "y"
            ],
            "undefined_bc": [
                "ya",
                "yb"
            ],
            "big_fun": [
                "x",
                "y"
            ],
            "big_bc": [
                "ya",
                "yb"
            ],
            "big_sol": [
                "x",
                "n"
            ],
            "big_fun_with_parameters": [
                "x",
                "y",
                "p"
            ],
            "big_fun_with_parameters_jac": [
                "x",
                "y",
                "p"
            ],
            "big_bc_with_parameters": [
                "ya",
                "yb",
                "p"
            ],
            "big_bc_with_parameters_jac": [
                "ya",
                "yb",
                "p"
            ],
            "big_sol_with_parameters": [
                "x",
                "p"
            ],
            "shock_fun": [
                "x",
                "y"
            ],
            "shock_bc": [
                "ya",
                "yb"
            ],
            "shock_sol": [
                "x"
            ],
            "nonlin_bc_fun": [
                "x",
                "y"
            ],
            "nonlin_bc_bc": [
                "ya",
                "yb"
            ],
            "nonlin_bc_sol": [
                "x"
            ],
            "test_modify_mesh": [],
            "test_compute_fun_jac": [],
            "test_compute_bc_jac": [],
            "test_compute_jac_indices": [],
            "test_compute_global_jac": [],
            "test_parameter_validation": [],
            "test_no_params": [],
            "test_with_params": [],
            "test_singular_term": [],
            "test_complex": [],
            "test_failures": [],
            "test_big_problem": [],
            "test_big_problem_with_parameters": [],
            "test_shock_layer": [],
            "test_nonlin_bc": [],
            "test_verbose": []
        },
        "scipy.integrate._ivp.common": {
            "validate_first_step": [
                "first_step",
                "t0",
                "t_bound"
            ],
            "validate_max_step": [
                "max_step"
            ],
            "warn_extraneous": [
                "extraneous"
            ],
            "validate_tol": [
                "rtol",
                "atol",
                "n"
            ],
            "norm": [
                "x"
            ],
            "select_initial_step": [
                "fun",
                "t0",
                "y0",
                "f0",
                "direction",
                "order",
                "rtol",
                "atol"
            ],
            "num_jac": [
                "fun",
                "t",
                "y",
                "f",
                "threshold",
                "factor",
                "sparsity"
            ],
            "_dense_num_jac": [
                "fun",
                "t",
                "y",
                "f",
                "h",
                "factor",
                "y_scale"
            ],
            "_sparse_num_jac": [
                "fun",
                "t",
                "y",
                "f",
                "h",
                "factor",
                "y_scale",
                "structure",
                "groups"
            ],
            "OdeSolution": {
                "__init__": [
                    "self",
                    "ts",
                    "interpolants"
                ],
                "_call_single": [
                    "self",
                    "t"
                ],
                "__call__": [
                    "self",
                    "t"
                ]
            }
        },
        "scipy.integrate._ivp.dop853_coefficients": {},
        "scipy.integrate._ivp.setup": {
            "configuration": [
                "parent_package",
                "top_path"
            ]
        },
        "scipy.integrate._ivp.radau": {
            "solve_collocation_system": [
                "fun",
                "t",
                "y",
                "h",
                "Z0",
                "scale",
                "tol",
                "LU_real",
                "LU_complex",
                "solve_lu"
            ],
            "predict_factor": [
                "h_abs",
                "h_abs_old",
                "error_norm",
                "error_norm_old"
            ],
            "Radau": {
                "__init__": [
                    "self",
                    "fun",
                    "t0",
                    "y0",
                    "t_bound",
                    "max_step",
                    "rtol",
                    "atol",
                    "jac",
                    "jac_sparsity",
                    "vectorized",
                    "first_step"
                ],
                "_validate_jac": [
                    "self",
                    "jac",
                    "sparsity"
                ],
                "_step_impl": [
                    "self"
                ],
                "_compute_dense_output": [
                    "self"
                ],
                "_dense_output_impl": [
                    "self"
                ]
            },
            "RadauDenseOutput": {
                "__init__": [
                    "self",
                    "t_old",
                    "t",
                    "y_old",
                    "Q"
                ],
                "_call_impl": [
                    "self",
                    "t"
                ]
            }
        },
        "scipy.integrate._ivp": {},
        "scipy.integrate._ivp.lsoda": {
            "LSODA": {
                "__init__": [
                    "self",
                    "fun",
                    "t0",
                    "y0",
                    "t_bound",
                    "first_step",
                    "min_step",
                    "max_step",
                    "rtol",
                    "atol",
                    "jac",
                    "lband",
                    "uband",
                    "vectorized"
                ],
                "_step_impl": [
                    "self"
                ],
                "_dense_output_impl": [
                    "self"
                ]
            },
            "LsodaDenseOutput": {
                "__init__": [
                    "self",
                    "t_old",
                    "t",
                    "h",
                    "order",
                    "yh"
                ],
                "_call_impl": [
                    "self",
                    "t"
                ]
            }
        },
        "scipy.integrate._ivp.base": {
            "check_arguments": [
                "fun",
                "y0",
                "support_complex"
            ],
            "OdeSolver": {
                "__init__": [
                    "self",
                    "fun",
                    "t0",
                    "y0",
                    "t_bound",
                    "vectorized",
                    "support_complex"
                ],
                "step_size": [
                    "self"
                ],
                "step": [
                    "self"
                ],
                "dense_output": [
                    "self"
                ],
                "_step_impl": [
                    "self"
                ],
                "_dense_output_impl": [
                    "self"
                ]
            },
            "DenseOutput": {
                "__init__": [
                    "self",
                    "t_old",
                    "t"
                ],
                "__call__": [
                    "self",
                    "t"
                ],
                "_call_impl": [
                    "self",
                    "t"
                ]
            },
            "ConstantDenseOutput": {
                "__init__": [
                    "self",
                    "t_old",
                    "t",
                    "value"
                ],
                "_call_impl": [
                    "self",
                    "t"
                ]
            }
        },
        "scipy.integrate._ivp.rk": {
            "rk_step": [
                "fun",
                "t",
                "y",
                "f",
                "h",
                "A",
                "B",
                "C",
                "K"
            ],
            "RungeKutta": {
                "__init__": [
                    "self",
                    "fun",
                    "t0",
                    "y0",
                    "t_bound",
                    "max_step",
                    "rtol",
                    "atol",
                    "vectorized",
                    "first_step"
                ],
                "_estimate_error": [
                    "self",
                    "K",
                    "h"
                ],
                "_estimate_error_norm": [
                    "self",
                    "K",
                    "h",
                    "scale"
                ],
                "_step_impl": [
                    "self"
                ],
                "_dense_output_impl": [
                    "self"
                ]
            },
            "RK23": {},
            "RK45": {},
            "DOP853": {
                "__init__": [
                    "self",
                    "fun",
                    "t0",
                    "y0",
                    "t_bound",
                    "max_step",
                    "rtol",
                    "atol",
                    "vectorized",
                    "first_step"
                ],
                "_estimate_error": [
                    "self",
                    "K",
                    "h"
                ],
                "_estimate_error_norm": [
                    "self",
                    "K",
                    "h",
                    "scale"
                ],
                "_dense_output_impl": [
                    "self"
                ]
            },
            "RkDenseOutput": {
                "__init__": [
                    "self",
                    "t_old",
                    "t",
                    "y_old",
                    "Q"
                ],
                "_call_impl": [
                    "self",
                    "t"
                ]
            },
            "Dop853DenseOutput": {
                "__init__": [
                    "self",
                    "t_old",
                    "t",
                    "y_old",
                    "F"
                ],
                "_call_impl": [
                    "self",
                    "t"
                ]
            }
        },
        "scipy.integrate._ivp.ivp": {
            "prepare_events": [
                "events"
            ],
            "solve_event_equation": [
                "event",
                "sol",
                "t_old",
                "t"
            ],
            "handle_events": [
                "sol",
                "events",
                "active_events",
                "is_terminal",
                "t_old",
                "t"
            ],
            "find_active_events": [
                "g",
                "g_new",
                "direction"
            ],
            "solve_ivp": [
                "fun",
                "t_span",
                "y0",
                "method",
                "t_eval",
                "dense_output",
                "events",
                "vectorized",
                "args"
            ],
            "OdeResult": {}
        },
        "scipy.integrate._ivp.bdf": {
            "compute_R": [
                "order",
                "factor"
            ],
            "change_D": [
                "D",
                "order",
                "factor"
            ],
            "solve_bdf_system": [
                "fun",
                "t_new",
                "y_predict",
                "c",
                "psi",
                "LU",
                "solve_lu",
                "scale",
                "tol"
            ],
            "BDF": {
                "__init__": [
                    "self",
                    "fun",
                    "t0",
                    "y0",
                    "t_bound",
                    "max_step",
                    "rtol",
                    "atol",
                    "jac",
                    "jac_sparsity",
                    "vectorized",
                    "first_step"
                ],
                "_validate_jac": [
                    "self",
                    "jac",
                    "sparsity"
                ],
                "_step_impl": [
                    "self"
                ],
                "_dense_output_impl": [
                    "self"
                ]
            },
            "BdfDenseOutput": {
                "__init__": [
                    "self",
                    "t_old",
                    "t",
                    "h",
                    "order",
                    "D"
                ],
                "_call_impl": [
                    "self",
                    "t"
                ]
            }
        },
        "scipy.special.basic": {},
        "scipy.special._lambertw": {
            "lambertw": [
                "z",
                "k",
                "tol"
            ]
        },
        "scipy.special.spfun_stats": {
            "multigammaln": [
                "a",
                "d"
            ]
        },
        "scipy.special.orthogonal": {
            "_gen_roots_and_weights": [
                "n",
                "mu0",
                "an_func",
                "bn_func",
                "f",
                "df",
                "symmetrize",
                "mu"
            ],
            "roots_jacobi": [
                "n",
                "alpha",
                "beta",
                "mu"
            ],
            "jacobi": [
                "n",
                "alpha",
                "beta",
                "monic"
            ],
            "roots_sh_jacobi": [
                "n",
                "p1",
                "q1",
                "mu"
            ],
            "sh_jacobi": [
                "n",
                "p",
                "q",
                "monic"
            ],
            "roots_genlaguerre": [
                "n",
                "alpha",
                "mu"
            ],
            "genlaguerre": [
                "n",
                "alpha",
                "monic"
            ],
            "roots_laguerre": [
                "n",
                "mu"
            ],
            "laguerre": [
                "n",
                "monic"
            ],
            "roots_hermite": [
                "n",
                "mu"
            ],
            "_compute_tauk": [
                "n",
                "k",
                "maxit"
            ],
            "_initial_nodes_a": [
                "n",
                "k"
            ],
            "_initial_nodes_b": [
                "n",
                "k"
            ],
            "_initial_nodes": [
                "n"
            ],
            "_pbcf": [
                "n",
                "theta"
            ],
            "_newton": [
                "n",
                "x_initial",
                "maxit"
            ],
            "_roots_hermite_asy": [
                "n"
            ],
            "hermite": [
                "n",
                "monic"
            ],
            "roots_hermitenorm": [
                "n",
                "mu"
            ],
            "hermitenorm": [
                "n",
                "monic"
            ],
            "roots_gegenbauer": [
                "n",
                "alpha",
                "mu"
            ],
            "gegenbauer": [
                "n",
                "alpha",
                "monic"
            ],
            "roots_chebyt": [
                "n",
                "mu"
            ],
            "chebyt": [
                "n",
                "monic"
            ],
            "roots_chebyu": [
                "n",
                "mu"
            ],
            "chebyu": [
                "n",
                "monic"
            ],
            "roots_chebyc": [
                "n",
                "mu"
            ],
            "chebyc": [
                "n",
                "monic"
            ],
            "roots_chebys": [
                "n",
                "mu"
            ],
            "chebys": [
                "n",
                "monic"
            ],
            "roots_sh_chebyt": [
                "n",
                "mu"
            ],
            "sh_chebyt": [
                "n",
                "monic"
            ],
            "roots_sh_chebyu": [
                "n",
                "mu"
            ],
            "sh_chebyu": [
                "n",
                "monic"
            ],
            "roots_legendre": [
                "n",
                "mu"
            ],
            "legendre": [
                "n",
                "monic"
            ],
            "roots_sh_legendre": [
                "n",
                "mu"
            ],
            "sh_legendre": [
                "n",
                "monic"
            ],
            "orthopoly1d": {
                "__init__": [
                    "self",
                    "roots",
                    "weights",
                    "hn",
                    "kn",
                    "wfunc",
                    "limits",
                    "monic",
                    "eval_func"
                ],
                "__call__": [
                    "self",
                    "v"
                ],
                "_scale": [
                    "self",
                    "p"
                ]
            }
        },
        "scipy.special.sf_error": {
            "SpecialFunctionWarning": {},
            "SpecialFunctionError": {}
        },
        "scipy.special._generate_pyx": {
            "underscore": [
                "arg"
            ],
            "cast_order": [
                "c"
            ],
            "generate_loop": [
                "func_inputs",
                "func_outputs",
                "func_retval",
                "ufunc_inputs",
                "ufunc_outputs"
            ],
            "generate_fused_type": [
                "codes"
            ],
            "generate_bench": [
                "name",
                "codes"
            ],
            "generate_doc": [
                "name",
                "specs"
            ],
            "npy_cdouble_from_double_complex": [
                "var"
            ],
            "double_complex_from_npy_cdouble": [
                "var"
            ],
            "iter_variants": [
                "inputs",
                "outputs"
            ],
            "get_declaration": [
                "ufunc",
                "c_name",
                "c_proto",
                "cy_proto",
                "header",
                "proto_h_filename"
            ],
            "generate_ufuncs": [
                "fn_prefix",
                "cxx_fn_prefix",
                "ufuncs"
            ],
            "generate_fused_funcs": [
                "modname",
                "ufunc_fn_prefix",
                "fused_funcs"
            ],
            "generate_ufuncs_type_stubs": [
                "module_name",
                "ufuncs"
            ],
            "unique": [
                "lst"
            ],
            "all_newer": [
                "src_files",
                "dst_files"
            ],
            "main": [],
            "Func": {
                "__init__": [
                    "self",
                    "name",
                    "signatures"
                ],
                "_parse_signature": [
                    "self",
                    "sig"
                ],
                "get_prototypes": [
                    "self",
                    "nptypes_for_h"
                ],
                "cython_func_name": [
                    "self",
                    "c_name",
                    "specialized",
                    "prefix",
                    "override"
                ]
            },
            "Ufunc": {
                "__init__": [
                    "self",
                    "name",
                    "signatures"
                ],
                "_get_signatures_and_loops": [
                    "self",
                    "all_loops"
                ],
                "generate": [
                    "self",
                    "all_loops"
                ]
            },
            "FusedFunc": {
                "__init__": [
                    "self",
                    "name",
                    "signatures"
                ],
                "_get_codes": [
                    "self"
                ],
                "_get_types": [
                    "self",
                    "codes"
                ],
                "_get_vars": [
                    "self"
                ],
                "_get_conditional": [
                    "self",
                    "types",
                    "codes",
                    "adverb"
                ],
                "_get_incallvars": [
                    "self",
                    "intypes",
                    "c"
                ],
                "_get_outcallvars": [
                    "self",
                    "outtypes",
                    "c"
                ],
                "_get_nan_decs": [
                    "self"
                ],
                "_get_tmp_decs": [
                    "self",
                    "all_tmpvars"
                ],
                "_get_python_wrap": [
                    "self"
                ],
                "_get_common": [
                    "self",
                    "signum",
                    "sig"
                ],
                "_generate_from_return_and_no_outargs": [
                    "self"
                ],
                "_generate_from_outargs_and_no_return": [
                    "self"
                ],
                "_generate_from_outargs_and_return": [
                    "self"
                ],
                "generate": [
                    "self"
                ]
            }
        },
        "scipy.special.setup": {
            "configuration": [
                "parent_package",
                "top_path"
            ]
        },
        "scipy.special._basic": {
            "_nonneg_int_or_fail": [
                "n",
                "var_name",
                "strict"
            ],
            "diric": [
                "x",
                "n"
            ],
            "jnjnp_zeros": [
                "nt"
            ],
            "jnyn_zeros": [
                "n",
                "nt"
            ],
            "jn_zeros": [
                "n",
                "nt"
            ],
            "jnp_zeros": [
                "n",
                "nt"
            ],
            "yn_zeros": [
                "n",
                "nt"
            ],
            "ynp_zeros": [
                "n",
                "nt"
            ],
            "y0_zeros": [
                "nt",
                "complex"
            ],
            "y1_zeros": [
                "nt",
                "complex"
            ],
            "y1p_zeros": [
                "nt",
                "complex"
            ],
            "_bessel_diff_formula": [
                "v",
                "z",
                "n",
                "L",
                "phase"
            ],
            "jvp": [
                "v",
                "z",
                "n"
            ],
            "yvp": [
                "v",
                "z",
                "n"
            ],
            "kvp": [
                "v",
                "z",
                "n"
            ],
            "ivp": [
                "v",
                "z",
                "n"
            ],
            "h1vp": [
                "v",
                "z",
                "n"
            ],
            "h2vp": [
                "v",
                "z",
                "n"
            ],
            "riccati_jn": [
                "n",
                "x"
            ],
            "riccati_yn": [
                "n",
                "x"
            ],
            "erf_zeros": [
                "nt"
            ],
            "fresnelc_zeros": [
                "nt"
            ],
            "fresnels_zeros": [
                "nt"
            ],
            "fresnel_zeros": [
                "nt"
            ],
            "assoc_laguerre": [
                "x",
                "n",
                "k"
            ],
            "polygamma": [
                "n",
                "x"
            ],
            "mathieu_even_coef": [
                "m",
                "q"
            ],
            "mathieu_odd_coef": [
                "m",
                "q"
            ],
            "lpmn": [
                "m",
                "n",
                "z"
            ],
            "clpmn": [
                "m",
                "n",
                "z",
                "type"
            ],
            "lqmn": [
                "m",
                "n",
                "z"
            ],
            "bernoulli": [
                "n"
            ],
            "euler": [
                "n"
            ],
            "lpn": [
                "n",
                "z"
            ],
            "lqn": [
                "n",
                "z"
            ],
            "ai_zeros": [
                "nt"
            ],
            "bi_zeros": [
                "nt"
            ],
            "lmbda": [
                "v",
                "x"
            ],
            "pbdv_seq": [
                "v",
                "x"
            ],
            "pbvv_seq": [
                "v",
                "x"
            ],
            "pbdn_seq": [
                "n",
                "z"
            ],
            "ber_zeros": [
                "nt"
            ],
            "bei_zeros": [
                "nt"
            ],
            "ker_zeros": [
                "nt"
            ],
            "kei_zeros": [
                "nt"
            ],
            "berp_zeros": [
                "nt"
            ],
            "beip_zeros": [
                "nt"
            ],
            "kerp_zeros": [
                "nt"
            ],
            "keip_zeros": [
                "nt"
            ],
            "kelvin_zeros": [
                "nt"
            ],
            "pro_cv_seq": [
                "m",
                "n",
                "c"
            ],
            "obl_cv_seq": [
                "m",
                "n",
                "c"
            ],
            "comb": [
                "N",
                "k",
                "exact",
                "repetition"
            ],
            "perm": [
                "N",
                "k",
                "exact"
            ],
            "_range_prod": [
                "lo",
                "hi"
            ],
            "factorial": [
                "n",
                "exact"
            ],
            "factorial2": [
                "n",
                "exact"
            ],
            "factorialk": [
                "n",
                "k",
                "exact"
            ],
            "zeta": [
                "x",
                "q",
                "out"
            ]
        },
        "scipy.special._spherical_bessel": {
            "spherical_jn": [
                "n",
                "z",
                "derivative"
            ],
            "spherical_yn": [
                "n",
                "z",
                "derivative"
            ],
            "spherical_in": [
                "n",
                "z",
                "derivative"
            ],
            "spherical_kn": [
                "n",
                "z",
                "derivative"
            ]
        },
        "scipy.special": {},
        "scipy.special._mptestutils": {
            "get_args": [
                "argspec",
                "n"
            ],
            "assert_mpmath_equal": [],
            "nonfunctional_tooslow": [
                "func"
            ],
            "mpf2float": [
                "x"
            ],
            "mpc2complex": [
                "x"
            ],
            "trace_args": [
                "func"
            ],
            "time_limited": [
                "timeout",
                "return_val",
                "use_sigalrm"
            ],
            "exception_to_nan": [
                "func"
            ],
            "inf_to_nan": [
                "func"
            ],
            "mp_assert_allclose": [
                "res",
                "std",
                "atol",
                "rtol"
            ],
            "Arg": {
                "__init__": [
                    "self",
                    "a",
                    "b",
                    "inclusive_a",
                    "inclusive_b"
                ],
                "_positive_values": [
                    "self",
                    "a",
                    "b",
                    "n"
                ],
                "values": [
                    "self",
                    "n"
                ]
            },
            "FixedArg": {
                "__init__": [
                    "self",
                    "values"
                ],
                "values": [
                    "self",
                    "n"
                ]
            },
            "ComplexArg": {
                "__init__": [
                    "self",
                    "a",
                    "b"
                ],
                "values": [
                    "self",
                    "n"
                ]
            },
            "IntArg": {
                "__init__": [
                    "self",
                    "a",
                    "b"
                ],
                "values": [
                    "self",
                    "n"
                ]
            },
            "MpmathData": {
                "__init__": [
                    "self",
                    "scipy_func",
                    "mpmath_func",
                    "arg_spec",
                    "name",
                    "dps",
                    "prec",
                    "n",
                    "rtol",
                    "atol",
                    "ignore_inf_sign",
                    "distinguish_nan_and_inf",
                    "nan_ok",
                    "param_filter"
                ],
                "check": [
                    "self"
                ],
                "__repr__": [
                    "self"
                ]
            },
            "TimeoutError": {}
        },
        "scipy.special._logsumexp": {
            "logsumexp": [
                "a",
                "axis",
                "b",
                "keepdims",
                "return_sign"
            ],
            "softmax": [
                "x",
                "axis"
            ],
            "log_softmax": [
                "x",
                "axis"
            ]
        },
        "scipy.special.add_newdocs": {
            "get": [
                "name"
            ],
            "add_newdoc": [
                "name",
                "doc"
            ]
        },
        "scipy.special._testutils": {
            "check_version": [
                "module",
                "min_ver"
            ],
            "with_special_errors": [
                "func"
            ],
            "assert_func_equal": [
                "func",
                "results",
                "points",
                "rtol",
                "atol",
                "param_filter",
                "knownfailure",
                "vectorized",
                "dtype",
                "nan_ok",
                "ignore_inf_sign",
                "distinguish_nan_and_inf"
            ],
            "MissingModule": {
                "__init__": [
                    "self",
                    "name"
                ]
            },
            "FuncData": {
                "__init__": [
                    "self",
                    "func",
                    "data",
                    "param_columns",
                    "result_columns",
                    "result_func",
                    "rtol",
                    "atol",
                    "param_filter",
                    "knownfailure",
                    "dataname",
                    "nan_ok",
                    "vectorized",
                    "ignore_inf_sign",
                    "distinguish_nan_and_inf"
                ],
                "get_tolerances": [
                    "self",
                    "dtype"
                ],
                "check": [
                    "self",
                    "data",
                    "dtype",
                    "dtypes"
                ],
                "__repr__": [
                    "self"
                ]
            }
        },
        "scipy.special._ellip_harm": {
            "ellip_harm": [
                "h2",
                "k2",
                "n",
                "p",
                "s",
                "signm",
                "signn"
            ],
            "ellip_harm_2": [
                "h2",
                "k2",
                "n",
                "p",
                "s"
            ],
            "_ellip_normal_vec": [
                "h2",
                "k2",
                "n",
                "p"
            ],
            "ellip_normal": [
                "h2",
                "k2",
                "n",
                "p"
            ]
        },
        "scipy.special.tests.test_exponential_integrals": {
            "TestExp1": {
                "test_branch_cut": [
                    "self"
                ],
                "test_834": [
                    "self"
                ]
            },
            "TestExpi": {
                "test_branch_cut": [
                    "self",
                    "result"
                ],
                "test_near_branch_cut": [
                    "self"
                ],
                "test_continuity_on_positive_real_axis": [
                    "self"
                ]
            },
            "TestExpn": {
                "test_out_of_domain": [
                    "self"
                ]
            }
        },
        "scipy.special.tests.test_digamma": {
            "test_consistency": [],
            "test_special_values": [],
            "test_nonfinite": []
        },
        "scipy.special.tests.test_log_softmax": {
            "test_log_softmax": [
                "x",
                "expected"
            ],
            "log_softmax_x": [],
            "log_softmax_expected": [],
            "test_log_softmax_translation": [
                "log_softmax_x",
                "log_softmax_expected"
            ],
            "test_log_softmax_noneaxis": [
                "log_softmax_x",
                "log_softmax_expected"
            ],
            "test_axes": [
                "axis_2d",
                "expected_2d"
            ],
            "log_softmax_2d_x": [],
            "log_softmax_2d_expected": [],
            "test_log_softmax_2d_axis1": [
                "log_softmax_2d_x",
                "log_softmax_2d_expected"
            ],
            "test_log_softmax_2d_axis0": [
                "log_softmax_2d_x",
                "log_softmax_2d_expected"
            ],
            "test_log_softmax_3d": [
                "log_softmax_2d_x",
                "log_softmax_2d_expected"
            ],
            "test_log_softmax_scalar": []
        },
        "scipy.special.tests.test_pdtr": {
            "TestPdtr": {
                "test": [
                    "self"
                ],
                "test_m_zero": [
                    "self"
                ],
                "test_rounding": [
                    "self"
                ],
                "test_inf": [
                    "self"
                ],
                "test_domain": [
                    "self"
                ]
            },
            "TestPdtrc": {
                "test_value": [
                    "self"
                ],
                "test_m_zero": [
                    "self"
                ],
                "test_rounding": [
                    "self"
                ],
                "test_inf": [
                    "self"
                ],
                "test_domain": [
                    "self"
                ]
            }
        },
        "scipy.special.tests.test_trig": {
            "test_integer_real_part": [],
            "test_half_integer_real_part": [],
            "test_intermediate_overlow": [],
            "test_zero_sign": []
        },
        "scipy.special.tests.test_loggamma": {
            "test_identities1": [],
            "test_identities2": [],
            "test_complex_dispatch_realpart": [],
            "test_real_dispatch": [],
            "test_gh_6536": [],
            "test_branch_cut": []
        },
        "scipy.special.tests.test_gammainc": {
            "TestGammainc": {
                "test_domain": [
                    "self",
                    "a",
                    "x"
                ],
                "test_a_eq_0_x_gt_0": [
                    "self"
                ],
                "test_infinite_arguments": [
                    "self",
                    "a",
                    "x",
                    "desired"
                ],
                "test_infinite_limits": [
                    "self"
                ],
                "test_x_zero": [
                    "self"
                ],
                "test_limit_check": [
                    "self"
                ],
                "gammainc_line": [
                    "self",
                    "x"
                ],
                "test_line": [
                    "self"
                ],
                "test_roundtrip": [
                    "self"
                ]
            },
            "TestGammaincc": {
                "test_domain": [
                    "self",
                    "a",
                    "x"
                ],
                "test_a_eq_0_x_gt_0": [
                    "self"
                ],
                "test_infinite_arguments": [
                    "self",
                    "a",
                    "x",
                    "desired"
                ],
                "test_infinite_limits": [
                    "self"
                ],
                "test_limit_check": [
                    "self"
                ],
                "test_x_zero": [
                    "self"
                ],
                "test_roundtrip": [
                    "self"
                ]
            }
        },
        "scipy.special.tests.test_boxcox": {
            "test_boxcox_basic": [],
            "test_boxcox_underflow": [],
            "test_boxcox_nonfinite": [],
            "test_boxcox1p_basic": [],
            "test_boxcox1p_underflow": [],
            "test_boxcox1p_nonfinite": [],
            "test_inv_boxcox": [],
            "test_inv_boxcox1p_underflow": []
        },
        "scipy.special.tests.test_basic": {
            "test_sph_harm": [],
            "test_sph_harm_ufunc_loop_selection": [],
            "test_chi2_smalldf": [],
            "test_ch2_inf": [],
            "test_chi2c_smalldf": [],
            "test_chi2_inv_smalldf": [],
            "test_agm_simple": [],
            "test_legacy": [],
            "test_error_raising": [],
            "test_xlogy": [],
            "test_xlog1py": [],
            "test_entr": [],
            "test_kl_div": [],
            "test_rel_entr": [],
            "test_huber": [],
            "test_pseudo_huber": [],
            "TestCephes": {
                "test_airy": [
                    "self"
                ],
                "test_airye": [
                    "self"
                ],
                "test_binom": [
                    "self"
                ],
                "test_binom_2": [
                    "self"
                ],
                "test_binom_exact": [
                    "self"
                ],
                "test_binom_nooverflow_8346": [
                    "self"
                ],
                "test_bdtr": [
                    "self"
                ],
                "test_bdtri": [
                    "self"
                ],
                "test_bdtrc": [
                    "self"
                ],
                "test_bdtrin": [
                    "self"
                ],
                "test_bdtrik": [
                    "self"
                ],
                "test_bei": [
                    "self"
                ],
                "test_beip": [
                    "self"
                ],
                "test_ber": [
                    "self"
                ],
                "test_berp": [
                    "self"
                ],
                "test_besselpoly": [
                    "self"
                ],
                "test_beta": [
                    "self"
                ],
                "test_betainc": [
                    "self"
                ],
                "test_betaln": [
                    "self"
                ],
                "test_betaincinv": [
                    "self"
                ],
                "test_beta_inf": [
                    "self"
                ],
                "test_btdtr": [
                    "self"
                ],
                "test_btdtri": [
                    "self"
                ],
                "test_btdtria": [
                    "self"
                ],
                "test_btdtrib": [
                    "self"
                ],
                "test_cbrt": [
                    "self"
                ],
                "test_chdtr": [
                    "self"
                ],
                "test_chdtrc": [
                    "self"
                ],
                "test_chdtri": [
                    "self"
                ],
                "test_chdtriv": [
                    "self"
                ],
                "test_chndtr": [
                    "self"
                ],
                "test_chndtridf": [
                    "self"
                ],
                "test_chndtrinc": [
                    "self"
                ],
                "test_chndtrix": [
                    "self"
                ],
                "test_cosdg": [
                    "self"
                ],
                "test_cosm1": [
                    "self"
                ],
                "test_cotdg": [
                    "self"
                ],
                "test_dawsn": [
                    "self"
                ],
                "test_diric": [
                    "self"
                ],
                "test_diric_broadcasting": [
                    "self"
                ],
                "test_ellipe": [
                    "self"
                ],
                "test_ellipeinc": [
                    "self"
                ],
                "test_ellipj": [
                    "self"
                ],
                "test_ellipk": [
                    "self"
                ],
                "test_ellipkinc": [
                    "self"
                ],
                "test_erf": [
                    "self"
                ],
                "test_erf_symmetry": [
                    "self"
                ],
                "test_erfc": [
                    "self"
                ],
                "test_exp10": [
                    "self"
                ],
                "test_exp2": [
                    "self"
                ],
                "test_expm1": [
                    "self"
                ],
                "test_expm1_complex": [
                    "self"
                ],
                "test_expm1_complex_hard": [
                    "self"
                ],
                "test_fdtr": [
                    "self"
                ],
                "test_fdtrc": [
                    "self"
                ],
                "test_fdtri": [
                    "self"
                ],
                "test_fdtri_mysterious_failure": [
                    "self"
                ],
                "test_fdtridfd": [
                    "self"
                ],
                "test_fresnel": [
                    "self"
                ],
                "test_gamma": [
                    "self"
                ],
                "test_gammainccinv": [
                    "self"
                ],
                "test_gammaln": [
                    "self"
                ],
                "test_gammasgn": [
                    "self"
                ],
                "test_gdtr": [
                    "self"
                ],
                "test_gdtr_inf": [
                    "self"
                ],
                "test_gdtrc": [
                    "self"
                ],
                "test_gdtria": [
                    "self"
                ],
                "test_gdtrib": [
                    "self"
                ],
                "test_gdtrix": [
                    "self"
                ],
                "test_hankel1": [
                    "self"
                ],
                "test_hankel1e": [
                    "self"
                ],
                "test_hankel2": [
                    "self"
                ],
                "test_hankel2e": [
                    "self"
                ],
                "test_hyp1f1": [
                    "self"
                ],
                "test_hyp2f1": [
                    "self"
                ],
                "test_i0": [
                    "self"
                ],
                "test_i0e": [
                    "self"
                ],
                "test_i1": [
                    "self"
                ],
                "test_i1e": [
                    "self"
                ],
                "test_it2i0k0": [
                    "self"
                ],
                "test_it2j0y0": [
                    "self"
                ],
                "test_it2struve0": [
                    "self"
                ],
                "test_itairy": [
                    "self"
                ],
                "test_iti0k0": [
                    "self"
                ],
                "test_itj0y0": [
                    "self"
                ],
                "test_itmodstruve0": [
                    "self"
                ],
                "test_itstruve0": [
                    "self"
                ],
                "test_iv": [
                    "self"
                ],
                "_check_ive": [
                    "self"
                ],
                "test_j0": [
                    "self"
                ],
                "test_j1": [
                    "self"
                ],
                "test_jn": [
                    "self"
                ],
                "test_jv": [
                    "self"
                ],
                "_check_jve": [
                    "self"
                ],
                "test_k0": [
                    "self"
                ],
                "test_k0e": [
                    "self"
                ],
                "test_k1": [
                    "self"
                ],
                "test_k1e": [
                    "self"
                ],
                "test_kei": [
                    "self"
                ],
                "test_keip": [
                    "self"
                ],
                "test_ker": [
                    "self"
                ],
                "test_kerp": [
                    "self"
                ],
                "_check_kelvin": [
                    "self"
                ],
                "test_kn": [
                    "self"
                ],
                "test_kolmogi": [
                    "self"
                ],
                "test_kolmogorov": [
                    "self"
                ],
                "test_kolmogp": [
                    "self"
                ],
                "test_kolmogc": [
                    "self"
                ],
                "test_kolmogci": [
                    "self"
                ],
                "_check_kv": [
                    "self"
                ],
                "_check_kve": [
                    "self"
                ],
                "test_log1p": [
                    "self"
                ],
                "test_log1p_complex": [
                    "self"
                ],
                "test_lpmv": [
                    "self"
                ],
                "test_mathieu_a": [
                    "self"
                ],
                "test_mathieu_b": [
                    "self"
                ],
                "test_mathieu_cem": [
                    "self"
                ],
                "test_mathieu_sem": [
                    "self"
                ],
                "test_mathieu_modcem1": [
                    "self"
                ],
                "test_mathieu_modcem2": [
                    "self"
                ],
                "test_mathieu_modsem1": [
                    "self"
                ],
                "test_mathieu_modsem2": [
                    "self"
                ],
                "test_mathieu_overflow": [
                    "self"
                ],
                "test_mathieu_ticket_1847": [
                    "self"
                ],
                "test_modfresnelm": [
                    "self"
                ],
                "test_modfresnelp": [
                    "self"
                ],
                "_check_modstruve": [
                    "self"
                ],
                "test_nbdtr": [
                    "self"
                ],
                "test_nbdtrc": [
                    "self"
                ],
                "test_nbdtri": [
                    "self"
                ],
                "__check_nbdtrik": [
                    "self"
                ],
                "test_nbdtrin": [
                    "self"
                ],
                "test_ncfdtr": [
                    "self"
                ],
                "test_ncfdtri": [
                    "self"
                ],
                "test_ncfdtridfd": [
                    "self"
                ],
                "test_ncfdtridfn": [
                    "self"
                ],
                "test_ncfdtrinc": [
                    "self"
                ],
                "test_nctdtr": [
                    "self"
                ],
                "__check_nctdtridf": [
                    "self"
                ],
                "test_nctdtrinc": [
                    "self"
                ],
                "test_nctdtrit": [
                    "self"
                ],
                "test_nrdtrimn": [
                    "self"
                ],
                "test_nrdtrisd": [
                    "self"
                ],
                "test_obl_ang1": [
                    "self"
                ],
                "test_obl_ang1_cv": [
                    "self"
                ],
                "_check_obl_cv": [
                    "self"
                ],
                "test_obl_rad1": [
                    "self"
                ],
                "test_obl_rad1_cv": [
                    "self"
                ],
                "test_obl_rad2": [
                    "self"
                ],
                "test_obl_rad2_cv": [
                    "self"
                ],
                "test_pbdv": [
                    "self"
                ],
                "test_pbvv": [
                    "self"
                ],
                "test_pbwa": [
                    "self"
                ],
                "test_pdtr": [
                    "self"
                ],
                "test_pdtrc": [
                    "self"
                ],
                "test_pdtri": [
                    "self"
                ],
                "test_pdtrik": [
                    "self"
                ],
                "test_pro_ang1": [
                    "self"
                ],
                "test_pro_ang1_cv": [
                    "self"
                ],
                "_check_pro_cv": [
                    "self"
                ],
                "test_pro_rad1": [
                    "self"
                ],
                "test_pro_rad1_cv": [
                    "self"
                ],
                "test_pro_rad2": [
                    "self"
                ],
                "test_pro_rad2_cv": [
                    "self"
                ],
                "test_psi": [
                    "self"
                ],
                "test_radian": [
                    "self"
                ],
                "test_rgamma": [
                    "self"
                ],
                "test_round": [
                    "self"
                ],
                "test_shichi": [
                    "self"
                ],
                "test_sici": [
                    "self"
                ],
                "test_sindg": [
                    "self"
                ],
                "test_smirnov": [
                    "self"
                ],
                "test_smirnovp": [
                    "self"
                ],
                "test_smirnovc": [
                    "self"
                ],
                "test_smirnovi": [
                    "self"
                ],
                "test_smirnovci": [
                    "self"
                ],
                "test_spence": [
                    "self"
                ],
                "test_stdtr": [
                    "self"
                ],
                "test_stdtridf": [
                    "self"
                ],
                "test_stdtrit": [
                    "self"
                ],
                "test_struve": [
                    "self"
                ],
                "test_tandg": [
                    "self"
                ],
                "test_tklmbda": [
                    "self"
                ],
                "test_y0": [
                    "self"
                ],
                "test_y1": [
                    "self"
                ],
                "test_yn": [
                    "self"
                ],
                "test_yv": [
                    "self"
                ],
                "_check_yve": [
                    "self"
                ],
                "test_wofz": [
                    "self"
                ]
            },
            "TestAiry": {
                "test_airy": [
                    "self"
                ],
                "test_airye": [
                    "self"
                ],
                "test_bi_zeros": [
                    "self"
                ],
                "test_ai_zeros": [
                    "self"
                ],
                "test_ai_zeros_big": [
                    "self"
                ],
                "test_bi_zeros_big": [
                    "self"
                ]
            },
            "TestAssocLaguerre": {
                "test_assoc_laguerre": [
                    "self"
                ]
            },
            "TestBesselpoly": {
                "test_besselpoly": [
                    "self"
                ]
            },
            "TestKelvin": {
                "test_bei": [
                    "self"
                ],
                "test_beip": [
                    "self"
                ],
                "test_ber": [
                    "self"
                ],
                "test_berp": [
                    "self"
                ],
                "test_bei_zeros": [
                    "self"
                ],
                "test_beip_zeros": [
                    "self"
                ],
                "test_ber_zeros": [
                    "self"
                ],
                "test_berp_zeros": [
                    "self"
                ],
                "test_kelvin": [
                    "self"
                ],
                "test_kei": [
                    "self"
                ],
                "test_keip": [
                    "self"
                ],
                "test_ker": [
                    "self"
                ],
                "test_kerp": [
                    "self"
                ],
                "test_kei_zeros": [
                    "self"
                ],
                "test_keip_zeros": [
                    "self"
                ],
                "test_kelvin_zeros": [
                    "self"
                ],
                "test_ker_zeros": [
                    "self"
                ],
                "test_kerp_zeros": [
                    "self"
                ]
            },
            "TestBernoulli": {
                "test_bernoulli": [
                    "self"
                ]
            },
            "TestBeta": {
                "test_beta": [
                    "self"
                ],
                "test_betaln": [
                    "self"
                ],
                "test_betainc": [
                    "self"
                ],
                "test_betaincinv": [
                    "self"
                ]
            },
            "TestCombinatorics": {
                "test_comb": [
                    "self"
                ],
                "test_comb_with_np_int64": [
                    "self"
                ],
                "test_comb_zeros": [
                    "self"
                ],
                "test_perm": [
                    "self"
                ],
                "test_perm_zeros": [
                    "self"
                ]
            },
            "TestTrigonometric": {
                "test_cbrt": [
                    "self"
                ],
                "test_cbrtmore": [
                    "self"
                ],
                "test_cosdg": [
                    "self"
                ],
                "test_cosdgmore": [
                    "self"
                ],
                "test_cosm1": [
                    "self"
                ],
                "test_cotdg": [
                    "self"
                ],
                "test_cotdgmore": [
                    "self"
                ],
                "test_specialpoints": [
                    "self"
                ],
                "test_sinc": [
                    "self"
                ],
                "test_sindg": [
                    "self"
                ],
                "test_sindgmore": [
                    "self"
                ]
            },
            "TestTandg": {
                "test_tandg": [
                    "self"
                ],
                "test_tandgmore": [
                    "self"
                ],
                "test_specialpoints": [
                    "self"
                ]
            },
            "TestEllip": {
                "test_ellipj_nan": [
                    "self"
                ],
                "test_ellipj": [
                    "self"
                ],
                "test_ellipk": [
                    "self"
                ],
                "test_ellipkinc": [
                    "self"
                ],
                "test_ellipkinc_2": [
                    "self"
                ],
                "test_ellipkinc_singular": [
                    "self"
                ],
                "test_ellipe": [
                    "self"
                ],
                "test_ellipeinc": [
                    "self"
                ],
                "test_ellipeinc_2": [
                    "self"
                ]
            },
            "TestErf": {
                "test_erf": [
                    "self"
                ],
                "test_erf_zeros": [
                    "self"
                ],
                "_check_variant_func": [
                    "self",
                    "func",
                    "other_func",
                    "rtol",
                    "atol"
                ],
                "test_erfc_consistent": [
                    "self"
                ],
                "test_erfcx_consistent": [
                    "self"
                ],
                "test_erfi_consistent": [
                    "self"
                ],
                "test_dawsn_consistent": [
                    "self"
                ],
                "test_erf_nan_inf": [
                    "self"
                ],
                "test_erfc_nan_inf": [
                    "self"
                ],
                "test_erfcx_nan_inf": [
                    "self"
                ],
                "test_erfi_nan_inf": [
                    "self"
                ],
                "test_dawsn_nan_inf": [
                    "self"
                ],
                "test_wofz_nan_inf": [
                    "self"
                ]
            },
            "TestEuler": {
                "test_euler": [
                    "self"
                ]
            },
            "TestExp": {
                "test_exp2": [
                    "self"
                ],
                "test_exp2more": [
                    "self"
                ],
                "test_exp10": [
                    "self"
                ],
                "test_exp10more": [
                    "self"
                ],
                "test_expm1": [
                    "self"
                ],
                "test_expm1more": [
                    "self"
                ]
            },
            "TestFactorialFunctions": {
                "test_factorial": [
                    "self"
                ],
                "test_factorial_0d_return_type": [
                    "self",
                    "x",
                    "exact"
                ],
                "test_factorial2": [
                    "self"
                ],
                "test_factorialk": [
                    "self"
                ],
                "test_nan_inputs": [
                    "self",
                    "x",
                    "exact"
                ],
                "test_mixed_nan_inputs": [
                    "self"
                ]
            },
            "TestFresnel": {
                "test_fresnel": [
                    "self"
                ],
                "test_fresnel_inf1": [
                    "self"
                ],
                "test_fresnel_inf2": [
                    "self"
                ],
                "test_fresnel_zeros": [
                    "self"
                ],
                "test_fresnelc_zeros": [
                    "self"
                ],
                "test_fresnels_zeros": [
                    "self"
                ]
            },
            "TestGamma": {
                "test_gamma": [
                    "self"
                ],
                "test_gammaln": [
                    "self"
                ],
                "test_gammainccinv": [
                    "self"
                ],
                "test_gammaincinv": [
                    "self"
                ],
                "test_975": [
                    "self"
                ],
                "test_rgamma": [
                    "self"
                ],
                "test_infinity": [
                    "self"
                ]
            },
            "TestHankel": {
                "test_negv1": [
                    "self"
                ],
                "test_hankel1": [
                    "self"
                ],
                "test_negv1e": [
                    "self"
                ],
                "test_hankel1e": [
                    "self"
                ],
                "test_negv2": [
                    "self"
                ],
                "test_hankel2": [
                    "self"
                ],
                "test_neg2e": [
                    "self"
                ],
                "test_hankl2e": [
                    "self"
                ]
            },
            "TestHyper": {
                "test_h1vp": [
                    "self"
                ],
                "test_h2vp": [
                    "self"
                ],
                "test_hyp0f1": [
                    "self"
                ],
                "test_hyp0f1_gh5764": [
                    "self"
                ],
                "test_hyp1f1": [
                    "self"
                ],
                "test_hyp1f1_gh2957": [
                    "self"
                ],
                "test_hyp1f1_gh2282": [
                    "self"
                ],
                "test_hyp2f1": [
                    "self"
                ],
                "test_hyperu": [
                    "self"
                ],
                "test_hyperu_gh2287": [
                    "self"
                ]
            },
            "TestBessel": {
                "test_itj0y0": [
                    "self"
                ],
                "test_it2j0y0": [
                    "self"
                ],
                "test_negv_iv": [
                    "self"
                ],
                "test_j0": [
                    "self"
                ],
                "test_j1": [
                    "self"
                ],
                "test_jn": [
                    "self"
                ],
                "test_negv_jv": [
                    "self"
                ],
                "test_jv": [
                    "self"
                ],
                "test_negv_jve": [
                    "self"
                ],
                "test_jve": [
                    "self"
                ],
                "test_jn_zeros": [
                    "self"
                ],
                "test_jn_zeros_slow": [
                    "self"
                ],
                "test_jnjnp_zeros": [
                    "self"
                ],
                "test_jnp_zeros": [
                    "self"
                ],
                "test_jnyn_zeros": [
                    "self"
                ],
                "test_jvp": [
                    "self"
                ],
                "test_k0": [
                    "self"
                ],
                "test_k0e": [
                    "self"
                ],
                "test_k1": [
                    "self"
                ],
                "test_k1e": [
                    "self"
                ],
                "test_jacobi": [
                    "self"
                ],
                "test_kn": [
                    "self"
                ],
                "test_negv_kv": [
                    "self"
                ],
                "test_kv0": [
                    "self"
                ],
                "test_kv1": [
                    "self"
                ],
                "test_kv2": [
                    "self"
                ],
                "test_kn_largeorder": [
                    "self"
                ],
                "test_kv_largearg": [
                    "self"
                ],
                "test_negv_kve": [
                    "self"
                ],
                "test_kve": [
                    "self"
                ],
                "test_kvp_v0n1": [
                    "self"
                ],
                "test_kvp_n1": [
                    "self"
                ],
                "test_kvp_n2": [
                    "self"
                ],
                "test_y0": [
                    "self"
                ],
                "test_y1": [
                    "self"
                ],
                "test_y0_zeros": [
                    "self"
                ],
                "test_y1_zeros": [
                    "self"
                ],
                "test_y1p_zeros": [
                    "self"
                ],
                "test_yn_zeros": [
                    "self"
                ],
                "test_ynp_zeros": [
                    "self"
                ],
                "test_ynp_zeros_large_order": [
                    "self"
                ],
                "test_yn": [
                    "self"
                ],
                "test_negv_yv": [
                    "self"
                ],
                "test_yv": [
                    "self"
                ],
                "test_negv_yve": [
                    "self"
                ],
                "test_yve": [
                    "self"
                ],
                "test_yvp": [
                    "self"
                ],
                "_cephes_vs_amos_points": [
                    "self"
                ],
                "check_cephes_vs_amos": [
                    "self",
                    "f1",
                    "f2",
                    "rtol",
                    "atol",
                    "skip"
                ],
                "test_jv_cephes_vs_amos": [
                    "self"
                ],
                "test_yv_cephes_vs_amos": [
                    "self"
                ],
                "test_yv_cephes_vs_amos_only_small_orders": [
                    "self"
                ],
                "test_iv_cephes_vs_amos": [
                    "self"
                ],
                "test_iv_cephes_vs_amos_mass_test": [
                    "self"
                ],
                "test_kv_cephes_vs_amos": [
                    "self"
                ],
                "test_ticket_623": [
                    "self"
                ],
                "test_ticket_853": [
                    "self"
                ],
                "test_ticket_854": [
                    "self"
                ],
                "test_gh_7909": [
                    "self"
                ],
                "test_ticket_503": [
                    "self"
                ],
                "test_iv_hyperg_poles": [
                    "self"
                ],
                "iv_series": [
                    "self",
                    "v",
                    "z",
                    "n"
                ],
                "test_i0_series": [
                    "self"
                ],
                "test_i1_series": [
                    "self"
                ],
                "test_iv_series": [
                    "self"
                ],
                "test_i0": [
                    "self"
                ],
                "test_i0e": [
                    "self"
                ],
                "test_i1": [
                    "self"
                ],
                "test_i1e": [
                    "self"
                ],
                "test_iti0k0": [
                    "self"
                ],
                "test_it2i0k0": [
                    "self"
                ],
                "test_iv": [
                    "self"
                ],
                "test_negv_ive": [
                    "self"
                ],
                "test_ive": [
                    "self"
                ],
                "test_ivp0": [
                    "self"
                ],
                "test_ivp": [
                    "self"
                ]
            },
            "TestLaguerre": {
                "test_laguerre": [
                    "self"
                ],
                "test_genlaguerre": [
                    "self"
                ]
            },
            "TestLegendre": {
                "test_legendre": [
                    "self"
                ]
            },
            "TestLambda": {
                "test_lmbda": [
                    "self"
                ]
            },
            "TestLog1p": {
                "test_log1p": [
                    "self"
                ],
                "test_log1pmore": [
                    "self"
                ]
            },
            "TestLegendreFunctions": {
                "test_clpmn": [
                    "self"
                ],
                "test_clpmn_close_to_real_2": [
                    "self"
                ],
                "test_clpmn_close_to_real_3": [
                    "self"
                ],
                "test_clpmn_across_unit_circle": [
                    "self"
                ],
                "test_inf": [
                    "self"
                ],
                "test_deriv_clpmn": [
                    "self"
                ],
                "test_lpmn": [
                    "self"
                ],
                "test_lpn": [
                    "self"
                ],
                "test_lpmv": [
                    "self"
                ],
                "test_lqmn": [
                    "self"
                ],
                "test_lqmn_gt1": [
                    "self"
                ],
                "test_lqmn_shape": [
                    "self"
                ],
                "test_lqn": [
                    "self"
                ]
            },
            "TestMathieu": {
                "test_mathieu_a": [
                    "self"
                ],
                "test_mathieu_even_coef": [
                    "self"
                ],
                "test_mathieu_odd_coef": [
                    "self"
                ]
            },
            "TestFresnelIntegral": {
                "test_modfresnelp": [
                    "self"
                ],
                "test_modfresnelm": [
                    "self"
                ]
            },
            "TestOblCvSeq": {
                "test_obl_cv_seq": [
                    "self"
                ]
            },
            "TestParabolicCylinder": {
                "test_pbdn_seq": [
                    "self"
                ],
                "test_pbdv": [
                    "self"
                ],
                "test_pbdv_seq": [
                    "self"
                ],
                "test_pbdv_points": [
                    "self"
                ],
                "test_pbdv_gradient": [
                    "self"
                ],
                "test_pbvv_gradient": [
                    "self"
                ]
            },
            "TestPolygamma": {
                "test_polygamma": [
                    "self"
                ]
            },
            "TestProCvSeq": {
                "test_pro_cv_seq": [
                    "self"
                ]
            },
            "TestPsi": {
                "test_psi": [
                    "self"
                ]
            },
            "TestRadian": {
                "test_radian": [
                    "self"
                ],
                "test_radianmore": [
                    "self"
                ]
            },
            "TestRiccati": {
                "test_riccati_jn": [
                    "self"
                ],
                "test_riccati_yn": [
                    "self"
                ]
            },
            "TestRound": {
                "test_round": [
                    "self"
                ]
            },
            "TestStruve": {
                "_series": [
                    "self",
                    "v",
                    "z",
                    "n"
                ],
                "test_vs_series": [
                    "self"
                ],
                "test_some_values": [
                    "self"
                ],
                "test_regression_679": [
                    "self"
                ]
            }
        },
        "scipy.special.tests.test_gamma": {
            "TestRgamma": {
                "test_gh_11315": [
                    "self"
                ],
                "test_rgamma_zeros": [
                    "self"
                ]
            }
        },
        "scipy.special.tests.test_orthogonal_eval": {
            "test_eval_chebyt": [],
            "test_eval_genlaguerre_restriction": [],
            "test_warnings": [],
            "test_hermite_domain": [],
            "test_hermite_nan": [
                "n",
                "x"
            ],
            "test_genlaguerre_nan": [
                "n",
                "alpha",
                "x"
            ],
            "test_gegenbauer_nan": [
                "n",
                "alpha",
                "x"
            ],
            "TestPolys": {
                "check_poly": [
                    "self",
                    "func",
                    "cls",
                    "param_ranges",
                    "x_range",
                    "nn",
                    "nparam",
                    "nx",
                    "rtol"
                ],
                "test_jacobi": [
                    "self"
                ],
                "test_sh_jacobi": [
                    "self"
                ],
                "test_gegenbauer": [
                    "self"
                ],
                "test_chebyt": [
                    "self"
                ],
                "test_chebyu": [
                    "self"
                ],
                "test_chebys": [
                    "self"
                ],
                "test_chebyc": [
                    "self"
                ],
                "test_sh_chebyt": [
                    "self"
                ],
                "test_sh_chebyu": [
                    "self"
                ],
                "test_legendre": [
                    "self"
                ],
                "test_sh_legendre": [
                    "self"
                ],
                "test_genlaguerre": [
                    "self"
                ],
                "test_laguerre": [
                    "self"
                ],
                "test_hermite": [
                    "self"
                ],
                "test_hermitenorm": [
                    "self"
                ]
            },
            "TestRecurrence": {
                "check_poly": [
                    "self",
                    "func",
                    "param_ranges",
                    "x_range",
                    "nn",
                    "nparam",
                    "nx",
                    "rtol"
                ],
                "test_jacobi": [
                    "self"
                ],
                "test_sh_jacobi": [
                    "self"
                ],
                "test_gegenbauer": [
                    "self"
                ],
                "test_chebyt": [
                    "self"
                ],
                "test_chebyu": [
                    "self"
                ],
                "test_chebys": [
                    "self"
                ],
                "test_chebyc": [
                    "self"
                ],
                "test_sh_chebyt": [
                    "self"
                ],
                "test_sh_chebyu": [
                    "self"
                ],
                "test_legendre": [
                    "self"
                ],
                "test_sh_legendre": [
                    "self"
                ],
                "test_genlaguerre": [
                    "self"
                ],
                "test_laguerre": [
                    "self"
                ],
                "test_hermite": [
                    "self"
                ]
            }
        },
        "scipy.special.tests.test_zeta": {
            "test_zeta": [],
            "test_zetac": [],
            "test_zetac_special_cases": [],
            "test_riemann_zeta_special_cases": [],
            "test_riemann_zeta_avoid_overflow": []
        },
        "scipy.special.tests.test_mpmath": {
            "test_expi_complex": [],
            "test_expn_large_n": [],
            "test_hyp0f1_gh5764": [],
            "test_hyp0f1_gh_1609": [],
            "test_hyperu_around_0": [],
            "test_hyp2f1_strange_points": [],
            "test_hyp2f1_real_some_points": [],
            "test_hyp2f1_some_points_2": [],
            "test_hyp2f1_real_some": [],
            "test_hyp2f1_real_random": [],
            "test_erf_complex": [],
            "test_lpmv": [],
            "test_beta": [],
            "test_loggamma_taylor_transition": [],
            "test_loggamma_taylor": [],
            "test_rgamma_zeros": [],
            "test_digamma_roots": [],
            "test_digamma_negreal": [],
            "test_digamma_boundary": [],
            "test_gammainc_boundary": [],
            "test_spence_circle": [],
            "test_sinpi_zeros": [],
            "test_cospi_zeros": [],
            "test_dn_quarter_period": [],
            "_mpmath_wrightomega": [
                "z",
                "dps"
            ],
            "test_wrightomega_branch": [],
            "test_wrightomega_region1": [],
            "test_wrightomega_region2": [],
            "test_lambertw_smallz": [],
            "TestSystematic": {
                "test_airyai": [
                    "self"
                ],
                "test_airyai_complex": [
                    "self"
                ],
                "test_airyai_prime": [
                    "self"
                ],
                "test_airyai_prime_complex": [
                    "self"
                ],
                "test_airybi": [
                    "self"
                ],
                "test_airybi_complex": [
                    "self"
                ],
                "test_airybi_prime": [
                    "self"
                ],
                "test_airybi_prime_complex": [
                    "self"
                ],
                "test_bei": [
                    "self"
                ],
                "test_ber": [
                    "self"
                ],
                "test_bernoulli": [
                    "self"
                ],
                "test_besseli": [
                    "self"
                ],
                "test_besseli_complex": [
                    "self"
                ],
                "test_besselj": [
                    "self"
                ],
                "test_besselj_complex": [
                    "self"
                ],
                "test_besselk": [
                    "self"
                ],
                "test_besselk_int": [
                    "self"
                ],
                "test_besselk_complex": [
                    "self"
                ],
                "test_bessely": [
                    "self"
                ],
                "test_bessely_complex": [
                    "self"
                ],
                "test_bessely_int": [
                    "self"
                ],
                "test_beta": [
                    "self"
                ],
                "test_betainc": [
                    "self"
                ],
                "test_binom": [
                    "self"
                ],
                "test_chebyt_int": [
                    "self"
                ],
                "test_chebyt": [
                    "self"
                ],
                "test_chebyu_int": [
                    "self"
                ],
                "test_chebyu": [
                    "self"
                ],
                "test_chi": [
                    "self"
                ],
                "test_chi_complex": [
                    "self"
                ],
                "test_ci": [
                    "self"
                ],
                "test_ci_complex": [
                    "self"
                ],
                "test_cospi": [
                    "self"
                ],
                "test_cospi_complex": [
                    "self"
                ],
                "test_digamma": [
                    "self"
                ],
                "test_digamma_complex": [
                    "self"
                ],
                "test_e1": [
                    "self"
                ],
                "test_e1_complex": [
                    "self"
                ],
                "test_exprel": [
                    "self"
                ],
                "test_expm1_complex": [
                    "self"
                ],
                "test_log1p_complex": [
                    "self"
                ],
                "test_log1pmx": [
                    "self"
                ],
                "test_ei": [
                    "self"
                ],
                "test_ei_complex": [
                    "self"
                ],
                "test_ellipe": [
                    "self"
                ],
                "test_ellipeinc": [
                    "self"
                ],
                "test_ellipeinc_largephi": [
                    "self"
                ],
                "test_ellipf": [
                    "self"
                ],
                "test_ellipf_largephi": [
                    "self"
                ],
                "test_ellipk": [
                    "self"
                ],
                "test_ellipkinc": [
                    "self"
                ],
                "test_ellipkinc_largephi": [
                    "self"
                ],
                "test_ellipfun_sn": [
                    "self"
                ],
                "test_ellipfun_cn": [
                    "self"
                ],
                "test_ellipfun_dn": [
                    "self"
                ],
                "test_erf": [
                    "self"
                ],
                "test_erf_complex": [
                    "self"
                ],
                "test_erfc": [
                    "self"
                ],
                "test_erfc_complex": [
                    "self"
                ],
                "test_erfi": [
                    "self"
                ],
                "test_erfi_complex": [
                    "self"
                ],
                "test_ndtr": [
                    "self"
                ],
                "test_ndtr_complex": [
                    "self"
                ],
                "test_log_ndtr": [
                    "self"
                ],
                "test_log_ndtr_complex": [
                    "self"
                ],
                "test_eulernum": [
                    "self"
                ],
                "test_expint": [
                    "self"
                ],
                "test_fresnels": [
                    "self"
                ],
                "test_fresnelc": [
                    "self"
                ],
                "test_gamma": [
                    "self"
                ],
                "test_gamma_complex": [
                    "self"
                ],
                "test_gammainc": [
                    "self"
                ],
                "test_gammaincc": [
                    "self"
                ],
                "test_gammaln": [
                    "self"
                ],
                "test_gegenbauer": [
                    "self"
                ],
                "test_gegenbauer_int": [
                    "self"
                ],
                "test_gegenbauer_complex": [
                    "self"
                ],
                "test_gegenbauer_complex_general": [
                    "self"
                ],
                "test_hankel1": [
                    "self"
                ],
                "test_hankel2": [
                    "self"
                ],
                "test_hermite": [
                    "self"
                ],
                "test_hyp0f1": [
                    "self"
                ],
                "test_hyp0f1_complex": [
                    "self"
                ],
                "test_hyp1f1": [
                    "self"
                ],
                "test_hyp1f1_complex": [
                    "self"
                ],
                "test_hyp2f1_complex": [
                    "self"
                ],
                "test_hyperu": [
                    "self"
                ],
                "test_igam_fac": [
                    "self"
                ],
                "test_j0": [
                    "self"
                ],
                "test_j1": [
                    "self"
                ],
                "test_jacobi": [
                    "self"
                ],
                "test_jacobi_int": [
                    "self"
                ],
                "test_kei": [
                    "self"
                ],
                "test_ker": [
                    "self"
                ],
                "test_laguerre": [
                    "self"
                ],
                "test_laguerre_int": [
                    "self"
                ],
                "test_lambertw_real": [
                    "self"
                ],
                "test_lanczos_sum_expg_scaled": [
                    "self"
                ],
                "test_legendre": [
                    "self"
                ],
                "test_legendre_int": [
                    "self"
                ],
                "test_legenp": [
                    "self"
                ],
                "test_legenp_complex_2": [
                    "self"
                ],
                "test_legenp_complex_3": [
                    "self"
                ],
                "test_legenq": [
                    "self"
                ],
                "test_legenq_complex": [
                    "self"
                ],
                "test_lgam1p": [
                    "self"
                ],
                "test_loggamma": [
                    "self"
                ],
                "test_pcfd": [
                    "self"
                ],
                "test_pcfv": [
                    "self"
                ],
                "test_pcfw": [
                    "self"
                ],
                "test_polygamma": [
                    "self"
                ],
                "test_rgamma": [
                    "self"
                ],
                "test_rgamma_complex": [
                    "self"
                ],
                "test_rf": [
                    "self"
                ],
                "test_sinpi": [
                    "self"
                ],
                "test_sinpi_complex": [
                    "self"
                ],
                "test_shi": [
                    "self"
                ],
                "test_shi_complex": [
                    "self"
                ],
                "test_si": [
                    "self"
                ],
                "test_si_complex": [
                    "self"
                ],
                "test_spence": [
                    "self"
                ],
                "test_spence_complex": [
                    "self"
                ],
                "test_spherharm": [
                    "self"
                ],
                "test_struveh": [
                    "self"
                ],
                "test_struvel": [
                    "self"
                ],
                "test_wrightomega_real": [
                    "self"
                ],
                "test_wrightomega": [
                    "self"
                ],
                "test_hurwitz_zeta": [
                    "self"
                ],
                "test_riemann_zeta": [
                    "self"
                ],
                "test_zetac": [
                    "self"
                ],
                "test_boxcox": [
                    "self"
                ],
                "test_boxcox1p": [
                    "self"
                ],
                "test_spherical_jn": [
                    "self"
                ],
                "test_spherical_jn_complex": [
                    "self"
                ],
                "test_spherical_yn": [
                    "self"
                ],
                "test_spherical_yn_complex": [
                    "self"
                ],
                "test_spherical_in": [
                    "self"
                ],
                "test_spherical_in_complex": [
                    "self"
                ],
                "test_spherical_kn": [
                    "self"
                ],
                "test_spherical_kn_complex": [
                    "self"
                ]
            }
        },
        "scipy.special.tests.test_owens_t": {
            "test_symmetries": [],
            "test_special_cases": [],
            "test_nans": [],
            "test_infs": []
        },
        "scipy.special.tests.test_wrightomega": {
            "test_wrightomega_nan": [],
            "test_wrightomega_inf_branch": [],
            "test_wrightomega_inf": [],
            "test_wrightomega_singular": [],
            "test_wrightomega_real_infinities": [
                "x",
                "desired"
            ],
            "test_wrightomega_real_nan": [],
            "test_wrightomega_real_series_crossover": [],
            "test_wrightomega_exp_approximation_crossover": [],
            "test_wrightomega_real_versus_complex": []
        },
        "scipy.special.tests.test_logit": {
            "TestLogit": {
                "check_logit_out": [
                    "self",
                    "dtype",
                    "expected"
                ],
                "test_float32": [
                    "self"
                ],
                "test_float64": [
                    "self"
                ],
                "test_nan": [
                    "self"
                ]
            },
            "TestExpit": {
                "check_expit_out": [
                    "self",
                    "dtype",
                    "expected"
                ],
                "test_float32": [
                    "self"
                ],
                "test_float64": [
                    "self"
                ],
                "test_large": [
                    "self"
                ]
            }
        },
        "scipy.special.tests.test_nan_inputs": {
            "_get_ufuncs": [],
            "test_nan_inputs": [
                "func"
            ],
            "test_legacy_cast": []
        },
        "scipy.special.tests.test_data": {
            "data": [
                "func",
                "dataname"
            ],
            "data_gsl": [
                "func",
                "dataname"
            ],
            "data_local": [
                "func",
                "dataname"
            ],
            "ellipk_": [
                "k"
            ],
            "ellipkinc_": [
                "f",
                "k"
            ],
            "ellipe_": [
                "k"
            ],
            "ellipeinc_": [
                "f",
                "k"
            ],
            "ellipj_": [
                "k"
            ],
            "zeta_": [
                "x"
            ],
            "assoc_legendre_p_boost_": [
                "nu",
                "mu",
                "x"
            ],
            "legendre_p_via_assoc_": [
                "nu",
                "x"
            ],
            "lpn_": [
                "n",
                "x"
            ],
            "lqn_": [
                "n",
                "x"
            ],
            "legendre_p_via_lpmn": [
                "n",
                "x"
            ],
            "legendre_q_via_lqmn": [
                "n",
                "x"
            ],
            "mathieu_ce_rad": [
                "m",
                "q",
                "x"
            ],
            "mathieu_se_rad": [
                "m",
                "q",
                "x"
            ],
            "mathieu_mc1_scaled": [
                "m",
                "q",
                "x"
            ],
            "mathieu_ms1_scaled": [
                "m",
                "q",
                "x"
            ],
            "mathieu_mc2_scaled": [
                "m",
                "q",
                "x"
            ],
            "mathieu_ms2_scaled": [
                "m",
                "q",
                "x"
            ],
            "eval_legendre_ld": [
                "n",
                "x"
            ],
            "eval_legendre_dd": [
                "n",
                "x"
            ],
            "eval_hermite_ld": [
                "n",
                "x"
            ],
            "eval_laguerre_ld": [
                "n",
                "x"
            ],
            "eval_laguerre_dd": [
                "n",
                "x"
            ],
            "eval_genlaguerre_ldd": [
                "n",
                "a",
                "x"
            ],
            "eval_genlaguerre_ddd": [
                "n",
                "a",
                "x"
            ],
            "bdtrik_comp": [
                "y",
                "n",
                "p"
            ],
            "btdtri_comp": [
                "a",
                "b",
                "p"
            ],
            "btdtria_comp": [
                "p",
                "b",
                "x"
            ],
            "btdtrib_comp": [
                "a",
                "p",
                "x"
            ],
            "gdtr_": [
                "p",
                "x"
            ],
            "gdtrc_": [
                "p",
                "x"
            ],
            "gdtrix_": [
                "b",
                "p"
            ],
            "gdtrix_comp": [
                "b",
                "p"
            ],
            "gdtrib_": [
                "p",
                "x"
            ],
            "gdtrib_comp": [
                "p",
                "x"
            ],
            "nbdtrik_comp": [
                "y",
                "n",
                "p"
            ],
            "pdtrik_comp": [
                "p",
                "m"
            ],
            "poch_": [
                "z",
                "m"
            ],
            "poch_minus": [
                "z",
                "m"
            ],
            "spherical_jn_": [
                "n",
                "x"
            ],
            "spherical_yn_": [
                "n",
                "x"
            ],
            "sph_harm_": [
                "m",
                "n",
                "theta",
                "phi"
            ],
            "cexpm1": [
                "x",
                "y"
            ],
            "clog1p": [
                "x",
                "y"
            ],
            "test_boost": [
                "test"
            ],
            "test_gsl": [
                "test"
            ],
            "test_local": [
                "test"
            ],
            "_test_factory": [
                "test",
                "dtype"
            ]
        },
        "scipy.special.tests.test_ndtr": {
            "test_ndtr": [],
            "TestNdtri": {
                "test_zero": [
                    "self"
                ],
                "test_asymptotes": [
                    "self"
                ],
                "test_outside_of_domain": [
                    "self"
                ]
            }
        },
        "scipy.special.tests": {},
        "scipy.special.tests.test_kolmogorov": {
            "TestSmirnov": {
                "test_nan": [
                    "self"
                ],
                "test_basic": [
                    "self"
                ],
                "test_x_equals_0": [
                    "self"
                ],
                "test_x_equals_1": [
                    "self"
                ],
                "test_x_equals_0point5": [
                    "self"
                ],
                "test_n_equals_1": [
                    "self"
                ],
                "test_n_equals_2": [
                    "self"
                ],
                "test_n_equals_3": [
                    "self"
                ],
                "test_n_large": [
                    "self"
                ]
            },
            "TestSmirnovi": {
                "test_nan": [
                    "self"
                ],
                "test_basic": [
                    "self"
                ],
                "test_x_equals_0": [
                    "self"
                ],
                "test_x_equals_1": [
                    "self"
                ],
                "test_n_equals_1": [
                    "self"
                ],
                "test_n_equals_2": [
                    "self"
                ],
                "test_n_equals_3": [
                    "self"
                ],
                "test_round_trip": [
                    "self"
                ],
                "test_x_equals_0point5": [
                    "self"
                ]
            },
            "TestSmirnovp": {
                "test_nan": [
                    "self"
                ],
                "test_basic": [
                    "self"
                ],
                "test_oneminusoneovern": [
                    "self"
                ],
                "test_oneovertwon": [
                    "self"
                ],
                "test_oneovern": [
                    "self"
                ],
                "test_oneovernclose": [
                    "self"
                ]
            },
            "TestKolmogorov": {
                "test_nan": [
                    "self"
                ],
                "test_basic": [
                    "self"
                ],
                "test_linspace": [
                    "self"
                ],
                "test_linspacei": [
                    "self"
                ],
                "test_smallx": [
                    "self"
                ],
                "test_round_trip": [
                    "self"
                ]
            },
            "TestKolmogi": {
                "test_nan": [
                    "self"
                ],
                "test_basic": [
                    "self"
                ],
                "test_smallpcdf": [
                    "self"
                ],
                "test_smallpsf": [
                    "self"
                ],
                "test_round_trip": [
                    "self"
                ]
            },
            "TestKolmogp": {
                "test_nan": [
                    "self"
                ],
                "test_basic": [
                    "self"
                ]
            }
        },
        "scipy.special.tests.test_bdtr": {
            "TestBdtr": {
                "test": [
                    "self"
                ],
                "test_sum_is_one": [
                    "self"
                ],
                "test_rounding": [
                    "self"
                ],
                "test_inf": [
                    "self",
                    "k",
                    "n",
                    "p"
                ],
                "test_domain": [
                    "self"
                ]
            },
            "TestBdtrc": {
                "test_value": [
                    "self"
                ],
                "test_sum_is_one": [
                    "self"
                ],
                "test_rounding": [
                    "self"
                ],
                "test_inf": [
                    "self",
                    "k",
                    "n",
                    "p"
                ],
                "test_domain": [
                    "self"
                ],
                "test_bdtr_bdtrc_sum_to_one": [
                    "self"
                ]
            },
            "TestBdtri": {
                "test_value": [
                    "self"
                ],
                "test_sum_is_one": [
                    "self"
                ],
                "test_rounding": [
                    "self"
                ],
                "test_inf": [
                    "self",
                    "k",
                    "n",
                    "p"
                ],
                "test_domain": [
                    "self",
                    "k",
                    "n",
                    "p"
                ],
                "test_bdtr_bdtri_roundtrip": [
                    "self"
                ]
            }
        },
        "scipy.special.tests.test_sph_harm": {
            "test_first_harmonics": []
        },
        "scipy.special.tests.test_cdflib": {
            "_assert_inverts": [],
            "_binomial_cdf": [
                "k",
                "n",
                "p"
            ],
            "_f_cdf": [
                "dfn",
                "dfd",
                "x"
            ],
            "_student_t_cdf": [
                "df",
                "t",
                "dps"
            ],
            "_noncentral_chi_pdf": [
                "t",
                "df",
                "nc"
            ],
            "_noncentral_chi_cdf": [
                "x",
                "df",
                "nc",
                "dps"
            ],
            "_tukey_lmbda_quantile": [
                "p",
                "lmbda"
            ],
            "test_nonfinite": [],
            "ProbArg": {
                "__init__": [
                    "self"
                ],
                "values": [
                    "self",
                    "n"
                ]
            },
            "EndpointFilter": {
                "__init__": [
                    "self",
                    "a",
                    "b",
                    "rtol",
                    "atol"
                ],
                "__call__": [
                    "self",
                    "x"
                ]
            },
            "_CDFData": {
                "__init__": [
                    "self",
                    "spfunc",
                    "mpfunc",
                    "index",
                    "argspec",
                    "spfunc_first",
                    "dps",
                    "n",
                    "rtol",
                    "atol",
                    "endpt_rtol",
                    "endpt_atol"
                ],
                "idmap": [
                    "self"
                ],
                "get_param_filter": [
                    "self"
                ],
                "check": [
                    "self"
                ]
            },
            "TestCDFlib": {
                "test_bdtrik": [
                    "self"
                ],
                "test_bdtrin": [
                    "self"
                ],
                "test_btdtria": [
                    "self"
                ],
                "test_btdtrib": [
                    "self"
                ],
                "test_fdtridfd": [
                    "self"
                ],
                "test_gdtria": [
                    "self"
                ],
                "test_gdtrib": [
                    "self"
                ],
                "test_gdtrix": [
                    "self"
                ],
                "test_stdtr": [
                    "self"
                ],
                "test_stdtridf": [
                    "self"
                ],
                "test_stdtrit": [
                    "self"
                ],
                "test_chdtriv": [
                    "self"
                ],
                "test_chndtridf": [
                    "self"
                ],
                "test_chndtrinc": [
                    "self"
                ],
                "test_chndtrix": [
                    "self"
                ],
                "test_tklmbda_zero_shape": [
                    "self"
                ],
                "test_tklmbda_neg_shape": [
                    "self"
                ],
                "test_tklmbda_pos_shape": [
                    "self"
                ]
            }
        },
        "scipy.special.tests.test_orthogonal": {
            "verify_gauss_quad": [
                "root_func",
                "eval_func",
                "weight_func",
                "a",
                "b",
                "N",
                "rtol",
                "atol"
            ],
            "test_roots_jacobi": [],
            "test_roots_sh_jacobi": [],
            "test_roots_hermite": [],
            "test_roots_hermite_asy": [],
            "test_roots_hermitenorm": [],
            "test_roots_gegenbauer": [],
            "test_roots_chebyt": [],
            "test_chebyt_symmetry": [],
            "test_roots_chebyu": [],
            "test_roots_chebyc": [],
            "test_roots_chebys": [],
            "test_roots_sh_chebyt": [],
            "test_roots_sh_chebyu": [],
            "test_roots_legendre": [],
            "test_roots_sh_legendre": [],
            "test_roots_laguerre": [],
            "test_roots_genlaguerre": [],
            "test_gh_6721": [],
            "TestCheby": {
                "test_chebyc": [
                    "self"
                ],
                "test_chebys": [
                    "self"
                ],
                "test_chebyt": [
                    "self"
                ],
                "test_chebyu": [
                    "self"
                ]
            },
            "TestGegenbauer": {
                "test_gegenbauer": [
                    "self"
                ]
            },
            "TestHermite": {
                "test_hermite": [
                    "self"
                ],
                "test_hermitenorm": [
                    "self"
                ]
            },
            "_test_sh_legendre": {
                "test_sh_legendre": [
                    "self"
                ]
            },
            "_test_sh_chebyt": {
                "test_sh_chebyt": [
                    "self"
                ]
            },
            "_test_sh_chebyu": {
                "test_sh_chebyu": [
                    "self"
                ]
            },
            "_test_sh_jacobi": {
                "test_sh_jacobi": [
                    "self"
                ]
            },
            "TestCall": {
                "test_call": [
                    "self"
                ]
            },
            "TestGenlaguerre": {
                "test_regression": [
                    "self"
                ]
            }
        },
        "scipy.special.tests.test_spherical_bessel": {
            "TestSphericalJn": {
                "test_spherical_jn_exact": [
                    "self"
                ],
                "test_spherical_jn_recurrence_complex": [
                    "self"
                ],
                "test_spherical_jn_recurrence_real": [
                    "self"
                ],
                "test_spherical_jn_inf_real": [
                    "self"
                ],
                "test_spherical_jn_inf_complex": [
                    "self"
                ],
                "test_spherical_jn_large_arg_1": [
                    "self"
                ],
                "test_spherical_jn_large_arg_2": [
                    "self"
                ],
                "test_spherical_jn_at_zero": [
                    "self"
                ]
            },
            "TestSphericalYn": {
                "test_spherical_yn_exact": [
                    "self"
                ],
                "test_spherical_yn_recurrence_real": [
                    "self"
                ],
                "test_spherical_yn_recurrence_complex": [
                    "self"
                ],
                "test_spherical_yn_inf_real": [
                    "self"
                ],
                "test_spherical_yn_inf_complex": [
                    "self"
                ],
                "test_spherical_yn_at_zero": [
                    "self"
                ],
                "test_spherical_yn_at_zero_complex": [
                    "self"
                ]
            },
            "TestSphericalJnYnCrossProduct": {
                "test_spherical_jn_yn_cross_product_1": [
                    "self"
                ],
                "test_spherical_jn_yn_cross_product_2": [
                    "self"
                ]
            },
            "TestSphericalIn": {
                "test_spherical_in_exact": [
                    "self"
                ],
                "test_spherical_in_recurrence_real": [
                    "self"
                ],
                "test_spherical_in_recurrence_complex": [
                    "self"
                ],
                "test_spherical_in_inf_real": [
                    "self"
                ],
                "test_spherical_in_inf_complex": [
                    "self"
                ],
                "test_spherical_in_at_zero": [
                    "self"
                ]
            },
            "TestSphericalKn": {
                "test_spherical_kn_exact": [
                    "self"
                ],
                "test_spherical_kn_recurrence_real": [
                    "self"
                ],
                "test_spherical_kn_recurrence_complex": [
                    "self"
                ],
                "test_spherical_kn_inf_real": [
                    "self"
                ],
                "test_spherical_kn_inf_complex": [
                    "self"
                ],
                "test_spherical_kn_at_zero": [
                    "self"
                ],
                "test_spherical_kn_at_zero_complex": [
                    "self"
                ]
            },
            "SphericalDerivativesTestCase": {
                "fundamental_theorem": [
                    "self",
                    "n",
                    "a",
                    "b"
                ],
                "test_fundamental_theorem_0": [
                    "self"
                ],
                "test_fundamental_theorem_7": [
                    "self"
                ]
            },
            "TestSphericalJnDerivatives": {
                "f": [
                    "self",
                    "n",
                    "z"
                ],
                "df": [
                    "self",
                    "n",
                    "z"
                ],
                "test_spherical_jn_d_zero": [
                    "self"
                ]
            },
            "TestSphericalYnDerivatives": {
                "f": [
                    "self",
                    "n",
                    "z"
                ],
                "df": [
                    "self",
                    "n",
                    "z"
                ]
            },
            "TestSphericalInDerivatives": {
                "f": [
                    "self",
                    "n",
                    "z"
                ],
                "df": [
                    "self",
                    "n",
                    "z"
                ],
                "test_spherical_in_d_zero": [
                    "self"
                ]
            },
            "TestSphericalKnDerivatives": {
                "f": [
                    "self",
                    "n",
                    "z"
                ],
                "df": [
                    "self",
                    "n",
                    "z"
                ]
            },
            "TestSphericalOld": {
                "test_sph_in": [
                    "self"
                ],
                "test_sph_in_kn_order0": [
                    "self"
                ],
                "test_sph_jn": [
                    "self"
                ],
                "test_sph_kn": [
                    "self"
                ],
                "test_sph_yn": [
                    "self"
                ]
            }
        },
        "scipy.special.tests.test_sici": {
            "test_sici_consistency": [],
            "test_shichi_consistency": []
        },
        "scipy.special.tests.test_precompute_gammainc": {
            "test_g": [],
            "test_alpha": [],
            "test_d": [],
            "test_gammainc": [],
            "test_gammaincc": []
        },
        "scipy.special.tests.test_precompute_expn_asy": {
            "test_generate_A": []
        },
        "scipy.special.tests.test_spence": {
            "test_consistency": [],
            "test_special_points": []
        },
        "scipy.special.tests.test_cython_special": {
            "_generate_test_points": [
                "typecodes"
            ],
            "test_cython_api_completeness": [],
            "test_cython_api": [
                "param"
            ]
        },
        "scipy.special.tests.test_hypergeometric": {
            "TestHyperu": {
                "test_negative_x": [
                    "self"
                ],
                "test_special_cases": [
                    "self"
                ],
                "test_nan_inputs": [
                    "self",
                    "a",
                    "b",
                    "x"
                ]
            },
            "TestHyp1f1": {
                "test_nan_inputs": [
                    "self",
                    "a",
                    "b",
                    "x"
                ],
                "test_poles": [
                    "self"
                ],
                "test_special_cases": [
                    "self",
                    "a",
                    "b",
                    "x",
                    "result"
                ],
                "test_geometric_convergence": [
                    "self",
                    "a",
                    "b",
                    "x",
                    "result"
                ],
                "test_a_negative_integer": [
                    "self",
                    "a",
                    "b",
                    "x",
                    "result"
                ],
                "test_gh_3492": [
                    "self"
                ],
                "test_gh_3593": [
                    "self"
                ],
                "test_gh_11099": [
                    "self",
                    "a",
                    "b",
                    "x",
                    "desired"
                ]
            }
        },
        "scipy.special.tests.test_erfinv": {
            "TestInverseErrorFunction": {
                "test_compliment": [
                    "self"
                ],
                "test_literal_values": [
                    "self"
                ],
                "test_domain_bounds": [
                    "self",
                    "f",
                    "x",
                    "y"
                ]
            }
        },
        "scipy.special.tests.test_spfun_stats": {
            "_check_multigammaln_array_result": [
                "a",
                "d"
            ],
            "test_multigammaln_array_arg": [],
            "TestMultiGammaLn": {
                "test1": [
                    "self"
                ],
                "test2": [
                    "self"
                ],
                "test_bararg": [
                    "self"
                ]
            }
        },
        "scipy.special.tests.test_pcf": {
            "test_pbwa_segfault": [],
            "test_pbwa_nan": []
        },
        "scipy.special.tests.test_sf_error": {
            "_check_action": [
                "fun",
                "args",
                "action"
            ],
            "test_geterr": [],
            "test_seterr": [],
            "test_errstate_pyx_basic": [],
            "test_errstate_c_basic": [],
            "test_errstate_cpp_basic": [],
            "test_errstate": [],
            "test_errstate_all_but_one": []
        },
        "scipy.special.tests.test_ellip_harm": {
            "test_ellip_potential": [],
            "test_ellip_norm": [],
            "test_ellip_harm_2": [],
            "test_ellip_harm": [],
            "test_ellip_harm_invalid_p": []
        },
        "scipy.special.tests.test_faddeeva": {
            "TestVoigtProfile": {
                "test_nan": [
                    "self",
                    "x",
                    "sigma",
                    "gamma"
                ],
                "test_inf": [
                    "self",
                    "x",
                    "desired"
                ],
                "test_against_mathematica": [
                    "self"
                ],
                "test_symmetry": [
                    "self"
                ],
                "test_corner_cases": [
                    "self",
                    "x",
                    "sigma",
                    "gamma",
                    "desired"
                ],
                "test_continuity": [
                    "self",
                    "sigma1",
                    "gamma1",
                    "sigma2",
                    "gamma2"
                ]
            }
        },
        "scipy.special.tests.test_logsumexp": {
            "test_logsumexp": [],
            "test_logsumexp_b": [],
            "test_logsumexp_sign": [],
            "test_logsumexp_sign_zero": [],
            "test_logsumexp_sign_shape": [],
            "test_logsumexp_shape": [],
            "test_logsumexp_b_zero": [],
            "test_logsumexp_b_shape": [],
            "test_softmax_fixtures": [],
            "test_softmax_multi_axes": []
        },
        "scipy.special.tests.test_round": {
            "test_add_round_up": [],
            "test_add_round_down": []
        },
        "scipy.special.tests.test_precompute_utils": {
            "TestInversion": {
                "test_log": [
                    "self"
                ],
                "test_sin": [
                    "self"
                ]
            }
        },
        "scipy.special.tests.test_lambertw": {
            "test_values": [],
            "test_ufunc": [],
            "test_lambertw_ufunc_loop_selection": []
        },
        "scipy.special._precompute.zetac": {
            "zetac_series": [
                "N"
            ],
            "main": []
        },
        "scipy.special._precompute.gammainc_asy": {
            "compute_a": [
                "n"
            ],
            "compute_g": [
                "n"
            ],
            "eta": [
                "lam"
            ],
            "compute_alpha": [
                "n"
            ],
            "compute_d": [
                "K",
                "N"
            ],
            "main": []
        },
        "scipy.special._precompute.expn_asy": {
            "generate_A": [
                "K"
            ],
            "main": []
        },
        "scipy.special._precompute.setup": {
            "configuration": [
                "parent_name",
                "top_path"
            ]
        },
        "scipy.special._precompute.struve_convergence": {
            "err_metric": [
                "a",
                "b",
                "atol"
            ],
            "do_plot": [
                "is_h"
            ],
            "main": []
        },
        "scipy.special._precompute.utils": {
            "lagrange_inversion": [
                "a"
            ]
        },
        "scipy.special._precompute.gammainc_data": {
            "gammainc": [
                "a",
                "x",
                "dps",
                "maxterms"
            ],
            "gammaincc": [
                "a",
                "x",
                "dps",
                "maxterms"
            ],
            "main": []
        },
        "scipy.special._precompute": {},
        "scipy.special._precompute.lambertw": {
            "lambertw_pade": [],
            "main": []
        },
        "scipy.special._precompute.loggamma": {
            "stirling_series": [
                "N"
            ],
            "taylor_series_at_1": [
                "N"
            ],
            "main": []
        },
        "scipy.special._precompute.wrightomega": {
            "mpmath_wrightomega": [
                "x"
            ],
            "wrightomega_series_error": [
                "x"
            ],
            "wrightomega_exp_error": [
                "x"
            ],
            "main": []
        },
        "scipy._lib.deprecation": {
            "_deprecated": [
                "msg",
                "stacklevel"
            ],
            "deprecate_cython_api": [
                "module",
                "routine_name",
                "new_name",
                "message"
            ],
            "_DeprecationHelperStr": {
                "__init__": [
                    "self",
                    "content",
                    "message"
                ],
                "__hash__": [
                    "self"
                ],
                "__eq__": [
                    "self",
                    "other"
                ]
            }
        },
        "scipy._lib._util": {
            "_lazywhere": [
                "cond",
                "arrays",
                "f",
                "fillvalue",
                "f2"
            ],
            "_lazyselect": [
                "condlist",
                "choicelist",
                "arrays",
                "default"
            ],
            "_aligned_zeros": [
                "shape",
                "dtype",
                "order",
                "align"
            ],
            "_prune_array": [
                "array"
            ],
            "prod": [
                "iterable"
            ],
            "float_factorial": [
                "n"
            ],
            "check_random_state": [
                "seed"
            ],
            "_asarray_validated": [
                "a",
                "check_finite",
                "sparse_ok",
                "objects_ok",
                "mask_ok",
                "as_inexact"
            ],
            "getfullargspec_no_self": [
                "func"
            ],
            "rng_integers": [
                "gen",
                "low",
                "high",
                "size",
                "dtype",
                "endpoint"
            ],
            "DeprecatedImport": {
                "__init__": [
                    "self",
                    "old_module_name",
                    "new_module_name"
                ],
                "__dir__": [
                    "self"
                ],
                "__getattr__": [
                    "self",
                    "name"
                ]
            },
            "MapWrapper": {
                "__init__": [
                    "self",
                    "pool"
                ],
                "__enter__": [
                    "self"
                ],
                "terminate": [
                    "self"
                ],
                "join": [
                    "self"
                ],
                "close": [
                    "self"
                ],
                "__exit__": [
                    "self",
                    "exc_type",
                    "exc_value",
                    "traceback"
                ],
                "__call__": [
                    "self",
                    "func",
                    "iterable"
                ]
            }
        },
        "scipy._lib.setup": {
            "configuration": [
                "parent_package",
                "top_path"
            ]
        },
        "scipy._lib._gcutils": {
            "set_gc_state": [
                "state"
            ],
            "gc_state": [
                "state"
            ],
            "assert_deallocated": [
                "func"
            ],
            "ReferenceError": {}
        },
        "scipy._lib._bunch": {
            "_validate_names": [
                "typename",
                "field_names",
                "extra_field_names"
            ],
            "_make_tuple_bunch": [
                "typename",
                "field_names",
                "extra_field_names",
                "module"
            ]
        },
        "scipy._lib._pep440": {
            "parse": [
                "version"
            ],
            "_parse_version_parts": [
                "s"
            ],
            "_legacy_cmpkey": [
                "version"
            ],
            "_parse_letter_version": [
                "letter",
                "number"
            ],
            "_parse_local_version": [
                "local"
            ],
            "_cmpkey": [
                "epoch",
                "release",
                "pre",
                "post",
                "dev",
                "local"
            ],
            "Infinity": {
                "__repr__": [
                    "self"
                ],
                "__hash__": [
                    "self"
                ],
                "__lt__": [
                    "self",
                    "other"
                ],
                "__le__": [
                    "self",
                    "other"
                ],
                "__eq__": [
                    "self",
                    "other"
                ],
                "__ne__": [
                    "self",
                    "other"
                ],
                "__gt__": [
                    "self",
                    "other"
                ],
                "__ge__": [
                    "self",
                    "other"
                ],
                "__neg__": [
                    "self"
                ]
            },
            "NegativeInfinity": {
                "__repr__": [
                    "self"
                ],
                "__hash__": [
                    "self"
                ],
                "__lt__": [
                    "self",
                    "other"
                ],
                "__le__": [
                    "self",
                    "other"
                ],
                "__eq__": [
                    "self",
                    "other"
                ],
                "__ne__": [
                    "self",
                    "other"
                ],
                "__gt__": [
                    "self",
                    "other"
                ],
                "__ge__": [
                    "self",
                    "other"
                ],
                "__neg__": [
                    "self"
                ]
            },
            "InvalidVersion": {},
            "_BaseVersion": {
                "__hash__": [
                    "self"
                ],
                "__lt__": [
                    "self",
                    "other"
                ],
                "__le__": [
                    "self",
                    "other"
                ],
                "__eq__": [
                    "self",
                    "other"
                ],
                "__ge__": [
                    "self",
                    "other"
                ],
                "__gt__": [
                    "self",
                    "other"
                ],
                "__ne__": [
                    "self",
                    "other"
                ],
                "_compare": [
                    "self",
                    "other",
                    "method"
                ]
            },
            "LegacyVersion": {
                "__init__": [
                    "self",
                    "version"
                ],
                "__str__": [
                    "self"
                ],
                "__repr__": [
                    "self"
                ],
                "public": [
                    "self"
                ],
                "base_version": [
                    "self"
                ],
                "local": [
                    "self"
                ],
                "is_prerelease": [
                    "self"
                ],
                "is_postrelease": [
                    "self"
                ]
            },
            "Version": {
                "__init__": [
                    "self",
                    "version"
                ],
                "__repr__": [
                    "self"
                ],
                "__str__": [
                    "self"
                ],
                "public": [
                    "self"
                ],
                "base_version": [
                    "self"
                ],
                "local": [
                    "self"
                ],
                "is_prerelease": [
                    "self"
                ],
                "is_postrelease": [
                    "self"
                ]
            }
        },
        "scipy._lib": {},
        "scipy._lib.doccer": {
            "docformat": [
                "docstring",
                "docdict"
            ],
            "inherit_docstring_from": [
                "cls"
            ],
            "extend_notes_in_docstring": [
                "cls",
                "notes"
            ],
            "replace_notes_in_docstring": [
                "cls",
                "notes"
            ],
            "indentcount_lines": [
                "lines"
            ],
            "filldoc": [
                "docdict",
                "unindent_params"
            ],
            "unindent_dict": [
                "docdict"
            ],
            "unindent_string": [
                "docstring"
            ],
            "doc_replace": [
                "obj",
                "oldval",
                "newval"
            ]
        },
        "scipy._lib._disjoint_set": {
            "DisjointSet": {
                "__init__": [
                    "self",
                    "elements"
                ],
                "__iter__": [
                    "self"
                ],
                "__len__": [
                    "self"
                ],
                "__contains__": [
                    "self",
                    "x"
                ],
                "__getitem__": [
                    "self",
                    "x"
                ],
                "add": [
                    "self",
                    "x"
                ],
                "merge": [
                    "self",
                    "x",
                    "y"
                ],
                "connected": [
                    "self",
                    "x",
                    "y"
                ],
                "subset": [
                    "self",
                    "x"
                ],
                "subsets": [
                    "self"
                ]
            }
        },
        "scipy._lib.decorator": {
            "get_init": [
                "cls"
            ],
            "getargspec": [
                "f"
            ],
            "decorate": [
                "func",
                "caller"
            ],
            "decorator": [
                "caller",
                "_func"
            ],
            "append": [
                "a",
                "vancestors"
            ],
            "dispatch_on": [],
            "FunctionMaker": {
                "__init__": [
                    "self",
                    "func",
                    "name",
                    "signature",
                    "defaults",
                    "doc",
                    "module",
                    "funcdict"
                ],
                "update": [
                    "self",
                    "func"
                ],
                "make": [
                    "self",
                    "src_templ",
                    "evaldict",
                    "addsource"
                ],
                "create": [
                    "cls",
                    "obj",
                    "body",
                    "evaldict",
                    "defaults",
                    "doc",
                    "module",
                    "addsource"
                ]
            },
            "ContextManager": {
                "__call__": [
                    "self",
                    "func"
                ]
            }
        },
        "scipy._lib._testutils": {
            "_pytest_has_xdist": [],
            "check_free_memory": [
                "free_mb"
            ],
            "_parse_size": [
                "size_str"
            ],
            "_get_mem_available": [],
            "FPUModeChangeWarning": {},
            "PytestTester": {
                "__init__": [
                    "self",
                    "module_name"
                ],
                "__call__": [
                    "self",
                    "label",
                    "verbose",
                    "extra_argv",
                    "doctests",
                    "coverage",
                    "tests",
                    "parallel"
                ]
            }
        },
        "scipy._lib._tmpdirs": {
            "tempdir": [],
            "in_tempdir": [],
            "in_dir": [
                "dir"
            ]
        },
        "scipy._lib.uarray": {},
        "scipy._lib._threadsafety": {
            "non_reentrant": [
                "err_msg"
            ],
            "ReentrancyError": {},
            "ReentrancyLock": {
                "__init__": [
                    "self",
                    "err_msg"
                ],
                "__enter__": [
                    "self"
                ],
                "__exit__": [
                    "self",
                    "type",
                    "value",
                    "traceback"
                ],
                "decorate": [
                    "self",
                    "func"
                ]
            }
        },
        "scipy._lib._ccallback": {
            "_import_cffi": [],
            "_get_ctypes_func": [
                "func",
                "signature"
            ],
            "_typename_from_ctypes": [
                "item"
            ],
            "_get_ctypes_data": [
                "data"
            ],
            "_get_cffi_func": [
                "func",
                "signature"
            ],
            "_get_cffi_data": [
                "data"
            ],
            "CData": {},
            "LowLevelCallable": {
                "__new__": [
                    "cls",
                    "function",
                    "user_data",
                    "signature"
                ],
                "__repr__": [
                    "self"
                ],
                "function": [
                    "self"
                ],
                "user_data": [
                    "self"
                ],
                "signature": [
                    "self"
                ],
                "__getitem__": [
                    "self",
                    "idx"
                ],
                "from_cython": [
                    "cls",
                    "module",
                    "name",
                    "user_data",
                    "signature"
                ],
                "_parse_callback": [
                    "cls",
                    "obj",
                    "user_data",
                    "signature"
                ]
            }
        },
        "scipy._lib._uarray.setup": {
            "pre_build_hook": [
                "build_ext",
                "ext"
            ],
            "configuration": [
                "parent_package",
                "top_path"
            ]
        },
        "scipy._lib._uarray": {},
        "scipy._lib._uarray._backend": {
            "unpickle_function": [
                "mod_name",
                "qname"
            ],
            "pickle_function": [
                "func"
            ],
            "create_multimethod": [],
            "generate_multimethod": [
                "argument_extractor",
                "argument_replacer",
                "domain",
                "default"
            ],
            "set_backend": [
                "backend",
                "coerce",
                "only"
            ],
            "skip_backend": [
                "backend"
            ],
            "get_defaults": [
                "f"
            ],
            "set_global_backend": [
                "backend",
                "coerce",
                "only"
            ],
            "register_backend": [
                "backend"
            ],
            "clear_backends": [
                "domain",
                "registered",
                "globals"
            ],
            "mark_as": [
                "dispatch_type"
            ],
            "all_of_type": [
                "arg_type"
            ],
            "wrap_single_convertor": [
                "convert_single"
            ],
            "Dispatchable": {
                "__init__": [
                    "self",
                    "value",
                    "dispatch_type",
                    "coercible"
                ],
                "__getitem__": [
                    "self",
                    "index"
                ],
                "__str__": [
                    "self"
                ]
            }
        },
        "scipy._lib.tests.test__testutils": {
            "test__parse_size": [],
            "test__mem_available": []
        },
        "scipy._lib.tests.test__util": {
            "test__aligned_zeros": [],
            "test_check_random_state": [],
            "test_getfullargspec_no_self": [],
            "test_mapwrapper_serial": [],
            "test_pool": [],
            "test_mapwrapper_parallel": [],
            "test_numpy_deprecation": [
                "key"
            ],
            "test_numpy_deprecation_functionality": [],
            "test_rng_integers": []
        },
        "scipy._lib.tests": {},
        "scipy._lib.tests.test_deprecation": {
            "test_cython_api_deprecation": []
        },
        "scipy._lib.tests.test_bunch": {
            "TestMakeTupleBunch": {
                "setup": [
                    "self"
                ],
                "test_attribute_access": [
                    "self"
                ],
                "test_indexing": [
                    "self"
                ],
                "test_unpacking": [
                    "self"
                ],
                "test_slice": [
                    "self"
                ],
                "test_len": [
                    "self"
                ],
                "test_repr": [
                    "self"
                ],
                "test_hash": [
                    "self"
                ],
                "test_pickle": [
                    "self"
                ],
                "test_read_only_existing": [
                    "self"
                ],
                "test_read_only_new": [
                    "self"
                ],
                "test_constructor_missing_parameter": [
                    "self"
                ],
                "test_constructor_incorrect_parameter": [
                    "self"
                ],
                "test_module": [
                    "self"
                ],
                "test_extra_fields_per_instance": [
                    "self"
                ],
                "test_extra_field_names_is_optional": [
                    "self"
                ],
                "test_tuple_like": [
                    "self"
                ],
                "test_explicit_module": [
                    "self"
                ],
                "test_identifiers_not_allowed": [
                    "self",
                    "args"
                ],
                "test_repeated_field_names": [
                    "self",
                    "args"
                ],
                "test_leading_underscore_not_allowed": [
                    "self",
                    "args"
                ],
                "test_keyword_not_allowed_in_fields": [
                    "self",
                    "args"
                ],
                "test_at_least_one_field_name_required": [
                    "self"
                ]
            }
        },
        "scipy._lib.tests.test_import_cycles": {
            "test_modules_importable": []
        },
        "scipy._lib.tests.test_tmpdirs": {
            "test_tempdir": [],
            "test_in_tempdir": [],
            "test_given_directory": []
        },
        "scipy._lib.tests.test__threadsafety": {
            "test_parallel_threads": [],
            "test_reentering": []
        },
        "scipy._lib.tests.test_linear_assignment": {
            "test_two_methods_give_expected_result_on_small_inputs": [
                "solver_type",
                "sign",
                "test_case"
            ],
            "test_two_methods_give_same_result_on_many_sparse_inputs": []
        },
        "scipy._lib.tests.test_ccallback": {
            "callback_python": [
                "a",
                "user_data"
            ],
            "_get_cffi_func": [
                "base",
                "signature"
            ],
            "_get_ctypes_data": [],
            "_get_cffi_data": [],
            "test_callbacks": [],
            "test_bad_callbacks": [],
            "test_signature_override": [],
            "test_threadsafety": []
        },
        "scipy._lib.tests.test__pep440": {
            "test_main_versions": [],
            "test_version_1_point_10": [],
            "test_alpha_beta_rc": [],
            "test_dev_version": [],
            "test_dev_a_b_rc_mixed": [],
            "test_dev0_version": [],
            "test_dev0_a_b_rc_mixed": [],
            "test_raises": [],
            "test_legacy_version": []
        },
        "scipy._lib.tests.test_warnings": {
            "warning_calls": [],
            "test_warning_calls_filters": [
                "warning_calls"
            ],
            "test_warning_calls_stacklevels": [
                "warning_calls"
            ],
            "ParseCall": {
                "__init__": [
                    "self"
                ],
                "visit_Attribute": [
                    "self",
                    "node"
                ],
                "visit_Name": [
                    "self",
                    "node"
                ]
            },
            "FindFuncs": {
                "__init__": [
                    "self",
                    "filename"
                ],
                "visit_Call": [
                    "self",
                    "node"
                ]
            }
        },
        "scipy._lib.tests.test__gcutils": {
            "test_set_gc_state": [],
            "test_gc_state": [],
            "test_assert_deallocated": [],
            "test_assert_deallocated_nodel": [],
            "test_assert_deallocated_circular": [],
            "test_assert_deallocated_circular2": []
        },
        "doc.sphinxext.numpydoc.xref": {
            "make_xref": [
                "param_type",
                "xref_aliases",
                "xref_ignore"
            ]
        },
        "doc.sphinxext.numpydoc.numpydoc": {
            "rename_references": [
                "app",
                "what",
                "name",
                "obj",
                "options",
                "lines"
            ],
            "_is_cite_in_numpydoc_docstring": [
                "citation_node"
            ],
            "relabel_references": [
                "app",
                "doc"
            ],
            "clean_backrefs": [
                "app",
                "doc",
                "docname"
            ],
            "mangle_docstrings": [
                "app",
                "what",
                "name",
                "obj",
                "options",
                "lines"
            ],
            "mangle_signature": [
                "app",
                "what",
                "name",
                "obj",
                "options",
                "sig",
                "retann"
            ],
            "setup": [
                "app",
                "get_doc_object_"
            ],
            "update_config": [
                "app"
            ],
            "match_items": [
                "lines",
                "content_old"
            ],
            "wrap_mangling_directive": [
                "base_directive",
                "objtype"
            ],
            "ManglingDomainBase": {
                "__init__": [
                    "self"
                ],
                "wrap_mangling_directives": [
                    "self"
                ]
            },
            "NumpyPythonDomain": {},
            "NumpyCDomain": {}
        },
        "doc.sphinxext.numpydoc.docscrape": {
            "strip_blank_lines": [
                "l"
            ],
            "indent": [
                "str",
                "indent"
            ],
            "dedent_lines": [
                "lines"
            ],
            "header": [
                "text",
                "style"
            ],
            "Reader": {
                "__init__": [
                    "self",
                    "data"
                ],
                "__getitem__": [
                    "self",
                    "n"
                ],
                "reset": [
                    "self"
                ],
                "read": [
                    "self"
                ],
                "seek_next_non_empty_line": [
                    "self"
                ],
                "eof": [
                    "self"
                ],
                "read_to_condition": [
                    "self",
                    "condition_func"
                ],
                "read_to_next_empty_line": [
                    "self"
                ],
                "read_to_next_unindented_line": [
                    "self"
                ],
                "peek": [
                    "self",
                    "n"
                ],
                "is_empty": [
                    "self"
                ]
            },
            "ParseError": {
                "__str__": [
                    "self"
                ]
            },
            "NumpyDocString": {
                "__init__": [
                    "self",
                    "docstring",
                    "config"
                ],
                "__getitem__": [
                    "self",
                    "key"
                ],
                "__setitem__": [
                    "self",
                    "key",
                    "val"
                ],
                "__iter__": [
                    "self"
                ],
                "__len__": [
                    "self"
                ],
                "_is_at_section": [
                    "self"
                ],
                "_strip": [
                    "self",
                    "doc"
                ],
                "_read_to_next_section": [
                    "self"
                ],
                "_read_sections": [
                    "self"
                ],
                "_parse_param_list": [
                    "self",
                    "content",
                    "single_element_is_type"
                ],
                "_parse_see_also": [
                    "self",
                    "content"
                ],
                "_parse_index": [
                    "self",
                    "section",
                    "content"
                ],
                "_parse_summary": [
                    "self"
                ],
                "_parse": [
                    "self"
                ],
                "_error_location": [
                    "self",
                    "msg",
                    "error"
                ],
                "_str_header": [
                    "self",
                    "name",
                    "symbol"
                ],
                "_str_indent": [
                    "self",
                    "doc",
                    "indent"
                ],
                "_str_signature": [
                    "self"
                ],
                "_str_summary": [
                    "self"
                ],
                "_str_extended_summary": [
                    "self"
                ],
                "_str_param_list": [
                    "self",
                    "name"
                ],
                "_str_section": [
                    "self",
                    "name"
                ],
                "_str_see_also": [
                    "self",
                    "func_role"
                ],
                "_str_index": [
                    "self"
                ],
                "__str__": [
                    "self",
                    "func_role"
                ]
            },
            "FunctionDoc": {
                "__init__": [
                    "self",
                    "func",
                    "role",
                    "doc",
                    "config"
                ],
                "get_func": [
                    "self"
                ],
                "__str__": [
                    "self"
                ]
            },
            "ClassDoc": {
                "__init__": [
                    "self",
                    "cls",
                    "doc",
                    "modulename",
                    "func_doc",
                    "config"
                ],
                "methods": [
                    "self"
                ],
                "properties": [
                    "self"
                ],
                "_is_show_member": [
                    "self",
                    "name"
                ]
            }
        },
        "doc.sphinxext.numpydoc": {
            "setup": [
                "app"
            ]
        },
        "doc.sphinxext.numpydoc.docscrape_sphinx": {
            "get_doc_object": [
                "obj",
                "what",
                "doc",
                "config",
                "builder"
            ],
            "SphinxDocString": {
                "__init__": [
                    "self",
                    "docstring",
                    "config"
                ],
                "load_config": [
                    "self",
                    "config"
                ],
                "_str_header": [
                    "self",
                    "name",
                    "symbol"
                ],
                "_str_field_list": [
                    "self",
                    "name"
                ],
                "_str_indent": [
                    "self",
                    "doc",
                    "indent"
                ],
                "_str_signature": [
                    "self"
                ],
                "_str_summary": [
                    "self"
                ],
                "_str_extended_summary": [
                    "self"
                ],
                "_str_returns": [
                    "self",
                    "name"
                ],
                "_escape_args_and_kwargs": [
                    "self",
                    "name"
                ],
                "_process_param": [
                    "self",
                    "param",
                    "desc",
                    "fake_autosummary"
                ],
                "_str_param_list": [
                    "self",
                    "name",
                    "fake_autosummary"
                ],
                "_obj": [
                    "self"
                ],
                "_str_member_list": [
                    "self",
                    "name"
                ],
                "_str_section": [
                    "self",
                    "name"
                ],
                "_str_see_also": [
                    "self",
                    "func_role"
                ],
                "_str_warnings": [
                    "self"
                ],
                "_str_index": [
                    "self"
                ],
                "_str_references": [
                    "self"
                ],
                "_str_examples": [
                    "self"
                ],
                "__str__": [
                    "self",
                    "indent",
                    "func_role"
                ]
            },
            "SphinxFunctionDoc": {
                "__init__": [
                    "self",
                    "obj",
                    "doc",
                    "config"
                ]
            },
            "SphinxClassDoc": {
                "__init__": [
                    "self",
                    "obj",
                    "doc",
                    "func_doc",
                    "config"
                ]
            },
            "SphinxObjDoc": {
                "__init__": [
                    "self",
                    "obj",
                    "doc",
                    "config"
                ]
            }
        },
        "doc.sphinxext.numpydoc.validate": {
            "error": [
                "code"
            ],
            "_check_desc": [
                "desc",
                "code_no_desc",
                "code_no_upper",
                "code_no_period"
            ],
            "validate": [
                "func_name"
            ],
            "Docstring": {
                "__init__": [
                    "self",
                    "name"
                ],
                "_load_obj": [
                    "name"
                ],
                "type": [
                    "self"
                ],
                "is_function_or_method": [
                    "self"
                ],
                "source_file_name": [
                    "self"
                ],
                "source_file_def_line": [
                    "self"
                ],
                "start_blank_lines": [
                    "self"
                ],
                "end_blank_lines": [
                    "self"
                ],
                "double_blank_lines": [
                    "self"
                ],
                "section_titles": [
                    "self"
                ],
                "summary": [
                    "self"
                ],
                "num_summary_lines": [
                    "self"
                ],
                "extended_summary": [
                    "self"
                ],
                "doc_parameters": [
                    "self"
                ],
                "signature_parameters": [
                    "self"
                ],
                "parameter_mismatches": [
                    "self"
                ],
                "directives_without_two_colons": [
                    "self"
                ],
                "parameter_type": [
                    "self",
                    "param"
                ],
                "see_also": [
                    "self"
                ],
                "examples": [
                    "self"
                ],
                "returns": [
                    "self"
                ],
                "yields": [
                    "self"
                ],
                "method_source": [
                    "self"
                ],
                "method_returns_something": [
                    "self"
                ],
                "deprecated": [
                    "self"
                ]
            }
        },
        "doc.sphinxext.numpydoc.__main__": {
            "render_object": [
                "import_path",
                "config"
            ],
            "validate_object": [
                "import_path"
            ]
        }
    }
}