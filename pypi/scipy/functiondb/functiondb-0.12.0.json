{
    "0.12.0": {
        "scipy.setup": {
            "configuration": [
                "parent_package",
                "top_path"
            ]
        },
        "scipy": {},
        "scipy.version": {},
        "scipy.setupscons": {
            "configuration": [
                "parent_package",
                "top_path",
                "setup_name"
            ]
        },
        "scipy.ndimage.measurements": {
            "label": [
                "input",
                "structure",
                "output"
            ],
            "find_objects": [
                "input",
                "max_label"
            ],
            "labeled_comprehension": [
                "input",
                "labels",
                "index",
                "func",
                "out_dtype",
                "default",
                "pass_positions"
            ],
            "_safely_castable_to_int": [
                "dt"
            ],
            "_stats": [
                "input",
                "labels",
                "index",
                "centered"
            ],
            "sum": [
                "input",
                "labels",
                "index"
            ],
            "mean": [
                "input",
                "labels",
                "index"
            ],
            "variance": [
                "input",
                "labels",
                "index"
            ],
            "standard_deviation": [
                "input",
                "labels",
                "index"
            ],
            "_select": [
                "input",
                "labels",
                "index",
                "find_min",
                "find_max",
                "find_min_positions",
                "find_max_positions",
                "find_median"
            ],
            "minimum": [
                "input",
                "labels",
                "index"
            ],
            "maximum": [
                "input",
                "labels",
                "index"
            ],
            "median": [
                "input",
                "labels",
                "index"
            ],
            "minimum_position": [
                "input",
                "labels",
                "index"
            ],
            "maximum_position": [
                "input",
                "labels",
                "index"
            ],
            "extrema": [
                "input",
                "labels",
                "index"
            ],
            "center_of_mass": [
                "input",
                "labels",
                "index"
            ],
            "histogram": [
                "input",
                "min",
                "max",
                "bins",
                "labels",
                "index"
            ],
            "watershed_ift": [
                "input",
                "markers",
                "structure",
                "output"
            ]
        },
        "scipy.ndimage.io": {
            "imread": [
                "fname",
                "flatten"
            ]
        },
        "scipy.ndimage.setup": {
            "configuration": [
                "parent_package",
                "top_path"
            ]
        },
        "scipy.ndimage.filters": {
            "correlate1d": [
                "input",
                "weights",
                "axis",
                "output",
                "mode",
                "cval",
                "origin"
            ],
            "convolve1d": [
                "input",
                "weights",
                "axis",
                "output",
                "mode",
                "cval",
                "origin"
            ],
            "gaussian_filter1d": [
                "input",
                "sigma",
                "axis",
                "order",
                "output",
                "mode",
                "cval"
            ],
            "gaussian_filter": [
                "input",
                "sigma",
                "order",
                "output",
                "mode",
                "cval"
            ],
            "prewitt": [
                "input",
                "axis",
                "output",
                "mode",
                "cval"
            ],
            "sobel": [
                "input",
                "axis",
                "output",
                "mode",
                "cval"
            ],
            "generic_laplace": [
                "input",
                "derivative2",
                "output",
                "mode",
                "cval",
                "extra_arguments",
                "extra_keywords"
            ],
            "laplace": [
                "input",
                "output",
                "mode",
                "cval"
            ],
            "gaussian_laplace": [
                "input",
                "sigma",
                "output",
                "mode",
                "cval"
            ],
            "generic_gradient_magnitude": [
                "input",
                "derivative",
                "output",
                "mode",
                "cval",
                "extra_arguments",
                "extra_keywords"
            ],
            "gaussian_gradient_magnitude": [
                "input",
                "sigma",
                "output",
                "mode",
                "cval"
            ],
            "_correlate_or_convolve": [
                "input",
                "weights",
                "output",
                "mode",
                "cval",
                "origin",
                "convolution"
            ],
            "correlate": [
                "input",
                "weights",
                "output",
                "mode",
                "cval",
                "origin"
            ],
            "convolve": [
                "input",
                "weights",
                "output",
                "mode",
                "cval",
                "origin"
            ],
            "uniform_filter1d": [
                "input",
                "size",
                "axis",
                "output",
                "mode",
                "cval",
                "origin"
            ],
            "uniform_filter": [
                "input",
                "size",
                "output",
                "mode",
                "cval",
                "origin"
            ],
            "minimum_filter1d": [
                "input",
                "size",
                "axis",
                "output",
                "mode",
                "cval",
                "origin"
            ],
            "maximum_filter1d": [
                "input",
                "size",
                "axis",
                "output",
                "mode",
                "cval",
                "origin"
            ],
            "_min_or_max_filter": [
                "input",
                "size",
                "footprint",
                "structure",
                "output",
                "mode",
                "cval",
                "origin",
                "minimum"
            ],
            "minimum_filter": [
                "input",
                "size",
                "footprint",
                "output",
                "mode",
                "cval",
                "origin"
            ],
            "maximum_filter": [
                "input",
                "size",
                "footprint",
                "output",
                "mode",
                "cval",
                "origin"
            ],
            "_rank_filter": [
                "input",
                "rank",
                "size",
                "footprint",
                "output",
                "mode",
                "cval",
                "origin",
                "operation"
            ],
            "rank_filter": [
                "input",
                "rank",
                "size",
                "footprint",
                "output",
                "mode",
                "cval",
                "origin"
            ],
            "median_filter": [
                "input",
                "size",
                "footprint",
                "output",
                "mode",
                "cval",
                "origin"
            ],
            "percentile_filter": [
                "input",
                "percentile",
                "size",
                "footprint",
                "output",
                "mode",
                "cval",
                "origin"
            ],
            "generic_filter1d": [
                "input",
                "function",
                "filter_size",
                "axis",
                "output",
                "mode",
                "cval",
                "origin",
                "extra_arguments",
                "extra_keywords"
            ],
            "generic_filter": [
                "input",
                "function",
                "size",
                "footprint",
                "output",
                "mode",
                "cval",
                "origin",
                "extra_arguments",
                "extra_keywords"
            ]
        },
        "scipy.ndimage": {},
        "scipy.ndimage.fourier": {
            "_get_output_fourier": [
                "output",
                "input"
            ],
            "_get_output_fourier_complex": [
                "output",
                "input"
            ],
            "fourier_gaussian": [
                "input",
                "sigma",
                "n",
                "axis",
                "output"
            ],
            "fourier_uniform": [
                "input",
                "size",
                "n",
                "axis",
                "output"
            ],
            "fourier_ellipsoid": [
                "input",
                "size",
                "n",
                "axis",
                "output"
            ],
            "fourier_shift": [
                "input",
                "shift",
                "n",
                "axis",
                "output"
            ]
        },
        "scipy.ndimage._ni_support": {
            "_extend_mode_to_code": [
                "mode"
            ],
            "_normalize_sequence": [
                "input",
                "rank",
                "array_type"
            ],
            "_get_output": [
                "output",
                "input",
                "shape"
            ],
            "_check_axis": [
                "axis",
                "rank"
            ]
        },
        "scipy.ndimage.morphology": {
            "_center_is_true": [
                "structure",
                "origin"
            ],
            "iterate_structure": [
                "structure",
                "iterations",
                "origin"
            ],
            "generate_binary_structure": [
                "rank",
                "connectivity"
            ],
            "_binary_erosion": [
                "input",
                "structure",
                "iterations",
                "mask",
                "output",
                "border_value",
                "origin",
                "invert",
                "brute_force"
            ],
            "binary_erosion": [
                "input",
                "structure",
                "iterations",
                "mask",
                "output",
                "border_value",
                "origin",
                "brute_force"
            ],
            "binary_dilation": [
                "input",
                "structure",
                "iterations",
                "mask",
                "output",
                "border_value",
                "origin",
                "brute_force"
            ],
            "binary_opening": [
                "input",
                "structure",
                "iterations",
                "output",
                "origin"
            ],
            "binary_closing": [
                "input",
                "structure",
                "iterations",
                "output",
                "origin"
            ],
            "binary_hit_or_miss": [
                "input",
                "structure1",
                "structure2",
                "output",
                "origin1",
                "origin2"
            ],
            "binary_propagation": [
                "input",
                "structure",
                "mask",
                "output",
                "border_value",
                "origin"
            ],
            "binary_fill_holes": [
                "input",
                "structure",
                "output",
                "origin"
            ],
            "grey_erosion": [
                "input",
                "size",
                "footprint",
                "structure",
                "output",
                "mode",
                "cval",
                "origin"
            ],
            "grey_dilation": [
                "input",
                "size",
                "footprint",
                "structure",
                "output",
                "mode",
                "cval",
                "origin"
            ],
            "grey_opening": [
                "input",
                "size",
                "footprint",
                "structure",
                "output",
                "mode",
                "cval",
                "origin"
            ],
            "grey_closing": [
                "input",
                "size",
                "footprint",
                "structure",
                "output",
                "mode",
                "cval",
                "origin"
            ],
            "morphological_gradient": [
                "input",
                "size",
                "footprint",
                "structure",
                "output",
                "mode",
                "cval",
                "origin"
            ],
            "morphological_laplace": [
                "input",
                "size",
                "footprint",
                "structure",
                "output",
                "mode",
                "cval",
                "origin"
            ],
            "white_tophat": [
                "input",
                "size",
                "footprint",
                "structure",
                "output",
                "mode",
                "cval",
                "origin"
            ],
            "black_tophat": [
                "input",
                "size",
                "footprint",
                "structure",
                "output",
                "mode",
                "cval",
                "origin"
            ],
            "distance_transform_bf": [
                "input",
                "metric",
                "sampling",
                "return_distances",
                "return_indices",
                "distances",
                "indices"
            ],
            "distance_transform_cdt": [
                "input",
                "metric",
                "return_distances",
                "return_indices",
                "distances",
                "indices"
            ],
            "distance_transform_edt": [
                "input",
                "sampling",
                "return_distances",
                "return_indices",
                "distances",
                "indices"
            ]
        },
        "scipy.ndimage.interpolation": {
            "_extend_mode_to_code": [
                "mode"
            ],
            "spline_filter1d": [
                "input",
                "order",
                "axis",
                "output"
            ],
            "spline_filter": [
                "input",
                "order",
                "output"
            ],
            "geometric_transform": [
                "input",
                "mapping",
                "output_shape",
                "output",
                "order",
                "mode",
                "cval",
                "prefilter",
                "extra_arguments",
                "extra_keywords"
            ],
            "map_coordinates": [
                "input",
                "coordinates",
                "output",
                "order",
                "mode",
                "cval",
                "prefilter"
            ],
            "affine_transform": [
                "input",
                "matrix",
                "offset",
                "output_shape",
                "output",
                "order",
                "mode",
                "cval",
                "prefilter"
            ],
            "shift": [
                "input",
                "shift",
                "output",
                "order",
                "mode",
                "cval",
                "prefilter"
            ],
            "zoom": [
                "input",
                "zoom",
                "output",
                "order",
                "mode",
                "cval",
                "prefilter"
            ],
            "_minmax": [
                "coor",
                "minc",
                "maxc"
            ],
            "rotate": [
                "input",
                "angle",
                "axes",
                "reshape",
                "output",
                "order",
                "mode",
                "cval",
                "prefilter"
            ]
        },
        "scipy.ndimage.setupscons": {
            "configuration": [
                "parent_package",
                "top_path"
            ]
        },
        "scipy.interpolate.polyint": {
            "_isscalar": [
                "x"
            ],
            "krogh_interpolate": [
                "xi",
                "yi",
                "x",
                "der",
                "axis"
            ],
            "approximate_taylor_polynomial": [
                "f",
                "x",
                "degree",
                "scale",
                "order"
            ],
            "barycentric_interpolate": [
                "xi",
                "yi",
                "x",
                "axis"
            ],
            "piecewise_polynomial_interpolate": [
                "xi",
                "yi",
                "x",
                "orders",
                "der",
                "axis"
            ],
            "pchip_interpolate": [
                "xi",
                "yi",
                "x",
                "der",
                "axis"
            ],
            "_Interpolator1D": {
                "__init__": [
                    "self",
                    "xi",
                    "yi",
                    "axis"
                ],
                "__call__": [
                    "self",
                    "x"
                ],
                "_prepare_x": [
                    "self",
                    "x"
                ],
                "_finish_y": [
                    "self",
                    "y",
                    "x_shape"
                ],
                "_reshape_yi": [
                    "self",
                    "yi",
                    "check"
                ],
                "_set_yi": [
                    "self",
                    "yi",
                    "xi",
                    "axis"
                ],
                "_set_dtype": [
                    "self",
                    "dtype",
                    "union"
                ]
            },
            "_Interpolator1DWithDerivatives": {
                "derivatives": [
                    "self",
                    "x",
                    "der"
                ],
                "derivative": [
                    "self",
                    "x",
                    "der"
                ]
            },
            "KroghInterpolator": {
                "__init__": [
                    "self",
                    "xi",
                    "yi",
                    "axis"
                ],
                "_evaluate": [
                    "self",
                    "x"
                ],
                "_evaluate_derivatives": [
                    "self",
                    "x",
                    "der"
                ]
            },
            "BarycentricInterpolator": {
                "__init__": [
                    "self",
                    "xi",
                    "yi",
                    "axis"
                ],
                "set_yi": [
                    "self",
                    "yi",
                    "axis"
                ],
                "add_xi": [
                    "self",
                    "xi",
                    "yi"
                ],
                "__call__": [
                    "self",
                    "x"
                ],
                "_evaluate": [
                    "self",
                    "x"
                ]
            },
            "PiecewisePolynomial": {
                "__init__": [
                    "self",
                    "xi",
                    "yi",
                    "orders",
                    "direction",
                    "axis"
                ],
                "_make_polynomial": [
                    "self",
                    "x1",
                    "y1",
                    "x2",
                    "y2",
                    "order",
                    "direction"
                ],
                "append": [
                    "self",
                    "xi",
                    "yi",
                    "order"
                ],
                "extend": [
                    "self",
                    "xi",
                    "yi",
                    "orders"
                ],
                "_evaluate": [
                    "self",
                    "x"
                ],
                "_evaluate_derivatives": [
                    "self",
                    "x",
                    "der"
                ]
            },
            "PchipInterpolator": {
                "__init__": [
                    "self",
                    "x",
                    "y",
                    "axis"
                ],
                "_edge_case": [
                    "m0",
                    "d1",
                    "out"
                ],
                "_find_derivatives": [
                    "x",
                    "y"
                ]
            }
        },
        "scipy.interpolate.interpnd_info": {
            "_estimate_gradients_2d_global": []
        },
        "scipy.interpolate.setup": {
            "configuration": [
                "parent_package",
                "top_path"
            ]
        },
        "scipy.interpolate": {},
        "scipy.interpolate.interpolate": {
            "reduce_sometrue": [
                "a"
            ],
            "lagrange": [
                "x",
                "w"
            ],
            "_dot0": [
                "a",
                "b"
            ],
            "_find_smoothest": [
                "xk",
                "yk",
                "order",
                "conds",
                "B"
            ],
            "_setdiag": [
                "a",
                "k",
                "v"
            ],
            "_find_smoothest2": [
                "xk",
                "yk"
            ],
            "_get_spline2_Bb": [
                "xk",
                "yk",
                "kind",
                "conds"
            ],
            "_get_spline3_Bb": [
                "xk",
                "yk",
                "kind",
                "conds"
            ],
            "_find_user": [
                "xk",
                "yk",
                "order",
                "conds",
                "B"
            ],
            "_find_not_a_knot": [
                "xk",
                "yk",
                "order",
                "conds",
                "B"
            ],
            "_find_natural": [
                "xk",
                "yk",
                "order",
                "conds",
                "B"
            ],
            "_find_clamped": [
                "xk",
                "yk",
                "order",
                "conds",
                "B"
            ],
            "_find_fixed": [
                "xk",
                "yk",
                "order",
                "conds",
                "B"
            ],
            "_find_periodic": [
                "xk",
                "yk",
                "order",
                "conds",
                "B"
            ],
            "_find_symmetric": [
                "xk",
                "yk",
                "order",
                "conds",
                "B"
            ],
            "_find_mixed": [
                "xk",
                "yk",
                "order",
                "conds",
                "B"
            ],
            "splmake": [
                "xk",
                "yk",
                "order",
                "kind",
                "conds"
            ],
            "spleval": [
                "xck",
                "xnew",
                "deriv"
            ],
            "spltopp": [
                "xk",
                "cvals",
                "k"
            ],
            "spline": [
                "xk",
                "yk",
                "xnew",
                "order",
                "kind",
                "conds"
            ],
            "interp2d": {
                "__init__": [
                    "self",
                    "x",
                    "y",
                    "z",
                    "kind",
                    "copy",
                    "bounds_error",
                    "fill_value"
                ],
                "__call__": [
                    "self",
                    "x",
                    "y",
                    "dx",
                    "dy"
                ]
            },
            "interp1d": {
                "__init__": [
                    "self",
                    "x",
                    "y",
                    "kind",
                    "axis",
                    "copy",
                    "bounds_error",
                    "fill_value"
                ],
                "_call_linear": [
                    "self",
                    "x_new"
                ],
                "_call_nearest": [
                    "self",
                    "x_new"
                ],
                "_call_spline": [
                    "self",
                    "x_new"
                ],
                "_evaluate": [
                    "self",
                    "x_new"
                ],
                "_check_bounds": [
                    "self",
                    "x_new"
                ]
            },
            "ppform": {
                "__init__": [
                    "self",
                    "coeffs",
                    "breaks",
                    "fill",
                    "sort"
                ],
                "__call__": [
                    "self",
                    "xnew"
                ],
                "fromspline": [
                    "cls",
                    "xk",
                    "cvals",
                    "order",
                    "fill"
                ]
            }
        },
        "scipy.interpolate.fitpack2": {
            "UnivariateSpline": {
                "__init__": [
                    "self",
                    "x",
                    "y",
                    "w",
                    "bbox",
                    "k",
                    "s"
                ],
                "_reset_class": [
                    "self"
                ],
                "_set_class": [
                    "self",
                    "cls"
                ],
                "_reset_nest": [
                    "self",
                    "data",
                    "nest"
                ],
                "set_smoothing_factor": [
                    "self",
                    "s"
                ],
                "__call__": [
                    "self",
                    "x",
                    "nu"
                ],
                "get_knots": [
                    "self"
                ],
                "get_coeffs": [
                    "self"
                ],
                "get_residual": [
                    "self"
                ],
                "integral": [
                    "self",
                    "a",
                    "b"
                ],
                "derivatives": [
                    "self",
                    "x"
                ],
                "roots": [
                    "self"
                ]
            },
            "InterpolatedUnivariateSpline": {
                "__init__": [
                    "self",
                    "x",
                    "y",
                    "w",
                    "bbox",
                    "k"
                ]
            },
            "LSQUnivariateSpline": {
                "__init__": [
                    "self",
                    "x",
                    "y",
                    "t",
                    "w",
                    "bbox",
                    "k"
                ]
            },
            "_BivariateSplineBase": {
                "get_residual": [
                    "self"
                ],
                "get_knots": [
                    "self"
                ],
                "get_coeffs": [
                    "self"
                ]
            },
            "BivariateSpline": {
                "__call__": [
                    "self",
                    "x",
                    "y",
                    "mth"
                ],
                "ev": [
                    "self",
                    "xi",
                    "yi"
                ],
                "integral": [
                    "self",
                    "xa",
                    "xb",
                    "ya",
                    "yb"
                ]
            },
            "SmoothBivariateSpline": {
                "__init__": [
                    "self",
                    "x",
                    "y",
                    "z",
                    "w",
                    "bbox",
                    "kx",
                    "ky",
                    "s",
                    "eps"
                ]
            },
            "LSQBivariateSpline": {
                "__init__": [
                    "self",
                    "x",
                    "y",
                    "z",
                    "tx",
                    "ty",
                    "w",
                    "bbox",
                    "kx",
                    "ky",
                    "eps"
                ]
            },
            "RectBivariateSpline": {
                "__init__": [
                    "self",
                    "x",
                    "y",
                    "z",
                    "bbox",
                    "kx",
                    "ky",
                    "s"
                ]
            },
            "SphereBivariateSpline": {
                "__call__": [
                    "self",
                    "theta",
                    "phi"
                ],
                "ev": [
                    "self",
                    "thetai",
                    "phii"
                ]
            },
            "SmoothSphereBivariateSpline": {
                "__init__": [
                    "self",
                    "theta",
                    "phi",
                    "r",
                    "w",
                    "s",
                    "eps"
                ]
            },
            "LSQSphereBivariateSpline": {
                "__init__": [
                    "self",
                    "theta",
                    "phi",
                    "r",
                    "tt",
                    "tp",
                    "w",
                    "eps"
                ]
            },
            "RectSphereBivariateSpline": {
                "__init__": [
                    "self",
                    "u",
                    "v",
                    "r",
                    "s",
                    "pole_continuity",
                    "pole_values",
                    "pole_exact",
                    "pole_flat"
                ]
            }
        },
        "scipy.interpolate.fitpack": {
            "splprep": [
                "x",
                "w",
                "u",
                "ub",
                "ue",
                "k",
                "task",
                "s",
                "t",
                "full_output",
                "nest",
                "per",
                "quiet"
            ],
            "splrep": [
                "x",
                "y",
                "w",
                "xb",
                "xe",
                "k",
                "task",
                "s",
                "t",
                "full_output",
                "per",
                "quiet"
            ],
            "_ntlist": [
                "l"
            ],
            "splev": [
                "x",
                "tck",
                "der",
                "ext"
            ],
            "splint": [
                "a",
                "b",
                "tck",
                "full_output"
            ],
            "sproot": [
                "tck",
                "mest"
            ],
            "spalde": [
                "x",
                "tck"
            ],
            "bisplrep": [
                "x",
                "y",
                "z",
                "w",
                "xb",
                "xe",
                "yb",
                "ye",
                "kx",
                "ky",
                "task",
                "s",
                "eps",
                "tx",
                "ty",
                "full_output",
                "nxest",
                "nyest",
                "quiet"
            ],
            "bisplev": [
                "x",
                "y",
                "tck",
                "dx",
                "dy"
            ],
            "dblint": [
                "xa",
                "xb",
                "ya",
                "yb",
                "tck"
            ],
            "insert": [
                "x",
                "tck",
                "m",
                "per"
            ]
        },
        "scipy.interpolate.rbf": {
            "Rbf": {
                "_euclidean_norm": [
                    "self",
                    "x1",
                    "x2"
                ],
                "_h_multiquadric": [
                    "self",
                    "r"
                ],
                "_h_inverse_multiquadric": [
                    "self",
                    "r"
                ],
                "_h_gaussian": [
                    "self",
                    "r"
                ],
                "_h_linear": [
                    "self",
                    "r"
                ],
                "_h_cubic": [
                    "self",
                    "r"
                ],
                "_h_quintic": [
                    "self",
                    "r"
                ],
                "_h_thin_plate": [
                    "self",
                    "r"
                ],
                "_init_function": [
                    "self",
                    "r"
                ],
                "__init__": [
                    "self"
                ],
                "_call_norm": [
                    "self",
                    "x1",
                    "x2"
                ],
                "__call__": [
                    "self"
                ]
            }
        },
        "scipy.interpolate.interpolate_wrapper": {
            "atleast_1d_and_contiguous": [
                "ary",
                "dtype"
            ],
            "nearest": [
                "x",
                "y",
                "new_x"
            ],
            "linear": [
                "x",
                "y",
                "new_x"
            ],
            "logarithmic": [
                "x",
                "y",
                "new_x"
            ],
            "block_average_above": [
                "x",
                "y",
                "new_x"
            ],
            "block": [
                "x",
                "y",
                "new_x"
            ]
        },
        "scipy.interpolate.ndgriddata": {
            "griddata": [
                "points",
                "values",
                "xi",
                "method",
                "fill_value"
            ],
            "NearestNDInterpolator": {
                "__init__": [
                    "self",
                    "x",
                    "y"
                ],
                "__call__": [
                    "self"
                ]
            }
        },
        "scipy.interpolate.setupscons": {
            "configuration": [
                "parent_package",
                "top_path"
            ]
        },
        "scipy.io.idl": {
            "_align_32": [
                "f"
            ],
            "_skip_bytes": [
                "f",
                "n"
            ],
            "_read_bytes": [
                "f",
                "n"
            ],
            "_read_byte": [
                "f"
            ],
            "_read_long": [
                "f"
            ],
            "_read_int16": [
                "f"
            ],
            "_read_int32": [
                "f"
            ],
            "_read_int64": [
                "f"
            ],
            "_read_uint16": [
                "f"
            ],
            "_read_uint32": [
                "f"
            ],
            "_read_uint64": [
                "f"
            ],
            "_read_float32": [
                "f"
            ],
            "_read_float64": [
                "f"
            ],
            "_read_string": [
                "f"
            ],
            "_read_string_data": [
                "f"
            ],
            "_read_data": [
                "f",
                "dtype"
            ],
            "_read_structure": [
                "f",
                "array_desc",
                "struct_desc"
            ],
            "_read_array": [
                "f",
                "typecode",
                "array_desc"
            ],
            "_read_record": [
                "f"
            ],
            "_read_typedesc": [
                "f"
            ],
            "_read_arraydesc": [
                "f"
            ],
            "_read_structdesc": [
                "f"
            ],
            "_read_tagdesc": [
                "f"
            ],
            "_replace_heap": [
                "variable",
                "heap"
            ],
            "readsav": [
                "file_name",
                "idict",
                "python_dict",
                "uncompressed_file_name",
                "verbose"
            ],
            "Pointer": {
                "__init__": [
                    "self",
                    "index"
                ]
            },
            "ObjectPointer": {},
            "AttrDict": {
                "__init__": [
                    "self",
                    "init"
                ],
                "__getitem__": [
                    "self",
                    "name"
                ],
                "__setitem__": [
                    "self",
                    "key",
                    "value"
                ]
            }
        },
        "scipy.io.setup": {
            "configuration": [
                "parent_package",
                "top_path"
            ]
        },
        "scipy.io": {},
        "scipy.io.mmio": {
            "mminfo": [
                "source"
            ],
            "mmread": [
                "source"
            ],
            "mmwrite": [
                "target",
                "a",
                "comment",
                "field",
                "precision"
            ],
            "MMFile": {
                "rows": [
                    "self"
                ],
                "cols": [
                    "self"
                ],
                "entries": [
                    "self"
                ],
                "format": [
                    "self"
                ],
                "field": [
                    "self"
                ],
                "symmetry": [
                    "self"
                ],
                "has_symmetry": [
                    "self"
                ],
                "_validate_format": [
                    "self",
                    "format"
                ],
                "_validate_field": [
                    "self",
                    "field"
                ],
                "_validate_symmetry": [
                    "self",
                    "symmetry"
                ],
                "reader": [],
                "writer": [],
                "info": [
                    "self",
                    "source"
                ],
                "_open": [
                    "filespec",
                    "mode"
                ],
                "_get_symmetry": [
                    "a"
                ],
                "_field_template": [
                    "field",
                    "precision"
                ],
                "__init__": [
                    "self"
                ],
                "read": [
                    "self",
                    "source"
                ],
                "write": [
                    "self",
                    "target",
                    "a",
                    "comment",
                    "field",
                    "precision"
                ],
                "_init_attrs": [
                    "self"
                ],
                "_parse_header": [
                    "self",
                    "stream"
                ],
                "_parse_body": [
                    "self",
                    "stream"
                ],
                "_write": [
                    "self",
                    "stream",
                    "a",
                    "comment",
                    "field",
                    "precision"
                ]
            }
        },
        "scipy.io.netcdf": {
            "netcdf_file": {
                "__init__": [
                    "self",
                    "filename",
                    "mode",
                    "mmap",
                    "version"
                ],
                "__setattr__": [
                    "self",
                    "attr",
                    "value"
                ],
                "close": [
                    "self"
                ],
                "createDimension": [
                    "self",
                    "name",
                    "length"
                ],
                "createVariable": [
                    "self",
                    "name",
                    "type",
                    "dimensions"
                ],
                "flush": [
                    "self"
                ],
                "_write": [
                    "self"
                ],
                "_write_numrecs": [
                    "self"
                ],
                "_write_dim_array": [
                    "self"
                ],
                "_write_gatt_array": [
                    "self"
                ],
                "_write_att_array": [
                    "self",
                    "attributes"
                ],
                "_write_var_array": [
                    "self"
                ],
                "_write_var_metadata": [
                    "self",
                    "name"
                ],
                "_write_var_data": [
                    "self",
                    "name"
                ],
                "_write_values": [
                    "self",
                    "values"
                ],
                "_read": [
                    "self"
                ],
                "_read_numrecs": [
                    "self"
                ],
                "_read_dim_array": [
                    "self"
                ],
                "_read_gatt_array": [
                    "self"
                ],
                "_read_att_array": [
                    "self"
                ],
                "_read_var_array": [
                    "self"
                ],
                "_read_var": [
                    "self"
                ],
                "_read_values": [
                    "self"
                ],
                "_pack_begin": [
                    "self",
                    "begin"
                ],
                "_pack_int": [
                    "self",
                    "value"
                ],
                "_unpack_int": [
                    "self"
                ],
                "_pack_int64": [
                    "self",
                    "value"
                ],
                "_unpack_int64": [
                    "self"
                ],
                "_pack_string": [
                    "self",
                    "s"
                ],
                "_unpack_string": [
                    "self"
                ]
            },
            "netcdf_variable": {
                "__init__": [
                    "self",
                    "data",
                    "typecode",
                    "size",
                    "shape",
                    "dimensions",
                    "attributes"
                ],
                "__setattr__": [
                    "self",
                    "attr",
                    "value"
                ],
                "isrec": [
                    "self"
                ],
                "shape": [
                    "self"
                ],
                "getValue": [
                    "self"
                ],
                "assignValue": [
                    "self",
                    "value"
                ],
                "typecode": [
                    "self"
                ],
                "itemsize": [
                    "self"
                ],
                "__getitem__": [
                    "self",
                    "index"
                ],
                "__setitem__": [
                    "self",
                    "index",
                    "data"
                ]
            }
        },
        "scipy.io.wavfile": {
            "_read_fmt_chunk": [
                "fid"
            ],
            "_read_data_chunk": [
                "fid",
                "noc",
                "bits",
                "mmap"
            ],
            "_skip_unknown_chunk": [
                "fid"
            ],
            "_read_riff_chunk": [
                "fid"
            ],
            "read": [
                "file",
                "mmap"
            ],
            "write": [
                "filename",
                "rate",
                "data"
            ],
            "WavFileWarning": {}
        },
        "scipy.io.setupscons": {
            "configuration": [
                "parent_package",
                "top_path"
            ]
        },
        "scipy.io.arff.arffread": {
            "parse_type": [
                "attrtype"
            ],
            "get_nominal": [
                "attribute"
            ],
            "read_data_list": [
                "ofile"
            ],
            "get_ndata": [
                "ofile"
            ],
            "maxnomlen": [
                "atrv"
            ],
            "get_nom_val": [
                "atrv"
            ],
            "go_data": [
                "ofile"
            ],
            "tokenize_attribute": [
                "iterable",
                "attribute"
            ],
            "tokenize_multilines": [
                "iterable",
                "val"
            ],
            "tokenize_single_comma": [
                "val"
            ],
            "tokenize_single_wcomma": [
                "val"
            ],
            "read_header": [
                "ofile"
            ],
            "safe_float": [
                "x"
            ],
            "safe_nominal": [
                "value",
                "pvalue"
            ],
            "get_delim": [
                "line"
            ],
            "loadarff": [
                "f"
            ],
            "_loadarff": [
                "ofile"
            ],
            "basic_stats": [
                "data"
            ],
            "print_attribute": [
                "name",
                "tp",
                "data"
            ],
            "test_weka": [
                "filename"
            ],
            "floupi": [
                "filename"
            ],
            "ArffError": {},
            "ParseArffError": {},
            "MetaData": {
                "__init__": [
                    "self",
                    "rel",
                    "attr"
                ],
                "__repr__": [
                    "self"
                ],
                "__iter__": [
                    "self"
                ],
                "__getitem__": [
                    "self",
                    "key"
                ],
                "names": [
                    "self"
                ],
                "types": [
                    "self"
                ]
            }
        },
        "scipy.io.arff.setup": {
            "configuration": [
                "parent_package",
                "top_path"
            ]
        },
        "scipy.io.arff": {},
        "scipy.io.arff.myfunctools": {
            "partial": {
                "__init__": [
                    "self",
                    "fun"
                ],
                "__call__": [
                    "self"
                ]
            }
        },
        "scipy.io.arff.utils": {},
        "scipy.io.matlab.mio5_params": {
            "_convert_codecs": [
                "template",
                "byte_order"
            ],
            "mat_struct": {},
            "MatlabObject": {
                "__new__": [
                    "cls",
                    "input_array",
                    "classname"
                ],
                "__array_finalize__": [
                    "self",
                    "obj"
                ]
            },
            "MatlabFunction": {
                "__new__": [
                    "cls",
                    "input_array"
                ]
            },
            "MatlabOpaque": {
                "__new__": [
                    "cls",
                    "input_array"
                ]
            }
        },
        "scipy.io.matlab.mio4": {
            "arr_to_2d": [
                "arr",
                "oned_as"
            ],
            "VarHeader4": {
                "__init__": [
                    "self",
                    "name",
                    "dtype",
                    "mclass",
                    "dims",
                    "is_complex"
                ]
            },
            "VarReader4": {
                "__init__": [
                    "self",
                    "file_reader"
                ],
                "read_header": [
                    "self"
                ],
                "array_from_header": [
                    "self",
                    "hdr",
                    "process"
                ],
                "read_sub_array": [
                    "self",
                    "hdr",
                    "copy"
                ],
                "read_full_array": [
                    "self",
                    "hdr"
                ],
                "read_char_array": [
                    "self",
                    "hdr"
                ],
                "read_sparse_array": [
                    "self",
                    "hdr"
                ],
                "shape_from_header": [
                    "self",
                    "hdr"
                ]
            },
            "MatFile4Reader": {
                "__init__": [
                    "self",
                    "mat_stream"
                ],
                "guess_byte_order": [
                    "self"
                ],
                "initialize_read": [
                    "self"
                ],
                "read_var_header": [
                    "self"
                ],
                "read_var_array": [
                    "self",
                    "header",
                    "process"
                ],
                "get_variables": [
                    "self",
                    "variable_names"
                ],
                "list_variables": [
                    "self"
                ]
            },
            "VarWriter4": {
                "__init__": [
                    "self",
                    "file_writer"
                ],
                "write_bytes": [
                    "self",
                    "arr"
                ],
                "write_string": [
                    "self",
                    "s"
                ],
                "write_header": [
                    "self",
                    "name",
                    "shape",
                    "P",
                    "T",
                    "imagf"
                ],
                "write": [
                    "self",
                    "arr",
                    "name"
                ],
                "write_numeric": [
                    "self",
                    "arr",
                    "name"
                ],
                "write_char": [
                    "self",
                    "arr",
                    "name"
                ],
                "write_sparse": [
                    "self",
                    "arr",
                    "name"
                ]
            },
            "MatFile4Writer": {
                "__init__": [
                    "self",
                    "file_stream",
                    "oned_as"
                ],
                "put_variables": [
                    "self",
                    "mdict",
                    "write_header"
                ]
            }
        },
        "scipy.io.matlab.mio5": {
            "varmats_from_mat": [
                "file_obj"
            ],
            "to_writeable": [
                "source"
            ],
            "MatFile5Reader": {
                "__init__": [
                    "self",
                    "mat_stream",
                    "byte_order",
                    "mat_dtype",
                    "squeeze_me",
                    "chars_as_strings",
                    "matlab_compatible",
                    "struct_as_record",
                    "uint16_codec"
                ],
                "guess_byte_order": [
                    "self"
                ],
                "read_file_header": [
                    "self"
                ],
                "initialize_read": [
                    "self"
                ],
                "read_var_header": [
                    "self"
                ],
                "read_var_array": [
                    "self",
                    "header",
                    "process"
                ],
                "get_variables": [
                    "self",
                    "variable_names"
                ],
                "list_variables": [
                    "self"
                ]
            },
            "VarWriter5": {
                "__init__": [
                    "self",
                    "file_writer"
                ],
                "write_bytes": [
                    "self",
                    "arr"
                ],
                "write_string": [
                    "self",
                    "s"
                ],
                "write_element": [
                    "self",
                    "arr",
                    "mdtype"
                ],
                "write_smalldata_element": [
                    "self",
                    "arr",
                    "mdtype",
                    "byte_count"
                ],
                "write_regular_element": [
                    "self",
                    "arr",
                    "mdtype",
                    "byte_count"
                ],
                "write_header": [
                    "self",
                    "shape",
                    "mclass",
                    "is_complex",
                    "is_logical",
                    "nzmax"
                ],
                "update_matrix_tag": [
                    "self",
                    "start_pos"
                ],
                "write_top": [
                    "self",
                    "arr",
                    "name",
                    "is_global"
                ],
                "write": [
                    "self",
                    "arr"
                ],
                "write_numeric": [
                    "self",
                    "arr"
                ],
                "write_char": [
                    "self",
                    "arr",
                    "codec"
                ],
                "write_sparse": [
                    "self",
                    "arr"
                ],
                "write_cells": [
                    "self",
                    "arr"
                ],
                "write_struct": [
                    "self",
                    "arr"
                ],
                "_write_items": [
                    "self",
                    "arr"
                ],
                "write_object": [
                    "self",
                    "arr"
                ]
            },
            "MatFile5Writer": {
                "__init__": [
                    "self",
                    "file_stream",
                    "do_compression",
                    "unicode_strings",
                    "global_vars",
                    "long_field_names",
                    "oned_as"
                ],
                "write_file_header": [
                    "self"
                ],
                "put_variables": [
                    "self",
                    "mdict",
                    "write_header"
                ]
            }
        },
        "scipy.io.matlab.setup": {
            "configuration": [
                "parent_package",
                "top_path"
            ]
        },
        "scipy.io.matlab": {},
        "scipy.io.matlab.byteordercodes": {
            "to_numpy_code": [
                "code"
            ]
        },
        "scipy.io.matlab.mio": {
            "find_mat_file": [
                "file_name",
                "appendmat"
            ],
            "_open_file": [
                "file_like",
                "appendmat"
            ],
            "mat_reader_factory": [
                "file_name",
                "appendmat"
            ],
            "loadmat": [
                "file_name",
                "mdict",
                "appendmat"
            ],
            "savemat": [
                "file_name",
                "mdict",
                "appendmat",
                "format",
                "long_field_names",
                "do_compression",
                "oned_as"
            ],
            "whosmat": [
                "file_name",
                "appendmat"
            ]
        },
        "scipy.io.matlab.setupscons": {
            "configuration": [
                "parent_package",
                "top_path"
            ]
        },
        "scipy.io.matlab.miobase": {
            "convert_dtypes": [
                "dtype_template",
                "order_code"
            ],
            "read_dtype": [
                "mat_stream",
                "a_dtype"
            ],
            "get_matfile_version": [
                "fileobj"
            ],
            "matdims": [
                "arr",
                "oned_as"
            ],
            "arr_dtype_number": [
                "arr",
                "num"
            ],
            "arr_to_chars": [
                "arr"
            ],
            "MatReadError": {},
            "MatWriteError": {},
            "MatReadWarning": {},
            "MatVarReader": {
                "__init__": [
                    "self",
                    "file_reader"
                ],
                "read_header": [
                    "self"
                ],
                "array_from_header": [
                    "self",
                    "header"
                ]
            },
            "MatFileReader": {
                "__init__": [
                    "self",
                    "mat_stream",
                    "byte_order",
                    "mat_dtype",
                    "squeeze_me",
                    "chars_as_strings",
                    "matlab_compatible",
                    "struct_as_record"
                ],
                "set_matlab_compatible": [
                    "self"
                ],
                "guess_byte_order": [
                    "self"
                ],
                "end_of_stream": [
                    "self"
                ]
            }
        },
        "scipy.io.harwell_boeing.hb": {
            "_nbytes_full": [
                "fmt",
                "nlines"
            ],
            "_expect_int": [
                "value",
                "msg"
            ],
            "_read_hb_data": [
                "content",
                "header"
            ],
            "_write_data": [
                "m",
                "fid",
                "header"
            ],
            "hb_read": [
                "file"
            ],
            "hb_write": [
                "file",
                "m",
                "hb_info"
            ],
            "MalformedHeader": {},
            "LineOverflow": {},
            "HBInfo": {
                "from_data": [
                    "cls",
                    "m",
                    "title",
                    "key",
                    "mxtype",
                    "fmt"
                ],
                "from_file": [
                    "cls",
                    "fid"
                ],
                "__init__": [
                    "self",
                    "title",
                    "key",
                    "total_nlines",
                    "pointer_nlines",
                    "indices_nlines",
                    "values_nlines",
                    "mxtype",
                    "nrows",
                    "ncols",
                    "nnon_zeros",
                    "pointer_format_str",
                    "indices_format_str",
                    "values_format_str",
                    "right_hand_sides_nlines",
                    "nelementals"
                ],
                "dump": [
                    "self"
                ]
            },
            "HBMatrixType": {
                "from_fortran": [
                    "cls",
                    "fmt"
                ],
                "__init__": [
                    "self",
                    "value_type",
                    "structure",
                    "storage"
                ],
                "fortran_format": [
                    "self"
                ],
                "__repr__": [
                    "self"
                ]
            },
            "HBFile": {
                "__init__": [
                    "self",
                    "file",
                    "hb_info"
                ],
                "title": [
                    "self"
                ],
                "key": [
                    "self"
                ],
                "type": [
                    "self"
                ],
                "structure": [
                    "self"
                ],
                "storage": [
                    "self"
                ],
                "read_matrix": [
                    "self"
                ],
                "write_matrix": [
                    "self",
                    "m"
                ]
            }
        },
        "scipy.io.harwell_boeing.setup": {
            "configuration": [
                "parent_package",
                "top_path"
            ]
        },
        "scipy.io.harwell_boeing": {},
        "scipy.io.harwell_boeing._fortran_format_parser": {
            "number_digits": [
                "n"
            ],
            "BadFortranFormat": {},
            "IntFormat": {
                "from_number": [
                    "cls",
                    "n",
                    "min"
                ],
                "__init__": [
                    "self",
                    "width",
                    "min",
                    "repeat"
                ],
                "__repr__": [
                    "self"
                ],
                "fortran_format": [
                    "self"
                ],
                "python_format": [
                    "self"
                ]
            },
            "ExpFormat": {
                "from_number": [
                    "cls",
                    "n",
                    "min"
                ],
                "__init__": [
                    "self",
                    "width",
                    "significand",
                    "min",
                    "repeat"
                ],
                "__repr__": [
                    "self"
                ],
                "fortran_format": [
                    "self"
                ],
                "python_format": [
                    "self"
                ]
            },
            "Token": {
                "__init__": [
                    "self",
                    "type",
                    "value",
                    "pos"
                ],
                "__str__": [
                    "self"
                ],
                "__repr__": [
                    "self"
                ]
            },
            "Tokenizer": {
                "__init__": [
                    "self"
                ],
                "input": [
                    "self",
                    "s"
                ],
                "next_token": [
                    "self"
                ]
            },
            "FortranFormatParser": {
                "__init__": [
                    "self"
                ],
                "parse": [
                    "self",
                    "s"
                ],
                "_get_min": [
                    "self",
                    "tokens"
                ],
                "_expect": [
                    "self",
                    "token",
                    "tp"
                ],
                "_parse_format": [
                    "self",
                    "tokens"
                ],
                "_next": [
                    "self",
                    "tokens",
                    "tp"
                ]
            }
        },
        "scipy.io.harwell_boeing.setupscons": {
            "configuration": [
                "parent_package",
                "top_path"
            ]
        },
        "scipy.special.setup": {
            "configuration": [
                "parent_package",
                "top_path"
            ]
        },
        "scipy.special": {},
        "scipy.special.add_newdocs": {
            "get": [
                "name"
            ],
            "add_newdoc": [
                "place",
                "name",
                "doc"
            ]
        },
        "scipy.special.spfun_stats": {
            "multigammaln": [
                "a",
                "d"
            ]
        },
        "scipy.special.basic": {
            "errprint": [
                "inflag"
            ],
            "sinc": [
                "x"
            ],
            "diric": [
                "x",
                "n"
            ],
            "jnjnp_zeros": [
                "nt"
            ],
            "jnyn_zeros": [
                "n",
                "nt"
            ],
            "jn_zeros": [
                "n",
                "nt"
            ],
            "jnp_zeros": [
                "n",
                "nt"
            ],
            "yn_zeros": [
                "n",
                "nt"
            ],
            "ynp_zeros": [
                "n",
                "nt"
            ],
            "y0_zeros": [
                "nt",
                "complex"
            ],
            "y1_zeros": [
                "nt",
                "complex"
            ],
            "y1p_zeros": [
                "nt",
                "complex"
            ],
            "bessel_diff_formula": [
                "v",
                "z",
                "n",
                "L",
                "phase"
            ],
            "jvp": [
                "v",
                "z",
                "n"
            ],
            "yvp": [
                "v",
                "z",
                "n"
            ],
            "kvp": [
                "v",
                "z",
                "n"
            ],
            "ivp": [
                "v",
                "z",
                "n"
            ],
            "h1vp": [
                "v",
                "z",
                "n"
            ],
            "h2vp": [
                "v",
                "z",
                "n"
            ],
            "sph_jn": [
                "n",
                "z"
            ],
            "sph_yn": [
                "n",
                "z"
            ],
            "sph_jnyn": [
                "n",
                "z"
            ],
            "sph_in": [
                "n",
                "z"
            ],
            "sph_kn": [
                "n",
                "z"
            ],
            "sph_inkn": [
                "n",
                "z"
            ],
            "riccati_jn": [
                "n",
                "x"
            ],
            "riccati_yn": [
                "n",
                "x"
            ],
            "_sph_harmonic": [
                "m",
                "n",
                "theta",
                "phi"
            ],
            "erfinv": [
                "y"
            ],
            "erfcinv": [
                "y"
            ],
            "erf_zeros": [
                "nt"
            ],
            "fresnelc_zeros": [
                "nt"
            ],
            "fresnels_zeros": [
                "nt"
            ],
            "fresnel_zeros": [
                "nt"
            ],
            "hyp0f1": [
                "v",
                "z"
            ],
            "assoc_laguerre": [
                "x",
                "n",
                "k"
            ],
            "polygamma": [
                "n",
                "x"
            ],
            "mathieu_even_coef": [
                "m",
                "q"
            ],
            "mathieu_odd_coef": [
                "m",
                "q"
            ],
            "lpmn": [
                "m",
                "n",
                "z"
            ],
            "lqmn": [
                "m",
                "n",
                "z"
            ],
            "bernoulli": [
                "n"
            ],
            "euler": [
                "n"
            ],
            "lpn": [
                "n",
                "z"
            ],
            "lqn": [
                "n",
                "z"
            ],
            "ai_zeros": [
                "nt"
            ],
            "bi_zeros": [
                "nt"
            ],
            "lmbda": [
                "v",
                "x"
            ],
            "pbdv_seq": [
                "v",
                "x"
            ],
            "pbvv_seq": [
                "v",
                "x"
            ],
            "pbdn_seq": [
                "n",
                "z"
            ],
            "ber_zeros": [
                "nt"
            ],
            "bei_zeros": [
                "nt"
            ],
            "ker_zeros": [
                "nt"
            ],
            "kei_zeros": [
                "nt"
            ],
            "berp_zeros": [
                "nt"
            ],
            "beip_zeros": [
                "nt"
            ],
            "kerp_zeros": [
                "nt"
            ],
            "keip_zeros": [
                "nt"
            ],
            "kelvin_zeros": [
                "nt"
            ],
            "pro_cv_seq": [
                "m",
                "n",
                "c"
            ],
            "obl_cv_seq": [
                "m",
                "n",
                "c"
            ],
            "ellipk": [
                "m"
            ],
            "agm": [
                "a",
                "b"
            ],
            "SpecialFunctionWarning": {}
        },
        "scipy.special.orthogonal": {
            "poch": [
                "z",
                "m"
            ],
            "gen_roots_and_weights": [
                "n",
                "an_func",
                "sqrt_bn_func",
                "mu"
            ],
            "j_roots": [
                "n",
                "alpha",
                "beta",
                "mu"
            ],
            "jacobi": [
                "n",
                "alpha",
                "beta",
                "monic"
            ],
            "js_roots": [
                "n",
                "p1",
                "q1",
                "mu"
            ],
            "sh_jacobi": [
                "n",
                "p",
                "q",
                "monic"
            ],
            "la_roots": [
                "n",
                "alpha",
                "mu"
            ],
            "genlaguerre": [
                "n",
                "alpha",
                "monic"
            ],
            "l_roots": [
                "n",
                "mu"
            ],
            "laguerre": [
                "n",
                "monic"
            ],
            "h_roots": [
                "n",
                "mu"
            ],
            "hermite": [
                "n",
                "monic"
            ],
            "he_roots": [
                "n",
                "mu"
            ],
            "hermitenorm": [
                "n",
                "monic"
            ],
            "cg_roots": [
                "n",
                "alpha",
                "mu"
            ],
            "gegenbauer": [
                "n",
                "alpha",
                "monic"
            ],
            "t_roots": [
                "n",
                "mu"
            ],
            "chebyt": [
                "n",
                "monic"
            ],
            "u_roots": [
                "n",
                "mu"
            ],
            "chebyu": [
                "n",
                "monic"
            ],
            "c_roots": [
                "n",
                "mu"
            ],
            "chebyc": [
                "n",
                "monic"
            ],
            "s_roots": [
                "n",
                "mu"
            ],
            "chebys": [
                "n",
                "monic"
            ],
            "ts_roots": [
                "n",
                "mu"
            ],
            "sh_chebyt": [
                "n",
                "monic"
            ],
            "us_roots": [
                "n",
                "mu"
            ],
            "sh_chebyu": [
                "n",
                "monic"
            ],
            "p_roots": [
                "n",
                "mu"
            ],
            "legendre": [
                "n",
                "monic"
            ],
            "ps_roots": [
                "n",
                "mu"
            ],
            "sh_legendre": [
                "n",
                "monic"
            ],
            "orthopoly1d": {
                "__init__": [
                    "self",
                    "roots",
                    "weights",
                    "hn",
                    "kn",
                    "wfunc",
                    "limits",
                    "monic",
                    "eval_func"
                ],
                "__call__": [
                    "self",
                    "v"
                ],
                "_scale": [
                    "self",
                    "p"
                ]
            }
        },
        "scipy.special.generate_ufuncs": {
            "cast_order": [
                "c"
            ],
            "generate_loop": [
                "func_inputs",
                "func_outputs",
                "func_retval",
                "ufunc_inputs",
                "ufunc_outputs"
            ],
            "iter_variants": [
                "inputs",
                "outputs"
            ],
            "generate": [
                "filename",
                "ufunc_str",
                "extra_code"
            ],
            "unique": [
                "lst"
            ],
            "main": [],
            "Ufunc": {
                "__init__": [
                    "self",
                    "name",
                    "signatures"
                ],
                "_parse_signatures": [
                    "self",
                    "sigs"
                ],
                "_parse_signature": [
                    "self",
                    "sig"
                ],
                "_get_signatures_and_loops": [
                    "self",
                    "all_loops"
                ],
                "cython_func_name": [
                    "self",
                    "c_name",
                    "specialized",
                    "prefix"
                ],
                "get_prototypes": [
                    "self"
                ],
                "generate": [
                    "self",
                    "all_loops"
                ]
            }
        },
        "scipy.special.lambertw": {
            "lambertw": [
                "z",
                "k",
                "tol"
            ]
        },
        "scipy.special._testutils": {
            "with_special_errors": [
                "func"
            ],
            "assert_tol_equal": [
                "a",
                "b",
                "rtol",
                "atol",
                "err_msg",
                "verbose"
            ],
            "assert_func_equal": [
                "func",
                "results",
                "points",
                "rtol",
                "atol",
                "param_filter",
                "knownfailure",
                "vectorized",
                "dtype"
            ],
            "FuncData": {
                "__init__": [
                    "self",
                    "func",
                    "data",
                    "param_columns",
                    "result_columns",
                    "rtol",
                    "atol",
                    "param_filter",
                    "knownfailure",
                    "dataname"
                ],
                "get_tolerances": [
                    "self",
                    "dtype"
                ],
                "check": [
                    "self",
                    "data",
                    "dtype"
                ],
                "__repr__": [
                    "self"
                ]
            }
        },
        "scipy.special.setupscons": {
            "configuration": [
                "parent_package",
                "top_path"
            ]
        },
        "scipy.linalg.misc": {
            "norm": [
                "a",
                "ord"
            ],
            "_datacopied": [
                "arr",
                "original"
            ]
        },
        "scipy.linalg.matfuncs": {
            "expm": [
                "A",
                "q"
            ],
            "expm2": [
                "A"
            ],
            "expm3": [
                "A",
                "q"
            ],
            "toreal": [
                "arr",
                "tol"
            ],
            "cosm": [
                "A"
            ],
            "sinm": [
                "A"
            ],
            "tanm": [
                "A"
            ],
            "coshm": [
                "A"
            ],
            "sinhm": [
                "A"
            ],
            "tanhm": [
                "A"
            ],
            "funm": [
                "A",
                "func",
                "disp"
            ],
            "logm": [
                "A",
                "disp"
            ],
            "signm": [
                "a",
                "disp"
            ],
            "sqrtm": [
                "A",
                "disp"
            ]
        },
        "scipy.linalg.decomp_schur": {
            "schur": [
                "a",
                "output",
                "lwork",
                "overwrite_a",
                "sort",
                "check_finite"
            ],
            "_commonType": [],
            "_castCopy": [
                "type"
            ],
            "rsf2csf": [
                "T",
                "Z",
                "check_finite"
            ]
        },
        "scipy.linalg.decomp": {
            "_make_complex_eigvecs": [
                "w",
                "vin",
                "dtype"
            ],
            "_geneig": [
                "a1",
                "b1",
                "left",
                "right",
                "overwrite_a",
                "overwrite_b"
            ],
            "eig": [
                "a",
                "b",
                "left",
                "right",
                "overwrite_a",
                "overwrite_b",
                "check_finite"
            ],
            "eigh": [
                "a",
                "b",
                "lower",
                "eigvals_only",
                "overwrite_a",
                "overwrite_b",
                "turbo",
                "eigvals",
                "type",
                "check_finite"
            ],
            "eig_banded": [
                "a_band",
                "lower",
                "eigvals_only",
                "overwrite_a_band",
                "select",
                "select_range",
                "max_ev",
                "check_finite"
            ],
            "eigvals": [
                "a",
                "b",
                "overwrite_a",
                "check_finite"
            ],
            "eigvalsh": [
                "a",
                "b",
                "lower",
                "overwrite_a",
                "overwrite_b",
                "turbo",
                "eigvals",
                "type",
                "check_finite"
            ],
            "eigvals_banded": [
                "a_band",
                "lower",
                "overwrite_a_band",
                "select",
                "select_range",
                "check_finite"
            ],
            "hessenberg": [
                "a",
                "calc_q",
                "overwrite_a",
                "check_finite"
            ]
        },
        "scipy.linalg._solvers": {
            "solve_sylvester": [
                "a",
                "b",
                "q"
            ],
            "solve_lyapunov": [
                "a",
                "q"
            ],
            "solve_discrete_lyapunov": [
                "a",
                "q"
            ],
            "solve_continuous_are": [
                "a",
                "b",
                "q",
                "r"
            ],
            "solve_discrete_are": [
                "a",
                "b",
                "q",
                "r"
            ]
        },
        "scipy.linalg.decomp_qr": {
            "safecall": [
                "f",
                "name"
            ],
            "qr": [
                "a",
                "overwrite_a",
                "lwork",
                "mode",
                "pivoting",
                "check_finite"
            ],
            "qr_multiply": [
                "a",
                "c",
                "mode",
                "pivoting",
                "conjugate",
                "overwrite_a",
                "overwrite_c"
            ],
            "qr_old": [
                "a",
                "overwrite_a",
                "lwork",
                "check_finite"
            ],
            "rq": [
                "a",
                "overwrite_a",
                "lwork",
                "mode",
                "check_finite"
            ]
        },
        "scipy.linalg._decomp_qz": {
            "_select_function": [
                "sort",
                "typ"
            ],
            "qz": [
                "A",
                "B",
                "output",
                "lwork",
                "sort",
                "overwrite_a",
                "overwrite_b",
                "check_finite"
            ]
        },
        "scipy.linalg.decomp_svd": {
            "svd": [
                "a",
                "full_matrices",
                "compute_uv",
                "overwrite_a",
                "check_finite"
            ],
            "svdvals": [
                "a",
                "overwrite_a",
                "check_finite"
            ],
            "diagsvd": [
                "s",
                "M",
                "N"
            ],
            "orth": [
                "A"
            ]
        },
        "scipy.linalg.setup": {
            "configuration": [
                "parent_package",
                "top_path"
            ]
        },
        "scipy.linalg.decomp_cholesky": {
            "_cholesky": [
                "a",
                "lower",
                "overwrite_a",
                "clean",
                "check_finite"
            ],
            "cholesky": [
                "a",
                "lower",
                "overwrite_a",
                "check_finite"
            ],
            "cho_factor": [
                "a",
                "lower",
                "overwrite_a",
                "check_finite"
            ],
            "cho_solve": [
                "c_and_lower",
                "b",
                "overwrite_b",
                "check_finite"
            ],
            "cholesky_banded": [
                "ab",
                "overwrite_ab",
                "lower",
                "check_finite"
            ],
            "cho_solve_banded": [
                "cb_and_lower",
                "b",
                "overwrite_b",
                "check_finite"
            ]
        },
        "scipy.linalg": {},
        "scipy.linalg.basic": {
            "solve": [
                "a",
                "b",
                "sym_pos",
                "lower",
                "overwrite_a",
                "overwrite_b",
                "debug",
                "check_finite"
            ],
            "solve_triangular": [
                "a",
                "b",
                "trans",
                "lower",
                "unit_diagonal",
                "overwrite_b",
                "debug",
                "check_finite"
            ],
            "solve_banded": [
                "l_and_u",
                "ab",
                "b",
                "overwrite_ab",
                "overwrite_b",
                "debug",
                "check_finite"
            ],
            "solveh_banded": [
                "ab",
                "b",
                "overwrite_ab",
                "overwrite_b",
                "lower",
                "check_finite"
            ],
            "inv": [
                "a",
                "overwrite_a",
                "check_finite"
            ],
            "det": [
                "a",
                "overwrite_a",
                "check_finite"
            ],
            "lstsq": [
                "a",
                "b",
                "cond",
                "overwrite_a",
                "overwrite_b",
                "check_finite"
            ],
            "pinv": [
                "a",
                "cond",
                "rcond",
                "return_rank",
                "check_finite"
            ],
            "pinv2": [
                "a",
                "cond",
                "rcond",
                "return_rank",
                "check_finite"
            ],
            "pinvh": [
                "a",
                "cond",
                "rcond",
                "lower",
                "return_rank",
                "check_finite"
            ]
        },
        "scipy.linalg.linalg_version": {},
        "scipy.linalg.blas": {
            "find_best_blas_type": [
                "arrays",
                "dtype"
            ],
            "_get_funcs": [
                "names",
                "arrays",
                "dtype",
                "lib_name",
                "fmodule",
                "cmodule",
                "fmodule_name",
                "cmodule_name",
                "alias"
            ],
            "get_blas_funcs": [
                "names",
                "arrays",
                "dtype"
            ]
        },
        "scipy.linalg.flinalg": {
            "has_column_major_storage": [
                "arr"
            ],
            "get_flinalg_funcs": [
                "names",
                "arrays",
                "debug"
            ]
        },
        "scipy.linalg.clapack": {
            "_deprecate": []
        },
        "scipy.linalg.special_matrices": {
            "tri": [
                "N",
                "M",
                "k",
                "dtype"
            ],
            "tril": [
                "m",
                "k"
            ],
            "triu": [
                "m",
                "k"
            ],
            "toeplitz": [
                "c",
                "r"
            ],
            "circulant": [
                "c"
            ],
            "hankel": [
                "c",
                "r"
            ],
            "hadamard": [
                "n",
                "dtype"
            ],
            "leslie": [
                "f",
                "s"
            ],
            "all_mat": [],
            "kron": [
                "a",
                "b"
            ],
            "block_diag": [],
            "companion": [
                "a"
            ],
            "hilbert": [
                "n"
            ],
            "invhilbert": [
                "n",
                "exact"
            ],
            "pascal": [
                "n",
                "kind",
                "exact"
            ]
        },
        "scipy.linalg.fblas": {
            "_deprecate": []
        },
        "scipy.linalg.flapack": {
            "_deprecate": []
        },
        "scipy.linalg.cblas": {
            "_deprecate": []
        },
        "scipy.linalg._testutils": {
            "_get_array": [
                "shape",
                "dtype"
            ],
            "_id": [
                "x"
            ],
            "assert_no_overwrite": [
                "call",
                "shapes",
                "dtypes"
            ],
            "_FakeMatrix": {
                "__init__": [
                    "self",
                    "data"
                ]
            },
            "_FakeMatrix2": {
                "__init__": [
                    "self",
                    "data"
                ],
                "__array__": [
                    "self"
                ]
            }
        },
        "scipy.linalg.lapack": {
            "get_lapack_funcs": [
                "names",
                "arrays",
                "dtype"
            ]
        },
        "scipy.linalg.setupscons": {
            "configuration": [
                "parent_package",
                "top_path"
            ]
        },
        "scipy.linalg.decomp_lu": {
            "lu_factor": [
                "a",
                "overwrite_a",
                "check_finite"
            ],
            "lu_solve": [
                "lu_and_piv",
                "b",
                "trans",
                "overwrite_b",
                "check_finite"
            ],
            "lu": [
                "a",
                "permute_l",
                "overwrite_a",
                "check_finite"
            ]
        },
        "scipy.lib.six": {
            "_add_doc": [
                "func",
                "doc"
            ],
            "_import_module": [
                "name"
            ],
            "add_move": [
                "move"
            ],
            "remove_move": [
                "name"
            ],
            "iterkeys": [
                "d"
            ],
            "itervalues": [
                "d"
            ],
            "iteritems": [
                "d"
            ],
            "with_metaclass": [
                "meta",
                "base"
            ],
            "_LazyDescr": {
                "__init__": [
                    "self",
                    "name"
                ],
                "__get__": [
                    "self",
                    "obj",
                    "tp"
                ]
            },
            "MovedModule": {
                "__init__": [
                    "self",
                    "name",
                    "old",
                    "new"
                ],
                "_resolve": [
                    "self"
                ]
            },
            "MovedAttribute": {
                "__init__": [
                    "self",
                    "name",
                    "old_mod",
                    "new_mod",
                    "old_attr",
                    "new_attr"
                ],
                "_resolve": [
                    "self"
                ]
            },
            "_MovedItems": {}
        },
        "scipy.lib._util": {
            "DeprecatedImport": {
                "__init__": [
                    "self",
                    "old_module_name",
                    "new_module_name"
                ],
                "__dir__": [
                    "self"
                ],
                "__getattr__": [
                    "self",
                    "name"
                ]
            }
        },
        "scipy.lib.setup": {
            "configuration": [
                "parent_package",
                "top_path"
            ]
        },
        "scipy.lib": {},
        "scipy.lib.decorator": {
            "decorator": [
                "caller",
                "func"
            ],
            "FunctionMaker": {
                "__init__": [
                    "self",
                    "func",
                    "name",
                    "signature",
                    "defaults",
                    "doc",
                    "module",
                    "funcdict"
                ],
                "update": [
                    "self",
                    "func"
                ],
                "make": [
                    "self",
                    "src_templ",
                    "evaldict",
                    "addsource"
                ],
                "create": [
                    "cls",
                    "obj",
                    "body",
                    "evaldict",
                    "defaults",
                    "doc",
                    "module",
                    "addsource"
                ]
            }
        },
        "scipy.lib.setupscons": {
            "configuration": [
                "parent_package",
                "top_path"
            ]
        },
        "scipy.lib.lapack.setup": {
            "configuration": [
                "parent_package",
                "top_path"
            ]
        },
        "scipy.lib.lapack": {
            "_deprecated": [],
            "get_lapack_funcs": [
                "names",
                "arrays",
                "debug",
                "force_clapack"
            ]
        },
        "scipy.lib.lapack.scons_support": {
            "generate_interface_emitter": [
                "target",
                "source",
                "env"
            ],
            "do_generate_fake_interface": [
                "target",
                "source",
                "env"
            ]
        },
        "scipy.lib.lapack.setupscons": {
            "configuration": [
                "parent_package",
                "top_path"
            ]
        },
        "scipy.lib.blas.setup": {
            "needs_cblas_wrapper": [
                "info"
            ],
            "configuration": [
                "parent_package",
                "top_path"
            ]
        },
        "scipy.lib.blas": {
            "_deprecated": [],
            "get_blas_funcs": [
                "names",
                "arrays",
                "debug"
            ]
        },
        "scipy.lib.blas.scons_support": {
            "generate_interface_emitter": [
                "target",
                "source",
                "env"
            ],
            "do_generate_fake_interface": [
                "target",
                "source",
                "env"
            ]
        },
        "scipy.lib.blas.setupscons": {
            "configuration": [
                "parent_package",
                "top_path"
            ]
        },
        "scipy.sparse.csc": {
            "isspmatrix_csc": [
                "x"
            ],
            "csc_matrix": {
                "transpose": [
                    "self",
                    "copy"
                ],
                "__iter__": [
                    "self"
                ],
                "tocsc": [
                    "self",
                    "copy"
                ],
                "tocsr": [
                    "self"
                ],
                "__getitem__": [
                    "self",
                    "key"
                ],
                "getrow": [
                    "self",
                    "i"
                ],
                "getcol": [
                    "self",
                    "i"
                ],
                "_swap": [
                    "self",
                    "x"
                ]
            }
        },
        "scipy.sparse.data": {
            "_data_matrix": {
                "__init__": [
                    "self"
                ],
                "_get_dtype": [
                    "self"
                ],
                "_set_dtype": [
                    "self",
                    "newtype"
                ],
                "__abs__": [
                    "self"
                ],
                "_real": [
                    "self"
                ],
                "_imag": [
                    "self"
                ],
                "__neg__": [
                    "self"
                ],
                "__imul__": [
                    "self",
                    "other"
                ],
                "__itruediv__": [
                    "self",
                    "other"
                ],
                "astype": [
                    "self",
                    "t"
                ],
                "conj": [
                    "self"
                ],
                "copy": [
                    "self"
                ],
                "_mul_scalar": [
                    "self",
                    "other"
                ]
            }
        },
        "scipy.sparse.extract": {
            "find": [
                "A"
            ],
            "tril": [
                "A",
                "k",
                "format"
            ],
            "triu": [
                "A",
                "k",
                "format"
            ]
        },
        "scipy.sparse.spfuncs": {
            "extract_diagonal": [
                "A"
            ],
            "estimate_blocksize": [
                "A",
                "efficiency"
            ],
            "count_blocks": [
                "A",
                "blocksize"
            ]
        },
        "scipy.sparse.setup": {
            "configuration": [
                "parent_package",
                "top_path"
            ]
        },
        "scipy.sparse": {},
        "scipy.sparse.csr": {
            "isspmatrix_csr": [
                "x"
            ],
            "csr_matrix": {
                "transpose": [
                    "self",
                    "copy"
                ],
                "tolil": [
                    "self"
                ],
                "tocsr": [
                    "self",
                    "copy"
                ],
                "tocsc": [
                    "self"
                ],
                "tobsr": [
                    "self",
                    "blocksize",
                    "copy"
                ],
                "_swap": [
                    "self",
                    "x"
                ],
                "__getitem__": [
                    "self",
                    "key"
                ],
                "_get_single_element": [
                    "self",
                    "row",
                    "col"
                ],
                "getrow": [
                    "self",
                    "i"
                ],
                "getcol": [
                    "self",
                    "i"
                ],
                "_get_row_slice": [
                    "self",
                    "i",
                    "cslice"
                ],
                "_get_submatrix": [
                    "self",
                    "row_slice",
                    "col_slice"
                ]
            }
        },
        "scipy.sparse.lil": {
            "isspmatrix_lil": [
                "x"
            ],
            "lil_matrix": {
                "__init__": [
                    "self",
                    "arg1",
                    "shape",
                    "dtype",
                    "copy"
                ],
                "__iadd__": [
                    "self",
                    "other"
                ],
                "__isub__": [
                    "self",
                    "other"
                ],
                "__imul__": [
                    "self",
                    "other"
                ],
                "__itruediv__": [
                    "self",
                    "other"
                ],
                "getnnz": [
                    "self"
                ],
                "__str__": [
                    "self"
                ],
                "getrowview": [
                    "self",
                    "i"
                ],
                "getrow": [
                    "self",
                    "i"
                ],
                "_get1": [
                    "self",
                    "i",
                    "j"
                ],
                "_slicetoseq": [
                    "self",
                    "j",
                    "shape"
                ],
                "__getitem__": [
                    "self",
                    "index"
                ],
                "_insertat2": [
                    "self",
                    "row",
                    "data",
                    "j",
                    "x"
                ],
                "_setitem_setrow": [
                    "self",
                    "row",
                    "data",
                    "j",
                    "xrow",
                    "xdata",
                    "xcols"
                ],
                "__setitem__": [
                    "self",
                    "index",
                    "x"
                ],
                "_mul_scalar": [
                    "self",
                    "other"
                ],
                "__truediv__": [
                    "self",
                    "other"
                ],
                "copy": [
                    "self"
                ],
                "reshape": [
                    "self",
                    "shape"
                ],
                "toarray": [
                    "self",
                    "order",
                    "out"
                ],
                "transpose": [
                    "self"
                ],
                "tolil": [
                    "self",
                    "copy"
                ],
                "tocsr": [
                    "self"
                ],
                "tocsc": [
                    "self"
                ]
            }
        },
        "scipy.sparse.construct": {
            "spdiags": [
                "data",
                "diags",
                "m",
                "n",
                "format"
            ],
            "diags": [
                "diagonals",
                "offsets",
                "shape",
                "format",
                "dtype"
            ],
            "identity": [
                "n",
                "dtype",
                "format"
            ],
            "eye": [
                "m",
                "n",
                "k",
                "dtype",
                "format"
            ],
            "kron": [
                "A",
                "B",
                "format"
            ],
            "kronsum": [
                "A",
                "B",
                "format"
            ],
            "hstack": [
                "blocks",
                "format",
                "dtype"
            ],
            "vstack": [
                "blocks",
                "format",
                "dtype"
            ],
            "bmat": [
                "blocks",
                "format",
                "dtype"
            ],
            "block_diag": [
                "mats",
                "format",
                "dtype"
            ],
            "rand": [
                "m",
                "n",
                "density",
                "format",
                "dtype"
            ]
        },
        "scipy.sparse.dia": {
            "isspmatrix_dia": [
                "x"
            ],
            "dia_matrix": {
                "__init__": [
                    "self",
                    "arg1",
                    "shape",
                    "dtype",
                    "copy"
                ],
                "__repr__": [
                    "self"
                ],
                "getnnz": [
                    "self"
                ],
                "_mul_vector": [
                    "self",
                    "other"
                ],
                "_mul_multimatrix": [
                    "self",
                    "other"
                ],
                "todia": [
                    "self",
                    "copy"
                ],
                "tocsr": [
                    "self"
                ],
                "tocsc": [
                    "self"
                ],
                "tocoo": [
                    "self"
                ],
                "_with_data": [
                    "self",
                    "data",
                    "copy"
                ]
            }
        },
        "scipy.sparse.base": {
            "isspmatrix": [
                "x"
            ],
            "SparseWarning": {},
            "SparseFormatWarning": {},
            "SparseEfficiencyWarning": {},
            "spmatrix": {
                "__init__": [
                    "self",
                    "maxprint"
                ],
                "set_shape": [
                    "self",
                    "shape"
                ],
                "get_shape": [
                    "self"
                ],
                "reshape": [
                    "self",
                    "shape"
                ],
                "astype": [
                    "self",
                    "t"
                ],
                "asfptype": [
                    "self"
                ],
                "__iter__": [
                    "self"
                ],
                "getmaxprint": [
                    "self"
                ],
                "getnnz": [
                    "self"
                ],
                "getformat": [
                    "self"
                ],
                "__repr__": [
                    "self"
                ],
                "__str__": [
                    "self"
                ],
                "__len__": [
                    "self"
                ],
                "asformat": [
                    "self",
                    "format"
                ],
                "multiply": [
                    "self",
                    "other"
                ],
                "dot": [
                    "self",
                    "other"
                ],
                "__abs__": [
                    "self"
                ],
                "__add__": [
                    "self",
                    "other"
                ],
                "__radd__": [
                    "self",
                    "other"
                ],
                "__sub__": [
                    "self",
                    "other"
                ],
                "__rsub__": [
                    "self",
                    "other"
                ],
                "__mul__": [
                    "self",
                    "other"
                ],
                "_mul_scalar": [
                    "self",
                    "other"
                ],
                "_mul_vector": [
                    "self",
                    "other"
                ],
                "_mul_multivector": [
                    "self",
                    "other"
                ],
                "_mul_sparse_matrix": [
                    "self",
                    "other"
                ],
                "__rmul__": [
                    "self",
                    "other"
                ],
                "__truediv__": [
                    "self",
                    "other"
                ],
                "__div__": [
                    "self",
                    "other"
                ],
                "__neg__": [
                    "self"
                ],
                "__iadd__": [
                    "self",
                    "other"
                ],
                "__isub__": [
                    "self",
                    "other"
                ],
                "__imul__": [
                    "self",
                    "other"
                ],
                "__idiv__": [
                    "self",
                    "other"
                ],
                "__itruediv__": [
                    "self",
                    "other"
                ],
                "__pow__": [
                    "self",
                    "other"
                ],
                "__getattr__": [
                    "self",
                    "attr"
                ],
                "transpose": [
                    "self"
                ],
                "conj": [
                    "self"
                ],
                "conjugate": [
                    "self"
                ],
                "getH": [
                    "self"
                ],
                "_real": [
                    "self"
                ],
                "_imag": [
                    "self"
                ],
                "nonzero": [
                    "self"
                ],
                "getcol": [
                    "self",
                    "j"
                ],
                "getrow": [
                    "self",
                    "i"
                ],
                "todense": [
                    "self",
                    "order",
                    "out"
                ],
                "toarray": [
                    "self",
                    "order",
                    "out"
                ],
                "todok": [
                    "self"
                ],
                "tocoo": [
                    "self"
                ],
                "tolil": [
                    "self"
                ],
                "todia": [
                    "self"
                ],
                "tobsr": [
                    "self",
                    "blocksize"
                ],
                "copy": [
                    "self"
                ],
                "sum": [
                    "self",
                    "axis"
                ],
                "mean": [
                    "self",
                    "axis"
                ],
                "diagonal": [
                    "self"
                ],
                "setdiag": [
                    "self",
                    "values",
                    "k"
                ],
                "_process_toarray_args": [
                    "self",
                    "order",
                    "out"
                ]
            }
        },
        "scipy.sparse.sputils": {
            "upcast": [],
            "upcast_char": [],
            "to_native": [
                "A"
            ],
            "getdtype": [
                "dtype",
                "a",
                "default"
            ],
            "isscalarlike": [
                "x"
            ],
            "isintlike": [
                "x"
            ],
            "isshape": [
                "x"
            ],
            "issequence": [
                "t"
            ],
            "isdense": [
                "x"
            ]
        },
        "scipy.sparse.compressed": {
            "_cs_matrix": {
                "__init__": [
                    "self",
                    "arg1",
                    "shape",
                    "dtype",
                    "copy"
                ],
                "getnnz": [
                    "self"
                ],
                "_set_self": [
                    "self",
                    "other",
                    "copy"
                ],
                "check_format": [
                    "self",
                    "full_check"
                ],
                "__add__": [
                    "self",
                    "other"
                ],
                "__radd__": [
                    "self",
                    "other"
                ],
                "__sub__": [
                    "self",
                    "other"
                ],
                "__rsub__": [
                    "self",
                    "other"
                ],
                "__truediv__": [
                    "self",
                    "other"
                ],
                "multiply": [
                    "self",
                    "other"
                ],
                "_mul_vector": [
                    "self",
                    "other"
                ],
                "_mul_multivector": [
                    "self",
                    "other"
                ],
                "_mul_sparse_matrix": [
                    "self",
                    "other"
                ],
                "diagonal": [
                    "self"
                ],
                "sum": [
                    "self",
                    "axis"
                ],
                "__getitem__": [
                    "self",
                    "key"
                ],
                "_get_single_element": [
                    "self",
                    "row",
                    "col"
                ],
                "_get_slice": [
                    "self",
                    "i",
                    "start",
                    "stop",
                    "stride",
                    "shape"
                ],
                "_get_submatrix": [
                    "self",
                    "slice0",
                    "slice1"
                ],
                "__setitem__": [
                    "self",
                    "key",
                    "val"
                ],
                "todia": [
                    "self"
                ],
                "todok": [
                    "self"
                ],
                "tocoo": [
                    "self",
                    "copy"
                ],
                "toarray": [
                    "self",
                    "order",
                    "out"
                ],
                "eliminate_zeros": [
                    "self"
                ],
                "sum_duplicates": [
                    "self"
                ],
                "__get_sorted": [
                    "self"
                ],
                "__set_sorted": [
                    "self",
                    "val"
                ],
                "sorted_indices": [
                    "self"
                ],
                "sort_indices": [
                    "self"
                ],
                "prune": [
                    "self"
                ],
                "_with_data": [
                    "self",
                    "data",
                    "copy"
                ],
                "_binopt": [
                    "self",
                    "other",
                    "op"
                ]
            }
        },
        "scipy.sparse.coo": {
            "isspmatrix_coo": [
                "x"
            ],
            "coo_matrix": {
                "__init__": [
                    "self",
                    "arg1",
                    "shape",
                    "dtype",
                    "copy"
                ],
                "getnnz": [
                    "self"
                ],
                "_check": [
                    "self"
                ],
                "transpose": [
                    "self",
                    "copy"
                ],
                "toarray": [
                    "self",
                    "order",
                    "out"
                ],
                "tocsc": [
                    "self"
                ],
                "tocsr": [
                    "self"
                ],
                "tocoo": [
                    "self",
                    "copy"
                ],
                "todia": [
                    "self"
                ],
                "todok": [
                    "self"
                ],
                "_with_data": [
                    "self",
                    "data",
                    "copy"
                ],
                "_mul_vector": [
                    "self",
                    "other"
                ],
                "_mul_multivector": [
                    "self",
                    "other"
                ]
            }
        },
        "scipy.sparse.dok": {
            "isspmatrix_dok": [
                "x"
            ],
            "dok_matrix": {
                "__init__": [
                    "self",
                    "arg1",
                    "shape",
                    "dtype",
                    "copy"
                ],
                "getnnz": [
                    "self"
                ],
                "__len__": [
                    "self"
                ],
                "get": [
                    "self",
                    "key",
                    "default"
                ],
                "__getitem__": [
                    "self",
                    "key"
                ],
                "__setitem__": [
                    "self",
                    "key",
                    "value"
                ],
                "__add__": [
                    "self",
                    "other"
                ],
                "__radd__": [
                    "self",
                    "other"
                ],
                "__neg__": [
                    "self"
                ],
                "_mul_scalar": [
                    "self",
                    "other"
                ],
                "_mul_vector": [
                    "self",
                    "other"
                ],
                "_mul_multivector": [
                    "self",
                    "other"
                ],
                "__imul__": [
                    "self",
                    "other"
                ],
                "__truediv__": [
                    "self",
                    "other"
                ],
                "__itruediv__": [
                    "self",
                    "other"
                ],
                "transpose": [
                    "self"
                ],
                "conjtransp": [
                    "self"
                ],
                "copy": [
                    "self"
                ],
                "take": [
                    "self",
                    "cols_or_rows",
                    "columns"
                ],
                "split": [
                    "self",
                    "cols_or_rows",
                    "columns"
                ],
                "tocoo": [
                    "self"
                ],
                "todok": [
                    "self",
                    "copy"
                ],
                "tocsr": [
                    "self"
                ],
                "tocsc": [
                    "self"
                ],
                "toarray": [
                    "self",
                    "order",
                    "out"
                ],
                "resize": [
                    "self",
                    "shape"
                ]
            }
        },
        "scipy.sparse.setupscons": {
            "configuration": [
                "parent_package",
                "top_path"
            ]
        },
        "scipy.sparse.bsr": {
            "isspmatrix_bsr": [
                "x"
            ],
            "bsr_matrix": {
                "__init__": [
                    "self",
                    "arg1",
                    "shape",
                    "dtype",
                    "copy",
                    "blocksize"
                ],
                "check_format": [
                    "self",
                    "full_check"
                ],
                "_get_blocksize": [
                    "self"
                ],
                "getnnz": [
                    "self"
                ],
                "__repr__": [
                    "self"
                ],
                "diagonal": [
                    "self"
                ],
                "getdata": [
                    "self",
                    "ind"
                ],
                "__getitem__": [
                    "self",
                    "key"
                ],
                "__setitem__": [
                    "self",
                    "key",
                    "val"
                ],
                "matvec": [
                    "self",
                    "other"
                ],
                "matmat": [
                    "self",
                    "other"
                ],
                "_mul_vector": [
                    "self",
                    "other"
                ],
                "_mul_multivector": [
                    "self",
                    "other"
                ],
                "_mul_sparse_matrix": [
                    "self",
                    "other"
                ],
                "tobsr": [
                    "self",
                    "blocksize",
                    "copy"
                ],
                "tocsr": [
                    "self"
                ],
                "tocsc": [
                    "self"
                ],
                "tocoo": [
                    "self",
                    "copy"
                ],
                "transpose": [
                    "self"
                ],
                "eliminate_zeros": [
                    "self"
                ],
                "sum_duplicates": [
                    "self"
                ],
                "sort_indices": [
                    "self"
                ],
                "prune": [
                    "self"
                ],
                "_binopt": [
                    "self",
                    "other",
                    "op",
                    "in_shape",
                    "out_shape"
                ],
                "_with_data": [
                    "self",
                    "data",
                    "copy"
                ]
            }
        },
        "scipy.sparse.csgraph.setup": {
            "configuration": [
                "parent_package",
                "top_path"
            ]
        },
        "scipy.sparse.csgraph": {},
        "scipy.sparse.csgraph._validation": {
            "validate_graph": [
                "csgraph",
                "directed",
                "dtype",
                "csr_output",
                "dense_output",
                "copy_if_dense",
                "copy_if_sparse",
                "null_value_in",
                "null_value_out",
                "infinity_null",
                "nan_null"
            ]
        },
        "scipy.sparse.csgraph._laplacian": {
            "laplacian": [
                "csgraph",
                "normed",
                "return_diag"
            ],
            "_laplacian_sparse": [
                "graph",
                "normed",
                "return_diag"
            ],
            "_laplacian_dense": [
                "graph",
                "normed",
                "return_diag"
            ]
        },
        "scipy.sparse.csgraph._components": {
            "cs_graph_components": [
                "x"
            ]
        },
        "scipy.sparse.csgraph.setupscons": {
            "configuration": [
                "parent_package",
                "top_path"
            ]
        },
        "scipy.sparse.linalg.matfuncs": {
            "inv": [
                "A"
            ],
            "expm": [
                "A"
            ],
            "_pade3": [
                "A",
                "ident"
            ],
            "_pade5": [
                "A",
                "ident"
            ],
            "_pade7": [
                "A",
                "ident"
            ],
            "_pade9": [
                "A",
                "ident"
            ],
            "_pade13": [
                "A",
                "ident"
            ]
        },
        "scipy.sparse.linalg.setup": {
            "configuration": [
                "parent_package",
                "top_path"
            ]
        },
        "scipy.sparse.linalg": {},
        "scipy.sparse.linalg.interface": {
            "aslinearoperator": [
                "A"
            ],
            "LinearOperator": {
                "__init__": [
                    "self",
                    "shape",
                    "matvec",
                    "rmatvec",
                    "matmat",
                    "dtype"
                ],
                "_matmat": [
                    "self",
                    "X"
                ],
                "matvec": [
                    "self",
                    "x"
                ],
                "matmat": [
                    "self",
                    "X"
                ],
                "__mul__": [
                    "self",
                    "x"
                ],
                "__repr__": [
                    "self"
                ]
            },
            "MatrixLinearOperator": {
                "__init__": [
                    "self",
                    "A"
                ],
                "rmatvec": [
                    "self",
                    "x"
                ]
            },
            "IdentityOperator": {
                "__init__": [
                    "self",
                    "shape",
                    "dtype"
                ],
                "matvec": [
                    "self",
                    "x"
                ],
                "rmatvec": [
                    "self",
                    "x"
                ],
                "matmat": [
                    "self",
                    "x"
                ],
                "__mul__": [
                    "self",
                    "x"
                ]
            }
        },
        "scipy.sparse.linalg.setupscons": {
            "configuration": [
                "parent_package",
                "top_path"
            ]
        },
        "scipy.sparse.linalg.isolve.lsqr": {
            "_sym_ortho": [
                "a",
                "b"
            ],
            "lsqr": [
                "A",
                "b",
                "damp",
                "atol",
                "btol",
                "conlim",
                "iter_lim",
                "show",
                "calc_var"
            ]
        },
        "scipy.sparse.linalg.isolve.lgmres": {
            "norm2": [
                "q"
            ],
            "lgmres": [
                "A",
                "b",
                "x0",
                "tol",
                "maxiter",
                "M",
                "callback",
                "inner_m",
                "outer_k",
                "outer_v",
                "store_outer_Av"
            ]
        },
        "scipy.sparse.linalg.isolve.setup": {
            "configuration": [
                "parent_package",
                "top_path"
            ]
        },
        "scipy.sparse.linalg.isolve": {},
        "scipy.sparse.linalg.isolve.lsmr": {
            "lsmr": [
                "A",
                "b",
                "damp",
                "atol",
                "btol",
                "conlim",
                "maxiter",
                "show"
            ]
        },
        "scipy.sparse.linalg.isolve.iterative": {
            "set_docstring": [
                "header",
                "Ainfo",
                "footer"
            ],
            "non_reentrant": [
                "func"
            ],
            "bicg": [
                "A",
                "b",
                "x0",
                "tol",
                "maxiter",
                "xtype",
                "M",
                "callback"
            ],
            "bicgstab": [
                "A",
                "b",
                "x0",
                "tol",
                "maxiter",
                "xtype",
                "M",
                "callback"
            ],
            "cg": [
                "A",
                "b",
                "x0",
                "tol",
                "maxiter",
                "xtype",
                "M",
                "callback"
            ],
            "cgs": [
                "A",
                "b",
                "x0",
                "tol",
                "maxiter",
                "xtype",
                "M",
                "callback"
            ],
            "gmres": [
                "A",
                "b",
                "x0",
                "tol",
                "restart",
                "maxiter",
                "xtype",
                "M",
                "callback",
                "restrt"
            ],
            "qmr": [
                "A",
                "b",
                "x0",
                "tol",
                "maxiter",
                "xtype",
                "M1",
                "M2",
                "callback"
            ]
        },
        "scipy.sparse.linalg.isolve.minres": {
            "minres": [
                "A",
                "b",
                "x0",
                "shift",
                "tol",
                "maxiter",
                "xtype",
                "M",
                "callback",
                "show",
                "check"
            ]
        },
        "scipy.sparse.linalg.isolve.utils": {
            "coerce": [
                "x",
                "y"
            ],
            "id": [
                "x"
            ],
            "make_system": [
                "A",
                "M",
                "x0",
                "b",
                "xtype"
            ]
        },
        "scipy.sparse.linalg.isolve.setupscons": {
            "configuration": [
                "parent_package",
                "top_path"
            ]
        },
        "scipy.sparse.linalg.eigen.setup": {
            "configuration": [
                "parent_package",
                "top_path"
            ]
        },
        "scipy.sparse.linalg.eigen": {},
        "scipy.sparse.linalg.eigen.setupscons": {
            "configuration": [
                "parent_package",
                "top_path"
            ]
        },
        "scipy.sparse.linalg.eigen.arpack.setup": {
            "configuration": [
                "parent_package",
                "top_path"
            ]
        },
        "scipy.sparse.linalg.eigen.arpack": {},
        "scipy.sparse.linalg.eigen.arpack.arpack": {
            "_single_precision_cast": [
                "typechar"
            ],
            "_aslinearoperator_with_dtype": [
                "m"
            ],
            "get_inv_matvec": [
                "M",
                "symmetric",
                "tol"
            ],
            "get_OPinv_matvec": [
                "A",
                "M",
                "sigma",
                "symmetric",
                "tol"
            ],
            "eigs": [
                "A",
                "k",
                "M",
                "sigma",
                "which",
                "v0",
                "ncv",
                "maxiter",
                "tol",
                "return_eigenvectors",
                "Minv",
                "OPinv",
                "OPpart"
            ],
            "eigsh": [
                "A",
                "k",
                "M",
                "sigma",
                "which",
                "v0",
                "ncv",
                "maxiter",
                "tol",
                "return_eigenvectors",
                "Minv",
                "OPinv",
                "mode"
            ],
            "svds": [
                "A",
                "k",
                "ncv",
                "tol",
                "which",
                "v0",
                "maxiter",
                "return_singular_vectors"
            ],
            "ArpackError": {
                "__init__": [
                    "self",
                    "info",
                    "infodict"
                ]
            },
            "ArpackNoConvergence": {
                "__init__": [
                    "self",
                    "msg",
                    "eigenvalues",
                    "eigenvectors"
                ]
            },
            "_ArpackParams": {
                "__init__": [
                    "self",
                    "n",
                    "k",
                    "tp",
                    "mode",
                    "sigma",
                    "ncv",
                    "v0",
                    "maxiter",
                    "which",
                    "tol"
                ],
                "_raise_no_convergence": [
                    "self"
                ]
            },
            "_SymmetricArpackParams": {
                "__init__": [
                    "self",
                    "n",
                    "k",
                    "tp",
                    "matvec",
                    "mode",
                    "M_matvec",
                    "Minv_matvec",
                    "sigma",
                    "ncv",
                    "v0",
                    "maxiter",
                    "which",
                    "tol"
                ],
                "iterate": [
                    "self"
                ],
                "extract": [
                    "self",
                    "return_eigenvectors"
                ]
            },
            "_UnsymmetricArpackParams": {
                "__init__": [
                    "self",
                    "n",
                    "k",
                    "tp",
                    "matvec",
                    "mode",
                    "M_matvec",
                    "Minv_matvec",
                    "sigma",
                    "ncv",
                    "v0",
                    "maxiter",
                    "which",
                    "tol"
                ],
                "iterate": [
                    "self"
                ],
                "extract": [
                    "self",
                    "return_eigenvectors"
                ]
            },
            "SpLuInv": {
                "__init__": [
                    "self",
                    "M"
                ],
                "_matvec": [
                    "self",
                    "x"
                ]
            },
            "LuInv": {
                "__init__": [
                    "self",
                    "M"
                ],
                "_matvec": [
                    "self",
                    "x"
                ]
            },
            "IterInv": {
                "__init__": [
                    "self",
                    "M",
                    "ifunc",
                    "tol"
                ],
                "_matvec": [
                    "self",
                    "x"
                ]
            },
            "IterOpInv": {
                "__init__": [
                    "self",
                    "A",
                    "M",
                    "sigma",
                    "ifunc",
                    "tol"
                ],
                "mult_func": [
                    "self",
                    "x"
                ],
                "mult_func_M_None": [
                    "self",
                    "x"
                ],
                "_matvec": [
                    "self",
                    "x"
                ]
            }
        },
        "scipy.sparse.linalg.eigen.arpack.setupscons": {
            "configuration": [
                "parent_package",
                "top_path"
            ]
        },
        "scipy.sparse.linalg.eigen.lobpcg.setup": {
            "configuration": [
                "parent_package",
                "top_path"
            ]
        },
        "scipy.sparse.linalg.eigen.lobpcg.lobpcg": {
            "symeig": [
                "mtxA",
                "mtxB",
                "eigenvectors",
                "select"
            ],
            "pause": [],
            "save": [
                "ar",
                "fileName"
            ],
            "as2d": [
                "ar"
            ],
            "makeOperator": [
                "operatorInput",
                "expectedShape"
            ],
            "applyConstraints": [
                "blockVectorV",
                "factYBY",
                "blockVectorBY",
                "blockVectorY"
            ],
            "b_orthonormalize": [
                "B",
                "blockVectorV",
                "blockVectorBV",
                "retInvR"
            ],
            "lobpcg": [
                "A",
                "X",
                "B",
                "M",
                "Y",
                "tol",
                "maxiter",
                "largest",
                "verbosityLevel",
                "retLambdaHistory",
                "retResidualNormsHistory"
            ],
            "CallableLinearOperator": {
                "__call__": [
                    "self",
                    "x"
                ]
            }
        },
        "scipy.sparse.linalg.eigen.lobpcg": {},
        "scipy.sparse.linalg.eigen.lobpcg.setupscons": {
            "configuration": [
                "parent_package",
                "top_path"
            ]
        },
        "scipy.sparse.linalg.dsolve.setup": {
            "configuration": [
                "parent_package",
                "top_path"
            ]
        },
        "scipy.sparse.linalg.dsolve": {},
        "scipy.sparse.linalg.dsolve.linsolve": {
            "use_solver": [],
            "spsolve": [
                "A",
                "b",
                "permc_spec",
                "use_umfpack"
            ],
            "splu": [
                "A",
                "permc_spec",
                "diag_pivot_thresh",
                "drop_tol",
                "relax",
                "panel_size",
                "options"
            ],
            "spilu": [
                "A",
                "drop_tol",
                "fill_factor",
                "drop_rule",
                "permc_spec",
                "diag_pivot_thresh",
                "relax",
                "panel_size",
                "options"
            ],
            "factorized": [
                "A"
            ]
        },
        "scipy.sparse.linalg.dsolve.setupscons": {
            "configuration": [
                "parent_package",
                "top_path"
            ]
        },
        "scipy.sparse.linalg.dsolve.umfpack.setup": {
            "configuration": [
                "parent_package",
                "top_path"
            ]
        },
        "scipy.sparse.linalg.dsolve.umfpack": {},
        "scipy.sparse.linalg.dsolve.umfpack.umfpack": {
            "configure": [],
            "updateDictWithVars": [
                "adict",
                "module",
                "pattern",
                "group"
            ],
            "UmfpackWarning": {},
            "Struct": {
                "__init__": [
                    "self"
                ],
                "__str__": [
                    "self"
                ]
            },
            "UmfpackContext": {
                "__init__": [
                    "self",
                    "family"
                ],
                "__del__": [
                    "self"
                ],
                "strControl": [
                    "self"
                ],
                "strInfo": [
                    "self"
                ],
                "_getIndx": [
                    "self",
                    "mtx"
                ],
                "symbolic": [
                    "self",
                    "mtx"
                ],
                "numeric": [
                    "self",
                    "mtx"
                ],
                "report_symbolic": [
                    "self"
                ],
                "report_numeric": [
                    "self"
                ],
                "report_control": [
                    "self"
                ],
                "report_info": [
                    "self"
                ],
                "free_symbolic": [
                    "self"
                ],
                "free_numeric": [
                    "self"
                ],
                "free": [
                    "self"
                ],
                "solve": [
                    "self",
                    "sys",
                    "mtx",
                    "rhs",
                    "autoTranspose"
                ],
                "linsolve": [
                    "self",
                    "sys",
                    "mtx",
                    "rhs",
                    "autoTranspose"
                ],
                "__call__": [
                    "self",
                    "sys",
                    "mtx",
                    "rhs",
                    "autoTranspose"
                ],
                "lu": [
                    "self",
                    "mtx"
                ]
            }
        },
        "scipy.sparse.linalg.dsolve.umfpack.setupscons": {
            "configuration": [
                "parent_package",
                "top_path"
            ]
        },
        "scipy.sparse.sparsetools.csgraph": {
            "_swig_setattr_nondynamic": [
                "self",
                "class_type",
                "name",
                "value",
                "static"
            ],
            "_swig_setattr": [
                "self",
                "class_type",
                "name",
                "value"
            ],
            "_swig_getattr": [
                "self",
                "class_type",
                "name"
            ],
            "_swig_repr": [
                "self"
            ],
            "cs_graph_components": []
        },
        "scipy.sparse.sparsetools.csc": {
            "_swig_setattr_nondynamic": [
                "self",
                "class_type",
                "name",
                "value",
                "static"
            ],
            "_swig_setattr": [
                "self",
                "class_type",
                "name",
                "value"
            ],
            "_swig_getattr": [
                "self",
                "class_type",
                "name"
            ],
            "_swig_repr": [
                "self"
            ],
            "csc_matmat_pass1": [],
            "csc_diagonal": [],
            "csc_tocsr": [],
            "csc_matmat_pass2": [],
            "csc_matvec": [],
            "csc_matvecs": [],
            "csc_elmul_csc": [],
            "csc_eldiv_csc": [],
            "csc_plus_csc": [],
            "csc_minus_csc": []
        },
        "scipy.sparse.sparsetools.setup": {
            "configuration": [
                "parent_package",
                "top_path"
            ]
        },
        "scipy.sparse.sparsetools": {},
        "scipy.sparse.sparsetools.csr": {
            "_swig_setattr_nondynamic": [
                "self",
                "class_type",
                "name",
                "value",
                "static"
            ],
            "_swig_setattr": [
                "self",
                "class_type",
                "name",
                "value"
            ],
            "_swig_getattr": [
                "self",
                "class_type",
                "name"
            ],
            "_swig_repr": [
                "self"
            ],
            "expandptr": [],
            "csr_matmat_pass1": [],
            "csr_count_blocks": [],
            "csr_has_sorted_indices": [],
            "csr_diagonal": [],
            "csr_scale_rows": [],
            "csr_scale_columns": [],
            "csr_tocsc": [],
            "csr_tobsr": [],
            "csr_matmat_pass2": [],
            "csr_matvec": [],
            "csr_matvecs": [],
            "csr_elmul_csr": [],
            "csr_eldiv_csr": [],
            "csr_plus_csr": [],
            "csr_minus_csr": [],
            "csr_sort_indices": [],
            "csr_eliminate_zeros": [],
            "csr_sum_duplicates": [],
            "get_csr_submatrix": [],
            "csr_sample_values": []
        },
        "scipy.sparse.sparsetools.dia": {
            "_swig_setattr_nondynamic": [
                "self",
                "class_type",
                "name",
                "value",
                "static"
            ],
            "_swig_setattr": [
                "self",
                "class_type",
                "name",
                "value"
            ],
            "_swig_getattr": [
                "self",
                "class_type",
                "name"
            ],
            "_swig_repr": [
                "self"
            ],
            "dia_matvec": []
        },
        "scipy.sparse.sparsetools.coo": {
            "_swig_setattr_nondynamic": [
                "self",
                "class_type",
                "name",
                "value",
                "static"
            ],
            "_swig_setattr": [
                "self",
                "class_type",
                "name",
                "value"
            ],
            "_swig_getattr": [
                "self",
                "class_type",
                "name"
            ],
            "_swig_repr": [
                "self"
            ],
            "coo_count_diagonals": [],
            "coo_tocsr": [],
            "coo_tocsc": [],
            "coo_todense": [],
            "coo_matvec": []
        },
        "scipy.sparse.sparsetools.setupscons": {
            "configuration": [
                "parent_package",
                "top_path"
            ]
        },
        "scipy.sparse.sparsetools.bsr": {
            "_swig_setattr_nondynamic": [
                "self",
                "class_type",
                "name",
                "value",
                "static"
            ],
            "_swig_setattr": [
                "self",
                "class_type",
                "name",
                "value"
            ],
            "_swig_getattr": [
                "self",
                "class_type",
                "name"
            ],
            "_swig_repr": [
                "self"
            ],
            "bsr_diagonal": [],
            "bsr_scale_rows": [],
            "bsr_scale_columns": [],
            "bsr_transpose": [],
            "bsr_matmat_pass2": [],
            "bsr_matvec": [],
            "bsr_matvecs": [],
            "bsr_elmul_bsr": [],
            "bsr_eldiv_bsr": [],
            "bsr_plus_bsr": [],
            "bsr_minus_bsr": [],
            "bsr_sort_indices": []
        },
        "scipy.weave.base_info": {
            "unique_values": [
                "lst"
            ],
            "base_info": {
                "set_compiler": [
                    "self",
                    "compiler"
                ],
                "check_compiler": [
                    "self",
                    "compiler"
                ],
                "warnings": [
                    "self"
                ],
                "headers": [
                    "self"
                ],
                "include_dirs": [
                    "self"
                ],
                "libraries": [
                    "self"
                ],
                "library_dirs": [
                    "self"
                ],
                "support_code": [
                    "self"
                ],
                "module_init_code": [
                    "self"
                ],
                "sources": [
                    "self"
                ],
                "define_macros": [
                    "self"
                ],
                "undefine_macros": [
                    "self"
                ],
                "extra_compile_args": [
                    "self"
                ],
                "extra_link_args": [
                    "self"
                ]
            },
            "custom_info": {
                "__init__": [
                    "self"
                ],
                "add_warning": [
                    "self",
                    "warning"
                ],
                "add_header": [
                    "self",
                    "header"
                ],
                "add_include_dir": [
                    "self",
                    "include_dir"
                ],
                "add_library": [
                    "self",
                    "library"
                ],
                "add_library_dir": [
                    "self",
                    "library_dir"
                ],
                "add_support_code": [
                    "self",
                    "support_code"
                ],
                "add_module_init_code": [
                    "self",
                    "module_init_code"
                ],
                "add_source": [
                    "self",
                    "source"
                ],
                "add_define_macro": [
                    "self",
                    "define_macro"
                ],
                "add_undefine_macro": [
                    "self",
                    "undefine_macro"
                ],
                "add_extra_compile_arg": [
                    "self",
                    "compile_arg"
                ],
                "add_extra_link_arg": [
                    "self",
                    "link_arg"
                ]
            },
            "info_list": {
                "get_unique_values": [
                    "self",
                    "attribute"
                ],
                "extra_compile_args": [
                    "self"
                ],
                "extra_link_args": [
                    "self"
                ],
                "sources": [
                    "self"
                ],
                "define_macros": [
                    "self"
                ],
                "warnings": [
                    "self"
                ],
                "headers": [
                    "self"
                ],
                "include_dirs": [
                    "self"
                ],
                "libraries": [
                    "self"
                ],
                "library_dirs": [
                    "self"
                ],
                "support_code": [
                    "self"
                ],
                "module_init_code": [
                    "self"
                ]
            }
        },
        "scipy.weave.blitz_tools": {
            "blitz": [
                "expr",
                "local_dict",
                "global_dict",
                "check_size",
                "verbose"
            ],
            "ast_to_blitz_expr": [
                "ast_seq"
            ],
            "test_function": []
        },
        "scipy.weave.swigptr2": {},
        "scipy.weave.swigptr": {},
        "scipy.weave.swig2_spec": {
            "swig2_converter": {
                "__init__": [
                    "self",
                    "class_name",
                    "pycobj",
                    "runtime_version"
                ],
                "_get_swig_runtime_version": [
                    "self"
                ],
                "init_info": [
                    "self",
                    "runtime"
                ],
                "_get_swig_type": [
                    "self",
                    "value"
                ],
                "type_match": [
                    "self",
                    "value"
                ],
                "generate_build_info": [
                    "self"
                ],
                "py_to_c_code": [
                    "self"
                ],
                "c_to_py_code": [
                    "self"
                ],
                "type_spec": [
                    "self",
                    "name",
                    "value"
                ],
                "__cmp__": [
                    "self",
                    "other"
                ]
            }
        },
        "scipy.weave.platform_info": {
            "dummy_dist": [],
            "create_compiler_instance": [
                "dist"
            ],
            "compiler_exe_name": [
                "compiler"
            ],
            "compiler_exe_path": [
                "exe_name"
            ],
            "check_sum": [
                "file"
            ],
            "get_compiler_dir": [
                "compiler_name"
            ],
            "choose_compiler": [
                "compiler_name"
            ],
            "configure_sys_argv": [
                "compiler_name"
            ],
            "restore_sys_argv": [],
            "gcc_exists": [
                "name"
            ],
            "msvc_exists": []
        },
        "scipy.weave._dumb_shelve": {
            "open": [
                "filename",
                "flag"
            ],
            "DbfilenameShelf": {
                "__init__": [
                    "self",
                    "filename",
                    "flag"
                ],
                "__getitem__": [
                    "self",
                    "key"
                ],
                "__setitem__": [
                    "self",
                    "key",
                    "value"
                ]
            }
        },
        "scipy.weave.size_check": {
            "isnumeric": [
                "t"
            ],
            "time_it": [],
            "check_expr": [
                "expr",
                "local_vars",
                "global_vars"
            ],
            "make_same_length": [
                "x",
                "y"
            ],
            "binary_op_size": [
                "xx",
                "yy"
            ],
            "unary": [
                "ary"
            ],
            "not_implemented": [
                "ary"
            ],
            "reduction": [
                "ary",
                "axis"
            ],
            "take": [
                "ary",
                "axis"
            ],
            "dummy_array": {
                "__init__": [
                    "self",
                    "ary",
                    "ary_is_shape",
                    "name"
                ],
                "binary_op": [
                    "self",
                    "other"
                ],
                "__cmp__": [
                    "self",
                    "other"
                ],
                "__add__": [
                    "self",
                    "other"
                ],
                "__radd__": [
                    "self",
                    "other"
                ],
                "__sub__": [
                    "self",
                    "other"
                ],
                "__rsub__": [
                    "self",
                    "other"
                ],
                "__mul__": [
                    "self",
                    "other"
                ],
                "__rmul__": [
                    "self",
                    "other"
                ],
                "__div__": [
                    "self",
                    "other"
                ],
                "__rdiv__": [
                    "self",
                    "other"
                ],
                "__mod__": [
                    "self",
                    "other"
                ],
                "__rmod__": [
                    "self",
                    "other"
                ],
                "__lshift__": [
                    "self",
                    "other"
                ],
                "__rshift__": [
                    "self",
                    "other"
                ],
                "__neg__": [
                    "self",
                    "other"
                ],
                "__pos__": [
                    "self",
                    "other"
                ],
                "__abs__": [
                    "self",
                    "other"
                ],
                "__invert__": [
                    "self",
                    "other"
                ],
                "__setitem__": [
                    "self",
                    "indices",
                    "val"
                ],
                "__len__": [
                    "self"
                ],
                "__getslice__": [
                    "self",
                    "i",
                    "j"
                ],
                "__getitem__": [
                    "self",
                    "indices"
                ],
                "__repr__": [
                    "self"
                ]
            }
        },
        "scipy.weave.common_info": {
            "basic_module_info": {},
            "inline_info": {},
            "swig_info": {}
        },
        "scipy.weave.converters": {},
        "scipy.weave.catalog": {
            "getmodule": [
                "object"
            ],
            "expr_to_filename": [
                "expr"
            ],
            "unique_file": [
                "d",
                "expr"
            ],
            "is_writable": [
                "dir"
            ],
            "whoami": [],
            "default_dir": [],
            "intermediate_dir": [],
            "default_temp_dir": [],
            "os_dependent_catalog_name": [],
            "catalog_path": [
                "module_path"
            ],
            "get_catalog": [
                "module_path",
                "mode"
            ],
            "catalog": {
                "__init__": [
                    "self",
                    "user_path_list"
                ],
                "set_module_directory": [
                    "self",
                    "module_dir"
                ],
                "get_module_directory": [
                    "self"
                ],
                "clear_module_directory": [
                    "self"
                ],
                "get_environ_path": [
                    "self"
                ],
                "build_search_order": [
                    "self"
                ],
                "get_catalog_files": [
                    "self"
                ],
                "get_existing_files": [
                    "self"
                ],
                "get_writable_file": [
                    "self",
                    "existing_only"
                ],
                "get_writable_dir": [
                    "self"
                ],
                "unique_module_name": [
                    "self",
                    "code",
                    "module_dir"
                ],
                "path_key": [
                    "self",
                    "code"
                ],
                "configure_path": [
                    "self",
                    "cat",
                    "code"
                ],
                "unconfigure_path": [
                    "self"
                ],
                "get_cataloged_functions": [
                    "self",
                    "code"
                ],
                "repair_catalog": [
                    "self",
                    "catalog_path",
                    "code"
                ],
                "get_functions_fast": [
                    "self",
                    "code"
                ],
                "get_functions": [
                    "self",
                    "code",
                    "module_dir"
                ],
                "add_function": [
                    "self",
                    "code",
                    "function",
                    "module_dir"
                ],
                "add_function_persistent": [
                    "self",
                    "code",
                    "function"
                ],
                "fast_cache": [
                    "self",
                    "code",
                    "function"
                ]
            }
        },
        "scipy.weave.blitz_spec": {
            "array_info": {
                "check_compiler": [
                    "self",
                    "compiler"
                ]
            },
            "array_converter": {
                "init_info": [
                    "self"
                ],
                "info_object": [
                    "self"
                ],
                "type_spec": [
                    "self",
                    "name",
                    "value"
                ],
                "template_vars": [
                    "self",
                    "inline"
                ],
                "declaration_code": [
                    "self",
                    "templatize",
                    "inline"
                ],
                "__cmp__": [
                    "self",
                    "other"
                ]
            }
        },
        "scipy.weave.setup": {
            "configuration": [
                "parent_package",
                "top_path"
            ]
        },
        "scipy.weave.md5_load": {},
        "scipy.weave.ast_tools": {
            "issequence": [
                "t"
            ],
            "int_to_symbol": [
                "i"
            ],
            "translate_symbols": [
                "ast_tuple"
            ],
            "ast_to_string": [
                "ast_seq"
            ],
            "build_atom": [
                "expr_string"
            ],
            "atom_tuple": [
                "expr_string"
            ],
            "atom_list": [
                "expr_string"
            ],
            "find_first_pattern": [
                "ast_tuple",
                "pattern_list"
            ],
            "remove_duplicates": [
                "lst"
            ],
            "remove_reserved_names": [
                "lst"
            ],
            "harvest_variables": [
                "ast_list"
            ],
            "match": [
                "pattern",
                "data",
                "vars"
            ],
            "tuples_to_lists": [
                "ast_tuple"
            ]
        },
        "scipy.weave.numpy_scalar_spec": {
            "numpy_complex_scalar_converter": {
                "init_info": [
                    "self"
                ]
            }
        },
        "scipy.weave": {},
        "scipy.weave.cpp_namespace_spec": {
            "cpp_namespace_converter": {
                "__init__": [
                    "self",
                    "class_name"
                ],
                "type_match": [
                    "self",
                    "value"
                ],
                "type_spec": [
                    "self",
                    "name",
                    "value"
                ],
                "declaration_code": [
                    "self",
                    "inline"
                ],
                "__repr__": [
                    "self"
                ],
                "__cmp__": [
                    "self",
                    "other"
                ]
            }
        },
        "scipy.weave.standard_array_spec": {
            "array_converter": {
                "init_info": [
                    "self"
                ],
                "get_var_type": [
                    "self",
                    "value"
                ],
                "template_vars": [
                    "self",
                    "inline"
                ],
                "declaration_code": [
                    "self",
                    "templatize",
                    "inline"
                ],
                "cleanup_code": [
                    "self"
                ]
            }
        },
        "scipy.weave.accelerate_tools": {
            "CStr": [
                "s"
            ],
            "lookup_type": [
                "x"
            ],
            "Instance": {
                "__init__": [
                    "self",
                    "prototype"
                ],
                "check": [
                    "self",
                    "s"
                ],
                "inbound": [
                    "self",
                    "s"
                ],
                "outbound": [
                    "self",
                    "s"
                ],
                "get_attribute": [
                    "self",
                    "name"
                ],
                "set_attribute": [
                    "self",
                    "name"
                ]
            },
            "Basic": {
                "check": [
                    "self",
                    "s"
                ],
                "inbound": [
                    "self",
                    "s"
                ],
                "outbound": [
                    "self",
                    "s"
                ]
            },
            "Basic_Number": {
                "literalizer": [
                    "self",
                    "s"
                ],
                "binop": [
                    "self",
                    "symbol",
                    "a",
                    "b"
                ]
            },
            "Integer": {},
            "Double": {},
            "String": {
                "literalizer": [
                    "self",
                    "s"
                ]
            },
            "Vector": {
                "check": [
                    "self",
                    "s"
                ],
                "inbound": [
                    "self",
                    "s"
                ],
                "outbound": [
                    "self",
                    "s"
                ],
                "getitem": [
                    "self",
                    "A",
                    "v",
                    "t"
                ],
                "setitem": [
                    "self",
                    "A",
                    "v",
                    "t"
                ]
            },
            "matrix": {},
            "IntegerVector": {},
            "Integermatrix": {},
            "LongVector": {},
            "Longmatrix": {},
            "DoubleVector": {},
            "Doublematrix": {},
            "XRange": {},
            "accelerate": {
                "__init__": [
                    "self",
                    "function"
                ],
                "__cache": [
                    "self"
                ],
                "__call__": [
                    "self"
                ],
                "signature": [
                    "self"
                ],
                "singleton": [
                    "self",
                    "signature"
                ],
                "identifier": [
                    "self",
                    "signature"
                ],
                "accelerate": [
                    "self",
                    "signature",
                    "identifier"
                ],
                "code": [
                    "self"
                ]
            },
            "Python2CXX": {
                "typedef_by_value": [
                    "self",
                    "v"
                ],
                "function_by_signature": [
                    "self",
                    "signature"
                ],
                "__init__": [
                    "self",
                    "f",
                    "signature",
                    "name"
                ],
                "function_code": [
                    "self"
                ],
                "python_function_definition_code": [
                    "self"
                ]
            }
        },
        "scipy.weave.bytecodecompiler": {
            "opcodize": [
                "s"
            ],
            "listing": [
                "f"
            ],
            "__Descriptor": {
                "__repr__": [
                    "self"
                ]
            },
            "Type_Descriptor": {},
            "Function_Descriptor": {
                "__init__": [
                    "self",
                    "code",
                    "return_type",
                    "support"
                ]
            },
            "ByteCodeMeaning": {
                "fetch": [
                    "self",
                    "pc",
                    "code"
                ],
                "execute": [
                    "self",
                    "pc",
                    "opcode",
                    "argument"
                ],
                "evaluate": [
                    "self",
                    "pc",
                    "code"
                ],
                "cmp_op": [
                    "self",
                    "opname"
                ],
                "STOP_CODE": [
                    "self",
                    "pc"
                ],
                "POP_TOP": [
                    "self",
                    "pc"
                ],
                "ROT_TWO": [
                    "self",
                    "pc"
                ],
                "ROT_THREE": [
                    "self",
                    "pc"
                ],
                "ROT_FOUR": [
                    "self",
                    "pc"
                ],
                "DUP_TOP": [
                    "self",
                    "pc"
                ],
                "UNARY_POSITIVE": [
                    "self",
                    "pc"
                ],
                "UNARY_NEGATIVE": [
                    "self",
                    "pc"
                ],
                "UNARY_NOT": [
                    "self",
                    "pc"
                ],
                "UNARY_CONVERT": [
                    "self",
                    "pc"
                ],
                "UNARY_INVERT": [
                    "self",
                    "pc"
                ],
                "BINARY_POWER": [
                    "self",
                    "pc"
                ],
                "BINARY_MULTIPLY": [
                    "self",
                    "pc"
                ],
                "BINARY_DIVIDE": [
                    "self",
                    "pc"
                ],
                "BINARY_MODULO": [
                    "self",
                    "pc"
                ],
                "BINARY_ADD": [
                    "self",
                    "pc"
                ],
                "BINARY_SUBTRACT": [
                    "self",
                    "pc"
                ],
                "BINARY_SUBSCR": [
                    "self",
                    "pc"
                ],
                "BINARY_LSHIFT": [
                    "self",
                    "pc"
                ],
                "BINARY_RSHIFT": [
                    "self",
                    "pc"
                ],
                "BINARY_AND": [
                    "self",
                    "pc"
                ],
                "BINARY_XOR": [
                    "self",
                    "pc"
                ],
                "BINARY_OR": [
                    "self",
                    "pc"
                ],
                "INPLACE_POWER": [
                    "self",
                    "pc"
                ],
                "INPLACE_MULTIPLY": [
                    "self",
                    "pc"
                ],
                "INPLACE_DIVIDE": [
                    "self",
                    "pc"
                ],
                "INPLACE_MODULO": [
                    "self",
                    "pc"
                ],
                "INPLACE_ADD": [
                    "self",
                    "pc"
                ],
                "INPLACE_SUBTRACT": [
                    "self",
                    "pc"
                ],
                "INPLACE_LSHIFT": [
                    "self",
                    "pc"
                ],
                "INPLACE_RSHIFT": [
                    "self",
                    "pc"
                ],
                "INPLACE_AND": [
                    "self",
                    "pc"
                ],
                "INPLACE_XOR": [
                    "self",
                    "pc"
                ],
                "INPLACE_OR": [
                    "self",
                    "pc"
                ],
                "SLICE_0": [
                    "self",
                    "pc"
                ],
                "SLICE_1": [
                    "self",
                    "pc"
                ],
                "SLICE_2": [
                    "self",
                    "pc"
                ],
                "SLICE_3": [
                    "self",
                    "pc"
                ],
                "STORE_SLICE_0": [
                    "self",
                    "pc"
                ],
                "STORE_SLICE_1": [
                    "self",
                    "pc"
                ],
                "STORE_SLICE_2": [
                    "self",
                    "pc"
                ],
                "STORE_SLICE_3": [
                    "self",
                    "pc"
                ],
                "DELETE_SLICE_0": [
                    "self",
                    "pc"
                ],
                "DELETE_SLICE_1": [
                    "self",
                    "pc"
                ],
                "DELETE_SLICE_2": [
                    "self",
                    "pc"
                ],
                "DELETE_SLICE_3": [
                    "self",
                    "pc"
                ],
                "STORE_SUBSCR": [
                    "self",
                    "pc"
                ],
                "DELETE_SUBSCR": [
                    "self",
                    "pc"
                ],
                "PRINT_EXPR": [
                    "self",
                    "pc"
                ],
                "PRINT_ITEM": [
                    "self",
                    "pc"
                ],
                "PRINT_ITEM_TO": [
                    "self",
                    "pc"
                ],
                "PRINT_NEWLINE": [
                    "self",
                    "pc"
                ],
                "PRINT_NEWLINE_TO": [
                    "self",
                    "pc"
                ],
                "BREAK_LOOP": [
                    "self",
                    "pc"
                ],
                "LOAD_LOCALS": [
                    "self",
                    "pc"
                ],
                "RETURN_VALUE": [
                    "self",
                    "pc"
                ],
                "IMPORT_STAR": [
                    "self",
                    "pc"
                ],
                "EXEC_STMT": [
                    "self",
                    "pc"
                ],
                "POP_BLOCK": [
                    "self",
                    "pc"
                ],
                "END_FINALLY": [
                    "self",
                    "pc"
                ],
                "BUILD_CLASS": [
                    "self",
                    "pc"
                ],
                "STORE_NAME": [
                    "self",
                    "pc",
                    "namei"
                ],
                "DELETE_NAME": [
                    "self",
                    "pc",
                    "namei"
                ],
                "UNPACK_SEQUENCE": [
                    "self",
                    "pc",
                    "count"
                ],
                "DUP_TOPX": [
                    "self",
                    "pc",
                    "count"
                ],
                "STORE_ATTR": [
                    "self",
                    "pc",
                    "namei"
                ],
                "DELETE_ATTR": [
                    "self",
                    "pc",
                    "namei"
                ],
                "STORE_GLOBAL": [
                    "self",
                    "pc",
                    "namei"
                ],
                "DELETE_GLOBAL": [
                    "self",
                    "pc",
                    "namei"
                ],
                "LOAD_CONST": [
                    "self",
                    "pc",
                    "consti"
                ],
                "LOAD_NAME": [
                    "self",
                    "pc",
                    "namei"
                ],
                "BUILD_TUPLE": [
                    "self",
                    "pc",
                    "count"
                ],
                "BUILD_LIST": [
                    "self",
                    "pc",
                    "count"
                ],
                "BUILD_MAP": [
                    "self",
                    "pc",
                    "zero"
                ],
                "LOAD_ATTR": [
                    "self",
                    "pc",
                    "namei"
                ],
                "COMPARE_OP": [
                    "self",
                    "pc",
                    "opname"
                ],
                "IMPORT_NAME": [
                    "self",
                    "pc",
                    "namei"
                ],
                "IMPORT_FROM": [
                    "self",
                    "pc",
                    "namei"
                ],
                "JUMP_FORWARD": [
                    "self",
                    "pc",
                    "delta"
                ],
                "JUMP_IF_TRUE": [
                    "self",
                    "pc",
                    "delta"
                ],
                "JUMP_IF_FALSE": [
                    "self",
                    "pc",
                    "delta"
                ],
                "JUMP_ABSOLUTE": [
                    "self",
                    "pc",
                    "target"
                ],
                "FOR_LOOP": [
                    "self",
                    "pc",
                    "delta"
                ],
                "LOAD_GLOBAL": [
                    "self",
                    "pc",
                    "namei"
                ],
                "SETUP_LOOP": [
                    "self",
                    "pc",
                    "delta"
                ],
                "SETUP_EXCEPT": [
                    "self",
                    "pc",
                    "delta"
                ],
                "SETUP_FINALLY": [
                    "self",
                    "pc",
                    "delta"
                ],
                "LOAD_FAST": [
                    "self",
                    "pc",
                    "var_num"
                ],
                "STORE_FAST": [
                    "self",
                    "pc",
                    "var_num"
                ],
                "DELETE_FAST": [
                    "self",
                    "pc",
                    "var_num"
                ],
                "LOAD_CLOSURE": [
                    "self",
                    "pc",
                    "i"
                ],
                "LOAD_DEREF": [
                    "self",
                    "pc",
                    "i"
                ],
                "STORE_DEREF": [
                    "self",
                    "pc",
                    "i"
                ],
                "SET_LINENO": [
                    "self",
                    "pc",
                    "lineno"
                ],
                "RAISE_VARARGS": [
                    "self",
                    "pc",
                    "argc"
                ],
                "CALL_FUNCTION": [
                    "self",
                    "pc",
                    "argc"
                ],
                "MAKE_FUNCTION": [
                    "self",
                    "pc",
                    "argc"
                ],
                "MAKE_CLOSURE": [
                    "self",
                    "pc",
                    "argc"
                ],
                "BUILD_SLICE": [
                    "self",
                    "pc",
                    "argc"
                ],
                "EXTENDED_ARG": [
                    "self",
                    "pc",
                    "ext"
                ],
                "CALL_FUNCTION_VAR": [
                    "self",
                    "pc",
                    "argc"
                ],
                "CALL_FUNCTION_KW": [
                    "self",
                    "pc",
                    "argc"
                ],
                "CALL_FUNCTION_VAR_KW": [
                    "self",
                    "pc",
                    "argc"
                ]
            },
            "CXXCoder": {
                "typedef_by_value": [
                    "self",
                    "v"
                ],
                "__init__": [
                    "self",
                    "function",
                    "signature",
                    "name"
                ],
                "evaluate": [
                    "self",
                    "pc",
                    "code"
                ],
                "generate": [
                    "self"
                ],
                "wrapped_code": [
                    "self"
                ],
                "indent": [
                    "self"
                ],
                "dedent": [
                    "self"
                ],
                "emit": [
                    "self",
                    "s"
                ],
                "push": [
                    "self",
                    "v",
                    "t"
                ],
                "pop": [
                    "self"
                ],
                "pushTuple": [
                    "self",
                    "V",
                    "T"
                ],
                "popTuple": [
                    "self"
                ],
                "multiarg": [
                    "self"
                ],
                "unique": [
                    "self"
                ],
                "post": [
                    "self",
                    "pc",
                    "action"
                ],
                "emit_value": [
                    "self",
                    "v"
                ],
                "global_info": [
                    "self",
                    "var_num"
                ],
                "codeup": [
                    "self",
                    "rhs",
                    "rhs_type"
                ],
                "binop": [
                    "self",
                    "pc",
                    "symbol"
                ],
                "BINARY_ADD": [
                    "self",
                    "pc"
                ],
                "BINARY_SUBTRACT": [
                    "self",
                    "pc"
                ],
                "BINARY_MULTIPLY": [
                    "self",
                    "pc"
                ],
                "BINARY_DIVIDE": [
                    "self",
                    "pc"
                ],
                "BINARY_MODULO": [
                    "self",
                    "pc"
                ],
                "BINARY_SUBSCR": [
                    "self",
                    "pc"
                ],
                "STORE_SUBSCR": [
                    "self",
                    "pc"
                ],
                "COMPARE_OP": [
                    "self",
                    "pc",
                    "opname"
                ],
                "PRINT_ITEM": [
                    "self",
                    "pc"
                ],
                "PRINT_NEWLINE": [
                    "self",
                    "pc"
                ],
                "SET_LINENO": [
                    "self",
                    "pc",
                    "lineno"
                ],
                "POP_TOP": [
                    "self",
                    "pc"
                ],
                "LOAD_CONST": [
                    "self",
                    "pc",
                    "consti"
                ],
                "BUILD_TUPLE": [
                    "self",
                    "pc",
                    "count"
                ],
                "LOAD_FAST": [
                    "self",
                    "pc",
                    "var_num"
                ],
                "LOAD_ATTR": [
                    "self",
                    "pc",
                    "namei"
                ],
                "STORE_ATTR": [
                    "self",
                    "pc",
                    "namei"
                ],
                "LOAD_GLOBAL": [
                    "self",
                    "pc",
                    "var_num"
                ],
                "SETUP_LOOP": [
                    "self",
                    "pc",
                    "delta"
                ],
                "FOR_LOOP": [
                    "self",
                    "pc",
                    "delta"
                ],
                "JUMP_ABSOLUTE": [
                    "self",
                    "pc",
                    "target"
                ],
                "POP_BLOCK": [
                    "self",
                    "pc"
                ],
                "STORE_FAST": [
                    "self",
                    "pc",
                    "var_num"
                ],
                "STORE_GLOBAL": [
                    "self",
                    "pc",
                    "var_num"
                ],
                "CALL_FUNCTION": [
                    "self",
                    "pc",
                    "argc"
                ],
                "JUMP_IF_FALSE": [
                    "self",
                    "pc",
                    "delta"
                ],
                "JUMP_FORWARD": [
                    "self",
                    "pc",
                    "delta"
                ],
                "RETURN_VALUE": [
                    "self",
                    "pc"
                ]
            }
        },
        "scipy.weave.slice_handler": {
            "slice_ast_to_dict": [
                "ast_seq"
            ],
            "build_slice_atom": [
                "slice_vars",
                "position"
            ],
            "transform_subscript_list": [
                "subscript_dict"
            ],
            "harvest_subscript_dicts": [
                "ast_list"
            ],
            "transform_slices": [
                "ast_list"
            ]
        },
        "scipy.weave.base_spec": {
            "base_converter": {
                "set_compiler": [
                    "self",
                    "compiler"
                ],
                "type_match": [
                    "self",
                    "value"
                ],
                "build_information": [
                    "self"
                ],
                "type_spec": [
                    "self",
                    "name",
                    "value"
                ],
                "declaration_code": [
                    "self",
                    "templatize"
                ],
                "local_dict_code": [
                    "self"
                ],
                "cleanup_code": [
                    "self"
                ],
                "retrieve_py_variable": [
                    "self",
                    "inline"
                ],
                "py_reference": [
                    "self"
                ],
                "py_pointer": [
                    "self"
                ],
                "py_variable": [
                    "self"
                ],
                "reference": [
                    "self"
                ],
                "pointer": [
                    "self"
                ],
                "init_flag": [
                    "self"
                ],
                "variable": [
                    "self"
                ],
                "variable_as_string": [
                    "self"
                ]
            },
            "arg_spec_list": {
                "build_information": [
                    "self"
                ],
                "py_references": [
                    "self"
                ],
                "py_pointers": [
                    "self"
                ],
                "py_variables": [
                    "self"
                ],
                "references": [
                    "self"
                ],
                "pointers": [
                    "self"
                ],
                "variables": [
                    "self"
                ],
                "init_flags": [
                    "self"
                ],
                "variable_as_strings": [
                    "self"
                ]
            }
        },
        "scipy.weave.c_spec": {
            "common_base_converter": {
                "__init__": [
                    "self"
                ],
                "init_info": [
                    "self"
                ],
                "info_object": [
                    "self"
                ],
                "generate_build_info": [
                    "self"
                ],
                "type_match": [
                    "self",
                    "value"
                ],
                "get_var_type": [
                    "self",
                    "value"
                ],
                "type_spec": [
                    "self",
                    "name",
                    "value"
                ],
                "template_vars": [
                    "self",
                    "inline"
                ],
                "py_to_c_code": [
                    "self"
                ],
                "c_to_py_code": [
                    "self"
                ],
                "declaration_code": [
                    "self",
                    "templatize",
                    "inline"
                ],
                "cleanup_code": [
                    "self"
                ],
                "__repr__": [
                    "self"
                ],
                "__cmp__": [
                    "self",
                    "other"
                ]
            },
            "module_converter": {
                "init_info": [
                    "self"
                ]
            },
            "string_converter": {
                "init_info": [
                    "self"
                ],
                "c_to_py_code": [
                    "self"
                ]
            },
            "unicode_converter": {
                "init_info": [
                    "self"
                ],
                "declaration_code": [
                    "self",
                    "templatize",
                    "inline"
                ]
            },
            "file_converter": {
                "init_info": [
                    "self"
                ],
                "c_to_py_code": [
                    "self"
                ]
            },
            "scalar_converter": {
                "init_info": [
                    "self"
                ]
            },
            "int_converter": {
                "init_info": [
                    "self"
                ]
            },
            "long_converter": {
                "init_info": [
                    "self"
                ]
            },
            "float_converter": {
                "init_info": [
                    "self"
                ]
            },
            "complex_converter": {
                "init_info": [
                    "self"
                ]
            },
            "scxx_converter": {
                "init_info": [
                    "self"
                ]
            },
            "list_converter": {
                "init_info": [
                    "self"
                ]
            },
            "tuple_converter": {
                "init_info": [
                    "self"
                ]
            },
            "dict_converter": {
                "init_info": [
                    "self"
                ]
            },
            "instance_converter": {
                "init_info": [
                    "self"
                ]
            },
            "catchall_converter": {
                "init_info": [
                    "self"
                ],
                "type_match": [
                    "self",
                    "value"
                ]
            }
        },
        "scipy.weave.build_tools": {
            "_init_posix": [],
            "create_extension": [
                "module_path"
            ],
            "build_extension": [
                "module_path",
                "compiler_name",
                "build_dir",
                "temp_dir",
                "verbose"
            ],
            "configure_sys_argv": [
                "compiler_name",
                "temp_dir",
                "build_dir"
            ],
            "restore_sys_argv": [],
            "configure_python_path": [
                "build_dir"
            ],
            "choose_compiler": [
                "compiler_name"
            ],
            "gcc_exists": [
                "name"
            ],
            "msvc_exists": [],
            "configure_temp_dir": [
                "temp_dir"
            ],
            "configure_build_dir": [
                "build_dir"
            ],
            "CompileError": {}
        },
        "scipy.weave._dumbdbm_patched": {
            "open": [
                "file",
                "flag",
                "mode"
            ],
            "_Database": {
                "__init__": [
                    "self",
                    "file"
                ],
                "_update": [
                    "self"
                ],
                "_commit": [
                    "self"
                ],
                "__getitem__": [
                    "self",
                    "key"
                ],
                "__contains__": [
                    "self",
                    "key"
                ],
                "_addval": [
                    "self",
                    "val"
                ],
                "_setval": [
                    "self",
                    "pos",
                    "val"
                ],
                "_addkey": [
                    "self",
                    "key",
                    "pos_and_siz"
                ],
                "__setitem__": [
                    "self",
                    "key",
                    "val"
                ],
                "__delitem__": [
                    "self",
                    "key"
                ],
                "keys": [
                    "self"
                ],
                "has_key": [
                    "self",
                    "key"
                ],
                "__len__": [
                    "self"
                ],
                "close": [
                    "self"
                ]
            }
        },
        "scipy.weave.inline_tools": {
            "inline": [
                "code",
                "arg_names",
                "local_dict",
                "global_dict",
                "force",
                "compiler",
                "verbose",
                "support_code",
                "headers",
                "customize",
                "type_converters",
                "auto_downcast",
                "newarr_converter"
            ],
            "attempt_function_call": [
                "code",
                "local_dict",
                "global_dict"
            ],
            "inline_function_code": [
                "code",
                "arg_names",
                "local_dict",
                "global_dict",
                "auto_downcast",
                "type_converters",
                "compiler"
            ],
            "compile_function": [
                "code",
                "arg_names",
                "local_dict",
                "global_dict",
                "module_dir",
                "compiler",
                "verbose",
                "support_code",
                "headers",
                "customize",
                "type_converters",
                "auto_downcast"
            ],
            "inline_ext_function": {
                "function_declaration_code": [
                    "self"
                ],
                "template_declaration_code": [
                    "self"
                ],
                "parse_tuple_code": [
                    "self"
                ],
                "arg_declaration_code": [
                    "self"
                ],
                "arg_cleanup_code": [
                    "self"
                ],
                "arg_local_dict_code": [
                    "self"
                ],
                "function_code": [
                    "self"
                ],
                "python_function_definition_code": [
                    "self"
                ]
            },
            "inline_ext_module": {
                "__init__": [
                    "self",
                    "name",
                    "compiler"
                ]
            }
        },
        "scipy.weave.ext_tools": {
            "generate_file_name": [
                "module_name",
                "module_location"
            ],
            "generate_module": [
                "module_string",
                "module_file"
            ],
            "assign_variable_types": [
                "variables",
                "local_dict",
                "global_dict",
                "auto_downcast",
                "type_converters"
            ],
            "downcast": [
                "var_specs"
            ],
            "indent": [
                "st",
                "spaces"
            ],
            "format_error_msg": [
                "errors"
            ],
            "ext_function_from_specs": {
                "__init__": [
                    "self",
                    "name",
                    "code_block",
                    "arg_specs"
                ],
                "header_code": [
                    "self"
                ],
                "function_declaration_code": [
                    "self"
                ],
                "template_declaration_code": [
                    "self"
                ],
                "parse_tuple_code": [
                    "self"
                ],
                "arg_declaration_code": [
                    "self"
                ],
                "arg_cleanup_code": [
                    "self"
                ],
                "arg_local_dict_code": [
                    "self"
                ],
                "function_code": [
                    "self"
                ],
                "python_function_definition_code": [
                    "self"
                ],
                "set_compiler": [
                    "self",
                    "compiler"
                ]
            },
            "ext_function": {
                "__init__": [
                    "self",
                    "name",
                    "code_block",
                    "args",
                    "local_dict",
                    "global_dict",
                    "auto_downcast",
                    "type_converters"
                ]
            },
            "ext_module": {
                "__init__": [
                    "self",
                    "name",
                    "compiler"
                ],
                "add_function": [
                    "self",
                    "func"
                ],
                "module_code": [
                    "self"
                ],
                "arg_specs": [
                    "self"
                ],
                "build_information": [
                    "self"
                ],
                "get_headers": [
                    "self"
                ],
                "warning_code": [
                    "self"
                ],
                "header_code": [
                    "self"
                ],
                "support_code": [
                    "self"
                ],
                "function_code": [
                    "self"
                ],
                "python_function_definition_code": [
                    "self"
                ],
                "module_init_code": [
                    "self"
                ],
                "generate_file": [
                    "self",
                    "file_name",
                    "location"
                ],
                "set_compiler": [
                    "self",
                    "compiler"
                ],
                "build_kw_and_file": [
                    "self",
                    "location",
                    "kw"
                ],
                "setup_extension": [
                    "self",
                    "location"
                ],
                "compile": [
                    "self",
                    "location",
                    "compiler",
                    "verbose"
                ]
            }
        },
        "scipy.weave.vtk_spec": {
            "vtk_converter": {
                "__init__": [
                    "self",
                    "class_name"
                ],
                "init_info": [
                    "self"
                ],
                "type_match": [
                    "self",
                    "value"
                ],
                "generate_build_info": [
                    "self"
                ],
                "py_to_c_code": [
                    "self"
                ],
                "c_to_py_code": [
                    "self"
                ],
                "type_spec": [
                    "self",
                    "name",
                    "value"
                ],
                "__cmp__": [
                    "self",
                    "other"
                ]
            }
        },
        "scipy.weave.setupscons": {
            "configuration": [
                "parent_package",
                "top_path"
            ]
        },
        "scipy.weave.weave_version": {},
        "scipy.fftpack.helper": {
            "rfftfreq": [
                "n",
                "d"
            ]
        },
        "scipy.fftpack.setup": {
            "configuration": [
                "parent_package",
                "top_path"
            ]
        },
        "scipy.fftpack": {},
        "scipy.fftpack.basic": {
            "istype": [
                "arr",
                "typeclass"
            ],
            "_datacopied": [
                "arr",
                "original"
            ],
            "_is_safe_size": [
                "n"
            ],
            "_fake_crfft": [
                "x",
                "n"
            ],
            "_fake_cfft": [
                "x",
                "n"
            ],
            "_fake_rfft": [
                "x",
                "n"
            ],
            "_fake_cfftnd": [
                "x",
                "shape"
            ],
            "_asfarray": [
                "x"
            ],
            "_fix_shape": [
                "x",
                "n",
                "axis"
            ],
            "_raw_fft": [
                "x",
                "n",
                "axis",
                "direction",
                "overwrite_x",
                "work_function"
            ],
            "fft": [
                "x",
                "n",
                "axis",
                "overwrite_x"
            ],
            "ifft": [
                "x",
                "n",
                "axis",
                "overwrite_x"
            ],
            "rfft": [
                "x",
                "n",
                "axis",
                "overwrite_x"
            ],
            "irfft": [
                "x",
                "n",
                "axis",
                "overwrite_x"
            ],
            "_raw_fftnd": [
                "x",
                "s",
                "axes",
                "direction",
                "overwrite_x",
                "work_function"
            ],
            "fftn": [
                "x",
                "shape",
                "axes",
                "overwrite_x"
            ],
            "_raw_fftn_dispatch": [
                "x",
                "shape",
                "axes",
                "overwrite_x",
                "direction"
            ],
            "ifftn": [
                "x",
                "shape",
                "axes",
                "overwrite_x"
            ],
            "fft2": [
                "x",
                "shape",
                "axes",
                "overwrite_x"
            ],
            "ifft2": [
                "x",
                "shape",
                "axes",
                "overwrite_x"
            ]
        },
        "scipy.fftpack.pseudo_diffs": {
            "diff": [
                "x",
                "order",
                "period",
                "_cache"
            ],
            "tilbert": [
                "x",
                "h",
                "period",
                "_cache"
            ],
            "itilbert": [
                "x",
                "h",
                "period",
                "_cache"
            ],
            "hilbert": [
                "x",
                "_cache"
            ],
            "ihilbert": [
                "x"
            ],
            "cs_diff": [
                "x",
                "a",
                "b",
                "period",
                "_cache"
            ],
            "sc_diff": [
                "x",
                "a",
                "b",
                "period",
                "_cache"
            ],
            "ss_diff": [
                "x",
                "a",
                "b",
                "period",
                "_cache"
            ],
            "cc_diff": [
                "x",
                "a",
                "b",
                "period",
                "_cache"
            ],
            "shift": [
                "x",
                "a",
                "period",
                "_cache"
            ]
        },
        "scipy.fftpack.realtransforms": {
            "dct": [
                "x",
                "type",
                "n",
                "axis",
                "norm",
                "overwrite_x"
            ],
            "idct": [
                "x",
                "type",
                "n",
                "axis",
                "norm",
                "overwrite_x"
            ],
            "_dct": [
                "x",
                "type",
                "n",
                "axis",
                "overwrite_x",
                "normalize"
            ],
            "dst": [
                "x",
                "type",
                "n",
                "axis",
                "norm",
                "overwrite_x"
            ],
            "idst": [
                "x",
                "type",
                "n",
                "axis",
                "norm",
                "overwrite_x"
            ],
            "_dst": [
                "x",
                "type",
                "n",
                "axis",
                "overwrite_x",
                "normalize"
            ]
        },
        "scipy.fftpack.fftpack_version": {},
        "scipy.fftpack.setupscons": {
            "configuration": [
                "parent_package",
                "top_path"
            ]
        },
        "scipy._build_utils._fortran": {
            "_uses_veclib": [
                "info"
            ],
            "_uses_mkl": [
                "info"
            ],
            "needs_g77_abi_wrapper": [
                "info"
            ]
        },
        "scipy._build_utils": {},
        "scipy.integrate._ode": {
            "find_integrator": [
                "name"
            ],
            "ode": {
                "__init__": [
                    "self",
                    "f",
                    "jac"
                ],
                "y": [
                    "self"
                ],
                "set_initial_value": [
                    "self",
                    "y",
                    "t"
                ],
                "set_integrator": [
                    "self",
                    "name"
                ],
                "integrate": [
                    "self",
                    "t",
                    "step",
                    "relax"
                ],
                "successful": [
                    "self"
                ],
                "set_f_params": [
                    "self"
                ],
                "set_jac_params": [
                    "self"
                ]
            },
            "complex_ode": {
                "__init__": [
                    "self",
                    "f",
                    "jac"
                ],
                "_wrap": [
                    "self",
                    "t",
                    "y"
                ],
                "_wrap_jac": [
                    "self",
                    "t",
                    "y"
                ],
                "y": [
                    "self"
                ],
                "set_integrator": [
                    "self",
                    "name"
                ],
                "set_initial_value": [
                    "self",
                    "y",
                    "t"
                ],
                "integrate": [
                    "self",
                    "t",
                    "step",
                    "relax"
                ]
            },
            "IntegratorConcurrencyError": {
                "__init__": [
                    "self",
                    "name"
                ]
            },
            "IntegratorBase": {
                "acquire_new_handle": [
                    "self"
                ],
                "check_handle": [
                    "self"
                ],
                "reset": [
                    "self",
                    "n",
                    "has_jac"
                ],
                "run": [
                    "self",
                    "f",
                    "jac",
                    "y0",
                    "t0",
                    "t1",
                    "f_params",
                    "jac_params"
                ],
                "step": [
                    "self",
                    "f",
                    "jac",
                    "y0",
                    "t0",
                    "t1",
                    "f_params",
                    "jac_params"
                ],
                "run_relax": [
                    "self",
                    "f",
                    "jac",
                    "y0",
                    "t0",
                    "t1",
                    "f_params",
                    "jac_params"
                ]
            },
            "vode": {
                "__init__": [
                    "self",
                    "method",
                    "with_jacobian",
                    "rtol",
                    "atol",
                    "lband",
                    "uband",
                    "order",
                    "nsteps",
                    "max_step",
                    "min_step",
                    "first_step"
                ],
                "reset": [
                    "self",
                    "n",
                    "has_jac"
                ],
                "run": [
                    "self"
                ],
                "step": [
                    "self"
                ],
                "run_relax": [
                    "self"
                ]
            },
            "zvode": {
                "reset": [
                    "self",
                    "n",
                    "has_jac"
                ],
                "run": [
                    "self"
                ]
            },
            "dopri5": {
                "__init__": [
                    "self",
                    "rtol",
                    "atol",
                    "nsteps",
                    "max_step",
                    "first_step",
                    "safety",
                    "ifactor",
                    "dfactor",
                    "beta",
                    "method"
                ],
                "reset": [
                    "self",
                    "n",
                    "has_jac"
                ],
                "run": [
                    "self",
                    "f",
                    "jac",
                    "y0",
                    "t0",
                    "t1",
                    "f_params",
                    "jac_params"
                ],
                "_solout": [
                    "self"
                ]
            },
            "dop853": {
                "__init__": [
                    "self",
                    "rtol",
                    "atol",
                    "nsteps",
                    "max_step",
                    "first_step",
                    "safety",
                    "ifactor",
                    "dfactor",
                    "beta",
                    "method"
                ],
                "reset": [
                    "self",
                    "n",
                    "has_jac"
                ]
            },
            "lsoda": {
                "__init__": [
                    "self",
                    "with_jacobian",
                    "rtol",
                    "atol",
                    "lband",
                    "uband",
                    "nsteps",
                    "max_step",
                    "min_step",
                    "first_step",
                    "ixpr",
                    "max_hnil",
                    "max_order_ns",
                    "max_order_s",
                    "method"
                ],
                "reset": [
                    "self",
                    "n",
                    "has_jac"
                ],
                "run": [
                    "self",
                    "f",
                    "jac",
                    "y0",
                    "t0",
                    "t1",
                    "f_params",
                    "jac_params"
                ],
                "step": [
                    "self"
                ],
                "run_relax": [
                    "self"
                ]
            }
        },
        "scipy.integrate.quadrature": {
            "fixed_quad": [
                "func",
                "a",
                "b",
                "args",
                "n"
            ],
            "vectorize1": [
                "func",
                "args",
                "vec_func"
            ],
            "quadrature": [
                "func",
                "a",
                "b",
                "args",
                "tol",
                "rtol",
                "maxiter",
                "vec_func"
            ],
            "tupleset": [
                "t",
                "i",
                "value"
            ],
            "cumtrapz": [
                "y",
                "x",
                "dx",
                "axis",
                "initial"
            ],
            "_basic_simps": [
                "y",
                "start",
                "stop",
                "x",
                "dx",
                "axis"
            ],
            "simps": [
                "y",
                "x",
                "dx",
                "axis",
                "even"
            ],
            "romb": [
                "y",
                "dx",
                "axis",
                "show"
            ],
            "_difftrap": [
                "function",
                "interval",
                "numtraps"
            ],
            "_romberg_diff": [
                "b",
                "c",
                "k"
            ],
            "_printresmat": [
                "function",
                "interval",
                "resmat"
            ],
            "romberg": [
                "function",
                "a",
                "b",
                "args",
                "tol",
                "rtol",
                "show",
                "divmax",
                "vec_func"
            ],
            "newton_cotes": [
                "rn",
                "equal"
            ],
            "AccuracyWarning": {}
        },
        "scipy.integrate.setup": {
            "configuration": [
                "parent_package",
                "top_path"
            ]
        },
        "scipy.integrate": {},
        "scipy.integrate.quadpack": {
            "quad_explain": [
                "output"
            ],
            "quad": [
                "func",
                "a",
                "b",
                "args",
                "full_output",
                "epsabs",
                "epsrel",
                "limit",
                "points",
                "weight",
                "wvar",
                "wopts",
                "maxp1",
                "limlst"
            ],
            "_quad": [
                "func",
                "a",
                "b",
                "args",
                "full_output",
                "epsabs",
                "epsrel",
                "limit",
                "points"
            ],
            "_quad_weight": [
                "func",
                "a",
                "b",
                "args",
                "full_output",
                "epsabs",
                "epsrel",
                "limlst",
                "limit",
                "maxp1",
                "weight",
                "wvar",
                "wopts"
            ],
            "_infunc": [
                "x",
                "func",
                "gfun",
                "hfun",
                "more_args"
            ],
            "dblquad": [
                "func",
                "a",
                "b",
                "gfun",
                "hfun",
                "args",
                "epsabs",
                "epsrel"
            ],
            "_infunc2": [
                "y",
                "x",
                "func",
                "qfun",
                "rfun",
                "more_args"
            ],
            "tplquad": [
                "func",
                "a",
                "b",
                "gfun",
                "hfun",
                "qfun",
                "rfun",
                "args",
                "epsabs",
                "epsrel"
            ]
        },
        "scipy.integrate.odepack": {
            "odeint": [
                "func",
                "y0",
                "t",
                "args",
                "Dfun",
                "col_deriv",
                "full_output",
                "ml",
                "mu",
                "rtol",
                "atol",
                "tcrit",
                "h0",
                "hmax",
                "hmin",
                "ixpr",
                "mxstep",
                "mxhnil",
                "mxordn",
                "mxords",
                "printmessg"
            ]
        },
        "scipy.integrate.setupscons": {
            "configuration": [
                "parent_package",
                "top_path"
            ]
        },
        "scipy.odr.setup": {
            "configuration": [
                "parent_package",
                "top_path"
            ]
        },
        "scipy.odr": {},
        "scipy.odr.odrpack": {
            "_conv": [
                "obj",
                "dtype"
            ],
            "_report_error": [
                "info"
            ],
            "Data": {
                "__init__": [
                    "self",
                    "x",
                    "y",
                    "we",
                    "wd",
                    "fix",
                    "meta"
                ],
                "set_meta": [
                    "self"
                ],
                "__getattr__": [
                    "self",
                    "attr"
                ]
            },
            "RealData": {
                "__init__": [
                    "self",
                    "x",
                    "y",
                    "sx",
                    "sy",
                    "covx",
                    "covy",
                    "fix",
                    "meta"
                ],
                "_sd2wt": [
                    "self",
                    "sd"
                ],
                "_cov2wt": [
                    "self",
                    "cov"
                ],
                "__getattr__": [
                    "self",
                    "attr"
                ]
            },
            "Model": {
                "__init__": [
                    "self",
                    "fcn",
                    "fjacb",
                    "fjacd",
                    "extra_args",
                    "estimate",
                    "implicit",
                    "meta"
                ],
                "set_meta": [
                    "self"
                ],
                "__getattr__": [
                    "self",
                    "attr"
                ]
            },
            "Output": {
                "__init__": [
                    "self",
                    "output"
                ],
                "pprint": [
                    "self"
                ]
            },
            "ODR": {
                "__init__": [
                    "self",
                    "data",
                    "model",
                    "beta0",
                    "delta0",
                    "ifixb",
                    "ifixx",
                    "job",
                    "iprint",
                    "errfile",
                    "rptfile",
                    "ndigit",
                    "taufac",
                    "sstol",
                    "partol",
                    "maxit",
                    "stpb",
                    "stpd",
                    "sclb",
                    "scld",
                    "work",
                    "iwork"
                ],
                "_check": [
                    "self"
                ],
                "_gen_work": [
                    "self"
                ],
                "set_job": [
                    "self",
                    "fit_type",
                    "deriv",
                    "var_calc",
                    "del_init",
                    "restart"
                ],
                "set_iprint": [
                    "self",
                    "init",
                    "so_init",
                    "iter",
                    "so_iter",
                    "iter_step",
                    "final",
                    "so_final"
                ],
                "run": [
                    "self"
                ],
                "restart": [
                    "self",
                    "iter"
                ]
            }
        },
        "scipy.odr.models": {
            "_lin_fcn": [
                "B",
                "x"
            ],
            "_lin_fjb": [
                "B",
                "x"
            ],
            "_lin_fjd": [
                "B",
                "x"
            ],
            "_lin_est": [
                "data"
            ],
            "_poly_fcn": [
                "B",
                "x",
                "powers"
            ],
            "_poly_fjacb": [
                "B",
                "x",
                "powers"
            ],
            "_poly_fjacd": [
                "B",
                "x",
                "powers"
            ],
            "_exp_fcn": [
                "B",
                "x"
            ],
            "_exp_fjd": [
                "B",
                "x"
            ],
            "_exp_fjb": [
                "B",
                "x"
            ],
            "_exp_est": [
                "data"
            ],
            "polynomial": [
                "order"
            ],
            "_unilin": [
                "B",
                "x"
            ],
            "_unilin_fjd": [
                "B",
                "x"
            ],
            "_unilin_fjb": [
                "B",
                "x"
            ],
            "_unilin_est": [
                "data"
            ],
            "_quadratic": [
                "B",
                "x"
            ],
            "_quad_fjd": [
                "B",
                "x"
            ],
            "_quad_fjb": [
                "B",
                "x"
            ],
            "_quad_est": [
                "data"
            ]
        },
        "scipy.odr.setupscons": {
            "configuration": [
                "parent_package",
                "top_path"
            ]
        },
        "scipy.spatial.distance": {
            "_copy_array_if_base_present": [
                "a"
            ],
            "_copy_arrays_if_base_present": [
                "T"
            ],
            "_convert_to_bool": [
                "X"
            ],
            "_convert_to_double": [
                "X"
            ],
            "_validate_vector": [
                "u",
                "dtype"
            ],
            "minkowski": [
                "u",
                "v",
                "p"
            ],
            "wminkowski": [
                "u",
                "v",
                "p",
                "w"
            ],
            "euclidean": [
                "u",
                "v"
            ],
            "sqeuclidean": [
                "u",
                "v"
            ],
            "cosine": [
                "u",
                "v"
            ],
            "correlation": [
                "u",
                "v"
            ],
            "hamming": [
                "u",
                "v"
            ],
            "jaccard": [
                "u",
                "v"
            ],
            "kulsinski": [
                "u",
                "v"
            ],
            "seuclidean": [
                "u",
                "v",
                "V"
            ],
            "cityblock": [
                "u",
                "v"
            ],
            "mahalanobis": [
                "u",
                "v",
                "VI"
            ],
            "chebyshev": [
                "u",
                "v"
            ],
            "braycurtis": [
                "u",
                "v"
            ],
            "canberra": [
                "u",
                "v"
            ],
            "_nbool_correspond_all": [
                "u",
                "v"
            ],
            "_nbool_correspond_ft_tf": [
                "u",
                "v"
            ],
            "yule": [
                "u",
                "v"
            ],
            "matching": [
                "u",
                "v"
            ],
            "dice": [
                "u",
                "v"
            ],
            "rogerstanimoto": [
                "u",
                "v"
            ],
            "russellrao": [
                "u",
                "v"
            ],
            "sokalmichener": [
                "u",
                "v"
            ],
            "sokalsneath": [
                "u",
                "v"
            ],
            "pdist": [
                "X",
                "metric",
                "p",
                "w",
                "V",
                "VI"
            ],
            "squareform": [
                "X",
                "force",
                "checks"
            ],
            "is_valid_dm": [
                "D",
                "tol",
                "throw",
                "name",
                "warning"
            ],
            "is_valid_y": [
                "y",
                "warning",
                "throw",
                "name"
            ],
            "num_obs_dm": [
                "d"
            ],
            "num_obs_y": [
                "Y"
            ],
            "cdist": [
                "XA",
                "XB",
                "metric",
                "p",
                "V",
                "VI",
                "w"
            ]
        },
        "scipy.spatial.kdtree": {
            "minkowski_distance_p": [
                "x",
                "y",
                "p"
            ],
            "minkowski_distance": [
                "x",
                "y",
                "p"
            ],
            "distance_matrix": [
                "x",
                "y",
                "p",
                "threshold"
            ],
            "Rectangle": {
                "__init__": [
                    "self",
                    "maxes",
                    "mins"
                ],
                "__repr__": [
                    "self"
                ],
                "volume": [
                    "self"
                ],
                "split": [
                    "self",
                    "d",
                    "split"
                ],
                "min_distance_point": [
                    "self",
                    "x",
                    "p"
                ],
                "max_distance_point": [
                    "self",
                    "x",
                    "p"
                ],
                "min_distance_rectangle": [
                    "self",
                    "other",
                    "p"
                ],
                "max_distance_rectangle": [
                    "self",
                    "other",
                    "p"
                ]
            },
            "KDTree": {
                "__init__": [
                    "self",
                    "data",
                    "leafsize"
                ],
                "__build": [
                    "self",
                    "idx",
                    "maxes",
                    "mins"
                ],
                "__query": [
                    "self",
                    "x",
                    "k",
                    "eps",
                    "p",
                    "distance_upper_bound"
                ],
                "query": [
                    "self",
                    "x",
                    "k",
                    "eps",
                    "p",
                    "distance_upper_bound"
                ],
                "__query_ball_point": [
                    "self",
                    "x",
                    "r",
                    "p",
                    "eps"
                ],
                "query_ball_point": [
                    "self",
                    "x",
                    "r",
                    "p",
                    "eps"
                ],
                "query_ball_tree": [
                    "self",
                    "other",
                    "r",
                    "p",
                    "eps"
                ],
                "query_pairs": [
                    "self",
                    "r",
                    "p",
                    "eps"
                ],
                "count_neighbors": [
                    "self",
                    "other",
                    "r",
                    "p"
                ],
                "sparse_distance_matrix": [
                    "self",
                    "other",
                    "max_distance",
                    "p"
                ]
            }
        },
        "scipy.spatial.setup": {
            "configuration": [
                "parent_package",
                "top_path"
            ]
        },
        "scipy.spatial": {},
        "scipy.spatial.setupscons": {
            "configuration": [
                "parent_package",
                "top_path"
            ]
        },
        "scipy.spatial._plotutils": {
            "_held_figure": [
                "func",
                "obj",
                "ax"
            ],
            "_adjust_bounds": [
                "ax",
                "points"
            ],
            "delaunay_plot_2d": [
                "tri",
                "ax"
            ],
            "convex_hull_plot_2d": [
                "hull",
                "ax"
            ],
            "voronoi_plot_2d": [
                "vor",
                "ax"
            ]
        },
        "scipy.optimize._root": {
            "root": [
                "fun",
                "x0",
                "args",
                "method",
                "jac",
                "tol",
                "callback",
                "options"
            ],
            "_root_leastsq": [
                "func",
                "x0",
                "args",
                "jac",
                "col_deriv",
                "xtol",
                "ftol",
                "gtol",
                "maxiter",
                "eps",
                "factor",
                "diag"
            ],
            "_root_nonlin_solve": [
                "func",
                "x0",
                "args",
                "jac",
                "_callback",
                "_method",
                "nit",
                "disp",
                "maxiter",
                "ftol",
                "fatol",
                "xtol",
                "xatol",
                "tol_norm",
                "line_search",
                "jac_options"
            ]
        },
        "scipy.optimize.setup": {
            "configuration": [
                "parent_package",
                "top_path"
            ]
        },
        "scipy.optimize": {},
        "scipy.optimize._minimize": {
            "minimize": [
                "fun",
                "x0",
                "args",
                "method",
                "jac",
                "hess",
                "hessp",
                "bounds",
                "constraints",
                "tol",
                "callback",
                "options"
            ],
            "minimize_scalar": [
                "fun",
                "bracket",
                "bounds",
                "args",
                "method",
                "tol",
                "options"
            ]
        },
        "scipy.optimize.nnls": {
            "nnls": [
                "A",
                "b"
            ]
        },
        "scipy.optimize.lbfgsb": {
            "fmin_l_bfgs_b": [
                "func",
                "x0",
                "fprime",
                "args",
                "approx_grad",
                "bounds",
                "m",
                "factr",
                "pgtol",
                "epsilon",
                "iprint",
                "maxfun",
                "maxiter",
                "disp",
                "callback"
            ],
            "_minimize_lbfgsb": [
                "fun",
                "x0",
                "args",
                "jac",
                "bounds",
                "disp",
                "maxcor",
                "ftol",
                "gtol",
                "eps",
                "maxfun",
                "maxiter",
                "iprint",
                "callback"
            ]
        },
        "scipy.optimize.anneal": {
            "anneal": [
                "func",
                "x0",
                "args",
                "schedule",
                "full_output",
                "T0",
                "Tf",
                "maxeval",
                "maxaccept",
                "maxiter",
                "boltzmann",
                "learn_rate",
                "feps",
                "quench",
                "m",
                "n",
                "lower",
                "upper",
                "dwell",
                "disp"
            ],
            "_minimize_anneal": [
                "func",
                "x0",
                "args",
                "schedule",
                "T0",
                "Tf",
                "maxfev",
                "maxaccept",
                "maxiter",
                "boltzmann",
                "learn_rate",
                "ftol",
                "quench",
                "m",
                "n",
                "lower",
                "upper",
                "dwell",
                "disp"
            ],
            "base_schedule": {
                "__init__": [
                    "self"
                ],
                "init": [
                    "self"
                ],
                "getstart_temp": [
                    "self",
                    "best_state"
                ],
                "accept_test": [
                    "self",
                    "dE"
                ],
                "update_guess": [
                    "self",
                    "x0"
                ],
                "update_temp": [
                    "self",
                    "x0"
                ]
            },
            "fast_sa": {
                "init": [
                    "self"
                ],
                "update_guess": [
                    "self",
                    "x0"
                ],
                "update_temp": [
                    "self"
                ]
            },
            "cauchy_sa": {
                "update_guess": [
                    "self",
                    "x0"
                ],
                "update_temp": [
                    "self"
                ]
            },
            "boltzmann_sa": {
                "update_guess": [
                    "self",
                    "x0"
                ],
                "update_temp": [
                    "self"
                ]
            },
            "_state": {
                "__init__": [
                    "self"
                ]
            }
        },
        "scipy.optimize.minpack": {
            "_check_func": [
                "checker",
                "argname",
                "thefunc",
                "x0",
                "args",
                "numinputs",
                "output_shape"
            ],
            "fsolve": [
                "func",
                "x0",
                "args",
                "fprime",
                "full_output",
                "col_deriv",
                "xtol",
                "maxfev",
                "band",
                "epsfcn",
                "factor",
                "diag"
            ],
            "_root_hybr": [
                "func",
                "x0",
                "args",
                "jac",
                "col_deriv",
                "xtol",
                "maxfev",
                "band",
                "eps",
                "factor",
                "diag",
                "full_output"
            ],
            "leastsq": [
                "func",
                "x0",
                "args",
                "Dfun",
                "full_output",
                "col_deriv",
                "ftol",
                "xtol",
                "gtol",
                "maxfev",
                "epsfcn",
                "factor",
                "diag"
            ],
            "_general_function": [
                "params",
                "xdata",
                "ydata",
                "function"
            ],
            "_weighted_general_function": [
                "params",
                "xdata",
                "ydata",
                "function",
                "weights"
            ],
            "curve_fit": [
                "f",
                "xdata",
                "ydata",
                "p0",
                "sigma"
            ],
            "check_gradient": [
                "fcn",
                "Dfcn",
                "x0",
                "args",
                "col_deriv"
            ],
            "fixed_point": [
                "func",
                "x0",
                "args",
                "xtol",
                "maxiter"
            ]
        },
        "scipy.optimize.slsqp": {
            "approx_jacobian": [
                "x",
                "func",
                "epsilon"
            ],
            "fmin_slsqp": [
                "func",
                "x0",
                "eqcons",
                "f_eqcons",
                "ieqcons",
                "f_ieqcons",
                "bounds",
                "fprime",
                "fprime_eqcons",
                "fprime_ieqcons",
                "args",
                "iter",
                "acc",
                "iprint",
                "disp",
                "full_output",
                "epsilon"
            ],
            "_minimize_slsqp": [
                "func",
                "x0",
                "args",
                "jac",
                "bounds",
                "constraints",
                "maxiter",
                "ftol",
                "iprint",
                "disp",
                "eps"
            ]
        },
        "scipy.optimize.linesearch": {
            "line_search_wolfe1": [
                "f",
                "fprime",
                "xk",
                "pk",
                "gfk",
                "old_fval",
                "old_old_fval",
                "args",
                "c1",
                "c2",
                "amax",
                "amin",
                "xtol"
            ],
            "scalar_search_wolfe1": [
                "phi",
                "derphi",
                "phi0",
                "old_phi0",
                "derphi0",
                "c1",
                "c2",
                "amax",
                "amin",
                "xtol"
            ],
            "line_search_wolfe2": [
                "f",
                "myfprime",
                "xk",
                "pk",
                "gfk",
                "old_fval",
                "old_old_fval",
                "args",
                "c1",
                "c2",
                "amax"
            ],
            "scalar_search_wolfe2": [
                "phi",
                "derphi",
                "phi0",
                "old_phi0",
                "derphi0",
                "c1",
                "c2",
                "amax"
            ],
            "_cubicmin": [
                "a",
                "fa",
                "fpa",
                "b",
                "fb",
                "c",
                "fc"
            ],
            "_quadmin": [
                "a",
                "fa",
                "fpa",
                "b",
                "fb"
            ],
            "_zoom": [
                "a_lo",
                "a_hi",
                "phi_lo",
                "phi_hi",
                "derphi_lo",
                "phi",
                "derphi",
                "phi0",
                "derphi0",
                "c1",
                "c2"
            ],
            "line_search_armijo": [
                "f",
                "xk",
                "pk",
                "gfk",
                "old_fval",
                "args",
                "c1",
                "alpha0"
            ],
            "line_search_BFGS": [
                "f",
                "xk",
                "pk",
                "gfk",
                "old_fval",
                "args",
                "c1",
                "alpha0"
            ],
            "scalar_search_armijo": [
                "phi",
                "phi0",
                "derphi0",
                "c1",
                "alpha0",
                "amin"
            ]
        },
        "scipy.optimize._basinhopping": {
            "basinhopping": [
                "func",
                "x0",
                "niter",
                "T",
                "stepsize",
                "minimizer_kwargs",
                "take_step",
                "accept_test",
                "callback",
                "interval",
                "disp",
                "niter_success"
            ],
            "_test_func2d_nograd": [
                "x"
            ],
            "_test_func2d": [
                "x"
            ],
            "Storage": {
                "__init__": [
                    "self",
                    "x",
                    "f"
                ],
                "_add": [
                    "self",
                    "x",
                    "f"
                ],
                "update": [
                    "self",
                    "x",
                    "f"
                ],
                "get_lowest": [
                    "self"
                ]
            },
            "BasinHoppingRunner": {
                "__init__": [
                    "self",
                    "x0",
                    "minimizer",
                    "step_taking",
                    "accept_tests",
                    "disp"
                ],
                "_monte_carlo_step": [
                    "self"
                ],
                "one_cycle": [
                    "self"
                ],
                "print_report": [
                    "self",
                    "energy_trial",
                    "accept"
                ]
            },
            "AdaptiveStepsize": {
                "__init__": [
                    "self",
                    "takestep",
                    "accept_rate",
                    "interval",
                    "factor",
                    "verbose"
                ],
                "__call__": [
                    "self",
                    "x"
                ],
                "_adjust_step_size": [
                    "self"
                ],
                "take_step": [
                    "self",
                    "x"
                ],
                "report": [
                    "self",
                    "accept"
                ]
            },
            "RandomDisplacement": {
                "__init__": [
                    "self",
                    "stepsize"
                ],
                "__call__": [
                    "self",
                    "x"
                ]
            },
            "MinimizerWrapper": {
                "__init__": [
                    "self",
                    "minimizer",
                    "func"
                ],
                "__call__": [
                    "self",
                    "x0"
                ]
            },
            "Metropolis": {
                "__init__": [
                    "self",
                    "T"
                ],
                "accept_reject": [
                    "self",
                    "energy_new",
                    "energy_old"
                ],
                "__call__": [
                    "self"
                ]
            }
        },
        "scipy.optimize.cobyla": {
            "fmin_cobyla": [
                "func",
                "x0",
                "cons",
                "args",
                "consargs",
                "rhobeg",
                "rhoend",
                "iprint",
                "maxfun",
                "disp"
            ],
            "_minimize_cobyla": [
                "fun",
                "x0",
                "args",
                "constraints",
                "rhobeg",
                "tol",
                "iprint",
                "maxiter",
                "disp"
            ]
        },
        "scipy.optimize.zeros": {
            "results_c": [
                "full_output",
                "r"
            ],
            "newton": [
                "func",
                "x0",
                "fprime",
                "args",
                "tol",
                "maxiter",
                "fprime2"
            ],
            "bisect": [
                "f",
                "a",
                "b",
                "args",
                "xtol",
                "rtol",
                "maxiter",
                "full_output",
                "disp"
            ],
            "ridder": [
                "f",
                "a",
                "b",
                "args",
                "xtol",
                "rtol",
                "maxiter",
                "full_output",
                "disp"
            ],
            "brentq": [
                "f",
                "a",
                "b",
                "args",
                "xtol",
                "rtol",
                "maxiter",
                "full_output",
                "disp"
            ],
            "brenth": [
                "f",
                "a",
                "b",
                "args",
                "xtol",
                "rtol",
                "maxiter",
                "full_output",
                "disp"
            ],
            "RootResults": {
                "__init__": [
                    "self",
                    "root",
                    "iterations",
                    "function_calls",
                    "flag"
                ]
            }
        },
        "scipy.optimize.optimize": {
            "_check_unknown_options": [
                "unknown_options"
            ],
            "is_array_scalar": [
                "x"
            ],
            "vecnorm": [
                "x",
                "ord"
            ],
            "rosen": [
                "x"
            ],
            "rosen_der": [
                "x"
            ],
            "rosen_hess": [
                "x"
            ],
            "rosen_hess_prod": [
                "x",
                "p"
            ],
            "wrap_function": [
                "function",
                "args"
            ],
            "fmin": [
                "func",
                "x0",
                "args",
                "xtol",
                "ftol",
                "maxiter",
                "maxfun",
                "full_output",
                "disp",
                "retall",
                "callback"
            ],
            "_minimize_neldermead": [
                "func",
                "x0",
                "args",
                "callback",
                "xtol",
                "ftol",
                "maxiter",
                "maxfev",
                "disp",
                "return_all"
            ],
            "approx_fprime": [
                "xk",
                "f",
                "epsilon"
            ],
            "check_grad": [
                "func",
                "grad",
                "x0"
            ],
            "approx_fhess_p": [
                "x0",
                "p",
                "fprime",
                "epsilon"
            ],
            "fmin_bfgs": [
                "f",
                "x0",
                "fprime",
                "args",
                "gtol",
                "norm",
                "epsilon",
                "maxiter",
                "full_output",
                "disp",
                "retall",
                "callback"
            ],
            "_minimize_bfgs": [
                "fun",
                "x0",
                "args",
                "jac",
                "callback",
                "gtol",
                "norm",
                "eps",
                "maxiter",
                "disp",
                "return_all"
            ],
            "fmin_cg": [
                "f",
                "x0",
                "fprime",
                "args",
                "gtol",
                "norm",
                "epsilon",
                "maxiter",
                "full_output",
                "disp",
                "retall",
                "callback"
            ],
            "_minimize_cg": [
                "fun",
                "x0",
                "args",
                "jac",
                "callback",
                "gtol",
                "norm",
                "eps",
                "maxiter",
                "disp",
                "return_all"
            ],
            "fmin_ncg": [
                "f",
                "x0",
                "fprime",
                "fhess_p",
                "fhess",
                "args",
                "avextol",
                "epsilon",
                "maxiter",
                "full_output",
                "disp",
                "retall",
                "callback"
            ],
            "_minimize_newtoncg": [
                "fun",
                "x0",
                "args",
                "jac",
                "hess",
                "hessp",
                "callback",
                "xtol",
                "eps",
                "maxiter",
                "disp",
                "return_all"
            ],
            "fminbound": [
                "func",
                "x1",
                "x2",
                "args",
                "xtol",
                "maxfun",
                "full_output",
                "disp"
            ],
            "_minimize_scalar_bounded": [
                "func",
                "bounds",
                "args",
                "xtol",
                "maxiter",
                "disp"
            ],
            "brent": [
                "func",
                "args",
                "brack",
                "tol",
                "full_output",
                "maxiter"
            ],
            "_minimize_scalar_brent": [
                "func",
                "brack",
                "args",
                "xtol",
                "maxiter"
            ],
            "golden": [
                "func",
                "args",
                "brack",
                "tol",
                "full_output"
            ],
            "_minimize_scalar_golden": [
                "func",
                "brack",
                "args",
                "xtol"
            ],
            "bracket": [
                "func",
                "xa",
                "xb",
                "args",
                "grow_limit",
                "maxiter"
            ],
            "_linesearch_powell": [
                "func",
                "p",
                "xi",
                "tol"
            ],
            "fmin_powell": [
                "func",
                "x0",
                "args",
                "xtol",
                "ftol",
                "maxiter",
                "maxfun",
                "full_output",
                "disp",
                "retall",
                "callback",
                "direc"
            ],
            "_minimize_powell": [
                "func",
                "x0",
                "args",
                "callback",
                "xtol",
                "ftol",
                "maxiter",
                "maxfev",
                "disp",
                "direc",
                "return_all"
            ],
            "_endprint": [
                "x",
                "flag",
                "fval",
                "maxfun",
                "xtol",
                "disp"
            ],
            "brute": [
                "func",
                "ranges",
                "args",
                "Ns",
                "full_output",
                "finish",
                "disp"
            ],
            "show_options": [
                "solver",
                "method"
            ],
            "main": [],
            "MemoizeJac": {
                "__init__": [
                    "self",
                    "fun"
                ],
                "__call__": [
                    "self",
                    "x"
                ],
                "derivative": [
                    "self",
                    "x"
                ]
            },
            "Result": {
                "__getattr__": [
                    "self",
                    "name"
                ],
                "__repr__": [
                    "self"
                ]
            },
            "OptimizeWarning": {},
            "Brent": {
                "__init__": [
                    "self",
                    "func",
                    "args",
                    "tol",
                    "maxiter",
                    "full_output"
                ],
                "set_bracket": [
                    "self",
                    "brack"
                ],
                "get_bracket_info": [
                    "self"
                ],
                "optimize": [
                    "self"
                ],
                "get_result": [
                    "self",
                    "full_output"
                ]
            }
        },
        "scipy.optimize.tnc": {
            "fmin_tnc": [
                "func",
                "x0",
                "fprime",
                "args",
                "approx_grad",
                "bounds",
                "epsilon",
                "scale",
                "offset",
                "messages",
                "maxCGit",
                "maxfun",
                "eta",
                "stepmx",
                "accuracy",
                "fmin",
                "ftol",
                "xtol",
                "pgtol",
                "rescale",
                "disp",
                "callback"
            ],
            "_minimize_tnc": [
                "fun",
                "x0",
                "args",
                "jac",
                "bounds",
                "eps",
                "scale",
                "offset",
                "mesg_num",
                "maxCGit",
                "maxiter",
                "eta",
                "stepmx",
                "accuracy",
                "minfev",
                "ftol",
                "xtol",
                "gtol",
                "rescale",
                "disp",
                "callback"
            ]
        },
        "scipy.optimize.setupscons": {
            "configuration": [
                "parent_package",
                "top_path"
            ]
        },
        "scipy.optimize._tstutils": {
            "f1": [
                "x"
            ],
            "f2": [
                "x"
            ],
            "f3": [
                "x"
            ],
            "f4": [
                "x"
            ],
            "f5": [
                "x"
            ],
            "f6": [
                "x"
            ]
        },
        "scipy.optimize.nonlin": {
            "maxnorm": [
                "x"
            ],
            "_as_inexact": [
                "x"
            ],
            "_array_like": [
                "x",
                "x0"
            ],
            "_safe_norm": [
                "v"
            ],
            "_set_doc": [
                "obj"
            ],
            "nonlin_solve": [
                "F",
                "x0",
                "jacobian",
                "iter",
                "verbose",
                "maxiter",
                "f_tol",
                "f_rtol",
                "x_tol",
                "x_rtol",
                "tol_norm",
                "line_search",
                "callback",
                "full_output",
                "raise_exception"
            ],
            "_nonlin_line_search": [
                "func",
                "x",
                "Fx",
                "dx",
                "search_type",
                "rdiff",
                "smin"
            ],
            "asjacobian": [
                "J"
            ],
            "_nonlin_wrapper": [
                "name",
                "jac"
            ],
            "NoConvergence": {},
            "TerminationCondition": {
                "__init__": [
                    "self",
                    "f_tol",
                    "f_rtol",
                    "x_tol",
                    "x_rtol",
                    "iter",
                    "norm"
                ],
                "check": [
                    "self",
                    "f",
                    "x",
                    "dx"
                ]
            },
            "Jacobian": {
                "__init__": [
                    "self"
                ],
                "aspreconditioner": [
                    "self"
                ],
                "solve": [
                    "self",
                    "v",
                    "tol"
                ],
                "update": [
                    "self",
                    "x",
                    "F"
                ],
                "setup": [
                    "self",
                    "x",
                    "F",
                    "func"
                ]
            },
            "InverseJacobian": {
                "__init__": [
                    "self",
                    "jacobian"
                ],
                "shape": [
                    "self"
                ],
                "dtype": [
                    "self"
                ]
            },
            "GenericBroyden": {
                "setup": [
                    "self",
                    "x0",
                    "f0",
                    "func"
                ],
                "_update": [
                    "self",
                    "x",
                    "f",
                    "dx",
                    "df",
                    "dx_norm",
                    "df_norm"
                ],
                "update": [
                    "self",
                    "x",
                    "f"
                ]
            },
            "LowRankMatrix": {
                "__init__": [
                    "self",
                    "alpha",
                    "n",
                    "dtype"
                ],
                "_matvec": [
                    "v",
                    "alpha",
                    "cs",
                    "ds"
                ],
                "_solve": [
                    "v",
                    "alpha",
                    "cs",
                    "ds"
                ],
                "matvec": [
                    "self",
                    "v"
                ],
                "rmatvec": [
                    "self",
                    "v"
                ],
                "solve": [
                    "self",
                    "v",
                    "tol"
                ],
                "rsolve": [
                    "self",
                    "v",
                    "tol"
                ],
                "append": [
                    "self",
                    "c",
                    "d"
                ],
                "__array__": [
                    "self"
                ],
                "collapse": [
                    "self"
                ],
                "restart_reduce": [
                    "self",
                    "rank"
                ],
                "simple_reduce": [
                    "self",
                    "rank"
                ],
                "svd_reduce": [
                    "self",
                    "max_rank",
                    "to_retain"
                ]
            },
            "BroydenFirst": {
                "__init__": [
                    "self",
                    "alpha",
                    "reduction_method",
                    "max_rank"
                ],
                "setup": [
                    "self",
                    "x",
                    "F",
                    "func"
                ],
                "todense": [
                    "self"
                ],
                "solve": [
                    "self",
                    "f",
                    "tol"
                ],
                "matvec": [
                    "self",
                    "f"
                ],
                "rsolve": [
                    "self",
                    "f",
                    "tol"
                ],
                "rmatvec": [
                    "self",
                    "f"
                ],
                "_update": [
                    "self",
                    "x",
                    "f",
                    "dx",
                    "df",
                    "dx_norm",
                    "df_norm"
                ]
            },
            "BroydenSecond": {
                "_update": [
                    "self",
                    "x",
                    "f",
                    "dx",
                    "df",
                    "dx_norm",
                    "df_norm"
                ]
            },
            "Anderson": {
                "__init__": [
                    "self",
                    "alpha",
                    "w0",
                    "M"
                ],
                "solve": [
                    "self",
                    "f",
                    "tol"
                ],
                "matvec": [
                    "self",
                    "f"
                ],
                "_update": [
                    "self",
                    "x",
                    "f",
                    "dx",
                    "df",
                    "dx_norm",
                    "df_norm"
                ]
            },
            "DiagBroyden": {
                "__init__": [
                    "self",
                    "alpha"
                ],
                "setup": [
                    "self",
                    "x",
                    "F",
                    "func"
                ],
                "solve": [
                    "self",
                    "f",
                    "tol"
                ],
                "matvec": [
                    "self",
                    "f"
                ],
                "rsolve": [
                    "self",
                    "f",
                    "tol"
                ],
                "rmatvec": [
                    "self",
                    "f"
                ],
                "todense": [
                    "self"
                ],
                "_update": [
                    "self",
                    "x",
                    "f",
                    "dx",
                    "df",
                    "dx_norm",
                    "df_norm"
                ]
            },
            "LinearMixing": {
                "__init__": [
                    "self",
                    "alpha"
                ],
                "solve": [
                    "self",
                    "f",
                    "tol"
                ],
                "matvec": [
                    "self",
                    "f"
                ],
                "rsolve": [
                    "self",
                    "f",
                    "tol"
                ],
                "rmatvec": [
                    "self",
                    "f"
                ],
                "todense": [
                    "self"
                ],
                "_update": [
                    "self",
                    "x",
                    "f",
                    "dx",
                    "df",
                    "dx_norm",
                    "df_norm"
                ]
            },
            "ExcitingMixing": {
                "__init__": [
                    "self",
                    "alpha",
                    "alphamax"
                ],
                "setup": [
                    "self",
                    "x",
                    "F",
                    "func"
                ],
                "solve": [
                    "self",
                    "f",
                    "tol"
                ],
                "matvec": [
                    "self",
                    "f"
                ],
                "rsolve": [
                    "self",
                    "f",
                    "tol"
                ],
                "rmatvec": [
                    "self",
                    "f"
                ],
                "todense": [
                    "self"
                ],
                "_update": [
                    "self",
                    "x",
                    "f",
                    "dx",
                    "df",
                    "dx_norm",
                    "df_norm"
                ]
            },
            "KrylovJacobian": {
                "__init__": [
                    "self",
                    "rdiff",
                    "method",
                    "inner_maxiter",
                    "inner_M",
                    "outer_k"
                ],
                "_update_diff_step": [
                    "self"
                ],
                "matvec": [
                    "self",
                    "v"
                ],
                "solve": [
                    "self",
                    "rhs",
                    "tol"
                ],
                "update": [
                    "self",
                    "x",
                    "f"
                ],
                "setup": [
                    "self",
                    "x",
                    "f",
                    "func"
                ]
            }
        },
        "scipy.signal.signaltools": {
            "_valfrommode": [
                "mode"
            ],
            "_bvalfromboundary": [
                "boundary"
            ],
            "_check_valid_mode_shapes": [
                "shape1",
                "shape2"
            ],
            "correlate": [
                "in1",
                "in2",
                "mode"
            ],
            "_centered": [
                "arr",
                "newsize"
            ],
            "fftconvolve": [
                "in1",
                "in2",
                "mode"
            ],
            "convolve": [
                "in1",
                "in2",
                "mode"
            ],
            "order_filter": [
                "a",
                "domain",
                "rank"
            ],
            "medfilt": [
                "volume",
                "kernel_size"
            ],
            "wiener": [
                "im",
                "mysize",
                "noise"
            ],
            "convolve2d": [
                "in1",
                "in2",
                "mode",
                "boundary",
                "fillvalue"
            ],
            "correlate2d": [
                "in1",
                "in2",
                "mode",
                "boundary",
                "fillvalue"
            ],
            "medfilt2d": [
                "input",
                "kernel_size"
            ],
            "lfilter": [
                "b",
                "a",
                "x",
                "axis",
                "zi"
            ],
            "lfiltic": [
                "b",
                "a",
                "y",
                "x"
            ],
            "deconvolve": [
                "signal",
                "divisor"
            ],
            "hilbert": [
                "x",
                "N",
                "axis"
            ],
            "hilbert2": [
                "x",
                "N"
            ],
            "cmplx_sort": [
                "p"
            ],
            "unique_roots": [
                "p",
                "tol",
                "rtype"
            ],
            "invres": [
                "r",
                "p",
                "k",
                "tol",
                "rtype"
            ],
            "residue": [
                "b",
                "a",
                "tol",
                "rtype"
            ],
            "residuez": [
                "b",
                "a",
                "tol",
                "rtype"
            ],
            "invresz": [
                "r",
                "p",
                "k",
                "tol",
                "rtype"
            ],
            "resample": [
                "x",
                "num",
                "t",
                "axis",
                "window"
            ],
            "detrend": [
                "data",
                "axis",
                "type",
                "bp"
            ],
            "lfilter_zi": [
                "b",
                "a"
            ],
            "filtfilt": [
                "b",
                "a",
                "x",
                "axis",
                "padtype",
                "padlen"
            ],
            "decimate": [
                "x",
                "q",
                "n",
                "ftype",
                "axis"
            ]
        },
        "scipy.signal.bsplines": {
            "factorial": [
                "n"
            ],
            "spline_filter": [
                "Iin",
                "lmbda"
            ],
            "_bspline_piecefunctions": [
                "order"
            ],
            "bspline": [
                "x",
                "n"
            ],
            "gauss_spline": [
                "x",
                "n"
            ],
            "cubic": [
                "x"
            ],
            "quadratic": [
                "x"
            ],
            "_coeff_smooth": [
                "lam"
            ],
            "_hc": [
                "k",
                "cs",
                "rho",
                "omega"
            ],
            "_hs": [
                "k",
                "cs",
                "rho",
                "omega"
            ],
            "_cubic_smooth_coeff": [
                "signal",
                "lamb"
            ],
            "_cubic_coeff": [
                "signal"
            ],
            "_quadratic_coeff": [
                "signal"
            ],
            "cspline1d": [
                "signal",
                "lamb"
            ],
            "qspline1d": [
                "signal",
                "lamb"
            ],
            "cspline1d_eval": [
                "cj",
                "newx",
                "dx",
                "x0"
            ],
            "qspline1d_eval": [
                "cj",
                "newx",
                "dx",
                "x0"
            ]
        },
        "scipy.signal.filter_design": {
            "findfreqs": [
                "num",
                "den",
                "N"
            ],
            "freqs": [
                "b",
                "a",
                "worN",
                "plot"
            ],
            "freqz": [
                "b",
                "a",
                "worN",
                "whole",
                "plot"
            ],
            "tf2zpk": [
                "b",
                "a"
            ],
            "zpk2tf": [
                "z",
                "p",
                "k"
            ],
            "normalize": [
                "b",
                "a"
            ],
            "lp2lp": [
                "b",
                "a",
                "wo"
            ],
            "lp2hp": [
                "b",
                "a",
                "wo"
            ],
            "lp2bp": [
                "b",
                "a",
                "wo",
                "bw"
            ],
            "lp2bs": [
                "b",
                "a",
                "wo",
                "bw"
            ],
            "bilinear": [
                "b",
                "a",
                "fs"
            ],
            "iirdesign": [
                "wp",
                "ws",
                "gpass",
                "gstop",
                "analog",
                "ftype",
                "output"
            ],
            "iirfilter": [
                "N",
                "Wn",
                "rp",
                "rs",
                "btype",
                "analog",
                "ftype",
                "output"
            ],
            "butter": [
                "N",
                "Wn",
                "btype",
                "analog",
                "output"
            ],
            "cheby1": [
                "N",
                "rp",
                "Wn",
                "btype",
                "analog",
                "output"
            ],
            "cheby2": [
                "N",
                "rs",
                "Wn",
                "btype",
                "analog",
                "output"
            ],
            "ellip": [
                "N",
                "rp",
                "rs",
                "Wn",
                "btype",
                "analog",
                "output"
            ],
            "bessel": [
                "N",
                "Wn",
                "btype",
                "analog",
                "output"
            ],
            "maxflat": [],
            "yulewalk": [],
            "band_stop_obj": [
                "wp",
                "ind",
                "passb",
                "stopb",
                "gpass",
                "gstop",
                "type"
            ],
            "buttord": [
                "wp",
                "ws",
                "gpass",
                "gstop",
                "analog"
            ],
            "cheb1ord": [
                "wp",
                "ws",
                "gpass",
                "gstop",
                "analog"
            ],
            "cheb2ord": [
                "wp",
                "ws",
                "gpass",
                "gstop",
                "analog"
            ],
            "ellipord": [
                "wp",
                "ws",
                "gpass",
                "gstop",
                "analog"
            ],
            "buttap": [
                "N"
            ],
            "cheb1ap": [
                "N",
                "rp"
            ],
            "cheb2ap": [
                "N",
                "rs"
            ],
            "_vratio": [
                "u",
                "ineps",
                "mp"
            ],
            "_kratio": [
                "m",
                "k_ratio"
            ],
            "ellipap": [
                "N",
                "rp",
                "rs"
            ],
            "besselap": [
                "N"
            ],
            "BadCoefficients": {}
        },
        "scipy.signal.setup": {
            "configuration": [
                "parent_package",
                "top_path"
            ]
        },
        "scipy.signal.dltisys": {
            "dlsim": [
                "system",
                "u",
                "t",
                "x0"
            ],
            "dimpulse": [
                "system",
                "x0",
                "t",
                "n"
            ],
            "dstep": [
                "system",
                "x0",
                "t",
                "n"
            ]
        },
        "scipy.signal": {},
        "scipy.signal.waveforms": {
            "sawtooth": [
                "t",
                "width"
            ],
            "square": [
                "t",
                "duty"
            ],
            "gausspulse": [
                "t",
                "fc",
                "bw",
                "bwr",
                "tpr",
                "retquad",
                "retenv"
            ],
            "chirp": [
                "t",
                "f0",
                "t1",
                "f1",
                "method",
                "phi",
                "vertex_zero"
            ],
            "_chirp_phase": [
                "t",
                "f0",
                "t1",
                "f1",
                "method",
                "vertex_zero"
            ],
            "sweep_poly": [
                "t",
                "poly",
                "phi"
            ],
            "_sweep_poly_phase": [
                "t",
                "poly"
            ]
        },
        "scipy.signal.fir_filter_design": {
            "kaiser_beta": [
                "a"
            ],
            "kaiser_atten": [
                "numtaps",
                "width"
            ],
            "kaiserord": [
                "ripple",
                "width"
            ],
            "firwin": [
                "numtaps",
                "cutoff",
                "width",
                "window",
                "pass_zero",
                "scale",
                "nyq"
            ],
            "firwin2": [
                "numtaps",
                "freq",
                "gain",
                "nfreqs",
                "window",
                "nyq",
                "antisymmetric"
            ],
            "remez": [
                "numtaps",
                "bands",
                "desired",
                "weight",
                "Hz",
                "type",
                "maxiter",
                "grid_density"
            ]
        },
        "scipy.signal.windows": {
            "boxcar": [
                "M",
                "sym"
            ],
            "triang": [
                "M",
                "sym"
            ],
            "parzen": [
                "M",
                "sym"
            ],
            "bohman": [
                "M",
                "sym"
            ],
            "blackman": [
                "M",
                "sym"
            ],
            "nuttall": [
                "M",
                "sym"
            ],
            "blackmanharris": [
                "M",
                "sym"
            ],
            "flattop": [
                "M",
                "sym"
            ],
            "bartlett": [
                "M",
                "sym"
            ],
            "hann": [
                "M",
                "sym"
            ],
            "barthann": [
                "M",
                "sym"
            ],
            "hamming": [
                "M",
                "sym"
            ],
            "kaiser": [
                "M",
                "beta",
                "sym"
            ],
            "gaussian": [
                "M",
                "std",
                "sym"
            ],
            "general_gaussian": [
                "M",
                "p",
                "sig",
                "sym"
            ],
            "chebwin": [
                "M",
                "at",
                "sym"
            ],
            "slepian": [
                "M",
                "width",
                "sym"
            ],
            "get_window": [
                "window",
                "Nx",
                "fftbins"
            ]
        },
        "scipy.signal.spectral": {
            "periodogram": [
                "x",
                "fs",
                "window",
                "nfft",
                "detrend",
                "return_onesided",
                "scaling",
                "axis"
            ],
            "welch": [
                "x",
                "fs",
                "window",
                "nperseg",
                "noverlap",
                "nfft",
                "detrend",
                "return_onesided",
                "scaling",
                "axis"
            ]
        },
        "scipy.signal.wavelets": {
            "daub": [
                "p"
            ],
            "qmf": [
                "hk"
            ],
            "wavedec": [
                "amn",
                "hk"
            ],
            "cascade": [
                "hk",
                "J"
            ],
            "morlet": [
                "M",
                "w",
                "s",
                "complete"
            ],
            "ricker": [
                "points",
                "a"
            ],
            "cwt": [
                "data",
                "wavelet",
                "widths"
            ]
        },
        "scipy.signal._arraytools": {
            "axis_slice": [
                "a",
                "start",
                "stop",
                "step",
                "axis"
            ],
            "axis_reverse": [
                "a",
                "axis"
            ],
            "odd_ext": [
                "x",
                "n",
                "axis"
            ],
            "even_ext": [
                "x",
                "n",
                "axis"
            ],
            "const_ext": [
                "x",
                "n",
                "axis"
            ]
        },
        "scipy.signal.ltisys": {
            "tf2ss": [
                "num",
                "den"
            ],
            "_none_to_empty": [
                "arg"
            ],
            "abcd_normalize": [
                "A",
                "B",
                "C",
                "D"
            ],
            "ss2tf": [
                "A",
                "B",
                "C",
                "D",
                "input"
            ],
            "zpk2ss": [
                "z",
                "p",
                "k"
            ],
            "ss2zpk": [
                "A",
                "B",
                "C",
                "D",
                "input"
            ],
            "lsim2": [
                "system",
                "U",
                "T",
                "X0"
            ],
            "lsim": [
                "system",
                "U",
                "T",
                "X0",
                "interp"
            ],
            "_default_response_times": [
                "A",
                "n"
            ],
            "_default_response_frequencies": [
                "A",
                "n"
            ],
            "impulse": [
                "system",
                "X0",
                "T",
                "N"
            ],
            "impulse2": [
                "system",
                "X0",
                "T",
                "N"
            ],
            "step": [
                "system",
                "X0",
                "T",
                "N"
            ],
            "step2": [
                "system",
                "X0",
                "T",
                "N"
            ],
            "bode": [
                "system",
                "w",
                "n"
            ],
            "freqresp": [
                "system",
                "w",
                "n"
            ],
            "lti": {
                "__init__": [
                    "self"
                ],
                "__setattr__": [
                    "self",
                    "attr",
                    "val"
                ],
                "impulse": [
                    "self",
                    "X0",
                    "T",
                    "N"
                ],
                "step": [
                    "self",
                    "X0",
                    "T",
                    "N"
                ],
                "output": [
                    "self",
                    "U",
                    "T",
                    "X0"
                ],
                "bode": [
                    "self",
                    "w",
                    "n"
                ],
                "freqresp": [
                    "self",
                    "w",
                    "n"
                ]
            }
        },
        "scipy.signal._peak_finding": {
            "_boolrelextrema": [
                "data",
                "comparator",
                "axis",
                "order",
                "mode"
            ],
            "argrelmin": [
                "data",
                "axis",
                "order",
                "mode"
            ],
            "argrelmax": [
                "data",
                "axis",
                "order",
                "mode"
            ],
            "argrelextrema": [
                "data",
                "comparator",
                "axis",
                "order",
                "mode"
            ],
            "_identify_ridge_lines": [
                "matr",
                "max_distances",
                "gap_thresh"
            ],
            "_filter_ridge_lines": [
                "cwt",
                "ridge_lines",
                "window_size",
                "min_length",
                "min_snr",
                "noise_perc"
            ],
            "find_peaks_cwt": [
                "vector",
                "widths",
                "wavelet",
                "max_distances",
                "gap_thresh",
                "min_length",
                "min_snr",
                "noise_perc"
            ]
        },
        "scipy.signal.cont2discrete": {
            "cont2discrete": [
                "sys",
                "dt",
                "method",
                "alpha"
            ]
        },
        "scipy.signal.setupscons": {
            "configuration": [
                "parent_package",
                "top_path"
            ]
        },
        "scipy.cluster.hierarchy": {
            "_warning": [
                "s"
            ],
            "_copy_array_if_base_present": [
                "a"
            ],
            "_copy_arrays_if_base_present": [
                "T"
            ],
            "_randdm": [
                "pnts"
            ],
            "single": [
                "y"
            ],
            "complete": [
                "y"
            ],
            "average": [
                "y"
            ],
            "weighted": [
                "y"
            ],
            "centroid": [
                "y"
            ],
            "median": [
                "y"
            ],
            "ward": [
                "y"
            ],
            "linkage": [
                "y",
                "method",
                "metric"
            ],
            "to_tree": [
                "Z",
                "rd"
            ],
            "_convert_to_bool": [
                "X"
            ],
            "_convert_to_double": [
                "X"
            ],
            "cophenet": [
                "Z",
                "Y"
            ],
            "inconsistent": [
                "Z",
                "d"
            ],
            "from_mlab_linkage": [
                "Z"
            ],
            "to_mlab_linkage": [
                "Z"
            ],
            "is_monotonic": [
                "Z"
            ],
            "is_valid_im": [
                "R",
                "warning",
                "throw",
                "name"
            ],
            "is_valid_linkage": [
                "Z",
                "warning",
                "throw",
                "name"
            ],
            "_check_hierarchy_uses_cluster_before_formed": [
                "Z"
            ],
            "_check_hierarchy_uses_cluster_more_than_once": [
                "Z"
            ],
            "_check_hierarchy_not_all_clusters_used": [
                "Z"
            ],
            "num_obs_linkage": [
                "Z"
            ],
            "correspond": [
                "Z",
                "Y"
            ],
            "fcluster": [
                "Z",
                "t",
                "criterion",
                "depth",
                "R",
                "monocrit"
            ],
            "fclusterdata": [
                "X",
                "t",
                "criterion",
                "metric",
                "depth",
                "method",
                "R"
            ],
            "leaves_list": [
                "Z"
            ],
            "_remove_dups": [
                "L"
            ],
            "_get_tick_text_size": [
                "p"
            ],
            "_get_tick_rotation": [
                "p"
            ],
            "_plot_dendrogram": [
                "icoords",
                "dcoords",
                "ivl",
                "p",
                "n",
                "mh",
                "orientation",
                "no_labels",
                "color_list",
                "leaf_font_size",
                "leaf_rotation",
                "contraction_marks"
            ],
            "set_link_color_palette": [
                "palette"
            ],
            "dendrogram": [
                "Z",
                "p",
                "truncate_mode",
                "color_threshold",
                "get_leaves",
                "orientation",
                "labels",
                "count_sort",
                "distance_sort",
                "show_leaf_counts",
                "no_plot",
                "no_labels",
                "color_list",
                "leaf_font_size",
                "leaf_rotation",
                "leaf_label_func",
                "no_leaves",
                "show_contracted",
                "link_color_func"
            ],
            "_append_singleton_leaf_node": [
                "Z",
                "p",
                "n",
                "level",
                "lvs",
                "ivl",
                "leaf_label_func",
                "i",
                "labels"
            ],
            "_append_nonsingleton_leaf_node": [
                "Z",
                "p",
                "n",
                "level",
                "lvs",
                "ivl",
                "leaf_label_func",
                "i",
                "labels",
                "show_leaf_counts"
            ],
            "_append_contraction_marks": [
                "Z",
                "iv",
                "i",
                "n",
                "contraction_marks"
            ],
            "_append_contraction_marks_sub": [
                "Z",
                "iv",
                "i",
                "n",
                "contraction_marks"
            ],
            "_dendrogram_calculate_info": [
                "Z",
                "p",
                "truncate_mode",
                "color_threshold",
                "get_leaves",
                "orientation",
                "labels",
                "count_sort",
                "distance_sort",
                "show_leaf_counts",
                "i",
                "iv",
                "ivl",
                "n",
                "icoord_list",
                "dcoord_list",
                "lvs",
                "mhr",
                "current_color",
                "color_list",
                "currently_below_threshold",
                "leaf_label_func",
                "level",
                "contraction_marks",
                "link_color_func"
            ],
            "is_isomorphic": [
                "T1",
                "T2"
            ],
            "maxdists": [
                "Z"
            ],
            "maxinconsts": [
                "Z",
                "R"
            ],
            "maxRstat": [
                "Z",
                "R",
                "i"
            ],
            "leaders": [
                "Z",
                "T"
            ],
            "_leaders_test": [
                "Z",
                "T"
            ],
            "_leader_identify": [
                "tr",
                "T"
            ],
            "_leaders_test_recurs_mark": [
                "tr",
                "T"
            ],
            "ClusterNode": {
                "__init__": [
                    "self",
                    "id",
                    "left",
                    "right",
                    "dist",
                    "count"
                ],
                "get_id": [
                    "self"
                ],
                "get_count": [
                    "self"
                ],
                "get_left": [
                    "self"
                ],
                "get_right": [
                    "self"
                ],
                "is_leaf": [
                    "self"
                ],
                "pre_order": [
                    "self",
                    "func"
                ]
            }
        },
        "scipy.cluster.vq": {
            "whiten": [
                "obs"
            ],
            "vq": [
                "obs",
                "code_book"
            ],
            "py_vq": [
                "obs",
                "code_book"
            ],
            "_py_vq_1d": [
                "obs",
                "code_book"
            ],
            "py_vq2": [
                "obs",
                "code_book"
            ],
            "_kmeans": [
                "obs",
                "guess",
                "thresh"
            ],
            "kmeans": [
                "obs",
                "k_or_guess",
                "iter",
                "thresh"
            ],
            "_kpoints": [
                "data",
                "k"
            ],
            "_krandinit": [
                "data",
                "k"
            ],
            "_missing_warn": [],
            "_missing_raise": [],
            "kmeans2": [
                "data",
                "k",
                "iter",
                "thresh",
                "minit",
                "missing"
            ],
            "_kmeans2": [
                "data",
                "code",
                "niter",
                "nc",
                "missing"
            ],
            "ClusterError": {}
        },
        "scipy.cluster.setup": {
            "configuration": [
                "parent_package",
                "top_path"
            ]
        },
        "scipy.cluster": {},
        "scipy.cluster.setupscons": {
            "configuration": [
                "parent_package",
                "top_path"
            ]
        },
        "scipy.stats.mstats_basic": {
            "_chk_asarray": [
                "a",
                "axis"
            ],
            "_chk2_asarray": [
                "a",
                "b",
                "axis"
            ],
            "_chk_size": [
                "a",
                "b"
            ],
            "argstoarray": [],
            "find_repeats": [
                "arr"
            ],
            "count_tied_groups": [
                "x",
                "use_missing"
            ],
            "rankdata": [
                "data",
                "axis",
                "use_missing"
            ],
            "gmean": [
                "a",
                "axis"
            ],
            "hmean": [
                "a",
                "axis"
            ],
            "mode": [
                "a",
                "axis"
            ],
            "betai": [
                "a",
                "b",
                "x"
            ],
            "msign": [
                "x"
            ],
            "pearsonr": [
                "x",
                "y"
            ],
            "spearmanr": [
                "x",
                "y",
                "use_ties"
            ],
            "kendalltau": [
                "x",
                "y",
                "use_ties",
                "use_missing"
            ],
            "kendalltau_seasonal": [
                "x"
            ],
            "pointbiserialr": [
                "x",
                "y"
            ],
            "linregress": [],
            "theilslopes": [
                "y",
                "x",
                "alpha"
            ],
            "sen_seasonal_slopes": [
                "x"
            ],
            "ttest_onesamp": [
                "a",
                "popmean"
            ],
            "ttest_ind": [
                "a",
                "b",
                "axis"
            ],
            "ttest_rel": [
                "a",
                "b",
                "axis"
            ],
            "chisquare": [
                "f_obs",
                "f_exp"
            ],
            "mannwhitneyu": [
                "x",
                "y",
                "use_continuity"
            ],
            "kruskalwallis": [],
            "_kolmog1": [
                "x",
                "n"
            ],
            "ks_twosamp": [
                "data1",
                "data2",
                "alternative"
            ],
            "ks_twosamp_old": [
                "data1",
                "data2"
            ],
            "threshold": [
                "a",
                "threshmin",
                "threshmax",
                "newval"
            ],
            "trima": [
                "a",
                "limits",
                "inclusive"
            ],
            "trimr": [
                "a",
                "limits",
                "inclusive",
                "axis"
            ],
            "trim": [
                "a",
                "limits",
                "inclusive",
                "relative",
                "axis"
            ],
            "trimboth": [
                "data",
                "proportiontocut",
                "inclusive",
                "axis"
            ],
            "trimtail": [
                "data",
                "proportiontocut",
                "tail",
                "inclusive",
                "axis"
            ],
            "trimmed_mean": [
                "a",
                "limits",
                "inclusive",
                "relative",
                "axis"
            ],
            "trimmed_var": [
                "a",
                "limits",
                "inclusive",
                "relative",
                "axis",
                "ddof"
            ],
            "trimmed_std": [
                "a",
                "limits",
                "inclusive",
                "relative",
                "axis",
                "ddof"
            ],
            "trimmed_stde": [
                "a",
                "limits",
                "inclusive",
                "axis"
            ],
            "tmean": [
                "a",
                "limits",
                "inclusive"
            ],
            "tvar": [
                "a",
                "limits",
                "inclusive"
            ],
            "tmin": [
                "a",
                "lowerlimit",
                "axis",
                "inclusive"
            ],
            "tmax": [
                "a",
                "upperlimit",
                "axis",
                "inclusive"
            ],
            "tsem": [
                "a",
                "limits",
                "inclusive"
            ],
            "winsorize": [
                "a",
                "limits",
                "inclusive",
                "inplace",
                "axis"
            ],
            "moment": [
                "a",
                "moment",
                "axis"
            ],
            "variation": [
                "a",
                "axis"
            ],
            "skew": [
                "a",
                "axis",
                "bias"
            ],
            "kurtosis": [
                "a",
                "axis",
                "fisher",
                "bias"
            ],
            "describe": [
                "a",
                "axis"
            ],
            "stde_median": [
                "data",
                "axis"
            ],
            "skewtest": [
                "a",
                "axis"
            ],
            "kurtosistest": [
                "a",
                "axis"
            ],
            "normaltest": [
                "a",
                "axis"
            ],
            "mquantiles": [
                "a",
                "prob",
                "alphap",
                "betap",
                "axis",
                "limit"
            ],
            "scoreatpercentile": [
                "data",
                "per",
                "limit",
                "alphap",
                "betap"
            ],
            "plotting_positions": [
                "data",
                "alpha",
                "beta"
            ],
            "obrientransform": [],
            "signaltonoise": [
                "data",
                "axis"
            ],
            "sem": [
                "a",
                "axis"
            ],
            "f_oneway": [],
            "f_value_wilks_lambda": [
                "ER",
                "EF",
                "dfnum",
                "dfden",
                "a",
                "b"
            ],
            "friedmanchisquare": []
        },
        "scipy.stats.rv": {
            "randwppf": [
                "ppf",
                "args",
                "size"
            ],
            "randwcdf": [
                "cdf",
                "mean",
                "args",
                "size"
            ]
        },
        "scipy.stats.mstats": {},
        "scipy.stats.stats": {
            "find_repeats": [
                "arr"
            ],
            "nanmean": [
                "x",
                "axis"
            ],
            "nanstd": [
                "x",
                "axis",
                "bias"
            ],
            "_nanmedian": [
                "arr1d"
            ],
            "nanmedian": [
                "x",
                "axis"
            ],
            "gmean": [
                "a",
                "axis",
                "dtype"
            ],
            "hmean": [
                "a",
                "axis",
                "dtype"
            ],
            "cmedian": [
                "a",
                "numbins"
            ],
            "mode": [
                "a",
                "axis"
            ],
            "mask_to_limits": [
                "a",
                "limits",
                "inclusive"
            ],
            "tmean": [
                "a",
                "limits",
                "inclusive"
            ],
            "masked_var": [
                "am"
            ],
            "tvar": [
                "a",
                "limits",
                "inclusive"
            ],
            "tmin": [
                "a",
                "lowerlimit",
                "axis",
                "inclusive"
            ],
            "tmax": [
                "a",
                "upperlimit",
                "axis",
                "inclusive"
            ],
            "tstd": [
                "a",
                "limits",
                "inclusive"
            ],
            "tsem": [
                "a",
                "limits",
                "inclusive"
            ],
            "moment": [
                "a",
                "moment",
                "axis"
            ],
            "variation": [
                "a",
                "axis"
            ],
            "skew": [
                "a",
                "axis",
                "bias"
            ],
            "kurtosis": [
                "a",
                "axis",
                "fisher",
                "bias"
            ],
            "describe": [
                "a",
                "axis"
            ],
            "skewtest": [
                "a",
                "axis"
            ],
            "kurtosistest": [
                "a",
                "axis"
            ],
            "normaltest": [
                "a",
                "axis"
            ],
            "jarque_bera": [
                "x"
            ],
            "itemfreq": [
                "a"
            ],
            "scoreatpercentile": [
                "a",
                "per",
                "limit",
                "interpolation_method",
                "axis"
            ],
            "_compute_qth_percentile": [
                "sorted",
                "per",
                "interpolation_method",
                "axis"
            ],
            "percentileofscore": [
                "a",
                "score",
                "kind"
            ],
            "histogram2": [
                "a",
                "bins"
            ],
            "histogram": [
                "a",
                "numbins",
                "defaultlimits",
                "weights",
                "printextras"
            ],
            "cumfreq": [
                "a",
                "numbins",
                "defaultreallimits",
                "weights"
            ],
            "relfreq": [
                "a",
                "numbins",
                "defaultreallimits",
                "weights"
            ],
            "obrientransform": [],
            "signaltonoise": [
                "a",
                "axis",
                "ddof"
            ],
            "sem": [
                "a",
                "axis",
                "ddof"
            ],
            "zscore": [
                "a",
                "axis",
                "ddof"
            ],
            "zmap": [
                "scores",
                "compare",
                "axis",
                "ddof"
            ],
            "threshold": [
                "a",
                "threshmin",
                "threshmax",
                "newval"
            ],
            "sigmaclip": [
                "a",
                "low",
                "high"
            ],
            "trimboth": [
                "a",
                "proportiontocut"
            ],
            "trim1": [
                "a",
                "proportiontocut",
                "tail"
            ],
            "trim_mean": [
                "a",
                "proportiontocut"
            ],
            "f_oneway": [],
            "pearsonr": [
                "x",
                "y"
            ],
            "fisher_exact": [
                "table",
                "alternative"
            ],
            "spearmanr": [
                "a",
                "b",
                "axis"
            ],
            "pointbiserialr": [
                "x",
                "y"
            ],
            "kendalltau": [
                "x",
                "y",
                "initial_lexsort"
            ],
            "linregress": [
                "x",
                "y"
            ],
            "ttest_1samp": [
                "a",
                "popmean",
                "axis"
            ],
            "_ttest_finish": [
                "df",
                "t"
            ],
            "ttest_ind": [
                "a",
                "b",
                "axis",
                "equal_var"
            ],
            "ttest_rel": [
                "a",
                "b",
                "axis"
            ],
            "kstest": [
                "rvs",
                "cdf",
                "args",
                "N",
                "alternative",
                "mode"
            ],
            "chisquare": [
                "f_obs",
                "f_exp",
                "ddof"
            ],
            "ks_2samp": [
                "data1",
                "data2"
            ],
            "mannwhitneyu": [
                "x",
                "y",
                "use_continuity"
            ],
            "ranksums": [
                "x",
                "y"
            ],
            "kruskal": [],
            "friedmanchisquare": [],
            "chisqprob": [
                "chisq",
                "df"
            ],
            "betai": [
                "a",
                "b",
                "x"
            ],
            "glm": [
                "data",
                "para"
            ],
            "f_value_wilks_lambda": [
                "ER",
                "EF",
                "dfnum",
                "dfden",
                "a",
                "b"
            ],
            "f_value": [
                "ER",
                "EF",
                "dfR",
                "dfF"
            ],
            "f_value_multivariate": [
                "ER",
                "EF",
                "dfnum",
                "dfden"
            ],
            "ss": [
                "a",
                "axis"
            ],
            "square_of_sums": [
                "a",
                "axis"
            ],
            "fastsort": [
                "a"
            ]
        },
        "scipy.stats.kde": {
            "gaussian_kde": {
                "__init__": [
                    "self",
                    "dataset",
                    "bw_method"
                ],
                "evaluate": [
                    "self",
                    "points"
                ],
                "integrate_gaussian": [
                    "self",
                    "mean",
                    "cov"
                ],
                "integrate_box_1d": [
                    "self",
                    "low",
                    "high"
                ],
                "integrate_box": [
                    "self",
                    "low_bounds",
                    "high_bounds",
                    "maxpts"
                ],
                "integrate_kde": [
                    "self",
                    "other"
                ],
                "resample": [
                    "self",
                    "size"
                ],
                "scotts_factor": [
                    "self"
                ],
                "silverman_factor": [
                    "self"
                ],
                "set_bandwidth": [
                    "self",
                    "bw_method"
                ],
                "_compute_covariance": [
                    "self"
                ]
            }
        },
        "scipy.stats.setup": {
            "configuration": [
                "parent_package",
                "top_path"
            ]
        },
        "scipy.stats.distributions": {
            "_moment": [
                "data",
                "n",
                "mu"
            ],
            "_moment_from_stats": [
                "n",
                "mu",
                "mu2",
                "g1",
                "g2",
                "moment_func",
                "args"
            ],
            "_skew": [
                "data"
            ],
            "_kurtosis": [
                "data"
            ],
            "valarray": [
                "shape",
                "value",
                "typecode"
            ],
            "argsreduce": [
                "cond"
            ],
            "_norm_pdf": [
                "x"
            ],
            "_norm_logpdf": [
                "x"
            ],
            "_norm_cdf": [
                "x"
            ],
            "_norm_logcdf": [
                "x"
            ],
            "_norm_ppf": [
                "q"
            ],
            "entropy": [
                "pk",
                "qk",
                "base"
            ],
            "_drv_pmf": [
                "self",
                "xk"
            ],
            "_drv_cdf": [
                "self",
                "xk"
            ],
            "_drv_ppf": [
                "self",
                "q"
            ],
            "_drv_nonzero": [
                "self",
                "k"
            ],
            "_drv_moment": [
                "self",
                "n"
            ],
            "_drv_moment_gen": [
                "self",
                "t"
            ],
            "_drv2_moment": [
                "self",
                "n"
            ],
            "_drv2_ppfsingle": [
                "self",
                "q"
            ],
            "reverse_dict": [
                "dict"
            ],
            "make_dict": [
                "keys",
                "values"
            ],
            "rv_frozen": {
                "__init__": [
                    "self",
                    "dist"
                ],
                "pdf": [
                    "self",
                    "x"
                ],
                "logpdf": [
                    "self",
                    "x"
                ],
                "cdf": [
                    "self",
                    "x"
                ],
                "logcdf": [
                    "self",
                    "x"
                ],
                "ppf": [
                    "self",
                    "q"
                ],
                "isf": [
                    "self",
                    "q"
                ],
                "rvs": [
                    "self",
                    "size"
                ],
                "sf": [
                    "self",
                    "x"
                ],
                "logsf": [
                    "self",
                    "x"
                ],
                "stats": [
                    "self",
                    "moments"
                ],
                "median": [
                    "self"
                ],
                "mean": [
                    "self"
                ],
                "var": [
                    "self"
                ],
                "std": [
                    "self"
                ],
                "moment": [
                    "self",
                    "n"
                ],
                "entropy": [
                    "self"
                ],
                "pmf": [
                    "self",
                    "k"
                ],
                "logpmf": [
                    "self",
                    "k"
                ],
                "interval": [
                    "self",
                    "alpha"
                ]
            },
            "rv_generic": {
                "_fix_loc_scale": [
                    "self",
                    "args",
                    "loc",
                    "scale"
                ],
                "_fix_loc_scale_kwarg3": [
                    "self",
                    "args",
                    "loc",
                    "scale",
                    "kwarg3",
                    "kwarg3_default"
                ],
                "_fix_loc": [
                    "self",
                    "args",
                    "loc"
                ],
                "rvs": [
                    "self"
                ],
                "median": [
                    "self"
                ],
                "mean": [
                    "self"
                ],
                "var": [
                    "self"
                ],
                "std": [
                    "self"
                ],
                "interval": [
                    "self",
                    "alpha"
                ]
            },
            "rv_continuous": {
                "__init__": [
                    "self",
                    "momtype",
                    "a",
                    "b",
                    "xa",
                    "xb",
                    "xtol",
                    "badvalue",
                    "name",
                    "longname",
                    "shapes",
                    "extradoc"
                ],
                "_construct_default_doc": [
                    "self",
                    "longname",
                    "extradoc"
                ],
                "_construct_doc": [
                    "self"
                ],
                "_ppf_to_solve": [
                    "self",
                    "x",
                    "q"
                ],
                "_ppf_single_call": [
                    "self",
                    "q"
                ],
                "_mom_integ0": [
                    "self",
                    "x",
                    "m"
                ],
                "_mom0_sc": [
                    "self",
                    "m"
                ],
                "_mom_integ1": [
                    "self",
                    "q",
                    "m"
                ],
                "_mom1_sc": [
                    "self",
                    "m"
                ],
                "_argcheck": [
                    "self"
                ],
                "_pdf": [
                    "self",
                    "x"
                ],
                "_logpdf": [
                    "self",
                    "x"
                ],
                "_rvs": [
                    "self"
                ],
                "_cdf_single_call": [
                    "self",
                    "x"
                ],
                "_cdf": [
                    "self",
                    "x"
                ],
                "_logcdf": [
                    "self",
                    "x"
                ],
                "_sf": [
                    "self",
                    "x"
                ],
                "_logsf": [
                    "self",
                    "x"
                ],
                "_ppf": [
                    "self",
                    "q"
                ],
                "_isf": [
                    "self",
                    "q"
                ],
                "_stats": [
                    "self"
                ],
                "_munp": [
                    "self",
                    "n"
                ],
                "pdf": [
                    "self",
                    "x"
                ],
                "logpdf": [
                    "self",
                    "x"
                ],
                "cdf": [
                    "self",
                    "x"
                ],
                "logcdf": [
                    "self",
                    "x"
                ],
                "sf": [
                    "self",
                    "x"
                ],
                "logsf": [
                    "self",
                    "x"
                ],
                "ppf": [
                    "self",
                    "q"
                ],
                "isf": [
                    "self",
                    "q"
                ],
                "stats": [
                    "self"
                ],
                "moment": [
                    "self",
                    "n"
                ],
                "_nnlf": [
                    "self",
                    "x"
                ],
                "nnlf": [
                    "self",
                    "theta",
                    "x"
                ],
                "_fitstart": [
                    "self",
                    "data",
                    "args"
                ],
                "_reduce_func": [
                    "self",
                    "args",
                    "kwds"
                ],
                "fit": [
                    "self",
                    "data"
                ],
                "fit_loc_scale": [
                    "self",
                    "data"
                ],
                "est_loc_scale": [
                    "self",
                    "data"
                ],
                "freeze": [
                    "self"
                ],
                "__call__": [
                    "self"
                ],
                "_entropy": [
                    "self"
                ],
                "entropy": [
                    "self"
                ],
                "expect": [
                    "self",
                    "func",
                    "args",
                    "loc",
                    "scale",
                    "lb",
                    "ub",
                    "conditional"
                ]
            },
            "ksone_gen": {
                "_cdf": [
                    "self",
                    "x",
                    "n"
                ],
                "_ppf": [
                    "self",
                    "q",
                    "n"
                ]
            },
            "kstwobign_gen": {
                "_cdf": [
                    "self",
                    "x"
                ],
                "_sf": [
                    "self",
                    "x"
                ],
                "_ppf": [
                    "self",
                    "q"
                ]
            },
            "norm_gen": {
                "_rvs": [
                    "self"
                ],
                "_pdf": [
                    "self",
                    "x"
                ],
                "_logpdf": [
                    "self",
                    "x"
                ],
                "_cdf": [
                    "self",
                    "x"
                ],
                "_logcdf": [
                    "self",
                    "x"
                ],
                "_sf": [
                    "self",
                    "x"
                ],
                "_logsf": [
                    "self",
                    "x"
                ],
                "_ppf": [
                    "self",
                    "q"
                ],
                "_isf": [
                    "self",
                    "q"
                ],
                "_stats": [
                    "self"
                ],
                "_entropy": [
                    "self"
                ]
            },
            "alpha_gen": {
                "_pdf": [
                    "self",
                    "x",
                    "a"
                ],
                "_logpdf": [
                    "self",
                    "x",
                    "a"
                ],
                "_cdf": [
                    "self",
                    "x",
                    "a"
                ],
                "_ppf": [
                    "self",
                    "q",
                    "a"
                ],
                "_stats": [
                    "self",
                    "a"
                ]
            },
            "anglit_gen": {
                "_pdf": [
                    "self",
                    "x"
                ],
                "_cdf": [
                    "self",
                    "x"
                ],
                "_ppf": [
                    "self",
                    "q"
                ],
                "_stats": [
                    "self"
                ],
                "_entropy": [
                    "self"
                ]
            },
            "arcsine_gen": {
                "_pdf": [
                    "self",
                    "x"
                ],
                "_cdf": [
                    "self",
                    "x"
                ],
                "_ppf": [
                    "self",
                    "q"
                ],
                "_stats": [
                    "self"
                ],
                "_entropy": [
                    "self"
                ]
            },
            "beta_gen": {
                "_rvs": [
                    "self",
                    "a",
                    "b"
                ],
                "_pdf": [
                    "self",
                    "x",
                    "a",
                    "b"
                ],
                "_logpdf": [
                    "self",
                    "x",
                    "a",
                    "b"
                ],
                "_cdf": [
                    "self",
                    "x",
                    "a",
                    "b"
                ],
                "_ppf": [
                    "self",
                    "q",
                    "a",
                    "b"
                ],
                "_stats": [
                    "self",
                    "a",
                    "b"
                ],
                "_fitstart": [
                    "self",
                    "data"
                ],
                "fit": [
                    "self",
                    "data"
                ]
            },
            "betaprime_gen": {
                "_rvs": [
                    "self",
                    "a",
                    "b"
                ],
                "_pdf": [
                    "self",
                    "x",
                    "a",
                    "b"
                ],
                "_logpdf": [
                    "self",
                    "x",
                    "a",
                    "b"
                ],
                "_cdf_skip": [
                    "self",
                    "x",
                    "a",
                    "b"
                ],
                "_munp": [
                    "self",
                    "n",
                    "a",
                    "b"
                ]
            },
            "bradford_gen": {
                "_pdf": [
                    "self",
                    "x",
                    "c"
                ],
                "_cdf": [
                    "self",
                    "x",
                    "c"
                ],
                "_ppf": [
                    "self",
                    "q",
                    "c"
                ],
                "_stats": [
                    "self",
                    "c",
                    "moments"
                ],
                "_entropy": [
                    "self",
                    "c"
                ]
            },
            "burr_gen": {
                "_pdf": [
                    "self",
                    "x",
                    "c",
                    "d"
                ],
                "_cdf": [
                    "self",
                    "x",
                    "c",
                    "d"
                ],
                "_ppf": [
                    "self",
                    "q",
                    "c",
                    "d"
                ],
                "_stats": [
                    "self",
                    "c",
                    "d",
                    "moments"
                ]
            },
            "fisk_gen": {
                "_pdf": [
                    "self",
                    "x",
                    "c"
                ],
                "_cdf": [
                    "self",
                    "x",
                    "c"
                ],
                "_ppf": [
                    "self",
                    "x",
                    "c"
                ],
                "_stats": [
                    "self",
                    "c"
                ],
                "_entropy": [
                    "self",
                    "c"
                ]
            },
            "cauchy_gen": {
                "_pdf": [
                    "self",
                    "x"
                ],
                "_cdf": [
                    "self",
                    "x"
                ],
                "_ppf": [
                    "self",
                    "q"
                ],
                "_sf": [
                    "self",
                    "x"
                ],
                "_isf": [
                    "self",
                    "q"
                ],
                "_stats": [
                    "self"
                ],
                "_entropy": [
                    "self"
                ],
                "_fitstart": [
                    "data",
                    "args"
                ]
            },
            "chi_gen": {
                "_rvs": [
                    "self",
                    "df"
                ],
                "_pdf": [
                    "self",
                    "x",
                    "df"
                ],
                "_cdf": [
                    "self",
                    "x",
                    "df"
                ],
                "_ppf": [
                    "self",
                    "q",
                    "df"
                ],
                "_stats": [
                    "self",
                    "df"
                ]
            },
            "chi2_gen": {
                "_rvs": [
                    "self",
                    "df"
                ],
                "_pdf": [
                    "self",
                    "x",
                    "df"
                ],
                "_logpdf": [
                    "self",
                    "x",
                    "df"
                ],
                "_cdf": [
                    "self",
                    "x",
                    "df"
                ],
                "_sf": [
                    "self",
                    "x",
                    "df"
                ],
                "_isf": [
                    "self",
                    "p",
                    "df"
                ],
                "_ppf": [
                    "self",
                    "p",
                    "df"
                ],
                "_stats": [
                    "self",
                    "df"
                ]
            },
            "cosine_gen": {
                "_pdf": [
                    "self",
                    "x"
                ],
                "_cdf": [
                    "self",
                    "x"
                ],
                "_stats": [
                    "self"
                ],
                "_entropy": [
                    "self"
                ]
            },
            "dgamma_gen": {
                "_rvs": [
                    "self",
                    "a"
                ],
                "_pdf": [
                    "self",
                    "x",
                    "a"
                ],
                "_logpdf": [
                    "self",
                    "x",
                    "a"
                ],
                "_cdf": [
                    "self",
                    "x",
                    "a"
                ],
                "_sf": [
                    "self",
                    "x",
                    "a"
                ],
                "_ppf": [
                    "self",
                    "q",
                    "a"
                ],
                "_stats": [
                    "self",
                    "a"
                ]
            },
            "dweibull_gen": {
                "_rvs": [
                    "self",
                    "c"
                ],
                "_pdf": [
                    "self",
                    "x",
                    "c"
                ],
                "_logpdf": [
                    "self",
                    "x",
                    "c"
                ],
                "_cdf": [
                    "self",
                    "x",
                    "c"
                ],
                "_ppf_skip": [
                    "self",
                    "q",
                    "c"
                ],
                "_stats": [
                    "self",
                    "c"
                ]
            },
            "erlang_gen": {
                "_rvs": [
                    "self",
                    "a"
                ],
                "_arg_check": [
                    "self",
                    "a"
                ],
                "_pdf": [
                    "self",
                    "x",
                    "a"
                ],
                "_logpdf": [
                    "self",
                    "x",
                    "a"
                ],
                "_cdf": [
                    "self",
                    "x",
                    "a"
                ],
                "_sf": [
                    "self",
                    "x",
                    "a"
                ],
                "_ppf": [
                    "self",
                    "q",
                    "a"
                ],
                "_stats": [
                    "self",
                    "a"
                ],
                "_entropy": [
                    "self",
                    "a"
                ]
            },
            "expon_gen": {
                "_rvs": [
                    "self"
                ],
                "_pdf": [
                    "self",
                    "x"
                ],
                "_logpdf": [
                    "self",
                    "x"
                ],
                "_cdf": [
                    "self",
                    "x"
                ],
                "_ppf": [
                    "self",
                    "q"
                ],
                "_sf": [
                    "self",
                    "x"
                ],
                "_logsf": [
                    "self",
                    "x"
                ],
                "_isf": [
                    "self",
                    "q"
                ],
                "_stats": [
                    "self"
                ],
                "_entropy": [
                    "self"
                ]
            },
            "exponweib_gen": {
                "_pdf": [
                    "self",
                    "x",
                    "a",
                    "c"
                ],
                "_logpdf": [
                    "self",
                    "x",
                    "a",
                    "c"
                ],
                "_cdf": [
                    "self",
                    "x",
                    "a",
                    "c"
                ],
                "_ppf": [
                    "self",
                    "q",
                    "a",
                    "c"
                ]
            },
            "exponpow_gen": {
                "_pdf": [
                    "self",
                    "x",
                    "b"
                ],
                "_logpdf": [
                    "self",
                    "x",
                    "b"
                ],
                "_cdf": [
                    "self",
                    "x",
                    "b"
                ],
                "_sf": [
                    "self",
                    "x",
                    "b"
                ],
                "_isf": [
                    "self",
                    "x",
                    "b"
                ],
                "_ppf": [
                    "self",
                    "q",
                    "b"
                ]
            },
            "fatiguelife_gen": {
                "_rvs": [
                    "self",
                    "c"
                ],
                "_pdf": [
                    "self",
                    "x",
                    "c"
                ],
                "_logpdf": [
                    "self",
                    "x",
                    "c"
                ],
                "_cdf": [
                    "self",
                    "x",
                    "c"
                ],
                "_ppf": [
                    "self",
                    "q",
                    "c"
                ],
                "_stats": [
                    "self",
                    "c"
                ]
            },
            "foldcauchy_gen": {
                "_rvs": [
                    "self",
                    "c"
                ],
                "_pdf": [
                    "self",
                    "x",
                    "c"
                ],
                "_cdf": [
                    "self",
                    "x",
                    "c"
                ],
                "_stats": [
                    "self",
                    "c"
                ]
            },
            "f_gen": {
                "_rvs": [
                    "self",
                    "dfn",
                    "dfd"
                ],
                "_pdf": [
                    "self",
                    "x",
                    "dfn",
                    "dfd"
                ],
                "_logpdf": [
                    "self",
                    "x",
                    "dfn",
                    "dfd"
                ],
                "_cdf": [
                    "self",
                    "x",
                    "dfn",
                    "dfd"
                ],
                "_sf": [
                    "self",
                    "x",
                    "dfn",
                    "dfd"
                ],
                "_ppf": [
                    "self",
                    "q",
                    "dfn",
                    "dfd"
                ],
                "_stats": [
                    "self",
                    "dfn",
                    "dfd"
                ]
            },
            "foldnorm_gen": {
                "_rvs": [
                    "self",
                    "c"
                ],
                "_pdf": [
                    "self",
                    "x",
                    "c"
                ],
                "_cdf": [
                    "self",
                    "x",
                    "c"
                ],
                "_stats": [
                    "self",
                    "c"
                ]
            },
            "frechet_r_gen": {
                "_pdf": [
                    "self",
                    "x",
                    "c"
                ],
                "_logpdf": [
                    "self",
                    "x",
                    "c"
                ],
                "_cdf": [
                    "self",
                    "x",
                    "c"
                ],
                "_ppf": [
                    "self",
                    "q",
                    "c"
                ],
                "_munp": [
                    "self",
                    "n",
                    "c"
                ],
                "_entropy": [
                    "self",
                    "c"
                ]
            },
            "frechet_l_gen": {
                "_pdf": [
                    "self",
                    "x",
                    "c"
                ],
                "_cdf": [
                    "self",
                    "x",
                    "c"
                ],
                "_ppf": [
                    "self",
                    "q",
                    "c"
                ],
                "_munp": [
                    "self",
                    "n",
                    "c"
                ],
                "_entropy": [
                    "self",
                    "c"
                ]
            },
            "genlogistic_gen": {
                "_pdf": [
                    "self",
                    "x",
                    "c"
                ],
                "_logpdf": [
                    "self",
                    "x",
                    "c"
                ],
                "_cdf": [
                    "self",
                    "x",
                    "c"
                ],
                "_ppf": [
                    "self",
                    "q",
                    "c"
                ],
                "_stats": [
                    "self",
                    "c"
                ]
            },
            "genpareto_gen": {
                "_argcheck": [
                    "self",
                    "c"
                ],
                "_pdf": [
                    "self",
                    "x",
                    "c"
                ],
                "_logpdf": [
                    "self",
                    "x",
                    "c"
                ],
                "_cdf": [
                    "self",
                    "x",
                    "c"
                ],
                "_ppf": [
                    "self",
                    "q",
                    "c"
                ],
                "_munp": [
                    "self",
                    "n",
                    "c"
                ],
                "_entropy": [
                    "self",
                    "c"
                ]
            },
            "genexpon_gen": {
                "_pdf": [
                    "self",
                    "x",
                    "a",
                    "b",
                    "c"
                ],
                "_cdf": [
                    "self",
                    "x",
                    "a",
                    "b",
                    "c"
                ],
                "_logpdf": [
                    "self",
                    "x",
                    "a",
                    "b",
                    "c"
                ]
            },
            "genextreme_gen": {
                "_argcheck": [
                    "self",
                    "c"
                ],
                "_pdf": [
                    "self",
                    "x",
                    "c"
                ],
                "_cdf": [
                    "self",
                    "x",
                    "c"
                ],
                "_ppf": [
                    "self",
                    "q",
                    "c"
                ],
                "_stats": [
                    "self",
                    "c"
                ],
                "_munp": [
                    "self",
                    "n",
                    "c"
                ]
            },
            "gamma_gen": {
                "_rvs": [
                    "self",
                    "a"
                ],
                "_pdf": [
                    "self",
                    "x",
                    "a"
                ],
                "_logpdf": [
                    "self",
                    "x",
                    "a"
                ],
                "_cdf": [
                    "self",
                    "x",
                    "a"
                ],
                "_ppf": [
                    "self",
                    "q",
                    "a"
                ],
                "_stats": [
                    "self",
                    "a"
                ],
                "_entropy": [
                    "self",
                    "a"
                ],
                "_fitstart": [
                    "self",
                    "data"
                ],
                "fit": [
                    "self",
                    "data"
                ]
            },
            "gengamma_gen": {
                "_argcheck": [
                    "self",
                    "a",
                    "c"
                ],
                "_pdf": [
                    "self",
                    "x",
                    "a",
                    "c"
                ],
                "_cdf": [
                    "self",
                    "x",
                    "a",
                    "c"
                ],
                "_ppf": [
                    "self",
                    "q",
                    "a",
                    "c"
                ],
                "_munp": [
                    "self",
                    "n",
                    "a",
                    "c"
                ],
                "_entropy": [
                    "self",
                    "a",
                    "c"
                ]
            },
            "genhalflogistic_gen": {
                "_argcheck": [
                    "self",
                    "c"
                ],
                "_pdf": [
                    "self",
                    "x",
                    "c"
                ],
                "_cdf": [
                    "self",
                    "x",
                    "c"
                ],
                "_ppf": [
                    "self",
                    "q",
                    "c"
                ],
                "_entropy": [
                    "self",
                    "c"
                ]
            },
            "gompertz_gen": {
                "_pdf": [
                    "self",
                    "x",
                    "c"
                ],
                "_cdf": [
                    "self",
                    "x",
                    "c"
                ],
                "_ppf": [
                    "self",
                    "q",
                    "c"
                ],
                "_entropy": [
                    "self",
                    "c"
                ]
            },
            "gumbel_r_gen": {
                "_pdf": [
                    "self",
                    "x"
                ],
                "_logpdf": [
                    "self",
                    "x"
                ],
                "_cdf": [
                    "self",
                    "x"
                ],
                "_logcdf": [
                    "self",
                    "x"
                ],
                "_ppf": [
                    "self",
                    "q"
                ],
                "_stats": [
                    "self"
                ],
                "_entropy": [
                    "self"
                ]
            },
            "gumbel_l_gen": {
                "_pdf": [
                    "self",
                    "x"
                ],
                "_logpdf": [
                    "self",
                    "x"
                ],
                "_cdf": [
                    "self",
                    "x"
                ],
                "_ppf": [
                    "self",
                    "q"
                ],
                "_stats": [
                    "self"
                ],
                "_entropy": [
                    "self"
                ]
            },
            "halfcauchy_gen": {
                "_pdf": [
                    "self",
                    "x"
                ],
                "_logpdf": [
                    "self",
                    "x"
                ],
                "_cdf": [
                    "self",
                    "x"
                ],
                "_ppf": [
                    "self",
                    "q"
                ],
                "_stats": [
                    "self"
                ],
                "_entropy": [
                    "self"
                ]
            },
            "halflogistic_gen": {
                "_pdf": [
                    "self",
                    "x"
                ],
                "_cdf": [
                    "self",
                    "x"
                ],
                "_ppf": [
                    "self",
                    "q"
                ],
                "_munp": [
                    "self",
                    "n"
                ],
                "_entropy": [
                    "self"
                ]
            },
            "halfnorm_gen": {
                "_rvs": [
                    "self"
                ],
                "_pdf": [
                    "self",
                    "x"
                ],
                "_logpdf": [
                    "self",
                    "x"
                ],
                "_cdf": [
                    "self",
                    "x"
                ],
                "_ppf": [
                    "self",
                    "q"
                ],
                "_stats": [
                    "self"
                ],
                "_entropy": [
                    "self"
                ]
            },
            "hypsecant_gen": {
                "_pdf": [
                    "self",
                    "x"
                ],
                "_cdf": [
                    "self",
                    "x"
                ],
                "_ppf": [
                    "self",
                    "q"
                ],
                "_stats": [
                    "self"
                ],
                "_entropy": [
                    "self"
                ]
            },
            "gausshyper_gen": {
                "_argcheck": [
                    "self",
                    "a",
                    "b",
                    "c",
                    "z"
                ],
                "_pdf": [
                    "self",
                    "x",
                    "a",
                    "b",
                    "c",
                    "z"
                ],
                "_munp": [
                    "self",
                    "n",
                    "a",
                    "b",
                    "c",
                    "z"
                ]
            },
            "invgamma_gen": {
                "_pdf": [
                    "self",
                    "x",
                    "a"
                ],
                "_logpdf": [
                    "self",
                    "x",
                    "a"
                ],
                "_cdf": [
                    "self",
                    "x",
                    "a"
                ],
                "_ppf": [
                    "self",
                    "q",
                    "a"
                ],
                "_munp": [
                    "self",
                    "n",
                    "a"
                ],
                "_entropy": [
                    "self",
                    "a"
                ]
            },
            "invgauss_gen": {
                "_rvs": [
                    "self",
                    "mu"
                ],
                "_pdf": [
                    "self",
                    "x",
                    "mu"
                ],
                "_logpdf": [
                    "self",
                    "x",
                    "mu"
                ],
                "_cdf": [
                    "self",
                    "x",
                    "mu"
                ],
                "_stats": [
                    "self",
                    "mu"
                ]
            },
            "invweibull_gen": {
                "_pdf": [
                    "self",
                    "x",
                    "c"
                ],
                "_cdf": [
                    "self",
                    "x",
                    "c"
                ],
                "_ppf": [
                    "self",
                    "q",
                    "c"
                ],
                "_entropy": [
                    "self",
                    "c"
                ]
            },
            "johnsonsb_gen": {
                "_argcheck": [
                    "self",
                    "a",
                    "b"
                ],
                "_pdf": [
                    "self",
                    "x",
                    "a",
                    "b"
                ],
                "_cdf": [
                    "self",
                    "x",
                    "a",
                    "b"
                ],
                "_ppf": [
                    "self",
                    "q",
                    "a",
                    "b"
                ]
            },
            "johnsonsu_gen": {
                "_argcheck": [
                    "self",
                    "a",
                    "b"
                ],
                "_pdf": [
                    "self",
                    "x",
                    "a",
                    "b"
                ],
                "_cdf": [
                    "self",
                    "x",
                    "a",
                    "b"
                ],
                "_ppf": [
                    "self",
                    "q",
                    "a",
                    "b"
                ]
            },
            "laplace_gen": {
                "_rvs": [
                    "self"
                ],
                "_pdf": [
                    "self",
                    "x"
                ],
                "_cdf": [
                    "self",
                    "x"
                ],
                "_ppf": [
                    "self",
                    "q"
                ],
                "_stats": [
                    "self"
                ],
                "_entropy": [
                    "self"
                ]
            },
            "levy_gen": {
                "_pdf": [
                    "self",
                    "x"
                ],
                "_cdf": [
                    "self",
                    "x"
                ],
                "_ppf": [
                    "self",
                    "q"
                ],
                "_stats": [
                    "self"
                ]
            },
            "levy_l_gen": {
                "_pdf": [
                    "self",
                    "x"
                ],
                "_cdf": [
                    "self",
                    "x"
                ],
                "_ppf": [
                    "self",
                    "q"
                ],
                "_stats": [
                    "self"
                ]
            },
            "levy_stable_gen": {
                "_rvs": [
                    "self",
                    "alpha",
                    "beta"
                ],
                "_argcheck": [
                    "self",
                    "alpha",
                    "beta"
                ],
                "_pdf": [
                    "self",
                    "x",
                    "alpha",
                    "beta"
                ]
            },
            "logistic_gen": {
                "_rvs": [
                    "self"
                ],
                "_pdf": [
                    "self",
                    "x"
                ],
                "_cdf": [
                    "self",
                    "x"
                ],
                "_ppf": [
                    "self",
                    "q"
                ],
                "_stats": [
                    "self"
                ],
                "_entropy": [
                    "self"
                ]
            },
            "loggamma_gen": {
                "_rvs": [
                    "self",
                    "c"
                ],
                "_pdf": [
                    "self",
                    "x",
                    "c"
                ],
                "_cdf": [
                    "self",
                    "x",
                    "c"
                ],
                "_ppf": [
                    "self",
                    "q",
                    "c"
                ],
                "_munp": [
                    "self",
                    "n"
                ]
            },
            "loglaplace_gen": {
                "_pdf": [
                    "self",
                    "x",
                    "c"
                ],
                "_cdf": [
                    "self",
                    "x",
                    "c"
                ],
                "_ppf": [
                    "self",
                    "q",
                    "c"
                ],
                "_entropy": [
                    "self",
                    "c"
                ]
            },
            "lognorm_gen": {
                "_rvs": [
                    "self",
                    "s"
                ],
                "_pdf": [
                    "self",
                    "x",
                    "s"
                ],
                "_cdf": [
                    "self",
                    "x",
                    "s"
                ],
                "_ppf": [
                    "self",
                    "q",
                    "s"
                ],
                "_stats": [
                    "self",
                    "s"
                ],
                "_entropy": [
                    "self",
                    "s"
                ]
            },
            "gilbrat_gen": {
                "_rvs": [
                    "self"
                ],
                "_pdf": [
                    "self",
                    "x"
                ],
                "_cdf": [
                    "self",
                    "x"
                ],
                "_ppf": [
                    "self",
                    "q"
                ],
                "_stats": [
                    "self"
                ],
                "_entropy": [
                    "self"
                ]
            },
            "maxwell_gen": {
                "_rvs": [
                    "self"
                ],
                "_pdf": [
                    "self",
                    "x"
                ],
                "_cdf": [
                    "self",
                    "x"
                ],
                "_ppf": [
                    "self",
                    "q"
                ],
                "_stats": [
                    "self"
                ],
                "_entropy": [
                    "self"
                ]
            },
            "mielke_gen": {
                "_pdf": [
                    "self",
                    "x",
                    "k",
                    "s"
                ],
                "_cdf": [
                    "self",
                    "x",
                    "k",
                    "s"
                ],
                "_ppf": [
                    "self",
                    "q",
                    "k",
                    "s"
                ]
            },
            "nakagami_gen": {
                "_pdf": [
                    "self",
                    "x",
                    "nu"
                ],
                "_cdf": [
                    "self",
                    "x",
                    "nu"
                ],
                "_ppf": [
                    "self",
                    "q",
                    "nu"
                ],
                "_stats": [
                    "self",
                    "nu"
                ]
            },
            "ncx2_gen": {
                "_rvs": [
                    "self",
                    "df",
                    "nc"
                ],
                "_logpdf": [
                    "self",
                    "x",
                    "df",
                    "nc"
                ],
                "_pdf": [
                    "self",
                    "x",
                    "df",
                    "nc"
                ],
                "_cdf": [
                    "self",
                    "x",
                    "df",
                    "nc"
                ],
                "_ppf": [
                    "self",
                    "q",
                    "df",
                    "nc"
                ],
                "_stats": [
                    "self",
                    "df",
                    "nc"
                ]
            },
            "ncf_gen": {
                "_rvs": [
                    "self",
                    "dfn",
                    "dfd",
                    "nc"
                ],
                "_pdf_skip": [
                    "self",
                    "x",
                    "dfn",
                    "dfd",
                    "nc"
                ],
                "_cdf": [
                    "self",
                    "x",
                    "dfn",
                    "dfd",
                    "nc"
                ],
                "_ppf": [
                    "self",
                    "q",
                    "dfn",
                    "dfd",
                    "nc"
                ],
                "_munp": [
                    "self",
                    "n",
                    "dfn",
                    "dfd",
                    "nc"
                ],
                "_stats": [
                    "self",
                    "dfn",
                    "dfd",
                    "nc"
                ]
            },
            "t_gen": {
                "_rvs": [
                    "self",
                    "df"
                ],
                "_pdf": [
                    "self",
                    "x",
                    "df"
                ],
                "_logpdf": [
                    "self",
                    "x",
                    "df"
                ],
                "_cdf": [
                    "self",
                    "x",
                    "df"
                ],
                "_sf": [
                    "self",
                    "x",
                    "df"
                ],
                "_ppf": [
                    "self",
                    "q",
                    "df"
                ],
                "_isf": [
                    "self",
                    "q",
                    "df"
                ],
                "_stats": [
                    "self",
                    "df"
                ]
            },
            "nct_gen": {
                "_rvs": [
                    "self",
                    "df",
                    "nc"
                ],
                "_pdf": [
                    "self",
                    "x",
                    "df",
                    "nc"
                ],
                "_cdf": [
                    "self",
                    "x",
                    "df",
                    "nc"
                ],
                "_ppf": [
                    "self",
                    "q",
                    "df",
                    "nc"
                ],
                "_stats": [
                    "self",
                    "df",
                    "nc",
                    "moments"
                ]
            },
            "pareto_gen": {
                "_pdf": [
                    "self",
                    "x",
                    "b"
                ],
                "_cdf": [
                    "self",
                    "x",
                    "b"
                ],
                "_ppf": [
                    "self",
                    "q",
                    "b"
                ],
                "_stats": [
                    "self",
                    "b",
                    "moments"
                ],
                "_entropy": [
                    "self",
                    "c"
                ]
            },
            "lomax_gen": {
                "_pdf": [
                    "self",
                    "x",
                    "c"
                ],
                "_logpdf": [
                    "self",
                    "x",
                    "c"
                ],
                "_cdf": [
                    "self",
                    "x",
                    "c"
                ],
                "_sf": [
                    "self",
                    "x",
                    "c"
                ],
                "_logsf": [
                    "self",
                    "x",
                    "c"
                ],
                "_ppf": [
                    "self",
                    "q",
                    "c"
                ],
                "_stats": [
                    "self",
                    "c"
                ],
                "_entropy": [
                    "self",
                    "c"
                ]
            },
            "pearson3_gen": {
                "_preprocess": [
                    "self",
                    "x",
                    "skew"
                ],
                "_argcheck": [
                    "self",
                    "skew"
                ],
                "_stats": [
                    "self",
                    "skew"
                ],
                "_pdf": [
                    "self",
                    "x",
                    "skew"
                ],
                "_logpdf": [
                    "self",
                    "x",
                    "skew"
                ],
                "_cdf": [
                    "self",
                    "x",
                    "skew"
                ],
                "_rvs": [
                    "self",
                    "skew"
                ],
                "_ppf": [
                    "self",
                    "q",
                    "skew"
                ]
            },
            "powerlaw_gen": {
                "_pdf": [
                    "self",
                    "x",
                    "a"
                ],
                "_logpdf": [
                    "self",
                    "x",
                    "a"
                ],
                "_cdf": [
                    "self",
                    "x",
                    "a"
                ],
                "_logcdf": [
                    "self",
                    "x",
                    "a"
                ],
                "_ppf": [
                    "self",
                    "q",
                    "a"
                ],
                "_stats": [
                    "self",
                    "a"
                ],
                "_entropy": [
                    "self",
                    "a"
                ]
            },
            "powerlognorm_gen": {
                "_pdf": [
                    "self",
                    "x",
                    "c",
                    "s"
                ],
                "_cdf": [
                    "self",
                    "x",
                    "c",
                    "s"
                ],
                "_ppf": [
                    "self",
                    "q",
                    "c",
                    "s"
                ]
            },
            "powernorm_gen": {
                "_pdf": [
                    "self",
                    "x",
                    "c"
                ],
                "_logpdf": [
                    "self",
                    "x",
                    "c"
                ],
                "_cdf": [
                    "self",
                    "x",
                    "c"
                ],
                "_ppf": [
                    "self",
                    "q",
                    "c"
                ]
            },
            "rdist_gen": {
                "_pdf": [
                    "self",
                    "x",
                    "c"
                ],
                "_cdf_skip": [
                    "self",
                    "x",
                    "c"
                ],
                "_munp": [
                    "self",
                    "n",
                    "c"
                ]
            },
            "rayleigh_gen": {
                "_rvs": [
                    "self"
                ],
                "_pdf": [
                    "self",
                    "r"
                ],
                "_cdf": [
                    "self",
                    "r"
                ],
                "_ppf": [
                    "self",
                    "q"
                ],
                "_stats": [
                    "self"
                ],
                "_entropy": [
                    "self"
                ]
            },
            "reciprocal_gen": {
                "_argcheck": [
                    "self",
                    "a",
                    "b"
                ],
                "_pdf": [
                    "self",
                    "x",
                    "a",
                    "b"
                ],
                "_logpdf": [
                    "self",
                    "x",
                    "a",
                    "b"
                ],
                "_cdf": [
                    "self",
                    "x",
                    "a",
                    "b"
                ],
                "_ppf": [
                    "self",
                    "q",
                    "a",
                    "b"
                ],
                "_munp": [
                    "self",
                    "n",
                    "a",
                    "b"
                ],
                "_entropy": [
                    "self",
                    "a",
                    "b"
                ]
            },
            "rice_gen": {
                "_pdf": [
                    "self",
                    "x",
                    "b"
                ],
                "_logpdf": [
                    "self",
                    "x",
                    "b"
                ],
                "_munp": [
                    "self",
                    "n",
                    "b"
                ]
            },
            "recipinvgauss_gen": {
                "_rvs": [
                    "self",
                    "mu"
                ],
                "_pdf": [
                    "self",
                    "x",
                    "mu"
                ],
                "_logpdf": [
                    "self",
                    "x",
                    "mu"
                ],
                "_cdf": [
                    "self",
                    "x",
                    "mu"
                ]
            },
            "semicircular_gen": {
                "_pdf": [
                    "self",
                    "x"
                ],
                "_cdf": [
                    "self",
                    "x"
                ],
                "_stats": [
                    "self"
                ],
                "_entropy": [
                    "self"
                ]
            },
            "triang_gen": {
                "_rvs": [
                    "self",
                    "c"
                ],
                "_argcheck": [
                    "self",
                    "c"
                ],
                "_pdf": [
                    "self",
                    "x",
                    "c"
                ],
                "_cdf": [
                    "self",
                    "x",
                    "c"
                ],
                "_ppf": [
                    "self",
                    "q",
                    "c"
                ],
                "_stats": [
                    "self",
                    "c"
                ],
                "_entropy": [
                    "self",
                    "c"
                ]
            },
            "truncexpon_gen": {
                "_argcheck": [
                    "self",
                    "b"
                ],
                "_pdf": [
                    "self",
                    "x",
                    "b"
                ],
                "_logpdf": [
                    "self",
                    "x",
                    "b"
                ],
                "_cdf": [
                    "self",
                    "x",
                    "b"
                ],
                "_ppf": [
                    "self",
                    "q",
                    "b"
                ],
                "_munp": [
                    "self",
                    "n",
                    "b"
                ],
                "_entropy": [
                    "self",
                    "b"
                ]
            },
            "truncnorm_gen": {
                "_argcheck": [
                    "self",
                    "a",
                    "b"
                ],
                "_pdf": [
                    "self",
                    "x",
                    "a",
                    "b"
                ],
                "_logpdf": [
                    "self",
                    "x",
                    "a",
                    "b"
                ],
                "_cdf": [
                    "self",
                    "x",
                    "a",
                    "b"
                ],
                "_ppf": [
                    "self",
                    "q",
                    "a",
                    "b"
                ],
                "_stats": [
                    "self",
                    "a",
                    "b"
                ]
            },
            "tukeylambda_gen": {
                "_argcheck": [
                    "self",
                    "lam"
                ],
                "_pdf": [
                    "self",
                    "x",
                    "lam"
                ],
                "_cdf": [
                    "self",
                    "x",
                    "lam"
                ],
                "_ppf": [
                    "self",
                    "q",
                    "lam"
                ],
                "_stats": [
                    "self",
                    "lam"
                ],
                "_entropy": [
                    "self",
                    "lam"
                ]
            },
            "uniform_gen": {
                "_rvs": [
                    "self"
                ],
                "_pdf": [
                    "self",
                    "x"
                ],
                "_cdf": [
                    "self",
                    "x"
                ],
                "_ppf": [
                    "self",
                    "q"
                ],
                "_stats": [
                    "self"
                ],
                "_entropy": [
                    "self"
                ]
            },
            "vonmises_gen": {
                "_rvs": [
                    "self",
                    "b"
                ],
                "_pdf": [
                    "self",
                    "x",
                    "b"
                ],
                "_cdf": [
                    "self",
                    "x",
                    "b"
                ],
                "_stats_skip": [
                    "self",
                    "b"
                ]
            },
            "wald_gen": {
                "_rvs": [
                    "self"
                ],
                "_pdf": [
                    "self",
                    "x"
                ],
                "_logpdf": [
                    "self",
                    "x"
                ],
                "_cdf": [
                    "self",
                    "x"
                ],
                "_stats": [
                    "self"
                ]
            },
            "wrapcauchy_gen": {
                "_argcheck": [
                    "self",
                    "c"
                ],
                "_pdf": [
                    "self",
                    "x",
                    "c"
                ],
                "_cdf": [
                    "self",
                    "x",
                    "c"
                ],
                "_ppf": [
                    "self",
                    "q",
                    "c"
                ],
                "_entropy": [
                    "self",
                    "c"
                ]
            },
            "rv_discrete": {
                "__init__": [
                    "self",
                    "a",
                    "b",
                    "name",
                    "badvalue",
                    "moment_tol",
                    "values",
                    "inc",
                    "longname",
                    "shapes",
                    "extradoc"
                ],
                "_construct_default_doc": [
                    "self",
                    "longname",
                    "extradoc"
                ],
                "_construct_doc": [
                    "self"
                ],
                "_rvs": [
                    "self"
                ],
                "_nonzero": [
                    "self",
                    "k"
                ],
                "_argcheck": [
                    "self"
                ],
                "_pmf": [
                    "self",
                    "k"
                ],
                "_logpmf": [
                    "self",
                    "k"
                ],
                "_cdfsingle": [
                    "self",
                    "k"
                ],
                "_cdf": [
                    "self",
                    "x"
                ],
                "_logcdf": [
                    "self",
                    "x"
                ],
                "_sf": [
                    "self",
                    "x"
                ],
                "_logsf": [
                    "self",
                    "x"
                ],
                "_ppf": [
                    "self",
                    "q"
                ],
                "_isf": [
                    "self",
                    "q"
                ],
                "_stats": [
                    "self"
                ],
                "_munp": [
                    "self",
                    "n"
                ],
                "rvs": [
                    "self"
                ],
                "pmf": [
                    "self",
                    "k"
                ],
                "logpmf": [
                    "self",
                    "k"
                ],
                "cdf": [
                    "self",
                    "k"
                ],
                "logcdf": [
                    "self",
                    "k"
                ],
                "sf": [
                    "self",
                    "k"
                ],
                "logsf": [
                    "self",
                    "k"
                ],
                "ppf": [
                    "self",
                    "q"
                ],
                "isf": [
                    "self",
                    "q"
                ],
                "stats": [
                    "self"
                ],
                "moment": [
                    "self",
                    "n"
                ],
                "freeze": [
                    "self"
                ],
                "_entropy": [
                    "self"
                ],
                "entropy": [
                    "self"
                ],
                "__call__": [
                    "self"
                ],
                "expect": [
                    "self",
                    "func",
                    "args",
                    "loc",
                    "lb",
                    "ub",
                    "conditional"
                ]
            },
            "binom_gen": {
                "_rvs": [
                    "self",
                    "n",
                    "p"
                ],
                "_argcheck": [
                    "self",
                    "n",
                    "p"
                ],
                "_logpmf": [
                    "self",
                    "x",
                    "n",
                    "p"
                ],
                "_pmf": [
                    "self",
                    "x",
                    "n",
                    "p"
                ],
                "_cdf": [
                    "self",
                    "x",
                    "n",
                    "p"
                ],
                "_sf": [
                    "self",
                    "x",
                    "n",
                    "p"
                ],
                "_ppf": [
                    "self",
                    "q",
                    "n",
                    "p"
                ],
                "_stats": [
                    "self",
                    "n",
                    "p"
                ],
                "_entropy": [
                    "self",
                    "n",
                    "p"
                ]
            },
            "bernoulli_gen": {
                "_rvs": [
                    "self",
                    "pr"
                ],
                "_argcheck": [
                    "self",
                    "pr"
                ],
                "_logpmf": [
                    "self",
                    "x",
                    "pr"
                ],
                "_pmf": [
                    "self",
                    "x",
                    "pr"
                ],
                "_cdf": [
                    "self",
                    "x",
                    "pr"
                ],
                "_sf": [
                    "self",
                    "x",
                    "pr"
                ],
                "_ppf": [
                    "self",
                    "q",
                    "pr"
                ],
                "_stats": [
                    "self",
                    "pr"
                ],
                "_entropy": [
                    "self",
                    "pr"
                ]
            },
            "nbinom_gen": {
                "_rvs": [
                    "self",
                    "n",
                    "p"
                ],
                "_argcheck": [
                    "self",
                    "n",
                    "p"
                ],
                "_pmf": [
                    "self",
                    "x",
                    "n",
                    "p"
                ],
                "_logpmf": [
                    "self",
                    "x",
                    "n",
                    "p"
                ],
                "_cdf": [
                    "self",
                    "x",
                    "n",
                    "p"
                ],
                "_sf_skip": [
                    "self",
                    "x",
                    "n",
                    "p"
                ],
                "_ppf": [
                    "self",
                    "q",
                    "n",
                    "p"
                ],
                "_stats": [
                    "self",
                    "n",
                    "p"
                ]
            },
            "geom_gen": {
                "_rvs": [
                    "self",
                    "p"
                ],
                "_argcheck": [
                    "self",
                    "p"
                ],
                "_pmf": [
                    "self",
                    "k",
                    "p"
                ],
                "_logpmf": [
                    "self",
                    "k",
                    "p"
                ],
                "_cdf": [
                    "self",
                    "x",
                    "p"
                ],
                "_sf": [
                    "self",
                    "x",
                    "p"
                ],
                "_ppf": [
                    "self",
                    "q",
                    "p"
                ],
                "_stats": [
                    "self",
                    "p"
                ]
            },
            "hypergeom_gen": {
                "_rvs": [
                    "self",
                    "M",
                    "n",
                    "N"
                ],
                "_argcheck": [
                    "self",
                    "M",
                    "n",
                    "N"
                ],
                "_logpmf": [
                    "self",
                    "k",
                    "M",
                    "n",
                    "N"
                ],
                "_pmf": [
                    "self",
                    "k",
                    "M",
                    "n",
                    "N"
                ],
                "_stats": [
                    "self",
                    "M",
                    "n",
                    "N"
                ],
                "_entropy": [
                    "self",
                    "M",
                    "n",
                    "N"
                ],
                "_sf": [
                    "self",
                    "k",
                    "M",
                    "n",
                    "N"
                ]
            },
            "logser_gen": {
                "_rvs": [
                    "self",
                    "pr"
                ],
                "_argcheck": [
                    "self",
                    "pr"
                ],
                "_pmf": [
                    "self",
                    "k",
                    "pr"
                ],
                "_stats": [
                    "self",
                    "pr"
                ]
            },
            "poisson_gen": {
                "_rvs": [
                    "self",
                    "mu"
                ],
                "_logpmf": [
                    "self",
                    "k",
                    "mu"
                ],
                "_pmf": [
                    "self",
                    "k",
                    "mu"
                ],
                "_cdf": [
                    "self",
                    "x",
                    "mu"
                ],
                "_sf": [
                    "self",
                    "x",
                    "mu"
                ],
                "_ppf": [
                    "self",
                    "q",
                    "mu"
                ],
                "_stats": [
                    "self",
                    "mu"
                ]
            },
            "planck_gen": {
                "_argcheck": [
                    "self",
                    "lambda_"
                ],
                "_pmf": [
                    "self",
                    "k",
                    "lambda_"
                ],
                "_cdf": [
                    "self",
                    "x",
                    "lambda_"
                ],
                "_ppf": [
                    "self",
                    "q",
                    "lambda_"
                ],
                "_stats": [
                    "self",
                    "lambda_"
                ],
                "_entropy": [
                    "self",
                    "lambda_"
                ]
            },
            "boltzmann_gen": {
                "_pmf": [
                    "self",
                    "k",
                    "lambda_",
                    "N"
                ],
                "_cdf": [
                    "self",
                    "x",
                    "lambda_",
                    "N"
                ],
                "_ppf": [
                    "self",
                    "q",
                    "lambda_",
                    "N"
                ],
                "_stats": [
                    "self",
                    "lambda_",
                    "N"
                ]
            },
            "randint_gen": {
                "_argcheck": [
                    "self",
                    "min",
                    "max"
                ],
                "_pmf": [
                    "self",
                    "k",
                    "min",
                    "max"
                ],
                "_cdf": [
                    "self",
                    "x",
                    "min",
                    "max"
                ],
                "_ppf": [
                    "self",
                    "q",
                    "min",
                    "max"
                ],
                "_stats": [
                    "self",
                    "min",
                    "max"
                ],
                "_rvs": [
                    "self",
                    "min",
                    "max"
                ],
                "_entropy": [
                    "self",
                    "min",
                    "max"
                ]
            },
            "zipf_gen": {
                "_rvs": [
                    "self",
                    "a"
                ],
                "_argcheck": [
                    "self",
                    "a"
                ],
                "_pmf": [
                    "self",
                    "k",
                    "a"
                ],
                "_munp": [
                    "self",
                    "n",
                    "a"
                ],
                "_stats": [
                    "self",
                    "a"
                ]
            },
            "dlaplace_gen": {
                "_pmf": [
                    "self",
                    "k",
                    "a"
                ],
                "_cdf": [
                    "self",
                    "x",
                    "a"
                ],
                "_ppf": [
                    "self",
                    "q",
                    "a"
                ],
                "_stats_skip": [
                    "self",
                    "a"
                ],
                "_entropy": [
                    "self",
                    "a"
                ]
            },
            "skellam_gen": {
                "_rvs": [
                    "self",
                    "mu1",
                    "mu2"
                ],
                "_pmf": [
                    "self",
                    "x",
                    "mu1",
                    "mu2"
                ],
                "_cdf": [
                    "self",
                    "x",
                    "mu1",
                    "mu2"
                ],
                "_stats": [
                    "self",
                    "mu1",
                    "mu2"
                ]
            }
        },
        "scipy.stats": {},
        "scipy.stats.morestats": {
            "bayes_mvs": [
                "data",
                "alpha"
            ],
            "mvsdist": [
                "data"
            ],
            "kstat": [
                "data",
                "n"
            ],
            "kstatvar": [
                "data",
                "n"
            ],
            "probplot": [
                "x",
                "sparams",
                "dist",
                "fit",
                "plot"
            ],
            "ppcc_max": [
                "x",
                "brack",
                "dist"
            ],
            "ppcc_plot": [
                "x",
                "a",
                "b",
                "dist",
                "plot",
                "N"
            ],
            "boxcox_llf": [
                "lmb",
                "data"
            ],
            "_boxcox_conf_interval": [
                "x",
                "lmax",
                "alpha"
            ],
            "boxcox": [
                "x",
                "lmbda",
                "alpha"
            ],
            "boxcox_normmax": [
                "x",
                "brack"
            ],
            "boxcox_normplot": [
                "x",
                "la",
                "lb",
                "plot",
                "N"
            ],
            "shapiro": [
                "x",
                "a",
                "reta"
            ],
            "anderson": [
                "x",
                "dist"
            ],
            "ansari": [
                "x",
                "y"
            ],
            "bartlett": [],
            "levene": [],
            "binom_test": [
                "x",
                "n",
                "p"
            ],
            "_apply_func": [
                "x",
                "g",
                "func"
            ],
            "fligner": [],
            "mood": [
                "x",
                "y"
            ],
            "oneway": [],
            "wilcoxon": [
                "x",
                "y",
                "zero_method"
            ],
            "_hermnorm": [
                "N"
            ],
            "pdf_fromgamma": [
                "g1",
                "g2",
                "g3",
                "g4"
            ],
            "circmean": [
                "samples",
                "high",
                "low",
                "axis"
            ],
            "circvar": [
                "samples",
                "high",
                "low",
                "axis"
            ],
            "circstd": [
                "samples",
                "high",
                "low",
                "axis"
            ]
        },
        "scipy.stats._support": {
            "abut": [
                "source"
            ],
            "unique": [
                "inarray"
            ],
            "colex": [
                "a",
                "indices",
                "axis"
            ],
            "adm": [
                "a",
                "criterion"
            ],
            "linexand": [
                "a",
                "columnlist",
                "valuelist"
            ],
            "collapse": [
                "a",
                "keepcols",
                "collapsecols",
                "stderr",
                "ns",
                "cfcn"
            ],
            "_chk_asarray": [
                "a",
                "axis"
            ],
            "_chk2_asarray": [
                "a",
                "b",
                "axis"
            ],
            "compute_stderr": [
                "a",
                "axis",
                "ddof"
            ]
        },
        "scipy.stats.vonmises": {
            "von_mises_cdf_series": [
                "k",
                "x",
                "p"
            ],
            "von_mises_cdf_normalapprox": [
                "k",
                "x",
                "C1"
            ],
            "von_mises_cdf": [
                "k",
                "x"
            ]
        },
        "scipy.stats._binned_statistic": {
            "binned_statistic": [
                "x",
                "values",
                "statistic",
                "bins",
                "range"
            ],
            "binned_statistic_2d": [
                "x",
                "y",
                "values",
                "statistic",
                "bins",
                "range"
            ],
            "binned_statistic_dd": [
                "sample",
                "values",
                "statistic",
                "bins",
                "range"
            ]
        },
        "scipy.stats.mstats_extras": {
            "hdquantiles": [
                "data",
                "prob",
                "axis",
                "var"
            ],
            "hdmedian": [
                "data",
                "axis",
                "var"
            ],
            "hdquantiles_sd": [
                "data",
                "prob",
                "axis"
            ],
            "trimmed_mean_ci": [
                "data",
                "limits",
                "inclusive",
                "alpha",
                "axis"
            ],
            "mjci": [
                "data",
                "prob",
                "axis"
            ],
            "mquantiles_cimj": [
                "data",
                "prob",
                "alpha",
                "axis"
            ],
            "median_cihs": [
                "data",
                "alpha",
                "axis"
            ],
            "compare_medians_ms": [
                "group_1",
                "group_2",
                "axis"
            ],
            "idealfourths": [
                "data",
                "axis"
            ],
            "rsh": [
                "data",
                "points"
            ]
        },
        "scipy.stats._tukeylambda_stats": {
            "tukeylambda_variance": [
                "lam"
            ],
            "tukeylambda_kurtosis": [
                "lam"
            ]
        },
        "scipy.stats.contingency": {
            "margins": [
                "a"
            ],
            "expected_freq": [
                "observed"
            ],
            "chi2_contingency": [
                "observed",
                "correction"
            ]
        },
        "scipy.stats.setupscons": {
            "configuration": [
                "parent_package",
                "top_path"
            ]
        },
        "scipy.constants.setup": {
            "configuration": [
                "parent_package",
                "top_path"
            ]
        },
        "scipy.constants.constants": {
            "C2K": [
                "C"
            ],
            "K2C": [
                "K"
            ],
            "F2C": [
                "F"
            ],
            "C2F": [
                "C"
            ],
            "F2K": [
                "F"
            ],
            "K2F": [
                "K"
            ],
            "lambda2nu": [
                "lambda_"
            ],
            "nu2lambda": [
                "nu"
            ]
        },
        "scipy.constants": {},
        "scipy.constants.codata": {
            "parse_constants": [
                "d"
            ],
            "_check_obsolete": [
                "key"
            ],
            "value": [
                "key"
            ],
            "unit": [
                "key"
            ],
            "precision": [
                "key"
            ],
            "find": [
                "sub",
                "disp"
            ],
            "ConstantWarning": {}
        },
        "scipy.misc.doccer": {
            "docformat": [
                "docstring",
                "docdict"
            ],
            "indentcount_lines": [
                "lines"
            ],
            "filldoc": [
                "docdict",
                "unindent_params"
            ],
            "unindent_dict": [
                "docdict"
            ],
            "unindent_string": [
                "docstring"
            ]
        },
        "scipy.misc.common": {
            "logsumexp": [
                "a",
                "axis",
                "b"
            ],
            "factorial": [
                "n",
                "exact"
            ],
            "factorial2": [
                "n",
                "exact"
            ],
            "factorialk": [
                "n",
                "k",
                "exact"
            ],
            "comb": [
                "N",
                "k",
                "exact"
            ],
            "central_diff_weights": [
                "Np",
                "ndiv"
            ],
            "derivative": [
                "func",
                "x0",
                "dx",
                "n",
                "args",
                "order"
            ],
            "pade": [
                "an",
                "m"
            ],
            "lena": [],
            "ascent": [],
            "face": [
                "gray"
            ]
        },
        "scipy.misc.setup": {
            "configuration": [
                "parent_package",
                "top_path"
            ]
        },
        "scipy.misc": {
            "info": [
                "object",
                "maxwidth",
                "output",
                "toplevel"
            ]
        },
        "scipy.misc.pilutil": {
            "bytescale": [
                "data",
                "cmin",
                "cmax",
                "high",
                "low"
            ],
            "imread": [
                "name",
                "flatten"
            ],
            "imsave": [
                "name",
                "arr"
            ],
            "fromimage": [
                "im",
                "flatten"
            ],
            "toimage": [
                "arr",
                "high",
                "low",
                "cmin",
                "cmax",
                "pal",
                "mode",
                "channel_axis"
            ],
            "imrotate": [
                "arr",
                "angle",
                "interp"
            ],
            "imshow": [
                "arr"
            ],
            "imresize": [
                "arr",
                "size",
                "interp",
                "mode"
            ],
            "imfilter": [
                "arr",
                "ftype"
            ],
            "radon": [
                "arr",
                "theta"
            ]
        },
        "scipy.misc.setupscons": {
            "configuration": [
                "parent_package",
                "top_path"
            ]
        }
    }
}