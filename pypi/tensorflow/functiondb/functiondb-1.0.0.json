{
    "1.0.0": {
        "tensorflow": {
            "_LazyContribLoader": {
                "__getattr__": [
                    "self",
                    "item"
                ]
            }
        },
        "tensorflow.examples": {},
        "tensorflow.examples.tutorials": {},
        "tensorflow.examples.tutorials.mnist": {},
        "tensorflow.examples.tutorials.mnist.mnist": {
            "inference": [
                "images",
                "hidden1_units",
                "hidden2_units"
            ],
            "loss": [
                "logits",
                "labels"
            ],
            "training": [
                "loss",
                "learning_rate"
            ],
            "evaluation": [
                "logits",
                "labels"
            ]
        },
        "tensorflow.examples.tutorials.mnist.input_data": {},
        "tensorflow.tensorboard": {},
        "tensorflow.tensorboard.tensorboard": {
            "main": [
                "unused_argv"
            ]
        },
        "tensorflow.tensorboard.__main__": {},
        "tensorflow.tensorboard.backend.server": {
            "ParseEventFilesSpec": [
                "logdir"
            ],
            "ReloadMultiplexer": [
                "multiplexer",
                "path_to_run"
            ],
            "StartMultiplexerReloadingThread": [
                "multiplexer",
                "path_to_run",
                "load_interval"
            ],
            "BuildServer": [
                "multiplexer",
                "host",
                "port",
                "logdir"
            ],
            "ThreadedHTTPServer": {}
        },
        "tensorflow.tensorboard.backend": {},
        "tensorflow.tensorboard.backend.process_graph": {
            "prepare_graph_for_ui": [
                "graph",
                "limit_attr_size",
                "large_attrs_key"
            ]
        },
        "tensorflow.tensorboard.backend.handler": {
            "_content_type_for_image": [
                "encoded_image_string"
            ],
            "_uniform_sample": [
                "values",
                "count"
            ],
            "_OutputFormat": {},
            "TensorboardHandler": {
                "__init__": [
                    "self",
                    "multiplexer",
                    "name_to_plugin_dict",
                    "logdir"
                ],
                "_setup_data_handlers": [
                    "self"
                ],
                "respond": [
                    "self"
                ],
                "_image_response_for_run": [
                    "self",
                    "run_images",
                    "run",
                    "tag"
                ],
                "_audio_response_for_run": [
                    "self",
                    "run_audio",
                    "run",
                    "tag"
                ],
                "_path_is_safe": [
                    "self",
                    "path"
                ],
                "_serve_logdir": [
                    "self",
                    "unused_query_params"
                ],
                "_serve_scalars": [
                    "self",
                    "query_params"
                ],
                "_serve_graph": [
                    "self",
                    "query_params"
                ],
                "_serve_run_metadata": [
                    "self",
                    "query_params"
                ],
                "_serve_histograms": [
                    "self",
                    "query_params"
                ],
                "_serve_compressed_histograms": [
                    "self",
                    "query_params"
                ],
                "_serve_images": [
                    "self",
                    "query_params"
                ],
                "_serve_image": [
                    "self",
                    "query_params"
                ],
                "_query_for_individual_image": [
                    "self",
                    "run",
                    "tag",
                    "index"
                ],
                "_serve_audio": [
                    "self",
                    "query_params"
                ],
                "_serve_individual_audio": [
                    "self",
                    "query_params"
                ],
                "_query_for_individual_audio": [
                    "self",
                    "run",
                    "tag",
                    "index"
                ],
                "_serve_runs": [
                    "self",
                    "unused_query_params"
                ],
                "_serve_index": [
                    "self",
                    "unused_query_params"
                ],
                "_serve_js": [
                    "self",
                    "unused_query_params"
                ],
                "_serve_static_file": [
                    "self",
                    "path"
                ],
                "do_GET": [
                    "self"
                ],
                "log_message": [
                    "self"
                ],
                "log_request": [
                    "self"
                ]
            }
        },
        "tensorflow.tensorboard.lib": {},
        "tensorflow.tensorboard.lib.python": {},
        "tensorflow.tensorboard.lib.python.json_util": {
            "Cleanse": [
                "obj",
                "encoding"
            ]
        },
        "tensorflow.tensorboard.lib.python.http": {
            "Respond": [
                "handler",
                "content",
                "content_type",
                "code",
                "expires",
                "content_encoding",
                "encoding"
            ]
        },
        "tensorflow.tensorboard.plugins": {},
        "tensorflow.tensorboard.plugins.base_plugin": {
            "TBPlugin": {
                "get_plugin_handlers": [
                    "self",
                    "run_paths",
                    "logdir"
                ]
            }
        },
        "tensorflow.tensorboard.plugins.projector": {},
        "tensorflow.tensorboard.plugins.projector.plugin": {
            "_read_tensor_file": [
                "fpath"
            ],
            "_latest_checkpoints_changed": [
                "configs",
                "run_path_pairs"
            ],
            "_parse_positive_int_param": [
                "request",
                "query_params",
                "param_name"
            ],
            "ProjectorPlugin": {
                "__init__": [
                    "self"
                ],
                "get_plugin_handlers": [
                    "self",
                    "run_paths",
                    "logdir"
                ],
                "configs": [
                    "self"
                ],
                "_run_paths_changed": [
                    "self"
                ],
                "_augment_configs_with_checkpoint_info": [
                    "self"
                ],
                "_read_latest_config_files": [
                    "self",
                    "run_path_pairs"
                ],
                "_get_reader_for_run": [
                    "self",
                    "run"
                ],
                "_get_metadata_file_for_tensor": [
                    "self",
                    "tensor_name",
                    "config"
                ],
                "_get_bookmarks_file_for_tensor": [
                    "self",
                    "tensor_name",
                    "config"
                ],
                "_canonical_tensor_name": [
                    "self",
                    "tensor_name"
                ],
                "_get_embedding": [
                    "self",
                    "tensor_name",
                    "config"
                ],
                "_serve_runs": [
                    "self",
                    "request",
                    "query_params"
                ],
                "_serve_config": [
                    "self",
                    "request",
                    "query_params"
                ],
                "_serve_metadata": [
                    "self",
                    "request",
                    "query_params"
                ],
                "_serve_tensor": [
                    "self",
                    "request",
                    "query_params"
                ],
                "_serve_bookmarks": [
                    "self",
                    "request",
                    "query_params"
                ],
                "_serve_sprite_image": [
                    "self",
                    "request",
                    "query_params"
                ]
            }
        },
        "tensorflow.core": {},
        "tensorflow.core.example.example_pb2": {},
        "tensorflow.core.example": {},
        "tensorflow.core.example.feature_pb2": {},
        "tensorflow.core.example.example_parser_configuration_pb2": {},
        "tensorflow.core.util.saved_tensor_slice_pb2": {},
        "tensorflow.core.util": {},
        "tensorflow.core.util.event_pb2": {},
        "tensorflow.core.util.test_log_pb2": {},
        "tensorflow.core.util.memmapped_file_system_pb2": {},
        "tensorflow.core.lib": {},
        "tensorflow.core.lib.core": {},
        "tensorflow.core.lib.core.error_codes_pb2": {},
        "tensorflow.core.framework.allocation_description_pb2": {},
        "tensorflow.core.framework.log_memory_pb2": {},
        "tensorflow.core.framework.node_def_pb2": {},
        "tensorflow.core.framework.tensor_description_pb2": {},
        "tensorflow.core.framework": {},
        "tensorflow.core.framework.graph_pb2": {},
        "tensorflow.core.framework.resource_handle_pb2": {},
        "tensorflow.core.framework.tensor_slice_pb2": {},
        "tensorflow.core.framework.op_def_pb2": {},
        "tensorflow.core.framework.tensor_pb2": {},
        "tensorflow.core.framework.attr_value_pb2": {},
        "tensorflow.core.framework.types_pb2": {},
        "tensorflow.core.framework.versions_pb2": {},
        "tensorflow.core.framework.function_pb2": {},
        "tensorflow.core.framework.cost_graph_pb2": {},
        "tensorflow.core.framework.tensor_shape_pb2": {},
        "tensorflow.core.framework.device_attributes_pb2": {},
        "tensorflow.core.framework.kernel_def_pb2": {},
        "tensorflow.core.framework.step_stats_pb2": {},
        "tensorflow.core.framework.summary_pb2": {},
        "tensorflow.core.framework.variable_pb2": {},
        "tensorflow.core.protobuf.meta_graph_pb2": {},
        "tensorflow.core.protobuf.config_pb2": {},
        "tensorflow.core.protobuf.debug_pb2": {},
        "tensorflow.core.protobuf.tensor_bundle_pb2": {},
        "tensorflow.core.protobuf": {},
        "tensorflow.core.protobuf.queue_runner_pb2": {},
        "tensorflow.core.protobuf.named_tensor_pb2": {},
        "tensorflow.core.protobuf.saved_model_pb2": {},
        "tensorflow.core.protobuf.control_flow_pb2": {},
        "tensorflow.core.protobuf.saver_pb2": {},
        "tensorflow.core.protobuf.tensorflow_server_pb2": {},
        "tensorflow.contrib": {},
        "tensorflow.contrib.seq2seq": {},
        "tensorflow.contrib.seq2seq.python": {},
        "tensorflow.contrib.seq2seq.python.ops": {},
        "tensorflow.contrib.seq2seq.python.ops.seq2seq": {
            "dynamic_rnn_decoder": [
                "cell",
                "decoder_fn",
                "inputs",
                "sequence_length",
                "parallel_iterations",
                "swap_memory",
                "time_major",
                "scope",
                "name"
            ]
        },
        "tensorflow.contrib.seq2seq.python.ops.attention_decoder_fn": {
            "attention_decoder_fn_train": [
                "encoder_state",
                "attention_keys",
                "attention_values",
                "attention_score_fn",
                "attention_construct_fn",
                "name"
            ],
            "attention_decoder_fn_inference": [
                "output_fn",
                "encoder_state",
                "attention_keys",
                "attention_values",
                "attention_score_fn",
                "attention_construct_fn",
                "embeddings",
                "start_of_sequence_id",
                "end_of_sequence_id",
                "maximum_length",
                "num_decoder_symbols",
                "dtype",
                "name"
            ],
            "prepare_attention": [
                "attention_states",
                "attention_option",
                "num_units",
                "reuse"
            ],
            "_init_attention": [
                "encoder_state"
            ],
            "_create_attention_construct_fn": [
                "name",
                "num_units",
                "attention_score_fn",
                "reuse"
            ],
            "_attn_add_fun": [
                "v",
                "keys",
                "query"
            ],
            "_attn_mul_fun": [
                "keys",
                "query"
            ],
            "_create_attention_score_fn": [
                "name",
                "num_units",
                "attention_option",
                "reuse",
                "dtype"
            ]
        },
        "tensorflow.contrib.seq2seq.python.ops.decoder_fn": {
            "simple_decoder_fn_train": [
                "encoder_state",
                "name"
            ],
            "simple_decoder_fn_inference": [
                "output_fn",
                "encoder_state",
                "embeddings",
                "start_of_sequence_id",
                "end_of_sequence_id",
                "maximum_length",
                "num_decoder_symbols",
                "dtype",
                "name"
            ]
        },
        "tensorflow.contrib.seq2seq.python.ops.loss": {
            "sequence_loss": [
                "logits",
                "targets",
                "weights",
                "average_across_timesteps",
                "average_across_batch",
                "softmax_loss_function",
                "name"
            ]
        },
        "tensorflow.contrib.image": {},
        "tensorflow.contrib.image.ops": {},
        "tensorflow.contrib.image.ops.gen_image_ops": {
            "image_projective_transform": [
                "images",
                "transforms",
                "name"
            ],
            "_InitOpDefLibrary": []
        },
        "tensorflow.contrib.image.python": {},
        "tensorflow.contrib.image.python.ops": {},
        "tensorflow.contrib.image.python.ops.image_ops": {
            "rotate": [
                "images",
                "angles"
            ],
            "transform": [
                "images",
                "transforms"
            ]
        },
        "tensorflow.contrib.opt": {},
        "tensorflow.contrib.opt.python": {},
        "tensorflow.contrib.opt.python.training": {},
        "tensorflow.contrib.opt.python.training.variable_clipping_optimizer": {
            "VariableClippingOptimizer": {
                "__init__": [
                    "self",
                    "opt",
                    "vars_to_clip_dims",
                    "max_norm",
                    "use_locking",
                    "colocate_clip_ops_with_vars",
                    "name"
                ],
                "compute_gradients": [
                    "self"
                ],
                "get_slot": [
                    "self"
                ],
                "get_slot_names": [
                    "self"
                ],
                "apply_gradients": [
                    "self",
                    "grads_and_vars",
                    "global_step",
                    "name"
                ],
                "_clip_dense": [
                    "self",
                    "var"
                ],
                "_clip_sparse": [
                    "self",
                    "grad",
                    "var"
                ],
                "_maybe_colocate_with": [
                    "self",
                    "var"
                ]
            }
        },
        "tensorflow.contrib.opt.python.training.external_optimizer": {
            "_accumulate": [
                "list_"
            ],
            "_get_shape_tuple": [
                "tensor"
            ],
            "_prod": [
                "array"
            ],
            "_compute_gradients": [
                "tensor",
                "var_list"
            ],
            "ExternalOptimizerInterface": {
                "__init__": [
                    "self",
                    "loss",
                    "var_list",
                    "equalities",
                    "inequalities"
                ],
                "minimize": [
                    "self",
                    "session",
                    "feed_dict",
                    "fetches",
                    "step_callback",
                    "loss_callback"
                ],
                "_minimize": [
                    "self",
                    "initial_val",
                    "loss_grad_func",
                    "equality_funcs",
                    "equality_grad_funcs",
                    "inequality_funcs",
                    "inequality_grad_funcs",
                    "step_callback",
                    "optimizer_kwargs"
                ],
                "_pack": [
                    "cls",
                    "tensors"
                ],
                "_make_eval_func": [
                    "self",
                    "tensors",
                    "session",
                    "feed_dict",
                    "fetches",
                    "callback"
                ],
                "_make_eval_funcs": [
                    "self",
                    "tensors",
                    "session",
                    "feed_dict",
                    "fetches",
                    "callback"
                ]
            },
            "ScipyOptimizerInterface": {
                "_minimize": [
                    "self",
                    "initial_val",
                    "loss_grad_func",
                    "equality_funcs",
                    "equality_grad_funcs",
                    "inequality_funcs",
                    "inequality_grad_funcs",
                    "step_callback",
                    "optimizer_kwargs"
                ]
            }
        },
        "tensorflow.contrib.opt.python.training.moving_average_optimizer": {
            "MovingAverageOptimizer": {
                "__init__": [
                    "self",
                    "opt",
                    "average_decay",
                    "num_updates",
                    "sequential_update"
                ],
                "apply_gradients": [
                    "self",
                    "grads_and_vars",
                    "global_step",
                    "name"
                ],
                "swapping_saver": [
                    "self",
                    "var_list",
                    "name"
                ]
            }
        },
        "tensorflow.contrib.layers": {},
        "tensorflow.contrib.layers.ops": {},
        "tensorflow.contrib.layers.ops.gen_bucketization_op": {
            "bucketize": [
                "input",
                "boundaries",
                "name"
            ],
            "_InitOpDefLibrary": []
        },
        "tensorflow.contrib.layers.ops.gen_sparse_feature_cross_op": {
            "sparse_feature_cross": [
                "indices",
                "values",
                "shapes",
                "dense",
                "hashed_output",
                "num_buckets",
                "out_type",
                "internal_type",
                "name"
            ],
            "sparse_feature_cross_v2": [
                "indices",
                "values",
                "shapes",
                "dense",
                "hashed_output",
                "num_buckets",
                "hash_key",
                "out_type",
                "internal_type",
                "name"
            ],
            "_InitOpDefLibrary": []
        },
        "tensorflow.contrib.layers.python": {},
        "tensorflow.contrib.layers.python.layers.feature_column_ops": {
            "_embeddings_from_arguments": [
                "column",
                "args",
                "weight_collections",
                "trainable",
                "output_rank"
            ],
            "_input_from_feature_columns": [
                "columns_to_tensors",
                "feature_columns",
                "weight_collections",
                "trainable",
                "scope",
                "output_rank",
                "default_name"
            ],
            "input_from_feature_columns": [
                "columns_to_tensors",
                "feature_columns",
                "weight_collections",
                "trainable",
                "scope"
            ],
            "sequence_input_from_feature_columns": [
                "columns_to_tensors",
                "feature_columns",
                "weight_collections",
                "trainable",
                "scope"
            ],
            "_create_embedding_lookup": [
                "column",
                "columns_to_tensors",
                "embedding_lookup_arguments",
                "num_outputs",
                "trainable",
                "weight_collections"
            ],
            "_maybe_restore_from_checkpoint": [
                "checkpoint_path",
                "variable"
            ],
            "_create_joint_embedding_lookup": [
                "columns_to_tensors",
                "embedding_lookup_arguments",
                "num_outputs",
                "trainable",
                "weight_collections"
            ],
            "joint_weighted_sum_from_feature_columns": [
                "columns_to_tensors",
                "feature_columns",
                "num_outputs",
                "weight_collections",
                "trainable",
                "scope"
            ],
            "weighted_sum_from_feature_columns": [
                "columns_to_tensors",
                "feature_columns",
                "num_outputs",
                "weight_collections",
                "trainable",
                "scope"
            ],
            "parse_feature_columns_from_examples": [
                "serialized",
                "feature_columns",
                "name",
                "example_names"
            ],
            "transform_features": [
                "features",
                "feature_columns"
            ],
            "parse_feature_columns_from_sequence_examples": [
                "serialized",
                "context_feature_columns",
                "sequence_feature_columns",
                "name",
                "example_name"
            ],
            "_log_variable": [
                "variable"
            ],
            "_infer_real_valued_column_for_tensor": [
                "name",
                "tensor"
            ],
            "infer_real_valued_columns": [
                "features"
            ],
            "check_feature_columns": [
                "feature_columns"
            ],
            "_add_variable_collection": [
                "weight_collections"
            ],
            "_check_supported_sequence_columns": [
                "feature_columns"
            ],
            "_get_parent_columns": [
                "feature_column"
            ],
            "_gather_feature_columns": [
                "feature_columns"
            ],
            "_check_forbidden_sequence_columns": [
                "feature_columns"
            ],
            "_Transformer": {
                "__init__": [
                    "self",
                    "columns_to_tensors"
                ],
                "transform": [
                    "self",
                    "feature_column"
                ]
            }
        },
        "tensorflow.contrib.layers.python.layers": {},
        "tensorflow.contrib.layers.python.layers.target_column": {
            "regression_target": [
                "label_name",
                "weight_column_name",
                "label_dimension"
            ],
            "multi_class_target": [
                "n_classes",
                "label_name",
                "weight_column_name"
            ],
            "binary_svm_target": [
                "label_name",
                "weight_column_name"
            ],
            "_mean_squared_loss": [
                "logits",
                "target"
            ],
            "_log_loss_with_two_classes": [
                "logits",
                "target"
            ],
            "_softmax_cross_entropy_loss": [
                "logits",
                "target"
            ],
            "_run_metrics": [
                "predictions",
                "labels",
                "metrics",
                "weights"
            ],
            "get_default_binary_metrics_for_eval": [
                "thresholds"
            ],
            "_float_weights_or_none": [
                "weights"
            ],
            "_labels_streaming_mean": [
                "unused_predictions",
                "labels",
                "weights"
            ],
            "_predictions_streaming_mean": [
                "predictions",
                "unused_labels",
                "weights"
            ],
            "_streaming_auc": [
                "predictions",
                "labels",
                "weights"
            ],
            "_accuracy_at_threshold": [
                "threshold"
            ],
            "_streaming_at_threshold": [
                "streaming_metrics_fn",
                "threshold"
            ],
            "ProblemType": {},
            "_TargetColumn": {
                "__init__": [
                    "self",
                    "loss_fn",
                    "num_label_columns",
                    "label_name",
                    "weight_column_name",
                    "problem_type"
                ],
                "logits_to_predictions": [
                    "self",
                    "logits",
                    "proba"
                ],
                "get_eval_ops": [
                    "self",
                    "features",
                    "logits",
                    "labels",
                    "metrics"
                ],
                "label_name": [
                    "self"
                ],
                "weight_column_name": [
                    "self"
                ],
                "num_label_columns": [
                    "self"
                ],
                "get_weight_tensor": [
                    "self",
                    "features"
                ],
                "problem_type": [
                    "self"
                ],
                "_weighted_loss": [
                    "self",
                    "loss",
                    "weight_tensor"
                ],
                "training_loss": [
                    "self",
                    "logits",
                    "target",
                    "features",
                    "name"
                ],
                "loss": [
                    "self",
                    "logits",
                    "target",
                    "features"
                ]
            },
            "_RegressionTargetColumn": {
                "__init__": [
                    "self",
                    "loss_fn",
                    "label_name",
                    "weight_column_name",
                    "label_dimension"
                ],
                "logits_to_predictions": [
                    "self",
                    "logits",
                    "proba"
                ],
                "get_eval_ops": [
                    "self",
                    "features",
                    "logits",
                    "labels",
                    "metrics"
                ]
            },
            "_MultiClassTargetColumn": {
                "__init__": [
                    "self",
                    "loss_fn",
                    "n_classes",
                    "label_name",
                    "weight_column_name"
                ],
                "logits_to_predictions": [
                    "self",
                    "logits",
                    "proba"
                ],
                "_default_eval_metrics": [
                    "self"
                ],
                "get_eval_ops": [
                    "self",
                    "features",
                    "logits",
                    "labels",
                    "metrics"
                ]
            },
            "_BinarySvmTargetColumn": {
                "__init__": [
                    "self",
                    "label_name",
                    "weight_column_name"
                ],
                "logits_to_predictions": [
                    "self",
                    "logits",
                    "proba"
                ]
            },
            "_MetricKeys": {}
        },
        "tensorflow.contrib.layers.python.layers.regularizers": {
            "l1_regularizer": [
                "scale",
                "scope"
            ],
            "l2_regularizer": [
                "scale",
                "scope"
            ],
            "l1_l2_regularizer": [
                "scale_l1",
                "scale_l2",
                "scope"
            ],
            "sum_regularizer": [
                "regularizer_list",
                "scope"
            ],
            "apply_regularization": [
                "regularizer",
                "weights_list"
            ]
        },
        "tensorflow.contrib.layers.python.layers.utils": {
            "collect_named_outputs": [
                "collections",
                "alias",
                "outputs"
            ],
            "append_tensor_alias": [
                "tensor",
                "alias"
            ],
            "gather_tensors_aliases": [
                "tensors"
            ],
            "get_tensor_aliases": [
                "tensor"
            ],
            "convert_collection_to_dict": [
                "collection"
            ],
            "constant_value": [
                "value_or_tensor_or_var",
                "dtype"
            ],
            "static_cond": [
                "pred",
                "fn1",
                "fn2"
            ],
            "smart_cond": [
                "pred",
                "fn1",
                "fn2",
                "name"
            ],
            "get_variable_collections": [
                "variables_collections",
                "name"
            ],
            "first_dimension": [
                "shape",
                "min_rank"
            ],
            "last_dimension": [
                "shape",
                "min_rank"
            ],
            "two_element_tuple": [
                "int_or_tuple"
            ],
            "n_positive_integers": [
                "n",
                "value"
            ]
        },
        "tensorflow.contrib.layers.python.layers.feature_column": {
            "sparse_column_with_integerized_feature": [
                "column_name",
                "bucket_size",
                "combiner",
                "dtype"
            ],
            "sparse_column_with_hash_bucket": [
                "column_name",
                "hash_bucket_size",
                "combiner",
                "dtype"
            ],
            "sparse_column_with_keys": [
                "column_name",
                "keys",
                "default_value",
                "combiner"
            ],
            "sparse_column_with_vocabulary_file": [
                "column_name",
                "vocabulary_file",
                "num_oov_buckets",
                "vocab_size",
                "default_value",
                "combiner",
                "dtype"
            ],
            "weighted_sparse_column": [
                "sparse_id_column",
                "weight_column_name",
                "dtype"
            ],
            "one_hot_column": [
                "sparse_id_column"
            ],
            "embedding_column": [
                "sparse_id_column",
                "dimension",
                "combiner",
                "initializer",
                "ckpt_to_load_from",
                "tensor_name_in_ckpt",
                "max_norm"
            ],
            "shared_embedding_columns": [
                "sparse_id_columns",
                "dimension",
                "combiner",
                "shared_embedding_name",
                "initializer",
                "ckpt_to_load_from",
                "tensor_name_in_ckpt",
                "max_norm"
            ],
            "scattered_embedding_column": [
                "column_name",
                "size",
                "dimension",
                "hash_key",
                "combiner",
                "initializer"
            ],
            "_reshape_real_valued_tensor": [
                "input_tensor",
                "output_rank",
                "column_name"
            ],
            "real_valued_column": [
                "column_name",
                "dimension",
                "default_value",
                "dtype",
                "normalizer"
            ],
            "bucketized_column": [
                "source_column",
                "boundaries"
            ],
            "crossed_column": [
                "columns",
                "hash_bucket_size",
                "combiner",
                "ckpt_to_load_from",
                "tensor_name_in_ckpt",
                "hash_key"
            ],
            "_get_feature_config": [
                "feature_column"
            ],
            "create_feature_spec_for_parsing": [
                "feature_columns"
            ],
            "_create_sequence_feature_spec_for_parsing": [
                "sequence_feature_columns",
                "allow_missing_by_default"
            ],
            "make_place_holder_tensors_for_base_features": [
                "feature_columns"
            ],
            "_LinearEmbeddingLookupArguments": {},
            "_DeepEmbeddingLookupArguments": {},
            "_FeatureColumn": {
                "name": [
                    "self"
                ],
                "config": [
                    "self"
                ],
                "key": [
                    "self"
                ],
                "insert_transformed_feature": [
                    "self",
                    "columns_to_tensors"
                ],
                "_to_dnn_input_layer": [
                    "self",
                    "input_tensor",
                    "weight_collection",
                    "trainable",
                    "output_rank"
                ],
                "_deep_embedding_lookup_arguments": [
                    "self",
                    "input_tensor"
                ],
                "_wide_embedding_lookup_arguments": [
                    "self",
                    "input_tensor"
                ],
                "_to_dense_tensor": [
                    "self",
                    "input_tensor"
                ],
                "_checkpoint_path": [
                    "self"
                ],
                "_key_without_properties": [
                    "self",
                    "properties"
                ]
            },
            "_SparseColumn": {
                "__new__": [
                    "cls",
                    "column_name",
                    "is_integerized",
                    "bucket_size",
                    "lookup_config",
                    "combiner",
                    "dtype"
                ],
                "name": [
                    "self"
                ],
                "length": [
                    "self"
                ],
                "config": [
                    "self"
                ],
                "key": [
                    "self"
                ],
                "id_tensor": [
                    "self",
                    "input_tensor"
                ],
                "weight_tensor": [
                    "self",
                    "input_tensor"
                ],
                "_to_dnn_input_layer": [
                    "self",
                    "input_tensor",
                    "weight_collections",
                    "trainable",
                    "output_rank"
                ],
                "_wide_embedding_lookup_arguments": [
                    "self",
                    "input_tensor"
                ],
                "_get_input_sparse_tensor": [
                    "self",
                    "columns_to_tensors"
                ],
                "is_compatible": [
                    "self",
                    "other_column"
                ]
            },
            "_SparseColumnIntegerized": {
                "__new__": [
                    "cls",
                    "column_name",
                    "bucket_size",
                    "combiner",
                    "dtype"
                ],
                "insert_transformed_feature": [
                    "self",
                    "columns_to_tensors"
                ]
            },
            "_SparseColumnHashed": {
                "__new__": [
                    "cls",
                    "column_name",
                    "hash_bucket_size",
                    "combiner",
                    "dtype"
                ],
                "insert_transformed_feature": [
                    "self",
                    "columns_to_tensors"
                ]
            },
            "_SparseColumnKeys": {
                "__new__": [
                    "cls",
                    "column_name",
                    "keys",
                    "default_value",
                    "combiner"
                ],
                "insert_transformed_feature": [
                    "self",
                    "columns_to_tensors"
                ]
            },
            "_SparseColumnVocabulary": {
                "__new__": [
                    "cls",
                    "column_name",
                    "vocabulary_file",
                    "num_oov_buckets",
                    "vocab_size",
                    "default_value",
                    "combiner",
                    "dtype"
                ],
                "insert_transformed_feature": [
                    "self",
                    "columns_to_tensors"
                ]
            },
            "_WeightedSparseColumn": {
                "__new__": [
                    "cls",
                    "sparse_id_column",
                    "weight_column_name",
                    "dtype"
                ],
                "name": [
                    "self"
                ],
                "length": [
                    "self"
                ],
                "config": [
                    "self"
                ],
                "key": [
                    "self"
                ],
                "insert_transformed_feature": [
                    "self",
                    "columns_to_tensors"
                ],
                "id_tensor": [
                    "self",
                    "input_tensor"
                ],
                "weight_tensor": [
                    "self",
                    "input_tensor"
                ],
                "_to_dnn_input_layer": [
                    "self",
                    "input_tensor",
                    "weight_collections",
                    "trainable",
                    "output_rank"
                ],
                "_wide_embedding_lookup_arguments": [
                    "self",
                    "input_tensor"
                ]
            },
            "_OneHotColumn": {
                "name": [
                    "self"
                ],
                "length": [
                    "self"
                ],
                "config": [
                    "self"
                ],
                "key": [
                    "self"
                ],
                "insert_transformed_feature": [
                    "self",
                    "columns_to_tensors"
                ],
                "_to_dnn_input_layer": [
                    "self",
                    "transformed_input_tensor",
                    "unused_weight_collections",
                    "unused_trainable",
                    "output_rank"
                ]
            },
            "_EmbeddingColumn": {
                "__new__": [
                    "cls",
                    "sparse_id_column",
                    "dimension",
                    "combiner",
                    "initializer",
                    "ckpt_to_load_from",
                    "tensor_name_in_ckpt",
                    "shared_embedding_name",
                    "shared_vocab_size",
                    "max_norm"
                ],
                "name": [
                    "self"
                ],
                "length": [
                    "self"
                ],
                "config": [
                    "self"
                ],
                "key": [
                    "self"
                ],
                "insert_transformed_feature": [
                    "self",
                    "columns_to_tensors"
                ],
                "_deep_embedding_lookup_arguments": [
                    "self",
                    "input_tensor"
                ],
                "_checkpoint_path": [
                    "self"
                ],
                "_wide_embedding_lookup_arguments": [
                    "self",
                    "input_tensor"
                ]
            },
            "_ScatteredEmbeddingColumn": {
                "__new__": [
                    "cls",
                    "column_name",
                    "size",
                    "dimension",
                    "hash_key",
                    "combiner",
                    "initializer"
                ],
                "name": [
                    "self"
                ],
                "config": [
                    "self"
                ],
                "insert_transformed_feature": [
                    "self",
                    "columns_to_tensors"
                ],
                "_deep_embedding_lookup_arguments": [
                    "self",
                    "input_tensor"
                ]
            },
            "_RealValuedColumn": {
                "__new__": [
                    "cls",
                    "column_name",
                    "dimension",
                    "default_value",
                    "dtype",
                    "normalizer"
                ],
                "name": [
                    "self"
                ],
                "config": [
                    "self"
                ],
                "key": [
                    "self"
                ],
                "normalizer_fn": [
                    "self"
                ],
                "_normalized_input_tensor": [
                    "self",
                    "input_tensor"
                ],
                "insert_transformed_feature": [
                    "self",
                    "columns_to_tensors"
                ],
                "_to_dnn_input_layer": [
                    "self",
                    "input_tensor",
                    "weight_collections",
                    "trainable",
                    "output_rank"
                ],
                "_to_dense_tensor": [
                    "self",
                    "input_tensor"
                ]
            },
            "_BucketizedColumn": {
                "__new__": [
                    "cls",
                    "source_column",
                    "boundaries"
                ],
                "name": [
                    "self"
                ],
                "length": [
                    "self"
                ],
                "config": [
                    "self"
                ],
                "key": [
                    "self"
                ],
                "insert_transformed_feature": [
                    "self",
                    "columns_to_tensors"
                ],
                "_to_dnn_input_layer": [
                    "self",
                    "input_tensor",
                    "weight_collections",
                    "trainable",
                    "output_rank"
                ],
                "to_sparse_tensor": [
                    "self",
                    "input_tensor"
                ],
                "_wide_embedding_lookup_arguments": [
                    "self",
                    "input_tensor"
                ]
            },
            "_CrossedColumn": {
                "_assert_is_crossable": [
                    "column"
                ],
                "__new__": [
                    "cls",
                    "columns",
                    "hash_bucket_size",
                    "hash_key",
                    "combiner",
                    "ckpt_to_load_from",
                    "tensor_name_in_ckpt"
                ],
                "name": [
                    "self"
                ],
                "config": [
                    "self"
                ],
                "length": [
                    "self"
                ],
                "key": [
                    "self"
                ],
                "id_tensor": [
                    "self",
                    "input_tensor"
                ],
                "weight_tensor": [
                    "self",
                    "input_tensor"
                ],
                "insert_transformed_feature": [
                    "self",
                    "columns_to_tensors"
                ],
                "_to_dnn_input_layer": [
                    "self",
                    "input_tensor",
                    "weight_collections",
                    "trainable",
                    "output_rank"
                ],
                "_checkpoint_path": [
                    "self"
                ],
                "_wide_embedding_lookup_arguments": [
                    "self",
                    "input_tensor"
                ]
            },
            "DataFrameColumn": {
                "__new__": [
                    "cls",
                    "column_name",
                    "series"
                ],
                "name": [
                    "self"
                ],
                "config": [
                    "self"
                ],
                "key": [
                    "self"
                ],
                "insert_transformed_feature": [
                    "self",
                    "columns_to_tensors"
                ],
                "_to_dnn_input_layer": [
                    "self",
                    "input_tensor",
                    "weight_collections",
                    "trainable",
                    "output_rank"
                ],
                "_to_dense_tensor": [
                    "self",
                    "input_tensor"
                ],
                "__eq__": [
                    "self",
                    "other"
                ],
                "__ne__": [
                    "self",
                    "other"
                ]
            },
            "_SparseIdLookupConfig": {
                "__new__": [
                    "cls",
                    "vocabulary_file",
                    "keys",
                    "num_oov_buckets",
                    "vocab_size",
                    "default_value"
                ]
            }
        },
        "tensorflow.contrib.layers.python.layers.summaries": {
            "_add_scalar_summary": [
                "tensor",
                "tag"
            ],
            "_add_histogram_summary": [
                "tensor",
                "tag"
            ],
            "summarize_activation": [
                "op"
            ],
            "summarize_tensor": [
                "tensor",
                "tag"
            ],
            "summarize_tensors": [
                "tensors",
                "summarizer"
            ],
            "summarize_collection": [
                "collection",
                "name_filter",
                "summarizer"
            ],
            "summarize_activations": [
                "name_filter",
                "summarizer"
            ]
        },
        "tensorflow.contrib.layers.python.layers.layers": {
            "avg_pool2d": [
                "inputs",
                "kernel_size",
                "stride",
                "padding",
                "data_format",
                "outputs_collections",
                "scope"
            ],
            "_fused_batch_norm": [
                "inputs",
                "decay",
                "center",
                "scale",
                "epsilon",
                "activation_fn",
                "param_initializers",
                "updates_collections",
                "is_training",
                "reuse",
                "variables_collections",
                "outputs_collections",
                "trainable",
                "data_format",
                "zero_debias_moving_mean",
                "scope"
            ],
            "batch_norm": [
                "inputs",
                "decay",
                "center",
                "scale",
                "epsilon",
                "activation_fn",
                "param_initializers",
                "updates_collections",
                "is_training",
                "reuse",
                "variables_collections",
                "outputs_collections",
                "trainable",
                "batch_weights",
                "fused",
                "data_format",
                "zero_debias_moving_mean",
                "scope"
            ],
            "bias_add": [
                "inputs",
                "activation_fn",
                "initializer",
                "regularizer",
                "reuse",
                "variables_collections",
                "outputs_collections",
                "trainable",
                "data_format",
                "scope"
            ],
            "convolution": [
                "inputs",
                "num_outputs",
                "kernel_size",
                "stride",
                "padding",
                "data_format",
                "rate",
                "activation_fn",
                "normalizer_fn",
                "normalizer_params",
                "weights_initializer",
                "weights_regularizer",
                "biases_initializer",
                "biases_regularizer",
                "reuse",
                "variables_collections",
                "outputs_collections",
                "trainable",
                "scope"
            ],
            "convolution2d_in_plane": [
                "inputs",
                "kernel_size",
                "stride",
                "padding",
                "activation_fn",
                "normalizer_fn",
                "normalizer_params",
                "weights_initializer",
                "weights_regularizer",
                "biases_initializer",
                "biases_regularizer",
                "reuse",
                "variables_collections",
                "outputs_collections",
                "trainable",
                "scope"
            ],
            "convolution2d_transpose": [
                "inputs",
                "num_outputs",
                "kernel_size",
                "stride",
                "padding",
                "data_format",
                "activation_fn",
                "normalizer_fn",
                "normalizer_params",
                "weights_initializer",
                "weights_regularizer",
                "biases_initializer",
                "biases_regularizer",
                "reuse",
                "variables_collections",
                "outputs_collections",
                "trainable",
                "scope"
            ],
            "dropout": [
                "inputs",
                "keep_prob",
                "noise_shape",
                "is_training",
                "outputs_collections",
                "scope"
            ],
            "flatten": [
                "inputs",
                "outputs_collections",
                "scope"
            ],
            "_sparse_inner_flatten": [
                "inputs",
                "new_rank"
            ],
            "_dense_inner_flatten": [
                "inputs",
                "new_rank"
            ],
            "_inner_flatten": [
                "inputs",
                "new_rank",
                "output_collections",
                "scope"
            ],
            "_model_variable_getter": [
                "getter",
                "name",
                "shape",
                "dtype",
                "initializer",
                "regularizer",
                "trainable",
                "collections",
                "caching_device",
                "partitioner",
                "rename"
            ],
            "_build_variable_getter": [
                "rename"
            ],
            "_add_variable_to_collections": [
                "variable",
                "collections_set",
                "collections_name"
            ],
            "fully_connected": [
                "inputs",
                "num_outputs",
                "activation_fn",
                "normalizer_fn",
                "normalizer_params",
                "weights_initializer",
                "weights_regularizer",
                "biases_initializer",
                "biases_regularizer",
                "reuse",
                "variables_collections",
                "outputs_collections",
                "trainable",
                "scope"
            ],
            "layer_norm": [
                "inputs",
                "center",
                "scale",
                "activation_fn",
                "reuse",
                "variables_collections",
                "outputs_collections",
                "trainable",
                "scope"
            ],
            "max_pool2d": [
                "inputs",
                "kernel_size",
                "stride",
                "padding",
                "data_format",
                "outputs_collections",
                "scope"
            ],
            "pool": [
                "inputs",
                "kernel_size",
                "pooling_type",
                "padding",
                "data_format",
                "dilation_rate",
                "stride",
                "outputs_collections",
                "scope"
            ],
            "one_hot_encoding": [
                "labels",
                "num_classes",
                "on_value",
                "off_value",
                "outputs_collections",
                "scope"
            ],
            "_apply_activation": [
                "y",
                "activation_fn",
                "output_collections"
            ],
            "repeat": [
                "inputs",
                "repetitions",
                "layer"
            ],
            "separable_convolution2d": [
                "inputs",
                "num_outputs",
                "kernel_size",
                "depth_multiplier",
                "stride",
                "padding",
                "rate",
                "activation_fn",
                "normalizer_fn",
                "normalizer_params",
                "weights_initializer",
                "weights_regularizer",
                "biases_initializer",
                "biases_regularizer",
                "reuse",
                "variables_collections",
                "outputs_collections",
                "trainable",
                "scope"
            ],
            "softmax": [
                "logits",
                "scope"
            ],
            "stack": [
                "inputs",
                "layer",
                "stack_args"
            ],
            "unit_norm": [
                "inputs",
                "dim",
                "epsilon",
                "scope"
            ],
            "legacy_fully_connected": [
                "x",
                "num_output_units",
                "activation_fn",
                "weight_init",
                "bias_init",
                "name",
                "weight_collections",
                "bias_collections",
                "output_collections",
                "trainable",
                "weight_regularizer",
                "bias_regularizer"
            ]
        },
        "tensorflow.contrib.layers.python.layers.initializers": {
            "xavier_initializer": [
                "uniform",
                "seed",
                "dtype"
            ],
            "variance_scaling_initializer": [
                "factor",
                "mode",
                "uniform",
                "seed",
                "dtype"
            ]
        },
        "tensorflow.contrib.layers.python.layers.optimizers": {
            "optimize_loss": [
                "loss",
                "global_step",
                "learning_rate",
                "optimizer",
                "gradient_noise_scale",
                "gradient_multipliers",
                "clip_gradients",
                "learning_rate_decay_fn",
                "update_ops",
                "variables",
                "name",
                "summaries",
                "colocate_gradients_with_ops"
            ],
            "_clip_gradients_by_norm": [
                "grads_and_vars",
                "clip_gradients"
            ],
            "_adaptive_max_norm": [
                "norm",
                "std_factor",
                "decay",
                "global_step",
                "epsilon",
                "name"
            ],
            "adaptive_clipping_fn": [
                "std_factor",
                "decay",
                "static_max_norm",
                "global_step",
                "report_summary",
                "epsilon",
                "name"
            ],
            "_add_scaled_noise_to_gradients": [
                "grads_and_vars",
                "gradient_noise_scale"
            ],
            "_multiply_gradients": [
                "grads_and_vars",
                "gradient_multipliers"
            ]
        },
        "tensorflow.contrib.layers.python.layers.encoders": {
            "bow_encoder": [
                "ids",
                "vocab_size",
                "embed_dim",
                "sparse_lookup",
                "initializer",
                "regularizer",
                "trainable",
                "scope",
                "reuse"
            ],
            "embed_sequence": [
                "ids",
                "vocab_size",
                "embed_dim",
                "unique",
                "initializer",
                "regularizer",
                "trainable",
                "scope",
                "reuse"
            ]
        },
        "tensorflow.contrib.layers.python.layers.embedding_ops": {
            "safe_embedding_lookup_sparse": [
                "embedding_weights",
                "sparse_ids",
                "sparse_weights",
                "combiner",
                "default_id",
                "name",
                "partition_strategy",
                "max_norm"
            ],
            "_prune_invalid_ids": [
                "sparse_ids",
                "sparse_weights"
            ],
            "scattered_embedding_lookup": [
                "params",
                "values",
                "dimension",
                "name",
                "hash_key"
            ],
            "_sampled_scattered_embedding_lookup": [
                "params",
                "values",
                "dimension",
                "sampled_candidates",
                "hash_key",
                "name"
            ],
            "scattered_embedding_lookup_sparse": [
                "params",
                "sparse_values",
                "dimension",
                "combiner",
                "default_value",
                "name",
                "hash_key"
            ],
            "embedding_lookup_unique": [
                "params",
                "ids",
                "name"
            ],
            "_sampled_scattered_embedding_lookup_sparse": [
                "params",
                "sp_values",
                "dimension",
                "sampled_candidates",
                "hash_key",
                "with_sign_hash",
                "name"
            ]
        },
        "tensorflow.contrib.layers.python.ops": {},
        "tensorflow.contrib.layers.python.ops.sparse_feature_cross_op": {
            "sparse_feature_cross": [
                "inputs",
                "hashed_output",
                "num_buckets",
                "name",
                "hash_key"
            ]
        },
        "tensorflow.contrib.layers.python.ops.sparse_ops": {
            "_multiplier_helper": [
                "shape"
            ],
            "dense_to_sparse_tensor": [
                "dense_tensor",
                "ignore_value"
            ]
        },
        "tensorflow.contrib.layers.python.ops.bucketization_op": {
            "bucketize": [
                "input_tensor",
                "boundaries",
                "name"
            ]
        },
        "tensorflow.contrib.tensor_forest": {},
        "tensorflow.contrib.tensor_forest.python.topn": {
            "TopN": {
                "__init__": [
                    "self",
                    "max_id",
                    "shortlist_size",
                    "name_prefix"
                ],
                "insert": [
                    "self",
                    "ids",
                    "scores"
                ],
                "remove": [
                    "self",
                    "ids"
                ],
                "get_best": [
                    "self",
                    "n"
                ],
                "get_and_remove_best": [
                    "self",
                    "n"
                ]
            }
        },
        "tensorflow.contrib.tensor_forest.python": {},
        "tensorflow.contrib.tensor_forest.python.tensor_forest": {
            "get_epoch_variable": [],
            "one_hot_wrapper": [
                "num_classes",
                "loss_fn"
            ],
            "ForestHParams": {
                "__init__": [
                    "self",
                    "num_trees",
                    "max_nodes",
                    "bagging_fraction",
                    "num_splits_to_consider",
                    "feature_bagging_fraction",
                    "max_fertile_nodes",
                    "split_after_samples",
                    "min_split_samples",
                    "valid_leaf_threshold",
                    "dominate_method",
                    "dominate_fraction"
                ],
                "values": [
                    "self"
                ],
                "fill": [
                    "self"
                ]
            },
            "TreeTrainingVariables": {
                "__init__": [
                    "self",
                    "params",
                    "tree_num",
                    "training"
                ],
                "get_tree_name": [
                    "self",
                    "name",
                    "num"
                ]
            },
            "ForestStats": {
                "__init__": [
                    "self",
                    "tree_stats",
                    "params"
                ],
                "get_average": [
                    "self",
                    "thing"
                ]
            },
            "TreeStats": {
                "__init__": [
                    "self",
                    "num_nodes",
                    "num_leaves"
                ]
            },
            "ForestTrainingVariables": {
                "__init__": [
                    "self",
                    "params",
                    "device_assigner",
                    "training",
                    "tree_variables_class"
                ],
                "__setitem__": [
                    "self",
                    "t",
                    "val"
                ],
                "__getitem__": [
                    "self",
                    "t"
                ]
            },
            "RandomForestDeviceAssigner": {
                "__init__": [
                    "self"
                ],
                "get_variable_device": [
                    "self",
                    "unused_tree_num"
                ],
                "get_device": [
                    "self",
                    "tree_num"
                ]
            },
            "RandomForestGraphs": {
                "__init__": [
                    "self",
                    "params",
                    "device_assigner",
                    "variables",
                    "tree_variables_class",
                    "tree_graphs",
                    "training"
                ],
                "_bag_features": [
                    "self",
                    "tree_num",
                    "input_data"
                ],
                "training_graph": [
                    "self",
                    "input_data",
                    "input_labels",
                    "num_trainers",
                    "trainer_id"
                ],
                "inference_graph": [
                    "self",
                    "input_data"
                ],
                "average_size": [
                    "self"
                ],
                "training_loss": [
                    "self",
                    "features",
                    "labels",
                    "name"
                ],
                "validation_loss": [
                    "self",
                    "features",
                    "labels"
                ],
                "average_impurity": [
                    "self"
                ],
                "get_stats": [
                    "self",
                    "session"
                ]
            },
            "TrainingLossForest": {
                "__init__": [
                    "self",
                    "params",
                    "loss_fn"
                ],
                "_get_loss": [
                    "self",
                    "features",
                    "labels"
                ],
                "training_graph": [
                    "self",
                    "input_data",
                    "input_labels"
                ],
                "training_loss": [
                    "self",
                    "features",
                    "labels",
                    "name"
                ]
            },
            "RandomTreeGraphs": {
                "__init__": [
                    "self",
                    "variables",
                    "params",
                    "tree_num"
                ],
                "tree_initialization": [
                    "self"
                ],
                "_gini": [
                    "self",
                    "class_counts"
                ],
                "_weighted_gini": [
                    "self",
                    "class_counts"
                ],
                "_variance": [
                    "self",
                    "sums",
                    "squares"
                ],
                "training_graph": [
                    "self",
                    "input_data",
                    "input_labels",
                    "random_seed",
                    "data_spec",
                    "sparse_features",
                    "input_weights"
                ],
                "finish_iteration": [
                    "self"
                ],
                "inference_graph": [
                    "self",
                    "input_data",
                    "data_spec",
                    "sparse_features"
                ],
                "average_impurity": [
                    "self"
                ],
                "size": [
                    "self"
                ],
                "get_stats": [
                    "self",
                    "session"
                ]
            }
        },
        "tensorflow.contrib.tensor_forest.python.constants": {},
        "tensorflow.contrib.tensor_forest.python.topn_test": {
            "TopNOpsTest": {
                "testInsertOpIntoEmptyShortlist": [
                    "self"
                ],
                "testInsertOpIntoAlmostFullShortlist": [
                    "self"
                ],
                "testInsertOpIntoFullShortlist": [
                    "self"
                ],
                "testInsertOpHard": [
                    "self"
                ],
                "testRemoveSimple": [
                    "self"
                ],
                "testRemoveAllMissing": [
                    "self"
                ],
                "testRemoveAll": [
                    "self"
                ]
            },
            "TopNTest": {
                "testSimple": [
                    "self"
                ],
                "testSimpler": [
                    "self"
                ],
                "testLotsOfInsertsAscending": [
                    "self"
                ],
                "testLotsOfInsertsDescending": [
                    "self"
                ],
                "testRemoveNotInShortlist": [
                    "self"
                ],
                "testNeedToRefreshShortlistInGetBest": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.tensor_forest.python.tensor_forest_test": {
            "TensorForestTest": {
                "testForestHParams": [
                    "self"
                ],
                "testForestHParamsBigTree": [
                    "self"
                ],
                "testTrainingConstructionClassification": [
                    "self"
                ],
                "testTrainingConstructionRegression": [
                    "self"
                ],
                "testInferenceConstruction": [
                    "self"
                ],
                "testImpurityConstruction": [
                    "self"
                ],
                "testTrainingConstructionClassificationSparse": [
                    "self"
                ],
                "testInferenceConstructionSparse": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.tensor_forest.python.kernel_tests.grow_tree_op_test": {
            "GrowTreeTest": {
                "setUp": [
                    "self"
                ],
                "testSimple": [
                    "self"
                ],
                "testNoRoomToGrow": [
                    "self"
                ],
                "testNoFinished": [
                    "self"
                ],
                "testBadInput": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.tensor_forest.python.kernel_tests.update_fertile_slots_op_test": {
            "UpdateFertileSlotsTest": {
                "setUp": [
                    "self"
                ],
                "testSimple": [
                    "self"
                ],
                "testNoFinished": [
                    "self"
                ],
                "testPureCounts": [
                    "self"
                ],
                "testBadInput": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.tensor_forest.python.kernel_tests": {},
        "tensorflow.contrib.tensor_forest.python.kernel_tests.scatter_add_ndim_op_test": {
            "ScatterAddNdimTest": {
                "test1dim": [
                    "self"
                ],
                "test3dim": [
                    "self"
                ],
                "testNoUpdates": [
                    "self"
                ],
                "testBadInput": [
                    "self"
                ],
                "testIncompleteIndices": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.tensor_forest.python.kernel_tests.sample_inputs_op_test": {
            "SampleInputsTest": {
                "setUp": [
                    "self"
                ],
                "testSimple": [
                    "self"
                ],
                "testSparse": [
                    "self"
                ],
                "testWeights": [
                    "self"
                ],
                "testNoAccumulators": [
                    "self"
                ],
                "testBadInput": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.tensor_forest.python.kernel_tests.count_extremely_random_stats_op_test": {
            "CountExtremelyRandomStatsClassificationTest": {
                "setUp": [
                    "self"
                ],
                "testSimple": [
                    "self"
                ],
                "testSimpleWeighted": [
                    "self"
                ],
                "testMissingLabel": [
                    "self"
                ],
                "testSparseInput": [
                    "self"
                ],
                "testFutureEpoch": [
                    "self"
                ],
                "testThreaded": [
                    "self"
                ],
                "testNoAccumulators": [
                    "self"
                ],
                "testBadInput": [
                    "self"
                ]
            },
            "CountExtremelyRandomStatsRegressionTest": {
                "setUp": [
                    "self"
                ],
                "testSimple": [
                    "self"
                ],
                "testSimpleWeighted": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.tensor_forest.python.kernel_tests.tree_predictions_op_test": {
            "TreePredictionsDenseTest": {
                "setUp": [
                    "self"
                ],
                "testSimple": [
                    "self"
                ],
                "testBackoffToParent": [
                    "self"
                ],
                "testNoInput": [
                    "self"
                ],
                "testBadInput": [
                    "self"
                ]
            },
            "TreePredictionsSparseTest": {
                "setUp": [
                    "self"
                ],
                "testSparseInput": [
                    "self"
                ],
                "testSparseInputDefaultIsZero": [
                    "self"
                ]
            },
            "TreePredictionsMixedTest": {
                "setUp": [
                    "self"
                ],
                "testSimpleMixed": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.tensor_forest.python.kernel_tests.best_splits_op_test": {
            "BestSplitsClassificationTests": {
                "setUp": [
                    "self"
                ],
                "testSimple": [
                    "self"
                ],
                "testNoFinished": [
                    "self"
                ],
                "testBadInput": [
                    "self"
                ]
            },
            "BestSplitsRegressionTests": {
                "setUp": [
                    "self"
                ],
                "testSimple": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.tensor_forest.python.kernel_tests.finished_nodes_op_test": {
            "FinishedNodesTest": {
                "setUp": [
                    "self"
                ],
                "testSimple": [
                    "self"
                ],
                "testLeavesCanBeNegativeOne": [
                    "self"
                ],
                "testNoAccumulators": [
                    "self"
                ],
                "testBadInput": [
                    "self"
                ],
                "testEarlyDominatesHoeffding": [
                    "self"
                ],
                "testEarlyDominatesBootstrap": [
                    "self"
                ],
                "testEarlyDominatesChebyshev": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.tensor_forest.python.ops": {},
        "tensorflow.contrib.tensor_forest.python.ops.gen_tensor_forest_ops": {
            "best_splits": [
                "finished_nodes",
                "node_to_accumulator",
                "split_sums",
                "split_squares",
                "accumulator_sums",
                "accumulator_sqaures",
                "regression",
                "name"
            ],
            "count_extremely_random_stats": [
                "input_data",
                "sparse_input_indices",
                "sparse_input_values",
                "sparse_input_shape",
                "input_labels",
                "input_weights",
                "tree",
                "tree_thresholds",
                "node_to_accumulator",
                "candidate_split_features",
                "candidate_split_thresholds",
                "birth_epochs",
                "current_epoch",
                "input_spec",
                "num_classes",
                "regression",
                "name"
            ],
            "finished_nodes": [
                "leaves",
                "node_to_accumulator",
                "split_sums",
                "split_squares",
                "accumulator_sums",
                "accumulator_squares",
                "birth_epochs",
                "current_epoch",
                "num_split_after_samples",
                "min_split_samples",
                "regression",
                "dominate_fraction",
                "dominate_method",
                "random_seed",
                "check_dominates_every_samples",
                "name"
            ],
            "grow_tree": [
                "end_of_tree",
                "node_to_accumulator",
                "finished_nodes",
                "best_splits",
                "candidate_split_features",
                "candidate_split_thresholds",
                "name"
            ],
            "reinterpret_string_to_float": [
                "input_data",
                "name"
            ],
            "sample_inputs": [
                "input_data",
                "sparse_input_indices",
                "sparse_input_values",
                "sparse_input_shape",
                "input_weights",
                "node_to_accumulator",
                "leaves",
                "candidate_split_features",
                "candidate_split_thresholds",
                "input_spec",
                "split_initializations_per_input",
                "split_sampling_random_seed",
                "name"
            ],
            "scatter_add_ndim": [
                "input",
                "indices",
                "deltas",
                "name"
            ],
            "top_n_insert": [
                "ids",
                "scores",
                "new_ids",
                "new_scores",
                "name"
            ],
            "top_n_remove": [
                "ids",
                "remove_ids",
                "name"
            ],
            "tree_predictions": [
                "input_data",
                "sparse_input_indices",
                "sparse_input_values",
                "sparse_input_shape",
                "tree",
                "tree_thresholds",
                "node_per_class_weights",
                "input_spec",
                "valid_leaf_threshold",
                "name"
            ],
            "update_fertile_slots": [
                "finished",
                "non_fertile_leaves",
                "non_fertile_leaf_scores",
                "end_of_tree",
                "accumulator_sums",
                "node_to_accumulator",
                "stale_leaves",
                "node_sums",
                "regression",
                "name"
            ],
            "_InitOpDefLibrary": []
        },
        "tensorflow.contrib.tensor_forest.python.ops.data_ops": {
            "CastToFloat": [
                "tensor"
            ],
            "ParseDataTensorOrDict": [
                "data"
            ],
            "ParseLabelTensorOrDict": [
                "labels"
            ],
            "TensorForestDataSpec": {
                "__init__": [
                    "self"
                ],
                "SerializeToString": [
                    "self"
                ]
            },
            "DataColumnCollection": {
                "__init__": [
                    "self"
                ],
                "add": [
                    "self"
                ],
                "size": [
                    "self"
                ],
                "SerializeToString": [
                    "self"
                ]
            },
            "DataColumn": {
                "__init__": [
                    "self"
                ],
                "SerializeToString": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.tensor_forest.python.ops.tensor_forest_ops": {},
        "tensorflow.contrib.tensor_forest.client": {},
        "tensorflow.contrib.tensor_forest.client.eval_metrics_test": {
            "EvalMetricsTest": {
                "testTop2": [
                    "self"
                ],
                "testTop3": [
                    "self"
                ],
                "testAccuracy": [
                    "self"
                ],
                "testR2": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.tensor_forest.client.random_forest": {
            "_assert_float32": [
                "tensors"
            ],
            "get_model_fn": [
                "params",
                "graph_builder_class",
                "device_assigner",
                "weights_name",
                "keys_name",
                "num_trainers",
                "trainer_id"
            ],
            "TensorForestLossHook": {
                "__init__": [
                    "self",
                    "early_stopping_rounds"
                ],
                "before_run": [
                    "self",
                    "run_context"
                ],
                "after_run": [
                    "self",
                    "run_context",
                    "run_values"
                ]
            },
            "TensorForestEstimator": {
                "__init__": [
                    "self",
                    "params",
                    "device_assigner",
                    "model_dir",
                    "graph_builder_class",
                    "config",
                    "weights_name",
                    "keys_name",
                    "feature_engineering_fn",
                    "early_stopping_rounds",
                    "num_trainers",
                    "trainer_id"
                ],
                "model_dir": [
                    "self"
                ],
                "evaluate": [
                    "self",
                    "x",
                    "y",
                    "input_fn",
                    "batch_size",
                    "steps",
                    "metrics",
                    "name",
                    "checkpoint_path",
                    "hooks"
                ],
                "fit": [
                    "self",
                    "x",
                    "y",
                    "input_fn",
                    "steps",
                    "batch_size",
                    "monitors",
                    "max_steps"
                ],
                "predict_proba": [
                    "self",
                    "x",
                    "input_fn",
                    "batch_size"
                ],
                "predict": [
                    "self",
                    "x",
                    "input_fn",
                    "axis",
                    "batch_size"
                ],
                "predict_with_keys": [
                    "self",
                    "x",
                    "input_fn",
                    "axis",
                    "batch_size"
                ],
                "export": [
                    "self",
                    "export_dir",
                    "input_fn",
                    "signature_fn",
                    "input_feature_key",
                    "default_batch_size"
                ],
                "export_savedmodel": [
                    "self",
                    "export_dir_base",
                    "input_fn",
                    "default_output_alternative_key",
                    "assets_extra",
                    "as_text",
                    "exports_to_keep"
                ]
            }
        },
        "tensorflow.contrib.tensor_forest.client.random_forest_test": {
            "TensorForestTrainerTests": {
                "testClassification": [
                    "self"
                ],
                "testClassificationTrainingLoss": [
                    "self"
                ],
                "testRegression": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.tensor_forest.client.eval_metrics": {
            "_top_k_generator": [
                "k"
            ],
            "_accuracy": [
                "predictions",
                "targets",
                "weights"
            ],
            "_r2": [
                "probabilities",
                "targets",
                "weights"
            ],
            "_squeeze_and_onehot": [
                "targets",
                "depth"
            ],
            "_sigmoid_entropy": [
                "probabilities",
                "targets",
                "weights"
            ],
            "_softmax_entropy": [
                "probabilities",
                "targets",
                "weights"
            ],
            "_predictions": [
                "predictions",
                "unused_targets"
            ],
            "_class_log_loss": [
                "probabilities",
                "targets",
                "weights"
            ],
            "_precision": [
                "predictions",
                "targets",
                "weights"
            ],
            "_precision_at_thresholds": [
                "predictions",
                "targets",
                "weights"
            ],
            "_recall": [
                "predictions",
                "targets",
                "weights"
            ],
            "_recall_at_thresholds": [
                "predictions",
                "targets",
                "weights"
            ],
            "get_metric": [
                "metric_name"
            ],
            "get_prediction_key": [
                "metric_name"
            ]
        },
        "tensorflow.contrib.tensor_forest.hybrid": {},
        "tensorflow.contrib.tensor_forest.hybrid.python.hybrid_model": {
            "HybridModel": {
                "__init__": [
                    "self",
                    "params",
                    "device_assigner",
                    "optimizer_class"
                ],
                "_do_layer_inference": [
                    "self",
                    "layer",
                    "data"
                ],
                "_base_inference": [
                    "self",
                    "data",
                    "data_spec"
                ],
                "inference_graph": [
                    "self",
                    "data",
                    "data_spec"
                ],
                "training_inference_graph": [
                    "self",
                    "data",
                    "data_spec"
                ],
                "predict_proba": [
                    "self",
                    "data",
                    "data_spec"
                ],
                "training_graph": [
                    "self",
                    "data",
                    "labels",
                    "data_spec",
                    "epoch"
                ],
                "loss": [
                    "self",
                    "data",
                    "labels"
                ],
                "training_loss": [
                    "self",
                    "data",
                    "labels"
                ],
                "validation_loss": [
                    "self",
                    "data",
                    "labels"
                ]
            }
        },
        "tensorflow.contrib.tensor_forest.hybrid.python.hybrid_layer_test": {
            "HybridLayerTest": {
                "setUp": [
                    "self"
                ],
                "testLayerNums": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.tensor_forest.hybrid.python.hybrid_layer": {
            "HybridLayer": {
                "_define_vars": [
                    "self",
                    "params"
                ],
                "__init__": [
                    "self",
                    "params",
                    "layer_num",
                    "device_assigner"
                ],
                "inference_graph": [
                    "self",
                    "data",
                    "data_spec"
                ]
            }
        },
        "tensorflow.contrib.tensor_forest.hybrid.python": {},
        "tensorflow.contrib.tensor_forest.hybrid.python.layers": {},
        "tensorflow.contrib.tensor_forest.hybrid.python.layers.fully_connected": {
            "FullyConnectedLayer": {
                "_define_vars": [
                    "self",
                    "params"
                ],
                "inference_graph": [
                    "self",
                    "data"
                ]
            },
            "ManyToOneLayer": {
                "_define_vars": [
                    "self",
                    "params"
                ],
                "inference_graph": [
                    "self",
                    "data"
                ]
            },
            "FlattenedFullyConnectedLayer": {
                "_define_vars": [
                    "self",
                    "params"
                ],
                "inference_graph": [
                    "self",
                    "data"
                ]
            }
        },
        "tensorflow.contrib.tensor_forest.hybrid.python.layers.decisions_to_data": {
            "DecisionsToDataLayer": {
                "_define_vars": [
                    "self",
                    "params"
                ],
                "__init__": [
                    "self",
                    "params",
                    "layer_num",
                    "device_assigner"
                ],
                "inference_graph": [
                    "self",
                    "data"
                ]
            },
            "KFeatureDecisionsToDataLayer": {
                "_define_vars": [
                    "self",
                    "params"
                ],
                "__init__": [
                    "self",
                    "params",
                    "layer_num",
                    "device_assigner"
                ],
                "inference_graph": [
                    "self",
                    "data"
                ]
            },
            "HardDecisionsToDataLayer": {
                "_define_vars": [
                    "self",
                    "params"
                ],
                "soft_inference_graph": [
                    "self",
                    "data"
                ],
                "inference_graph": [
                    "self",
                    "data"
                ]
            },
            "StochasticHardDecisionsToDataLayer": {
                "_define_vars": [
                    "self",
                    "params"
                ],
                "soft_inference_graph": [
                    "self",
                    "data"
                ],
                "inference_graph": [
                    "self",
                    "data"
                ]
            },
            "StochasticSoftDecisionsToDataLayer": {
                "_define_vars": [
                    "self",
                    "params"
                ],
                "inference_graph": [
                    "self",
                    "data"
                ]
            }
        },
        "tensorflow.contrib.tensor_forest.hybrid.python.layers.decisions_to_data_test": {
            "DecisionsToDataTest": {
                "setUp": [
                    "self"
                ],
                "testInferenceConstruction": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.tensor_forest.hybrid.python.kernel_tests.k_feature_routing_function_op_test": {
            "KFeatureRoutingFunctionTest": {
                "setUp": [
                    "self"
                ],
                "testParams": [
                    "self"
                ],
                "testRoutingFunction": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.tensor_forest.hybrid.python.kernel_tests": {},
        "tensorflow.contrib.tensor_forest.hybrid.python.kernel_tests.routing_function_op_test": {
            "RoutingFunctionTest": {
                "setUp": [
                    "self"
                ],
                "testRoutingFunction": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.tensor_forest.hybrid.python.ops": {},
        "tensorflow.contrib.tensor_forest.hybrid.python.ops.training_ops": {
            "_RoutingFunctionGradient": [
                "op",
                "grad"
            ],
            "_StochasticHardRoutingFunctionGradient": [
                "op",
                "routing_grad",
                "unused_path_grad"
            ],
            "_KFeatureRoutingFunctionGradient": [
                "op",
                "grad"
            ],
            "Load": []
        },
        "tensorflow.contrib.tensor_forest.hybrid.python.models.nn": {
            "NN": {
                "__init__": [
                    "self",
                    "params",
                    "device_assigner",
                    "optimizer_class"
                ]
            }
        },
        "tensorflow.contrib.tensor_forest.hybrid.python.models.stochastic_soft_decisions_to_data_then_nn": {
            "StochasticSoftDecisionsToDataThenNN": {
                "__init__": [
                    "self",
                    "params",
                    "device_assigner",
                    "optimizer_class"
                ]
            }
        },
        "tensorflow.contrib.tensor_forest.hybrid.python.models.decisions_to_data_then_nn": {
            "DecisionsToDataThenNN": {
                "__init__": [
                    "self",
                    "params",
                    "device_assigner",
                    "optimizer_class"
                ]
            }
        },
        "tensorflow.contrib.tensor_forest.hybrid.python.models": {},
        "tensorflow.contrib.tensor_forest.hybrid.python.models.k_feature_decisions_to_data_then_nn_test": {
            "KFeatureDecisionsToDataThenNNTest": {
                "setUp": [
                    "self"
                ],
                "testKFeatureInferenceConstruction": [
                    "self"
                ],
                "testKFeatureTrainingConstruction": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.tensor_forest.hybrid.python.models.stochastic_hard_decisions_to_data_then_nn": {
            "StochasticHardDecisionsToDataThenNN": {
                "__init__": [
                    "self",
                    "params",
                    "device_assigner",
                    "optimizer_class"
                ]
            }
        },
        "tensorflow.contrib.tensor_forest.hybrid.python.models.k_feature_decisions_to_data_then_nn": {
            "KFeatureDecisionsToDataThenNN": {
                "__init__": [
                    "self",
                    "params",
                    "device_assigner",
                    "optimizer_class"
                ]
            }
        },
        "tensorflow.contrib.tensor_forest.hybrid.python.models.forest_to_data_then_nn": {
            "ForestToDataThenNN": {
                "__init__": [
                    "self",
                    "params",
                    "device_assigner",
                    "optimizer_class"
                ]
            }
        },
        "tensorflow.contrib.tensor_forest.hybrid.python.models.forest_to_data_then_nn_test": {
            "ForestToDataThenNNTest": {
                "setUp": [
                    "self"
                ],
                "testInferenceConstruction": [
                    "self"
                ],
                "testTrainingConstruction": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.tensor_forest.hybrid.python.models.hard_decisions_to_data_then_nn": {
            "HardDecisionsToDataThenNN": {
                "__init__": [
                    "self",
                    "params",
                    "device_assigner",
                    "optimizer_class"
                ],
                "_base_inference": [
                    "self",
                    "data",
                    "data_spec",
                    "soft"
                ],
                "inference_graph": [
                    "self",
                    "data",
                    "data_spec"
                ],
                "training_inference_graph": [
                    "self",
                    "data",
                    "data_spec"
                ]
            }
        },
        "tensorflow.contrib.tensor_forest.hybrid.python.models.decisions_to_data_then_nn_test": {
            "DecisionsToDataThenNNTest": {
                "setUp": [
                    "self"
                ],
                "testHParams": [
                    "self"
                ],
                "testConstructionPollution": [
                    "self"
                ],
                "testInferenceConstruction": [
                    "self"
                ],
                "testTrainingConstruction": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.quantization": {},
        "tensorflow.contrib.quantization.python": {},
        "tensorflow.contrib.quantization.python.math_ops": {},
        "tensorflow.contrib.quantization.python.nn_ops": {},
        "tensorflow.contrib.quantization.python.array_ops": {},
        "tensorflow.contrib.session_bundle.bundle_shim": {
            "_add_input_to_signature_def": [
                "tensor_name",
                "map_key",
                "signature_def"
            ],
            "_add_output_to_signature_def": [
                "tensor_name",
                "map_key",
                "signature_def"
            ],
            "_convert_default_signature_to_signature_def": [
                "signatures"
            ],
            "_convert_named_signatures_to_signature_def": [
                "signatures"
            ],
            "_convert_signatures_to_signature_defs": [
                "metagraph_def"
            ],
            "_load_saved_model_from_session_bundle_path": [
                "export_dir",
                "target",
                "config"
            ],
            "load_session_bundle_or_saved_model_bundle_from_path": [
                "export_dir",
                "tags",
                "target",
                "config"
            ]
        },
        "tensorflow.contrib.session_bundle": {},
        "tensorflow.contrib.session_bundle.session_bundle": {
            "maybe_session_bundle_dir": [
                "export_dir"
            ],
            "load_session_bundle_from_path": [
                "export_dir",
                "target",
                "config",
                "meta_graph_def"
            ]
        },
        "tensorflow.contrib.session_bundle.session_bundle_test": {
            "_make_serialized_example": [
                "x"
            ],
            "SessionBundleLoadTest": {
                "_checkRegressionSignature": [
                    "self",
                    "signatures",
                    "sess"
                ],
                "_checkNamedSignatures": [
                    "self",
                    "signatures",
                    "sess"
                ],
                "testMaybeSessionBundleDir": [
                    "self"
                ],
                "testBasic": [
                    "self"
                ],
                "testBadPath": [
                    "self"
                ],
                "testVarCheckpointV2": [
                    "self"
                ]
            },
            "SessionBundleLoadNoVarsTest": {
                "setUp": [
                    "self"
                ],
                "tearDown": [
                    "self"
                ],
                "testGraphWithoutVarsLoadsCorrectly": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.session_bundle.constants": {},
        "tensorflow.contrib.session_bundle.gc": {
            "largest_export_versions": [
                "n"
            ],
            "one_of_every_n_export_versions": [
                "n"
            ],
            "mod_export_version": [
                "n"
            ],
            "union": [
                "lf",
                "rf"
            ],
            "negation": [
                "f"
            ],
            "get_paths": [
                "base_dir",
                "parser"
            ]
        },
        "tensorflow.contrib.session_bundle.bundle_shim_test": {
            "BundleShimTest": {
                "testBadPath": [
                    "self"
                ],
                "testAddInputToSignatureDef": [
                    "self"
                ],
                "testAddOutputToSignatureDef": [
                    "self"
                ],
                "testConvertDefaultSignatureBadTypeToSignatureDef": [
                    "self"
                ],
                "testConvertDefaultSignatureRegressionToSignatureDef": [
                    "self"
                ],
                "testConvertDefaultSignatureClassificationToSignatureDef": [
                    "self"
                ],
                "testConvertNamedSignatureNonGenericToSignatureDef": [
                    "self"
                ],
                "testConvertNamedSignatureToSignatureDef": [
                    "self"
                ],
                "testConvertSignaturesToSignatureDefs": [
                    "self"
                ],
                "testLegacyBasic": [
                    "self"
                ],
                "testSavedModelBasic": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.session_bundle.exporter": {
            "gfile_copy_callback": [
                "files_to_copy",
                "export_dir_path"
            ],
            "regression_signature": [
                "input_tensor",
                "output_tensor"
            ],
            "classification_signature": [
                "input_tensor",
                "classes_tensor",
                "scores_tensor"
            ],
            "generic_signature": [
                "name_tensor_map"
            ],
            "Exporter": {
                "__init__": [
                    "self",
                    "saver"
                ],
                "init": [
                    "self",
                    "graph_def",
                    "init_op",
                    "clear_devices",
                    "default_graph_signature",
                    "named_graph_signatures",
                    "assets_collection",
                    "assets_callback"
                ],
                "export": [
                    "self",
                    "export_dir_base",
                    "global_step_tensor",
                    "sess",
                    "exports_to_keep"
                ],
                "_file_path_value": [
                    "self",
                    "path_tensor"
                ]
            }
        },
        "tensorflow.contrib.session_bundle.manifest_pb2": {},
        "tensorflow.contrib.session_bundle.gc_test": {
            "tearDownModule": [],
            "GcTest": {
                "testLargestExportVersions": [
                    "self"
                ],
                "testLargestExportVersionsDoesNotDeleteZeroFolder": [
                    "self"
                ],
                "testModExportVersion": [
                    "self"
                ],
                "testOneOfEveryNExportVersions": [
                    "self"
                ],
                "testOneOfEveryNExportVersionsZero": [
                    "self"
                ],
                "testUnion": [
                    "self"
                ],
                "testNegation": [
                    "self"
                ],
                "testPathsWithParse": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.session_bundle.exporter_test": {
            "tearDownModule": [],
            "SaveRestoreShardedTest": {
                "doBasicsOneExportPath": [
                    "self",
                    "export_path",
                    "clear_devices",
                    "global_step",
                    "sharded",
                    "export_count"
                ],
                "testDuplicateExportRaisesError": [
                    "self"
                ],
                "testBasics": [
                    "self"
                ],
                "testBasicsNoShard": [
                    "self"
                ],
                "testClearDevice": [
                    "self"
                ],
                "testGC": [
                    "self"
                ],
                "testExportMultipleTimes": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.compiler": {},
        "tensorflow.contrib.compiler.jit": {
            "experimental_jit_scope": [
                "compile_ops"
            ]
        },
        "tensorflow.contrib.tfprof": {},
        "tensorflow.contrib.tfprof.python": {},
        "tensorflow.contrib.tfprof.python.tools": {},
        "tensorflow.contrib.tfprof.python.tools.tfprof": {},
        "tensorflow.contrib.tfprof.python.tools.tfprof.model_analyzer": {
            "print_model_analysis": [
                "graph",
                "run_meta",
                "op_log",
                "tfprof_cmd",
                "tfprof_options"
            ]
        },
        "tensorflow.contrib.tfprof.python.tools.tfprof.tfprof_logger": {
            "_fill_missing_graph_shape": [
                "graph",
                "run_meta"
            ],
            "_get_logged_ops": [
                "graph",
                "run_meta"
            ],
            "_merge_default_with_oplog": [
                "graph",
                "op_log",
                "run_meta"
            ],
            "write_op_log": [
                "graph",
                "log_dir",
                "op_log",
                "run_meta"
            ]
        },
        "tensorflow.contrib.tfprof.python.tools.tfprof.pywrap_tensorflow_print_model_analysis_lib": {
            "_swig_setattr_nondynamic": [
                "self",
                "class_type",
                "name",
                "value",
                "static"
            ],
            "_swig_setattr": [
                "self",
                "class_type",
                "name",
                "value"
            ],
            "_swig_getattr_nondynamic": [
                "self",
                "class_type",
                "name",
                "static"
            ],
            "_swig_getattr": [
                "self",
                "class_type",
                "name"
            ],
            "_swig_repr": [
                "self"
            ],
            "PrintModelAnalysis": [
                "graph",
                "run_meta",
                "op_log",
                "command",
                "options"
            ]
        },
        "tensorflow.contrib.grid_rnn": {},
        "tensorflow.contrib.grid_rnn.python": {},
        "tensorflow.contrib.grid_rnn.python.ops": {},
        "tensorflow.contrib.grid_rnn.python.ops.grid_rnn_cell": {
            "_parse_rnn_config": [
                "num_dims",
                "ls_input_dims",
                "ls_output_dims",
                "ls_priority_dims",
                "ls_non_recurrent_dims",
                "non_recurrent_fn",
                "tied",
                "num_units"
            ],
            "_propagate": [
                "dim_indices",
                "conf",
                "cell",
                "c_prev",
                "m_prev",
                "new_output",
                "new_state",
                "first_call"
            ],
            "GridRNNCell": {
                "__init__": [
                    "self",
                    "num_units",
                    "num_dims",
                    "input_dims",
                    "output_dims",
                    "priority_dims",
                    "non_recurrent_dims",
                    "tied",
                    "cell_fn",
                    "non_recurrent_fn"
                ],
                "input_size": [
                    "self"
                ],
                "output_size": [
                    "self"
                ],
                "state_size": [
                    "self"
                ],
                "__call__": [
                    "self",
                    "inputs",
                    "state",
                    "scope"
                ]
            },
            "Grid1BasicRNNCell": {
                "__init__": [
                    "self",
                    "num_units"
                ]
            },
            "Grid2BasicRNNCell": {
                "__init__": [
                    "self",
                    "num_units",
                    "tied",
                    "non_recurrent_fn"
                ]
            },
            "Grid1BasicLSTMCell": {
                "__init__": [
                    "self",
                    "num_units",
                    "forget_bias"
                ]
            },
            "Grid2BasicLSTMCell": {
                "__init__": [
                    "self",
                    "num_units",
                    "tied",
                    "non_recurrent_fn",
                    "forget_bias"
                ]
            },
            "Grid1LSTMCell": {
                "__init__": [
                    "self",
                    "num_units",
                    "use_peepholes",
                    "forget_bias"
                ]
            },
            "Grid2LSTMCell": {
                "__init__": [
                    "self",
                    "num_units",
                    "tied",
                    "non_recurrent_fn",
                    "use_peepholes",
                    "forget_bias"
                ]
            },
            "Grid3LSTMCell": {
                "__init__": [
                    "self",
                    "num_units",
                    "tied",
                    "non_recurrent_fn",
                    "use_peepholes",
                    "forget_bias"
                ]
            },
            "Grid2GRUCell": {
                "__init__": [
                    "self",
                    "num_units",
                    "tied",
                    "non_recurrent_fn"
                ]
            }
        },
        "tensorflow.contrib.rnn": {},
        "tensorflow.contrib.rnn.python": {},
        "tensorflow.contrib.rnn.python.ops.lstm_ops": {
            "_lstm_block_cell": [
                "x",
                "cs_prev",
                "h_prev",
                "w",
                "b",
                "wci",
                "wcf",
                "wco",
                "forget_bias",
                "cell_clip",
                "use_peephole",
                "name"
            ],
            "_block_lstm": [
                "seq_len_max",
                "x",
                "w",
                "b",
                "cs_prev",
                "h_prev",
                "wci",
                "wcf",
                "wco",
                "forget_bias",
                "cell_clip",
                "use_peephole",
                "name"
            ],
            "_LSTMBlockCellGrad": [
                "op"
            ],
            "_BlockLSTMGrad": [
                "op"
            ],
            "LSTMBlockCell": {
                "__init__": [
                    "self",
                    "num_units",
                    "forget_bias",
                    "use_peephole"
                ],
                "state_size": [
                    "self"
                ],
                "output_size": [
                    "self"
                ],
                "__call__": [
                    "self",
                    "x",
                    "states_prev",
                    "scope"
                ]
            },
            "LSTMBlockWrapper": {
                "num_units": [
                    "self"
                ],
                "_call_cell": [
                    "self",
                    "inputs",
                    "initial_cell_state",
                    "initial_output",
                    "dtype",
                    "sequence_length"
                ],
                "__call__": [
                    "self",
                    "inputs",
                    "initial_state",
                    "dtype",
                    "sequence_length",
                    "scope"
                ],
                "_gather_states": [
                    "self",
                    "data",
                    "indices",
                    "batch_size"
                ]
            },
            "LSTMBlockFusedCell": {
                "__init__": [
                    "self",
                    "num_units",
                    "forget_bias",
                    "cell_clip",
                    "use_peephole"
                ],
                "num_units": [
                    "self"
                ],
                "_call_cell": [
                    "self",
                    "inputs",
                    "initial_cell_state",
                    "initial_output",
                    "dtype",
                    "sequence_length"
                ]
            }
        },
        "tensorflow.contrib.rnn.python.ops.fused_rnn_cell": {
            "FusedRNNCell": {
                "__call__": [
                    "self",
                    "inputs",
                    "initial_state",
                    "dtype",
                    "sequence_length",
                    "scope"
                ]
            },
            "FusedRNNCellAdaptor": {
                "__init__": [
                    "self",
                    "cell",
                    "use_dynamic_rnn"
                ],
                "__call__": [
                    "self",
                    "inputs",
                    "initial_state",
                    "dtype",
                    "sequence_length",
                    "scope"
                ]
            },
            "TimeReversedFusedRNN": {
                "__init__": [
                    "self",
                    "cell"
                ],
                "_reverse": [
                    "self",
                    "t",
                    "lengths"
                ],
                "__call__": [
                    "self",
                    "inputs",
                    "initial_state",
                    "dtype",
                    "sequence_length",
                    "scope"
                ]
            }
        },
        "tensorflow.contrib.rnn.python.ops": {},
        "tensorflow.contrib.rnn.python.ops.rnn_cell": {
            "_get_concat_variable": [
                "name",
                "shape",
                "dtype",
                "num_shards"
            ],
            "_get_sharded_variable": [
                "name",
                "shape",
                "dtype",
                "num_shards"
            ],
            "CoupledInputForgetGateLSTMCell": {
                "__init__": [
                    "self",
                    "num_units",
                    "use_peepholes",
                    "initializer",
                    "num_proj",
                    "proj_clip",
                    "num_unit_shards",
                    "num_proj_shards",
                    "forget_bias",
                    "state_is_tuple",
                    "activation"
                ],
                "state_size": [
                    "self"
                ],
                "output_size": [
                    "self"
                ],
                "__call__": [
                    "self",
                    "inputs",
                    "state",
                    "scope"
                ]
            },
            "TimeFreqLSTMCell": {
                "__init__": [
                    "self",
                    "num_units",
                    "use_peepholes",
                    "cell_clip",
                    "initializer",
                    "num_unit_shards",
                    "forget_bias",
                    "feature_size",
                    "frequency_skip"
                ],
                "output_size": [
                    "self"
                ],
                "state_size": [
                    "self"
                ],
                "__call__": [
                    "self",
                    "inputs",
                    "state",
                    "scope"
                ],
                "_make_tf_features": [
                    "self",
                    "input_feat"
                ]
            },
            "GridLSTMCell": {
                "__init__": [
                    "self",
                    "num_units",
                    "use_peepholes",
                    "share_time_frequency_weights",
                    "cell_clip",
                    "initializer",
                    "num_unit_shards",
                    "forget_bias",
                    "feature_size",
                    "frequency_skip",
                    "num_frequency_blocks",
                    "start_freqindex_list",
                    "end_freqindex_list",
                    "couple_input_forget_gates",
                    "state_is_tuple"
                ],
                "output_size": [
                    "self"
                ],
                "state_size": [
                    "self"
                ],
                "state_tuple_type": [
                    "self"
                ],
                "__call__": [
                    "self",
                    "inputs",
                    "state",
                    "scope"
                ],
                "_compute": [
                    "self",
                    "freq_inputs",
                    "block",
                    "state",
                    "batch_size",
                    "state_prefix",
                    "state_is_tuple"
                ],
                "_make_tf_features": [
                    "self",
                    "input_feat",
                    "slice_offset"
                ]
            },
            "BidirectionalGridLSTMCell": {
                "__init__": [
                    "self",
                    "num_units",
                    "use_peepholes",
                    "share_time_frequency_weights",
                    "cell_clip",
                    "initializer",
                    "num_unit_shards",
                    "forget_bias",
                    "feature_size",
                    "frequency_skip",
                    "num_frequency_blocks",
                    "start_freqindex_list",
                    "end_freqindex_list",
                    "couple_input_forget_gates",
                    "backward_slice_offset"
                ],
                "__call__": [
                    "self",
                    "inputs",
                    "state",
                    "scope"
                ]
            },
            "AttentionCellWrapper": {
                "__init__": [
                    "self",
                    "cell",
                    "attn_length",
                    "attn_size",
                    "attn_vec_size",
                    "input_size",
                    "state_is_tuple"
                ],
                "state_size": [
                    "self"
                ],
                "output_size": [
                    "self"
                ],
                "__call__": [
                    "self",
                    "inputs",
                    "state",
                    "scope"
                ],
                "_attention": [
                    "self",
                    "query",
                    "attn_states"
                ]
            },
            "LayerNormBasicLSTMCell": {
                "__init__": [
                    "self",
                    "num_units",
                    "forget_bias",
                    "input_size",
                    "activation",
                    "layer_norm",
                    "norm_gain",
                    "norm_shift",
                    "dropout_keep_prob",
                    "dropout_prob_seed"
                ],
                "state_size": [
                    "self"
                ],
                "output_size": [
                    "self"
                ],
                "_norm": [
                    "self",
                    "inp",
                    "scope"
                ],
                "_linear": [
                    "self",
                    "args"
                ],
                "__call__": [
                    "self",
                    "inputs",
                    "state",
                    "scope"
                ]
            }
        },
        "tensorflow.contrib.rnn.python.ops.core_rnn_cell_impl": {
            "_linear": [
                "args",
                "output_size",
                "bias",
                "bias_start",
                "scope"
            ],
            "BasicRNNCell": {
                "__init__": [
                    "self",
                    "num_units",
                    "input_size",
                    "activation"
                ],
                "state_size": [
                    "self"
                ],
                "output_size": [
                    "self"
                ],
                "__call__": [
                    "self",
                    "inputs",
                    "state",
                    "scope"
                ]
            },
            "GRUCell": {
                "__init__": [
                    "self",
                    "num_units",
                    "input_size",
                    "activation"
                ],
                "state_size": [
                    "self"
                ],
                "output_size": [
                    "self"
                ],
                "__call__": [
                    "self",
                    "inputs",
                    "state",
                    "scope"
                ]
            },
            "LSTMStateTuple": {
                "dtype": [
                    "self"
                ]
            },
            "BasicLSTMCell": {
                "__init__": [
                    "self",
                    "num_units",
                    "forget_bias",
                    "input_size",
                    "state_is_tuple",
                    "activation"
                ],
                "state_size": [
                    "self"
                ],
                "output_size": [
                    "self"
                ],
                "__call__": [
                    "self",
                    "inputs",
                    "state",
                    "scope"
                ]
            },
            "LSTMCell": {
                "__init__": [
                    "self",
                    "num_units",
                    "input_size",
                    "use_peepholes",
                    "cell_clip",
                    "initializer",
                    "num_proj",
                    "proj_clip",
                    "num_unit_shards",
                    "num_proj_shards",
                    "forget_bias",
                    "state_is_tuple",
                    "activation"
                ],
                "state_size": [
                    "self"
                ],
                "output_size": [
                    "self"
                ],
                "__call__": [
                    "self",
                    "inputs",
                    "state",
                    "scope"
                ]
            },
            "OutputProjectionWrapper": {
                "__init__": [
                    "self",
                    "cell",
                    "output_size"
                ],
                "state_size": [
                    "self"
                ],
                "output_size": [
                    "self"
                ],
                "__call__": [
                    "self",
                    "inputs",
                    "state",
                    "scope"
                ]
            },
            "InputProjectionWrapper": {
                "__init__": [
                    "self",
                    "cell",
                    "num_proj",
                    "input_size"
                ],
                "state_size": [
                    "self"
                ],
                "output_size": [
                    "self"
                ],
                "__call__": [
                    "self",
                    "inputs",
                    "state",
                    "scope"
                ]
            },
            "DropoutWrapper": {
                "__init__": [
                    "self",
                    "cell",
                    "input_keep_prob",
                    "output_keep_prob",
                    "seed"
                ],
                "state_size": [
                    "self"
                ],
                "output_size": [
                    "self"
                ],
                "__call__": [
                    "self",
                    "inputs",
                    "state",
                    "scope"
                ]
            },
            "EmbeddingWrapper": {
                "__init__": [
                    "self",
                    "cell",
                    "embedding_classes",
                    "embedding_size",
                    "initializer"
                ],
                "state_size": [
                    "self"
                ],
                "output_size": [
                    "self"
                ],
                "__call__": [
                    "self",
                    "inputs",
                    "state",
                    "scope"
                ]
            },
            "MultiRNNCell": {
                "__init__": [
                    "self",
                    "cells",
                    "state_is_tuple"
                ],
                "state_size": [
                    "self"
                ],
                "output_size": [
                    "self"
                ],
                "__call__": [
                    "self",
                    "inputs",
                    "state",
                    "scope"
                ]
            },
            "_SlimRNNCell": {
                "__init__": [
                    "self",
                    "cell_fn"
                ],
                "state_size": [
                    "self"
                ],
                "output_size": [
                    "self"
                ],
                "__call__": [
                    "self",
                    "inputs",
                    "state",
                    "scope"
                ]
            }
        },
        "tensorflow.contrib.rnn.python.ops.gru_ops": {
            "_GRUBlockCellGrad": [
                "op"
            ],
            "GRUBlockCell": {
                "__init__": [
                    "self",
                    "cell_size"
                ],
                "state_size": [
                    "self"
                ],
                "output_size": [
                    "self"
                ],
                "__call__": [
                    "self",
                    "x",
                    "h_prev",
                    "scope"
                ]
            }
        },
        "tensorflow.contrib.rnn.python.ops.core_rnn_cell": {},
        "tensorflow.contrib.rnn.python.ops.core_rnn": {
            "static_rnn": [
                "cell",
                "inputs",
                "initial_state",
                "dtype",
                "sequence_length",
                "scope"
            ],
            "static_state_saving_rnn": [
                "cell",
                "inputs",
                "state_saver",
                "state_name",
                "sequence_length",
                "scope"
            ],
            "static_bidirectional_rnn": [
                "cell_fw",
                "cell_bw",
                "inputs",
                "initial_state_fw",
                "initial_state_bw",
                "dtype",
                "sequence_length",
                "scope"
            ]
        },
        "tensorflow.contrib.rnn.python.ops.rnn": {
            "stack_bidirectional_rnn": [
                "cells_fw",
                "cells_bw",
                "inputs",
                "initial_states_fw",
                "initial_states_bw",
                "dtype",
                "sequence_length",
                "scope"
            ],
            "stack_bidirectional_dynamic_rnn": [
                "cells_fw",
                "cells_bw",
                "inputs",
                "initial_states_fw",
                "initial_states_bw",
                "dtype",
                "sequence_length",
                "scope"
            ]
        },
        "tensorflow.contrib.slim.nets": {},
        "tensorflow.contrib.slim": {},
        "tensorflow.contrib.slim.python": {},
        "tensorflow.contrib.slim.python.slim.evaluation_test": {
            "GenerateTestData": [
                "num_classes",
                "batch_size"
            ],
            "TestModel": [
                "inputs"
            ],
            "GroundTruthAccuracy": [
                "inputs",
                "labels",
                "batch_size"
            ],
            "EvaluationTest": {
                "setUp": [
                    "self"
                ],
                "testFinalOpsOnEvaluationLoop": [
                    "self"
                ],
                "_create_names_to_metrics": [
                    "self",
                    "predictions",
                    "labels"
                ],
                "_verify_summaries": [
                    "self",
                    "output_dir",
                    "names_to_values"
                ],
                "testLatestCheckpointReturnsNoneAfterTimeout": [
                    "self"
                ],
                "testMonitorCheckpointsLoopTimeout": [
                    "self"
                ]
            },
            "SingleEvaluationTest": {
                "setUp": [
                    "self"
                ],
                "testErrorRaisedIfCheckpointDoesntExist": [
                    "self"
                ],
                "testRestoredModelPerformance": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.slim.python.slim.learning_test": {
            "LogisticClassifier": [
                "inputs"
            ],
            "BatchNormClassifier": [
                "inputs"
            ],
            "ClipGradientNormsTest": {
                "clip_values": [
                    "self",
                    "arr"
                ],
                "setUp": [
                    "self"
                ],
                "testOrdinaryGradIsClippedCorrectly": [
                    "self"
                ],
                "testNoneGradPassesThroughCorrectly": [
                    "self"
                ],
                "testIndexedSlicesGradIsClippedCorrectly": [
                    "self"
                ]
            },
            "MultiplyGradientsTest": {
                "setUp": [
                    "self"
                ],
                "testNonListGradsRaisesError": [
                    "self"
                ],
                "testEmptyMultiplesRaisesError": [
                    "self"
                ],
                "testNonDictMultiplierRaisesError": [
                    "self"
                ],
                "testMultipleOfNoneGradRaisesError": [
                    "self"
                ],
                "testMultipleGradientsWithVariables": [
                    "self"
                ],
                "testIndexedSlicesGradIsMultiplied": [
                    "self"
                ]
            },
            "TrainBNClassifierTest": {
                "setUp": [
                    "self"
                ],
                "testTrainWithNoInitAssignCanAchieveZeroLoss": [
                    "self"
                ]
            },
            "CreateTrainOpTest": {
                "setUp": [
                    "self"
                ],
                "testUseUpdateOps": [
                    "self"
                ],
                "testEmptyUpdateOps": [
                    "self"
                ],
                "testUseGlobalStep": [
                    "self"
                ],
                "testNoneGlobalStep": [
                    "self"
                ],
                "testRecordTrainOpInCollection": [
                    "self"
                ]
            },
            "TrainTest": {
                "setUp": [
                    "self"
                ],
                "testTrainWithNonDefaultGraph": [
                    "self"
                ],
                "testTrainWithNoneAsLogdir": [
                    "self"
                ],
                "testTrainWithSessionConfig": [
                    "self"
                ],
                "testTrainWithTrace": [
                    "self"
                ],
                "testTrainWithNoneAsLogdirWhenUsingSummariesRaisesError": [
                    "self"
                ],
                "testTrainWithNoneAsLogdirWhenUsingTraceRaisesError": [
                    "self"
                ],
                "testTrainWithNoneAsLogdirWhenUsingSaverRaisesError": [
                    "self"
                ],
                "testTrainWithNoneAsInitWhenUsingVarsRaisesError": [
                    "self"
                ],
                "testTrainWithNoInitAssignCanAchieveZeroLoss": [
                    "self"
                ],
                "testTrainWithLocalVariable": [
                    "self"
                ],
                "testResumeTrainAchievesRoughlyTheSameLoss": [
                    "self"
                ],
                "create_train_op": [
                    "self",
                    "learning_rate",
                    "gradient_multiplier"
                ],
                "testTrainWithInitFromCheckpoint": [
                    "self"
                ],
                "testTrainWithInitFromFn": [
                    "self"
                ],
                "ModelLoss": [
                    "self"
                ],
                "testTrainAllVarsHasLowerLossThanTrainSubsetOfVars": [
                    "self"
                ],
                "testTrainingSubsetsOfVariablesOnlyUpdatesThoseVariables": [
                    "self"
                ],
                "testTrainWithAlteredGradients": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.slim.python.slim": {},
        "tensorflow.contrib.slim.python.slim.evaluation": {
            "evaluate_once": [
                "master",
                "checkpoint_path",
                "logdir",
                "num_evals",
                "initial_op",
                "initial_op_feed_dict",
                "eval_op",
                "eval_op_feed_dict",
                "final_op",
                "final_op_feed_dict",
                "summary_op",
                "summary_op_feed_dict",
                "variables_to_restore",
                "session_config"
            ],
            "evaluation_loop": [
                "master",
                "checkpoint_dir",
                "logdir",
                "num_evals",
                "initial_op",
                "initial_op_feed_dict",
                "eval_op",
                "eval_op_feed_dict",
                "final_op",
                "final_op_feed_dict",
                "summary_op",
                "summary_op_feed_dict",
                "variables_to_restore",
                "eval_interval_secs",
                "max_number_of_evaluations",
                "session_config",
                "timeout"
            ]
        },
        "tensorflow.contrib.slim.python.slim.model_analyzer": {
            "tensor_description": [
                "var"
            ],
            "analyze_ops": [
                "graph",
                "print_info"
            ],
            "analyze_vars": [
                "variables",
                "print_info"
            ]
        },
        "tensorflow.contrib.slim.python.slim.learning": {
            "clip_gradient_norms": [
                "gradients_to_variables",
                "max_norm"
            ],
            "multiply_gradients": [
                "grads_and_vars",
                "gradient_multipliers"
            ],
            "add_gradients_summaries": [
                "grads_and_vars"
            ],
            "create_train_op": [
                "total_loss",
                "optimizer",
                "global_step",
                "update_ops",
                "variables_to_train",
                "clip_gradient_norm",
                "summarize_gradients",
                "gate_gradients",
                "aggregation_method",
                "colocate_gradients_with_ops",
                "gradient_multipliers"
            ],
            "_wait_for_step": [
                "sess",
                "global_step",
                "step"
            ],
            "train_step": [
                "sess",
                "train_op",
                "global_step",
                "train_step_kwargs"
            ],
            "train": [
                "train_op",
                "logdir",
                "train_step_fn",
                "train_step_kwargs",
                "log_every_n_steps",
                "graph",
                "master",
                "is_chief",
                "global_step",
                "number_of_steps",
                "init_op",
                "init_feed_dict",
                "local_init_op",
                "init_fn",
                "ready_op",
                "summary_op",
                "save_summaries_secs",
                "summary_writer",
                "startup_delay_steps",
                "saver",
                "save_interval_secs",
                "sync_optimizer",
                "session_config",
                "trace_every_n_steps"
            ]
        },
        "tensorflow.contrib.slim.python.slim.queues": {
            "QueueRunners": [
                "session"
            ],
            "NestedQueueRunnerError": {}
        },
        "tensorflow.contrib.slim.python.slim.data.dataset_data_provider": {
            "DatasetDataProvider": {
                "__init__": [
                    "self",
                    "dataset",
                    "num_readers",
                    "shuffle",
                    "num_epochs",
                    "common_queue_capacity",
                    "common_queue_min",
                    "seed"
                ]
            }
        },
        "tensorflow.contrib.slim.python.slim.data.test_utils": {
            "_encoded_int64_feature": [
                "ndarray"
            ],
            "_encoded_bytes_feature": [
                "tf_encoded"
            ],
            "_string_feature": [
                "value"
            ],
            "_encoder": [
                "image",
                "image_format"
            ],
            "generate_image": [
                "image_shape",
                "image_format",
                "label"
            ],
            "create_tfrecord_files": [
                "output_dir",
                "num_files",
                "num_records_per_file"
            ]
        },
        "tensorflow.contrib.slim.python.slim.data.dataset_data_provider_test": {
            "_resize_image": [
                "image",
                "height",
                "width"
            ],
            "_create_tfrecord_dataset": [
                "tmpdir"
            ],
            "DatasetDataProviderTest": {
                "testTFRecordDataset": [
                    "self"
                ],
                "testTFRecordSeparateGetDataset": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.slim.python.slim.data": {},
        "tensorflow.contrib.slim.python.slim.data.parallel_reader": {
            "parallel_read": [
                "data_sources",
                "reader_class",
                "num_epochs",
                "num_readers",
                "reader_kwargs",
                "shuffle",
                "dtypes",
                "capacity",
                "min_after_dequeue",
                "seed",
                "scope"
            ],
            "single_pass_read": [
                "data_sources",
                "reader_class",
                "reader_kwargs",
                "scope"
            ],
            "get_data_files": [
                "data_sources"
            ],
            "ParallelReader": {
                "__init__": [
                    "self",
                    "reader_class",
                    "common_queue",
                    "num_readers",
                    "reader_kwargs"
                ],
                "num_readers": [
                    "self"
                ],
                "common_queue": [
                    "self"
                ],
                "read": [
                    "self",
                    "queue",
                    "name"
                ],
                "num_records_produced": [
                    "self",
                    "name"
                ],
                "num_work_units_completed": [
                    "self",
                    "name"
                ]
            }
        },
        "tensorflow.contrib.slim.python.slim.data.prefetch_queue_test": {
            "PrefetchQueueTest": {
                "testOneThread": [
                    "self"
                ],
                "testMultiThread": [
                    "self"
                ],
                "testMultipleDequeue": [
                    "self"
                ],
                "testDictConstruction": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.slim.python.slim.data.data_decoder": {
            "DataDecoder": {
                "decode": [
                    "self",
                    "data",
                    "items"
                ],
                "list_items": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.slim.python.slim.data.tfexample_decoder": {
            "ItemHandler": {
                "__init__": [
                    "self",
                    "keys"
                ],
                "keys": [
                    "self"
                ],
                "tensors_to_item": [
                    "self",
                    "keys_to_tensors"
                ]
            },
            "ItemHandlerCallback": {
                "__init__": [
                    "self",
                    "keys",
                    "func"
                ],
                "tensors_to_item": [
                    "self",
                    "keys_to_tensors"
                ]
            },
            "BoundingBox": {
                "__init__": [
                    "self",
                    "keys",
                    "prefix"
                ],
                "tensors_to_item": [
                    "self",
                    "keys_to_tensors"
                ]
            },
            "Tensor": {
                "__init__": [
                    "self",
                    "tensor_key",
                    "shape_keys",
                    "shape",
                    "default_value"
                ],
                "tensors_to_item": [
                    "self",
                    "keys_to_tensors"
                ]
            },
            "SparseTensor": {
                "__init__": [
                    "self",
                    "indices_key",
                    "values_key",
                    "shape_key",
                    "shape",
                    "densify",
                    "default_value"
                ],
                "tensors_to_item": [
                    "self",
                    "keys_to_tensors"
                ]
            },
            "Image": {
                "__init__": [
                    "self",
                    "image_key",
                    "format_key",
                    "shape",
                    "channels"
                ],
                "tensors_to_item": [
                    "self",
                    "keys_to_tensors"
                ],
                "_decode": [
                    "self",
                    "image_buffer",
                    "image_format"
                ]
            },
            "TFExampleDecoder": {
                "__init__": [
                    "self",
                    "keys_to_features",
                    "items_to_handlers"
                ],
                "list_items": [
                    "self"
                ],
                "decode": [
                    "self",
                    "serialized_example",
                    "items"
                ]
            }
        },
        "tensorflow.contrib.slim.python.slim.data.prefetch_queue": {
            "prefetch_queue": [
                "tensors",
                "capacity",
                "num_threads",
                "shared_name",
                "name"
            ]
        },
        "tensorflow.contrib.slim.python.slim.data.dataset": {
            "Dataset": {
                "__init__": [
                    "self",
                    "data_sources",
                    "reader",
                    "decoder",
                    "num_samples",
                    "items_to_descriptions"
                ]
            }
        },
        "tensorflow.contrib.slim.python.slim.data.parallel_reader_test": {
            "ParallelReaderTest": {
                "setUp": [
                    "self"
                ],
                "_verify_all_data_sources_read": [
                    "self",
                    "shared_queue"
                ],
                "testRandomShuffleQueue": [
                    "self"
                ],
                "testFIFOSharedQueue": [
                    "self"
                ]
            },
            "ParallelReadTest": {
                "setUp": [
                    "self"
                ],
                "testTFRecordReader": [
                    "self"
                ]
            },
            "SinglePassReadTest": {
                "setUp": [
                    "self"
                ],
                "testOutOfRangeError": [
                    "self"
                ],
                "testTFRecordReader": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.slim.python.slim.data.tfexample_decoder_test": {
            "TFExampleDecoderTest": {
                "_EncodedFloatFeature": [
                    "self",
                    "ndarray"
                ],
                "_EncodedInt64Feature": [
                    "self",
                    "ndarray"
                ],
                "_EncodedBytesFeature": [
                    "self",
                    "tf_encoded"
                ],
                "_BytesFeature": [
                    "self",
                    "ndarray"
                ],
                "_StringFeature": [
                    "self",
                    "value"
                ],
                "_Encoder": [
                    "self",
                    "image",
                    "image_format"
                ],
                "GenerateImage": [
                    "self",
                    "image_format",
                    "image_shape"
                ],
                "DecodeExample": [
                    "self",
                    "serialized_example",
                    "item_handler",
                    "image_format"
                ],
                "RunDecodeExample": [
                    "self",
                    "serialized_example",
                    "item_handler",
                    "image_format"
                ],
                "testDecodeExampleWithJpegEncoding": [
                    "self"
                ],
                "testDecodeExampleWithJPEGEncoding": [
                    "self"
                ],
                "testDecodeExampleWithNoShapeInfo": [
                    "self"
                ],
                "testDecodeExampleWithPngEncoding": [
                    "self"
                ],
                "testDecodeExampleWithPNGEncoding": [
                    "self"
                ],
                "testDecodeExampleWithRawEncoding": [
                    "self"
                ],
                "testDecodeExampleWithRAWEncoding": [
                    "self"
                ],
                "testDecodeExampleWithStringTensor": [
                    "self"
                ],
                "testDecodeExampleWithFloatTensor": [
                    "self"
                ],
                "testDecodeExampleWithInt64Tensor": [
                    "self"
                ],
                "testDecodeExampleWithVarLenTensor": [
                    "self"
                ],
                "testDecodeExampleWithFixLenTensorWithShape": [
                    "self"
                ],
                "testDecodeExampleWithVarLenTensorToDense": [
                    "self"
                ],
                "testDecodeExampleShapeKeyTensor": [
                    "self"
                ],
                "testDecodeExampleMultiShapeKeyTensor": [
                    "self"
                ],
                "testDecodeExampleWithSparseTensor": [
                    "self"
                ],
                "testDecodeExampleWithSparseTensorWithKeyShape": [
                    "self"
                ],
                "testDecodeExampleWithSparseTensorWithGivenShape": [
                    "self"
                ],
                "testDecodeExampleWithSparseTensorToDense": [
                    "self"
                ],
                "testDecodeExampleWithTensor": [
                    "self"
                ],
                "testDecodeExampleWithItemHandlerCallback": [
                    "self"
                ],
                "testDecodeImageWithItemHandlerCallback": [
                    "self"
                ],
                "testDecodeExampleWithBoundingBox": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.slim.python.slim.data.data_provider": {
            "DataProvider": {
                "__init__": [
                    "self",
                    "items_to_tensors",
                    "num_samples"
                ],
                "get": [
                    "self",
                    "items"
                ],
                "list_items": [
                    "self"
                ],
                "num_samples": [
                    "self"
                ],
                "_validate_items": [
                    "self",
                    "items"
                ]
            }
        },
        "tensorflow.contrib.slim.python.slim.nets.alexnet_test": {
            "AlexnetV2Test": {
                "testBuild": [
                    "self"
                ],
                "testFullyConvolutional": [
                    "self"
                ],
                "testEndPoints": [
                    "self"
                ],
                "testModelVariables": [
                    "self"
                ],
                "testEvaluation": [
                    "self"
                ],
                "testTrainEvalWithReuse": [
                    "self"
                ],
                "testForward": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.slim.python.slim.nets": {},
        "tensorflow.contrib.slim.python.slim.nets.vgg_test": {
            "VGGATest": {
                "testBuild": [
                    "self"
                ],
                "testFullyConvolutional": [
                    "self"
                ],
                "testEndPoints": [
                    "self"
                ],
                "testModelVariables": [
                    "self"
                ],
                "testEvaluation": [
                    "self"
                ],
                "testTrainEvalWithReuse": [
                    "self"
                ],
                "testForward": [
                    "self"
                ]
            },
            "VGG16Test": {
                "testBuild": [
                    "self"
                ],
                "testFullyConvolutional": [
                    "self"
                ],
                "testEndPoints": [
                    "self"
                ],
                "testModelVariables": [
                    "self"
                ],
                "testEvaluation": [
                    "self"
                ],
                "testTrainEvalWithReuse": [
                    "self"
                ],
                "testForward": [
                    "self"
                ]
            },
            "VGG19Test": {
                "testBuild": [
                    "self"
                ],
                "testFullyConvolutional": [
                    "self"
                ],
                "testEndPoints": [
                    "self"
                ],
                "testModelVariables": [
                    "self"
                ],
                "testEvaluation": [
                    "self"
                ],
                "testTrainEvalWithReuse": [
                    "self"
                ],
                "testForward": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.slim.python.slim.nets.resnet_v2_test": {
            "create_test_input": [
                "batch_size",
                "height",
                "width",
                "channels"
            ],
            "ResnetUtilsTest": {
                "testSubsampleThreeByThree": [
                    "self"
                ],
                "testSubsampleFourByFour": [
                    "self"
                ],
                "testConv2DSameEven": [
                    "self"
                ],
                "testConv2DSameOdd": [
                    "self"
                ],
                "_resnet_plain": [
                    "self",
                    "inputs",
                    "blocks",
                    "output_stride",
                    "scope"
                ],
                "testEndPointsV2": [
                    "self"
                ],
                "_stack_blocks_nondense": [
                    "self",
                    "net",
                    "blocks"
                ],
                "_atrousValues": [
                    "self",
                    "bottleneck"
                ],
                "testAtrousValuesBottleneck": [
                    "self"
                ]
            },
            "ResnetCompleteNetworkTest": {
                "_resnet_small": [
                    "self",
                    "inputs",
                    "num_classes",
                    "global_pool",
                    "output_stride",
                    "include_root_block",
                    "reuse",
                    "scope"
                ],
                "testClassificationEndPoints": [
                    "self"
                ],
                "testClassificationShapes": [
                    "self"
                ],
                "testFullyConvolutionalEndpointShapes": [
                    "self"
                ],
                "testRootlessFullyConvolutionalEndpointShapes": [
                    "self"
                ],
                "testAtrousFullyConvolutionalEndpointShapes": [
                    "self"
                ],
                "testAtrousFullyConvolutionalValues": [
                    "self"
                ],
                "testUnknownBatchSize": [
                    "self"
                ],
                "testFullyConvolutionalUnknownHeightWidth": [
                    "self"
                ],
                "testAtrousFullyConvolutionalUnknownHeightWidth": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.slim.python.slim.nets.overfeat_test": {
            "OverFeatTest": {
                "testBuild": [
                    "self"
                ],
                "testFullyConvolutional": [
                    "self"
                ],
                "testEndPoints": [
                    "self"
                ],
                "testModelVariables": [
                    "self"
                ],
                "testEvaluation": [
                    "self"
                ],
                "testTrainEvalWithReuse": [
                    "self"
                ],
                "testForward": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.slim.python.slim.nets.vgg": {
            "vgg_arg_scope": [
                "weight_decay"
            ],
            "vgg_a": [
                "inputs",
                "num_classes",
                "is_training",
                "dropout_keep_prob",
                "spatial_squeeze",
                "scope"
            ],
            "vgg_16": [
                "inputs",
                "num_classes",
                "is_training",
                "dropout_keep_prob",
                "spatial_squeeze",
                "scope"
            ],
            "vgg_19": [
                "inputs",
                "num_classes",
                "is_training",
                "dropout_keep_prob",
                "spatial_squeeze",
                "scope"
            ]
        },
        "tensorflow.contrib.slim.python.slim.nets.alexnet": {
            "alexnet_v2_arg_scope": [
                "weight_decay"
            ],
            "alexnet_v2": [
                "inputs",
                "num_classes",
                "is_training",
                "dropout_keep_prob",
                "spatial_squeeze",
                "scope"
            ]
        },
        "tensorflow.contrib.slim.python.slim.nets.resnet_utils": {
            "subsample": [
                "inputs",
                "factor",
                "scope"
            ],
            "conv2d_same": [
                "inputs",
                "num_outputs",
                "kernel_size",
                "stride",
                "rate",
                "scope"
            ],
            "stack_blocks_dense": [
                "net",
                "blocks",
                "output_stride",
                "outputs_collections"
            ],
            "resnet_arg_scope": [
                "is_training",
                "weight_decay",
                "batch_norm_decay",
                "batch_norm_epsilon",
                "batch_norm_scale"
            ],
            "Block": {}
        },
        "tensorflow.contrib.slim.python.slim.nets.inception_v1_test": {
            "InceptionV1Test": {
                "testBuildClassificationNetwork": [
                    "self"
                ],
                "testBuildBaseNetwork": [
                    "self"
                ],
                "testBuildOnlyUptoFinalEndpoint": [
                    "self"
                ],
                "testBuildAndCheckAllEndPointsUptoMixed5c": [
                    "self"
                ],
                "testModelHasExpectedNumberOfParameters": [
                    "self"
                ],
                "testHalfSizeImages": [
                    "self"
                ],
                "testUnknownImageShape": [
                    "self"
                ],
                "testUnknownBatchSize": [
                    "self"
                ],
                "testEvaluation": [
                    "self"
                ],
                "testTrainEvalWithReuse": [
                    "self"
                ],
                "testLogitsNotSqueezed": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.slim.python.slim.nets.inception_v1": {
            "inception_v1_base": [
                "inputs",
                "final_endpoint",
                "scope"
            ],
            "inception_v1": [
                "inputs",
                "num_classes",
                "is_training",
                "dropout_keep_prob",
                "prediction_fn",
                "spatial_squeeze",
                "reuse",
                "scope"
            ],
            "inception_v1_arg_scope": [
                "weight_decay",
                "use_batch_norm",
                "batch_norm_var_collection"
            ]
        },
        "tensorflow.contrib.slim.python.slim.nets.resnet_v1": {
            "bottleneck": [
                "inputs",
                "depth",
                "depth_bottleneck",
                "stride",
                "rate",
                "outputs_collections",
                "scope"
            ],
            "resnet_v1": [
                "inputs",
                "blocks",
                "num_classes",
                "global_pool",
                "output_stride",
                "include_root_block",
                "reuse",
                "scope"
            ],
            "resnet_v1_50": [
                "inputs",
                "num_classes",
                "global_pool",
                "output_stride",
                "reuse",
                "scope"
            ],
            "resnet_v1_101": [
                "inputs",
                "num_classes",
                "global_pool",
                "output_stride",
                "reuse",
                "scope"
            ],
            "resnet_v1_152": [
                "inputs",
                "num_classes",
                "global_pool",
                "output_stride",
                "reuse",
                "scope"
            ],
            "resnet_v1_200": [
                "inputs",
                "num_classes",
                "global_pool",
                "output_stride",
                "reuse",
                "scope"
            ]
        },
        "tensorflow.contrib.slim.python.slim.nets.inception_v2_test": {
            "InceptionV2Test": {
                "testBuildClassificationNetwork": [
                    "self"
                ],
                "testBuildBaseNetwork": [
                    "self"
                ],
                "testBuildOnlyUptoFinalEndpoint": [
                    "self"
                ],
                "testBuildAndCheckAllEndPointsUptoMixed5c": [
                    "self"
                ],
                "testModelHasExpectedNumberOfParameters": [
                    "self"
                ],
                "testBuildEndPointsWithDepthMultiplierLessThanOne": [
                    "self"
                ],
                "testBuildEndPointsWithDepthMultiplierGreaterThanOne": [
                    "self"
                ],
                "testRaiseValueErrorWithInvalidDepthMultiplier": [
                    "self"
                ],
                "testHalfSizeImages": [
                    "self"
                ],
                "testUnknownImageShape": [
                    "self"
                ],
                "testUnknownBatchSize": [
                    "self"
                ],
                "testEvaluation": [
                    "self"
                ],
                "testTrainEvalWithReuse": [
                    "self"
                ],
                "testLogitsNotSqueezed": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.slim.python.slim.nets.inception_v2": {
            "inception_v2_base": [
                "inputs",
                "final_endpoint",
                "min_depth",
                "depth_multiplier",
                "scope"
            ],
            "inception_v2": [
                "inputs",
                "num_classes",
                "is_training",
                "dropout_keep_prob",
                "min_depth",
                "depth_multiplier",
                "prediction_fn",
                "spatial_squeeze",
                "reuse",
                "scope"
            ],
            "_reduced_kernel_size_for_small_input": [
                "input_tensor",
                "kernel_size"
            ],
            "inception_v2_arg_scope": [
                "weight_decay",
                "batch_norm_var_collection"
            ]
        },
        "tensorflow.contrib.slim.python.slim.nets.overfeat": {
            "overfeat_arg_scope": [
                "weight_decay"
            ],
            "overfeat": [
                "inputs",
                "num_classes",
                "is_training",
                "dropout_keep_prob",
                "spatial_squeeze",
                "scope"
            ]
        },
        "tensorflow.contrib.slim.python.slim.nets.inception_v3": {
            "inception_v3_base": [
                "inputs",
                "final_endpoint",
                "min_depth",
                "depth_multiplier",
                "scope"
            ],
            "inception_v3": [
                "inputs",
                "num_classes",
                "is_training",
                "dropout_keep_prob",
                "min_depth",
                "depth_multiplier",
                "prediction_fn",
                "spatial_squeeze",
                "reuse",
                "scope"
            ],
            "_reduced_kernel_size_for_small_input": [
                "input_tensor",
                "kernel_size"
            ],
            "inception_v3_arg_scope": [
                "weight_decay",
                "stddev",
                "batch_norm_var_collection"
            ]
        },
        "tensorflow.contrib.slim.python.slim.nets.inception_v3_test": {
            "InceptionV3Test": {
                "testBuildClassificationNetwork": [
                    "self"
                ],
                "testBuildBaseNetwork": [
                    "self"
                ],
                "testBuildOnlyUptoFinalEndpoint": [
                    "self"
                ],
                "testBuildAndCheckAllEndPointsUptoMixed7c": [
                    "self"
                ],
                "testModelHasExpectedNumberOfParameters": [
                    "self"
                ],
                "testBuildEndPoints": [
                    "self"
                ],
                "testBuildEndPointsWithDepthMultiplierLessThanOne": [
                    "self"
                ],
                "testBuildEndPointsWithDepthMultiplierGreaterThanOne": [
                    "self"
                ],
                "testRaiseValueErrorWithInvalidDepthMultiplier": [
                    "self"
                ],
                "testHalfSizeImages": [
                    "self"
                ],
                "testUnknownImageShape": [
                    "self"
                ],
                "testUnknownBatchSize": [
                    "self"
                ],
                "testEvaluation": [
                    "self"
                ],
                "testTrainEvalWithReuse": [
                    "self"
                ],
                "testLogitsNotSqueezed": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.slim.python.slim.nets.resnet_v2": {
            "bottleneck": [
                "inputs",
                "depth",
                "depth_bottleneck",
                "stride",
                "rate",
                "outputs_collections",
                "scope"
            ],
            "resnet_v2": [
                "inputs",
                "blocks",
                "num_classes",
                "global_pool",
                "output_stride",
                "include_root_block",
                "reuse",
                "scope"
            ],
            "resnet_v2_50": [
                "inputs",
                "num_classes",
                "global_pool",
                "output_stride",
                "reuse",
                "scope"
            ],
            "resnet_v2_101": [
                "inputs",
                "num_classes",
                "global_pool",
                "output_stride",
                "reuse",
                "scope"
            ],
            "resnet_v2_152": [
                "inputs",
                "num_classes",
                "global_pool",
                "output_stride",
                "reuse",
                "scope"
            ],
            "resnet_v2_200": [
                "inputs",
                "num_classes",
                "global_pool",
                "output_stride",
                "reuse",
                "scope"
            ]
        },
        "tensorflow.contrib.slim.python.slim.nets.resnet_v1_test": {
            "create_test_input": [
                "batch_size",
                "height",
                "width",
                "channels"
            ],
            "ResnetUtilsTest": {
                "testSubsampleThreeByThree": [
                    "self"
                ],
                "testSubsampleFourByFour": [
                    "self"
                ],
                "testConv2DSameEven": [
                    "self"
                ],
                "testConv2DSameOdd": [
                    "self"
                ],
                "_resnet_plain": [
                    "self",
                    "inputs",
                    "blocks",
                    "output_stride",
                    "scope"
                ],
                "testEndPointsV1": [
                    "self"
                ],
                "_stack_blocks_nondense": [
                    "self",
                    "net",
                    "blocks"
                ],
                "_atrousValues": [
                    "self",
                    "bottleneck"
                ],
                "testAtrousValuesBottleneck": [
                    "self"
                ]
            },
            "ResnetCompleteNetworkTest": {
                "_resnet_small": [
                    "self",
                    "inputs",
                    "num_classes",
                    "global_pool",
                    "output_stride",
                    "include_root_block",
                    "reuse",
                    "scope"
                ],
                "testClassificationEndPoints": [
                    "self"
                ],
                "testClassificationShapes": [
                    "self"
                ],
                "testFullyConvolutionalEndpointShapes": [
                    "self"
                ],
                "testRootlessFullyConvolutionalEndpointShapes": [
                    "self"
                ],
                "testAtrousFullyConvolutionalEndpointShapes": [
                    "self"
                ],
                "testAtrousFullyConvolutionalValues": [
                    "self"
                ],
                "testUnknownBatchSize": [
                    "self"
                ],
                "testFullyConvolutionalUnknownHeightWidth": [
                    "self"
                ],
                "testAtrousFullyConvolutionalUnknownHeightWidth": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.slim.python.slim.nets.inception": {},
        "tensorflow.contrib.legacy_seq2seq": {},
        "tensorflow.contrib.legacy_seq2seq.python": {},
        "tensorflow.contrib.legacy_seq2seq.python.ops": {},
        "tensorflow.contrib.legacy_seq2seq.python.ops.seq2seq": {
            "_extract_argmax_and_embed": [
                "embedding",
                "output_projection",
                "update_embedding"
            ],
            "rnn_decoder": [
                "decoder_inputs",
                "initial_state",
                "cell",
                "loop_function",
                "scope"
            ],
            "basic_rnn_seq2seq": [
                "encoder_inputs",
                "decoder_inputs",
                "cell",
                "dtype",
                "scope"
            ],
            "tied_rnn_seq2seq": [
                "encoder_inputs",
                "decoder_inputs",
                "cell",
                "loop_function",
                "dtype",
                "scope"
            ],
            "embedding_rnn_decoder": [
                "decoder_inputs",
                "initial_state",
                "cell",
                "num_symbols",
                "embedding_size",
                "output_projection",
                "feed_previous",
                "update_embedding_for_previous",
                "scope"
            ],
            "embedding_rnn_seq2seq": [
                "encoder_inputs",
                "decoder_inputs",
                "cell",
                "num_encoder_symbols",
                "num_decoder_symbols",
                "embedding_size",
                "output_projection",
                "feed_previous",
                "dtype",
                "scope"
            ],
            "embedding_tied_rnn_seq2seq": [
                "encoder_inputs",
                "decoder_inputs",
                "cell",
                "num_symbols",
                "embedding_size",
                "num_decoder_symbols",
                "output_projection",
                "feed_previous",
                "dtype",
                "scope"
            ],
            "attention_decoder": [
                "decoder_inputs",
                "initial_state",
                "attention_states",
                "cell",
                "output_size",
                "num_heads",
                "loop_function",
                "dtype",
                "scope",
                "initial_state_attention"
            ],
            "embedding_attention_decoder": [
                "decoder_inputs",
                "initial_state",
                "attention_states",
                "cell",
                "num_symbols",
                "embedding_size",
                "num_heads",
                "output_size",
                "output_projection",
                "feed_previous",
                "update_embedding_for_previous",
                "dtype",
                "scope",
                "initial_state_attention"
            ],
            "embedding_attention_seq2seq": [
                "encoder_inputs",
                "decoder_inputs",
                "cell",
                "num_encoder_symbols",
                "num_decoder_symbols",
                "embedding_size",
                "num_heads",
                "output_projection",
                "feed_previous",
                "dtype",
                "scope",
                "initial_state_attention"
            ],
            "one2many_rnn_seq2seq": [
                "encoder_inputs",
                "decoder_inputs_dict",
                "cell",
                "num_encoder_symbols",
                "num_decoder_symbols_dict",
                "embedding_size",
                "feed_previous",
                "dtype",
                "scope"
            ],
            "sequence_loss_by_example": [
                "logits",
                "targets",
                "weights",
                "average_across_timesteps",
                "softmax_loss_function",
                "name"
            ],
            "sequence_loss": [
                "logits",
                "targets",
                "weights",
                "average_across_timesteps",
                "average_across_batch",
                "softmax_loss_function",
                "name"
            ],
            "model_with_buckets": [
                "encoder_inputs",
                "decoder_inputs",
                "targets",
                "weights",
                "buckets",
                "seq2seq",
                "softmax_loss_function",
                "per_example_loss",
                "name"
            ]
        },
        "tensorflow.contrib.lookup": {},
        "tensorflow.contrib.lookup.lookup_ops": {
            "string_to_index_table_from_file": [
                "vocabulary_file",
                "num_oov_buckets",
                "vocab_size",
                "default_value",
                "hasher_spec",
                "name"
            ],
            "string_to_index_table_from_tensor": [
                "mapping",
                "num_oov_buckets",
                "default_value",
                "hasher_spec",
                "name"
            ],
            "string_to_index": [
                "tensor",
                "mapping",
                "default_value",
                "name"
            ],
            "index_to_string_table_from_file": [
                "vocabulary_file",
                "vocab_size",
                "default_value",
                "name"
            ],
            "index_to_string_table_from_tensor": [
                "mapping",
                "default_value",
                "name"
            ],
            "index_to_string": [
                "tensor",
                "mapping",
                "default_value",
                "name"
            ],
            "LookupInterface": {
                "__init__": [
                    "self",
                    "key_dtype",
                    "value_dtype",
                    "name"
                ],
                "key_dtype": [
                    "self"
                ],
                "value_dtype": [
                    "self"
                ],
                "name": [
                    "self"
                ],
                "init": [
                    "self"
                ],
                "size": [
                    "self",
                    "name"
                ],
                "lookup": [
                    "self",
                    "keys",
                    "name"
                ],
                "check_table_dtypes": [
                    "self",
                    "key_dtype",
                    "value_dtype"
                ]
            },
            "InitializableLookupTableBase": {
                "__init__": [
                    "self",
                    "table_ref",
                    "default_value",
                    "initializer"
                ],
                "table_ref": [
                    "self"
                ],
                "default_value": [
                    "self"
                ],
                "init": [
                    "self"
                ],
                "size": [
                    "self",
                    "name"
                ],
                "lookup": [
                    "self",
                    "keys",
                    "name"
                ]
            },
            "HashTable": {
                "__init__": [
                    "self",
                    "initializer",
                    "default_value",
                    "shared_name",
                    "name"
                ]
            },
            "TableInitializerBase": {
                "__init__": [
                    "self",
                    "key_dtype",
                    "value_dtype"
                ],
                "key_dtype": [
                    "self"
                ],
                "value_dtype": [
                    "self"
                ],
                "initialize": [
                    "self",
                    "table"
                ]
            },
            "KeyValueTensorInitializer": {
                "__init__": [
                    "self",
                    "keys",
                    "values",
                    "key_dtype",
                    "value_dtype",
                    "name"
                ],
                "initialize": [
                    "self",
                    "table"
                ]
            },
            "TextFileIndex": {},
            "TextFileInitializer": {
                "__init__": [
                    "self",
                    "filename",
                    "key_dtype",
                    "key_index",
                    "value_dtype",
                    "value_index",
                    "vocab_size",
                    "delimiter",
                    "name"
                ],
                "initialize": [
                    "self",
                    "table"
                ]
            },
            "TextFileStringTableInitializer": {
                "__init__": [
                    "self",
                    "filename",
                    "key_column_index",
                    "value_column_index",
                    "vocab_size",
                    "delimiter",
                    "name"
                ]
            },
            "TextFileIdTableInitializer": {
                "__init__": [
                    "self",
                    "filename",
                    "key_column_index",
                    "value_column_index",
                    "vocab_size",
                    "delimiter",
                    "name"
                ]
            },
            "HasherSpec": {},
            "StrongHashSpec": {
                "__new__": [
                    "cls",
                    "key"
                ]
            },
            "IdTableWithHashBuckets": {
                "__init__": [
                    "self",
                    "table",
                    "num_oov_buckets",
                    "hasher_spec",
                    "name"
                ],
                "init": [
                    "self"
                ],
                "size": [
                    "self",
                    "name"
                ],
                "_get_string_to_hash_bucket_fn": [
                    "self",
                    "hasher_spec"
                ],
                "lookup": [
                    "self",
                    "keys",
                    "name"
                ]
            },
            "MutableHashTable": {
                "__init__": [
                    "self",
                    "key_dtype",
                    "value_dtype",
                    "default_value",
                    "shared_name",
                    "name",
                    "checkpoint"
                ],
                "size": [
                    "self",
                    "name"
                ],
                "lookup": [
                    "self",
                    "keys",
                    "name"
                ],
                "insert": [
                    "self",
                    "keys",
                    "values",
                    "name"
                ],
                "export": [
                    "self",
                    "name"
                ]
            },
            "MutableDenseHashTable": {
                "__init__": [
                    "self",
                    "key_dtype",
                    "value_dtype",
                    "default_value",
                    "empty_key",
                    "initial_num_buckets",
                    "shared_name",
                    "name",
                    "checkpoint"
                ],
                "size": [
                    "self",
                    "name"
                ],
                "lookup": [
                    "self",
                    "keys",
                    "name"
                ],
                "insert": [
                    "self",
                    "keys",
                    "values",
                    "name"
                ],
                "export": [
                    "self",
                    "name"
                ]
            }
        },
        "tensorflow.contrib.tensorboard": {},
        "tensorflow.contrib.tensorboard.graph_explorer": {},
        "tensorflow.contrib.tensorboard.graph_explorer.proto": {},
        "tensorflow.contrib.tensorboard.graph_explorer.proto.graph_explorer_pb2": {},
        "tensorflow.contrib.tensorboard.plugins": {},
        "tensorflow.contrib.tensorboard.plugins.trace": {},
        "tensorflow.contrib.tensorboard.plugins.trace.trace": {
            "store_trace_info": [
                "output_file_path",
                "graph",
                "ignore_regex_fpaths"
            ],
            "find_multiline_statements": [
                "source"
            ],
            "_add_data_from_tensors": [
                "tensors",
                "info"
            ],
            "_ignore_file_path": [
                "fname",
                "ignore_regex_fpaths"
            ],
            "_count_brackets_braces_parenthesis": [
                "node",
                "line2par"
            ]
        },
        "tensorflow.contrib.tensorboard.plugins.trace.trace_info_pb2": {},
        "tensorflow.contrib.tensorboard.plugins.projector": {
            "visualize_embeddings": [
                "summary_writer",
                "config"
            ]
        },
        "tensorflow.contrib.tensorboard.plugins.projector.projector_config_pb2": {},
        "tensorflow.contrib.training": {},
        "tensorflow.contrib.training.python": {},
        "tensorflow.contrib.training.python.training.bucket_ops": {
            "_validate_bucket": [
                "tensor_list"
            ],
            "bucket": [
                "tensors",
                "which_bucket",
                "batch_size",
                "num_buckets",
                "num_threads",
                "capacity",
                "shapes",
                "dynamic_pad",
                "allow_smaller_final_batch",
                "keep_input",
                "shared_name",
                "name"
            ],
            "bucket_by_sequence_length": [
                "input_length",
                "tensors",
                "batch_size",
                "bucket_boundaries",
                "num_threads",
                "capacity",
                "shapes",
                "dynamic_pad",
                "allow_smaller_final_batch",
                "keep_input",
                "shared_name",
                "name"
            ]
        },
        "tensorflow.contrib.training.python.training.resample": {
            "resample_at_rate": [
                "inputs",
                "rates",
                "scope",
                "seed",
                "back_prop"
            ],
            "weighted_resample": [
                "inputs",
                "weights",
                "overall_rate",
                "scope",
                "mean_decay",
                "seed"
            ]
        },
        "tensorflow.contrib.training.python.training": {},
        "tensorflow.contrib.training.python.training.evaluation": {
            "wait_for_new_checkpoint": [
                "checkpoint_dir",
                "last_checkpoint",
                "seconds_to_sleep",
                "timeout"
            ],
            "checkpoints_iterator": [
                "checkpoint_dir",
                "min_interval_secs",
                "timeout"
            ],
            "get_or_create_eval_step": [],
            "_scaffold_with_init": [
                "scaffold",
                "saver",
                "checkpoint_path"
            ],
            "evaluate_once": [
                "checkpoint_path",
                "master",
                "scaffold",
                "eval_ops",
                "feed_dict",
                "final_ops",
                "final_ops_feed_dict",
                "hooks",
                "config"
            ],
            "evaluate_repeatedly": [
                "checkpoint_dir",
                "master",
                "scaffold",
                "eval_ops",
                "feed_dict",
                "final_ops",
                "final_ops_feed_dict",
                "eval_interval_secs",
                "hooks",
                "config",
                "max_number_of_evaluations",
                "timeout"
            ],
            "StopAfterNEvalsHook": {
                "__init__": [
                    "self",
                    "num_evals",
                    "log_progress"
                ],
                "_set_evals_completed_tensor": [
                    "self",
                    "updated_eval_step"
                ],
                "before_run": [
                    "self",
                    "run_context"
                ],
                "after_run": [
                    "self",
                    "run_context",
                    "run_values"
                ]
            },
            "SummaryAtEndHook": {
                "__init__": [
                    "self",
                    "log_dir",
                    "summary_op",
                    "feed_dict"
                ],
                "begin": [
                    "self"
                ],
                "end": [
                    "self",
                    "session"
                ]
            }
        },
        "tensorflow.contrib.training.python.training.sampling_ops": {
            "rejection_sample": [
                "tensors",
                "accept_prob_fn",
                "batch_size",
                "queue_threads",
                "enqueue_many",
                "prebatch_capacity",
                "prebatch_threads",
                "runtime_checks",
                "name"
            ],
            "stratified_sample": [
                "tensors",
                "labels",
                "target_probs",
                "batch_size",
                "init_probs",
                "enqueue_many",
                "queue_capacity",
                "threads_per_queue",
                "name"
            ],
            "_estimate_data_distribution": [
                "labels",
                "num_classes",
                "smoothing_constant"
            ],
            "_verify_data_inputs": [
                "tensor_list"
            ],
            "_verify_input": [
                "tensor_list",
                "labels",
                "probs_list"
            ],
            "_calculate_acceptance_probabilities": [
                "init_probs",
                "target_probs"
            ]
        },
        "tensorflow.contrib.training.python.training.feeder": {
            "_link_coordinators": [
                "inner_coord",
                "outer_coord",
                "start",
                "wait_time"
            ],
            "Feeder": {
                "__init__": [
                    "self",
                    "dtypes",
                    "shapes",
                    "capacity",
                    "shared_name"
                ],
                "get_fed_tensors": [
                    "self"
                ],
                "get_many_fed_tensors": [
                    "self",
                    "batch_size"
                ],
                "set_fed_tensors": [
                    "self",
                    "tensors"
                ],
                "set_many_fed_tensors": [
                    "self",
                    "tensors"
                ],
                "add_remote_device": [
                    "self",
                    "remote_device"
                ],
                "add_remote_devices": [
                    "self",
                    "devices"
                ],
                "add_remote_replicas": [
                    "self",
                    "job_name",
                    "replica_count",
                    "feeder_task_num",
                    "replicas_per_feeder",
                    "base_device_spec"
                ],
                "run_feeding_forever": [
                    "self",
                    "sess_callback",
                    "outer_coordinator",
                    "tolerator",
                    "start_queue_runners"
                ],
                "wait_until_feeding": [
                    "self",
                    "timeout"
                ],
                "_feed_remote_queues_forever": [
                    "self",
                    "sess_callback",
                    "outer_coordinator",
                    "tolerator"
                ],
                "_add_remote_queue_runner": [
                    "self",
                    "queue",
                    "enq_ops"
                ]
            }
        },
        "tensorflow.contrib.training.python.training.failure_tolerator": {
            "FailureTolerator": {
                "__init__": [
                    "self",
                    "limit",
                    "init_delay",
                    "backoff_factor",
                    "forgive_after_seconds",
                    "handled_exceptions"
                ],
                "_adjusted_now": [
                    "self"
                ],
                "_forgive_old": [
                    "self"
                ],
                "_handle_error": [
                    "self",
                    "e"
                ],
                "forgive": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.training.python.training.sequence_queueing_state_saver": {
            "_check_multiple_of": [
                "value",
                "multiple_of"
            ],
            "_check_rank": [
                "value",
                "expected_rank"
            ],
            "_check_shape": [
                "value",
                "expected_shape"
            ],
            "_check_dimensions": [
                "value",
                "dimensions",
                "expected_sizes",
                "debug_prefix"
            ],
            "_prepare_sequence_inputs": [
                "inputs",
                "states"
            ],
            "batch_sequences_with_states": [
                "input_key",
                "input_sequences",
                "input_context",
                "input_length",
                "initial_states",
                "num_unroll",
                "batch_size",
                "num_threads",
                "capacity",
                "allow_small_batch",
                "pad",
                "name"
            ],
            "_padding": [
                "sequences",
                "num_unroll"
            ],
            "_SequenceInputWrapper": {
                "__init__": [
                    "self",
                    "length",
                    "key",
                    "sequences",
                    "context"
                ],
                "length": [
                    "self"
                ],
                "key": [
                    "self"
                ],
                "sequences": [
                    "self"
                ],
                "context": [
                    "self"
                ]
            },
            "NextQueuedSequenceBatch": {
                "__init__": [
                    "self",
                    "state_saver"
                ],
                "total_length": [
                    "self"
                ],
                "length": [
                    "self"
                ],
                "batch_size": [
                    "self"
                ],
                "insertion_index": [
                    "self"
                ],
                "key": [
                    "self"
                ],
                "next_key": [
                    "self"
                ],
                "sequence": [
                    "self"
                ],
                "sequence_count": [
                    "self"
                ],
                "context": [
                    "self"
                ],
                "sequences": [
                    "self"
                ],
                "state": [
                    "self",
                    "state_name"
                ],
                "save_state": [
                    "self",
                    "state_name",
                    "value",
                    "name"
                ]
            },
            "SequenceQueueingStateSaver": {
                "__init__": [
                    "self",
                    "batch_size",
                    "num_unroll",
                    "input_length",
                    "input_key",
                    "input_sequences",
                    "input_context",
                    "initial_states",
                    "capacity",
                    "allow_small_batch",
                    "name"
                ],
                "name": [
                    "self"
                ],
                "barrier": [
                    "self"
                ],
                "batch_size": [
                    "self"
                ],
                "num_unroll": [
                    "self"
                ],
                "prefetch_op": [
                    "self"
                ],
                "next_batch": [
                    "self"
                ],
                "close": [
                    "self",
                    "cancel_pending_enqueues",
                    "name"
                ],
                "_store_index_maps": [
                    "self",
                    "sequences",
                    "context",
                    "states"
                ],
                "_get_barrier_length_index": [
                    "self"
                ],
                "_get_barrier_total_length_index": [
                    "self"
                ],
                "_get_barrier_next_key_index": [
                    "self"
                ],
                "_get_barrier_sequence_index": [
                    "self"
                ],
                "_get_barrier_sequence_count_index": [
                    "self"
                ],
                "_get_barrier_index": [
                    "self",
                    "index_type",
                    "name"
                ],
                "_create_barrier": [
                    "self"
                ],
                "_create_prefetch_op": [
                    "self"
                ],
                "_prepare_barrier_reads": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.training.python.training.device_setter": {
            "byte_size_load_fn": [
                "op"
            ],
            "GreedyLoadBalancingStrategy": {
                "__init__": [
                    "self",
                    "num_tasks",
                    "load_fn"
                ],
                "__call__": [
                    "self",
                    "op"
                ]
            }
        },
        "tensorflow.contrib.training.python.training.training": {
            "add_gradients_summaries": [
                "grads_and_vars"
            ],
            "clip_gradient_norms": [
                "gradients_to_variables",
                "max_norm"
            ],
            "multiply_gradients": [
                "grads_and_vars",
                "gradient_multipliers"
            ],
            "create_train_op": [
                "total_loss",
                "optimizer",
                "global_step",
                "update_ops",
                "variables_to_train",
                "transform_grads_fn",
                "summarize_gradients",
                "gate_gradients",
                "aggregation_method",
                "colocate_gradients_with_ops"
            ],
            "train": [
                "train_op",
                "logdir",
                "master",
                "is_chief",
                "scaffold",
                "hooks",
                "chief_only_hooks",
                "save_checkpoint_secs",
                "save_summaries_steps",
                "config"
            ]
        },
        "tensorflow.contrib.specs": {},
        "tensorflow.contrib.specs.python.specs_lib": {
            "check_keywords": [
                "spec"
            ],
            "get_positional": [
                "args",
                "kw",
                "kw_overrides"
            ],
            "External": [
                "module_name",
                "function_name"
            ],
            "Import": [
                "statements"
            ],
            "debug": [
                "mode"
            ],
            "Composable": {
                "__or__": [
                    "self",
                    "f"
                ],
                "__add__": [
                    "self",
                    "g"
                ],
                "__mul__": [
                    "self",
                    "g"
                ],
                "__pow__": [
                    "self",
                    "n"
                ]
            },
            "Callable": {
                "__init__": [
                    "self",
                    "f"
                ],
                "funcall": [
                    "self",
                    "x"
                ]
            },
            "Operator": {
                "__init__": [
                    "self",
                    "op"
                ],
                "funcall": [
                    "self",
                    "x"
                ]
            },
            "Function": {
                "__init__": [
                    "self",
                    "f"
                ],
                "__call__": [
                    "self"
                ],
                "funcall": [
                    "self",
                    "x"
                ]
            },
            "Composition": {
                "__init__": [
                    "self",
                    "f",
                    "g"
                ],
                "funcall": [
                    "self",
                    "x"
                ]
            }
        },
        "tensorflow.contrib.specs.python.specs": {
            "eval_params": [
                "params",
                "environment"
            ],
            "eval_spec": [
                "spec",
                "environment"
            ],
            "create_net_fun": [
                "spec",
                "environment"
            ],
            "create_net": [
                "spec",
                "inputs",
                "environment"
            ],
            "LocalImport": {
                "__init__": [
                    "self",
                    "names"
                ],
                "__enter__": [
                    "self"
                ],
                "__exit__": [
                    "self",
                    "some_type",
                    "value",
                    "traceback"
                ]
            }
        },
        "tensorflow.contrib.specs.python.summaries_test": {
            "_rand": [],
            "SummariesTest": {
                "testStructure": [
                    "self"
                ],
                "testStructureFromTensor": [
                    "self"
                ],
                "testPrint": [
                    "self"
                ],
                "testSummary": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.specs.python": {},
        "tensorflow.contrib.specs.python.specs_test": {
            "_rand": [],
            "SpecsTest": {
                "testSimpleConv": [
                    "self"
                ],
                "testUnary": [
                    "self"
                ],
                "testAdd": [
                    "self"
                ],
                "testMpPower": [
                    "self"
                ],
                "testAbbrevPower": [
                    "self"
                ],
                "testAbbrevPower2": [
                    "self"
                ],
                "testConc": [
                    "self"
                ],
                "testImport": [
                    "self"
                ],
                "testLstm2": [
                    "self"
                ],
                "testLstm2to1": [
                    "self"
                ],
                "testLstm2to0": [
                    "self"
                ],
                "testKeywordRestriction": [
                    "self"
                ],
                "testParams": [
                    "self"
                ],
                "DISABLED_testSpecsOps": [
                    "self"
                ],
                "DISABLED_testVar": [
                    "self"
                ],
                "DISABLED_testShared": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.specs.python.params_ops": {
            "Uf": [
                "lo",
                "hi"
            ],
            "Ui": [
                "lo",
                "hi"
            ],
            "Lf": [
                "lo",
                "hi"
            ],
            "Li": [
                "lo",
                "hi"
            ],
            "Nt": [
                "mu",
                "sigma",
                "limit"
            ]
        },
        "tensorflow.contrib.specs.python.summaries": {
            "_truncate_structure": [
                "x"
            ],
            "tf_structure": [
                "x",
                "include_shapes",
                "finished"
            ],
            "tf_print": [
                "x",
                "depth",
                "finished",
                "printer"
            ],
            "tf_num_params": [
                "x"
            ],
            "tf_left_split": [
                "op"
            ],
            "tf_parameter_iter": [
                "x"
            ],
            "_combine_filter": [
                "x"
            ],
            "tf_parameter_summary": [
                "x",
                "printer",
                "combine"
            ],
            "tf_spec_structure": [
                "spec",
                "inputs",
                "input_shape",
                "input_type"
            ],
            "tf_spec_summary": [
                "spec",
                "inputs",
                "input_shape",
                "input_type"
            ],
            "tf_spec_print": [
                "spec",
                "inputs",
                "input_shape",
                "input_type"
            ]
        },
        "tensorflow.contrib.specs.python.specs_ops": {
            "Clstm2": [
                "n"
            ],
            "Dws": [
                "n"
            ],
            "Dwm": [
                "n"
            ],
            "Var": [
                "name"
            ],
            "Idx": {
                "funcall": [
                    "self",
                    "x"
                ]
            },
            "Conc": {
                "__init__": [
                    "self",
                    "dim"
                ],
                "funcall": [
                    "self",
                    "x"
                ]
            },
            "Shared": {
                "__init__": [
                    "self",
                    "subnet",
                    "name",
                    "scope"
                ],
                "funcall": [
                    "self",
                    "x"
                ]
            }
        },
        "tensorflow.contrib.copy_graph": {},
        "tensorflow.contrib.copy_graph.python": {},
        "tensorflow.contrib.copy_graph.python.util": {},
        "tensorflow.contrib.copy_graph.python.util.copy_elements": {
            "copy_variable_to_graph": [
                "org_instance",
                "to_graph",
                "scope"
            ],
            "copy_op_to_graph": [
                "org_instance",
                "to_graph",
                "variables",
                "scope"
            ],
            "get_copied_op": [
                "org_instance",
                "graph",
                "scope"
            ]
        },
        "tensorflow.contrib.nn": {},
        "tensorflow.contrib.nn.python": {},
        "tensorflow.contrib.nn.python.ops.cross_entropy": {
            "deprecated_flipped_softmax_cross_entropy_with_logits": [
                "logits",
                "labels",
                "dim",
                "name"
            ],
            "deprecated_flipped_sparse_softmax_cross_entropy_with_logits": [
                "logits",
                "labels",
                "name"
            ],
            "deprecated_flipped_sigmoid_cross_entropy_with_logits": [
                "logits",
                "targets",
                "name"
            ]
        },
        "tensorflow.contrib.nn.python.ops": {},
        "tensorflow.contrib.graph_editor.reroute": {
            "_check_ts_compatibility": [
                "ts0",
                "ts1"
            ],
            "_reroute_t": [
                "t0",
                "t1",
                "consumers1",
                "can_modify",
                "cannot_modify"
            ],
            "_reroute_ts": [
                "ts0",
                "ts1",
                "mode",
                "can_modify",
                "cannot_modify"
            ],
            "swap_ts": [
                "ts0",
                "ts1",
                "can_modify",
                "cannot_modify"
            ],
            "reroute_ts": [
                "ts0",
                "ts1",
                "can_modify",
                "cannot_modify"
            ],
            "_reroute_sgv_remap": [
                "sgv0",
                "sgv1",
                "mode"
            ],
            "_reroute_sgv_inputs": [
                "sgv0",
                "sgv1",
                "mode"
            ],
            "_reroute_sgv_outputs": [
                "sgv0",
                "sgv1",
                "mode"
            ],
            "_reroute_sgv": [
                "sgv0",
                "sgv1",
                "mode"
            ],
            "swap_inputs": [
                "sgv0",
                "sgv1"
            ],
            "reroute_inputs": [
                "sgv0",
                "sgv1"
            ],
            "swap_outputs": [
                "sgv0",
                "sgv1"
            ],
            "reroute_outputs": [
                "sgv0",
                "sgv1"
            ],
            "swap_ios": [
                "sgv0",
                "sgv1"
            ],
            "reroute_ios": [
                "sgv0",
                "sgv1"
            ],
            "remove_control_inputs": [
                "op",
                "cops"
            ],
            "add_control_inputs": [
                "op",
                "cops"
            ],
            "_RerouteMode": {
                "check": [
                    "cls",
                    "mode"
                ]
            }
        },
        "tensorflow.contrib.graph_editor": {},
        "tensorflow.contrib.graph_editor.transform": {
            "replace_t_with_placeholder_handler": [
                "info",
                "t"
            ],
            "keep_t_if_possible_handler": [
                "info",
                "t"
            ],
            "assign_renamed_collections_handler": [
                "info",
                "elem",
                "elem_"
            ],
            "transform_op_if_inside_handler": [
                "info",
                "op",
                "keep_if_possible"
            ],
            "copy_op_handler": [
                "info",
                "op",
                "copy_shape"
            ],
            "copy": [
                "sgv",
                "dst_graph",
                "dst_scope",
                "src_scope",
                "reuse_dst_scope"
            ],
            "copy_with_input_replacements": [
                "sgv",
                "replacement_ts",
                "dst_graph",
                "dst_scope",
                "src_scope",
                "reuse_dst_scope"
            ],
            "graph_replace": [
                "target_ts",
                "replacement_ts",
                "dst_scope",
                "src_scope",
                "reuse_dst_scope"
            ],
            "TransformerInfo": {
                "__init__": [
                    "self",
                    "info"
                ],
                "_get_transformed_map": [
                    "self",
                    "top"
                ],
                "_transformed_elem": [
                    "self",
                    "original_top",
                    "missing_fn"
                ],
                "_original_elem": [
                    "self",
                    "transformed_top",
                    "missing_fn"
                ],
                "transformed": [
                    "self",
                    "original",
                    "missing_fn"
                ],
                "original": [
                    "self",
                    "transformed",
                    "missing_fn"
                ],
                "__str__": [
                    "self"
                ]
            },
            "_TmpInfo": {
                "__init__": [
                    "self",
                    "sgv",
                    "dst_graph",
                    "dst_scope",
                    "src_scope"
                ],
                "new_name": [
                    "self",
                    "name"
                ]
            },
            "Transformer": {
                "__init__": [
                    "self"
                ],
                "__call__": [
                    "self",
                    "sgv",
                    "dst_graph",
                    "dst_scope",
                    "src_scope",
                    "reuse_dst_scope"
                ],
                "_copy_ops": [
                    "self",
                    "info"
                ],
                "_connect_ops": [
                    "self",
                    "info"
                ],
                "_transform_sgv": [
                    "self",
                    "info",
                    "sgv"
                ],
                "_transformed_t": [
                    "self",
                    "info",
                    "t"
                ]
            }
        },
        "tensorflow.contrib.graph_editor.match": {
            "_make_graph_match": [
                "graph_match"
            ],
            "op_type": [
                "op_types",
                "op"
            ],
            "OpMatcher": {
                "__init__": [
                    "self",
                    "positive_filter"
                ],
                "_finalize_positive_filter": [
                    "self",
                    "elem"
                ],
                "__call__": [
                    "self",
                    "op"
                ],
                "input_ops": [
                    "self"
                ],
                "control_input_ops": [
                    "self"
                ],
                "output_ops": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.graph_editor.subgraph": {
            "_check_within_range": [
                "mapping",
                "n",
                "repetition"
            ],
            "_check_graph": [
                "sgv",
                "graph"
            ],
            "make_view": [],
            "make_view_from_scope": [
                "scope",
                "graph"
            ],
            "SubGraphView": {
                "__init__": [
                    "self",
                    "inside_ops",
                    "passthrough_ts"
                ],
                "__copy__": [
                    "self"
                ],
                "_assign_from": [
                    "self",
                    "other"
                ],
                "copy": [
                    "self"
                ],
                "_remap_default": [
                    "self",
                    "remove_input_map",
                    "remove_output_map"
                ],
                "remap_default": [
                    "self",
                    "remove_input_map",
                    "remove_output_map"
                ],
                "_remap_inputs": [
                    "self",
                    "new_input_indices"
                ],
                "_remap_outputs": [
                    "self",
                    "new_output_indices"
                ],
                "_remap_outputs_make_unique": [
                    "self"
                ],
                "_remap_outputs_to_consumers": [
                    "self"
                ],
                "remap_outputs_make_unique": [
                    "self"
                ],
                "remap_outputs_to_consumers": [
                    "self"
                ],
                "_remove_unused_ops": [
                    "self",
                    "control_inputs"
                ],
                "remove_unused_ops": [
                    "self",
                    "control_inputs"
                ],
                "remap_inputs": [
                    "self",
                    "new_input_indices"
                ],
                "remap_outputs": [
                    "self",
                    "new_output_indices"
                ],
                "remap": [
                    "self",
                    "new_input_indices",
                    "new_output_indices"
                ],
                "find_op_by_name": [
                    "self",
                    "op_name"
                ],
                "__str__": [
                    "self"
                ],
                "graph": [
                    "self"
                ],
                "ops": [
                    "self"
                ],
                "inputs": [
                    "self"
                ],
                "connected_inputs": [
                    "self"
                ],
                "outputs": [
                    "self"
                ],
                "connected_outputs": [
                    "self"
                ],
                "passthroughs": [
                    "self"
                ],
                "__bool__": [
                    "self"
                ],
                "op": [
                    "self",
                    "op_id"
                ],
                "is_passthrough": [
                    "self",
                    "t"
                ],
                "__enter__": [
                    "self"
                ],
                "__exit__": [
                    "self",
                    "exc_type",
                    "exc_value",
                    "traceback"
                ],
                "input_index": [
                    "self",
                    "t"
                ],
                "output_index": [
                    "self",
                    "t"
                ],
                "consumers": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.graph_editor.edit": {
            "detach_control_inputs": [
                "sgv"
            ],
            "detach_control_outputs": [
                "sgv",
                "control_outputs"
            ],
            "detach_inputs": [
                "sgv",
                "control_inputs"
            ],
            "detach_outputs": [
                "sgv",
                "control_outputs"
            ],
            "detach": [
                "sgv",
                "control_inputs",
                "control_outputs",
                "control_ios"
            ],
            "connect": [
                "sgv0",
                "sgv1",
                "disconnect_first"
            ],
            "bypass": [
                "sgv"
            ]
        },
        "tensorflow.contrib.graph_editor.util": {
            "concatenate_unique": [
                "la",
                "lb"
            ],
            "is_iterable": [
                "obj"
            ],
            "flatten_tree": [
                "tree",
                "leaves"
            ],
            "transform_tree": [
                "tree",
                "fn",
                "iterable_type"
            ],
            "check_graphs": [],
            "get_unique_graph": [
                "tops",
                "check_types",
                "none_if_empty"
            ],
            "make_list_of_op": [
                "ops",
                "check_graph",
                "allow_graph",
                "ignore_ts"
            ],
            "get_tensors": [
                "graph"
            ],
            "make_list_of_t": [
                "ts",
                "check_graph",
                "allow_graph",
                "ignore_ops"
            ],
            "get_generating_ops": [
                "ts"
            ],
            "get_consuming_ops": [
                "ts"
            ],
            "scope_finalize": [
                "scope"
            ],
            "scope_dirname": [
                "scope"
            ],
            "scope_basename": [
                "scope"
            ],
            "placeholder_name": [
                "t",
                "scope"
            ],
            "make_placeholder_from_tensor": [
                "t",
                "scope"
            ],
            "make_placeholder_from_dtype_and_shape": [
                "dtype",
                "shape",
                "scope"
            ],
            "get_predefined_collection_names": [],
            "find_corresponding_elem": [
                "target",
                "dst_graph",
                "dst_scope",
                "src_scope"
            ],
            "find_corresponding": [
                "targets",
                "dst_graph",
                "dst_scope",
                "src_scope"
            ],
            "ListView": {
                "__init__": [
                    "self",
                    "list_"
                ],
                "__iter__": [
                    "self"
                ],
                "__len__": [
                    "self"
                ],
                "__bool__": [
                    "self"
                ],
                "__getitem__": [
                    "self",
                    "i"
                ],
                "__add__": [
                    "self",
                    "other"
                ]
            },
            "ControlOutputs": {
                "__init__": [
                    "self",
                    "graph"
                ],
                "update": [
                    "self"
                ],
                "_build": [
                    "self"
                ],
                "get_all": [
                    "self"
                ],
                "get": [
                    "self",
                    "op"
                ],
                "graph": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.graph_editor.select": {
            "can_be_regex": [
                "obj"
            ],
            "make_regex": [
                "obj"
            ],
            "_get_input_ts": [
                "ops"
            ],
            "_get_output_ts": [
                "ops"
            ],
            "filter_ts": [
                "ops",
                "positive_filter"
            ],
            "filter_ts_from_regex": [
                "ops",
                "regex"
            ],
            "filter_ops": [
                "ops",
                "positive_filter"
            ],
            "filter_ops_from_regex": [
                "ops",
                "regex"
            ],
            "get_name_scope_ops": [
                "ops",
                "scope"
            ],
            "check_cios": [
                "control_inputs",
                "control_outputs",
                "control_ios"
            ],
            "get_ops_ios": [
                "ops",
                "control_inputs",
                "control_outputs",
                "control_ios"
            ],
            "compute_boundary_ts": [
                "ops"
            ],
            "get_within_boundary_ops": [
                "ops",
                "seed_ops",
                "boundary_ops",
                "inclusive",
                "control_inputs",
                "control_outputs",
                "control_ios"
            ],
            "get_forward_walk_ops": [
                "seed_ops",
                "inclusive",
                "within_ops",
                "stop_at_ts",
                "control_outputs"
            ],
            "get_backward_walk_ops": [
                "seed_ops",
                "inclusive",
                "within_ops",
                "stop_at_ts",
                "control_inputs"
            ],
            "get_walks_intersection_ops": [
                "forward_seed_ops",
                "backward_seed_ops",
                "forward_inclusive",
                "backward_inclusive",
                "within_ops",
                "control_inputs",
                "control_outputs",
                "control_ios"
            ],
            "get_walks_union_ops": [
                "forward_seed_ops",
                "backward_seed_ops",
                "forward_inclusive",
                "backward_inclusive",
                "within_ops",
                "control_inputs",
                "control_outputs",
                "control_ios"
            ],
            "select_ops": [],
            "select_ts": [],
            "select_ops_and_ts": []
        },
        "tensorflow.contrib.bayesflow": {},
        "tensorflow.contrib.bayesflow.python": {},
        "tensorflow.contrib.bayesflow.python.ops.stochastic_tensor": {
            "value_type": [
                "dist_value_type"
            ],
            "get_current_value_type": [],
            "BaseStochasticTensor": {
                "__init__": [
                    "self"
                ],
                "name": [
                    "self"
                ],
                "dtype": [
                    "self"
                ],
                "graph": [
                    "self"
                ],
                "value": [
                    "self",
                    "name"
                ],
                "loss": [
                    "self",
                    "sample_loss"
                ],
                "_tensor_conversion_function": [
                    "v",
                    "dtype",
                    "name",
                    "as_ref"
                ]
            },
            "_StochasticValueType": {
                "pushed_above": [
                    "self",
                    "unused_value_type"
                ],
                "popped_above": [
                    "self",
                    "unused_value_type"
                ],
                "declare_inputs": [
                    "self",
                    "unused_stochastic_tensor",
                    "unused_inputs_dict"
                ],
                "stop_gradient": [
                    "self"
                ]
            },
            "MeanValue": {
                "__init__": [
                    "self",
                    "stop_gradient"
                ],
                "stop_gradient": [
                    "self"
                ]
            },
            "SampleValue": {
                "__init__": [
                    "self",
                    "shape",
                    "stop_gradient"
                ],
                "shape": [
                    "self"
                ],
                "stop_gradient": [
                    "self"
                ]
            },
            "NoValueTypeSetError": {},
            "StochasticTensor": {
                "__init__": [
                    "self",
                    "dist",
                    "name",
                    "dist_value_type",
                    "loss_fn"
                ],
                "value_type": [
                    "self"
                ],
                "distribution": [
                    "self"
                ],
                "_create_value": [
                    "self"
                ],
                "name": [
                    "self"
                ],
                "graph": [
                    "self"
                ],
                "dtype": [
                    "self"
                ],
                "entropy": [
                    "self",
                    "name"
                ],
                "mean": [
                    "self",
                    "name"
                ],
                "value": [
                    "self",
                    "name"
                ],
                "loss": [
                    "self",
                    "final_loss",
                    "name"
                ]
            },
            "ObservedStochasticTensor": {
                "__init__": [
                    "self",
                    "dist",
                    "value",
                    "name"
                ],
                "loss": [
                    "self",
                    "final_loss",
                    "name"
                ]
            }
        },
        "tensorflow.contrib.bayesflow.python.ops.stochastic_gradient_estimators": {
            "score_function": [
                "stochastic_tensor",
                "value",
                "loss",
                "baseline",
                "name"
            ],
            "get_score_function_with_advantage": [
                "advantage_fn",
                "name"
            ],
            "get_score_function_with_constant_baseline": [
                "baseline",
                "name"
            ],
            "get_score_function_with_baseline": [
                "baseline_fn",
                "name"
            ],
            "get_mean_baseline": [
                "ema_decay",
                "name"
            ],
            "get_vimco_advantage_fn": [
                "have_log_loss"
            ],
            "_logexpm1": [
                "x"
            ]
        },
        "tensorflow.contrib.bayesflow.python.ops": {},
        "tensorflow.contrib.bayesflow.python.ops.entropy": {
            "elbo_ratio": [
                "log_p",
                "q",
                "z",
                "n",
                "seed",
                "form",
                "name"
            ],
            "entropy_shannon": [
                "p",
                "z",
                "n",
                "seed",
                "form",
                "name"
            ],
            "renyi_ratio": [
                "log_p",
                "q",
                "alpha",
                "z",
                "n",
                "seed",
                "name"
            ],
            "renyi_alpha": [
                "step",
                "decay_time",
                "alpha_min",
                "alpha_max",
                "name"
            ]
        },
        "tensorflow.contrib.bayesflow.python.ops.special_math": {
            "ndtr": [
                "x",
                "name"
            ],
            "_ndtr": [
                "x"
            ],
            "log_ndtr": [
                "x",
                "series_order",
                "name"
            ],
            "_log_ndtr_lower": [
                "x",
                "series_order"
            ],
            "_log_ndtr_asymptotic_series": [
                "x",
                "series_order"
            ],
            "_double_factorial": [
                "n"
            ]
        },
        "tensorflow.contrib.bayesflow.python.ops.variational_inference": {
            "register_prior": [
                "variational",
                "prior"
            ],
            "elbo": [
                "log_likelihood",
                "variational_with_prior",
                "keep_batch_dim",
                "form",
                "name"
            ],
            "elbo_with_log_joint": [
                "log_joint",
                "variational",
                "keep_batch_dim",
                "form",
                "name"
            ],
            "_elbo": [
                "form",
                "log_likelihood",
                "log_joint",
                "variational_with_prior",
                "keep_batch_dim"
            ],
            "_find_variational_and_priors": [
                "model",
                "variational_with_prior",
                "require_prior"
            ],
            "_ELBOForm": {},
            "ELBOForms": {
                "check_form": [
                    "form"
                ]
            }
        },
        "tensorflow.contrib.bayesflow.python.ops.monte_carlo": {
            "expectation_importance_sampler": [
                "f",
                "log_p",
                "sampling_dist_q",
                "z",
                "n",
                "seed",
                "name"
            ],
            "expectation_importance_sampler_logspace": [
                "log_f",
                "log_p",
                "sampling_dist_q",
                "z",
                "n",
                "seed",
                "name"
            ],
            "_logspace_mean": [
                "log_values"
            ],
            "expectation": [
                "f",
                "p",
                "z",
                "n",
                "seed",
                "name"
            ],
            "_sample_mean": [
                "values"
            ],
            "_sample_max": [
                "values"
            ],
            "_get_samples": [
                "dist",
                "z",
                "n",
                "seed"
            ]
        },
        "tensorflow.contrib.bayesflow.python.ops.stochastic_graph": {
            "_upstream_stochastic_nodes": [
                "tensors"
            ],
            "_stochastic_dependencies_map": [
                "fixed_losses",
                "stochastic_tensors"
            ],
            "surrogate_loss": [
                "sample_losses",
                "stochastic_tensors",
                "name"
            ],
            "_add_n_or_sum": [
                "terms"
            ]
        },
        "tensorflow.contrib.bayesflow.python.ops.stochastic_variables": {
            "get_stochastic_variable": [
                "getter",
                "name",
                "shape",
                "dist_cls",
                "dist_kwargs",
                "param_initializers",
                "prior"
            ],
            "make_stochastic_variable_getter": [
                "dist_cls",
                "dist_kwargs",
                "param_initializers",
                "prior"
            ]
        },
        "tensorflow.contrib.ndlstm": {},
        "tensorflow.contrib.ndlstm.python.misc_test": {
            "_rand": [],
            "LstmMiscTest": {
                "testPixelsAsVectorDims": [
                    "self"
                ],
                "testPoolAsVectorDims": [
                    "self"
                ],
                "testOneHotPlanes": [
                    "self"
                ],
                "testOneHotMask": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.ndlstm.python.lstm2d_test": {
            "_rand": [],
            "Lstm2DTest": {
                "testImagesToSequenceDims": [
                    "self"
                ],
                "testSequenceToImagesDims": [
                    "self"
                ],
                "testImagesAndSequenceDims": [
                    "self"
                ],
                "testSeparableLstmDims": [
                    "self"
                ],
                "testReduceToSequenceDims": [
                    "self"
                ],
                "testReduceToFinalDims": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.ndlstm.python": {},
        "tensorflow.contrib.ndlstm.python.lstm1d_test": {
            "_rand": [],
            "Lstm1DTest": {
                "testSequenceToSequenceDims": [
                    "self"
                ],
                "testSequenceToSequenceGradient": [
                    "self"
                ],
                "testSequenceToSequenceGradientReverse": [
                    "self"
                ],
                "testSequenceToFinalDims": [
                    "self"
                ],
                "testSequenceSoftmaxDims": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.ndlstm.python.lstm1d": {
            "_shape": [
                "tensor"
            ],
            "ndlstm_base_unrolled": [
                "inputs",
                "noutput",
                "scope",
                "reverse"
            ],
            "ndlstm_base_dynamic": [
                "inputs",
                "noutput",
                "scope",
                "reverse"
            ],
            "ndlstm_base": [
                "inputs",
                "noutput",
                "scope",
                "reverse",
                "dynamic"
            ],
            "sequence_to_final": [
                "inputs",
                "noutput",
                "scope",
                "name",
                "reverse"
            ],
            "sequence_softmax": [
                "inputs",
                "noutput",
                "scope",
                "name",
                "linear_name"
            ]
        },
        "tensorflow.contrib.ndlstm.python.misc": {
            "_shape": [
                "tensor"
            ],
            "pixels_as_vector": [
                "images",
                "scope"
            ],
            "pool_as_vector": [
                "images",
                "scope"
            ],
            "one_hot_planes": [
                "labels",
                "num_classes",
                "scope"
            ],
            "one_hot_mask": [
                "labels",
                "num_classes",
                "scope"
            ]
        },
        "tensorflow.contrib.ndlstm.python.lstm2d": {
            "_shape": [
                "tensor"
            ],
            "images_to_sequence": [
                "tensor"
            ],
            "sequence_to_images": [
                "tensor",
                "num_image_batches"
            ],
            "horizontal_lstm": [
                "images",
                "num_filters_out",
                "scope"
            ],
            "separable_lstm": [
                "images",
                "num_filters_out",
                "nhidden",
                "scope"
            ],
            "reduce_to_sequence": [
                "images",
                "num_filters_out",
                "scope"
            ],
            "reduce_to_final": [
                "images",
                "num_filters_out",
                "nhidden",
                "scope"
            ]
        },
        "tensorflow.contrib.cmake.setup": {
            "find_files": [
                "pattern",
                "root"
            ],
            "BinaryDistribution": {
                "is_pure": [
                    "self"
                ]
            },
            "InstallCommand": {
                "finalize_options": [
                    "self"
                ]
            },
            "InstallHeaders": {
                "initialize_options": [
                    "self"
                ],
                "finalize_options": [
                    "self"
                ],
                "mkdir_and_copy_file": [
                    "self",
                    "header"
                ],
                "run": [
                    "self"
                ],
                "get_inputs": [
                    "self"
                ],
                "get_outputs": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.cmake": {},
        "tensorflow.contrib.nccl": {},
        "tensorflow.contrib.nccl.ops": {},
        "tensorflow.contrib.nccl.ops.gen_nccl_ops": {
            "nccl_all_reduce": [
                "input",
                "reduction",
                "num_devices",
                "shared_name",
                "name"
            ],
            "nccl_broadcast_recv": [
                "shape",
                "T",
                "num_devices",
                "shared_name",
                "name"
            ],
            "nccl_broadcast_send": [
                "input",
                "num_devices",
                "shared_name",
                "name"
            ],
            "_InitOpDefLibrary": []
        },
        "tensorflow.contrib.nccl.python": {},
        "tensorflow.contrib.nccl.python.ops": {},
        "tensorflow.contrib.nccl.python.ops.nccl_ops": {
            "all_sum": [
                "tensors"
            ],
            "all_prod": [
                "tensors"
            ],
            "all_min": [
                "tensors"
            ],
            "all_max": [
                "tensors"
            ],
            "broadcast": [
                "src_tensor",
                "dst_devices"
            ],
            "_apply_all_reduce": [
                "reduction_op",
                "tensors"
            ],
            "_get_shared_name": []
        },
        "tensorflow.contrib.distributions": {},
        "tensorflow.contrib.distributions.python": {},
        "tensorflow.contrib.distributions.python.ops.operator_test_util": {
            "OperatorPDDerivedClassTest": {
                "setUp": [
                    "self"
                ],
                "_compare_results": [
                    "self",
                    "expected",
                    "actual",
                    "static_shapes",
                    "atol"
                ],
                "_build_operator_and_mat": [
                    "self",
                    "batch_shape",
                    "k",
                    "dtype"
                ],
                "testToDense": [
                    "self"
                ],
                "testSqrtToDense": [
                    "self"
                ],
                "testDeterminants": [
                    "self"
                ],
                "testMatmul": [
                    "self"
                ],
                "testSqrtMatmul": [
                    "self"
                ],
                "testSolve": [
                    "self"
                ],
                "testSqrtSolve": [
                    "self"
                ],
                "testAddToTensor": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.distributions.python.ops.operator_pd_vdvt_update": {
            "OperatorPDSqrtVDVTUpdate": {
                "__init__": [
                    "self",
                    "operator",
                    "v",
                    "diag",
                    "verify_pd",
                    "verify_shapes",
                    "name"
                ],
                "_get_identity_operator": [
                    "self",
                    "v"
                ],
                "_check_types": [
                    "self",
                    "operator",
                    "v",
                    "diag"
                ],
                "_check_shapes_static": [
                    "self",
                    "operator",
                    "v",
                    "diag"
                ],
                "_check_shapes_dynamic": [
                    "self",
                    "operator",
                    "v",
                    "diag"
                ],
                "name": [
                    "self"
                ],
                "verify_pd": [
                    "self"
                ],
                "dtype": [
                    "self"
                ],
                "_inv_quadratic_form_on_vectors": [
                    "self",
                    "x"
                ],
                "inputs": [
                    "self"
                ],
                "get_shape": [
                    "self"
                ],
                "_shape": [
                    "self"
                ],
                "_det": [
                    "self"
                ],
                "_batch_log_det": [
                    "self"
                ],
                "_log_det": [
                    "self"
                ],
                "_sqrt_log_det": [
                    "self"
                ],
                "_batch_sqrt_log_det": [
                    "self"
                ],
                "_chol_capacitance": [
                    "self",
                    "batch_mode"
                ],
                "_sqrt_log_det_core": [
                    "self",
                    "diag_chol_c"
                ],
                "_batch_matmul": [
                    "self",
                    "x",
                    "transpose_x"
                ],
                "_matmul": [
                    "self",
                    "x",
                    "transpose_x"
                ],
                "_batch_sqrt_matmul": [
                    "self",
                    "x",
                    "transpose_x"
                ],
                "_sqrt_matmul": [
                    "self",
                    "x",
                    "transpose_x"
                ],
                "_solve": [
                    "self",
                    "rhs"
                ],
                "_batch_solve": [
                    "self",
                    "rhs"
                ],
                "_sqrt_solve": [
                    "self",
                    "rhs"
                ],
                "_batch_sqrt_solve": [
                    "self",
                    "rhs"
                ],
                "_to_dense": [
                    "self"
                ],
                "_sqrt_to_dense": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.distributions.python.ops.quantized_distribution": {
            "_logsum_expbig_minus_expsmall": [
                "big",
                "small"
            ],
            "QuantizedDistribution": {
                "__init__": [
                    "self",
                    "distribution",
                    "lower_cutoff",
                    "upper_cutoff",
                    "validate_args",
                    "name"
                ],
                "_batch_shape": [
                    "self"
                ],
                "_get_batch_shape": [
                    "self"
                ],
                "_event_shape": [
                    "self"
                ],
                "_get_event_shape": [
                    "self"
                ],
                "_sample_n": [
                    "self",
                    "n",
                    "seed"
                ],
                "_log_prob": [
                    "self",
                    "y"
                ],
                "_log_prob_with_logcdf": [
                    "self",
                    "y"
                ],
                "_log_prob_with_logsf_and_logcdf": [
                    "self",
                    "y"
                ],
                "_prob": [
                    "self",
                    "y"
                ],
                "_prob_with_cdf": [
                    "self",
                    "y"
                ],
                "_prob_with_sf_and_cdf": [
                    "self",
                    "y"
                ],
                "_log_cdf": [
                    "self",
                    "y"
                ],
                "_cdf": [
                    "self",
                    "y"
                ],
                "_log_survival_function": [
                    "self",
                    "y"
                ],
                "_survival_function": [
                    "self",
                    "y"
                ],
                "_check_integer": [
                    "self",
                    "value"
                ],
                "distribution": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.distributions.python.ops.bijector": {
            "_as_tensor": [
                "x",
                "name"
            ],
            "_Mapping": {
                "__new__": [
                    "cls",
                    "x",
                    "y",
                    "ildj",
                    "condition_kwargs"
                ],
                "x_key": [
                    "self"
                ],
                "y_key": [
                    "self"
                ],
                "merge": [
                    "self",
                    "x",
                    "y",
                    "ildj",
                    "condition_kwargs",
                    "mapping"
                ],
                "_merge": [
                    "self",
                    "old",
                    "new"
                ],
                "_deep_tuple": [
                    "self",
                    "x"
                ]
            },
            "Bijector": {
                "__init__": [
                    "self",
                    "batch_ndims",
                    "event_ndims",
                    "graph_parents",
                    "is_constant_jacobian",
                    "validate_args",
                    "dtype",
                    "name"
                ],
                "shaper": [
                    "self"
                ],
                "graph_parents": [
                    "self"
                ],
                "is_constant_jacobian": [
                    "self"
                ],
                "validate_args": [
                    "self"
                ],
                "dtype": [
                    "self"
                ],
                "name": [
                    "self"
                ],
                "_forward_event_shape": [
                    "self",
                    "input_shape"
                ],
                "forward_event_shape": [
                    "self",
                    "input_shape",
                    "name"
                ],
                "_get_forward_event_shape": [
                    "self",
                    "input_shape"
                ],
                "get_forward_event_shape": [
                    "self",
                    "input_shape"
                ],
                "_inverse_event_shape": [
                    "self",
                    "output_shape"
                ],
                "inverse_event_shape": [
                    "self",
                    "output_shape",
                    "name"
                ],
                "_get_inverse_event_shape": [
                    "self",
                    "output_shape"
                ],
                "get_inverse_event_shape": [
                    "self",
                    "output_shape"
                ],
                "_forward": [
                    "self",
                    "x"
                ],
                "forward": [
                    "self",
                    "x",
                    "name"
                ],
                "_inverse": [
                    "self",
                    "y"
                ],
                "inverse": [
                    "self",
                    "y",
                    "name"
                ],
                "_inverse_log_det_jacobian": [
                    "self",
                    "y"
                ],
                "inverse_log_det_jacobian": [
                    "self",
                    "y",
                    "name"
                ],
                "_inverse_and_inverse_log_det_jacobian": [
                    "self",
                    "y"
                ],
                "inverse_and_inverse_log_det_jacobian": [
                    "self",
                    "y",
                    "name"
                ],
                "_forward_log_det_jacobian": [
                    "self",
                    "x"
                ],
                "forward_log_det_jacobian": [
                    "self",
                    "x",
                    "name"
                ],
                "_name_scope": [
                    "self",
                    "name",
                    "values"
                ],
                "_maybe_assert_dtype": [
                    "self",
                    "x"
                ],
                "_cache": [
                    "self",
                    "mapping"
                ],
                "_lookup": [
                    "self",
                    "x",
                    "y",
                    "condition_kwargs"
                ]
            },
            "Inline": {
                "__init__": [
                    "self",
                    "forward_fn",
                    "inverse_fn",
                    "inverse_log_det_jacobian_fn",
                    "forward_log_det_jacobian_fn",
                    "get_forward_event_shape_fn",
                    "forward_event_shape_fn",
                    "get_inverse_event_shape_fn",
                    "inverse_event_shape_fn",
                    "is_constant_jacobian",
                    "validate_args",
                    "name"
                ],
                "_get_forward_event_shape": [
                    "self",
                    "input_shape"
                ],
                "_forward_event_shape": [
                    "self",
                    "input_shape"
                ],
                "_get_inverse_event_shape": [
                    "self",
                    "output_shape"
                ],
                "_inverse_event_shape": [
                    "self",
                    "output_shape"
                ],
                "_forward": [
                    "self",
                    "x"
                ],
                "_inverse": [
                    "self",
                    "y"
                ],
                "_inverse_log_det_jacobian": [
                    "self",
                    "y"
                ],
                "_forward_log_det_jacobian": [
                    "self",
                    "y"
                ]
            },
            "Invert": {
                "__init__": [
                    "self",
                    "bijector",
                    "validate_args",
                    "name"
                ],
                "_get_forward_event_shape": [
                    "self",
                    "input_shape"
                ],
                "_forward_event_shape": [
                    "self",
                    "input_shape"
                ],
                "_get_inverse_event_shape": [
                    "self",
                    "output_shape"
                ],
                "_inverse_event_shape": [
                    "self",
                    "output_shape"
                ],
                "bijector": [
                    "self"
                ],
                "_forward": [
                    "self",
                    "x"
                ],
                "_inverse_and_inverse_log_det_jacobian": [
                    "self",
                    "y"
                ],
                "_forward_log_det_jacobian": [
                    "self",
                    "x"
                ]
            },
            "Chain": {
                "__init__": [
                    "self",
                    "bijectors",
                    "validate_args",
                    "name"
                ],
                "bijectors": [
                    "self"
                ],
                "_shape_helper": [
                    "self",
                    "func_name",
                    "input_shape",
                    "reverse"
                ],
                "_get_forward_event_shape": [
                    "self",
                    "input_shape"
                ],
                "_forward_event_shape": [
                    "self",
                    "input_shape"
                ],
                "_get_inverse_event_shape": [
                    "self",
                    "output_shape"
                ],
                "_inverse_event_shape": [
                    "self",
                    "output_shape"
                ],
                "_forward": [
                    "self",
                    "x"
                ],
                "_inverse_and_inverse_log_det_jacobian": [
                    "self",
                    "y"
                ],
                "_forward_log_det_jacobian": [
                    "self",
                    "x"
                ]
            },
            "Identity": {
                "__init__": [
                    "self",
                    "validate_args",
                    "name"
                ],
                "_forward": [
                    "self",
                    "x"
                ],
                "_inverse_and_inverse_log_det_jacobian": [
                    "self",
                    "y"
                ],
                "_forward_log_det_jacobian": [
                    "self",
                    "x"
                ]
            },
            "PowerTransform": {
                "__init__": [
                    "self",
                    "power",
                    "event_ndims",
                    "validate_args",
                    "name"
                ],
                "power": [
                    "self"
                ],
                "_forward": [
                    "self",
                    "x"
                ],
                "_inverse_and_inverse_log_det_jacobian": [
                    "self",
                    "y"
                ],
                "_forward_log_det_jacobian": [
                    "self",
                    "x"
                ],
                "_maybe_assert_valid_x": [
                    "self",
                    "x"
                ],
                "_maybe_assert_valid_y": [
                    "self",
                    "y"
                ]
            },
            "Exp": {
                "__init__": [
                    "self",
                    "event_ndims",
                    "validate_args",
                    "name"
                ]
            },
            "_TriLPlusVDVTLightweightOperatorPD": {
                "__init__": [
                    "self",
                    "tril",
                    "v",
                    "diag",
                    "validate_args"
                ],
                "inputs": [
                    "self"
                ],
                "dtype": [
                    "self"
                ],
                "validate_args": [
                    "self"
                ],
                "rank": [
                    "self"
                ],
                "sqrt_matmul": [
                    "self",
                    "x"
                ],
                "sqrt_solve": [
                    "self",
                    "x"
                ],
                "sqrt_log_abs_det": [
                    "self"
                ],
                "_woodbury_sandwiched_term": [
                    "self"
                ]
            },
            "Affine": {
                "__init__": [
                    "self",
                    "shift",
                    "scale_identity_multiplier",
                    "scale_diag",
                    "scale_tril",
                    "scale_perturb_factor",
                    "scale_perturb_diag",
                    "event_ndims",
                    "validate_args",
                    "name"
                ],
                "_create_scale_operator": [
                    "self",
                    "identity_multiplier",
                    "diag",
                    "tril",
                    "perturb_diag",
                    "perturb_factor",
                    "event_ndims",
                    "validate_args"
                ],
                "_maybe_validate_identity_multiplier": [
                    "self",
                    "identity_multiplier",
                    "validate_args"
                ],
                "_preprocess_tril": [
                    "self",
                    "identity_multiplier",
                    "diag",
                    "tril",
                    "event_ndims"
                ],
                "_preprocess_diag": [
                    "self",
                    "identity_multiplier",
                    "diag",
                    "event_ndims"
                ],
                "_process_matrix": [
                    "self",
                    "matrix",
                    "min_rank",
                    "event_ndims"
                ],
                "_infer_batch_ndims": [
                    "self"
                ],
                "shift": [
                    "self"
                ],
                "scale": [
                    "self"
                ],
                "_forward": [
                    "self",
                    "x"
                ],
                "_inverse": [
                    "self",
                    "y"
                ],
                "_inverse_log_det_jacobian": [
                    "self",
                    "y"
                ],
                "_forward_log_det_jacobian": [
                    "self",
                    "x"
                ]
            },
            "AffineLinearOperator": {
                "__init__": [
                    "self",
                    "shift",
                    "scale",
                    "event_ndims",
                    "validate_args",
                    "name"
                ],
                "shift": [
                    "self"
                ],
                "scale": [
                    "self"
                ],
                "_forward": [
                    "self",
                    "x"
                ],
                "_inverse": [
                    "self",
                    "y"
                ],
                "_inverse_log_det_jacobian": [
                    "self",
                    "y"
                ],
                "_forward_log_det_jacobian": [
                    "self",
                    "x"
                ]
            },
            "Softplus": {
                "__init__": [
                    "self",
                    "event_ndims",
                    "validate_args",
                    "name"
                ],
                "_forward": [
                    "self",
                    "x"
                ],
                "_inverse_and_inverse_log_det_jacobian": [
                    "self",
                    "y"
                ],
                "_forward_log_det_jacobian": [
                    "self",
                    "x"
                ]
            },
            "SoftmaxCentered": {
                "__init__": [
                    "self",
                    "event_ndims",
                    "validate_args",
                    "name"
                ],
                "_get_forward_event_shape": [
                    "self",
                    "input_shape"
                ],
                "_forward_event_shape": [
                    "self",
                    "input_shape"
                ],
                "_get_inverse_event_shape": [
                    "self",
                    "output_shape"
                ],
                "_inverse_event_shape": [
                    "self",
                    "output_shape"
                ],
                "_forward": [
                    "self",
                    "x"
                ],
                "_inverse": [
                    "self",
                    "y"
                ],
                "_inverse_log_det_jacobian": [
                    "self",
                    "y"
                ],
                "_forward_log_det_jacobian": [
                    "self",
                    "x"
                ]
            },
            "SigmoidCentered": {
                "__init__": [
                    "self",
                    "validate_args",
                    "name"
                ]
            },
            "CholeskyOuterProduct": {
                "__init__": [
                    "self",
                    "event_ndims",
                    "validate_args",
                    "name"
                ],
                "_forward": [
                    "self",
                    "x"
                ],
                "_inverse_and_inverse_log_det_jacobian": [
                    "self",
                    "y"
                ],
                "_forward_log_det_jacobian": [
                    "self",
                    "x"
                ]
            }
        },
        "tensorflow.contrib.distributions.python.ops.multinomial": {
            "Multinomial": {
                "__init__": [
                    "self",
                    "n",
                    "logits",
                    "p",
                    "validate_args",
                    "allow_nan_stats",
                    "name"
                ],
                "n": [
                    "self"
                ],
                "logits": [
                    "self"
                ],
                "p": [
                    "self"
                ],
                "_batch_shape": [
                    "self"
                ],
                "_get_batch_shape": [
                    "self"
                ],
                "_event_shape": [
                    "self"
                ],
                "_get_event_shape": [
                    "self"
                ],
                "_sample_n": [
                    "self",
                    "n",
                    "seed"
                ],
                "_log_prob": [
                    "self",
                    "counts"
                ],
                "_prob": [
                    "self",
                    "counts"
                ],
                "_mean": [
                    "self"
                ],
                "_variance": [
                    "self"
                ],
                "_assert_valid_sample": [
                    "self",
                    "counts"
                ]
            }
        },
        "tensorflow.contrib.distributions.python.ops.mixture": {
            "Mixture": {
                "__init__": [
                    "self",
                    "cat",
                    "components",
                    "validate_args",
                    "allow_nan_stats",
                    "name"
                ],
                "cat": [
                    "self"
                ],
                "components": [
                    "self"
                ],
                "num_components": [
                    "self"
                ],
                "_batch_shape": [
                    "self"
                ],
                "_get_batch_shape": [
                    "self"
                ],
                "_event_shape": [
                    "self"
                ],
                "_get_event_shape": [
                    "self"
                ],
                "_mean": [
                    "self"
                ],
                "_log_prob": [
                    "self",
                    "x"
                ],
                "_prob": [
                    "self",
                    "x"
                ],
                "_sample_n": [
                    "self",
                    "n",
                    "seed"
                ],
                "entropy_lower_bound": [
                    "self",
                    "name"
                ],
                "_cat_probs": [
                    "self",
                    "log_probs"
                ]
            }
        },
        "tensorflow.contrib.distributions.python.ops.shape": {
            "_DistributionShape": {
                "__init__": [
                    "self",
                    "batch_ndims",
                    "event_ndims",
                    "validate_args",
                    "name"
                ],
                "name": [
                    "self"
                ],
                "batch_ndims": [
                    "self"
                ],
                "event_ndims": [
                    "self"
                ],
                "validate_args": [
                    "self"
                ],
                "get_ndims": [
                    "self",
                    "x",
                    "name"
                ],
                "get_sample_ndims": [
                    "self",
                    "x",
                    "name"
                ],
                "get_dims": [
                    "self",
                    "x",
                    "name"
                ],
                "get_shape": [
                    "self",
                    "x",
                    "name"
                ],
                "make_batch_of_event_sample_matrices": [
                    "self",
                    "x",
                    "expand_batch_dim",
                    "name"
                ],
                "undo_make_batch_of_event_sample_matrices": [
                    "self",
                    "x",
                    "sample_shape",
                    "expand_batch_dim",
                    "name"
                ],
                "_name_scope": [
                    "self",
                    "name",
                    "values"
                ],
                "_is_all_constant_helper": [
                    "self"
                ],
                "_assert_non_negative_int32_scalar": [
                    "self",
                    "x"
                ],
                "_introspect_ndims": [
                    "self",
                    "ndims"
                ]
            }
        },
        "tensorflow.contrib.distributions.python.ops.chi2": {
            "Chi2": {
                "__init__": [
                    "self",
                    "df",
                    "validate_args",
                    "allow_nan_stats",
                    "name"
                ],
                "_param_shapes": [
                    "sample_shape"
                ],
                "df": [
                    "self"
                ]
            },
            "Chi2WithAbsDf": {
                "__init__": [
                    "self",
                    "df",
                    "validate_args",
                    "allow_nan_stats",
                    "name"
                ]
            }
        },
        "tensorflow.contrib.distributions.python.ops.laplace": {
            "Laplace": {
                "__init__": [
                    "self",
                    "loc",
                    "scale",
                    "validate_args",
                    "allow_nan_stats",
                    "name"
                ],
                "_param_shapes": [
                    "sample_shape"
                ],
                "loc": [
                    "self"
                ],
                "scale": [
                    "self"
                ],
                "_batch_shape": [
                    "self"
                ],
                "_get_batch_shape": [
                    "self"
                ],
                "_event_shape": [
                    "self"
                ],
                "_get_event_shape": [
                    "self"
                ],
                "_sample_n": [
                    "self",
                    "n",
                    "seed"
                ],
                "_log_prob": [
                    "self",
                    "x"
                ],
                "_prob": [
                    "self",
                    "x"
                ],
                "_log_cdf": [
                    "self",
                    "x"
                ],
                "_cdf": [
                    "self",
                    "x"
                ],
                "_entropy": [
                    "self"
                ],
                "_mean": [
                    "self"
                ],
                "_variance": [
                    "self"
                ],
                "_std": [
                    "self"
                ],
                "_median": [
                    "self"
                ],
                "_mode": [
                    "self"
                ]
            },
            "LaplaceWithSoftplusScale": {
                "__init__": [
                    "self",
                    "loc",
                    "scale",
                    "validate_args",
                    "allow_nan_stats",
                    "name"
                ]
            }
        },
        "tensorflow.contrib.distributions.python.ops": {},
        "tensorflow.contrib.distributions.python.ops.mvn": {
            "_kl_mvn_mvn_brute_force": [
                "mvn_a",
                "mvn_b",
                "name"
            ],
            "_MultivariateNormalOperatorPD": {
                "__init__": [
                    "self",
                    "mu",
                    "cov",
                    "validate_args",
                    "allow_nan_stats",
                    "name"
                ],
                "_assert_valid_mu": [
                    "self",
                    "mu"
                ],
                "mu": [
                    "self"
                ],
                "sigma": [
                    "self"
                ],
                "log_sigma_det": [
                    "self",
                    "name"
                ],
                "sigma_det": [
                    "self",
                    "name"
                ],
                "_batch_shape": [
                    "self"
                ],
                "_get_batch_shape": [
                    "self"
                ],
                "_event_shape": [
                    "self"
                ],
                "_get_event_shape": [
                    "self"
                ],
                "_sample_n": [
                    "self",
                    "n",
                    "seed"
                ],
                "_log_prob": [
                    "self",
                    "x"
                ],
                "_prob": [
                    "self",
                    "x"
                ],
                "_entropy": [
                    "self"
                ],
                "_mean": [
                    "self"
                ],
                "_variance": [
                    "self"
                ],
                "_mode": [
                    "self"
                ]
            },
            "MultivariateNormalDiag": {
                "__init__": [
                    "self",
                    "mu",
                    "diag_stdev",
                    "validate_args",
                    "allow_nan_stats",
                    "name"
                ]
            },
            "MultivariateNormalDiagWithSoftplusStDev": {
                "__init__": [
                    "self",
                    "mu",
                    "diag_stdev",
                    "validate_args",
                    "allow_nan_stats",
                    "name"
                ]
            },
            "MultivariateNormalDiagPlusVDVT": {
                "__init__": [
                    "self",
                    "mu",
                    "diag_large",
                    "v",
                    "diag_small",
                    "validate_args",
                    "allow_nan_stats",
                    "name"
                ]
            },
            "MultivariateNormalCholesky": {
                "__init__": [
                    "self",
                    "mu",
                    "chol",
                    "validate_args",
                    "allow_nan_stats",
                    "name"
                ]
            },
            "MultivariateNormalFull": {
                "__init__": [
                    "self",
                    "mu",
                    "sigma",
                    "validate_args",
                    "allow_nan_stats",
                    "name"
                ]
            }
        },
        "tensorflow.contrib.distributions.python.ops.beta": {
            "_kl_beta_beta": [
                "d1",
                "d2",
                "name"
            ],
            "Beta": {
                "__init__": [
                    "self",
                    "a",
                    "b",
                    "validate_args",
                    "allow_nan_stats",
                    "name"
                ],
                "_param_shapes": [
                    "sample_shape"
                ],
                "a": [
                    "self"
                ],
                "b": [
                    "self"
                ],
                "a_b_sum": [
                    "self"
                ],
                "_batch_shape": [
                    "self"
                ],
                "_get_batch_shape": [
                    "self"
                ],
                "_event_shape": [
                    "self"
                ],
                "_get_event_shape": [
                    "self"
                ],
                "_sample_n": [
                    "self",
                    "n",
                    "seed"
                ],
                "_log_prob": [
                    "self",
                    "x"
                ],
                "_prob": [
                    "self",
                    "x"
                ],
                "_log_cdf": [
                    "self",
                    "x"
                ],
                "_cdf": [
                    "self",
                    "x"
                ],
                "_entropy": [
                    "self"
                ],
                "_mean": [
                    "self"
                ],
                "_variance": [
                    "self"
                ],
                "_std": [
                    "self"
                ],
                "_mode": [
                    "self"
                ],
                "_assert_valid_sample": [
                    "self",
                    "x"
                ]
            },
            "BetaWithSoftplusAB": {
                "__init__": [
                    "self",
                    "a",
                    "b",
                    "validate_args",
                    "allow_nan_stats",
                    "name"
                ]
            }
        },
        "tensorflow.contrib.distributions.python.ops.uniform": {
            "Uniform": {
                "__init__": [
                    "self",
                    "a",
                    "b",
                    "validate_args",
                    "allow_nan_stats",
                    "name"
                ],
                "_param_shapes": [
                    "sample_shape"
                ],
                "a": [
                    "self"
                ],
                "b": [
                    "self"
                ],
                "range": [
                    "self",
                    "name"
                ],
                "_batch_shape": [
                    "self"
                ],
                "_get_batch_shape": [
                    "self"
                ],
                "_event_shape": [
                    "self"
                ],
                "_get_event_shape": [
                    "self"
                ],
                "_sample_n": [
                    "self",
                    "n",
                    "seed"
                ],
                "_log_prob": [
                    "self",
                    "x"
                ],
                "_prob": [
                    "self",
                    "x"
                ],
                "_log_cdf": [
                    "self",
                    "x"
                ],
                "_cdf": [
                    "self",
                    "x"
                ],
                "_entropy": [
                    "self"
                ],
                "_mean": [
                    "self"
                ],
                "_variance": [
                    "self"
                ],
                "_std": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.distributions.python.ops.dirichlet": {
            "Dirichlet": {
                "__init__": [
                    "self",
                    "alpha",
                    "validate_args",
                    "allow_nan_stats",
                    "name"
                ],
                "alpha": [
                    "self"
                ],
                "alpha_sum": [
                    "self"
                ],
                "_batch_shape": [
                    "self"
                ],
                "_get_batch_shape": [
                    "self"
                ],
                "_event_shape": [
                    "self"
                ],
                "_get_event_shape": [
                    "self"
                ],
                "_sample_n": [
                    "self",
                    "n",
                    "seed"
                ],
                "_log_prob": [
                    "self",
                    "x"
                ],
                "_prob": [
                    "self",
                    "x"
                ],
                "_entropy": [
                    "self"
                ],
                "_mean": [
                    "self"
                ],
                "_variance": [
                    "self"
                ],
                "_std": [
                    "self"
                ],
                "_mode": [
                    "self"
                ],
                "_assert_valid_sample": [
                    "self",
                    "x"
                ]
            }
        },
        "tensorflow.contrib.distributions.python.ops.logistic": {
            "_Logistic": {
                "__init__": [
                    "self",
                    "loc",
                    "scale",
                    "validate_args",
                    "allow_nan_stats",
                    "name"
                ],
                "_param_shapes": [
                    "sample_shape"
                ],
                "loc": [
                    "self"
                ],
                "scale": [
                    "self"
                ],
                "_batch_shape": [
                    "self"
                ],
                "_get_batch_shape": [
                    "self"
                ],
                "_event_shape": [
                    "self"
                ],
                "_get_event_shape": [
                    "self"
                ],
                "_sample_n": [
                    "self",
                    "n",
                    "seed"
                ],
                "_log_prob": [
                    "self",
                    "x"
                ],
                "_prob": [
                    "self",
                    "x"
                ],
                "_log_cdf": [
                    "self",
                    "x"
                ],
                "_cdf": [
                    "self",
                    "x"
                ],
                "_log_survival_function": [
                    "self",
                    "x"
                ],
                "_survival_function": [
                    "self",
                    "x"
                ],
                "_entropy": [
                    "self"
                ],
                "_mean": [
                    "self"
                ],
                "_variance": [
                    "self"
                ],
                "_std": [
                    "self"
                ],
                "_mode": [
                    "self"
                ],
                "_z": [
                    "self",
                    "x"
                ]
            }
        },
        "tensorflow.contrib.distributions.python.ops.poisson": {
            "Poisson": {
                "__init__": [
                    "self",
                    "lam",
                    "validate_args",
                    "allow_nan_stats",
                    "name"
                ],
                "lam": [
                    "self"
                ],
                "_batch_shape": [
                    "self"
                ],
                "_get_batch_shape": [
                    "self"
                ],
                "_event_shape": [
                    "self"
                ],
                "_get_event_shape": [
                    "self"
                ],
                "_log_prob": [
                    "self",
                    "x"
                ],
                "_prob": [
                    "self",
                    "x"
                ],
                "_log_cdf": [
                    "self",
                    "x"
                ],
                "_cdf": [
                    "self",
                    "x"
                ],
                "_mean": [
                    "self"
                ],
                "_variance": [
                    "self"
                ],
                "_std": [
                    "self"
                ],
                "_mode": [
                    "self"
                ],
                "_assert_valid_sample": [
                    "self",
                    "x",
                    "check_integer"
                ]
            }
        },
        "tensorflow.contrib.distributions.python.ops.dirichlet_multinomial": {
            "DirichletMultinomial": {
                "__init__": [
                    "self",
                    "n",
                    "alpha",
                    "validate_args",
                    "allow_nan_stats",
                    "name"
                ],
                "n": [
                    "self"
                ],
                "alpha": [
                    "self"
                ],
                "alpha_sum": [
                    "self"
                ],
                "_batch_shape": [
                    "self"
                ],
                "_get_batch_shape": [
                    "self"
                ],
                "_event_shape": [
                    "self"
                ],
                "_get_event_shape": [
                    "self"
                ],
                "_sample_n": [
                    "self",
                    "n",
                    "seed"
                ],
                "_log_prob": [
                    "self",
                    "counts"
                ],
                "_prob": [
                    "self",
                    "counts"
                ],
                "_mean": [
                    "self"
                ],
                "_variance": [
                    "self"
                ],
                "_assert_valid_counts": [
                    "self",
                    "counts"
                ],
                "_assert_valid_alpha": [
                    "self",
                    "alpha",
                    "validate_args"
                ],
                "_assert_valid_n": [
                    "self",
                    "n",
                    "validate_args"
                ]
            }
        },
        "tensorflow.contrib.distributions.python.ops.gamma": {
            "_kl_gamma_gamma": [
                "g0",
                "g1",
                "name"
            ],
            "Gamma": {
                "__init__": [
                    "self",
                    "alpha",
                    "beta",
                    "validate_args",
                    "allow_nan_stats",
                    "name"
                ],
                "_param_shapes": [
                    "sample_shape"
                ],
                "alpha": [
                    "self"
                ],
                "beta": [
                    "self"
                ],
                "_batch_shape": [
                    "self"
                ],
                "_get_batch_shape": [
                    "self"
                ],
                "_event_shape": [
                    "self"
                ],
                "_get_event_shape": [
                    "self"
                ],
                "_sample_n": [
                    "self",
                    "n",
                    "seed"
                ],
                "_log_prob": [
                    "self",
                    "x"
                ],
                "_prob": [
                    "self",
                    "x"
                ],
                "_log_cdf": [
                    "self",
                    "x"
                ],
                "_cdf": [
                    "self",
                    "x"
                ],
                "_entropy": [
                    "self"
                ],
                "_mean": [
                    "self"
                ],
                "_variance": [
                    "self"
                ],
                "_std": [
                    "self"
                ],
                "_mode": [
                    "self"
                ]
            },
            "GammaWithSoftplusAlphaBeta": {
                "__init__": [
                    "self",
                    "alpha",
                    "beta",
                    "validate_args",
                    "allow_nan_stats",
                    "name"
                ]
            }
        },
        "tensorflow.contrib.distributions.python.ops.distribution_util": {
            "assert_close": [
                "x",
                "y",
                "data",
                "summarize",
                "message",
                "name"
            ],
            "assert_integer_form": [
                "x",
                "data",
                "summarize",
                "message",
                "name"
            ],
            "assert_symmetric": [
                "matrix"
            ],
            "same_dynamic_shape": [
                "a",
                "b"
            ],
            "get_logits_and_prob": [
                "logits",
                "p",
                "multidimensional",
                "validate_args",
                "name"
            ],
            "log_combinations": [
                "n",
                "counts",
                "name"
            ],
            "matrix_diag_transform": [
                "matrix",
                "transform",
                "name"
            ],
            "rotate_transpose": [
                "x",
                "shift",
                "name"
            ],
            "pick_vector": [
                "cond",
                "true_vector",
                "false_vector",
                "name"
            ],
            "gen_new_seed": [
                "seed",
                "salt"
            ],
            "fill_lower_triangular": [
                "x",
                "validate_args",
                "name"
            ],
            "softplus_inverse": [
                "x",
                "name"
            ],
            "AppendDocstring": {
                "__init__": [
                    "self",
                    "additional_note",
                    "condition_kwargs_dict"
                ],
                "__call__": [
                    "self",
                    "fn"
                ]
            }
        },
        "tensorflow.contrib.distributions.python.ops.operator_pd_identity": {
            "OperatorPDIdentity": {
                "__init__": [
                    "self",
                    "shape",
                    "dtype",
                    "scale",
                    "verify_pd",
                    "name"
                ],
                "_check_shape": [
                    "self",
                    "shape"
                ],
                "_check_scale": [
                    "self",
                    "scale",
                    "dtype"
                ],
                "_check_x": [
                    "self",
                    "x"
                ],
                "name": [
                    "self"
                ],
                "verify_pd": [
                    "self"
                ],
                "dtype": [
                    "self"
                ],
                "_add_to_tensor": [
                    "self",
                    "mat"
                ],
                "_inv_quadratic_form_on_vectors": [
                    "self",
                    "x"
                ],
                "inputs": [
                    "self"
                ],
                "get_shape": [
                    "self"
                ],
                "_shape": [
                    "self"
                ],
                "_det": [
                    "self"
                ],
                "_batch_log_det": [
                    "self"
                ],
                "_batch_sqrt_log_det": [
                    "self"
                ],
                "_batch_sqrt_log_abs_det": [
                    "self"
                ],
                "_batch_matmul": [
                    "self",
                    "x",
                    "transpose_x"
                ],
                "_batch_sqrt_matmul": [
                    "self",
                    "x",
                    "transpose_x"
                ],
                "_batch_solve": [
                    "self",
                    "rhs"
                ],
                "_batch_sqrt_solve": [
                    "self",
                    "rhs"
                ],
                "_to_dense": [
                    "self"
                ],
                "_sqrt_to_dense": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.distributions.python.ops.kullback_leibler": {
            "_registered_kl": [
                "type_a",
                "type_b"
            ],
            "kl": [
                "dist_a",
                "dist_b",
                "allow_nan",
                "name"
            ],
            "RegisterKL": {
                "__init__": [
                    "self",
                    "dist_cls_a",
                    "dist_cls_b"
                ],
                "__call__": [
                    "self",
                    "kl_fn"
                ]
            }
        },
        "tensorflow.contrib.distributions.python.ops.transformed_distribution": {
            "_static_value": [
                "x"
            ],
            "_logical_and": [],
            "_logical_equal": [
                "x",
                "y"
            ],
            "_logical_not": [
                "x"
            ],
            "_concat_vectors": [],
            "_pick_scalar_condition": [
                "pred",
                "cond_true",
                "cond_false"
            ],
            "_ones_like": [
                "x"
            ],
            "_ndims_from_shape": [
                "shape"
            ],
            "_is_scalar_from_shape": [
                "shape"
            ],
            "TransformedDistribution": {
                "__init__": [
                    "self",
                    "distribution",
                    "bijector",
                    "batch_shape",
                    "event_shape",
                    "validate_args",
                    "name"
                ],
                "distribution": [
                    "self"
                ],
                "bijector": [
                    "self"
                ],
                "_event_shape": [
                    "self"
                ],
                "_get_event_shape": [
                    "self"
                ],
                "_batch_shape": [
                    "self"
                ],
                "_get_batch_shape": [
                    "self"
                ],
                "_sample_n": [
                    "self",
                    "n",
                    "seed",
                    "bijector_kwargs",
                    "distribution_kwargs"
                ],
                "_log_prob": [
                    "self",
                    "y",
                    "bijector_kwargs",
                    "distribution_kwargs"
                ],
                "_prob": [
                    "self",
                    "y",
                    "bijector_kwargs",
                    "distribution_kwargs"
                ],
                "_log_cdf": [
                    "self",
                    "y",
                    "bijector_kwargs",
                    "distribution_kwargs"
                ],
                "_cdf": [
                    "self",
                    "y",
                    "bijector_kwargs",
                    "distribution_kwargs"
                ],
                "_log_survival_function": [
                    "self",
                    "y",
                    "bijector_kwargs",
                    "distribution_kwargs"
                ],
                "_survival_function": [
                    "self",
                    "y",
                    "bijector_kwargs",
                    "distribution_kwargs"
                ],
                "_entropy": [
                    "self"
                ],
                "_maybe_validate_shape_override": [
                    "self",
                    "override_shape",
                    "base_is_scalar",
                    "validate_args",
                    "name"
                ],
                "_maybe_rotate_dims": [
                    "self",
                    "x",
                    "rotate_right"
                ]
            }
        },
        "tensorflow.contrib.distributions.python.ops.onehot_categorical": {
            "_kl_categorical_categorical": [
                "a",
                "b",
                "name"
            ],
            "_OneHotCategorical": {
                "__init__": [
                    "self",
                    "logits",
                    "p",
                    "dtype",
                    "validate_args",
                    "allow_nan_stats",
                    "name"
                ],
                "num_classes": [
                    "self"
                ],
                "logits": [
                    "self"
                ],
                "p": [
                    "self"
                ],
                "_batch_shape": [
                    "self"
                ],
                "_get_batch_shape": [
                    "self"
                ],
                "_event_shape": [
                    "self"
                ],
                "_get_event_shape": [
                    "self"
                ],
                "_sample_n": [
                    "self",
                    "n",
                    "seed"
                ],
                "_log_prob": [
                    "self",
                    "x"
                ],
                "_prob": [
                    "self",
                    "x"
                ],
                "_entropy": [
                    "self"
                ],
                "_mode": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.distributions.python.ops.normal_conjugate_posteriors": {
            "normal_conjugates_known_sigma_posterior": [
                "prior",
                "sigma",
                "s",
                "n"
            ],
            "normal_conjugates_known_sigma_predictive": [
                "prior",
                "sigma",
                "s",
                "n"
            ]
        },
        "tensorflow.contrib.distributions.python.ops.wishart": {
            "_WishartOperatorPD": {
                "__init__": [
                    "self",
                    "df",
                    "scale_operator_pd",
                    "cholesky_input_output_matrices",
                    "validate_args",
                    "allow_nan_stats",
                    "name"
                ],
                "df": [
                    "self"
                ],
                "scale": [
                    "self"
                ],
                "scale_operator_pd": [
                    "self"
                ],
                "cholesky_input_output_matrices": [
                    "self"
                ],
                "dimension": [
                    "self"
                ],
                "_event_shape": [
                    "self"
                ],
                "_get_event_shape": [
                    "self"
                ],
                "_batch_shape": [
                    "self"
                ],
                "_get_batch_shape": [
                    "self"
                ],
                "_sample_n": [
                    "self",
                    "n",
                    "seed"
                ],
                "_log_prob": [
                    "self",
                    "x"
                ],
                "_prob": [
                    "self",
                    "x"
                ],
                "_entropy": [
                    "self"
                ],
                "_mean": [
                    "self"
                ],
                "_variance": [
                    "self"
                ],
                "_std": [
                    "self"
                ],
                "_mode": [
                    "self"
                ],
                "mean_log_det": [
                    "self",
                    "name"
                ],
                "log_normalizing_constant": [
                    "self",
                    "name"
                ],
                "_multi_gamma_sequence": [
                    "self",
                    "a",
                    "p",
                    "name"
                ],
                "_multi_lgamma": [
                    "self",
                    "a",
                    "p",
                    "name"
                ],
                "_multi_digamma": [
                    "self",
                    "a",
                    "p",
                    "name"
                ]
            },
            "WishartCholesky": {
                "__init__": [
                    "self",
                    "df",
                    "scale",
                    "cholesky_input_output_matrices",
                    "validate_args",
                    "allow_nan_stats",
                    "name"
                ]
            },
            "WishartFull": {
                "__init__": [
                    "self",
                    "df",
                    "scale",
                    "cholesky_input_output_matrices",
                    "validate_args",
                    "allow_nan_stats",
                    "name"
                ]
            }
        },
        "tensorflow.contrib.distributions.python.ops.binomial": {
            "Binomial": {
                "__init__": [
                    "self",
                    "n",
                    "logits",
                    "p",
                    "validate_args",
                    "allow_nan_stats",
                    "name"
                ],
                "n": [
                    "self"
                ],
                "logits": [
                    "self"
                ],
                "p": [
                    "self"
                ],
                "_batch_shape": [
                    "self"
                ],
                "_get_batch_shape": [
                    "self"
                ],
                "_event_shape": [
                    "self"
                ],
                "_get_event_shape": [
                    "self"
                ],
                "_log_prob": [
                    "self",
                    "counts"
                ],
                "_prob": [
                    "self",
                    "counts"
                ],
                "_mean": [
                    "self"
                ],
                "_variance": [
                    "self"
                ],
                "_std": [
                    "self"
                ],
                "_mode": [
                    "self"
                ],
                "_check_counts": [
                    "self",
                    "counts"
                ]
            }
        },
        "tensorflow.contrib.distributions.python.ops.vector_student_t": {
            "_infer_shapes": [
                "scale_oppd",
                "shift"
            ],
            "_VectorStudentT": {
                "__init__": [
                    "self",
                    "df",
                    "shift",
                    "scale_identity_multiplier",
                    "scale_diag",
                    "scale_tril",
                    "scale_perturb_factor",
                    "scale_perturb_diag",
                    "validate_args",
                    "allow_nan_stats",
                    "name"
                ],
                "df": [
                    "self"
                ],
                "shift": [
                    "self"
                ],
                "scale": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.distributions.python.ops.operator_pd": {
            "flip_matrix_to_vector": [
                "mat",
                "batch_shape",
                "static_batch_shape"
            ],
            "_flip_matrix_to_vector_static": [
                "mat",
                "static_batch_shape"
            ],
            "_flip_matrix_to_vector_dynamic": [
                "mat",
                "batch_shape"
            ],
            "flip_vector_to_matrix": [
                "vec",
                "batch_shape",
                "static_batch_shape"
            ],
            "_flip_vector_to_matrix_dynamic": [
                "vec",
                "batch_shape"
            ],
            "_flip_vector_to_matrix_static": [
                "vec",
                "batch_shape"
            ],
            "extract_batch_shape": [
                "x",
                "num_event_dims",
                "name"
            ],
            "OperatorPDBase": {
                "name": [
                    "self"
                ],
                "verify_pd": [
                    "self"
                ],
                "dtype": [
                    "self"
                ],
                "add_to_tensor": [
                    "self",
                    "mat",
                    "name"
                ],
                "_add_to_tensor": [
                    "self",
                    "mat"
                ],
                "_dispatch_based_on_batch": [
                    "self",
                    "batch_method",
                    "singleton_method"
                ],
                "inv_quadratic_form_on_vectors": [
                    "self",
                    "x",
                    "name"
                ],
                "_inv_quadratic_form_on_vectors": [
                    "self",
                    "x"
                ],
                "_iqfov_via_sqrt_solve": [
                    "self",
                    "x"
                ],
                "_iqfov_via_solve": [
                    "self",
                    "x"
                ],
                "det": [
                    "self",
                    "name"
                ],
                "_det": [
                    "self"
                ],
                "log_det": [
                    "self",
                    "name"
                ],
                "_batch_log_det": [
                    "self"
                ],
                "_log_det": [
                    "self"
                ],
                "sqrt_log_abs_det": [
                    "self",
                    "name"
                ],
                "sqrt_log_det": [
                    "self",
                    "name"
                ],
                "_batch_sqrt_log_det": [
                    "self"
                ],
                "_sqrt_log_det": [
                    "self"
                ],
                "_batch_sqrt_log_abs_det": [
                    "self"
                ],
                "_sqrt_log_abs_det": [
                    "self"
                ],
                "inputs": [
                    "self"
                ],
                "get_shape": [
                    "self"
                ],
                "get_batch_shape": [
                    "self"
                ],
                "get_vector_shape": [
                    "self"
                ],
                "shape": [
                    "self",
                    "name"
                ],
                "_shape": [
                    "self"
                ],
                "rank": [
                    "self",
                    "name"
                ],
                "batch_shape": [
                    "self",
                    "name"
                ],
                "vector_shape": [
                    "self",
                    "name"
                ],
                "vector_space_dimension": [
                    "self",
                    "name"
                ],
                "matmul": [
                    "self",
                    "x",
                    "transpose_x",
                    "name"
                ],
                "_batch_matmul": [
                    "self",
                    "x",
                    "transpose_x"
                ],
                "_matmul": [
                    "self",
                    "x",
                    "transpose_x"
                ],
                "sqrt_matmul": [
                    "self",
                    "x",
                    "transpose_x",
                    "name"
                ],
                "_batch_sqrt_matmul": [
                    "self",
                    "x",
                    "transpose_x"
                ],
                "_sqrt_matmul": [
                    "self",
                    "x",
                    "transpose_x"
                ],
                "solve": [
                    "self",
                    "rhs",
                    "name"
                ],
                "_solve": [
                    "self",
                    "rhs"
                ],
                "_batch_solve": [
                    "self",
                    "rhs"
                ],
                "sqrt_solve": [
                    "self",
                    "rhs",
                    "name"
                ],
                "_sqrt_solve": [
                    "self",
                    "rhs"
                ],
                "_batch_sqrt_solve": [
                    "self",
                    "rhs"
                ],
                "to_dense": [
                    "self",
                    "name"
                ],
                "_to_dense": [
                    "self"
                ],
                "sqrt_to_dense": [
                    "self",
                    "name"
                ],
                "_sqrt_to_dense": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.distributions.python.ops.distribution": {
            "_copy_fn": [
                "fn"
            ],
            "_update_docstring": [
                "old_str",
                "append_str"
            ],
            "_BaseDistribution": {},
            "_DistributionMeta": {
                "__new__": [
                    "mcs",
                    "classname",
                    "baseclasses",
                    "attrs"
                ]
            },
            "Distribution": {
                "__init__": [
                    "self",
                    "dtype",
                    "is_continuous",
                    "is_reparameterized",
                    "validate_args",
                    "allow_nan_stats",
                    "parameters",
                    "graph_parents",
                    "name"
                ],
                "param_shapes": [
                    "cls",
                    "sample_shape",
                    "name"
                ],
                "param_static_shapes": [
                    "cls",
                    "sample_shape"
                ],
                "_param_shapes": [
                    "sample_shape"
                ],
                "name": [
                    "self"
                ],
                "dtype": [
                    "self"
                ],
                "parameters": [
                    "self"
                ],
                "is_continuous": [
                    "self"
                ],
                "is_reparameterized": [
                    "self"
                ],
                "allow_nan_stats": [
                    "self"
                ],
                "validate_args": [
                    "self"
                ],
                "copy": [
                    "self"
                ],
                "_batch_shape": [
                    "self"
                ],
                "batch_shape": [
                    "self",
                    "name"
                ],
                "_get_batch_shape": [
                    "self"
                ],
                "get_batch_shape": [
                    "self"
                ],
                "_event_shape": [
                    "self"
                ],
                "event_shape": [
                    "self",
                    "name"
                ],
                "_get_event_shape": [
                    "self"
                ],
                "get_event_shape": [
                    "self"
                ],
                "is_scalar_event": [
                    "self",
                    "name"
                ],
                "is_scalar_batch": [
                    "self",
                    "name"
                ],
                "_sample_n": [
                    "self",
                    "n",
                    "seed"
                ],
                "sample": [
                    "self",
                    "sample_shape",
                    "seed",
                    "name"
                ],
                "_log_prob": [
                    "self",
                    "value"
                ],
                "log_prob": [
                    "self",
                    "value",
                    "name"
                ],
                "prob": [
                    "self",
                    "value",
                    "name"
                ],
                "_log_cdf": [
                    "self",
                    "value"
                ],
                "log_cdf": [
                    "self",
                    "value",
                    "name"
                ],
                "_cdf": [
                    "self",
                    "value"
                ],
                "cdf": [
                    "self",
                    "value",
                    "name"
                ],
                "_log_survival_function": [
                    "self",
                    "value"
                ],
                "log_survival_function": [
                    "self",
                    "value",
                    "name"
                ],
                "_survival_function": [
                    "self",
                    "value"
                ],
                "survival_function": [
                    "self",
                    "value",
                    "name"
                ],
                "_entropy": [
                    "self"
                ],
                "entropy": [
                    "self",
                    "name"
                ],
                "_mean": [
                    "self"
                ],
                "mean": [
                    "self",
                    "name"
                ],
                "_variance": [
                    "self"
                ],
                "variance": [
                    "self",
                    "name"
                ],
                "_std": [
                    "self"
                ],
                "std": [
                    "self",
                    "name"
                ],
                "_mode": [
                    "self"
                ],
                "mode": [
                    "self",
                    "name"
                ],
                "log_pdf": [
                    "self",
                    "value",
                    "name"
                ],
                "pdf": [
                    "self",
                    "value",
                    "name"
                ],
                "log_pmf": [
                    "self",
                    "value",
                    "name"
                ],
                "pmf": [
                    "self",
                    "value",
                    "name"
                ],
                "_name_scope": [
                    "self",
                    "name",
                    "values"
                ],
                "_expand_sample_shape_to_vector": [
                    "self",
                    "x",
                    "name"
                ],
                "_set_sample_static_shape": [
                    "self",
                    "x",
                    "sample_shape"
                ],
                "_is_scalar_helper": [
                    "self",
                    "static_shape_fn",
                    "dynamic_shape_fn"
                ]
            }
        },
        "tensorflow.contrib.distributions.python.ops.categorical": {
            "_kl_categorical_categorical": [
                "a",
                "b",
                "name"
            ],
            "Categorical": {
                "__init__": [
                    "self",
                    "logits",
                    "p",
                    "dtype",
                    "validate_args",
                    "allow_nan_stats",
                    "name"
                ],
                "num_classes": [
                    "self"
                ],
                "logits": [
                    "self"
                ],
                "p": [
                    "self"
                ],
                "_batch_shape": [
                    "self"
                ],
                "_get_batch_shape": [
                    "self"
                ],
                "_event_shape": [
                    "self"
                ],
                "_get_event_shape": [
                    "self"
                ],
                "_sample_n": [
                    "self",
                    "n",
                    "seed"
                ],
                "_log_prob": [
                    "self",
                    "k"
                ],
                "_prob": [
                    "self",
                    "k"
                ],
                "_entropy": [
                    "self"
                ],
                "_mode": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.distributions.python.ops.relaxed_onehot_categorical": {
            "_ExpRelaxedOneHotCategorical": {
                "__init__": [
                    "self",
                    "temperature",
                    "logits",
                    "p",
                    "dtype",
                    "validate_args",
                    "allow_nan_stats",
                    "name"
                ],
                "num_classes": [
                    "self"
                ],
                "temperature": [
                    "self"
                ],
                "logits": [
                    "self"
                ],
                "p": [
                    "self"
                ],
                "_batch_shape": [
                    "self"
                ],
                "_get_batch_shape": [
                    "self"
                ],
                "_event_shape": [
                    "self"
                ],
                "_get_event_shape": [
                    "self"
                ],
                "_sample_n": [
                    "self",
                    "n",
                    "seed"
                ],
                "_log_prob": [
                    "self",
                    "x"
                ],
                "_prob": [
                    "self",
                    "x"
                ],
                "_assert_valid_sample": [
                    "self",
                    "x"
                ]
            },
            "_RelaxedOneHotCategorical": {
                "__init__": [
                    "self",
                    "temperature",
                    "logits",
                    "p",
                    "dtype",
                    "validate_args",
                    "allow_nan_stats",
                    "name"
                ]
            }
        },
        "tensorflow.contrib.distributions.python.ops.inverse_gamma": {
            "InverseGamma": {
                "__init__": [
                    "self",
                    "alpha",
                    "beta",
                    "validate_args",
                    "allow_nan_stats",
                    "name"
                ],
                "_param_shapes": [
                    "sample_shape"
                ],
                "alpha": [
                    "self"
                ],
                "beta": [
                    "self"
                ],
                "_batch_shape": [
                    "self"
                ],
                "_get_batch_shape": [
                    "self"
                ],
                "_event_shape": [
                    "self"
                ],
                "_get_event_shape": [
                    "self"
                ],
                "_sample_n": [
                    "self",
                    "n",
                    "seed"
                ],
                "_log_prob": [
                    "self",
                    "x"
                ],
                "_prob": [
                    "self",
                    "x"
                ],
                "_log_cdf": [
                    "self",
                    "x"
                ],
                "_cdf": [
                    "self",
                    "x"
                ],
                "_entropy": [
                    "self"
                ],
                "_mean": [
                    "self"
                ],
                "_variance": [
                    "self"
                ],
                "_mode": [
                    "self"
                ]
            },
            "InverseGammaWithSoftplusAlphaBeta": {
                "__init__": [
                    "self",
                    "alpha",
                    "beta",
                    "validate_args",
                    "allow_nan_stats",
                    "name"
                ]
            }
        },
        "tensorflow.contrib.distributions.python.ops.exponential": {
            "Exponential": {
                "__init__": [
                    "self",
                    "lam",
                    "validate_args",
                    "allow_nan_stats",
                    "name"
                ],
                "_param_shapes": [
                    "sample_shape"
                ],
                "lam": [
                    "self"
                ],
                "_sample_n": [
                    "self",
                    "n",
                    "seed"
                ]
            },
            "ExponentialWithSoftplusLam": {
                "__init__": [
                    "self",
                    "lam",
                    "validate_args",
                    "allow_nan_stats",
                    "name"
                ]
            }
        },
        "tensorflow.contrib.distributions.python.ops.relaxed_bernoulli": {
            "_RelaxedBernoulli": {
                "__init__": [
                    "self",
                    "temperature",
                    "logits",
                    "p",
                    "validate_args",
                    "allow_nan_stats",
                    "name"
                ],
                "_param_shapes": [
                    "sample_shape"
                ],
                "temperature": [
                    "self"
                ],
                "logits": [
                    "self"
                ],
                "p": [
                    "self"
                ],
                "q": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.distributions.python.ops.gumbel": {
            "_Gumbel": {
                "__init__": [
                    "self",
                    "loc",
                    "scale",
                    "validate_args",
                    "allow_nan_stats",
                    "name"
                ],
                "_param_shapes": [
                    "sample_shape"
                ],
                "loc": [
                    "self"
                ],
                "scale": [
                    "self"
                ],
                "_batch_shape": [
                    "self"
                ],
                "_get_batch_shape": [
                    "self"
                ],
                "_event_shape": [
                    "self"
                ],
                "_get_event_shape": [
                    "self"
                ],
                "_sample_n": [
                    "self",
                    "n",
                    "seed"
                ],
                "_log_prob": [
                    "self",
                    "x"
                ],
                "_prob": [
                    "self",
                    "x"
                ],
                "_log_cdf": [
                    "self",
                    "x"
                ],
                "_cdf": [
                    "self",
                    "x"
                ],
                "_entropy": [
                    "self"
                ],
                "_mean": [
                    "self"
                ],
                "_variance": [
                    "self"
                ],
                "_std": [
                    "self"
                ],
                "_mode": [
                    "self"
                ],
                "_z": [
                    "self",
                    "x"
                ]
            }
        },
        "tensorflow.contrib.distributions.python.ops.operator_pd_cholesky": {
            "OperatorPDCholesky": {
                "__init__": [
                    "self",
                    "chol",
                    "verify_pd",
                    "name"
                ],
                "verify_pd": [
                    "self"
                ],
                "name": [
                    "self"
                ],
                "dtype": [
                    "self"
                ],
                "_batch_log_det": [
                    "self"
                ],
                "inputs": [
                    "self"
                ],
                "_inv_quadratic_form_on_vectors": [
                    "self",
                    "x"
                ],
                "_matmul": [
                    "self",
                    "x",
                    "transpose_x"
                ],
                "_batch_matmul": [
                    "self",
                    "x",
                    "transpose_x"
                ],
                "_sqrt_matmul": [
                    "self",
                    "x",
                    "transpose_x"
                ],
                "_batch_sqrt_matmul": [
                    "self",
                    "x",
                    "transpose_x"
                ],
                "_batch_solve": [
                    "self",
                    "rhs"
                ],
                "_batch_sqrt_solve": [
                    "self",
                    "rhs"
                ],
                "get_shape": [
                    "self"
                ],
                "_shape": [
                    "self"
                ],
                "_check_chol": [
                    "self",
                    "chol"
                ],
                "_sqrt_to_dense": [
                    "self"
                ],
                "_to_dense": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.distributions.python.ops.student_t": {
            "StudentT": {
                "__init__": [
                    "self",
                    "df",
                    "mu",
                    "sigma",
                    "validate_args",
                    "allow_nan_stats",
                    "name"
                ],
                "_param_shapes": [
                    "sample_shape"
                ],
                "df": [
                    "self"
                ],
                "mu": [
                    "self"
                ],
                "sigma": [
                    "self"
                ],
                "_batch_shape": [
                    "self"
                ],
                "_get_batch_shape": [
                    "self"
                ],
                "_event_shape": [
                    "self"
                ],
                "_get_event_shape": [
                    "self"
                ],
                "_sample_n": [
                    "self",
                    "n",
                    "seed"
                ],
                "_log_prob": [
                    "self",
                    "x"
                ],
                "_log_unnormalized_prob": [
                    "self",
                    "x"
                ],
                "_log_normalization": [
                    "self"
                ],
                "_prob": [
                    "self",
                    "x"
                ],
                "_cdf": [
                    "self",
                    "x"
                ],
                "_entropy": [
                    "self"
                ],
                "_mean": [
                    "self"
                ],
                "_variance": [
                    "self"
                ],
                "_std": [
                    "self"
                ],
                "_mode": [
                    "self"
                ]
            },
            "StudentTWithAbsDfSoftplusSigma": {
                "__init__": [
                    "self",
                    "df",
                    "mu",
                    "sigma",
                    "validate_args",
                    "allow_nan_stats",
                    "name"
                ]
            }
        },
        "tensorflow.contrib.distributions.python.ops.bernoulli": {
            "_kl_bernoulli_bernoulli": [
                "a",
                "b",
                "name"
            ],
            "Bernoulli": {
                "__init__": [
                    "self",
                    "logits",
                    "p",
                    "dtype",
                    "validate_args",
                    "allow_nan_stats",
                    "name"
                ],
                "_param_shapes": [
                    "sample_shape"
                ],
                "logits": [
                    "self"
                ],
                "p": [
                    "self"
                ],
                "q": [
                    "self"
                ],
                "_batch_shape": [
                    "self"
                ],
                "_get_batch_shape": [
                    "self"
                ],
                "_event_shape": [
                    "self"
                ],
                "_get_event_shape": [
                    "self"
                ],
                "_sample_n": [
                    "self",
                    "n",
                    "seed"
                ],
                "_log_prob": [
                    "self",
                    "event"
                ],
                "_prob": [
                    "self",
                    "event"
                ],
                "_entropy": [
                    "self"
                ],
                "_mean": [
                    "self"
                ],
                "_variance": [
                    "self"
                ],
                "_std": [
                    "self"
                ],
                "_mode": [
                    "self"
                ]
            },
            "BernoulliWithSigmoidP": {
                "__init__": [
                    "self",
                    "p",
                    "dtype",
                    "validate_args",
                    "allow_nan_stats",
                    "name"
                ]
            }
        },
        "tensorflow.contrib.distributions.python.ops.operator_pd_full": {
            "OperatorPDFull": {
                "__init__": [
                    "self",
                    "matrix",
                    "verify_pd",
                    "name"
                ]
            }
        },
        "tensorflow.contrib.distributions.python.ops.operator_pd_diag": {
            "OperatorPDDiagBase": {
                "__init__": [
                    "self",
                    "diag",
                    "verify_pd",
                    "name"
                ],
                "_check_diag": [
                    "self",
                    "diag"
                ],
                "name": [
                    "self"
                ],
                "verify_pd": [
                    "self"
                ],
                "dtype": [
                    "self"
                ],
                "inputs": [
                    "self"
                ],
                "get_shape": [
                    "self"
                ],
                "_shape": [
                    "self"
                ],
                "_batch_log_det": [
                    "self"
                ],
                "_inv_quadratic_form_on_vectors": [
                    "self",
                    "x"
                ],
                "_batch_matmul": [
                    "self",
                    "x",
                    "transpose_x"
                ],
                "_batch_sqrt_matmul": [
                    "self",
                    "x",
                    "transpose_x"
                ],
                "_batch_solve": [
                    "self",
                    "rhs"
                ],
                "_batch_sqrt_solve": [
                    "self",
                    "rhs"
                ],
                "_to_dense": [
                    "self"
                ],
                "_sqrt_to_dense": [
                    "self"
                ],
                "_add_to_tensor": [
                    "self",
                    "mat"
                ]
            },
            "OperatorPDDiag": {
                "__init__": [
                    "self",
                    "diag",
                    "verify_pd",
                    "name"
                ],
                "_batch_log_det": [
                    "self"
                ],
                "_inv_quadratic_form_on_vectors": [
                    "self",
                    "x"
                ],
                "_batch_matmul": [
                    "self",
                    "x",
                    "transpose_x"
                ],
                "_batch_sqrt_matmul": [
                    "self",
                    "x",
                    "transpose_x"
                ],
                "_batch_solve": [
                    "self",
                    "rhs"
                ],
                "_batch_sqrt_solve": [
                    "self",
                    "rhs"
                ],
                "_to_dense": [
                    "self"
                ],
                "_sqrt_to_dense": [
                    "self"
                ],
                "_add_to_tensor": [
                    "self",
                    "mat"
                ]
            },
            "OperatorPDSqrtDiag": {
                "__init__": [
                    "self",
                    "diag",
                    "verify_pd",
                    "name"
                ],
                "_batch_log_det": [
                    "self"
                ],
                "_inv_quadratic_form_on_vectors": [
                    "self",
                    "x"
                ],
                "_batch_matmul": [
                    "self",
                    "x",
                    "transpose_x"
                ],
                "_batch_sqrt_matmul": [
                    "self",
                    "x",
                    "transpose_x"
                ],
                "_batch_solve": [
                    "self",
                    "rhs"
                ],
                "_batch_sqrt_solve": [
                    "self",
                    "rhs"
                ],
                "_to_dense": [
                    "self"
                ],
                "_sqrt_to_dense": [
                    "self"
                ],
                "_add_to_tensor": [
                    "self",
                    "mat"
                ]
            }
        },
        "tensorflow.contrib.distributions.python.ops.normal": {
            "_kl_normal_normal": [
                "n_a",
                "n_b",
                "name"
            ],
            "Normal": {
                "__init__": [
                    "self",
                    "mu",
                    "sigma",
                    "validate_args",
                    "allow_nan_stats",
                    "name"
                ],
                "_param_shapes": [
                    "sample_shape"
                ],
                "mu": [
                    "self"
                ],
                "sigma": [
                    "self"
                ],
                "_batch_shape": [
                    "self"
                ],
                "_get_batch_shape": [
                    "self"
                ],
                "_event_shape": [
                    "self"
                ],
                "_get_event_shape": [
                    "self"
                ],
                "_sample_n": [
                    "self",
                    "n",
                    "seed"
                ],
                "_log_prob": [
                    "self",
                    "x"
                ],
                "_prob": [
                    "self",
                    "x"
                ],
                "_log_cdf": [
                    "self",
                    "x"
                ],
                "_cdf": [
                    "self",
                    "x"
                ],
                "_log_survival_function": [
                    "self",
                    "x"
                ],
                "_survival_function": [
                    "self",
                    "x"
                ],
                "_entropy": [
                    "self"
                ],
                "_mean": [
                    "self"
                ],
                "_variance": [
                    "self"
                ],
                "_std": [
                    "self"
                ],
                "_mode": [
                    "self"
                ],
                "_z": [
                    "self",
                    "x"
                ]
            },
            "NormalWithSoftplusSigma": {
                "__init__": [
                    "self",
                    "mu",
                    "sigma",
                    "validate_args",
                    "allow_nan_stats",
                    "name"
                ]
            }
        },
        "tensorflow.contrib.linear_optimizer": {},
        "tensorflow.contrib.linear_optimizer.python": {},
        "tensorflow.contrib.linear_optimizer.python.sdca_optimizer": {
            "SDCAOptimizer": {
                "__init__": [
                    "self",
                    "example_id_column",
                    "num_loss_partitions",
                    "num_table_shards",
                    "symmetric_l1_regularization",
                    "symmetric_l2_regularization"
                ],
                "get_name": [
                    "self"
                ],
                "get_train_step": [
                    "self",
                    "columns_to_variables",
                    "weight_column_name",
                    "loss_type",
                    "features",
                    "targets",
                    "global_step"
                ]
            }
        },
        "tensorflow.contrib.linear_optimizer.python.ops.sharded_mutable_dense_hashtable": {
            "ShardedMutableDenseHashTable": {
                "__init__": [
                    "self",
                    "key_dtype",
                    "value_dtype",
                    "default_value",
                    "empty_key",
                    "num_shards",
                    "name"
                ],
                "_num_shards": [
                    "self"
                ],
                "table_shards": [
                    "self"
                ],
                "size": [
                    "self",
                    "name"
                ],
                "_shard_indices": [
                    "self",
                    "keys"
                ],
                "_check_keys": [
                    "self",
                    "keys"
                ],
                "lookup": [
                    "self",
                    "keys",
                    "name"
                ],
                "insert": [
                    "self",
                    "keys",
                    "values",
                    "name"
                ],
                "export_sharded": [
                    "self",
                    "name"
                ]
            }
        },
        "tensorflow.contrib.linear_optimizer.python.ops": {},
        "tensorflow.contrib.linear_optimizer.python.ops.sparse_feature_column": {
            "SparseFeatureColumn": {
                "__init__": [
                    "self",
                    "example_indices",
                    "feature_indices",
                    "feature_values"
                ],
                "example_indices": [
                    "self"
                ],
                "feature_indices": [
                    "self"
                ],
                "feature_values": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.linear_optimizer.python.ops.sdca_ops": {
            "SdcaModel": {
                "__init__": [
                    "self",
                    "examples",
                    "variables",
                    "options"
                ],
                "_symmetric_l1_regularization": [
                    "self"
                ],
                "_symmetric_l2_regularization": [
                    "self"
                ],
                "_num_loss_partitions": [
                    "self"
                ],
                "_num_table_shards": [
                    "self"
                ],
                "_create_slots": [
                    "self"
                ],
                "_assertSpecified": [
                    "self",
                    "items",
                    "check_in"
                ],
                "_assertList": [
                    "self",
                    "items",
                    "check_in"
                ],
                "_l1_loss": [
                    "self"
                ],
                "_l2_loss": [
                    "self",
                    "l2"
                ],
                "_convert_n_to_tensor": [
                    "self",
                    "input_list",
                    "as_ref"
                ],
                "_linear_predictions": [
                    "self",
                    "examples"
                ],
                "predictions": [
                    "self",
                    "examples"
                ],
                "minimize": [
                    "self",
                    "global_step",
                    "name"
                ],
                "update_weights": [
                    "self",
                    "train_op"
                ],
                "approximate_duality_gap": [
                    "self"
                ],
                "unregularized_loss": [
                    "self",
                    "examples"
                ],
                "regularized_loss": [
                    "self",
                    "examples"
                ]
            }
        },
        "tensorflow.contrib.testing": {},
        "tensorflow.contrib.testing.python": {},
        "tensorflow.contrib.testing.python.framework": {},
        "tensorflow.contrib.testing.python.framework.util_test": {
            "assert_summary": [
                "expected_tags",
                "expected_simple_values",
                "summary_proto"
            ],
            "to_summary_proto": [
                "summary_str"
            ],
            "latest_event_file": [
                "base_dir"
            ],
            "latest_events": [
                "base_dir"
            ],
            "latest_summaries": [
                "base_dir"
            ],
            "simple_values_from_events": [
                "events",
                "tags"
            ]
        },
        "tensorflow.contrib.testing.python.framework.fake_summary_writer": {
            "FakeSummaryWriter": {
                "install": [
                    "cls"
                ],
                "uninstall": [
                    "cls"
                ],
                "__init__": [
                    "self",
                    "logdir",
                    "graph"
                ],
                "summaries": [
                    "self"
                ],
                "assert_summaries": [
                    "self",
                    "test_case",
                    "expected_logdir",
                    "expected_graph",
                    "expected_summaries",
                    "expected_added_graphs",
                    "expected_added_meta_graphs",
                    "expected_session_logs"
                ],
                "add_summary": [
                    "self",
                    "summ",
                    "current_global_step"
                ],
                "add_graph": [
                    "self",
                    "graph",
                    "global_step",
                    "graph_def"
                ],
                "add_meta_graph": [
                    "self",
                    "meta_graph_def",
                    "global_step"
                ],
                "add_session_log": [
                    "self",
                    "session_log",
                    "global_step"
                ],
                "flush": [
                    "self"
                ],
                "reopen": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.util": {},
        "tensorflow.contrib.util.loader": {
            "load_op_library": [
                "path"
            ]
        },
        "tensorflow.contrib.learn": {},
        "tensorflow.contrib.learn.python": {},
        "tensorflow.contrib.learn.python.learn": {},
        "tensorflow.contrib.learn.python.learn.metric_spec": {
            "MetricSpec": {
                "__init__": [
                    "self",
                    "metric_fn",
                    "prediction_key",
                    "label_key",
                    "weight_key"
                ],
                "prediction_key": [
                    "self"
                ],
                "label_key": [
                    "self"
                ],
                "weight_key": [
                    "self"
                ],
                "metric_fn": [
                    "self"
                ],
                "__str__": [
                    "self"
                ],
                "create_metric_ops": [
                    "self",
                    "inputs",
                    "labels",
                    "predictions"
                ]
            }
        },
        "tensorflow.contrib.learn.python.learn.session_run_hook": {},
        "tensorflow.contrib.learn.python.learn.trainable": {
            "Trainable": {
                "fit": [
                    "self",
                    "x",
                    "y",
                    "input_fn",
                    "steps",
                    "batch_size",
                    "monitors",
                    "max_steps"
                ]
            }
        },
        "tensorflow.contrib.learn.python.learn.learn_runner": {
            "run": [
                "experiment_fn",
                "output_dir",
                "schedule"
            ],
            "_is_distributed": [
                "config"
            ],
            "_get_default_schedule": [
                "config"
            ]
        },
        "tensorflow.contrib.learn.python.learn.models": {
            "linear_regression_zero_init": [
                "x",
                "y"
            ],
            "logistic_regression_zero_init": [
                "x",
                "y"
            ],
            "linear_regression": [
                "x",
                "y",
                "init_mean",
                "init_stddev"
            ],
            "logistic_regression": [
                "x",
                "y",
                "class_weight",
                "init_mean",
                "init_stddev"
            ],
            "_reverse_seq": [
                "input_seq",
                "lengths"
            ],
            "bidirectional_rnn": [
                "cell_fw",
                "cell_bw",
                "inputs",
                "initial_state_fw",
                "initial_state_bw",
                "dtype",
                "sequence_length",
                "scope"
            ],
            "get_rnn_model": [
                "rnn_size",
                "cell_type",
                "num_layers",
                "input_op_fn",
                "bidirectional",
                "target_predictor_fn",
                "sequence_length",
                "initial_state",
                "attn_length",
                "attn_size",
                "attn_vec_size"
            ]
        },
        "tensorflow.contrib.learn.python.learn.experiment": {
            "_new_attr_context": [
                "obj",
                "attr"
            ],
            "Experiment": {
                "__init__": [
                    "self",
                    "estimator",
                    "train_input_fn",
                    "eval_input_fn",
                    "eval_metrics",
                    "train_steps",
                    "eval_steps",
                    "train_monitors",
                    "eval_hooks",
                    "local_eval_frequency",
                    "eval_delay_secs",
                    "continuous_eval_throttle_secs",
                    "min_eval_frequency",
                    "delay_workers_by_global_step",
                    "export_strategies",
                    "continuous_eval_predicate_fn"
                ],
                "estimator": [
                    "self"
                ],
                "train_input_fn": [
                    "self"
                ],
                "eval_input_fn": [
                    "self"
                ],
                "eval_metrics": [
                    "self"
                ],
                "train_steps": [
                    "self"
                ],
                "eval_steps": [
                    "self"
                ],
                "train_monitors": [
                    "self",
                    "value"
                ],
                "eval_hooks": [
                    "self",
                    "value"
                ],
                "local_eval_frequency": [
                    "self"
                ],
                "eval_delay_secs": [
                    "self"
                ],
                "continuous_eval_throttle_secs": [
                    "self"
                ],
                "min_eval_frequency": [
                    "self"
                ],
                "delay_workers_by_global_step": [
                    "self"
                ],
                "continuous_eval_predicate_fn": [
                    "self",
                    "value"
                ],
                "export_strategies": [
                    "self",
                    "value"
                ],
                "train": [
                    "self",
                    "delay_secs"
                ],
                "evaluate": [
                    "self",
                    "delay_secs"
                ],
                "local_run": [
                    "self"
                ],
                "_continuous_eval": [
                    "self",
                    "input_fn",
                    "name",
                    "delay_secs",
                    "throttle_delay_secs",
                    "evaluate_checkpoint_only_once"
                ],
                "continuous_eval": [
                    "self",
                    "delay_secs",
                    "throttle_delay_secs",
                    "evaluate_checkpoint_only_once"
                ],
                "continuous_eval_on_train_data": [
                    "self",
                    "delay_secs",
                    "throttle_delay_secs"
                ],
                "train_and_evaluate": [
                    "self"
                ],
                "_maybe_export": [
                    "self",
                    "eval_result"
                ],
                "run_std_server": [
                    "self"
                ],
                "test": [
                    "self"
                ],
                "_start_server": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.learn.python.learn.basic_session_run_hooks": {},
        "tensorflow.contrib.learn.python.learn.export_strategy": {
            "ExportStrategy": {
                "export": [
                    "self",
                    "estimator",
                    "export_path"
                ]
            }
        },
        "tensorflow.contrib.learn.python.learn.summary_writer_cache": {},
        "tensorflow.contrib.learn.python.learn.evaluable": {
            "Evaluable": {
                "model_dir": [
                    "self"
                ],
                "evaluate": [
                    "self",
                    "x",
                    "y",
                    "input_fn",
                    "feed_fn",
                    "batch_size",
                    "steps",
                    "metrics",
                    "name",
                    "checkpoint_path",
                    "hooks"
                ]
            }
        },
        "tensorflow.contrib.learn.python.learn.graph_actions": {
            "clear_summary_writers": [],
            "get_summary_writer": [
                "logdir"
            ],
            "_make_saver": [
                "graph",
                "keep_checkpoint_max"
            ],
            "_restore_from_checkpoint": [
                "session",
                "graph",
                "checkpoint_path",
                "saver"
            ],
            "_run_with_monitors": [
                "session",
                "step",
                "tensors",
                "feed_dict",
                "monitors"
            ],
            "_monitored_train": [
                "graph",
                "output_dir",
                "train_op",
                "loss_op",
                "global_step_tensor",
                "init_op",
                "init_feed_dict",
                "init_fn",
                "log_every_steps",
                "supervisor_is_chief",
                "supervisor_master",
                "supervisor_save_model_secs",
                "supervisor_save_model_steps",
                "keep_checkpoint_max",
                "keep_checkpoint_every_n_hours",
                "supervisor_save_summaries_secs",
                "supervisor_save_summaries_steps",
                "feed_fn",
                "steps",
                "fail_on_nan_loss",
                "hooks",
                "max_steps"
            ],
            "train": [
                "graph",
                "output_dir",
                "train_op",
                "loss_op",
                "global_step_tensor",
                "init_op",
                "init_feed_dict",
                "init_fn",
                "log_every_steps",
                "supervisor_is_chief",
                "supervisor_master",
                "supervisor_save_model_secs",
                "keep_checkpoint_max",
                "supervisor_save_summaries_steps",
                "feed_fn",
                "steps",
                "fail_on_nan_loss",
                "monitors",
                "max_steps"
            ],
            "_train_internal": [
                "graph",
                "output_dir",
                "train_op",
                "loss_op",
                "global_step_tensor",
                "init_op",
                "init_feed_dict",
                "init_fn",
                "log_every_steps",
                "supervisor_is_chief",
                "supervisor_master",
                "supervisor_save_model_secs",
                "keep_checkpoint_max",
                "supervisor_save_summaries_steps",
                "feed_fn",
                "steps",
                "fail_on_nan_loss",
                "monitors",
                "max_steps"
            ],
            "_get_first_op_from_collection": [
                "collection_name"
            ],
            "_get_saver": [],
            "_get_ready_op": [],
            "_get_local_init_op": [],
            "_eval_results_to_str": [
                "eval_results"
            ],
            "_write_summary_results": [
                "output_dir",
                "eval_results",
                "current_global_step"
            ],
            "evaluate": [
                "graph",
                "output_dir",
                "checkpoint_path",
                "eval_dict",
                "update_op",
                "global_step_tensor",
                "supervisor_master",
                "log_every_steps",
                "feed_fn",
                "max_steps"
            ],
            "run_n": [
                "output_dict",
                "feed_dict",
                "restore_checkpoint_path",
                "n"
            ],
            "run_feeds_iter": [
                "output_dict",
                "feed_dicts",
                "restore_checkpoint_path"
            ],
            "run_feeds": [],
            "infer": [
                "restore_checkpoint_path",
                "output_dict",
                "feed_dict"
            ]
        },
        "tensorflow.contrib.learn.python.learn.monitors": {
            "_extract_output": [
                "outputs",
                "request"
            ],
            "get_default_monitors": [
                "loss_op",
                "summary_op",
                "save_summary_steps",
                "output_dir",
                "summary_writer"
            ],
            "replace_monitors_with_hooks": [
                "monitors_or_hooks",
                "estimator"
            ],
            "_as_graph_element": [
                "obj"
            ],
            "BaseMonitor": {
                "__init__": [
                    "self"
                ],
                "run_on_all_workers": [
                    "self"
                ],
                "set_estimator": [
                    "self",
                    "estimator"
                ],
                "begin": [
                    "self",
                    "max_steps"
                ],
                "end": [
                    "self",
                    "session"
                ],
                "epoch_begin": [
                    "self",
                    "epoch"
                ],
                "epoch_end": [
                    "self",
                    "epoch"
                ],
                "step_begin": [
                    "self",
                    "step"
                ],
                "step_end": [
                    "self",
                    "step",
                    "output"
                ],
                "post_step": [
                    "self",
                    "step",
                    "session"
                ]
            },
            "EveryN": {
                "__init__": [
                    "self",
                    "every_n_steps",
                    "first_n_steps"
                ],
                "every_n_step_begin": [
                    "self",
                    "step"
                ],
                "every_n_step_end": [
                    "self",
                    "step",
                    "outputs"
                ],
                "every_n_post_step": [
                    "self",
                    "step",
                    "session"
                ],
                "step_begin": [
                    "self",
                    "step"
                ],
                "step_end": [
                    "self",
                    "step",
                    "output"
                ],
                "post_step": [
                    "self",
                    "step",
                    "session"
                ],
                "end": [
                    "self",
                    "session"
                ]
            },
            "StopAtStep": {
                "__init__": [
                    "self",
                    "num_steps",
                    "last_step"
                ],
                "run_on_all_workers": [
                    "self"
                ],
                "step_begin": [
                    "self",
                    "step"
                ],
                "step_end": [
                    "self",
                    "step",
                    "output"
                ]
            },
            "PrintTensor": {
                "__init__": [
                    "self",
                    "tensor_names",
                    "every_n",
                    "first_n"
                ],
                "every_n_step_begin": [
                    "self",
                    "step"
                ],
                "every_n_step_end": [
                    "self",
                    "step",
                    "outputs"
                ]
            },
            "LoggingTrainable": {
                "__init__": [
                    "self",
                    "scope",
                    "every_n",
                    "first_n"
                ],
                "every_n_step_begin": [
                    "self",
                    "step"
                ],
                "every_n_step_end": [
                    "self",
                    "step",
                    "outputs"
                ]
            },
            "SummarySaver": {
                "__init__": [
                    "self",
                    "summary_op",
                    "save_steps",
                    "output_dir",
                    "summary_writer",
                    "scaffold"
                ],
                "set_estimator": [
                    "self",
                    "estimator"
                ],
                "every_n_step_begin": [
                    "self",
                    "step"
                ],
                "every_n_step_end": [
                    "self",
                    "step",
                    "outputs"
                ],
                "end": [
                    "self",
                    "session"
                ]
            },
            "ValidationMonitor": {
                "__init__": [
                    "self",
                    "x",
                    "y",
                    "input_fn",
                    "batch_size",
                    "eval_steps",
                    "every_n_steps",
                    "metrics",
                    "early_stopping_rounds",
                    "early_stopping_metric",
                    "early_stopping_metric_minimize",
                    "name"
                ],
                "early_stopped": [
                    "self"
                ],
                "best_step": [
                    "self"
                ],
                "best_value": [
                    "self"
                ],
                "every_n_step_end": [
                    "self",
                    "step",
                    "outputs"
                ]
            },
            "CaptureVariable": {
                "__init__": [
                    "self",
                    "var_name",
                    "every_n",
                    "first_n"
                ],
                "values": [
                    "self"
                ],
                "every_n_step_begin": [
                    "self",
                    "step"
                ],
                "every_n_step_end": [
                    "self",
                    "step",
                    "outputs"
                ]
            },
            "GraphDump": {
                "__init__": [
                    "self",
                    "ignore_ops"
                ],
                "begin": [
                    "self",
                    "max_steps"
                ],
                "step_begin": [
                    "self",
                    "step"
                ],
                "step_end": [
                    "self",
                    "step",
                    "output"
                ],
                "data": [
                    "self"
                ],
                "compare": [
                    "self",
                    "other_dump",
                    "step",
                    "atol"
                ]
            },
            "ExportMonitor": {
                "__init__": [
                    "self",
                    "every_n_steps",
                    "export_dir",
                    "input_fn",
                    "input_feature_key",
                    "exports_to_keep",
                    "signature_fn",
                    "default_batch_size"
                ],
                "export_dir": [
                    "self"
                ],
                "exports_to_keep": [
                    "self"
                ],
                "signature_fn": [
                    "self"
                ],
                "last_export_dir": [
                    "self"
                ],
                "every_n_step_end": [
                    "self",
                    "step",
                    "outputs"
                ],
                "end": [
                    "self",
                    "session"
                ]
            },
            "CheckpointSaver": {
                "__init__": [
                    "self",
                    "checkpoint_dir",
                    "save_secs",
                    "save_steps",
                    "saver",
                    "checkpoint_basename",
                    "scaffold"
                ],
                "begin": [
                    "self",
                    "max_steps"
                ],
                "step_begin": [
                    "self",
                    "step"
                ],
                "post_step": [
                    "self",
                    "step",
                    "session"
                ],
                "end": [
                    "self",
                    "session"
                ],
                "_save": [
                    "self",
                    "step",
                    "session"
                ]
            },
            "StepCounter": {
                "__init__": [
                    "self",
                    "every_n_steps",
                    "output_dir",
                    "summary_writer"
                ],
                "set_estimator": [
                    "self",
                    "estimator"
                ],
                "every_n_step_end": [
                    "self",
                    "current_step",
                    "outputs"
                ]
            },
            "NanLossDuringTrainingError": {
                "__str__": [
                    "self"
                ]
            },
            "NanLoss": {
                "__init__": [
                    "self",
                    "loss_tensor",
                    "every_n_steps",
                    "fail_on_nan_loss"
                ],
                "every_n_step_begin": [
                    "self",
                    "step"
                ],
                "every_n_step_end": [
                    "self",
                    "step",
                    "outputs"
                ]
            },
            "RunHookAdapterForMonitors": {
                "__init__": [
                    "self",
                    "monitors"
                ],
                "begin": [
                    "self"
                ],
                "before_run": [
                    "self",
                    "run_context"
                ],
                "after_run": [
                    "self",
                    "run_context",
                    "run_values"
                ],
                "end": [
                    "self",
                    "session"
                ]
            }
        },
        "tensorflow.contrib.learn.python.learn.monitored_session": {},
        "tensorflow.contrib.learn.python.learn.learn_io.pandas_io": {
            "extract_pandas_data": [
                "data"
            ],
            "extract_pandas_matrix": [
                "data"
            ],
            "extract_pandas_labels": [
                "labels"
            ],
            "pandas_input_fn": [
                "x",
                "y",
                "batch_size",
                "num_epochs",
                "shuffle",
                "queue_capacity",
                "num_threads",
                "target_column"
            ]
        },
        "tensorflow.contrib.learn.python.learn.learn_io.graph_io": {
            "read_batch_examples": [
                "file_pattern",
                "batch_size",
                "reader",
                "randomize_input",
                "num_epochs",
                "queue_capacity",
                "num_threads",
                "read_batch_size",
                "parse_fn",
                "name"
            ],
            "read_keyed_batch_examples": [
                "file_pattern",
                "batch_size",
                "reader",
                "randomize_input",
                "num_epochs",
                "queue_capacity",
                "num_threads",
                "read_batch_size",
                "parse_fn",
                "name"
            ],
            "_read_keyed_batch_examples_shared_queue": [
                "file_pattern",
                "batch_size",
                "reader",
                "randomize_input",
                "num_epochs",
                "queue_capacity",
                "num_threads",
                "read_batch_size",
                "parse_fn",
                "name"
            ],
            "_get_file_names": [
                "file_pattern",
                "randomize_input"
            ],
            "_get_examples": [
                "file_name_queue",
                "reader",
                "num_threads",
                "read_batch_size",
                "filter_fn",
                "parse_fn"
            ],
            "_read_keyed_batch_examples_helper": [
                "file_pattern",
                "batch_size",
                "reader",
                "randomize_input",
                "num_epochs",
                "queue_capacity",
                "num_threads",
                "read_batch_size",
                "filter_fn",
                "parse_fn",
                "setup_shared_queue",
                "name"
            ],
            "read_keyed_batch_features": [
                "file_pattern",
                "batch_size",
                "features",
                "reader",
                "randomize_input",
                "num_epochs",
                "queue_capacity",
                "reader_num_threads",
                "feature_queue_capacity",
                "num_enqueue_threads",
                "parse_fn",
                "name"
            ],
            "_read_keyed_batch_features_shared_queue": [
                "file_pattern",
                "batch_size",
                "features",
                "reader",
                "randomize_input",
                "num_epochs",
                "queue_capacity",
                "reader_num_threads",
                "feature_queue_capacity",
                "num_queue_runners",
                "parse_fn",
                "name"
            ],
            "queue_parsed_features": [
                "parsed_features",
                "keys",
                "feature_queue_capacity",
                "num_enqueue_threads",
                "name"
            ],
            "read_batch_features": [
                "file_pattern",
                "batch_size",
                "features",
                "reader",
                "randomize_input",
                "num_epochs",
                "queue_capacity",
                "feature_queue_capacity",
                "reader_num_threads",
                "parse_fn",
                "name"
            ],
            "read_batch_record_features": [
                "file_pattern",
                "batch_size",
                "features",
                "randomize_input",
                "num_epochs",
                "queue_capacity",
                "reader_num_threads",
                "name"
            ]
        },
        "tensorflow.contrib.learn.python.learn.learn_io": {},
        "tensorflow.contrib.learn.python.learn.learn_io.data_feeder": {
            "_get_in_out_shape": [
                "x_shape",
                "y_shape",
                "n_classes",
                "batch_size"
            ],
            "_data_type_filter": [
                "x",
                "y"
            ],
            "_is_iterable": [
                "x"
            ],
            "setup_train_data_feeder": [
                "x",
                "y",
                "n_classes",
                "batch_size",
                "shuffle",
                "epochs"
            ],
            "_batch_data": [
                "x",
                "batch_size"
            ],
            "setup_predict_data_feeder": [
                "x",
                "batch_size"
            ],
            "setup_processor_data_feeder": [
                "x"
            ],
            "check_array": [
                "array",
                "dtype"
            ],
            "_access": [
                "data",
                "iloc"
            ],
            "_check_dtype": [
                "dtype"
            ],
            "DataFeeder": {
                "__init__": [
                    "self",
                    "x",
                    "y",
                    "n_classes",
                    "batch_size",
                    "shuffle",
                    "random_state",
                    "epochs"
                ],
                "x": [
                    "self"
                ],
                "y": [
                    "self"
                ],
                "shuffle": [
                    "self"
                ],
                "input_dtype": [
                    "self"
                ],
                "output_dtype": [
                    "self"
                ],
                "batch_size": [
                    "self"
                ],
                "make_epoch_variable": [
                    "self"
                ],
                "input_builder": [
                    "self"
                ],
                "set_placeholders": [
                    "self",
                    "input_placeholder",
                    "output_placeholder"
                ],
                "get_feed_params": [
                    "self"
                ],
                "get_feed_dict_fn": [
                    "self"
                ]
            },
            "StreamingDataFeeder": {
                "__init__": [
                    "self",
                    "x",
                    "y",
                    "n_classes",
                    "batch_size"
                ],
                "get_feed_params": [
                    "self"
                ],
                "get_feed_dict_fn": [
                    "self"
                ]
            },
            "DaskDataFeeder": {
                "__init__": [
                    "self",
                    "x",
                    "y",
                    "n_classes",
                    "batch_size",
                    "shuffle",
                    "random_state",
                    "epochs"
                ],
                "get_feed_params": [
                    "self"
                ],
                "get_feed_dict_fn": [
                    "self",
                    "input_placeholder",
                    "output_placeholder"
                ]
            }
        },
        "tensorflow.contrib.learn.python.learn.learn_io.dask_io": {
            "_add_to_index": [
                "df",
                "start"
            ],
            "_get_divisions": [
                "df"
            ],
            "_construct_dask_df_with_divisions": [
                "df"
            ],
            "extract_dask_data": [
                "data"
            ],
            "extract_dask_labels": [
                "labels"
            ]
        },
        "tensorflow.contrib.learn.python.learn.learn_io.numpy_io": {
            "_get_unique_target_key": [
                "features"
            ],
            "numpy_input_fn": [
                "x",
                "y",
                "batch_size",
                "num_epochs",
                "shuffle",
                "queue_capacity",
                "num_threads"
            ]
        },
        "tensorflow.contrib.learn.python.learn.ops": {},
        "tensorflow.contrib.learn.python.learn.ops.seq2seq_ops": {
            "sequence_classifier": [
                "decoding",
                "labels",
                "sampling_decoding",
                "name"
            ],
            "seq2seq_inputs": [
                "x",
                "y",
                "input_length",
                "output_length",
                "sentinel",
                "name"
            ],
            "rnn_decoder": [
                "decoder_inputs",
                "initial_state",
                "cell",
                "scope"
            ],
            "rnn_seq2seq": [
                "encoder_inputs",
                "decoder_inputs",
                "encoder_cell",
                "decoder_cell",
                "dtype",
                "scope"
            ]
        },
        "tensorflow.contrib.learn.python.learn.ops.embeddings_ops": {
            "embedding_lookup": [
                "params",
                "ids",
                "name"
            ],
            "categorical_variable": [
                "tensor_in",
                "n_classes",
                "embedding_size",
                "name"
            ]
        },
        "tensorflow.contrib.learn.python.learn.ops.losses_ops": {
            "mean_squared_error_regressor": [
                "tensor_in",
                "labels",
                "weights",
                "biases",
                "name"
            ],
            "softmax_classifier": [
                "tensor_in",
                "labels",
                "weights",
                "biases",
                "class_weight",
                "name"
            ]
        },
        "tensorflow.contrib.learn.python.learn.datasets.base": {
            "load_csv_with_header": [
                "filename",
                "target_dtype",
                "features_dtype",
                "target_column"
            ],
            "load_csv_without_header": [
                "filename",
                "target_dtype",
                "features_dtype",
                "target_column"
            ],
            "shrink_csv": [
                "filename",
                "ratio"
            ],
            "load_iris": [
                "data_path"
            ],
            "load_boston": [
                "data_path"
            ],
            "retry": [
                "initial_delay",
                "max_delay",
                "factor",
                "jitter",
                "is_retriable"
            ],
            "_is_retriable": [
                "e"
            ],
            "urlretrieve_with_retry": [
                "url",
                "filename"
            ],
            "maybe_download": [
                "filename",
                "work_directory",
                "source_url"
            ]
        },
        "tensorflow.contrib.learn.python.learn.datasets": {
            "load_dataset": [
                "name",
                "size",
                "test_with_fake_data"
            ],
            "make_dataset": [
                "name",
                "n_samples",
                "noise",
                "seed"
            ]
        },
        "tensorflow.contrib.learn.python.learn.datasets.mnist": {
            "_read32": [
                "bytestream"
            ],
            "extract_images": [
                "f"
            ],
            "dense_to_one_hot": [
                "labels_dense",
                "num_classes"
            ],
            "extract_labels": [
                "f",
                "one_hot",
                "num_classes"
            ],
            "read_data_sets": [
                "train_dir",
                "fake_data",
                "one_hot",
                "dtype",
                "reshape",
                "validation_size"
            ],
            "load_mnist": [
                "train_dir"
            ],
            "DataSet": {
                "__init__": [
                    "self",
                    "images",
                    "labels",
                    "fake_data",
                    "one_hot",
                    "dtype",
                    "reshape"
                ],
                "images": [
                    "self"
                ],
                "labels": [
                    "self"
                ],
                "num_examples": [
                    "self"
                ],
                "epochs_completed": [
                    "self"
                ],
                "next_batch": [
                    "self",
                    "batch_size",
                    "fake_data"
                ]
            }
        },
        "tensorflow.contrib.learn.python.learn.datasets.synthetic": {
            "circles": [
                "n_samples",
                "noise",
                "seed",
                "factor",
                "n_classes"
            ],
            "spirals": [
                "n_samples",
                "noise",
                "seed",
                "mode",
                "n_loops"
            ],
            "_archimedes_spiral": [
                "theta",
                "theta_offset"
            ],
            "_bernoulli_spiral": [
                "theta",
                "theta_offset"
            ],
            "_fermat_spiral": [
                "theta",
                "theta_offset"
            ]
        },
        "tensorflow.contrib.learn.python.learn.datasets.produce_small_datasets": {
            "main": [
                "unused_argv"
            ]
        },
        "tensorflow.contrib.learn.python.learn.datasets.text_datasets": {
            "maybe_download_dbpedia": [
                "data_dir"
            ],
            "load_dbpedia": [
                "size",
                "test_with_fake_data"
            ]
        },
        "tensorflow.contrib.learn.python.learn.dataframe.dataframe": {
            "DataFrame": {
                "__init__": [
                    "self"
                ],
                "columns": [
                    "self"
                ],
                "__len__": [
                    "self"
                ],
                "assign": [
                    "self"
                ],
                "select_columns": [
                    "self",
                    "keys"
                ],
                "exclude_columns": [
                    "self",
                    "exclude_keys"
                ],
                "__getitem__": [
                    "self",
                    "key"
                ],
                "__setitem__": [
                    "self",
                    "key",
                    "value"
                ],
                "__delitem__": [
                    "self",
                    "key"
                ],
                "build": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.learn.python.learn.dataframe.tensorflow_dataframe": {
            "_expand_file_names": [
                "filepatterns"
            ],
            "_dtype_to_nan": [
                "dtype"
            ],
            "_get_default_value": [
                "feature_spec"
            ],
            "TensorFlowDataFrame": {
                "run": [
                    "self",
                    "num_batches",
                    "graph",
                    "session",
                    "start_queues",
                    "initialize_variables"
                ],
                "select_rows": [
                    "self",
                    "boolean_series"
                ],
                "split": [
                    "self",
                    "index_series",
                    "proportion",
                    "batch_size"
                ],
                "split_fast": [
                    "self",
                    "index_series",
                    "proportion",
                    "batch_size",
                    "base_batch_size"
                ],
                "run_one_batch": [
                    "self"
                ],
                "run_one_epoch": [
                    "self"
                ],
                "materialize_to_memory": [
                    "self",
                    "batch_size"
                ],
                "batch": [
                    "self",
                    "batch_size",
                    "shuffle",
                    "num_threads",
                    "queue_capacity",
                    "min_after_dequeue",
                    "seed"
                ],
                "_from_csv_base": [
                    "cls",
                    "filepatterns",
                    "get_default_values",
                    "has_header",
                    "column_names",
                    "num_threads",
                    "enqueue_size",
                    "batch_size",
                    "queue_capacity",
                    "min_after_dequeue",
                    "shuffle",
                    "seed"
                ],
                "from_csv": [
                    "cls",
                    "filepatterns",
                    "default_values",
                    "has_header",
                    "column_names",
                    "num_threads",
                    "enqueue_size",
                    "batch_size",
                    "queue_capacity",
                    "min_after_dequeue",
                    "shuffle",
                    "seed"
                ],
                "from_csv_with_feature_spec": [
                    "cls",
                    "filepatterns",
                    "feature_spec",
                    "has_header",
                    "column_names",
                    "num_threads",
                    "enqueue_size",
                    "batch_size",
                    "queue_capacity",
                    "min_after_dequeue",
                    "shuffle",
                    "seed"
                ],
                "from_examples": [
                    "cls",
                    "filepatterns",
                    "features",
                    "reader_cls",
                    "num_threads",
                    "enqueue_size",
                    "batch_size",
                    "queue_capacity",
                    "min_after_dequeue",
                    "shuffle",
                    "seed"
                ],
                "from_pandas": [
                    "cls",
                    "pandas_dataframe",
                    "num_threads",
                    "enqueue_size",
                    "batch_size",
                    "queue_capacity",
                    "min_after_dequeue",
                    "shuffle",
                    "seed",
                    "data_name"
                ],
                "from_numpy": [
                    "cls",
                    "numpy_array",
                    "num_threads",
                    "enqueue_size",
                    "batch_size",
                    "queue_capacity",
                    "min_after_dequeue",
                    "shuffle",
                    "seed",
                    "data_name"
                ],
                "from_ordereddict": [
                    "cls",
                    "ordered_dict_of_arrays",
                    "num_threads",
                    "enqueue_size",
                    "batch_size",
                    "queue_capacity",
                    "min_after_dequeue",
                    "shuffle",
                    "seed",
                    "data_name"
                ]
            }
        },
        "tensorflow.contrib.learn.python.learn.dataframe": {},
        "tensorflow.contrib.learn.python.learn.dataframe.transform": {
            "_make_list_of_series": [
                "x"
            ],
            "_make_tuple_of_string": [
                "x"
            ],
            "parameter": [
                "func"
            ],
            "Transform": {
                "__init__": [
                    "self"
                ],
                "name": [
                    "self"
                ],
                "parameters": [
                    "self"
                ],
                "input_valency": [
                    "self"
                ],
                "output_names": [
                    "self"
                ],
                "_output_names": [
                    "self"
                ],
                "return_type": [
                    "self"
                ],
                "__str__": [
                    "self"
                ],
                "__repr__": [
                    "self"
                ],
                "__call__": [
                    "self",
                    "input_series"
                ],
                "_produce_output_series": [
                    "self",
                    "input_series"
                ]
            },
            "TensorFlowTransform": {
                "_check_output_tensors": [
                    "self",
                    "output_tensors"
                ],
                "_produce_output_series": [
                    "self",
                    "input_series"
                ],
                "build_transitive": [
                    "self",
                    "input_series",
                    "cache"
                ],
                "_apply_transform": [
                    "self",
                    "input_tensors"
                ]
            }
        },
        "tensorflow.contrib.learn.python.learn.dataframe.series": {
            "Series": {
                "register_unary_op": [
                    "cls",
                    "series_method_name"
                ],
                "register_binary_op": [
                    "cls",
                    "series_method_name"
                ],
                "build": [
                    "self",
                    "cache"
                ]
            },
            "PredefinedSeries": {
                "__init__": [
                    "self",
                    "name",
                    "feature_spec"
                ],
                "name": [
                    "self"
                ],
                "feature_spec": [
                    "self"
                ],
                "required_base_features": [
                    "self"
                ],
                "build": [
                    "self",
                    "cache"
                ],
                "__repr__": [
                    "self"
                ],
                "__eq__": [
                    "self",
                    "other"
                ],
                "__ne__": [
                    "self",
                    "other"
                ]
            },
            "TransformedSeries": {
                "__init__": [
                    "self",
                    "input_series",
                    "transform",
                    "output_name"
                ],
                "required_base_features": [
                    "self"
                ],
                "build": [
                    "self",
                    "cache"
                ],
                "__repr__": [
                    "self"
                ],
                "make_repr": [
                    "input_series",
                    "transform",
                    "output_name"
                ]
            }
        },
        "tensorflow.contrib.learn.python.learn.dataframe.estimator_utils": {
            "_to_feature_spec": [
                "tensor",
                "default_value"
            ],
            "_infer_feature_specs": [
                "dataframe",
                "keys_with_defaults"
            ],
            "_build_alternate_universe": [
                "dataframe",
                "base_input_keys_with_defaults",
                "feature_keys"
            ],
            "to_feature_columns_and_input_fn": [
                "dataframe",
                "base_input_keys_with_defaults",
                "feature_keys",
                "label_keys"
            ]
        },
        "tensorflow.contrib.learn.python.learn.dataframe.queues": {},
        "tensorflow.contrib.learn.python.learn.dataframe.queues.feeding_queue_runner": {
            "FeedingQueueRunner": {
                "__init__": [
                    "self",
                    "queue",
                    "enqueue_ops",
                    "close_op",
                    "cancel_op",
                    "feed_fns",
                    "queue_closed_exception_types"
                ],
                "_run": [
                    "self",
                    "sess",
                    "enqueue_op",
                    "feed_fn",
                    "coord"
                ],
                "create_threads": [
                    "self",
                    "sess",
                    "coord",
                    "daemon",
                    "start"
                ],
                "_init_from_proto": [
                    "self",
                    "queue_runner_def"
                ],
                "to_proto": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.learn.python.learn.dataframe.queues.feeding_functions": {
            "enqueue_data": [
                "data",
                "capacity",
                "shuffle",
                "min_after_dequeue",
                "num_threads",
                "seed",
                "name",
                "enqueue_size",
                "num_epochs"
            ],
            "_ArrayFeedFn": {
                "__init__": [
                    "self",
                    "placeholders",
                    "array",
                    "batch_size",
                    "random_start",
                    "seed",
                    "num_epochs"
                ],
                "__call__": [
                    "self"
                ]
            },
            "_OrderedDictNumpyFeedFn": {
                "__init__": [
                    "self",
                    "placeholders",
                    "ordered_dict_of_arrays",
                    "batch_size",
                    "random_start",
                    "seed",
                    "num_epochs"
                ],
                "__call__": [
                    "self"
                ]
            },
            "_PandasFeedFn": {
                "__init__": [
                    "self",
                    "placeholders",
                    "dataframe",
                    "batch_size",
                    "random_start",
                    "seed",
                    "num_epochs"
                ],
                "__call__": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.learn.python.learn.dataframe.transforms.difference": {
            "_negate_sparse": [
                "st"
            ],
            "Difference": {
                "__init__": [
                    "self"
                ],
                "name": [
                    "self"
                ],
                "input_valency": [
                    "self"
                ],
                "_output_names": [
                    "self"
                ],
                "_apply_transform": [
                    "self",
                    "input_tensors"
                ]
            }
        },
        "tensorflow.contrib.learn.python.learn.dataframe.transforms.batch": {
            "AbstractBatchTransform": {
                "__init__": [
                    "self",
                    "batch_size",
                    "output_names",
                    "num_threads",
                    "queue_capacity"
                ],
                "batch_size": [
                    "self"
                ],
                "num_threads": [
                    "self"
                ],
                "queue_capacity": [
                    "self"
                ],
                "input_valency": [
                    "self"
                ],
                "_output_names": [
                    "self"
                ]
            },
            "Batch": {
                "name": [
                    "self"
                ],
                "_apply_transform": [
                    "self",
                    "transform_input"
                ]
            },
            "ShuffleBatch": {
                "name": [
                    "self"
                ],
                "__init__": [
                    "self",
                    "batch_size",
                    "output_names",
                    "num_threads",
                    "queue_capacity",
                    "min_after_dequeue",
                    "seed"
                ],
                "min_after_dequeue": [
                    "self"
                ],
                "seed": [
                    "self"
                ],
                "_apply_transform": [
                    "self",
                    "transform_input"
                ]
            }
        },
        "tensorflow.contrib.learn.python.learn.dataframe.transforms.example_parser": {
            "ExampleParser": {
                "__init__": [
                    "self",
                    "features"
                ],
                "name": [
                    "self"
                ],
                "input_valency": [
                    "self"
                ],
                "_output_names": [
                    "self"
                ],
                "feature_definitions": [
                    "self"
                ],
                "_apply_transform": [
                    "self",
                    "input_tensors"
                ]
            }
        },
        "tensorflow.contrib.learn.python.learn.dataframe.transforms": {},
        "tensorflow.contrib.learn.python.learn.dataframe.transforms.hashes": {
            "HashFast": {
                "__init__": [
                    "self",
                    "num_buckets"
                ],
                "name": [
                    "self"
                ],
                "input_valency": [
                    "self"
                ],
                "_output_names": [
                    "self"
                ],
                "_apply_transform": [
                    "self",
                    "input_tensors"
                ]
            }
        },
        "tensorflow.contrib.learn.python.learn.dataframe.transforms.sum": {
            "Sum": {
                "__init__": [
                    "self"
                ],
                "name": [
                    "self"
                ],
                "input_valency": [
                    "self"
                ],
                "_output_names": [
                    "self"
                ],
                "_apply_transform": [
                    "self",
                    "input_tensors"
                ]
            }
        },
        "tensorflow.contrib.learn.python.learn.dataframe.transforms.boolean_mask": {
            "sparse_boolean_mask": [
                "sparse_tensor",
                "mask",
                "name"
            ],
            "BooleanMask": {
                "name": [
                    "self"
                ],
                "input_valency": [
                    "self"
                ],
                "_output_names": [
                    "self"
                ],
                "_apply_transform": [
                    "self",
                    "input_tensors"
                ]
            }
        },
        "tensorflow.contrib.learn.python.learn.dataframe.transforms.densify": {
            "Densify": {
                "__init__": [
                    "self",
                    "default_value"
                ],
                "default_value": [
                    "self"
                ],
                "name": [
                    "self"
                ],
                "input_valency": [
                    "self"
                ],
                "_output_names": [
                    "self"
                ],
                "_apply_transform": [
                    "self",
                    "input_tensors"
                ]
            }
        },
        "tensorflow.contrib.learn.python.learn.dataframe.transforms.split_mask": {
            "SplitMask": {
                "__init__": [
                    "self",
                    "proportion"
                ],
                "name": [
                    "self"
                ],
                "input_valency": [
                    "self"
                ],
                "_output_names": [
                    "self"
                ],
                "_produce_output_series": [
                    "self",
                    "input_series"
                ]
            }
        },
        "tensorflow.contrib.learn.python.learn.dataframe.transforms.unary_transforms": {
            "register_unary_op": [
                "registered_name",
                "operation",
                "ignore_dtype"
            ]
        },
        "tensorflow.contrib.learn.python.learn.dataframe.transforms.in_memory_source": {
            "BaseInMemorySource": {
                "__init__": [
                    "self",
                    "data",
                    "num_threads",
                    "enqueue_size",
                    "batch_size",
                    "queue_capacity",
                    "shuffle",
                    "min_after_dequeue",
                    "seed",
                    "data_name"
                ],
                "data": [
                    "self"
                ],
                "num_threads": [
                    "self"
                ],
                "enqueue_size": [
                    "self"
                ],
                "batch_size": [
                    "self"
                ],
                "queue_capacity": [
                    "self"
                ],
                "shuffle": [
                    "self"
                ],
                "min_after_dequeue": [
                    "self"
                ],
                "seed": [
                    "self"
                ],
                "data_name": [
                    "self"
                ],
                "input_valency": [
                    "self"
                ],
                "_apply_transform": [
                    "self",
                    "transform_input"
                ]
            },
            "NumpySource": {
                "name": [
                    "self"
                ],
                "_output_names": [
                    "self"
                ]
            },
            "OrderedDictNumpySource": {
                "__init__": [
                    "self",
                    "ordered_dict_of_arrays",
                    "num_threads",
                    "enqueue_size",
                    "batch_size",
                    "queue_capacity",
                    "shuffle",
                    "min_after_dequeue",
                    "seed",
                    "data_name"
                ],
                "name": [
                    "self"
                ],
                "_output_names": [
                    "self"
                ]
            },
            "PandasSource": {
                "__init__": [
                    "self",
                    "dataframe",
                    "num_threads",
                    "enqueue_size",
                    "batch_size",
                    "queue_capacity",
                    "shuffle",
                    "min_after_dequeue",
                    "seed",
                    "data_name"
                ],
                "name": [
                    "self"
                ],
                "_output_names": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.learn.python.learn.dataframe.transforms.sparsify": {
            "Sparsify": {
                "__init__": [
                    "self",
                    "strip_value"
                ],
                "strip_value": [
                    "self"
                ],
                "name": [
                    "self"
                ],
                "input_valency": [
                    "self"
                ],
                "_output_names": [
                    "self"
                ],
                "_apply_transform": [
                    "self",
                    "input_tensors"
                ]
            }
        },
        "tensorflow.contrib.learn.python.learn.dataframe.transforms.csv_parser": {
            "CSVParser": {
                "__init__": [
                    "self",
                    "column_names",
                    "default_values"
                ],
                "name": [
                    "self"
                ],
                "input_valency": [
                    "self"
                ],
                "_output_names": [
                    "self"
                ],
                "column_names": [
                    "self"
                ],
                "default_values": [
                    "self"
                ],
                "_apply_transform": [
                    "self",
                    "input_tensors"
                ]
            }
        },
        "tensorflow.contrib.learn.python.learn.dataframe.transforms.binary_transforms": {
            "register_binary_op": [
                "method_name",
                "operation"
            ],
            "SeriesBinaryTransform": {
                "input_valency": [
                    "self"
                ],
                "_output_names": [
                    "self"
                ],
                "_apply_transform": [
                    "self",
                    "input_tensors"
                ]
            },
            "ScalarBinaryTransform": {
                "__init__": [
                    "self",
                    "scalar"
                ],
                "scalar": [
                    "self"
                ],
                "input_valency": [
                    "self"
                ],
                "_output_names": [
                    "self"
                ],
                "_apply_transform": [
                    "self",
                    "input_tensors"
                ]
            }
        },
        "tensorflow.contrib.learn.python.learn.dataframe.transforms.reader_source": {
            "TextFileSource": [
                "file_names",
                "reader_kwargs",
                "enqueue_size",
                "batch_size",
                "queue_capacity",
                "shuffle",
                "min_after_dequeue",
                "num_threads",
                "seed"
            ],
            "TFRecordSource": [
                "file_names",
                "reader_kwargs",
                "enqueue_size",
                "batch_size",
                "queue_capacity",
                "shuffle",
                "min_after_dequeue",
                "num_threads",
                "seed"
            ],
            "ReaderSource": {
                "__init__": [
                    "self",
                    "reader_cls",
                    "work_units",
                    "reader_kwargs",
                    "enqueue_size",
                    "batch_size",
                    "queue_capacity",
                    "shuffle",
                    "min_after_dequeue",
                    "num_threads",
                    "seed"
                ],
                "reader_cls": [
                    "self"
                ],
                "work_units": [
                    "self"
                ],
                "reader_kwargs": [
                    "self"
                ],
                "enqueue_size": [
                    "self"
                ],
                "batch_size": [
                    "self"
                ],
                "queue_capacity": [
                    "self"
                ],
                "shuffle": [
                    "self"
                ],
                "min_after_dequeue": [
                    "self"
                ],
                "num_threads": [
                    "self"
                ],
                "seed": [
                    "self"
                ],
                "name": [
                    "self"
                ],
                "input_valency": [
                    "self"
                ],
                "_output_names": [
                    "self"
                ],
                "_apply_transform": [
                    "self",
                    "transform_input"
                ]
            }
        },
        "tensorflow.contrib.learn.python.learn.utils.inspect_checkpoint": {
            "print_tensors_in_checkpoint_file": [
                "file_name",
                "tensor_name"
            ],
            "main": [
                "unused_argv"
            ]
        },
        "tensorflow.contrib.learn.python.learn.utils": {},
        "tensorflow.contrib.learn.python.learn.utils.saved_model_export_utils": {
            "build_standardized_signature_def": [
                "input_tensors",
                "output_tensors",
                "problem_type"
            ],
            "_get_classification_scores": [
                "output_tensors"
            ],
            "_is_classification_problem": [
                "problem_type",
                "input_tensors",
                "output_tensors"
            ],
            "_is_regression_problem": [
                "problem_type",
                "input_tensors",
                "output_tensors"
            ],
            "get_input_alternatives": [
                "input_ops"
            ],
            "get_output_alternatives": [
                "model_fn_ops",
                "default_output_alternative_key"
            ],
            "build_all_signature_defs": [
                "input_alternatives",
                "output_alternatives",
                "actual_default_output_alternative_key"
            ],
            "get_timestamped_export_dir": [
                "export_dir_base"
            ],
            "garbage_collect_exports": [
                "export_dir_base",
                "exports_to_keep"
            ],
            "make_export_strategy": [
                "export_input_fn",
                "default_output_alternative_key",
                "assets_extra",
                "as_text",
                "exports_to_keep"
            ]
        },
        "tensorflow.contrib.learn.python.learn.utils.gc": {
            "largest_export_versions": [
                "n"
            ],
            "one_of_every_n_export_versions": [
                "n"
            ],
            "mod_export_version": [
                "n"
            ],
            "union": [
                "lf",
                "rf"
            ],
            "negation": [
                "f"
            ],
            "get_paths": [
                "base_dir",
                "parser"
            ]
        },
        "tensorflow.contrib.learn.python.learn.utils.input_fn_utils": {
            "build_parsing_serving_input_fn": [
                "feature_spec",
                "default_batch_size"
            ],
            "build_default_serving_input_fn": [
                "features",
                "default_batch_size"
            ]
        },
        "tensorflow.contrib.learn.python.learn.utils.export": {
            "_get_first_op_from_collection": [
                "collection_name"
            ],
            "_get_saver": [],
            "_export_graph": [
                "graph",
                "saver",
                "checkpoint_path",
                "export_dir",
                "default_graph_signature",
                "named_graph_signatures",
                "exports_to_keep"
            ],
            "generic_signature_fn": [
                "examples",
                "unused_features",
                "predictions"
            ],
            "classification_signature_fn": [
                "examples",
                "unused_features",
                "predictions"
            ],
            "classification_signature_fn_with_prob": [
                "examples",
                "unused_features",
                "predictions"
            ],
            "regression_signature_fn": [
                "examples",
                "unused_features",
                "predictions"
            ],
            "logistic_regression_signature_fn": [
                "examples",
                "unused_features",
                "predictions"
            ],
            "_default_input_fn": [
                "estimator",
                "examples"
            ],
            "export_estimator": [
                "estimator",
                "export_dir",
                "signature_fn",
                "input_fn",
                "default_batch_size",
                "exports_to_keep"
            ],
            "_export_estimator": [
                "estimator",
                "export_dir",
                "signature_fn",
                "input_fn",
                "default_batch_size",
                "exports_to_keep",
                "input_feature_key",
                "use_deprecated_input_fn",
                "prediction_key"
            ]
        },
        "tensorflow.contrib.learn.python.learn.estimators.metric_key": {
            "MetricKey": {}
        },
        "tensorflow.contrib.learn.python.learn.estimators.logistic_regressor": {
            "_get_model_fn_with_logistic_metrics": [
                "model_fn"
            ],
            "LogisticRegressor": [
                "model_fn",
                "thresholds",
                "model_dir",
                "config",
                "feature_engineering_fn"
            ],
            "_make_logistic_eval_metric_ops": [
                "labels",
                "predictions",
                "thresholds"
            ]
        },
        "tensorflow.contrib.learn.python.learn.estimators.dnn_linear_combined": {
            "_as_iterable": [
                "preds",
                "output"
            ],
            "_get_feature_dict": [
                "features"
            ],
            "_get_optimizer": [
                "optimizer"
            ],
            "_linear_learning_rate": [
                "num_linear_feature_columns"
            ],
            "_add_hidden_layer_summary": [
                "value",
                "tag"
            ],
            "_get_embedding_variable": [
                "column",
                "collection_key",
                "input_layer_scope"
            ],
            "_extract_embedding_lr_multipliers": [
                "embedding_lr_multipliers",
                "collection_key",
                "input_layer_scope"
            ],
            "_dnn_linear_combined_model_fn": [
                "features",
                "labels",
                "mode",
                "params",
                "config"
            ],
            "_DNNLinearCombinedEstimator": {
                "__init__": [
                    "self",
                    "head",
                    "model_dir",
                    "linear_feature_columns",
                    "linear_optimizer",
                    "_joint_linear_weights",
                    "dnn_feature_columns",
                    "dnn_optimizer",
                    "dnn_hidden_units",
                    "dnn_activation_fn",
                    "dnn_dropout",
                    "gradient_clip_norm",
                    "config",
                    "feature_engineering_fn",
                    "embedding_lr_multipliers"
                ]
            },
            "DNNLinearCombinedClassifier": {
                "__init__": [
                    "self",
                    "model_dir",
                    "n_classes",
                    "weight_column_name",
                    "linear_feature_columns",
                    "linear_optimizer",
                    "_joint_linear_weights",
                    "dnn_feature_columns",
                    "dnn_optimizer",
                    "dnn_hidden_units",
                    "dnn_activation_fn",
                    "dnn_dropout",
                    "gradient_clip_norm",
                    "enable_centered_bias",
                    "config",
                    "feature_engineering_fn",
                    "embedding_lr_multipliers",
                    "input_layer_min_slice_size"
                ],
                "predict": [
                    "self",
                    "x",
                    "input_fn",
                    "batch_size",
                    "as_iterable"
                ],
                "predict_classes": [
                    "self",
                    "x",
                    "input_fn",
                    "batch_size",
                    "as_iterable"
                ],
                "predict_proba": [
                    "self",
                    "x",
                    "input_fn",
                    "batch_size",
                    "as_iterable"
                ],
                "export": [
                    "self",
                    "export_dir",
                    "input_fn",
                    "input_feature_key",
                    "use_deprecated_input_fn",
                    "signature_fn",
                    "default_batch_size",
                    "exports_to_keep"
                ],
                "dnn_weights_": [
                    "self"
                ],
                "linear_weights_": [
                    "self"
                ],
                "dnn_bias_": [
                    "self"
                ],
                "linear_bias_": [
                    "self"
                ]
            },
            "DNNLinearCombinedRegressor": {
                "__init__": [
                    "self",
                    "model_dir",
                    "weight_column_name",
                    "linear_feature_columns",
                    "linear_optimizer",
                    "_joint_linear_weights",
                    "dnn_feature_columns",
                    "dnn_optimizer",
                    "dnn_hidden_units",
                    "dnn_activation_fn",
                    "dnn_dropout",
                    "gradient_clip_norm",
                    "enable_centered_bias",
                    "label_dimension",
                    "config",
                    "feature_engineering_fn",
                    "embedding_lr_multipliers",
                    "input_layer_min_slice_size"
                ],
                "evaluate": [
                    "self",
                    "x",
                    "y",
                    "input_fn",
                    "feed_fn",
                    "batch_size",
                    "steps",
                    "metrics",
                    "name",
                    "checkpoint_path",
                    "hooks"
                ],
                "predict": [
                    "self",
                    "x",
                    "input_fn",
                    "batch_size",
                    "as_iterable"
                ],
                "predict_scores": [
                    "self",
                    "x",
                    "input_fn",
                    "batch_size",
                    "as_iterable"
                ],
                "export": [
                    "self",
                    "export_dir",
                    "input_fn",
                    "input_feature_key",
                    "use_deprecated_input_fn",
                    "signature_fn",
                    "default_batch_size",
                    "exports_to_keep"
                ]
            }
        },
        "tensorflow.contrib.learn.python.learn.estimators.dynamic_rnn_estimator": {
            "mask_activations_and_labels": [
                "activations",
                "labels",
                "sequence_lengths"
            ],
            "select_last_activations": [
                "activations",
                "sequence_lengths"
            ],
            "_get_state_name": [
                "i"
            ],
            "state_tuple_to_dict": [
                "state"
            ],
            "dict_to_state_tuple": [
                "input_dict",
                "cell"
            ],
            "_concatenate_context_input": [
                "sequence_input",
                "context_input"
            ],
            "build_sequence_input": [
                "features",
                "sequence_feature_columns",
                "context_feature_columns",
                "weight_collections",
                "scope"
            ],
            "construct_rnn": [
                "initial_state",
                "sequence_input",
                "cell",
                "num_label_columns",
                "dtype",
                "parallel_iterations",
                "swap_memory"
            ],
            "_get_eval_metric_ops": [
                "problem_type",
                "prediction_type",
                "sequence_length",
                "prediction_dict",
                "labels"
            ],
            "_multi_value_predictions": [
                "activations",
                "target_column",
                "predict_probabilities"
            ],
            "_single_value_predictions": [
                "activations",
                "sequence_length",
                "target_column",
                "predict_probabilities"
            ],
            "_multi_value_loss": [
                "activations",
                "labels",
                "sequence_length",
                "target_column",
                "features"
            ],
            "_single_value_loss": [
                "activations",
                "labels",
                "sequence_length",
                "target_column",
                "features"
            ],
            "apply_dropout": [
                "cell",
                "input_keep_probability",
                "output_keep_probability",
                "random_seed"
            ],
            "_get_dynamic_rnn_model_fn": [
                "cell",
                "target_column",
                "problem_type",
                "prediction_type",
                "optimizer",
                "sequence_feature_columns",
                "context_feature_columns",
                "predict_probabilities",
                "learning_rate",
                "gradient_clipping_norm",
                "input_keep_probability",
                "output_keep_probability",
                "sequence_length_key",
                "dtype",
                "parallel_iterations",
                "swap_memory",
                "name"
            ],
            "_to_rnn_cell": [
                "cell_or_type",
                "num_units",
                "num_layers"
            ],
            "multi_value_rnn_regressor": [
                "num_units",
                "sequence_feature_columns",
                "context_feature_columns",
                "cell_type",
                "num_rnn_layers",
                "optimizer_type",
                "learning_rate",
                "momentum",
                "gradient_clipping_norm",
                "input_keep_probability",
                "output_keep_probability",
                "model_dir",
                "config",
                "feature_engineering_fn"
            ],
            "multi_value_rnn_classifier": [
                "num_classes",
                "num_units",
                "sequence_feature_columns",
                "context_feature_columns",
                "cell_type",
                "num_rnn_layers",
                "optimizer_type",
                "learning_rate",
                "predict_probabilities",
                "momentum",
                "gradient_clipping_norm",
                "input_keep_probability",
                "output_keep_probability",
                "model_dir",
                "config",
                "feature_engineering_fn"
            ],
            "single_value_rnn_regressor": [
                "num_units",
                "sequence_feature_columns",
                "context_feature_columns",
                "cell_type",
                "num_rnn_layers",
                "optimizer_type",
                "learning_rate",
                "momentum",
                "gradient_clipping_norm",
                "input_keep_probability",
                "output_keep_probability",
                "model_dir",
                "config",
                "feature_engineering_fn"
            ],
            "single_value_rnn_classifier": [
                "num_classes",
                "num_units",
                "sequence_feature_columns",
                "context_feature_columns",
                "cell_type",
                "num_rnn_layers",
                "optimizer_type",
                "learning_rate",
                "predict_probabilities",
                "momentum",
                "gradient_clipping_norm",
                "input_keep_probability",
                "output_keep_probability",
                "model_dir",
                "config",
                "feature_engineering_fn"
            ],
            "ProblemType": {},
            "PredictionType": {},
            "RNNKeys": {}
        },
        "tensorflow.contrib.learn.python.learn.estimators.dnn": {
            "_get_feature_dict": [
                "features"
            ],
            "_get_optimizer": [
                "optimizer"
            ],
            "_add_hidden_layer_summary": [
                "value",
                "tag"
            ],
            "_dnn_model_fn": [
                "features",
                "labels",
                "mode",
                "params",
                "config"
            ],
            "DNNClassifier": {
                "__init__": [
                    "self",
                    "hidden_units",
                    "feature_columns",
                    "model_dir",
                    "n_classes",
                    "weight_column_name",
                    "optimizer",
                    "activation_fn",
                    "dropout",
                    "gradient_clip_norm",
                    "enable_centered_bias",
                    "config",
                    "feature_engineering_fn",
                    "embedding_lr_multipliers",
                    "input_layer_min_slice_size"
                ],
                "predict": [
                    "self",
                    "x",
                    "input_fn",
                    "batch_size",
                    "as_iterable"
                ],
                "predict_classes": [
                    "self",
                    "x",
                    "input_fn",
                    "batch_size",
                    "as_iterable"
                ],
                "predict_proba": [
                    "self",
                    "x",
                    "input_fn",
                    "batch_size",
                    "as_iterable"
                ],
                "export": [
                    "self",
                    "export_dir",
                    "input_fn",
                    "input_feature_key",
                    "use_deprecated_input_fn",
                    "signature_fn",
                    "default_batch_size",
                    "exports_to_keep"
                ],
                "weights_": [
                    "self"
                ],
                "bias_": [
                    "self"
                ]
            },
            "DNNRegressor": {
                "__init__": [
                    "self",
                    "hidden_units",
                    "feature_columns",
                    "model_dir",
                    "weight_column_name",
                    "optimizer",
                    "activation_fn",
                    "dropout",
                    "gradient_clip_norm",
                    "enable_centered_bias",
                    "config",
                    "feature_engineering_fn",
                    "label_dimension",
                    "embedding_lr_multipliers",
                    "input_layer_min_slice_size"
                ],
                "evaluate": [
                    "self",
                    "x",
                    "y",
                    "input_fn",
                    "feed_fn",
                    "batch_size",
                    "steps",
                    "metrics",
                    "name",
                    "checkpoint_path",
                    "hooks"
                ],
                "predict": [
                    "self",
                    "x",
                    "input_fn",
                    "batch_size",
                    "as_iterable"
                ],
                "predict_scores": [
                    "self",
                    "x",
                    "input_fn",
                    "batch_size",
                    "as_iterable"
                ],
                "export": [
                    "self",
                    "export_dir",
                    "input_fn",
                    "input_feature_key",
                    "use_deprecated_input_fn",
                    "signature_fn",
                    "default_batch_size",
                    "exports_to_keep"
                ]
            }
        },
        "tensorflow.contrib.learn.python.learn.estimators.prediction_key": {
            "PredictionKey": {}
        },
        "tensorflow.contrib.learn.python.learn.estimators": {},
        "tensorflow.contrib.learn.python.learn.estimators.kmeans": {
            "KMeansClustering": {
                "__init__": [
                    "self",
                    "num_clusters",
                    "model_dir",
                    "initial_clusters",
                    "distance_metric",
                    "random_seed",
                    "use_mini_batch",
                    "kmeans_plus_plus_num_retries",
                    "relative_tolerance",
                    "config"
                ],
                "predict_cluster_idx": [
                    "self",
                    "input_fn"
                ],
                "score": [
                    "self",
                    "input_fn",
                    "steps"
                ],
                "transform": [
                    "self",
                    "input_fn",
                    "as_iterable"
                ],
                "clusters": [
                    "self"
                ],
                "_parse_tensor_or_dict": [
                    "self",
                    "features"
                ],
                "_get_model_function": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.learn.python.learn.estimators.model_fn": {
            "ModeKeys": {},
            "ModelFnOps": {
                "__new__": [
                    "cls",
                    "mode",
                    "predictions",
                    "loss",
                    "train_op",
                    "eval_metric_ops",
                    "output_alternatives",
                    "training_chief_hooks",
                    "training_hooks",
                    "training_scaffold"
                ]
            }
        },
        "tensorflow.contrib.learn.python.learn.estimators.tensor_signature": {
            "tensors_compatible": [
                "tensors",
                "signatures"
            ],
            "create_signatures": [
                "tensors"
            ],
            "create_placeholders_from_signatures": [
                "signatures"
            ],
            "create_example_parser_from_signatures": [
                "signatures",
                "examples_batch",
                "single_feature_name"
            ],
            "TensorSignature": {
                "__new__": [
                    "cls",
                    "tensor"
                ],
                "is_compatible_with": [
                    "self",
                    "other"
                ],
                "get_placeholder": [
                    "self"
                ],
                "get_feature_spec": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.learn.python.learn.estimators.linear": {
            "_get_optimizer": [
                "spec"
            ],
            "_as_iterable": [
                "preds",
                "output"
            ],
            "_add_bias_column": [
                "feature_columns",
                "columns_to_tensors",
                "bias_variable",
                "columns_to_variables"
            ],
            "_linear_model_fn": [
                "features",
                "labels",
                "mode",
                "params",
                "config"
            ],
            "sdca_model_fn": [
                "features",
                "labels",
                "mode",
                "params"
            ],
            "_get_default_optimizer": [
                "feature_columns"
            ],
            "_SdcaUpdateWeightsHook": {
                "__init__": [
                    "self"
                ],
                "set_parameters": [
                    "self",
                    "sdca_model",
                    "train_op"
                ],
                "begin": [
                    "self"
                ],
                "before_run": [
                    "self",
                    "run_context"
                ]
            },
            "LinearClassifier": {
                "__init__": [
                    "self",
                    "feature_columns",
                    "model_dir",
                    "n_classes",
                    "weight_column_name",
                    "optimizer",
                    "gradient_clip_norm",
                    "enable_centered_bias",
                    "_joint_weight",
                    "config",
                    "feature_engineering_fn"
                ],
                "predict": [
                    "self",
                    "x",
                    "input_fn",
                    "batch_size",
                    "as_iterable"
                ],
                "predict_classes": [
                    "self",
                    "x",
                    "input_fn",
                    "batch_size",
                    "as_iterable"
                ],
                "predict_proba": [
                    "self",
                    "x",
                    "input_fn",
                    "batch_size",
                    "outputs",
                    "as_iterable"
                ],
                "export": [
                    "self",
                    "export_dir",
                    "input_fn",
                    "input_feature_key",
                    "use_deprecated_input_fn",
                    "signature_fn",
                    "default_batch_size",
                    "exports_to_keep"
                ],
                "weights_": [
                    "self"
                ],
                "bias_": [
                    "self"
                ]
            },
            "LinearRegressor": {
                "__init__": [
                    "self",
                    "feature_columns",
                    "model_dir",
                    "weight_column_name",
                    "optimizer",
                    "gradient_clip_norm",
                    "enable_centered_bias",
                    "label_dimension",
                    "_joint_weights",
                    "config",
                    "feature_engineering_fn"
                ],
                "predict": [
                    "self",
                    "x",
                    "input_fn",
                    "batch_size",
                    "as_iterable"
                ],
                "predict_scores": [
                    "self",
                    "x",
                    "input_fn",
                    "batch_size",
                    "as_iterable"
                ],
                "export": [
                    "self",
                    "export_dir",
                    "input_fn",
                    "input_feature_key",
                    "use_deprecated_input_fn",
                    "signature_fn",
                    "default_batch_size",
                    "exports_to_keep"
                ],
                "weights_": [
                    "self"
                ],
                "bias_": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.learn.python.learn.estimators.constants": {
            "ProblemType": {}
        },
        "tensorflow.contrib.learn.python.learn.estimators.estimator_test_utils": {
            "assert_estimator_contract": [
                "tester",
                "estimator_class"
            ],
            "assert_in_range": [
                "min_value",
                "max_value",
                "key",
                "metrics"
            ]
        },
        "tensorflow.contrib.learn.python.learn.estimators.head": {
            "_regression_head": [
                "label_name",
                "weight_column_name",
                "label_dimension",
                "enable_centered_bias",
                "head_name"
            ],
            "_multi_class_head": [
                "n_classes",
                "label_name",
                "weight_column_name",
                "enable_centered_bias",
                "head_name",
                "thresholds",
                "metric_class_ids"
            ],
            "_binary_svm_head": [
                "label_name",
                "weight_column_name",
                "enable_centered_bias",
                "head_name",
                "thresholds"
            ],
            "_multi_label_head": [
                "n_classes",
                "label_name",
                "weight_column_name",
                "enable_centered_bias",
                "head_name",
                "thresholds",
                "metric_class_ids"
            ],
            "_multi_head": [
                "heads",
                "loss_weights"
            ],
            "_mean_squared_loss": [
                "logits",
                "labels"
            ],
            "_log_loss_with_two_classes": [
                "logits",
                "labels"
            ],
            "_one_class_to_two_class_logits": [
                "logits"
            ],
            "_softmax_cross_entropy_loss": [
                "logits",
                "labels"
            ],
            "_to_labels_tensor": [
                "labels",
                "label_name"
            ],
            "_assert_labels_rank": [
                "labels"
            ],
            "_weighted_loss": [
                "loss",
                "weight"
            ],
            "_weight_tensor": [
                "features",
                "weight_column_name"
            ],
            "_loss": [
                "loss_unweighted",
                "weight",
                "name"
            ],
            "_check_logits_input_not_supported": [
                "logits",
                "logits_input"
            ],
            "_check_mode_valid": [
                "mode"
            ],
            "_centered_bias": [
                "logits_dimension",
                "head_name"
            ],
            "_centered_bias_step": [
                "centered_bias",
                "logits_dimension",
                "labels",
                "loss_fn"
            ],
            "_summary_key": [
                "head_name",
                "val"
            ],
            "_training_loss": [
                "features",
                "labels",
                "logits",
                "loss_fn",
                "weight_column_name",
                "head_name"
            ],
            "_train_op": [
                "loss",
                "labels",
                "train_op_fn",
                "centered_bias",
                "logits_dimension",
                "loss_fn"
            ],
            "_eval_metric_ops": [
                "metrics",
                "features",
                "labels",
                "predictions"
            ],
            "_sigmoid_cross_entropy_loss": [
                "logits",
                "labels"
            ],
            "_float_weights_or_none": [
                "weights"
            ],
            "_weighted_average_loss_metric_spec": [
                "loss_fn",
                "pred_key",
                "label_key",
                "weight_key"
            ],
            "_indicator_labels_streaming_mean": [
                "predictions",
                "labels",
                "weights",
                "class_id"
            ],
            "_predictions_streaming_mean": [
                "predictions",
                "labels",
                "weights",
                "class_id"
            ],
            "_class_id_labels_to_indicator": [
                "labels",
                "num_classes"
            ],
            "_streaming_auc": [
                "predictions",
                "labels",
                "weights",
                "class_id"
            ],
            "_assert_class_id": [
                "class_id",
                "num_classes"
            ],
            "_accuracy_at_threshold": [
                "threshold"
            ],
            "_streaming_at_threshold": [
                "streaming_metrics_fn",
                "threshold"
            ],
            "_Head": {
                "__init__": [
                    "self",
                    "head_name"
                ],
                "logits_dimension": [
                    "self"
                ],
                "head_ops": [
                    "self",
                    "features",
                    "labels",
                    "mode",
                    "train_op_fn",
                    "logits",
                    "logits_input",
                    "scope"
                ],
                "_create_output_alternatives": [
                    "self",
                    "predictions"
                ]
            },
            "_RegressionHead": {
                "__init__": [
                    "self",
                    "label_name",
                    "weight_column_name",
                    "label_dimension",
                    "enable_centered_bias",
                    "head_name",
                    "loss_fn"
                ],
                "logits_dimension": [
                    "self"
                ],
                "head_ops": [
                    "self",
                    "features",
                    "labels",
                    "mode",
                    "train_op_fn",
                    "logits",
                    "logits_input",
                    "scope"
                ],
                "_logits_to_predictions": [
                    "self",
                    "logits"
                ],
                "_default_metrics": [
                    "self"
                ]
            },
            "_BinaryLogisticHead": {
                "__init__": [
                    "self",
                    "label_name",
                    "weight_column_name",
                    "enable_centered_bias",
                    "head_name",
                    "loss_fn",
                    "thresholds"
                ],
                "logits_dimension": [
                    "self"
                ],
                "head_ops": [
                    "self",
                    "features",
                    "labels",
                    "mode",
                    "train_op_fn",
                    "logits",
                    "logits_input",
                    "scope"
                ],
                "_logits_to_predictions": [
                    "self",
                    "logits"
                ],
                "_default_metrics": [
                    "self"
                ]
            },
            "_MultiClassHead": {
                "__init__": [
                    "self",
                    "n_classes",
                    "label_name",
                    "weight_column_name",
                    "enable_centered_bias",
                    "head_name",
                    "loss_fn",
                    "thresholds",
                    "metric_class_ids"
                ],
                "logits_dimension": [
                    "self"
                ],
                "head_ops": [
                    "self",
                    "features",
                    "labels",
                    "mode",
                    "train_op_fn",
                    "logits",
                    "logits_input",
                    "scope"
                ],
                "_logits_to_predictions": [
                    "self",
                    "logits"
                ],
                "_metric_spec": [
                    "self",
                    "metric_fn",
                    "prediction_name"
                ],
                "_default_metrics": [
                    "self"
                ]
            },
            "_BinarySvmHead": {
                "__init__": [
                    "self",
                    "label_name",
                    "weight_column_name",
                    "enable_centered_bias",
                    "head_name",
                    "thresholds"
                ],
                "_logits_to_predictions": [
                    "self",
                    "logits"
                ],
                "_default_metrics": [
                    "self"
                ]
            },
            "_MultiLabelHead": {
                "__init__": [
                    "self",
                    "n_classes",
                    "label_name",
                    "weight_column_name",
                    "enable_centered_bias",
                    "head_name",
                    "thresholds",
                    "metric_class_ids"
                ],
                "_logits_to_predictions": [
                    "self",
                    "logits"
                ],
                "_metric_spec": [
                    "self",
                    "metric_fn",
                    "prediction_name"
                ],
                "_default_metrics": [
                    "self"
                ]
            },
            "_MultiHead": {
                "__init__": [
                    "self",
                    "heads",
                    "loss_combiner"
                ],
                "logits_dimension": [
                    "self"
                ],
                "head_ops": [
                    "self",
                    "features",
                    "target",
                    "mode",
                    "train_op_fn",
                    "logits",
                    "logits_input",
                    "scope"
                ],
                "_split_logits": [
                    "self",
                    "logits"
                ],
                "_combine_train": [
                    "self",
                    "all_model_fn_ops",
                    "train_op_fn"
                ],
                "_combine_infer": [
                    "self",
                    "all_model_fn_ops"
                ],
                "_combine_eval": [
                    "self",
                    "all_model_fn_ops"
                ]
            }
        },
        "tensorflow.contrib.learn.python.learn.estimators.composable_model": {
            "_ComposableModel": {
                "__init__": [
                    "self",
                    "num_label_columns",
                    "optimizer",
                    "gradient_clip_norm",
                    "num_ps_replicas",
                    "scope",
                    "trainable"
                ],
                "get_scope_name": [
                    "self"
                ],
                "build_model": [
                    "self",
                    "features",
                    "feature_columns",
                    "is_training"
                ],
                "get_train_step": [
                    "self",
                    "loss"
                ],
                "_get_feature_columns": [
                    "self"
                ],
                "_get_vars": [
                    "self"
                ],
                "_get_optimizer": [
                    "self"
                ],
                "_get_default_optimizer": [
                    "self",
                    "optimizer_name"
                ]
            },
            "LinearComposableModel": {
                "__init__": [
                    "self",
                    "num_label_columns",
                    "optimizer",
                    "_joint_weights",
                    "gradient_clip_norm",
                    "num_ps_replicas",
                    "scope",
                    "trainable"
                ],
                "get_weights": [
                    "self",
                    "model_dir"
                ],
                "get_bias": [
                    "self",
                    "model_dir"
                ],
                "build_model": [
                    "self",
                    "features",
                    "feature_columns",
                    "is_training"
                ],
                "_get_default_optimizer": [
                    "self",
                    "optimizer_name"
                ]
            },
            "DNNComposableModel": {
                "__init__": [
                    "self",
                    "num_label_columns",
                    "hidden_units",
                    "optimizer",
                    "activation_fn",
                    "dropout",
                    "gradient_clip_norm",
                    "num_ps_replicas",
                    "scope",
                    "trainable"
                ],
                "get_weights": [
                    "self",
                    "model_dir"
                ],
                "get_bias": [
                    "self",
                    "model_dir"
                ],
                "_add_hidden_layer_summary": [
                    "self",
                    "value",
                    "tag"
                ],
                "build_model": [
                    "self",
                    "features",
                    "feature_columns",
                    "is_training"
                ],
                "_get_default_optimizer": [
                    "self",
                    "optimizer_name"
                ]
            }
        },
        "tensorflow.contrib.learn.python.learn.estimators.run_config": {
            "_count_ps": [
                "cluster_spec"
            ],
            "_get_master": [
                "cluster_spec",
                "task_type",
                "task_id"
            ],
            "Environment": {},
            "TaskType": {},
            "ClusterConfig": {
                "__init__": [
                    "self",
                    "master",
                    "evaluation_master"
                ],
                "cluster_spec": [
                    "self"
                ],
                "environment": [
                    "self"
                ],
                "evaluation_master": [
                    "self"
                ],
                "is_chief": [
                    "self"
                ],
                "master": [
                    "self"
                ],
                "num_ps_replicas": [
                    "self"
                ],
                "task_id": [
                    "self"
                ],
                "task_type": [
                    "self"
                ],
                "get_task_id": []
            },
            "RunConfig": {
                "__init__": [
                    "self",
                    "master",
                    "num_cores",
                    "log_device_placement",
                    "gpu_memory_fraction",
                    "tf_random_seed",
                    "save_summary_steps",
                    "save_checkpoints_secs",
                    "save_checkpoints_steps",
                    "keep_checkpoint_max",
                    "keep_checkpoint_every_n_hours",
                    "evaluation_master"
                ],
                "tf_config": [
                    "self"
                ],
                "tf_random_seed": [
                    "self"
                ],
                "save_summary_steps": [
                    "self"
                ],
                "save_checkpoints_secs": [
                    "self"
                ],
                "save_checkpoints_steps": [
                    "self"
                ],
                "keep_checkpoint_max": [
                    "self"
                ],
                "keep_checkpoint_every_n_hours": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.learn.python.learn.estimators._sklearn": {
            "_pprint": [
                "d"
            ],
            "_accuracy_score": [
                "y_true",
                "y_pred"
            ],
            "_mean_squared_error": [
                "y_true",
                "y_pred"
            ],
            "_train_test_split": [],
            "_BaseEstimator": {
                "get_params": [
                    "self",
                    "deep"
                ],
                "set_params": [
                    "self"
                ],
                "__repr__": [
                    "self"
                ]
            },
            "_ClassifierMixin": {},
            "_RegressorMixin": {},
            "_TransformerMixin": {},
            "NotFittedError": {}
        },
        "tensorflow.contrib.learn.python.learn.estimators.test_data": {
            "get_quantile_based_buckets": [
                "feature_values",
                "num_buckets"
            ],
            "prepare_iris_data_for_logistic_regression": [],
            "iris_input_multiclass_fn": [],
            "iris_input_logistic_fn": []
        },
        "tensorflow.contrib.learn.python.learn.estimators.estimator": {
            "_verify_input_args": [
                "x",
                "y",
                "input_fn",
                "feed_fn",
                "batch_size"
            ],
            "_get_input_fn": [
                "x",
                "y",
                "input_fn",
                "feed_fn",
                "batch_size",
                "shuffle",
                "epochs"
            ],
            "infer_real_valued_columns_from_input_fn": [
                "input_fn"
            ],
            "infer_real_valued_columns_from_input": [
                "x"
            ],
            "_get_arguments": [
                "func"
            ],
            "_get_replica_device_setter": [
                "config"
            ],
            "_make_metrics_ops": [
                "metrics",
                "features",
                "labels",
                "predictions"
            ],
            "_dict_to_str": [
                "dictionary"
            ],
            "_write_dict_to_summary": [
                "output_dir",
                "dictionary",
                "current_global_step"
            ],
            "_identity_feature_engineering_fn": [
                "features",
                "labels"
            ],
            "BaseEstimator": {
                "__init__": [
                    "self",
                    "model_dir",
                    "config"
                ],
                "config": [
                    "self"
                ],
                "fit": [
                    "self",
                    "x",
                    "y",
                    "input_fn",
                    "steps",
                    "batch_size",
                    "monitors",
                    "max_steps"
                ],
                "partial_fit": [
                    "self",
                    "x",
                    "y",
                    "input_fn",
                    "steps",
                    "batch_size",
                    "monitors"
                ],
                "evaluate": [
                    "self",
                    "x",
                    "y",
                    "input_fn",
                    "feed_fn",
                    "batch_size",
                    "steps",
                    "metrics",
                    "name",
                    "checkpoint_path",
                    "hooks",
                    "log_progress"
                ],
                "predict": [
                    "self",
                    "x",
                    "input_fn",
                    "batch_size",
                    "outputs",
                    "as_iterable"
                ],
                "get_variable_value": [
                    "self",
                    "name"
                ],
                "get_variable_names": [
                    "self"
                ],
                "model_dir": [
                    "self"
                ],
                "export": [
                    "self",
                    "export_dir",
                    "input_fn",
                    "input_feature_key",
                    "use_deprecated_input_fn",
                    "signature_fn",
                    "prediction_key",
                    "default_batch_size",
                    "exports_to_keep"
                ],
                "_get_train_ops": [
                    "self",
                    "features",
                    "labels"
                ],
                "_get_predict_ops": [
                    "self",
                    "features"
                ],
                "_get_eval_ops": [
                    "self",
                    "features",
                    "labels",
                    "metrics"
                ],
                "_get_feature_ops_from_example": [
                    "self",
                    "examples_batch"
                ],
                "_check_inputs": [
                    "self",
                    "features",
                    "labels"
                ],
                "_extract_metric_update_ops": [
                    "self",
                    "eval_dict"
                ],
                "_evaluate_model": [
                    "self",
                    "input_fn",
                    "steps",
                    "feed_fn",
                    "metrics",
                    "name",
                    "checkpoint_path",
                    "hooks",
                    "log_progress"
                ],
                "_get_features_from_input_fn": [
                    "self",
                    "input_fn"
                ],
                "_infer_model": [
                    "self",
                    "input_fn",
                    "feed_fn",
                    "outputs",
                    "as_iterable",
                    "iterate_batches"
                ],
                "_predict_generator": [
                    "self",
                    "mon_sess",
                    "predictions",
                    "feed_fn",
                    "iterate_batches"
                ],
                "_is_input_constant": [
                    "self",
                    "feed_fn",
                    "graph"
                ],
                "_filter_predictions": [
                    "self",
                    "predictions",
                    "outputs"
                ],
                "_train_model": [
                    "self",
                    "input_fn",
                    "hooks"
                ],
                "_call_legacy_get_predict_ops": [
                    "self",
                    "features"
                ],
                "_call_legacy_get_train_ops": [
                    "self",
                    "features",
                    "labels"
                ]
            },
            "Estimator": {
                "__init__": [
                    "self",
                    "model_fn",
                    "model_dir",
                    "config",
                    "params",
                    "feature_engineering_fn"
                ],
                "_call_model_fn": [
                    "self",
                    "features",
                    "labels",
                    "mode"
                ],
                "_get_train_ops": [
                    "self",
                    "features",
                    "labels"
                ],
                "_get_eval_ops": [
                    "self",
                    "features",
                    "labels",
                    "metrics"
                ],
                "_get_predict_ops": [
                    "self",
                    "features"
                ],
                "export_savedmodel": [
                    "self",
                    "export_dir_base",
                    "input_fn",
                    "default_output_alternative_key",
                    "assets_extra",
                    "as_text",
                    "exports_to_keep"
                ]
            },
            "_FeedFnHook": {
                "__init__": [
                    "self",
                    "feed_fn"
                ],
                "before_run": [
                    "self",
                    "run_context"
                ]
            },
            "SKCompat": {
                "__init__": [
                    "self",
                    "estimator"
                ],
                "fit": [
                    "self",
                    "x",
                    "y",
                    "batch_size",
                    "steps",
                    "max_steps",
                    "monitors"
                ],
                "score": [
                    "self",
                    "x",
                    "y",
                    "batch_size",
                    "steps",
                    "metrics"
                ],
                "predict": [
                    "self",
                    "x",
                    "batch_size",
                    "outputs"
                ]
            }
        },
        "tensorflow.contrib.learn.python.learn.estimators.svm": {
            "_as_iterable": [
                "preds",
                "output"
            ],
            "_get_metric_args": [
                "metric"
            ],
            "SVM": {
                "__init__": [
                    "self",
                    "example_id_column",
                    "feature_columns",
                    "weight_column_name",
                    "model_dir",
                    "l1_regularization",
                    "l2_regularization",
                    "num_loss_partitions",
                    "kernels",
                    "config",
                    "feature_engineering_fn"
                ],
                "model_dir": [
                    "self"
                ],
                "fit": [
                    "self",
                    "x",
                    "y",
                    "input_fn",
                    "steps",
                    "batch_size",
                    "monitors",
                    "max_steps"
                ],
                "evaluate": [
                    "self",
                    "x",
                    "y",
                    "input_fn",
                    "feed_fn",
                    "batch_size",
                    "steps",
                    "metrics",
                    "name",
                    "checkpoint_path",
                    "hooks"
                ],
                "predict": [
                    "self",
                    "x",
                    "input_fn",
                    "batch_size",
                    "as_iterable"
                ],
                "predict_proba": [
                    "self",
                    "x",
                    "input_fn",
                    "batch_size",
                    "outputs",
                    "as_iterable"
                ],
                "get_variable_names": [
                    "self"
                ],
                "export": [
                    "self",
                    "export_dir",
                    "signature_fn",
                    "input_fn",
                    "default_batch_size",
                    "exports_to_keep"
                ],
                "export_savedmodel": [
                    "self",
                    "export_dir_base",
                    "input_fn",
                    "default_output_alternative_key",
                    "assets_extra",
                    "as_text",
                    "exports_to_keep"
                ],
                "weights_": [
                    "self"
                ],
                "bias_": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.learn.python.learn.preprocessing": {},
        "tensorflow.contrib.learn.python.learn.preprocessing.categorical_vocabulary": {
            "CategoricalVocabulary": {
                "__init__": [
                    "self",
                    "unknown_token",
                    "support_reverse"
                ],
                "__len__": [
                    "self"
                ],
                "freeze": [
                    "self",
                    "freeze"
                ],
                "get": [
                    "self",
                    "category"
                ],
                "add": [
                    "self",
                    "category",
                    "count"
                ],
                "trim": [
                    "self",
                    "min_frequency",
                    "max_frequency"
                ],
                "reverse": [
                    "self",
                    "class_id"
                ]
            }
        },
        "tensorflow.contrib.learn.python.learn.preprocessing.categorical": {
            "CategoricalProcessor": {
                "__init__": [
                    "self",
                    "min_frequency",
                    "share",
                    "vocabularies"
                ],
                "freeze": [
                    "self",
                    "freeze"
                ],
                "fit": [
                    "self",
                    "x",
                    "unused_y"
                ],
                "fit_transform": [
                    "self",
                    "x",
                    "unused_y"
                ],
                "transform": [
                    "self",
                    "x"
                ]
            }
        },
        "tensorflow.contrib.learn.python.learn.preprocessing.text": {
            "tokenizer": [
                "iterator"
            ],
            "ByteProcessor": {
                "__init__": [
                    "self",
                    "max_document_length"
                ],
                "fit": [
                    "self",
                    "x"
                ],
                "fit_transform": [
                    "self",
                    "x"
                ],
                "reverse": [
                    "self",
                    "x"
                ],
                "transform": [
                    "self",
                    "x"
                ]
            },
            "VocabularyProcessor": {
                "__init__": [
                    "self",
                    "max_document_length",
                    "min_frequency",
                    "vocabulary",
                    "tokenizer_fn"
                ],
                "fit": [
                    "self",
                    "raw_documents",
                    "unused_y"
                ],
                "fit_transform": [
                    "self",
                    "raw_documents",
                    "unused_y"
                ],
                "transform": [
                    "self",
                    "raw_documents"
                ],
                "reverse": [
                    "self",
                    "documents"
                ],
                "save": [
                    "self",
                    "filename"
                ],
                "restore": [
                    "cls",
                    "filename"
                ]
            }
        },
        "tensorflow.contrib.learn.python.learn.preprocessing.tests": {},
        "tensorflow.contrib.learn.python.learn.tests": {},
        "tensorflow.contrib.learn.python.learn.tests.dataframe.mocks": {
            "MockTensor": {
                "__init__": [
                    "self",
                    "name",
                    "dtype"
                ],
                "name": [
                    "self"
                ],
                "dtype": [
                    "self"
                ],
                "get_shape": [
                    "self"
                ],
                "__repr__": [
                    "self"
                ],
                "__eq__": [
                    "self",
                    "other"
                ],
                "__ne__": [
                    "self",
                    "other"
                ]
            },
            "MockSparseTensor": {
                "__init__": [
                    "self",
                    "name",
                    "dtype"
                ],
                "name": [
                    "self"
                ],
                "dtype": [
                    "self"
                ],
                "get_shape": [
                    "self"
                ],
                "__repr__": [
                    "self"
                ],
                "__eq__": [
                    "self",
                    "other"
                ],
                "__ne__": [
                    "self",
                    "other"
                ]
            },
            "MockSeries": {
                "__init__": [
                    "self",
                    "cachekey",
                    "mock_tensor"
                ],
                "build": [
                    "self",
                    "cache"
                ],
                "__repr__": [
                    "self"
                ]
            },
            "MockTransform": {
                "__init__": [
                    "self",
                    "param_one",
                    "param_two"
                ],
                "name": [
                    "self"
                ],
                "param_one": [
                    "self"
                ],
                "param_two": [
                    "self"
                ],
                "input_valency": [
                    "self"
                ],
                "__eq__": [
                    "self",
                    "other"
                ],
                "__ne__": [
                    "self",
                    "other"
                ]
            },
            "MockZeroOutputTransform": {
                "__init__": [
                    "self",
                    "param_one",
                    "param_two"
                ],
                "_output_names": [
                    "self"
                ],
                "_apply_transform": [
                    "self",
                    "input_tensors"
                ]
            },
            "MockOneOutputTransform": {
                "__init__": [
                    "self",
                    "param_one",
                    "param_two"
                ],
                "_output_names": [
                    "self"
                ],
                "_apply_transform": [
                    "self",
                    "input_tensors"
                ]
            },
            "MockTwoOutputTransform": {
                "param_three": [
                    "self"
                ],
                "__init__": [
                    "self",
                    "param_one",
                    "param_two",
                    "param_three"
                ],
                "_output_names": [
                    "self"
                ],
                "_apply_transform": [
                    "self",
                    "input_tensors"
                ]
            },
            "Mock2x2Transform": {
                "__init__": [
                    "self",
                    "param_one",
                    "param_two",
                    "param_three"
                ],
                "_output_names": [
                    "self"
                ],
                "_apply_transform": [
                    "self",
                    "input_tensors"
                ],
                "input_valency": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.learn.python.learn.tests.dataframe": {},
        "tensorflow.contrib.integrate": {},
        "tensorflow.contrib.integrate.python": {},
        "tensorflow.contrib.integrate.python.ops": {},
        "tensorflow.contrib.integrate.python.ops.odes": {
            "_possibly_nonzero": [
                "x"
            ],
            "_scaled_dot_product": [
                "scale",
                "xs",
                "ys",
                "name"
            ],
            "_dot_product": [
                "xs",
                "ys",
                "name"
            ],
            "_runge_kutta_step": [
                "func",
                "y0",
                "f0",
                "t0",
                "dt",
                "tableau",
                "name"
            ],
            "_interp_fit": [
                "y0",
                "y1",
                "y_mid",
                "f0",
                "f1",
                "dt"
            ],
            "_interp_fit_rk": [
                "y0",
                "y1",
                "k",
                "dt",
                "tableau"
            ],
            "_interp_evaluate": [
                "coefficients",
                "t0",
                "t1",
                "t"
            ],
            "_optimal_step_size": [
                "last_step",
                "error_ratio",
                "safety",
                "ifactor",
                "dfactor",
                "order",
                "name"
            ],
            "_abs_square": [
                "x"
            ],
            "_ta_append": [
                "tensor_array",
                "value"
            ],
            "_dopri5": [
                "func",
                "y0",
                "t",
                "rtol",
                "atol",
                "full_output",
                "first_step",
                "safety",
                "ifactor",
                "dfactor",
                "max_num_steps",
                "name"
            ],
            "odeint": [
                "func",
                "y0",
                "t",
                "rtol",
                "atol",
                "method",
                "options",
                "full_output",
                "name"
            ],
            "_RungeKuttaState": {},
            "_History": {}
        },
        "tensorflow.contrib.deprecated": {},
        "tensorflow.contrib.cudnn_rnn": {},
        "tensorflow.contrib.cudnn_rnn.ops": {},
        "tensorflow.contrib.cudnn_rnn.ops.gen_cudnn_rnn_ops": {
            "cudnn_rnn": [
                "input",
                "input_h",
                "input_c",
                "params",
                "dropout",
                "rnn_mode",
                "input_mode",
                "direction",
                "seed",
                "seed2",
                "is_training",
                "name"
            ],
            "cudnn_rnn_backprop": [
                "input",
                "input_h",
                "input_c",
                "params",
                "output",
                "output_h",
                "output_c",
                "output_backprop",
                "output_h_backprop",
                "output_c_backprop",
                "reserve_space",
                "rnn_mode",
                "input_mode",
                "direction",
                "name"
            ],
            "cudnn_rnn_canonical_to_params": [
                "num_layers",
                "num_units",
                "input_size",
                "weights",
                "biases",
                "rnn_mode",
                "input_mode",
                "direction",
                "name"
            ],
            "cudnn_rnn_params_size": [
                "num_layers",
                "num_units",
                "input_size",
                "T",
                "S",
                "rnn_mode",
                "input_mode",
                "direction",
                "name"
            ],
            "cudnn_rnn_params_to_canonical": [
                "num_layers",
                "num_units",
                "input_size",
                "params",
                "num_params",
                "rnn_mode",
                "input_mode",
                "direction",
                "name"
            ],
            "_InitOpDefLibrary": []
        },
        "tensorflow.contrib.cudnn_rnn.python": {},
        "tensorflow.contrib.cudnn_rnn.python.ops": {},
        "tensorflow.contrib.cudnn_rnn.python.ops.cudnn_rnn_ops": {
            "_cudnn_rnn_backward": [
                "op"
            ],
            "RNNParamsSaveable": {
                "__init__": [
                    "self",
                    "params_to_canonical",
                    "canonical_to_params"
                ],
                "restore": [
                    "self",
                    "restored_tensors",
                    "restored_shapes"
                ]
            },
            "_CudnnRNN": {
                "__init__": [
                    "self",
                    "rnn_mode",
                    "num_layers",
                    "num_units",
                    "input_size",
                    "input_mode",
                    "direction",
                    "dropout",
                    "seed",
                    "seed2"
                ],
                "params_size": [
                    "self"
                ],
                "__call__": [
                    "self",
                    "input_data",
                    "input_h",
                    "input_c",
                    "params",
                    "is_training"
                ],
                "params_to_canonical": [
                    "self",
                    "params"
                ],
                "canonical_to_params": [
                    "self",
                    "weights",
                    "biases"
                ]
            },
            "CudnnLSTM": {
                "__init__": [
                    "self",
                    "num_layers",
                    "num_units",
                    "input_size",
                    "input_mode",
                    "direction",
                    "dropout",
                    "seed",
                    "seed2"
                ],
                "__call__": [
                    "self",
                    "input_data",
                    "input_h",
                    "input_c",
                    "params",
                    "is_training"
                ]
            },
            "_CudnnRNNNoInputC": {
                "__init__": [
                    "self",
                    "num_layers",
                    "num_units",
                    "input_size",
                    "input_mode",
                    "direction",
                    "dropout",
                    "seed",
                    "seed2"
                ],
                "__call__": [
                    "self",
                    "input_data",
                    "input_h",
                    "params",
                    "is_training"
                ]
            },
            "CudnnGRU": {},
            "CudnnRNNTanh": {},
            "CudnnRNNRelu": {}
        },
        "tensorflow.contrib.ffmpeg.ffmpeg_ops": {
            "decode_audio": [
                "contents",
                "file_format",
                "samples_per_second",
                "channel_count"
            ],
            "encode_audio": [
                "audio",
                "file_format",
                "samples_per_second"
            ],
            "_load_library": [
                "name",
                "op_list"
            ]
        },
        "tensorflow.contrib.ffmpeg": {},
        "tensorflow.contrib.ffmpeg.ops.gen_encode_audio_op_py": {
            "encode_audio": [
                "sampled_audio",
                "file_format",
                "samples_per_second",
                "bits_per_second",
                "name"
            ],
            "_InitOpDefLibrary": []
        },
        "tensorflow.contrib.ffmpeg.ops": {},
        "tensorflow.contrib.ffmpeg.ops.gen_decode_audio_op_py": {
            "decode_audio": [
                "contents",
                "file_format",
                "samples_per_second",
                "channel_count",
                "name"
            ],
            "_InitOpDefLibrary": []
        },
        "tensorflow.contrib.metrics": {},
        "tensorflow.contrib.metrics.python": {},
        "tensorflow.contrib.metrics.python.ops": {},
        "tensorflow.contrib.metrics.python.ops.metric_ops": {
            "_safe_div": [
                "numerator",
                "denominator",
                "name"
            ],
            "_safe_scalar_div": [
                "numerator",
                "denominator",
                "name"
            ],
            "_create_local": [
                "name",
                "shape",
                "collections",
                "validate_shape",
                "dtype"
            ],
            "_assert_weights_rank": [
                "weights",
                "values"
            ],
            "_count_condition": [
                "values",
                "weights",
                "metrics_collections",
                "updates_collections"
            ],
            "streaming_true_positives": [
                "predictions",
                "labels",
                "weights",
                "metrics_collections",
                "updates_collections",
                "name"
            ],
            "streaming_true_negatives": [
                "predictions",
                "labels",
                "weights",
                "metrics_collections",
                "updates_collections",
                "name"
            ],
            "streaming_false_positives": [
                "predictions",
                "labels",
                "weights",
                "metrics_collections",
                "updates_collections",
                "name"
            ],
            "streaming_false_negatives": [
                "predictions",
                "labels",
                "weights",
                "metrics_collections",
                "updates_collections",
                "name"
            ],
            "_broadcast_weights": [
                "weights",
                "values"
            ],
            "streaming_mean": [
                "values",
                "weights",
                "metrics_collections",
                "updates_collections",
                "name"
            ],
            "streaming_mean_tensor": [
                "values",
                "weights",
                "metrics_collections",
                "updates_collections",
                "name"
            ],
            "streaming_accuracy": [
                "predictions",
                "labels",
                "weights",
                "metrics_collections",
                "updates_collections",
                "name"
            ],
            "streaming_precision": [
                "predictions",
                "labels",
                "weights",
                "metrics_collections",
                "updates_collections",
                "name"
            ],
            "streaming_recall": [
                "predictions",
                "labels",
                "weights",
                "metrics_collections",
                "updates_collections",
                "name"
            ],
            "_streaming_confusion_matrix_at_thresholds": [
                "predictions",
                "labels",
                "thresholds",
                "weights",
                "includes"
            ],
            "streaming_true_positives_at_thresholds": [
                "predictions",
                "labels",
                "thresholds",
                "weights"
            ],
            "streaming_false_negatives_at_thresholds": [
                "predictions",
                "labels",
                "thresholds",
                "weights"
            ],
            "streaming_false_positives_at_thresholds": [
                "predictions",
                "labels",
                "thresholds",
                "weights"
            ],
            "streaming_true_negatives_at_thresholds": [
                "predictions",
                "labels",
                "thresholds",
                "weights"
            ],
            "streaming_auc": [
                "predictions",
                "labels",
                "weights",
                "num_thresholds",
                "metrics_collections",
                "updates_collections",
                "curve",
                "name"
            ],
            "streaming_specificity_at_sensitivity": [
                "predictions",
                "labels",
                "sensitivity",
                "weights",
                "num_thresholds",
                "metrics_collections",
                "updates_collections",
                "name"
            ],
            "streaming_sensitivity_at_specificity": [
                "predictions",
                "labels",
                "specificity",
                "weights",
                "num_thresholds",
                "metrics_collections",
                "updates_collections",
                "name"
            ],
            "streaming_precision_at_thresholds": [
                "predictions",
                "labels",
                "thresholds",
                "weights",
                "metrics_collections",
                "updates_collections",
                "name"
            ],
            "streaming_recall_at_thresholds": [
                "predictions",
                "labels",
                "thresholds",
                "weights",
                "metrics_collections",
                "updates_collections",
                "name"
            ],
            "_at_k_name": [
                "name",
                "k",
                "class_id"
            ],
            "streaming_recall_at_k": [
                "predictions",
                "labels",
                "k",
                "weights",
                "metrics_collections",
                "updates_collections",
                "name"
            ],
            "streaming_sparse_recall_at_k": [
                "predictions",
                "labels",
                "k",
                "class_id",
                "weights",
                "metrics_collections",
                "updates_collections",
                "name"
            ],
            "_streaming_sparse_precision_at_k": [
                "top_k_idx",
                "labels",
                "k",
                "class_id",
                "weights",
                "metrics_collections",
                "updates_collections",
                "name"
            ],
            "streaming_sparse_precision_at_k": [
                "predictions",
                "labels",
                "k",
                "class_id",
                "weights",
                "metrics_collections",
                "updates_collections",
                "name"
            ],
            "streaming_sparse_precision_at_top_k": [
                "top_k_predictions",
                "labels",
                "class_id",
                "weights",
                "metrics_collections",
                "updates_collections",
                "name"
            ],
            "num_relevant": [
                "labels",
                "k"
            ],
            "expand_and_tile": [
                "tensor",
                "multiple",
                "dim",
                "name"
            ],
            "sparse_average_precision_at_k": [
                "predictions",
                "labels",
                "k"
            ],
            "streaming_sparse_average_precision_at_k": [
                "predictions",
                "labels",
                "k",
                "weights",
                "metrics_collections",
                "updates_collections",
                "name"
            ],
            "_select_class_id": [
                "ids",
                "selected_id"
            ],
            "_maybe_select_class_id": [
                "labels",
                "predictions_idx",
                "selected_id"
            ],
            "_sparse_true_positive_at_k": [
                "predictions_idx",
                "labels",
                "class_id",
                "weights",
                "name"
            ],
            "_streaming_sparse_true_positive_at_k": [
                "predictions_idx",
                "labels",
                "k",
                "class_id",
                "weights",
                "name"
            ],
            "_sparse_false_positive_at_k": [
                "predictions_idx",
                "labels",
                "class_id",
                "weights"
            ],
            "_streaming_sparse_false_positive_at_k": [
                "predictions_idx",
                "labels",
                "k",
                "class_id",
                "weights",
                "name"
            ],
            "_sparse_false_negative_at_k": [
                "predictions_idx",
                "labels",
                "class_id",
                "weights"
            ],
            "_streaming_sparse_false_negative_at_k": [
                "predictions_idx",
                "labels",
                "k",
                "class_id",
                "weights",
                "name"
            ],
            "streaming_mean_absolute_error": [
                "predictions",
                "labels",
                "weights",
                "metrics_collections",
                "updates_collections",
                "name"
            ],
            "streaming_mean_relative_error": [
                "predictions",
                "labels",
                "normalizer",
                "weights",
                "metrics_collections",
                "updates_collections",
                "name"
            ],
            "streaming_mean_squared_error": [
                "predictions",
                "labels",
                "weights",
                "metrics_collections",
                "updates_collections",
                "name"
            ],
            "streaming_root_mean_squared_error": [
                "predictions",
                "labels",
                "weights",
                "metrics_collections",
                "updates_collections",
                "name"
            ],
            "streaming_covariance": [
                "predictions",
                "labels",
                "weights",
                "metrics_collections",
                "updates_collections",
                "name"
            ],
            "streaming_pearson_correlation": [
                "predictions",
                "labels",
                "weights",
                "metrics_collections",
                "updates_collections",
                "name"
            ],
            "streaming_mean_cosine_distance": [
                "predictions",
                "labels",
                "dim",
                "weights",
                "metrics_collections",
                "updates_collections",
                "name"
            ],
            "streaming_percentage_less": [
                "values",
                "threshold",
                "weights",
                "metrics_collections",
                "updates_collections",
                "name"
            ],
            "streaming_mean_iou": [
                "predictions",
                "labels",
                "num_classes",
                "weights",
                "metrics_collections",
                "updates_collections",
                "name"
            ],
            "_next_array_size": [
                "required_size",
                "growth_factor"
            ],
            "streaming_concat": [
                "values",
                "axis",
                "max_size",
                "metrics_collections",
                "updates_collections",
                "name"
            ],
            "aggregate_metrics": [],
            "aggregate_metric_map": [
                "names_to_tuples"
            ],
            "_remove_squeezable_dimensions": [
                "predictions",
                "labels",
                "weights"
            ]
        },
        "tensorflow.contrib.metrics.python.ops.confusion_matrix_ops": {
            "confusion_matrix": [
                "labels",
                "predictions",
                "num_classes",
                "dtype",
                "name",
                "weights"
            ]
        },
        "tensorflow.contrib.metrics.python.ops.set_ops": {},
        "tensorflow.contrib.metrics.python.ops.histogram_ops": {
            "auc_using_histogram": [
                "boolean_labels",
                "scores",
                "score_range",
                "nbins",
                "collections",
                "check_shape",
                "name"
            ],
            "_check_labels_and_scores": [
                "boolean_labels",
                "scores",
                "check_shape"
            ],
            "_make_auc_histograms": [
                "boolean_labels",
                "scores",
                "score_range",
                "nbins"
            ],
            "_auc_hist_accumulate": [
                "hist_true",
                "hist_false",
                "nbins",
                "collections"
            ],
            "_auc_convert_hist_to_auc": [
                "hist_true_acc",
                "hist_false_acc",
                "nbins"
            ],
            "_strict_1d_cumsum": [
                "tensor",
                "len_tensor"
            ],
            "_strict_conv1d": [
                "x",
                "h"
            ]
        },
        "tensorflow.contrib.metrics.python.metrics": {},
        "tensorflow.contrib.metrics.python.metrics.classification": {
            "accuracy": [
                "predictions",
                "labels",
                "weights"
            ]
        },
        "tensorflow.contrib.linalg": {},
        "tensorflow.contrib.linalg.python": {},
        "tensorflow.contrib.linalg.python.ops": {},
        "tensorflow.contrib.linalg.python.ops.linear_operator_test_util": {
            "random_positive_definite_matrix": [
                "shape",
                "dtype",
                "force_well_conditioned"
            ],
            "random_tril_matrix": [
                "shape",
                "dtype",
                "force_well_conditioned",
                "remove_upper"
            ],
            "random_normal": [
                "shape",
                "mean",
                "stddev",
                "dtype",
                "seed"
            ],
            "random_uniform": [
                "shape",
                "minval",
                "maxval",
                "dtype",
                "seed"
            ],
            "random_sign_uniform": [
                "shape",
                "minval",
                "maxval",
                "dtype",
                "seed"
            ],
            "LinearOperatorDerivedClassTest": {
                "assertAC": [
                    "self",
                    "x",
                    "y"
                ],
                "_dtypes_to_test": [
                    "self"
                ],
                "_shapes_to_test": [
                    "self"
                ],
                "_operator_and_mat_and_feed_dict": [
                    "self",
                    "shape",
                    "dtype",
                    "use_placeholder"
                ],
                "_make_rhs": [
                    "self",
                    "operator",
                    "adjoint"
                ],
                "_make_x": [
                    "self",
                    "operator",
                    "adjoint"
                ],
                "_tests_to_skip": [
                    "self"
                ],
                "_maybe_skip": [
                    "self",
                    "test_name"
                ],
                "test_to_dense": [
                    "self"
                ],
                "test_det": [
                    "self"
                ],
                "test_apply": [
                    "self"
                ],
                "test_solve": [
                    "self"
                ],
                "test_add_to_tensor": [
                    "self"
                ]
            },
            "SquareLinearOperatorDerivedClassTest": {
                "_shapes_to_test": [
                    "self"
                ],
                "_make_rhs": [
                    "self",
                    "operator",
                    "adjoint"
                ],
                "_make_x": [
                    "self",
                    "operator",
                    "adjoint"
                ],
                "_get_num_systems": [
                    "self",
                    "operator"
                ]
            },
            "NonSquareLinearOperatorDerivedClassTest": {
                "_tests_to_skip": [
                    "self"
                ],
                "_shapes_to_test": [
                    "self"
                ],
                "_make_rhs": [
                    "self",
                    "operator",
                    "adjoint"
                ],
                "_make_x": [
                    "self",
                    "operator",
                    "adjoint"
                ],
                "_get_num_systems": [
                    "self",
                    "operator"
                ]
            }
        },
        "tensorflow.contrib.linalg.python.ops.linear_operator_matrix": {
            "LinearOperatorMatrix": {
                "__init__": [
                    "self",
                    "matrix",
                    "is_non_singular",
                    "is_self_adjoint",
                    "is_positive_definite",
                    "name"
                ],
                "_shape": [
                    "self"
                ],
                "_shape_dynamic": [
                    "self"
                ],
                "_apply": [
                    "self",
                    "x",
                    "adjoint"
                ],
                "_determinant": [
                    "self"
                ],
                "_log_abs_determinant": [
                    "self"
                ],
                "_solve": [
                    "self",
                    "rhs",
                    "adjoint"
                ],
                "_to_dense": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.linalg.python.ops.linear_operator": {
            "LinearOperator": {
                "__init__": [
                    "self",
                    "dtype",
                    "graph_parents",
                    "is_non_singular",
                    "is_self_adjoint",
                    "is_positive_definite",
                    "name"
                ],
                "_name_scope": [
                    "self",
                    "name",
                    "values"
                ],
                "dtype": [
                    "self"
                ],
                "name": [
                    "self"
                ],
                "graph_parents": [
                    "self"
                ],
                "is_non_singular": [
                    "self"
                ],
                "is_self_adjoint": [
                    "self"
                ],
                "is_positive_definite": [
                    "self"
                ],
                "_shape": [
                    "self"
                ],
                "shape": [
                    "self"
                ],
                "_shape_dynamic": [
                    "self"
                ],
                "shape_dynamic": [
                    "self",
                    "name"
                ],
                "batch_shape": [
                    "self"
                ],
                "batch_shape_dynamic": [
                    "self",
                    "name"
                ],
                "tensor_rank": [
                    "self",
                    "name"
                ],
                "tensor_rank_dynamic": [
                    "self",
                    "name"
                ],
                "domain_dimension": [
                    "self"
                ],
                "domain_dimension_dynamic": [
                    "self",
                    "name"
                ],
                "range_dimension": [
                    "self"
                ],
                "range_dimension_dynamic": [
                    "self",
                    "name"
                ],
                "_assert_non_singular": [
                    "self"
                ],
                "assert_non_singular": [
                    "self",
                    "name"
                ],
                "_assert_positive_definite": [
                    "self"
                ],
                "assert_positive_definite": [
                    "self",
                    "name"
                ],
                "_assert_self_adjoint": [
                    "self"
                ],
                "assert_self_adjoint": [
                    "self",
                    "name"
                ],
                "_check_input_dtype": [
                    "self",
                    "arg"
                ],
                "_apply": [
                    "self",
                    "x",
                    "adjoint"
                ],
                "apply": [
                    "self",
                    "x",
                    "adjoint",
                    "name"
                ],
                "_determinant": [
                    "self"
                ],
                "determinant": [
                    "self",
                    "name"
                ],
                "_log_abs_determinant": [
                    "self"
                ],
                "log_abs_determinant": [
                    "self",
                    "name"
                ],
                "_solve": [
                    "self",
                    "rhs",
                    "adjoint"
                ],
                "solve": [
                    "self",
                    "rhs",
                    "adjoint",
                    "name"
                ],
                "_to_dense": [
                    "self"
                ],
                "to_dense": [
                    "self",
                    "name"
                ],
                "_add_to_tensor": [
                    "self",
                    "x"
                ],
                "add_to_tensor": [
                    "self",
                    "x",
                    "name"
                ]
            }
        },
        "tensorflow.contrib.linalg.python.ops.linear_operator_diag": {
            "LinearOperatorDiag": {
                "__init__": [
                    "self",
                    "diag",
                    "is_non_singular",
                    "is_self_adjoint",
                    "is_positive_definite",
                    "name"
                ],
                "_shape": [
                    "self"
                ],
                "_shape_dynamic": [
                    "self"
                ],
                "_assert_non_singular": [
                    "self"
                ],
                "_assert_positive_definite": [
                    "self"
                ],
                "_assert_self_adjoint": [
                    "self"
                ],
                "_apply": [
                    "self",
                    "x",
                    "adjoint"
                ],
                "_determinant": [
                    "self"
                ],
                "_log_abs_determinant": [
                    "self"
                ],
                "_solve": [
                    "self",
                    "rhs",
                    "adjoint"
                ],
                "_to_dense": [
                    "self"
                ],
                "_add_to_tensor": [
                    "self",
                    "x"
                ]
            }
        },
        "tensorflow.contrib.linalg.python.ops.linear_operator_tril": {
            "LinearOperatorTriL": {
                "__init__": [
                    "self",
                    "tril",
                    "is_non_singular",
                    "is_self_adjoint",
                    "is_positive_definite",
                    "name"
                ],
                "_shape": [
                    "self"
                ],
                "_shape_dynamic": [
                    "self"
                ],
                "_assert_non_singular": [
                    "self"
                ],
                "_assert_positive_definite": [
                    "self"
                ],
                "_apply": [
                    "self",
                    "x",
                    "adjoint"
                ],
                "_determinant": [
                    "self"
                ],
                "_log_abs_determinant": [
                    "self"
                ],
                "_solve": [
                    "self",
                    "rhs",
                    "adjoint"
                ],
                "_to_dense": [
                    "self"
                ],
                "_add_to_tensor": [
                    "self",
                    "x"
                ]
            }
        },
        "tensorflow.contrib.linalg.python.ops.linear_operator_identity": {
            "BaseLinearOperatorIdentity": {
                "_check_num_rows_possibly_add_asserts": [
                    "self"
                ]
            },
            "LinearOperatorIdentity": {
                "__init__": [
                    "self",
                    "num_rows",
                    "batch_shape",
                    "dtype",
                    "is_non_singular",
                    "is_self_adjoint",
                    "is_positive_definite",
                    "assert_proper_shapes",
                    "name"
                ],
                "_shape": [
                    "self"
                ],
                "_shape_dynamic": [
                    "self"
                ],
                "_assert_non_singular": [
                    "self"
                ],
                "_assert_positive_definite": [
                    "self"
                ],
                "_assert_self_adjoint": [
                    "self"
                ],
                "_possibly_broadcast_batch_shape": [
                    "self",
                    "x"
                ],
                "_apply": [
                    "self",
                    "x",
                    "adjoint"
                ],
                "_determinant": [
                    "self"
                ],
                "_log_abs_determinant": [
                    "self"
                ],
                "_solve": [
                    "self",
                    "rhs",
                    "adjoint"
                ],
                "add_to_tensor": [
                    "self",
                    "mat",
                    "name"
                ],
                "_check_num_rows_possibly_add_asserts": [
                    "self"
                ],
                "_check_batch_shape_possibly_add_asserts": [
                    "self"
                ]
            },
            "LinearOperatorScaledIdentity": {
                "__init__": [
                    "self",
                    "num_rows",
                    "multiplier",
                    "is_non_singular",
                    "is_self_adjoint",
                    "is_positive_definite",
                    "assert_proper_shapes",
                    "name"
                ],
                "_shape": [
                    "self"
                ],
                "_shape_dynamic": [
                    "self"
                ],
                "_assert_non_singular": [
                    "self"
                ],
                "_assert_positive_definite": [
                    "self"
                ],
                "_assert_self_adjoint": [
                    "self"
                ],
                "_apply": [
                    "self",
                    "x",
                    "adjoint"
                ],
                "_determinant": [
                    "self"
                ],
                "_log_abs_determinant": [
                    "self"
                ],
                "_solve": [
                    "self",
                    "rhs",
                    "adjoint"
                ],
                "add_to_tensor": [
                    "self",
                    "mat",
                    "name"
                ],
                "multiplier": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.linalg.python.ops.linear_operator_util": {
            "assert_no_entries_with_modulus_zero": [
                "x",
                "message",
                "name"
            ],
            "assert_zero_imag_part": [
                "x",
                "message",
                "name"
            ],
            "assert_compatible_matrix_dimensions": [
                "operator",
                "x"
            ],
            "shape_tensor": [
                "shape",
                "name"
            ]
        },
        "tensorflow.contrib.linalg.python.ops.linear_operator_composition": {
            "LinearOperatorComposition": {
                "__init__": [
                    "self",
                    "operators",
                    "is_non_singular",
                    "is_self_adjoint",
                    "is_positive_definite",
                    "name"
                ],
                "operators": [
                    "self"
                ],
                "_shape": [
                    "self"
                ],
                "_shape_dynamic": [
                    "self"
                ],
                "_apply": [
                    "self",
                    "x",
                    "adjoint"
                ],
                "_determinant": [
                    "self"
                ],
                "_log_abs_determinant": [
                    "self"
                ],
                "_solve": [
                    "self",
                    "rhs",
                    "adjoint"
                ],
                "_add_to_tensor": [
                    "self",
                    "x"
                ]
            }
        },
        "tensorflow.contrib.labeled_tensor": {},
        "tensorflow.contrib.labeled_tensor.python": {},
        "tensorflow.contrib.labeled_tensor.python.ops.nn": {},
        "tensorflow.contrib.labeled_tensor.python.ops": {},
        "tensorflow.contrib.labeled_tensor.python.ops.sugar": {
            "ReshapeCoder": {
                "__init__": [
                    "self",
                    "existing_axis_names",
                    "new_axes",
                    "name"
                ],
                "encode": [
                    "self",
                    "labeled_tensor"
                ],
                "decode": [
                    "self",
                    "labeled_tensor"
                ]
            }
        },
        "tensorflow.contrib.labeled_tensor.python.ops._typecheck": {
            "_replace_forward_references": [
                "t",
                "context"
            ],
            "register_type_abbreviation": [
                "name",
                "alias"
            ],
            "_type_repr": [
                "t"
            ],
            "accepts": [],
            "returns": [],
            "Type": {
                "__init__": [
                    "self"
                ],
                "__repr__": [
                    "self"
                ]
            },
            "_SingleArgumentType": {
                "__init__": [
                    "self",
                    "tpe"
                ],
                "_type": [
                    "self"
                ]
            },
            "_TwoArgumentType": {
                "__init__": [
                    "self",
                    "first_type",
                    "second_type"
                ]
            },
            "Union": {
                "__instancecheck__": [
                    "self",
                    "instance"
                ]
            },
            "Optional": {
                "__instancecheck__": [
                    "self",
                    "instance"
                ]
            },
            "List": {
                "__instancecheck__": [
                    "self",
                    "instance"
                ]
            },
            "Sequence": {
                "__instancecheck__": [
                    "self",
                    "instance"
                ]
            },
            "Collection": {
                "__instancecheck__": [
                    "self",
                    "instance"
                ]
            },
            "Tuple": {
                "__instancecheck__": [
                    "self",
                    "instance"
                ]
            },
            "Mapping": {
                "__instancecheck__": [
                    "self",
                    "instance"
                ]
            },
            "Dict": {
                "__instancecheck__": [
                    "self",
                    "instance"
                ]
            },
            "Error": {}
        },
        "tensorflow.contrib.labeled_tensor.python.ops.core_test": {
            "AxisTest": {
                "setUp": [
                    "self"
                ],
                "test_equality": [
                    "self"
                ],
                "test_axis_value": [
                    "self"
                ],
                "test_axis_input": [
                    "self"
                ],
                "test_axis_value_input": [
                    "self"
                ],
                "test_size": [
                    "self"
                ],
                "test_concat_single": [
                    "self"
                ],
                "test_concat_many": [
                    "self"
                ],
                "test_concat_different_names": [
                    "self"
                ],
                "test_concat_unknown": [
                    "self"
                ],
                "test_repr": [
                    "self"
                ],
                "test_invalid_input": [
                    "self"
                ],
                "test_as_axis": [
                    "self"
                ]
            },
            "AxesTest": {
                "setUp": [
                    "self"
                ],
                "test_equality": [
                    "self"
                ],
                "test_repr": [
                    "self"
                ],
                "test_remove": [
                    "self"
                ],
                "test_typecheck_error_message": [
                    "self"
                ]
            },
            "LabeledTensorTest": {
                "setUp": [
                    "self"
                ],
                "test_repr": [
                    "self"
                ],
                "test_reuse_existing_axes": [
                    "self"
                ],
                "test_reuse_existing_axis_objects": [
                    "self"
                ],
                "test_indexing_scalars": [
                    "self"
                ],
                "test_indexing_1d": [
                    "self"
                ],
                "test_indexing_slices": [
                    "self"
                ],
                "test_invalid_indexing": [
                    "self"
                ],
                "test_unknown_size": [
                    "self"
                ],
                "test_eq": [
                    "self"
                ],
                "test_hash": [
                    "self"
                ],
                "test_name": [
                    "self"
                ],
                "test_dtype": [
                    "self"
                ],
                "test_get_shape": [
                    "self"
                ],
                "test_convert_to_tensor": [
                    "self"
                ]
            },
            "Base": {
                "setUp": [
                    "self"
                ]
            },
            "IdentityTest": {
                "test_name": [
                    "self"
                ]
            },
            "SliceFunctionTest": {
                "test_name": [
                    "self"
                ],
                "test_scalar": [
                    "self"
                ],
                "test_slice": [
                    "self"
                ],
                "test_slices": [
                    "self"
                ],
                "test_slice_unlabeled": [
                    "self"
                ],
                "test_slice_unknown_shape": [
                    "self"
                ]
            },
            "TransposeTest": {
                "test_name": [
                    "self"
                ],
                "test_identity": [
                    "self"
                ],
                "test": [
                    "self"
                ],
                "test_default_axis_order": [
                    "self"
                ],
                "test_invalid_input": [
                    "self"
                ]
            },
            "ExpandDimsTest": {
                "test_name": [
                    "self"
                ],
                "test_identity": [
                    "self"
                ],
                "test": [
                    "self"
                ],
                "test_label": [
                    "self"
                ],
                "test_unknown_dimension": [
                    "self"
                ],
                "test_invalid_input": [
                    "self"
                ]
            },
            "AxisOrderScopeTest": {
                "test": [
                    "self"
                ]
            },
            "CheckAxisOrderTest": {
                "test_passes": [
                    "self"
                ],
                "test_invalid": [
                    "self"
                ],
                "test_scope": [
                    "self"
                ]
            },
            "ImposeAxisOrderTest": {
                "test_identity": [
                    "self"
                ],
                "test_reverse": [
                    "self"
                ],
                "test_scope": [
                    "self"
                ],
                "test_invalid": [
                    "self"
                ]
            },
            "FindConsistentOrderingTest": {
                "test": [
                    "self"
                ]
            },
            "AlignTest": {
                "test_name": [
                    "self"
                ],
                "test_identical_shaped_inputs": [
                    "self"
                ],
                "test_different_inputs": [
                    "self"
                ],
                "test_axis_order_scope": [
                    "self"
                ],
                "test_invalid_input": [
                    "self"
                ]
            },
            "ConvertToLabeledTensorTest": {
                "test_labeled_tensor": [
                    "self"
                ],
                "test_python_scalar": [
                    "self"
                ],
                "test_numpy_array": [
                    "self"
                ],
                "test_tensor": [
                    "self"
                ],
                "test_invalid_input": [
                    "self"
                ]
            },
            "DocStringCheckMixin": {
                "test_function_docstring_and_name": [
                    "self"
                ]
            },
            "UnaryOpsTestsMixin": {
                "test_core_op": [
                    "self"
                ],
                "test_infix": [
                    "self"
                ]
            },
            "CoreUnaryOpsTest": {
                "setUp": [
                    "self"
                ]
            },
            "LogicalNotTest": {
                "setUp": [
                    "self"
                ]
            },
            "BinaryOpsTestsMixin": {
                "test_core_op": [
                    "self"
                ],
                "test_infix": [
                    "self"
                ]
            },
            "CoreBinaryOpsTest": {
                "setUp": [
                    "self"
                ],
                "test_reflexive": [
                    "self"
                ]
            },
            "LogicalBinaryOpsTest": {
                "setUp": [
                    "self"
                ]
            },
            "FloatBinaryOpsTest": {
                "setUp": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.labeled_tensor.python.ops.ops": {
            "_gather_1d_on_axis": [
                "labeled_tensor",
                "indexer",
                "axis",
                "name"
            ],
            "select": [
                "labeled_tensor",
                "selection",
                "name"
            ],
            "concat": [
                "labeled_tensors",
                "axis_name",
                "name"
            ],
            "pack": [
                "labeled_tensors",
                "new_axis",
                "axis_position",
                "name"
            ],
            "unpack": [
                "labeled_tensor",
                "axis_name",
                "name"
            ],
            "reshape": [
                "labeled_tensor",
                "existing_axes",
                "new_axes",
                "name"
            ],
            "rename_axis": [
                "labeled_tensor",
                "existing_name",
                "new_name",
                "name"
            ],
            "_batch_helper": [
                "default_name",
                "batch_fn",
                "batch_size",
                "enqueue_many",
                "labeled_tensors",
                "allow_smaller_final_batch",
                "name"
            ],
            "batch": [
                "labeled_tensors",
                "batch_size",
                "num_threads",
                "capacity",
                "enqueue_many",
                "allow_smaller_final_batch",
                "name"
            ],
            "shuffle_batch": [
                "labeled_tensors",
                "batch_size",
                "num_threads",
                "capacity",
                "enqueue_many",
                "min_after_dequeue",
                "seed",
                "allow_smaller_final_batch",
                "name"
            ],
            "random_crop": [
                "labeled_tensor",
                "shape_map",
                "seed",
                "name"
            ],
            "map_fn": [
                "fn",
                "labeled_tensor",
                "name"
            ],
            "squeeze": [
                "labeled_tensor",
                "axis_names",
                "name"
            ],
            "matmul": [
                "a",
                "b",
                "name"
            ],
            "define_reduce_op": [
                "op_name",
                "reduce_fn"
            ],
            "tile": [
                "labeled_tensor",
                "multiples",
                "name"
            ],
            "pad": [
                "labeled_tensor",
                "paddings",
                "mode",
                "name"
            ],
            "constant": [
                "value",
                "dtype",
                "axes",
                "name"
            ],
            "zeros_like": [
                "labeled_tensor",
                "dtype",
                "name"
            ],
            "ones_like": [
                "labeled_tensor",
                "dtype",
                "name"
            ],
            "cast": [
                "labeled_tensor",
                "dtype",
                "name"
            ],
            "verify_tensor_all_finite": [
                "labeled_tensor",
                "message",
                "name"
            ],
            "boolean_mask": [
                "labeled_tensor",
                "mask",
                "name"
            ],
            "where": [
                "condition",
                "x",
                "y",
                "name"
            ]
        },
        "tensorflow.contrib.labeled_tensor.python.ops.ops_test": {
            "Base": {
                "setUp": [
                    "self"
                ]
            },
            "SelectTest": {
                "test_name": [
                    "self"
                ],
                "test_scalar": [
                    "self"
                ],
                "test_slice": [
                    "self"
                ],
                "test_slices": [
                    "self"
                ],
                "test_list": [
                    "self"
                ],
                "test_list_one_item": [
                    "self"
                ],
                "test_list_zero_items": [
                    "self"
                ],
                "test_scalars": [
                    "self"
                ],
                "test_invalid_input": [
                    "self"
                ]
            },
            "ConcatTest": {
                "setUp": [
                    "self"
                ],
                "test_name": [
                    "self"
                ],
                "test": [
                    "self"
                ],
                "test_transposed": [
                    "self"
                ],
                "test_invalid_input": [
                    "self"
                ]
            },
            "PackTest": {
                "test_name": [
                    "self"
                ],
                "test": [
                    "self"
                ],
                "test_axis": [
                    "self"
                ],
                "test_invalid_input": [
                    "self"
                ]
            },
            "UnpackTest": {
                "test_name": [
                    "self"
                ],
                "test": [
                    "self"
                ],
                "test_axis": [
                    "self"
                ],
                "test_invalid_input": [
                    "self"
                ]
            },
            "ReshapeTest": {
                "test_name": [
                    "self"
                ],
                "test_identity": [
                    "self"
                ],
                "test_known_size": [
                    "self"
                ],
                "test_unknown_size": [
                    "self"
                ],
                "test_unknown_dimension": [
                    "self"
                ],
                "test_with_labels": [
                    "self"
                ],
                "test_invalid_input": [
                    "self"
                ]
            },
            "RenameAxisTest": {
                "test_name": [
                    "self"
                ],
                "test_identity": [
                    "self"
                ],
                "test_new_name": [
                    "self"
                ],
                "test_invalid_input": [
                    "self"
                ]
            },
            "BatchTest": {
                "setUp": [
                    "self"
                ],
                "test_name": [
                    "self"
                ],
                "test_enqueue_many": [
                    "self"
                ],
                "test_no_enqueue_many": [
                    "self"
                ],
                "test_invalid_input": [
                    "self"
                ],
                "test_allow_smaller_final_batch": [
                    "self"
                ]
            },
            "ShuffleBatchTest": {
                "setUp": [
                    "self"
                ],
                "test_name": [
                    "self"
                ],
                "test_enqueue_many": [
                    "self"
                ],
                "test_allow_smaller_final_batch": [
                    "self"
                ]
            },
            "RandomCropTest": {
                "test_name": [
                    "self"
                ],
                "test_single": [
                    "self"
                ],
                "test_double": [
                    "self"
                ],
                "test_size1": [
                    "self"
                ],
                "test_different_seeds": [
                    "self"
                ],
                "test_identical_seeds": [
                    "self"
                ],
                "test_crop_idempotent": [
                    "self"
                ],
                "test_invalid_input": [
                    "self"
                ]
            },
            "MapFnTest": {
                "test_name": [
                    "self"
                ],
                "test_identity": [
                    "self"
                ],
                "test_callable_object": [
                    "self"
                ],
                "test_slice": [
                    "self"
                ]
            },
            "SqueezeTest": {
                "setUp": [
                    "self"
                ],
                "test_name": [
                    "self"
                ],
                "test_none": [
                    "self"
                ],
                "test": [
                    "self"
                ],
                "test_invalid_input": [
                    "self"
                ]
            },
            "MatMulTest": {
                "test_name": [
                    "self"
                ],
                "test_vector_vector": [
                    "self"
                ],
                "test_matrix_vector": [
                    "self"
                ],
                "test_matrix_matrix": [
                    "self"
                ],
                "test_matrix_matrix_axis_order": [
                    "self"
                ],
                "test_invalid": [
                    "self"
                ]
            },
            "ReduceSumTest": {
                "test_name": [
                    "self"
                ],
                "test_drop_axis": [
                    "self"
                ],
                "test_drop_scalar_axis": [
                    "self"
                ],
                "test_keep_axis": [
                    "self"
                ],
                "test_keep_scalar_axis": [
                    "self"
                ],
                "test_scalar": [
                    "self"
                ],
                "test_empty_list": [
                    "self"
                ],
                "test_none": [
                    "self"
                ],
                "test_function_docstring_and_name": [
                    "self"
                ]
            },
            "ReduceMeanTest": {
                "test_name": [
                    "self"
                ],
                "test": [
                    "self"
                ]
            },
            "ReduceProdTest": {
                "test_name": [
                    "self"
                ],
                "test": [
                    "self"
                ]
            },
            "ReduceMinTest": {
                "test_name": [
                    "self"
                ],
                "test": [
                    "self"
                ]
            },
            "ReduceMaxTest": {
                "test_name": [
                    "self"
                ],
                "test": [
                    "self"
                ]
            },
            "BaseReduceBoolean": {
                "setUp": [
                    "self"
                ]
            },
            "ReduceAllTest": {
                "test_name": [
                    "self"
                ],
                "test": [
                    "self"
                ]
            },
            "ReduceAnyTest": {
                "test_name": [
                    "self"
                ],
                "test": [
                    "self"
                ]
            },
            "TileTest": {
                "test_name": [
                    "self"
                ],
                "test": [
                    "self"
                ],
                "test_invalid_input": [
                    "self"
                ]
            },
            "PadTest": {
                "test_name": [
                    "self"
                ],
                "test": [
                    "self"
                ],
                "test_invalid_input": [
                    "self"
                ]
            },
            "ConstantTest": {
                "test_name": [
                    "self"
                ],
                "test_scalar": [
                    "self"
                ],
                "test_infer_shape": [
                    "self"
                ],
                "test_specify_shape": [
                    "self"
                ],
                "test_existing_axes": [
                    "self"
                ]
            },
            "ZerosLikeTest": {
                "test_name": [
                    "self"
                ],
                "test": [
                    "self"
                ]
            },
            "OnesLikeTest": {
                "test_name": [
                    "self"
                ],
                "test": [
                    "self"
                ]
            },
            "CastTest": {
                "test_name": [
                    "self"
                ],
                "test": [
                    "self"
                ]
            },
            "VerifyTensorAllFiniteTest": {
                "setUp": [
                    "self"
                ],
                "test_name": [
                    "self"
                ],
                "test_finite": [
                    "self"
                ],
                "test_nan": [
                    "self"
                ]
            },
            "BooleanMaskTest": {
                "test_name": [
                    "self"
                ],
                "test": [
                    "self"
                ],
                "test_invalid_rank": [
                    "self"
                ],
                "test_mismatched_axis": [
                    "self"
                ]
            },
            "WhereTest": {
                "test_name": [
                    "self"
                ],
                "test": [
                    "self"
                ],
                "test_mismatched_axes": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.labeled_tensor.python.ops.io_ops": {
            "_labeled_to_unlabeled_features": [
                "features"
            ],
            "parse_example": [
                "serialized",
                "features",
                "name",
                "example_names"
            ],
            "parse_single_example": [
                "serialized",
                "features",
                "name",
                "example_names"
            ],
            "placeholder": [
                "dtype",
                "axes",
                "name"
            ],
            "FixedLenFeature": {
                "__init__": [
                    "self",
                    "axes",
                    "dtype",
                    "default_value"
                ],
                "axes": [
                    "self"
                ],
                "dtype": [
                    "self"
                ],
                "default_value": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.labeled_tensor.python.ops.nn_test": {
            "NNTests": {
                "setUp": [
                    "self"
                ],
                "test_unary_ops": [
                    "self"
                ],
                "test_binary_ops": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.labeled_tensor.python.ops.core": {
            "as_axis": [
                "axis_data"
            ],
            "_convert_labeled_tensor_to_tensor": [
                "value"
            ],
            "convert_to_labeled_tensor": [
                "value",
                "dtype",
                "name"
            ],
            "concat_axes": [
                "axes"
            ],
            "identity": [
                "labeled_tensor",
                "name"
            ],
            "slice_function": [
                "labeled_tensor",
                "selection",
                "name"
            ],
            "transpose": [
                "labeled_tensor",
                "axis_order",
                "name"
            ],
            "expand_dims": [
                "labeled_tensor",
                "axes",
                "name"
            ],
            "get_axis_order": [],
            "_set_axis_order": [
                "axis_order"
            ],
            "axis_order_scope": [
                "axis_order"
            ],
            "_get_valid_axis_order": [],
            "check_axis_order": [
                "labeled_tensor",
                "axis_order"
            ],
            "impose_axis_order": [
                "labeled_tensor",
                "axis_order",
                "name"
            ],
            "_find_consistent_ordering": [
                "a",
                "b"
            ],
            "align": [
                "labeled_tensor_0",
                "labeled_tensor_1",
                "name"
            ],
            "define_unary_op": [
                "op_name",
                "elementwise_function"
            ],
            "define_binary_op": [
                "op_name",
                "elementwise_function"
            ],
            "Axis": {
                "__init__": [
                    "self",
                    "name",
                    "value"
                ],
                "name": [
                    "self"
                ],
                "__repr__": [
                    "self"
                ],
                "__eq__": [
                    "self",
                    "other"
                ],
                "__hash__": [
                    "self"
                ],
                "__ne__": [
                    "self",
                    "other"
                ],
                "__len__": [
                    "self"
                ],
                "dimension": [
                    "self"
                ],
                "size": [
                    "self"
                ],
                "value": [
                    "self"
                ],
                "labels": [
                    "self"
                ],
                "index": [
                    "self",
                    "value"
                ]
            },
            "Axes": {
                "__init__": [
                    "self",
                    "axes"
                ],
                "__iter__": [
                    "self"
                ],
                "__repr__": [
                    "self"
                ],
                "__getitem__": [
                    "self",
                    "name"
                ],
                "__contains__": [
                    "self",
                    "name"
                ],
                "__len__": [
                    "self"
                ],
                "__hash__": [
                    "self"
                ],
                "remove": [
                    "self",
                    "axis_name"
                ]
            },
            "LabeledTensor": {
                "__init__": [
                    "self",
                    "tensor",
                    "axes"
                ],
                "__repr__": [
                    "self"
                ],
                "tensor": [
                    "self"
                ],
                "_as_graph_element": [
                    "self"
                ],
                "axes": [
                    "self"
                ],
                "dtype": [
                    "self"
                ],
                "name": [
                    "self"
                ],
                "get_shape": [
                    "self"
                ],
                "__getitem__": [
                    "self",
                    "key"
                ],
                "__abs__": [
                    "self"
                ],
                "__neg__": [
                    "self"
                ],
                "__pos__": [
                    "self"
                ],
                "__add__": [
                    "self",
                    "other"
                ],
                "__radd__": [
                    "self",
                    "other"
                ],
                "__sub__": [
                    "self",
                    "other"
                ],
                "__rsub__": [
                    "self",
                    "other"
                ],
                "__mul__": [
                    "self",
                    "other"
                ],
                "__rmul__": [
                    "self",
                    "other"
                ],
                "__truediv__": [
                    "self",
                    "other"
                ],
                "__rtruediv__": [
                    "self",
                    "other"
                ],
                "__mod__": [
                    "self",
                    "other"
                ],
                "__rmod__": [
                    "self",
                    "other"
                ],
                "__pow__": [
                    "self",
                    "other"
                ],
                "__rpow__": [
                    "self",
                    "other"
                ],
                "__invert__": [
                    "self"
                ],
                "__and__": [
                    "self",
                    "other"
                ],
                "__or__": [
                    "self",
                    "other"
                ],
                "__xor__": [
                    "self",
                    "other"
                ],
                "__lt__": [
                    "self",
                    "other"
                ],
                "__le__": [
                    "self",
                    "other"
                ],
                "__gt__": [
                    "self",
                    "other"
                ],
                "__ge__": [
                    "self",
                    "other"
                ],
                "__eq__": [
                    "self",
                    "other"
                ],
                "__ne__": [
                    "self",
                    "other"
                ],
                "__hash__": [
                    "self"
                ]
            },
            "AxisOrderError": {}
        },
        "tensorflow.contrib.labeled_tensor.python.ops.sugar_test": {
            "Base": {
                "setUp": [
                    "self"
                ]
            },
            "ReshapeCoderTest": {
                "setUp": [
                    "self"
                ],
                "test_name": [
                    "self"
                ],
                "test_bijection_flat": [
                    "self"
                ],
                "test_bijection_with_labels": [
                    "self"
                ],
                "test_invalid_input": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.labeled_tensor.python.ops.io_ops_test": {
            "ParseBase": {
                "setUp": [
                    "self"
                ]
            },
            "TestParseExample": {
                "test": [
                    "self"
                ],
                "test_placeholder": [
                    "self"
                ]
            },
            "TestParseSingleExample": {
                "test": [
                    "self"
                ],
                "test_unknown_size": [
                    "self"
                ]
            },
            "PlaceholderTest": {
                "test_name": [
                    "self"
                ],
                "test": [
                    "self"
                ],
                "test_feed": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.labeled_tensor.python.ops.test_util": {
            "Base": {
                "eval": [
                    "self",
                    "tensors"
                ],
                "assertTensorsEqual": [
                    "self",
                    "tensor_0",
                    "tensor_1"
                ],
                "assertLabeledTensorsEqual": [
                    "self",
                    "tensor_0",
                    "tensor_1"
                ]
            }
        },
        "tensorflow.contrib.factorization": {},
        "tensorflow.contrib.factorization.python": {},
        "tensorflow.contrib.factorization.python.ops.gmm_ops": {
            "_covariance": [
                "x",
                "diag"
            ],
            "_init_clusters_random": [
                "data",
                "num_clusters",
                "random_seed"
            ],
            "gmm": [
                "inp",
                "initial_clusters",
                "num_clusters",
                "random_seed",
                "covariance_type",
                "params"
            ],
            "GmmAlgorithm": {
                "__init__": [
                    "self",
                    "data",
                    "num_classes",
                    "initial_means",
                    "params",
                    "covariance_type",
                    "random_seed"
                ],
                "_create_variables": [
                    "self",
                    "data",
                    "initial_means"
                ],
                "training_ops": [
                    "self"
                ],
                "alphas": [
                    "self"
                ],
                "clusters": [
                    "self"
                ],
                "covariances": [
                    "self"
                ],
                "assignments": [
                    "self"
                ],
                "scores": [
                    "self"
                ],
                "_define_graph": [
                    "self",
                    "data"
                ],
                "_define_full_covariance_probs": [
                    "self",
                    "shard_id",
                    "shard"
                ],
                "_define_diag_covariance_probs": [
                    "self",
                    "shard_id",
                    "shard"
                ],
                "_define_log_prob_operation": [
                    "self",
                    "shard_id",
                    "shard"
                ],
                "_define_prior_log_prob_operation": [
                    "self",
                    "shard_id"
                ],
                "_define_expectation_operation": [
                    "self",
                    "shard_id"
                ],
                "_define_partial_maximization_operation": [
                    "self",
                    "shard_id",
                    "shard"
                ],
                "_define_maximization_operation": [
                    "self",
                    "num_batches"
                ],
                "_define_distance_to_clusters": [
                    "self",
                    "data"
                ],
                "_define_loglikelihood_operation": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.factorization.python.ops.gmm": {
            "_streaming_sum": [
                "scalar_tensor"
            ],
            "_legacy_train_model": [
                "estimator",
                "input_fn",
                "steps",
                "feed_fn",
                "init_op",
                "init_feed_fn",
                "init_fn",
                "device_fn",
                "monitors",
                "log_every_steps",
                "fail_on_nan_loss",
                "max_steps"
            ],
            "GMM": {
                "__init__": [
                    "self",
                    "num_clusters",
                    "model_dir",
                    "random_seed",
                    "params",
                    "initial_clusters",
                    "covariance_type",
                    "batch_size",
                    "steps",
                    "continue_training",
                    "config",
                    "verbose"
                ],
                "fit": [
                    "self",
                    "x",
                    "y",
                    "monitors",
                    "logdir",
                    "steps"
                ],
                "predict": [
                    "self",
                    "x",
                    "batch_size"
                ],
                "score": [
                    "self",
                    "x",
                    "batch_size"
                ],
                "transform": [
                    "self",
                    "x",
                    "batch_size"
                ],
                "clusters": [
                    "self"
                ],
                "covariances": [
                    "self"
                ],
                "_parse_tensor_or_dict": [
                    "self",
                    "features"
                ],
                "_get_train_ops": [
                    "self",
                    "features",
                    "_"
                ],
                "_get_predict_ops": [
                    "self",
                    "features"
                ],
                "_get_eval_ops": [
                    "self",
                    "features",
                    "_",
                    "unused_metrics"
                ]
            }
        },
        "tensorflow.contrib.factorization.python.ops": {},
        "tensorflow.contrib.factorization.python.ops.gen_factorization_ops": {
            "wals_compute_partial_lhs_and_rhs": [
                "factors",
                "factor_weights",
                "unobserved_weights",
                "input_weights",
                "input_indices",
                "input_values",
                "input_block_size",
                "input_is_transpose",
                "name"
            ],
            "_InitOpDefLibrary": []
        },
        "tensorflow.contrib.factorization.python.ops.factorization_ops": {
            "WALSModel": {
                "__init__": [
                    "self",
                    "input_rows",
                    "input_cols",
                    "n_components",
                    "unobserved_weight",
                    "regularization",
                    "row_init",
                    "col_init",
                    "num_row_shards",
                    "num_col_shards",
                    "row_weights",
                    "col_weights",
                    "use_factors_weights_cache"
                ],
                "row_factors": [
                    "self"
                ],
                "col_factors": [
                    "self"
                ],
                "row_weights": [
                    "self"
                ],
                "col_weights": [
                    "self"
                ],
                "initialize_op": [
                    "self"
                ],
                "_shard_sizes": [
                    "cls",
                    "dims",
                    "num_shards"
                ],
                "_create_factors": [
                    "cls",
                    "rows",
                    "cols",
                    "num_shards",
                    "init",
                    "name"
                ],
                "_create_weights": [
                    "cls",
                    "wt_init",
                    "num_wts",
                    "num_shards",
                    "name"
                ],
                "_create_gramian": [
                    "n_components",
                    "name"
                ],
                "_transient_var": [
                    "name"
                ],
                "_prepare_gramian": [
                    "self",
                    "factors",
                    "gramian"
                ],
                "_cached_copy": [
                    "self",
                    "var",
                    "name",
                    "pass_through"
                ],
                "_create_transient_vars": [
                    "self"
                ],
                "worker_init": [
                    "self"
                ],
                "row_update_prep_gramian_op": [
                    "self"
                ],
                "col_update_prep_gramian_op": [
                    "self"
                ],
                "initialize_row_update_op": [
                    "self"
                ],
                "initialize_col_update_op": [
                    "self"
                ],
                "_get_sharding_func": [
                    "size",
                    "num_shards"
                ],
                "scatter_update": [
                    "cls",
                    "factor",
                    "indices",
                    "values",
                    "sharding_func"
                ],
                "update_row_factors": [
                    "self",
                    "sp_input",
                    "transpose_input"
                ],
                "update_col_factors": [
                    "self",
                    "sp_input",
                    "transpose_input"
                ],
                "project_row_factors": [
                    "self",
                    "sp_input",
                    "transpose_input",
                    "projection_weights"
                ],
                "project_col_factors": [
                    "self",
                    "sp_input",
                    "transpose_input",
                    "projection_weights"
                ],
                "_process_input_helper": [
                    "self",
                    "update_row_factors",
                    "sp_input",
                    "transpose_input",
                    "row_weights"
                ]
            }
        },
        "tensorflow.contrib.factorization.python.ops.gen_clustering_ops": {
            "kmeans_plus_plus_initialization": [
                "points",
                "num_to_sample",
                "seed",
                "num_retries_per_sample",
                "name"
            ],
            "nearest_neighbors": [
                "points",
                "centers",
                "k",
                "name"
            ],
            "_InitOpDefLibrary": []
        },
        "tensorflow.contrib.factorization.python.ops.clustering_ops": {
            "KMeans": {
                "__init__": [
                    "self",
                    "inputs",
                    "num_clusters",
                    "initial_clusters",
                    "distance_metric",
                    "use_mini_batch",
                    "random_seed",
                    "kmeans_plus_plus_num_retries"
                ],
                "_distance_graph": [
                    "cls",
                    "inputs",
                    "clusters",
                    "distance_metric"
                ],
                "_compute_euclidean_distance": [
                    "cls",
                    "inputs",
                    "clusters"
                ],
                "_compute_cosine_distance": [
                    "cls",
                    "inputs",
                    "clusters",
                    "inputs_normalized"
                ],
                "_infer_graph": [
                    "self",
                    "inputs",
                    "clusters"
                ],
                "_init_clusters_random": [
                    "self"
                ],
                "_clusters_l2_normalized": [
                    "self"
                ],
                "_init_clusters": [
                    "self"
                ],
                "_l2_normalize_data": [
                    "cls",
                    "inputs"
                ],
                "training_graph": [
                    "self"
                ],
                "_mini_batch_training_op": [
                    "self",
                    "inputs",
                    "cluster_idx_list",
                    "cluster_centers",
                    "cluster_centers_var",
                    "total_counts"
                ],
                "_full_batch_training_op": [
                    "self",
                    "inputs",
                    "cluster_idx_list",
                    "cluster_centers"
                ]
            }
        },
        "tensorflow.contrib.solvers": {},
        "tensorflow.contrib.solvers.python": {},
        "tensorflow.contrib.solvers.python.ops": {},
        "tensorflow.contrib.solvers.python.ops.linear_equations": {
            "conjugate_gradient": [
                "operator",
                "rhs",
                "tol",
                "max_iter",
                "name"
            ]
        },
        "tensorflow.contrib.solvers.python.ops.util": {
            "create_operator": [
                "matrix"
            ],
            "dot": [
                "x",
                "y"
            ],
            "l2norm_squared": [
                "v"
            ],
            "l2norm": [
                "v"
            ],
            "l2normalize": [
                "v"
            ]
        },
        "tensorflow.contrib.solvers.python.ops.least_squares": {
            "cgls": [
                "operator",
                "rhs",
                "tol",
                "max_iter",
                "name"
            ]
        },
        "tensorflow.contrib.solvers.python.ops.lanczos": {
            "lanczos_bidiag": [
                "operator",
                "k",
                "orthogonalize",
                "starting_vector",
                "name"
            ],
            "bidiag_matmul": [
                "matrix",
                "alpha",
                "beta",
                "adjoint_b",
                "name"
            ]
        },
        "tensorflow.contrib.input_pipeline": {},
        "tensorflow.contrib.input_pipeline.ops": {},
        "tensorflow.contrib.input_pipeline.ops.gen_input_pipeline_ops": {
            "obtain_next": [
                "list",
                "counter",
                "name"
            ],
            "_InitOpDefLibrary": []
        },
        "tensorflow.contrib.input_pipeline.python": {},
        "tensorflow.contrib.input_pipeline.python.ops": {},
        "tensorflow.contrib.input_pipeline.python.ops.input_pipeline_ops_test": {
            "InputPipelineOpsTest": {
                "testObtainNext": [
                    "self"
                ],
                "testSeekNext": [
                    "self"
                ],
                "_assert_output": [
                    "self",
                    "expected_list",
                    "session",
                    "op"
                ],
                "testSeekNextLimitEpochs": [
                    "self"
                ],
                "testSeekNextLimitEpochsTwo": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.input_pipeline.python.ops.input_pipeline_ops": {
            "obtain_next": [
                "string_list_tensor",
                "counter"
            ],
            "_maybe_randomize_list": [
                "string_list",
                "shuffle"
            ],
            "_create_list": [
                "string_list",
                "shuffle",
                "seed",
                "num_epochs"
            ],
            "seek_next": [
                "string_list",
                "shuffle",
                "seed",
                "num_epochs"
            ]
        },
        "tensorflow.contrib.stat_summarizer": {},
        "tensorflow.contrib.losses": {},
        "tensorflow.contrib.losses.python": {},
        "tensorflow.contrib.losses.python.losses": {},
        "tensorflow.contrib.losses.python.losses.loss_ops": {
            "_scale_losses": [
                "losses",
                "weights"
            ],
            "_safe_div": [
                "numerator",
                "denominator",
                "name"
            ],
            "_safe_mean": [
                "losses",
                "num_present"
            ],
            "compute_weighted_loss": [
                "losses",
                "weights",
                "scope"
            ],
            "_num_present": [
                "losses",
                "weights",
                "per_batch"
            ],
            "add_loss": [
                "loss",
                "loss_collection"
            ],
            "get_losses": [
                "scope",
                "loss_collection"
            ],
            "get_regularization_losses": [
                "scope"
            ],
            "get_total_loss": [
                "add_regularization_losses",
                "name"
            ],
            "absolute_difference": [
                "predictions",
                "labels",
                "weights",
                "scope"
            ],
            "sigmoid_cross_entropy": [
                "logits",
                "multi_class_labels",
                "weights",
                "label_smoothing",
                "scope"
            ],
            "softmax_cross_entropy": [
                "logits",
                "onehot_labels",
                "weights",
                "label_smoothing",
                "scope"
            ],
            "sparse_softmax_cross_entropy": [
                "logits",
                "labels",
                "weights",
                "scope"
            ],
            "log_loss": [
                "predictions",
                "labels",
                "weights",
                "epsilon",
                "scope"
            ],
            "hinge_loss": [
                "logits",
                "labels",
                "scope"
            ],
            "mean_squared_error": [
                "predictions",
                "labels",
                "weights",
                "scope"
            ],
            "mean_pairwise_squared_error": [
                "predictions",
                "labels",
                "weights",
                "scope"
            ],
            "cosine_distance": [
                "predictions",
                "labels",
                "dim",
                "weights",
                "scope"
            ]
        },
        "tensorflow.contrib.framework": {},
        "tensorflow.contrib.framework.python": {},
        "tensorflow.contrib.framework.python.ops": {},
        "tensorflow.contrib.framework.python.ops.gen_variable_ops": {
            "zero_initializer": [
                "ref",
                "name"
            ],
            "_InitOpDefLibrary": []
        },
        "tensorflow.contrib.framework.python.ops.ops": {
            "get_graph_from_inputs": [
                "op_input_list",
                "graph"
            ]
        },
        "tensorflow.contrib.framework.python.ops.prettyprint_ops": {
            "_get_tensor_repr": [
                "t",
                "print_tensor_name",
                "print_tensor_type",
                "print_shape",
                "summarize_indicator_vector"
            ],
            "print_op": [
                "input_",
                "data",
                "message",
                "first_n",
                "summarize",
                "print_tensor_name",
                "print_tensor_type",
                "print_shape",
                "summarize_indicator_vector",
                "name"
            ]
        },
        "tensorflow.contrib.framework.python.ops.variables": {
            "zero_initializer": [
                "ref",
                "use_locking",
                "name"
            ],
            "assert_global_step": [
                "global_step_tensor"
            ],
            "assert_or_get_global_step": [
                "graph",
                "global_step_tensor"
            ],
            "get_global_step": [
                "graph"
            ],
            "create_global_step": [
                "graph"
            ],
            "get_or_create_global_step": [
                "graph"
            ],
            "local_variable": [
                "initial_value",
                "validate_shape",
                "name"
            ],
            "variable": [
                "name",
                "shape",
                "dtype",
                "initializer",
                "regularizer",
                "trainable",
                "collections",
                "caching_device",
                "device",
                "partitioner",
                "custom_getter"
            ],
            "model_variable": [
                "name",
                "shape",
                "dtype",
                "initializer",
                "regularizer",
                "trainable",
                "collections",
                "caching_device",
                "device",
                "partitioner",
                "custom_getter"
            ],
            "add_model_variable": [
                "var"
            ],
            "get_variables": [
                "scope",
                "suffix",
                "collection"
            ],
            "get_model_variables": [
                "scope",
                "suffix"
            ],
            "get_local_variables": [
                "scope",
                "suffix"
            ],
            "get_variables_to_restore": [
                "include",
                "exclude"
            ],
            "get_variables_by_suffix": [
                "suffix",
                "scope"
            ],
            "get_variables_by_name": [
                "given_name",
                "scope"
            ],
            "get_unique_variable": [
                "var_op_name"
            ],
            "assign_from_values": [
                "var_names_to_values"
            ],
            "assign_from_values_fn": [
                "var_names_to_values"
            ],
            "assign_from_checkpoint": [
                "model_path",
                "var_list"
            ],
            "assign_from_checkpoint_fn": [
                "model_path",
                "var_list",
                "ignore_missing_vars",
                "reshape_variables"
            ],
            "filter_variables": [
                "var_list",
                "include_patterns",
                "exclude_patterns",
                "reg_search"
            ],
            "VariableDeviceChooser": {
                "__init__": [
                    "self",
                    "num_tasks",
                    "job_name",
                    "device_type",
                    "device_index"
                ],
                "__call__": [
                    "self",
                    "op"
                ]
            }
        },
        "tensorflow.contrib.framework.python.ops.arg_scope": {
            "_get_arg_stack": [],
            "_current_arg_scope": [],
            "_key_op": [
                "op"
            ],
            "_name_op": [
                "op"
            ],
            "_kwarg_names": [
                "func"
            ],
            "_add_op": [
                "op"
            ],
            "arg_scope": [
                "list_ops_or_scope"
            ],
            "add_arg_scope": [
                "func"
            ],
            "has_arg_scope": [
                "func"
            ],
            "arg_scoped_arguments": [
                "func"
            ]
        },
        "tensorflow.contrib.framework.python.framework.checkpoint_utils": {
            "_get_checkpoint_filename": [
                "filepattern"
            ],
            "load_checkpoint": [
                "filepattern"
            ],
            "load_variable": [
                "checkpoint_dir",
                "name"
            ],
            "list_variables": [
                "checkpoint_dir"
            ],
            "_set_checkpoint_initializer": [
                "variable",
                "file_pattern",
                "tensor_name",
                "slice_spec",
                "name"
            ],
            "_set_variable_or_list_initializer": [
                "variable_or_list",
                "file_pattern",
                "tensor_name"
            ],
            "_collect_partitioned_variable": [
                "name",
                "var_scope"
            ],
            "init_from_checkpoint": [
                "checkpoint_dir",
                "assignment_map"
            ]
        },
        "tensorflow.contrib.framework.python.framework.tensor_util": {
            "_assert_same_base_type": [
                "items",
                "expected_type"
            ],
            "assert_same_float_dtype": [
                "tensors",
                "dtype"
            ],
            "assert_scalar_int": [
                "tensor",
                "name"
            ],
            "assert_scalar": [
                "tensor",
                "name"
            ],
            "reduce_sum_n": [
                "tensors",
                "name"
            ],
            "remove_squeezable_dimensions": [
                "predictions",
                "labels",
                "name"
            ],
            "_all_equal": [
                "tensor0",
                "tensor1"
            ],
            "_is_rank": [
                "expected_rank",
                "actual_tensor"
            ],
            "_is_shape": [
                "expected_shape",
                "actual_tensor",
                "actual_shape"
            ],
            "_assert_shape_op": [
                "expected_shape",
                "actual_tensor"
            ],
            "with_same_shape": [
                "expected_tensor",
                "tensor"
            ],
            "is_tensor": [
                "x"
            ],
            "with_shape": [
                "expected_shape",
                "tensor"
            ]
        },
        "tensorflow.contrib.framework.python.framework": {},
        "tensorflow.contrib.framework.python.framework.experimental": {
            "_add_experimental_function_notice_to_docstring": [
                "doc"
            ],
            "experimental": [
                "func"
            ]
        },
        "tensorflow.contrib.crf": {},
        "tensorflow.contrib.crf.python": {},
        "tensorflow.contrib.crf.python.ops": {},
        "tensorflow.contrib.crf.python.ops.crf": {
            "_lengths_to_masks": [
                "lengths",
                "max_length"
            ],
            "crf_sequence_score": [
                "inputs",
                "tag_indices",
                "sequence_lengths",
                "transition_params"
            ],
            "crf_log_norm": [
                "inputs",
                "sequence_lengths",
                "transition_params"
            ],
            "crf_log_likelihood": [
                "inputs",
                "tag_indices",
                "sequence_lengths",
                "transition_params"
            ],
            "crf_unary_score": [
                "tag_indices",
                "sequence_lengths",
                "inputs"
            ],
            "crf_binary_score": [
                "tag_indices",
                "sequence_lengths",
                "transition_params"
            ],
            "viterbi_decode": [
                "score",
                "transition_params"
            ],
            "CrfForwardRnnCell": {
                "__init__": [
                    "self",
                    "transition_params"
                ],
                "state_size": [
                    "self"
                ],
                "output_size": [
                    "self"
                ],
                "__call__": [
                    "self",
                    "inputs",
                    "state",
                    "scope"
                ]
            }
        },
        "tensorflow.python": {},
        "tensorflow.python.pywrap_tensorflow": {
            "_swig_setattr_nondynamic": [
                "self",
                "class_type",
                "name",
                "value",
                "static"
            ],
            "_swig_setattr": [
                "self",
                "class_type",
                "name",
                "value"
            ],
            "_swig_getattr_nondynamic": [
                "self",
                "class_type",
                "name",
                "static"
            ],
            "_swig_getattr": [
                "self",
                "class_type",
                "name"
            ],
            "_swig_repr": [
                "self"
            ],
            "IsGoogleCudaEnabled": [],
            "CudaSupportsHalfMatMulAndConv": [],
            "CheckpointReader_GetTensor": [
                "reader",
                "name",
                "out_status"
            ],
            "NewCheckpointReader": [
                "filepattern"
            ],
            "NewStatSummarizer": [
                "graph_def_str"
            ],
            "DeleteStatSummarizer": [
                "ss"
            ],
            "InitializePyTrampoline": [
                "trampoline"
            ],
            "PyRecordReader_New": [
                "filename",
                "start_offset",
                "compression_type_string",
                "out_status"
            ],
            "PyRecordWriter_New": [
                "filename",
                "compression_type_string",
                "out_status"
            ],
            "TF_NewStatus": [],
            "TF_DeleteStatus": [
                "arg1"
            ],
            "TF_GetCode": [
                "s"
            ],
            "TF_Message": [
                "s"
            ],
            "TF_NewBufferFromString": [
                "proto"
            ],
            "TF_NewBuffer": [],
            "TF_DeleteBuffer": [
                "arg1"
            ],
            "TF_GetBuffer": [
                "buffer"
            ],
            "_TF_NewSessionOptions": [],
            "_TF_SetTarget": [
                "options",
                "target"
            ],
            "_TF_SetConfig": [
                "options",
                "proto",
                "status"
            ],
            "TF_DeleteSessionOptions": [
                "arg1"
            ],
            "TF_NewDeprecatedSession": [
                "arg1",
                "status"
            ],
            "TF_CloseDeprecatedSession": [
                "arg1",
                "status"
            ],
            "TF_DeleteDeprecatedSession": [
                "arg1",
                "status"
            ],
            "TF_ExtendGraph": [
                "arg1",
                "proto",
                "arg3"
            ],
            "TF_LoadLibrary": [
                "library_filename",
                "status"
            ],
            "TF_GetOpList": [
                "lib_handle"
            ],
            "TF_NewSessionOptions": [
                "target",
                "config"
            ],
            "TF_Reset": [
                "target",
                "containers",
                "config"
            ],
            "TF_Run": [
                "session",
                "run_options",
                "feed_dict",
                "output_names",
                "target_nodes",
                "out_status",
                "run_outputs"
            ],
            "TF_PRunSetup": [
                "session",
                "input_names",
                "output_names",
                "target_nodes",
                "out_status"
            ],
            "TF_PRun": [
                "session",
                "handle",
                "feed_dict",
                "output_names",
                "out_status"
            ],
            "TF_Reset_wrapper": [
                "opt",
                "containers",
                "out_status"
            ],
            "EqualGraphDefWrapper": [
                "actual",
                "expected"
            ],
            "ListDevices": [
                "out_status"
            ],
            "list_devices": [],
            "DoQuantizeTrainingOnGraphDefHelper": [
                "input_graph",
                "num_bits",
                "out_status"
            ],
            "do_quantize_training_on_graphdef": [
                "input_graph",
                "num_bits"
            ],
            "FileExists": [
                "filename",
                "out_status"
            ],
            "DeleteFile": [
                "filename",
                "out_status"
            ],
            "ReadFileToString": [
                "filename",
                "out_status"
            ],
            "WriteStringToFile": [
                "filename",
                "file_content",
                "out_status"
            ],
            "GetChildren": [
                "dir",
                "out_status"
            ],
            "GetMatchingFiles": [
                "filename",
                "out_status"
            ],
            "CreateDir": [
                "dirname",
                "out_status"
            ],
            "RecursivelyCreateDir": [
                "dirname",
                "out_status"
            ],
            "CopyFile": [
                "oldpath",
                "newpath",
                "overwrite",
                "out_status"
            ],
            "RenameFile": [
                "oldname",
                "newname",
                "overwrite",
                "out_status"
            ],
            "DeleteRecursively": [
                "dirname",
                "out_status"
            ],
            "IsDirectory": [
                "dirname",
                "out_status"
            ],
            "Stat": [
                "filename",
                "stats",
                "out_status"
            ],
            "CreateBufferedInputStream": [
                "filename",
                "buffer_size",
                "out_status"
            ],
            "CreateWritableFile": [
                "filename",
                "mode",
                "out_status"
            ],
            "AppendToFile": [
                "file_content",
                "file",
                "out_status"
            ],
            "ReadFromStream": [
                "stream",
                "bytes",
                "out_status"
            ],
            "Status_OK": [],
            "__lshift__": [
                "os",
                "x"
            ],
            "Set_TF_Status_from_Status": [
                "tf_status",
                "status"
            ],
            "IsAbsolutePath": [
                "path"
            ],
            "Dirname": [
                "path"
            ],
            "Basename": [
                "path"
            ],
            "Extension": [
                "path"
            ],
            "CleanPath": [
                "path"
            ],
            "ParseURI": [
                "uri",
                "scheme",
                "host",
                "path"
            ],
            "CreateURI": [
                "scheme",
                "host",
                "path"
            ],
            "PyServer_New": [
                "server_def",
                "out_status"
            ],
            "PyServer_Start": [
                "in_server",
                "out_status"
            ],
            "PyServer_Stop": [
                "in_server",
                "out_status"
            ],
            "PyServer_Join": [
                "in_server",
                "out_status"
            ],
            "GetPythonWrappers": [
                "op_wrapper_buf"
            ],
            "RunCppShapeInference": [
                "serialized_node_def",
                "input_serialized_shapes",
                "input_constant_tensor_values",
                "input_constant_tensor_as_shape_values",
                "out_status"
            ],
            "TryFindKernelClass": [
                "serialized_node_def"
            ],
            "CheckpointReader": {
                "__init__": [
                    "self",
                    "filepattern",
                    "out_status"
                ],
                "_HasTensor": [
                    "self",
                    "name"
                ],
                "debug_string": [
                    "self"
                ],
                "get_variable_to_shape_map": [
                    "self"
                ],
                "has_tensor": [
                    "self",
                    "tensor_str"
                ],
                "get_tensor": [
                    "self",
                    "tensor_str"
                ]
            },
            "StatSummarizer": {
                "ProcessStepStats": [
                    "self",
                    "step_stats"
                ],
                "GetOutputString": [
                    "self"
                ],
                "PrintStepStats": [
                    "self"
                ],
                "ProcessStepStatsStr": [
                    "self",
                    "step_stats_str"
                ],
                "__init__": [
                    "self"
                ]
            },
            "PyRecordReader": {
                "__init__": [
                    "self"
                ],
                "GetNext": [
                    "self",
                    "status"
                ],
                "record": [
                    "self"
                ],
                "offset": [
                    "self"
                ],
                "Close": [
                    "self"
                ]
            },
            "PyRecordWriter": {
                "__init__": [
                    "self"
                ],
                "WriteRecord": [
                    "self",
                    "record"
                ],
                "Close": [
                    "self"
                ]
            },
            "EventsWriter": {
                "__init__": [
                    "self",
                    "file_prefix"
                ],
                "FileName": [
                    "self"
                ],
                "_WriteSerializedEvent": [
                    "self",
                    "event_str"
                ],
                "Flush": [
                    "self"
                ],
                "Close": [
                    "self"
                ],
                "WriteEvent": [
                    "self",
                    "event"
                ]
            },
            "TF_Buffer": {
                "__init__": [
                    "self"
                ]
            },
            "Status": {
                "__init__": [
                    "self"
                ],
                "ok": [
                    "self"
                ],
                "code": [
                    "self"
                ],
                "error_message": [
                    "self"
                ],
                "__eq__": [
                    "self",
                    "x"
                ],
                "__ne__": [
                    "self",
                    "x"
                ],
                "Update": [
                    "self",
                    "new_status"
                ],
                "ToString": [
                    "self"
                ]
            },
            "WritableFile": {
                "__init__": [
                    "self"
                ],
                "Close": [
                    "self"
                ],
                "Flush": [
                    "self"
                ]
            },
            "BufferedInputStream": {
                "__init__": [
                    "self"
                ],
                "Tell": [
                    "self"
                ],
                "Seek": [
                    "self",
                    "position"
                ],
                "ReadLineAsString": [
                    "self"
                ]
            },
            "FileStatistics": {
                "__init__": [
                    "self"
                ]
            },
            "ServerInterface": {
                "__init__": [
                    "self"
                ],
                "target": [
                    "self"
                ]
            }
        },
        "tensorflow.python.layers.base": {
            "_to_snake_case": [
                "name"
            ],
            "_to_list": [
                "x"
            ],
            "_add_elements_to_collection": [
                "elements",
                "collections"
            ],
            "_Layer": {
                "__init__": [
                    "self",
                    "trainable",
                    "name",
                    "dtype"
                ],
                "__setattr__": [
                    "self",
                    "name",
                    "value"
                ],
                "trainable_variables": [
                    "self"
                ],
                "non_trainable_variables": [
                    "self"
                ],
                "trainable_weights": [
                    "self"
                ],
                "non_trainable_weights": [
                    "self"
                ],
                "variables": [
                    "self"
                ],
                "updates": [
                    "self"
                ],
                "losses": [
                    "self"
                ],
                "built": [
                    "self"
                ],
                "trainable": [
                    "self"
                ],
                "weights": [
                    "self"
                ],
                "build": [
                    "self",
                    "_"
                ],
                "call": [
                    "self",
                    "inputs"
                ],
                "_add_variable": [
                    "self",
                    "name",
                    "shape",
                    "dtype",
                    "initializer",
                    "regularizer",
                    "trainable",
                    "variable_getter"
                ],
                "__call__": [
                    "self",
                    "inputs"
                ],
                "apply": [
                    "self",
                    "inputs"
                ]
            }
        },
        "tensorflow.python.layers": {},
        "tensorflow.python.layers.normalization": {
            "batch_normalization": [
                "inputs",
                "axis",
                "momentum",
                "epsilon",
                "center",
                "scale",
                "beta_initializer",
                "gamma_initializer",
                "moving_mean_initializer",
                "moving_variance_initializer",
                "beta_regularizer",
                "gamma_regularizer",
                "training",
                "trainable",
                "name",
                "reuse"
            ],
            "BatchNormalization": {
                "__init__": [
                    "self",
                    "axis",
                    "momentum",
                    "epsilon",
                    "center",
                    "scale",
                    "beta_initializer",
                    "gamma_initializer",
                    "moving_mean_initializer",
                    "moving_variance_initializer",
                    "beta_regularizer",
                    "gamma_regularizer",
                    "trainable",
                    "name"
                ],
                "build": [
                    "self",
                    "input_shape"
                ],
                "call": [
                    "self",
                    "inputs",
                    "training"
                ]
            }
        },
        "tensorflow.python.layers.utils": {
            "convert_data_format": [
                "data_format",
                "ndim"
            ],
            "normalize_tuple": [
                "value",
                "n",
                "name"
            ],
            "normalize_data_format": [
                "value"
            ],
            "normalize_padding": [
                "value"
            ],
            "smart_cond": [
                "pred",
                "fn1",
                "fn2",
                "name"
            ],
            "constant_value": [
                "pred"
            ]
        },
        "tensorflow.python.layers.pooling": {
            "average_pooling1d": [
                "inputs",
                "pool_size",
                "strides",
                "padding",
                "data_format",
                "name"
            ],
            "max_pooling1d": [
                "inputs",
                "pool_size",
                "strides",
                "padding",
                "data_format",
                "name"
            ],
            "average_pooling2d": [
                "inputs",
                "pool_size",
                "strides",
                "padding",
                "data_format",
                "name"
            ],
            "max_pooling2d": [
                "inputs",
                "pool_size",
                "strides",
                "padding",
                "data_format",
                "name"
            ],
            "average_pooling3d": [
                "inputs",
                "pool_size",
                "strides",
                "padding",
                "data_format",
                "name"
            ],
            "max_pooling3d": [
                "inputs",
                "pool_size",
                "strides",
                "padding",
                "data_format",
                "name"
            ],
            "_Pooling1D": {
                "__init__": [
                    "self",
                    "pool_function",
                    "pool_size",
                    "strides",
                    "padding",
                    "data_format",
                    "name"
                ],
                "build": [
                    "self",
                    "input_shape"
                ],
                "call": [
                    "self",
                    "inputs"
                ]
            },
            "AveragePooling1D": {
                "__init__": [
                    "self",
                    "pool_size",
                    "strides",
                    "padding",
                    "data_format",
                    "name"
                ]
            },
            "MaxPooling1D": {
                "__init__": [
                    "self",
                    "pool_size",
                    "strides",
                    "padding",
                    "data_format",
                    "name"
                ]
            },
            "_Pooling2D": {
                "__init__": [
                    "self",
                    "pool_function",
                    "pool_size",
                    "strides",
                    "padding",
                    "data_format",
                    "name"
                ],
                "build": [
                    "self",
                    "input_shape"
                ],
                "call": [
                    "self",
                    "inputs"
                ]
            },
            "AveragePooling2D": {
                "__init__": [
                    "self",
                    "pool_size",
                    "strides",
                    "padding",
                    "data_format",
                    "name"
                ]
            },
            "MaxPooling2D": {
                "__init__": [
                    "self",
                    "pool_size",
                    "strides",
                    "padding",
                    "data_format",
                    "name"
                ]
            },
            "_Pooling3D": {
                "__init__": [
                    "self",
                    "pool_function",
                    "pool_size",
                    "strides",
                    "padding",
                    "data_format",
                    "name"
                ],
                "build": [
                    "self",
                    "input_shape"
                ],
                "call": [
                    "self",
                    "inputs"
                ]
            },
            "AveragePooling3D": {
                "__init__": [
                    "self",
                    "pool_size",
                    "strides",
                    "padding",
                    "data_format",
                    "name"
                ]
            },
            "MaxPooling3D": {
                "__init__": [
                    "self",
                    "pool_size",
                    "strides",
                    "padding",
                    "data_format",
                    "name"
                ]
            }
        },
        "tensorflow.python.layers.layers": {},
        "tensorflow.python.layers.core": {
            "dense": [
                "inputs",
                "units",
                "activation",
                "use_bias",
                "kernel_initializer",
                "bias_initializer",
                "kernel_regularizer",
                "bias_regularizer",
                "activity_regularizer",
                "trainable",
                "name",
                "reuse"
            ],
            "dropout": [
                "inputs",
                "rate",
                "noise_shape",
                "seed",
                "training",
                "name"
            ],
            "Dense": {
                "__init__": [
                    "self",
                    "units",
                    "activation",
                    "use_bias",
                    "kernel_initializer",
                    "bias_initializer",
                    "kernel_regularizer",
                    "bias_regularizer",
                    "activity_regularizer",
                    "trainable",
                    "name"
                ],
                "build": [
                    "self",
                    "input_shape"
                ],
                "call": [
                    "self",
                    "inputs"
                ]
            },
            "Dropout": {
                "__init__": [
                    "self",
                    "rate",
                    "noise_shape",
                    "seed",
                    "name"
                ],
                "call": [
                    "self",
                    "inputs",
                    "training"
                ]
            }
        },
        "tensorflow.python.layers.convolutional": {
            "conv1d": [
                "inputs",
                "filters",
                "kernel_size",
                "strides",
                "padding",
                "data_format",
                "dilation_rate",
                "activation",
                "use_bias",
                "kernel_initializer",
                "bias_initializer",
                "kernel_regularizer",
                "bias_regularizer",
                "activity_regularizer",
                "trainable",
                "name",
                "reuse"
            ],
            "conv2d": [
                "inputs",
                "filters",
                "kernel_size",
                "strides",
                "padding",
                "data_format",
                "dilation_rate",
                "activation",
                "use_bias",
                "kernel_initializer",
                "bias_initializer",
                "kernel_regularizer",
                "bias_regularizer",
                "activity_regularizer",
                "trainable",
                "name",
                "reuse"
            ],
            "conv3d": [
                "inputs",
                "filters",
                "kernel_size",
                "strides",
                "padding",
                "data_format",
                "dilation_rate",
                "activation",
                "use_bias",
                "kernel_initializer",
                "bias_initializer",
                "kernel_regularizer",
                "bias_regularizer",
                "activity_regularizer",
                "trainable",
                "name",
                "reuse"
            ],
            "separable_conv2d": [
                "inputs",
                "filters",
                "kernel_size",
                "strides",
                "padding",
                "data_format",
                "dilation_rate",
                "depth_multiplier",
                "activation",
                "use_bias",
                "depthwise_initializer",
                "pointwise_initializer",
                "bias_initializer",
                "depthwise_regularizer",
                "pointwise_regularizer",
                "bias_regularizer",
                "activity_regularizer",
                "trainable",
                "name",
                "reuse"
            ],
            "conv2d_transpose": [
                "inputs",
                "filters",
                "kernel_size",
                "strides",
                "padding",
                "data_format",
                "activation",
                "use_bias",
                "kernel_initializer",
                "bias_initializer",
                "kernel_regularizer",
                "bias_regularizer",
                "activity_regularizer",
                "trainable",
                "name",
                "reuse"
            ],
            "_Conv": {
                "__init__": [
                    "self",
                    "rank",
                    "filters",
                    "kernel_size",
                    "strides",
                    "padding",
                    "data_format",
                    "dilation_rate",
                    "activation",
                    "use_bias",
                    "kernel_initializer",
                    "bias_initializer",
                    "kernel_regularizer",
                    "bias_regularizer",
                    "activity_regularizer",
                    "trainable",
                    "name"
                ],
                "build": [
                    "self",
                    "input_shape"
                ],
                "call": [
                    "self",
                    "inputs"
                ]
            },
            "Conv1D": {
                "__init__": [
                    "self",
                    "filters",
                    "kernel_size",
                    "strides",
                    "padding",
                    "data_format",
                    "dilation_rate",
                    "activation",
                    "use_bias",
                    "kernel_initializer",
                    "bias_initializer",
                    "kernel_regularizer",
                    "bias_regularizer",
                    "activity_regularizer",
                    "trainable",
                    "name"
                ]
            },
            "Conv2D": {
                "__init__": [
                    "self",
                    "filters",
                    "kernel_size",
                    "strides",
                    "padding",
                    "data_format",
                    "dilation_rate",
                    "activation",
                    "use_bias",
                    "kernel_initializer",
                    "bias_initializer",
                    "kernel_regularizer",
                    "bias_regularizer",
                    "activity_regularizer",
                    "trainable",
                    "name"
                ]
            },
            "Conv3D": {
                "__init__": [
                    "self",
                    "filters",
                    "kernel_size",
                    "strides",
                    "padding",
                    "data_format",
                    "dilation_rate",
                    "activation",
                    "use_bias",
                    "kernel_initializer",
                    "bias_initializer",
                    "kernel_regularizer",
                    "bias_regularizer",
                    "activity_regularizer",
                    "trainable",
                    "name"
                ]
            },
            "SeparableConv2D": {
                "__init__": [
                    "self",
                    "filters",
                    "kernel_size",
                    "strides",
                    "padding",
                    "data_format",
                    "dilation_rate",
                    "depth_multiplier",
                    "activation",
                    "use_bias",
                    "depthwise_initializer",
                    "pointwise_initializer",
                    "bias_initializer",
                    "depthwise_regularizer",
                    "pointwise_regularizer",
                    "bias_regularizer",
                    "activity_regularizer",
                    "trainable",
                    "name"
                ],
                "build": [
                    "self",
                    "input_shape"
                ],
                "call": [
                    "self",
                    "inputs"
                ]
            },
            "Conv2DTranspose": {
                "__init__": [
                    "self",
                    "filters",
                    "kernel_size",
                    "strides",
                    "padding",
                    "data_format",
                    "activation",
                    "use_bias",
                    "kernel_initializer",
                    "bias_initializer",
                    "kernel_regularizer",
                    "bias_regularizer",
                    "activity_regularizer",
                    "trainable",
                    "name"
                ],
                "build": [
                    "self",
                    "input_shape"
                ],
                "call": [
                    "self",
                    "inputs"
                ]
            }
        },
        "tensorflow.python.ops.control_flow_grad": {
            "_SwitchGrad": [
                "op"
            ],
            "_MergeGrad": [
                "op",
                "grad",
                "_"
            ],
            "_RefMergeGrad": [
                "op",
                "grad",
                "_"
            ],
            "_ExitGrad": [
                "op",
                "grad"
            ],
            "_NextIterationGrad": [
                "_",
                "grad"
            ],
            "_RefNextIterationGrad": [
                "_",
                "grad"
            ],
            "_EnterGrad": [
                "op",
                "grad"
            ],
            "_RefEnterGrad": [
                "op",
                "grad"
            ],
            "_LoopCondGrad": [
                "_"
            ]
        },
        "tensorflow.python.ops.array_grad": {
            "_PackGrad": [
                "op",
                "grad"
            ],
            "_UnpackGrad": [
                "op"
            ],
            "_ConcatGradHelper": [
                "op",
                "grad",
                "start_value_index",
                "end_value_index",
                "dim_index"
            ],
            "_ConcatGrad": [
                "op",
                "grad"
            ],
            "_ConcatGradV2": [
                "op",
                "grad"
            ],
            "_SliceGrad": [
                "op",
                "grad"
            ],
            "_StridedSliceGrad": [
                "op",
                "grad"
            ],
            "_StridedSliceGradGrad": [
                "op",
                "grad"
            ],
            "_SplitGrad": [
                "op"
            ],
            "_SplitVGrad": [
                "op"
            ],
            "_DiagGrad": [
                "_",
                "grad"
            ],
            "_DiagPartGrad": [
                "_",
                "grad"
            ],
            "_MatrixDiagGrad": [
                "_",
                "grad"
            ],
            "_MatrixDiagPartGrad": [
                "op",
                "grad"
            ],
            "_MatrixSetDiagGrad": [
                "op",
                "grad"
            ],
            "_MatrixBandPartGrad": [
                "op",
                "grad"
            ],
            "_FillGrad": [
                "_",
                "grad"
            ],
            "_GatherGrad": [
                "op",
                "grad"
            ],
            "_GatherNdGrad": [
                "op",
                "grad"
            ],
            "_CheckNumericsGrad": [
                "_",
                "grad"
            ],
            "_IdGrad": [
                "_",
                "grad"
            ],
            "_RefIdGrad": [
                "_",
                "grad"
            ],
            "_ReshapeGrad": [
                "op",
                "grad"
            ],
            "_ReshapeToInput": [
                "op",
                "grad"
            ],
            "_ExpandDimsGrad": [
                "op",
                "grad"
            ],
            "_SqueezeGrad": [
                "op",
                "grad"
            ],
            "_TransposeGrad": [
                "op",
                "grad"
            ],
            "_TileGrad": [
                "op",
                "grad"
            ],
            "_PadGrad": [
                "op",
                "grad"
            ],
            "_ReverseSequenceGrad": [
                "op",
                "grad"
            ],
            "_ReverseGrad": [
                "op",
                "grad"
            ],
            "_ReverseV2Grad": [
                "op",
                "grad"
            ],
            "_SpaceToBatchGrad": [
                "op",
                "grad"
            ],
            "_SpaceToBatchNDGrad": [
                "op",
                "grad"
            ],
            "_BatchToSpaceGrad": [
                "op",
                "grad"
            ],
            "_BatchToSpaceNDGrad": [
                "op",
                "grad"
            ],
            "_SpaceToDepthGrad": [
                "op",
                "grad"
            ],
            "_DepthToSpaceGrad": [
                "op",
                "grad"
            ],
            "_MirrorPadGrad": [
                "op",
                "grad"
            ],
            "_MirrorPadGradGrad": [
                "op",
                "grad"
            ],
            "_QuantizeAndDequantizeGrad": [
                "_",
                "grad"
            ],
            "_ExtractImagePatchesGrad": [
                "op",
                "grad"
            ],
            "_ScatterNdGrad": [
                "op",
                "grad"
            ]
        },
        "tensorflow.python.ops.gen_resource_variable_ops": {
            "assign_add_variable_op": [
                "resource",
                "value",
                "name"
            ],
            "assign_variable_op": [
                "resource",
                "value",
                "name"
            ],
            "read_variable_op": [
                "resource",
                "dtype",
                "name"
            ],
            "resource_gather": [
                "resource",
                "indices",
                "dtype",
                "validate_indices",
                "name"
            ],
            "resource_scatter_add": [
                "resource",
                "indices",
                "updates",
                "name"
            ],
            "var_handle_op": [
                "dtype",
                "shape",
                "container",
                "shared_name",
                "name"
            ],
            "var_is_initialized_op": [
                "resource",
                "name"
            ],
            "_InitOpDefLibrary": []
        },
        "tensorflow.python.ops.gradients_impl": {
            "_IndexedSlicesToTensor": [
                "value",
                "dtype",
                "name",
                "as_ref"
            ],
            "_MarkReachedOps": [
                "from_ops",
                "reached_ops"
            ],
            "_GatherInputs": [
                "to_ops",
                "reached_ops"
            ],
            "_PendingCount": [
                "graph",
                "to_ops",
                "from_ops",
                "colocate_gradients_with_ops"
            ],
            "_AsList": [
                "x"
            ],
            "_DefaultGradYs": [
                "grad_ys",
                "ys",
                "colocate_gradients_with_ops"
            ],
            "_IsTrainable": [
                "tensor"
            ],
            "_VerifyGeneratedGradients": [
                "grads",
                "op"
            ],
            "_StopOps": [
                "from_ops",
                "pending_count"
            ],
            "_maybe_colocate_with": [
                "op",
                "colocate_gradients_with_ops"
            ],
            "_SymGrad": [
                "op",
                "out_grads"
            ],
            "gradients": [
                "ys",
                "xs",
                "grad_ys",
                "name",
                "colocate_gradients_with_ops",
                "gate_gradients",
                "aggregation_method"
            ],
            "_HasAnyNotNoneGrads": [
                "grads",
                "op"
            ],
            "_UpdatePendingAndEnqueueReady": [
                "grads",
                "op",
                "queue",
                "pending_count",
                "loop_state"
            ],
            "_SetGrad": [
                "grads",
                "t",
                "grad"
            ],
            "_GetGrad": [
                "grads",
                "t"
            ],
            "_GetGrads": [
                "grads",
                "op"
            ],
            "_HandleNestedIndexedSlices": [
                "grad"
            ],
            "_AccumulatorShape": [
                "inputs"
            ],
            "_LogOpGradients": [
                "op",
                "out_grads",
                "in_grads"
            ],
            "_MultiDeviceAddN": [
                "tensor_list"
            ],
            "_AggregatedGrads": [
                "grads",
                "op",
                "loop_state",
                "aggregation_method"
            ],
            "_hessian_vector_product": [
                "ys",
                "xs",
                "v"
            ],
            "hessians": [
                "ys",
                "xs",
                "name",
                "colocate_gradients_with_ops",
                "gate_gradients",
                "aggregation_method"
            ],
            "AggregationMethod": {}
        },
        "tensorflow.python.ops.gen_linalg_ops": {
            "_batch_cholesky": [
                "input",
                "name"
            ],
            "_batch_cholesky_grad": [
                "l",
                "grad",
                "name"
            ],
            "_batch_matrix_determinant": [
                "input",
                "name"
            ],
            "_batch_matrix_inverse": [
                "input",
                "adjoint",
                "name"
            ],
            "_batch_matrix_solve": [
                "matrix",
                "rhs",
                "adjoint",
                "name"
            ],
            "_batch_matrix_solve_ls": [
                "matrix",
                "rhs",
                "l2_regularizer",
                "fast",
                "name"
            ],
            "_batch_matrix_triangular_solve": [
                "matrix",
                "rhs",
                "lower",
                "adjoint",
                "name"
            ],
            "_batch_self_adjoint_eig": [
                "input",
                "name"
            ],
            "_batch_self_adjoint_eig_v2": [
                "input",
                "compute_v",
                "name"
            ],
            "_batch_svd": [
                "input",
                "compute_uv",
                "full_matrices",
                "name"
            ],
            "cholesky": [
                "input",
                "name"
            ],
            "cholesky_grad": [
                "l",
                "grad",
                "name"
            ],
            "matrix_determinant": [
                "input",
                "name"
            ],
            "matrix_inverse": [
                "input",
                "adjoint",
                "name"
            ],
            "matrix_solve": [
                "matrix",
                "rhs",
                "adjoint",
                "name"
            ],
            "_matrix_solve_ls": [
                "matrix",
                "rhs",
                "l2_regularizer",
                "fast",
                "name"
            ],
            "matrix_triangular_solve": [
                "matrix",
                "rhs",
                "lower",
                "adjoint",
                "name"
            ],
            "qr": [
                "input",
                "full_matrices",
                "name"
            ],
            "_self_adjoint_eig": [
                "input",
                "name"
            ],
            "_self_adjoint_eig_v2": [
                "input",
                "compute_v",
                "name"
            ],
            "_svd": [
                "input",
                "compute_uv",
                "full_matrices",
                "name"
            ],
            "_InitOpDefLibrary": []
        },
        "tensorflow.python.ops.control_flow_ops": {
            "Assert": [
                "condition",
                "data",
                "summarize",
                "name"
            ],
            "_Identity": [
                "data",
                "name"
            ],
            "_NextIteration": [
                "data",
                "name"
            ],
            "_Enter": [
                "data",
                "frame_name",
                "is_constant",
                "parallel_iterations",
                "use_ref",
                "use_input_shape",
                "name"
            ],
            "exit": [
                "data",
                "name"
            ],
            "switch": [
                "data",
                "pred",
                "dtype",
                "name"
            ],
            "_SwitchRefOrTensor": [
                "data",
                "pred",
                "name"
            ],
            "merge": [
                "inputs",
                "name"
            ],
            "_convert_tensorarrays_to_flows": [
                "tensors_or_tensor_arrays"
            ],
            "_make_tensor_array": [
                "ta",
                "t_or_flow"
            ],
            "_convert_flows_to_tensorarrays": [
                "tensors_or_tensorarrays",
                "tensors_or_flows"
            ],
            "_IsLoopConstantEnter": [
                "op"
            ],
            "_GetLoopConstantEnter": [
                "value"
            ],
            "_GetOutputContext": [
                "op"
            ],
            "_ShapeLessThanOrEqual": [
                "shape1",
                "shape2"
            ],
            "_SetShapeInvariants": [
                "input_vars",
                "enter_vars",
                "shapes"
            ],
            "_EnforceShapeInvariant": [
                "merge_var",
                "next_var"
            ],
            "_AddNextAndBackEdge": [
                "m",
                "v"
            ],
            "_GetWhileContext": [
                "op"
            ],
            "MaybeCreateControlFlowState": [
                "between_op_list",
                "between_ops",
                "colocate_gradients_with_ops"
            ],
            "IsSwitch": [
                "op"
            ],
            "IsLoopExit": [
                "op"
            ],
            "IsLoopSwitch": [
                "op"
            ],
            "ZerosLikeOutsideLoop": [
                "op",
                "index"
            ],
            "cond": [
                "pred",
                "fn1",
                "fn2",
                "name"
            ],
            "while_loop": [
                "cond",
                "body",
                "loop_vars",
                "shape_invariants",
                "parallel_iterations",
                "back_prop",
                "swap_memory",
                "name"
            ],
            "_AsTensorList": [
                "x",
                "p"
            ],
            "_CheckResults": [
                "a",
                "b"
            ],
            "with_dependencies": [
                "dependencies",
                "output_tensor",
                "name"
            ],
            "_GroupControlDeps": [
                "dev",
                "deps",
                "name"
            ],
            "group": [],
            "tuple": [
                "tensors",
                "name",
                "control_inputs"
            ],
            "case": [
                "pred_fn_pairs",
                "default",
                "exclusive",
                "name"
            ],
            "GradLoopState": {
                "__init__": [
                    "self",
                    "forward_ctxt",
                    "outer_grad_state"
                ],
                "outer_grad_state": [
                    "self"
                ],
                "forward_context": [
                    "self"
                ],
                "forward_index": [
                    "self"
                ],
                "forward_sync": [
                    "self"
                ],
                "grad_context": [
                    "self"
                ],
                "grad_index": [
                    "self"
                ],
                "grad_sync": [
                    "self"
                ],
                "history_map": [
                    "self"
                ],
                "switch_map": [
                    "self"
                ],
                "unused_exits": [
                    "self"
                ],
                "deferred_exits": [
                    "self"
                ],
                "forward_loop_exits": [
                    "self"
                ],
                "pending_exits_count": [
                    "self",
                    "cnt"
                ],
                "AddForwardAccumulator": [
                    "self",
                    "value",
                    "dead_branch"
                ],
                "AddBackPropAccumulatedValue": [
                    "self",
                    "history_value",
                    "value",
                    "dead_branch"
                ],
                "GetRealValue": [
                    "self",
                    "value"
                ]
            },
            "ControlFlowState": {
                "__init__": [
                    "self"
                ],
                "GetGradState": [
                    "self",
                    "op",
                    "before"
                ],
                "ProcessUnusedLoopExits": [
                    "self",
                    "pending_count",
                    "to_ops_set"
                ],
                "EnterGradWhileContext": [
                    "self",
                    "op",
                    "before"
                ],
                "ExitGradWhileContext": [
                    "self",
                    "op",
                    "before"
                ],
                "AddWhileContext": [
                    "self",
                    "op",
                    "between_op_list",
                    "between_ops"
                ],
                "ZerosLikeForExit": [
                    "self",
                    "val"
                ],
                "ZerosLike": [
                    "self",
                    "op",
                    "index"
                ],
                "PostProcessing": [
                    "self"
                ]
            },
            "ControlFlowContext": {
                "__init__": [
                    "self",
                    "values_def",
                    "import_scope"
                ],
                "_init_values_from_proto": [
                    "self",
                    "values_def",
                    "import_scope"
                ],
                "outer_context": [
                    "self"
                ],
                "grad_state": [
                    "self"
                ],
                "back_prop": [
                    "self"
                ],
                "_to_proto": [
                    "self",
                    "export_scope"
                ],
                "_from_proto": [
                    "values_def",
                    "import_scope"
                ],
                "AddName": [
                    "self",
                    "name"
                ],
                "Enter": [
                    "self"
                ],
                "Exit": [
                    "self"
                ],
                "ExitResult": [
                    "self",
                    "result"
                ],
                "GetWhileContext": [
                    "self"
                ],
                "_IsInOuterContext": [
                    "self",
                    "op"
                ],
                "_RemoveExternalControlEdges": [
                    "self",
                    "op"
                ]
            },
            "CondContext": {
                "__init__": [
                    "self",
                    "pred",
                    "pivot",
                    "branch",
                    "name",
                    "context_def",
                    "import_scope"
                ],
                "_init_from_proto": [
                    "self",
                    "context_def",
                    "import_scope"
                ],
                "name": [
                    "self"
                ],
                "pred": [
                    "self"
                ],
                "pivot": [
                    "self"
                ],
                "branch": [
                    "self"
                ],
                "grad_state": [
                    "self"
                ],
                "back_prop": [
                    "self"
                ],
                "GetControlPivot": [
                    "self"
                ],
                "to_proto": [
                    "self",
                    "export_scope"
                ],
                "from_proto": [
                    "context_def",
                    "import_scope"
                ],
                "AddValue": [
                    "self",
                    "val"
                ],
                "AddOp": [
                    "self",
                    "op"
                ],
                "_AddOpInternal": [
                    "self",
                    "op"
                ],
                "_ProcessOutputTensor": [
                    "self",
                    "val"
                ],
                "BuildCondBranch": [
                    "self",
                    "fn"
                ]
            },
            "WhileContext": {
                "__init__": [
                    "self",
                    "parallel_iterations",
                    "back_prop",
                    "swap_memory",
                    "name",
                    "grad_state",
                    "context_def",
                    "import_scope"
                ],
                "_init_from_args": [
                    "self",
                    "parallel_iterations",
                    "back_prop",
                    "swap_memory",
                    "name"
                ],
                "_init_from_proto": [
                    "self",
                    "context_def",
                    "import_scope"
                ],
                "name": [
                    "self"
                ],
                "parallel_iterations": [
                    "self"
                ],
                "back_prop": [
                    "self"
                ],
                "swap_memory": [
                    "self"
                ],
                "pivot": [
                    "self"
                ],
                "loop_exits": [
                    "self"
                ],
                "grad_state": [
                    "self"
                ],
                "to_proto": [
                    "self",
                    "export_scope"
                ],
                "from_proto": [
                    "context_def",
                    "import_scope"
                ],
                "GetWhileContext": [
                    "self"
                ],
                "GetControlPivot": [
                    "self"
                ],
                "AddValue": [
                    "self",
                    "val"
                ],
                "AddOp": [
                    "self",
                    "op"
                ],
                "_AddOpInternal": [
                    "self",
                    "op"
                ],
                "_MaybeAddControlDependency": [
                    "self",
                    "op"
                ],
                "AddForwardLoopCounter": [
                    "self",
                    "outer_grad_state"
                ],
                "AddBackPropLoopCounter": [
                    "self",
                    "count",
                    "outer_grad_state"
                ],
                "AddBackPropAccumulator": [
                    "self",
                    "op",
                    "grad"
                ],
                "AddBackPropIndexedSlicesAccumulator": [
                    "self",
                    "op",
                    "grad"
                ],
                "_InitializeValues": [
                    "self",
                    "values"
                ],
                "_BuildLoop": [
                    "self",
                    "pred",
                    "body",
                    "original_loop_vars",
                    "loop_vars",
                    "shape_invariants"
                ],
                "BuildLoop": [
                    "self",
                    "pred",
                    "body",
                    "loop_vars",
                    "shape_invariants"
                ],
                "_FixControlInputsAndContext": [
                    "self",
                    "enters"
                ]
            }
        },
        "tensorflow.python.ops.sparse_grad": {
            "_SparseReorderGrad": [
                "op",
                "unused_output_indices_grad",
                "output_values_grad"
            ],
            "_SparseAddGrad": [
                "op"
            ],
            "_SparseTensorDenseAddGrad": [
                "op",
                "out_grad"
            ],
            "_SparseReduceSumGrad": [
                "op",
                "out_grad"
            ],
            "_SparseTensorDenseMatMulGrad": [
                "op",
                "grad"
            ],
            "_SparseDenseCwiseAddGrad": [
                "unused_op",
                "unused_grad"
            ],
            "_SparseDenseCwiseMulOrDivGrad": [
                "op",
                "grad",
                "is_mul"
            ],
            "_SparseDenseCwiseMulGrad": [
                "op",
                "grad"
            ],
            "_SparseDenseCwiseDivGrad": [
                "op",
                "grad"
            ],
            "_SparseSoftmaxGrad": [
                "op",
                "grad"
            ],
            "_SparseSparseMaximumGrad": [
                "unused_op",
                "unused_grad"
            ],
            "_SparseSparseMinimumGrad": [
                "unused_op",
                "unused_grad"
            ]
        },
        "tensorflow.python.ops.state_grad": {},
        "tensorflow.python.ops.gen_random_ops": {
            "multinomial": [
                "logits",
                "num_samples",
                "seed",
                "seed2",
                "name"
            ],
            "_parameterized_truncated_normal": [
                "shape",
                "means",
                "stdevs",
                "minvals",
                "maxvals",
                "seed",
                "seed2",
                "name"
            ],
            "_random_gamma": [
                "shape",
                "alpha",
                "seed",
                "seed2",
                "name"
            ],
            "_random_shuffle": [
                "value",
                "seed",
                "seed2",
                "name"
            ],
            "_random_standard_normal": [
                "shape",
                "dtype",
                "seed",
                "seed2",
                "name"
            ],
            "_random_uniform": [
                "shape",
                "dtype",
                "seed",
                "seed2",
                "name"
            ],
            "_random_uniform_int": [
                "shape",
                "minval",
                "maxval",
                "seed",
                "seed2",
                "name"
            ],
            "_truncated_normal": [
                "shape",
                "dtype",
                "seed",
                "seed2",
                "name"
            ],
            "_InitOpDefLibrary": []
        },
        "tensorflow.python.ops.math_grad": {
            "_safe_shape_div": [
                "x",
                "y"
            ],
            "_SumGrad": [
                "op",
                "grad"
            ],
            "_MinOrMaxGrad": [
                "op",
                "grad"
            ],
            "_MaxGrad": [
                "op",
                "grad"
            ],
            "_MinGrad": [
                "op",
                "grad"
            ],
            "_MeanGrad": [
                "op",
                "grad"
            ],
            "_ProdGrad": [
                "op",
                "grad"
            ],
            "_SegmentSumGrad": [
                "op",
                "grad"
            ],
            "_SegmentMeanGrad": [
                "op",
                "grad"
            ],
            "_SparseSegmentSumGrad": [
                "op",
                "grad"
            ],
            "_SparseSegmentMeanGrad": [
                "op",
                "grad"
            ],
            "_SparseSegmentSqrtNGrad": [
                "op",
                "grad"
            ],
            "_SegmentMinOrMaxGrad": [
                "op",
                "grad"
            ],
            "_SegmentMinGrad": [
                "op",
                "grad"
            ],
            "_SegmentMaxGrad": [
                "op",
                "grad"
            ],
            "_UnsortedSegmentSumGrad": [
                "op",
                "grad"
            ],
            "_AbsGrad": [
                "op",
                "grad"
            ],
            "_NegGrad": [
                "_",
                "grad"
            ],
            "_InvGrad": [
                "op",
                "grad"
            ],
            "_ReciprocalGrad": [
                "op",
                "grad"
            ],
            "_InvGradGrad": [
                "op",
                "grad"
            ],
            "_ReciprocalGradGrad": [
                "op",
                "grad"
            ],
            "_SquareGrad": [
                "op",
                "grad"
            ],
            "_SqrtGrad": [
                "op",
                "grad"
            ],
            "_SqrtGradGrad": [
                "op",
                "grad"
            ],
            "_RsqrtGrad": [
                "op",
                "grad"
            ],
            "_RsqrtGradGrad": [
                "op",
                "grad"
            ],
            "_ExpGrad": [
                "op",
                "grad"
            ],
            "_Expm1Grad": [
                "op",
                "grad"
            ],
            "_LogGrad": [
                "op",
                "grad"
            ],
            "_Log1pGrad": [
                "op",
                "grad"
            ],
            "_TanhGrad": [
                "op",
                "grad"
            ],
            "_TanhGradGrad": [
                "op",
                "grad"
            ],
            "_ErfGrad": [
                "op",
                "grad"
            ],
            "_ErfcGrad": [
                "op",
                "grad"
            ],
            "_LgammaGrad": [
                "op",
                "grad"
            ],
            "_DigammaGrad": [
                "op",
                "grad"
            ],
            "_IgammaGrad": [
                "op",
                "grad"
            ],
            "_IgammacGrad": [
                "op",
                "grad"
            ],
            "_ZetaGrad": [
                "op",
                "grad"
            ],
            "_PolygammaGrad": [
                "op",
                "grad"
            ],
            "_SigmoidGrad": [
                "op",
                "grad"
            ],
            "_SigmoidGradGrad": [
                "op",
                "grad"
            ],
            "_SignGrad": [
                "op",
                "_"
            ],
            "_SinGrad": [
                "op",
                "grad"
            ],
            "_CosGrad": [
                "op",
                "grad"
            ],
            "_TanGrad": [
                "op",
                "grad"
            ],
            "_AsinGrad": [
                "op",
                "grad"
            ],
            "_AcosGrad": [
                "op",
                "grad"
            ],
            "_AtanGrad": [
                "op",
                "grad"
            ],
            "_AddNGrad": [
                "op",
                "grad"
            ],
            "_AddGrad": [
                "op",
                "grad"
            ],
            "_SubGrad": [
                "op",
                "grad"
            ],
            "_MulGrad": [
                "op",
                "grad"
            ],
            "_DivGrad": [
                "op",
                "grad"
            ],
            "_FloorDivGrad": [
                "_",
                "unused_grad"
            ],
            "_TruncateDivGrad": [
                "_",
                "unused_grad"
            ],
            "_RealDivGrad": [
                "op",
                "grad"
            ],
            "_PowGrad": [
                "op",
                "grad"
            ],
            "_MaximumMinimumGrad": [
                "op",
                "grad",
                "selector_op"
            ],
            "_MaximumGrad": [
                "op",
                "grad"
            ],
            "_MinimumGrad": [
                "op",
                "grad"
            ],
            "_SquaredDifferenceGrad": [
                "op",
                "grad"
            ],
            "_SelectGrad": [
                "op",
                "grad"
            ],
            "_MatMulGrad": [
                "op",
                "grad"
            ],
            "_SparseMatMulGrad": [
                "op",
                "grad"
            ],
            "_FloorGrad": [
                "_",
                "unused_grad"
            ],
            "_CeilGrad": [
                "_",
                "unused_grad"
            ],
            "_RoundGrad": [
                "_",
                "unused_grad"
            ],
            "_RintGrad": [
                "_",
                "unused_grad"
            ],
            "_BatchMatMul": [
                "op",
                "grad"
            ],
            "_ComplexGrad": [
                "op",
                "grad"
            ],
            "_RealGrad": [
                "_",
                "grad"
            ],
            "_ImagGrad": [
                "_",
                "grad"
            ],
            "_ConjGrad": [
                "_",
                "grad"
            ],
            "_ComplexAbsGrad": [
                "op",
                "grad"
            ],
            "_CastGrad": [
                "op",
                "grad"
            ],
            "_FFTSizeForGrad": [
                "grad",
                "rank"
            ],
            "_FFTGrad": [
                "_",
                "grad"
            ],
            "_IFFTGrad": [
                "_",
                "grad"
            ],
            "_FFT2DGrad": [
                "_",
                "grad"
            ],
            "_IFFT2DGrad": [
                "_",
                "grad"
            ],
            "_FFT3DGrad": [
                "_",
                "grad"
            ],
            "_IFFT3DGrad": [
                "_",
                "grad"
            ],
            "_CrossGrad": [
                "op",
                "grad"
            ],
            "_CumsumGrad": [
                "op",
                "grad"
            ],
            "_CumprodGrad": [
                "op",
                "grad"
            ]
        },
        "tensorflow.python.ops.functional_ops": {
            "foldl": [
                "fn",
                "elems",
                "initializer",
                "parallel_iterations",
                "back_prop",
                "swap_memory",
                "name"
            ],
            "foldr": [
                "fn",
                "elems",
                "initializer",
                "parallel_iterations",
                "back_prop",
                "swap_memory",
                "name"
            ],
            "map_fn": [
                "fn",
                "elems",
                "dtype",
                "parallel_iterations",
                "back_prop",
                "swap_memory",
                "infer_shape",
                "name"
            ],
            "scan": [
                "fn",
                "elems",
                "initializer",
                "parallel_iterations",
                "back_prop",
                "swap_memory",
                "infer_shape",
                "name"
            ]
        },
        "tensorflow.python.ops.image_grad": {
            "_ResizeNearestNeighborGrad": [
                "op",
                "grad"
            ],
            "_ResizeBilinearGrad": [
                "op",
                "grad"
            ],
            "_CropAndResizeGrad": [
                "op",
                "grad"
            ]
        },
        "tensorflow.python.ops.logging_ops": {
            "Print": [
                "input_",
                "data",
                "message",
                "first_n",
                "summarize",
                "name"
            ],
            "_PrintGrad": [
                "op"
            ],
            "_Collect": [
                "val",
                "collections",
                "default_collections"
            ],
            "histogram_summary": [
                "tag",
                "values",
                "collections",
                "name"
            ],
            "image_summary": [
                "tag",
                "tensor",
                "max_images",
                "collections",
                "name"
            ],
            "audio_summary": [
                "tag",
                "tensor",
                "sample_rate",
                "max_outputs",
                "collections",
                "name"
            ],
            "merge_summary": [
                "inputs",
                "collections",
                "name"
            ],
            "merge_all_summaries": [
                "key"
            ],
            "get_summary_op": [],
            "scalar_summary": [
                "tags",
                "values",
                "collections",
                "name"
            ]
        },
        "tensorflow.python.ops.nn": {},
        "tensorflow.python.ops.image_ops_impl": {
            "_assert": [
                "cond",
                "ex_type",
                "msg"
            ],
            "_is_tensor": [
                "x"
            ],
            "_ImageDimensions": [
                "image"
            ],
            "_Check3DImage": [
                "image",
                "require_static"
            ],
            "_CheckAtLeast3DImage": [
                "image"
            ],
            "fix_image_flip_shape": [
                "image",
                "result"
            ],
            "random_flip_up_down": [
                "image",
                "seed"
            ],
            "random_flip_left_right": [
                "image",
                "seed"
            ],
            "flip_left_right": [
                "image"
            ],
            "flip_up_down": [
                "image"
            ],
            "rot90": [
                "image",
                "k",
                "name"
            ],
            "transpose_image": [
                "image"
            ],
            "central_crop": [
                "image",
                "central_fraction"
            ],
            "pad_to_bounding_box": [
                "image",
                "offset_height",
                "offset_width",
                "target_height",
                "target_width"
            ],
            "crop_to_bounding_box": [
                "image",
                "offset_height",
                "offset_width",
                "target_height",
                "target_width"
            ],
            "resize_image_with_crop_or_pad": [
                "image",
                "target_height",
                "target_width"
            ],
            "resize_images": [
                "images",
                "size",
                "method",
                "align_corners"
            ],
            "per_image_standardization": [
                "image"
            ],
            "random_brightness": [
                "image",
                "max_delta",
                "seed"
            ],
            "random_contrast": [
                "image",
                "lower",
                "upper",
                "seed"
            ],
            "adjust_brightness": [
                "image",
                "delta"
            ],
            "adjust_contrast": [
                "images",
                "contrast_factor"
            ],
            "adjust_gamma": [
                "image",
                "gamma",
                "gain"
            ],
            "convert_image_dtype": [
                "image",
                "dtype",
                "saturate",
                "name"
            ],
            "rgb_to_grayscale": [
                "images",
                "name"
            ],
            "grayscale_to_rgb": [
                "images",
                "name"
            ],
            "random_hue": [
                "image",
                "max_delta",
                "seed"
            ],
            "adjust_hue": [
                "image",
                "delta",
                "name"
            ],
            "random_saturation": [
                "image",
                "lower",
                "upper",
                "seed"
            ],
            "adjust_saturation": [
                "image",
                "saturation_factor",
                "name"
            ],
            "decode_image": [
                "contents",
                "channels",
                "name"
            ],
            "total_variation": [
                "images",
                "name"
            ],
            "ResizeMethod": {}
        },
        "tensorflow.python.ops": {},
        "tensorflow.python.ops.gradient_checker": {
            "_product": [
                "t"
            ],
            "_extra_feeds": [
                "extra_feed_dict",
                "new_feeds"
            ],
            "_compute_theoretical_jacobian": [
                "x",
                "x_shape",
                "x_data",
                "dy",
                "dy_shape",
                "dx",
                "extra_feed_dict"
            ],
            "_compute_numeric_jacobian": [
                "x",
                "x_shape",
                "x_data",
                "y",
                "y_shape",
                "delta",
                "extra_feed_dict"
            ],
            "_compute_dx_and_dy": [
                "x",
                "y",
                "y_shape"
            ],
            "_compute_gradient": [
                "x",
                "x_shape",
                "dx",
                "y",
                "y_shape",
                "dy",
                "x_init_value",
                "delta",
                "extra_feed_dict"
            ],
            "_compute_gradient_list": [
                "x",
                "x_shape",
                "y",
                "y_shape",
                "x_init_value",
                "delta",
                "init_targets",
                "extra_feed_dict"
            ],
            "compute_gradient": [
                "x",
                "x_shape",
                "y",
                "y_shape",
                "x_init_value",
                "delta",
                "init_targets",
                "extra_feed_dict"
            ],
            "compute_gradient_error": [
                "x",
                "x_shape",
                "y",
                "y_shape",
                "x_init_value",
                "delta",
                "init_targets",
                "extra_feed_dict"
            ]
        },
        "tensorflow.python.ops.standard_ops": {},
        "tensorflow.python.ops.gen_data_flow_ops": {
            "accumulator_apply_gradient": [
                "handle",
                "local_step",
                "gradient",
                "name"
            ],
            "accumulator_num_accumulated": [
                "handle",
                "name"
            ],
            "accumulator_set_global_step": [
                "handle",
                "new_global_step",
                "name"
            ],
            "accumulator_take_gradient": [
                "handle",
                "num_required",
                "dtype",
                "name"
            ],
            "_barrier": [
                "component_types",
                "shapes",
                "capacity",
                "container",
                "shared_name",
                "name"
            ],
            "_barrier_close": [
                "handle",
                "cancel_pending_enqueues",
                "name"
            ],
            "_barrier_incomplete_size": [
                "handle",
                "name"
            ],
            "_barrier_insert_many": [
                "handle",
                "keys",
                "values",
                "component_index",
                "name"
            ],
            "_barrier_ready_size": [
                "handle",
                "name"
            ],
            "_barrier_take_many": [
                "handle",
                "num_elements",
                "component_types",
                "allow_small_batch",
                "wait_for_incomplete",
                "timeout_ms",
                "name"
            ],
            "conditional_accumulator": [
                "dtype",
                "shape",
                "container",
                "shared_name",
                "name"
            ],
            "_delete_session_tensor": [
                "handle",
                "name"
            ],
            "dynamic_partition": [
                "data",
                "partitions",
                "num_partitions",
                "name"
            ],
            "dynamic_stitch": [
                "indices",
                "data",
                "name"
            ],
            "_fifo_queue": [
                "component_types",
                "shapes",
                "capacity",
                "container",
                "shared_name",
                "name"
            ],
            "_fifo_queue_v2": [
                "component_types",
                "shapes",
                "capacity",
                "container",
                "shared_name",
                "name"
            ],
            "_fake_queue": [
                "resource",
                "name"
            ],
            "_get_session_handle": [
                "value",
                "name"
            ],
            "_get_session_tensor": [
                "handle",
                "dtype",
                "name"
            ],
            "_hash_table": [
                "key_dtype",
                "value_dtype",
                "container",
                "shared_name",
                "use_node_name_sharing",
                "name"
            ],
            "_initialize_table": [
                "table_handle",
                "keys",
                "values",
                "name"
            ],
            "_initialize_table_from_text_file": [
                "table_handle",
                "filename",
                "key_index",
                "value_index",
                "vocab_size",
                "delimiter",
                "name"
            ],
            "_lookup_table_export": [
                "table_handle",
                "Tkeys",
                "Tvalues",
                "name"
            ],
            "_lookup_table_find": [
                "table_handle",
                "keys",
                "default_value",
                "name"
            ],
            "_lookup_table_import": [
                "table_handle",
                "keys",
                "values",
                "name"
            ],
            "_lookup_table_insert": [
                "table_handle",
                "keys",
                "values",
                "name"
            ],
            "_lookup_table_size": [
                "table_handle",
                "name"
            ],
            "_mutable_dense_hash_table": [
                "empty_key",
                "value_dtype",
                "container",
                "shared_name",
                "use_node_name_sharing",
                "value_shape",
                "initial_num_buckets",
                "max_load_factor",
                "name"
            ],
            "_mutable_hash_table": [
                "key_dtype",
                "value_dtype",
                "container",
                "shared_name",
                "use_node_name_sharing",
                "name"
            ],
            "_mutable_hash_table_of_tensors": [
                "key_dtype",
                "value_dtype",
                "container",
                "shared_name",
                "use_node_name_sharing",
                "value_shape",
                "name"
            ],
            "_padding_fifo_queue": [
                "component_types",
                "shapes",
                "capacity",
                "container",
                "shared_name",
                "name"
            ],
            "_padding_fifo_queue_v2": [
                "component_types",
                "shapes",
                "capacity",
                "container",
                "shared_name",
                "name"
            ],
            "_priority_queue": [
                "shapes",
                "component_types",
                "capacity",
                "container",
                "shared_name",
                "name"
            ],
            "_priority_queue_v2": [
                "shapes",
                "component_types",
                "capacity",
                "container",
                "shared_name",
                "name"
            ],
            "_queue_close": [
                "handle",
                "cancel_pending_enqueues",
                "name"
            ],
            "_queue_close_v2": [
                "handle",
                "cancel_pending_enqueues",
                "name"
            ],
            "_queue_dequeue": [
                "handle",
                "component_types",
                "timeout_ms",
                "name"
            ],
            "_queue_dequeue_many": [
                "handle",
                "n",
                "component_types",
                "timeout_ms",
                "name"
            ],
            "_queue_dequeue_many_v2": [
                "handle",
                "n",
                "component_types",
                "timeout_ms",
                "name"
            ],
            "_queue_dequeue_up_to": [
                "handle",
                "n",
                "component_types",
                "timeout_ms",
                "name"
            ],
            "_queue_dequeue_up_to_v2": [
                "handle",
                "n",
                "component_types",
                "timeout_ms",
                "name"
            ],
            "_queue_dequeue_v2": [
                "handle",
                "component_types",
                "timeout_ms",
                "name"
            ],
            "_queue_enqueue": [
                "handle",
                "components",
                "timeout_ms",
                "name"
            ],
            "_queue_enqueue_many": [
                "handle",
                "components",
                "timeout_ms",
                "name"
            ],
            "_queue_enqueue_many_v2": [
                "handle",
                "components",
                "timeout_ms",
                "name"
            ],
            "_queue_enqueue_v2": [
                "handle",
                "components",
                "timeout_ms",
                "name"
            ],
            "_queue_size": [
                "handle",
                "name"
            ],
            "_queue_size_v2": [
                "handle",
                "name"
            ],
            "_random_shuffle_queue": [
                "component_types",
                "shapes",
                "capacity",
                "min_after_dequeue",
                "seed",
                "seed2",
                "container",
                "shared_name",
                "name"
            ],
            "_random_shuffle_queue_v2": [
                "component_types",
                "shapes",
                "capacity",
                "min_after_dequeue",
                "seed",
                "seed2",
                "container",
                "shared_name",
                "name"
            ],
            "record_input": [
                "file_pattern",
                "file_random_seed",
                "file_shuffle_shift_ratio",
                "file_buffer_size",
                "file_parallelism",
                "batch_size",
                "name"
            ],
            "sparse_accumulator_apply_gradient": [
                "handle",
                "local_step",
                "gradient_indices",
                "gradient_values",
                "gradient_shape",
                "has_known_shape",
                "name"
            ],
            "sparse_accumulator_take_gradient": [
                "handle",
                "num_required",
                "dtype",
                "name"
            ],
            "sparse_conditional_accumulator": [
                "dtype",
                "shape",
                "container",
                "shared_name",
                "name"
            ],
            "_stack": [
                "elem_type",
                "stack_name",
                "name"
            ],
            "_stack_close": [
                "handle",
                "name"
            ],
            "_stack_pop": [
                "handle",
                "elem_type",
                "name"
            ],
            "_stack_push": [
                "handle",
                "elem",
                "swap_memory",
                "name"
            ],
            "stage": [
                "values",
                "container",
                "shared_name",
                "name"
            ],
            "_tensor_array": [
                "size",
                "dtype",
                "dynamic_size",
                "clear_after_read",
                "tensor_array_name",
                "element_shape",
                "name"
            ],
            "_tensor_array_close": [
                "handle",
                "name"
            ],
            "_tensor_array_close_v2": [
                "handle",
                "name"
            ],
            "_tensor_array_close_v3": [
                "handle",
                "name"
            ],
            "_tensor_array_concat": [
                "handle",
                "flow_in",
                "dtype",
                "element_shape_except0",
                "name"
            ],
            "_tensor_array_concat_v2": [
                "handle",
                "flow_in",
                "dtype",
                "element_shape_except0",
                "name"
            ],
            "_tensor_array_concat_v3": [
                "handle",
                "flow_in",
                "dtype",
                "element_shape_except0",
                "name"
            ],
            "_tensor_array_gather": [
                "handle",
                "indices",
                "flow_in",
                "dtype",
                "element_shape",
                "name"
            ],
            "_tensor_array_gather_v2": [
                "handle",
                "indices",
                "flow_in",
                "dtype",
                "element_shape",
                "name"
            ],
            "_tensor_array_gather_v3": [
                "handle",
                "indices",
                "flow_in",
                "dtype",
                "element_shape",
                "name"
            ],
            "_tensor_array_grad": [
                "handle",
                "flow_in",
                "source",
                "name"
            ],
            "_tensor_array_grad_v2": [
                "handle",
                "flow_in",
                "source",
                "name"
            ],
            "_tensor_array_grad_v3": [
                "handle",
                "flow_in",
                "source",
                "name"
            ],
            "_tensor_array_pack": [
                "handle",
                "flow_in",
                "dtype",
                "element_shape",
                "name"
            ],
            "_tensor_array_read": [
                "handle",
                "index",
                "flow_in",
                "dtype",
                "name"
            ],
            "_tensor_array_read_v2": [
                "handle",
                "index",
                "flow_in",
                "dtype",
                "name"
            ],
            "_tensor_array_read_v3": [
                "handle",
                "index",
                "flow_in",
                "dtype",
                "name"
            ],
            "_tensor_array_scatter": [
                "handle",
                "indices",
                "value",
                "flow_in",
                "name"
            ],
            "_tensor_array_scatter_v2": [
                "handle",
                "indices",
                "value",
                "flow_in",
                "name"
            ],
            "_tensor_array_scatter_v3": [
                "handle",
                "indices",
                "value",
                "flow_in",
                "name"
            ],
            "_tensor_array_size": [
                "handle",
                "flow_in",
                "name"
            ],
            "_tensor_array_size_v2": [
                "handle",
                "flow_in",
                "name"
            ],
            "_tensor_array_size_v3": [
                "handle",
                "flow_in",
                "name"
            ],
            "_tensor_array_split": [
                "handle",
                "value",
                "lengths",
                "flow_in",
                "name"
            ],
            "_tensor_array_split_v2": [
                "handle",
                "value",
                "lengths",
                "flow_in",
                "name"
            ],
            "_tensor_array_split_v3": [
                "handle",
                "value",
                "lengths",
                "flow_in",
                "name"
            ],
            "_tensor_array_unpack": [
                "handle",
                "value",
                "flow_in",
                "name"
            ],
            "_tensor_array_v2": [
                "size",
                "dtype",
                "element_shape",
                "dynamic_size",
                "clear_after_read",
                "tensor_array_name",
                "name"
            ],
            "_tensor_array_v3": [
                "size",
                "dtype",
                "element_shape",
                "dynamic_size",
                "clear_after_read",
                "tensor_array_name",
                "name"
            ],
            "_tensor_array_write": [
                "handle",
                "index",
                "value",
                "flow_in",
                "name"
            ],
            "_tensor_array_write_v2": [
                "handle",
                "index",
                "value",
                "flow_in",
                "name"
            ],
            "_tensor_array_write_v3": [
                "handle",
                "index",
                "value",
                "flow_in",
                "name"
            ],
            "unstage": [
                "dtypes",
                "container",
                "shared_name",
                "name"
            ],
            "_InitOpDefLibrary": []
        },
        "tensorflow.python.ops.gen_nn_ops": {
            "_avg_pool": [
                "value",
                "ksize",
                "strides",
                "padding",
                "data_format",
                "name"
            ],
            "avg_pool3d": [
                "input",
                "ksize",
                "strides",
                "padding",
                "name"
            ],
            "avg_pool3d_grad": [
                "orig_input_shape",
                "grad",
                "ksize",
                "strides",
                "padding",
                "name"
            ],
            "_avg_pool_grad": [
                "orig_input_shape",
                "grad",
                "ksize",
                "strides",
                "padding",
                "data_format",
                "name"
            ],
            "_batch_norm_with_global_normalization": [
                "t",
                "m",
                "v",
                "beta",
                "gamma",
                "variance_epsilon",
                "scale_after_normalization",
                "name"
            ],
            "_batch_norm_with_global_normalization_grad": [
                "t",
                "m",
                "v",
                "gamma",
                "backprop",
                "variance_epsilon",
                "scale_after_normalization",
                "name"
            ],
            "_bias_add": [
                "value",
                "bias",
                "data_format",
                "name"
            ],
            "bias_add_grad": [
                "out_backprop",
                "data_format",
                "name"
            ],
            "_bias_add_v1": [
                "value",
                "bias",
                "name"
            ],
            "conv2d": [
                "input",
                "filter",
                "strides",
                "padding",
                "use_cudnn_on_gpu",
                "data_format",
                "name"
            ],
            "conv2d_backprop_filter": [
                "input",
                "filter_sizes",
                "out_backprop",
                "strides",
                "padding",
                "use_cudnn_on_gpu",
                "data_format",
                "name"
            ],
            "conv2d_backprop_input": [
                "input_sizes",
                "filter",
                "out_backprop",
                "strides",
                "padding",
                "use_cudnn_on_gpu",
                "data_format",
                "name"
            ],
            "conv3d": [
                "input",
                "filter",
                "strides",
                "padding",
                "name"
            ],
            "conv3d_backprop_filter": [
                "input",
                "filter",
                "out_backprop",
                "strides",
                "padding",
                "name"
            ],
            "conv3d_backprop_filter_v2": [
                "input",
                "filter_sizes",
                "out_backprop",
                "strides",
                "padding",
                "name"
            ],
            "conv3d_backprop_input": [
                "input",
                "filter",
                "out_backprop",
                "strides",
                "padding",
                "name"
            ],
            "conv3d_backprop_input_v2": [
                "input_sizes",
                "filter",
                "out_backprop",
                "strides",
                "padding",
                "name"
            ],
            "depthwise_conv2d_native": [
                "input",
                "filter",
                "strides",
                "padding",
                "name"
            ],
            "depthwise_conv2d_native_backprop_filter": [
                "input",
                "filter_sizes",
                "out_backprop",
                "strides",
                "padding",
                "name"
            ],
            "depthwise_conv2d_native_backprop_input": [
                "input_sizes",
                "filter",
                "out_backprop",
                "strides",
                "padding",
                "name"
            ],
            "dilation2d": [
                "input",
                "filter",
                "strides",
                "rates",
                "padding",
                "name"
            ],
            "dilation2d_backprop_filter": [
                "input",
                "filter",
                "out_backprop",
                "strides",
                "rates",
                "padding",
                "name"
            ],
            "dilation2d_backprop_input": [
                "input",
                "filter",
                "out_backprop",
                "strides",
                "rates",
                "padding",
                "name"
            ],
            "elu": [
                "features",
                "name"
            ],
            "_elu_grad": [
                "gradients",
                "outputs",
                "name"
            ],
            "fractional_avg_pool": [
                "value",
                "pooling_ratio",
                "pseudo_random",
                "overlapping",
                "deterministic",
                "seed",
                "seed2",
                "name"
            ],
            "_fractional_avg_pool_grad": [
                "orig_input_tensor_shape",
                "out_backprop",
                "row_pooling_sequence",
                "col_pooling_sequence",
                "overlapping",
                "name"
            ],
            "fractional_max_pool": [
                "value",
                "pooling_ratio",
                "pseudo_random",
                "overlapping",
                "deterministic",
                "seed",
                "seed2",
                "name"
            ],
            "_fractional_max_pool_grad": [
                "orig_input",
                "orig_output",
                "out_backprop",
                "row_pooling_sequence",
                "col_pooling_sequence",
                "overlapping",
                "name"
            ],
            "_fused_batch_norm": [
                "x",
                "scale",
                "offset",
                "mean",
                "variance",
                "epsilon",
                "data_format",
                "is_training",
                "name"
            ],
            "fused_batch_norm_grad": [
                "y_backprop",
                "x",
                "scale",
                "reserve_space_1",
                "reserve_space_2",
                "epsilon",
                "data_format",
                "is_training",
                "name"
            ],
            "fused_pad_conv2d": [
                "input",
                "paddings",
                "filter",
                "mode",
                "strides",
                "padding",
                "name"
            ],
            "fused_resize_and_pad_conv2d": [
                "input",
                "size",
                "paddings",
                "filter",
                "mode",
                "strides",
                "padding",
                "resize_align_corners",
                "name"
            ],
            "in_top_k": [
                "predictions",
                "targets",
                "k",
                "name"
            ],
            "l2_loss": [
                "t",
                "name"
            ],
            "lrn": [
                "input",
                "depth_radius",
                "bias",
                "alpha",
                "beta",
                "name"
            ],
            "_lrn_grad": [
                "input_grads",
                "input_image",
                "output_image",
                "depth_radius",
                "bias",
                "alpha",
                "beta",
                "name"
            ],
            "_log_softmax": [
                "logits",
                "name"
            ],
            "_max_pool": [
                "input",
                "ksize",
                "strides",
                "padding",
                "data_format",
                "name"
            ],
            "max_pool3d": [
                "input",
                "ksize",
                "strides",
                "padding",
                "name"
            ],
            "max_pool3d_grad": [
                "orig_input",
                "orig_output",
                "grad",
                "ksize",
                "strides",
                "padding",
                "name"
            ],
            "_max_pool_grad": [
                "orig_input",
                "orig_output",
                "grad",
                "ksize",
                "strides",
                "padding",
                "data_format",
                "name"
            ],
            "_max_pool_grad_with_argmax": [
                "input",
                "grad",
                "argmax",
                "ksize",
                "strides",
                "padding",
                "name"
            ],
            "max_pool_with_argmax": [
                "input",
                "ksize",
                "strides",
                "padding",
                "Targmax",
                "name"
            ],
            "quantized_avg_pool": [
                "input",
                "min_input",
                "max_input",
                "ksize",
                "strides",
                "padding",
                "name"
            ],
            "quantized_batch_norm_with_global_normalization": [
                "t",
                "t_min",
                "t_max",
                "m",
                "m_min",
                "m_max",
                "v",
                "v_min",
                "v_max",
                "beta",
                "beta_min",
                "beta_max",
                "gamma",
                "gamma_min",
                "gamma_max",
                "out_type",
                "variance_epsilon",
                "scale_after_normalization",
                "name"
            ],
            "quantized_bias_add": [
                "input",
                "bias",
                "min_input",
                "max_input",
                "min_bias",
                "max_bias",
                "out_type",
                "name"
            ],
            "quantized_conv2d": [
                "input",
                "filter",
                "min_input",
                "max_input",
                "min_filter",
                "max_filter",
                "strides",
                "padding",
                "out_type",
                "name"
            ],
            "quantized_max_pool": [
                "input",
                "min_input",
                "max_input",
                "ksize",
                "strides",
                "padding",
                "name"
            ],
            "quantized_relu": [
                "features",
                "min_features",
                "max_features",
                "out_type",
                "name"
            ],
            "quantized_relu6": [
                "features",
                "min_features",
                "max_features",
                "out_type",
                "name"
            ],
            "quantized_relu_x": [
                "features",
                "max_value",
                "min_features",
                "max_features",
                "out_type",
                "name"
            ],
            "relu": [
                "features",
                "name"
            ],
            "_relu6": [
                "features",
                "name"
            ],
            "_relu6_grad": [
                "gradients",
                "features",
                "name"
            ],
            "_relu_grad": [
                "gradients",
                "features",
                "name"
            ],
            "_softmax": [
                "logits",
                "name"
            ],
            "_softmax_cross_entropy_with_logits": [
                "features",
                "labels",
                "name"
            ],
            "softplus": [
                "features",
                "name"
            ],
            "_softplus_grad": [
                "gradients",
                "features",
                "name"
            ],
            "softsign": [
                "features",
                "name"
            ],
            "_softsign_grad": [
                "gradients",
                "features",
                "name"
            ],
            "_sparse_softmax_cross_entropy_with_logits": [
                "features",
                "labels",
                "name"
            ],
            "_top_k": [
                "input",
                "k",
                "sorted",
                "name"
            ],
            "_top_kv2": [
                "input",
                "k",
                "sorted",
                "name"
            ],
            "_InitOpDefLibrary": []
        },
        "tensorflow.python.ops.sets_impl": {
            "set_size": [
                "a",
                "validate_indices"
            ],
            "_convert_to_tensors_or_sparse_tensors": [
                "a",
                "b"
            ],
            "_set_operation": [
                "a",
                "b",
                "set_operation",
                "validate_indices"
            ],
            "set_intersection": [
                "a",
                "b",
                "validate_indices"
            ],
            "set_difference": [
                "a",
                "b",
                "aminusb",
                "validate_indices"
            ],
            "set_union": [
                "a",
                "b",
                "validate_indices"
            ]
        },
        "tensorflow.python.ops.gen_image_ops": {
            "adjust_contrast": [
                "images",
                "contrast_factor",
                "min_value",
                "max_value",
                "name"
            ],
            "_adjust_contrastv2": [
                "images",
                "contrast_factor",
                "name"
            ],
            "adjust_hue": [
                "images",
                "delta",
                "name"
            ],
            "adjust_saturation": [
                "images",
                "scale",
                "name"
            ],
            "crop_and_resize": [
                "image",
                "boxes",
                "box_ind",
                "crop_size",
                "method",
                "extrapolation_value",
                "name"
            ],
            "crop_and_resize_grad_boxes": [
                "grads",
                "image",
                "boxes",
                "box_ind",
                "method",
                "name"
            ],
            "crop_and_resize_grad_image": [
                "grads",
                "boxes",
                "box_ind",
                "image_size",
                "T",
                "method",
                "name"
            ],
            "decode_gif": [
                "contents",
                "name"
            ],
            "decode_jpeg": [
                "contents",
                "channels",
                "ratio",
                "fancy_upscaling",
                "try_recover_truncated",
                "acceptable_fraction",
                "dct_method",
                "name"
            ],
            "decode_png": [
                "contents",
                "channels",
                "dtype",
                "name"
            ],
            "draw_bounding_boxes": [
                "images",
                "boxes",
                "name"
            ],
            "encode_jpeg": [
                "image",
                "format",
                "quality",
                "progressive",
                "optimize_size",
                "chroma_downsampling",
                "density_unit",
                "x_density",
                "y_density",
                "xmp_metadata",
                "name"
            ],
            "encode_png": [
                "image",
                "compression",
                "name"
            ],
            "extract_glimpse": [
                "input",
                "size",
                "offsets",
                "centered",
                "normalized",
                "uniform_noise",
                "name"
            ],
            "hsv_to_rgb": [
                "images",
                "name"
            ],
            "non_max_suppression": [
                "boxes",
                "scores",
                "max_output_size",
                "iou_threshold",
                "name"
            ],
            "rgb_to_hsv": [
                "images",
                "name"
            ],
            "_random_crop": [
                "image",
                "size",
                "seed",
                "seed2",
                "name"
            ],
            "resize_area": [
                "images",
                "size",
                "align_corners",
                "name"
            ],
            "resize_bicubic": [
                "images",
                "size",
                "align_corners",
                "name"
            ],
            "resize_bilinear": [
                "images",
                "size",
                "align_corners",
                "name"
            ],
            "_resize_bilinear_grad": [
                "grads",
                "original_image",
                "align_corners",
                "name"
            ],
            "resize_nearest_neighbor": [
                "images",
                "size",
                "align_corners",
                "name"
            ],
            "_resize_nearest_neighbor_grad": [
                "grads",
                "size",
                "align_corners",
                "name"
            ],
            "sample_distorted_bounding_box": [
                "image_size",
                "bounding_boxes",
                "seed",
                "seed2",
                "min_object_covered",
                "aspect_ratio_range",
                "area_range",
                "max_attempts",
                "use_image_if_no_bounding_boxes",
                "name"
            ],
            "_InitOpDefLibrary": []
        },
        "tensorflow.python.ops.gen_user_ops": {
            "_fact": [
                "name"
            ],
            "_InitOpDefLibrary": []
        },
        "tensorflow.python.ops.gradients": {},
        "tensorflow.python.ops.resources": {
            "register_resource": [
                "handle",
                "create_op",
                "is_initialized_op",
                "is_shared"
            ],
            "shared_resources": [],
            "local_resources": [],
            "report_uninitialized_resources": [
                "resource_list",
                "name"
            ],
            "initialize_resources": [
                "resource_list",
                "name"
            ]
        },
        "tensorflow.python.ops.sets": {},
        "tensorflow.python.ops.rnn_cell_impl": {
            "_state_size_with_prefix": [
                "state_size",
                "prefix"
            ],
            "_RNNCell": {
                "__call__": [
                    "self",
                    "inputs",
                    "state",
                    "scope"
                ],
                "state_size": [
                    "self"
                ],
                "output_size": [
                    "self"
                ],
                "zero_state": [
                    "self",
                    "batch_size",
                    "dtype"
                ]
            }
        },
        "tensorflow.python.ops.gen_state_ops": {
            "assign": [
                "ref",
                "value",
                "validate_shape",
                "use_locking",
                "name"
            ],
            "assign_add": [
                "ref",
                "value",
                "use_locking",
                "name"
            ],
            "assign_sub": [
                "ref",
                "value",
                "use_locking",
                "name"
            ],
            "count_up_to": [
                "ref",
                "limit",
                "name"
            ],
            "_destroy_temporary_variable": [
                "ref",
                "var_name",
                "name"
            ],
            "is_variable_initialized": [
                "ref",
                "name"
            ],
            "scatter_add": [
                "ref",
                "indices",
                "updates",
                "use_locking",
                "name"
            ],
            "scatter_div": [
                "ref",
                "indices",
                "updates",
                "use_locking",
                "name"
            ],
            "scatter_mul": [
                "ref",
                "indices",
                "updates",
                "use_locking",
                "name"
            ],
            "scatter_nd_add": [
                "ref",
                "indices",
                "updates",
                "use_locking",
                "name"
            ],
            "scatter_nd_sub": [
                "ref",
                "indices",
                "updates",
                "use_locking",
                "name"
            ],
            "scatter_nd_update": [
                "ref",
                "indices",
                "updates",
                "use_locking",
                "name"
            ],
            "scatter_sub": [
                "ref",
                "indices",
                "updates",
                "use_locking",
                "name"
            ],
            "scatter_update": [
                "ref",
                "indices",
                "updates",
                "use_locking",
                "name"
            ],
            "_temporary_variable": [
                "shape",
                "dtype",
                "var_name",
                "name"
            ],
            "_variable": [
                "shape",
                "dtype",
                "container",
                "shared_name",
                "name"
            ],
            "_variable_v2": [
                "shape",
                "dtype",
                "container",
                "shared_name",
                "name"
            ],
            "_InitOpDefLibrary": []
        },
        "tensorflow.python.ops.gen_logging_ops": {
            "_assert": [
                "condition",
                "data",
                "summarize",
                "name"
            ],
            "_audio_summary": [
                "tag",
                "tensor",
                "sample_rate",
                "max_outputs",
                "name"
            ],
            "_audio_summary_v2": [
                "tag",
                "tensor",
                "sample_rate",
                "max_outputs",
                "name"
            ],
            "_histogram_summary": [
                "tag",
                "values",
                "name"
            ],
            "_image_summary": [
                "tag",
                "tensor",
                "max_images",
                "bad_color",
                "name"
            ],
            "_merge_summary": [
                "inputs",
                "name"
            ],
            "_print": [
                "input",
                "data",
                "message",
                "first_n",
                "summarize",
                "name"
            ],
            "_scalar_summary": [
                "tags",
                "values",
                "name"
            ],
            "_tensor_summary": [
                "tensor",
                "description",
                "labels",
                "display_name",
                "name"
            ],
            "_InitOpDefLibrary": []
        },
        "tensorflow.python.ops.state_ops": {
            "variable_op": [
                "shape",
                "dtype",
                "name",
                "set_shape",
                "container",
                "shared_name"
            ],
            "variable_op_v2": [
                "shape",
                "dtype",
                "name",
                "container",
                "shared_name"
            ],
            "init_variable": [
                "v",
                "init",
                "name"
            ],
            "is_variable_initialized": [
                "ref",
                "name"
            ]
        },
        "tensorflow.python.ops.gen_array_ops": {
            "batch_matrix_band_part": [
                "input",
                "num_lower",
                "num_upper",
                "name"
            ],
            "batch_matrix_diag": [
                "diagonal",
                "name"
            ],
            "batch_matrix_diag_part": [
                "input",
                "name"
            ],
            "batch_matrix_set_diag": [
                "input",
                "diagonal",
                "name"
            ],
            "_batch_to_space": [
                "input",
                "crops",
                "block_size",
                "name"
            ],
            "batch_to_space_nd": [
                "input",
                "block_shape",
                "crops",
                "name"
            ],
            "bitcast": [
                "input",
                "type",
                "name"
            ],
            "_broadcast_args": [
                "s0",
                "s1",
                "name"
            ],
            "_broadcast_gradient_args": [
                "s0",
                "s1",
                "name"
            ],
            "check_numerics": [
                "tensor",
                "message",
                "name"
            ],
            "_concat": [
                "concat_dim",
                "values",
                "name"
            ],
            "_concat_offset": [
                "concat_dim",
                "shape",
                "name"
            ],
            "_concat_v2": [
                "values",
                "axis",
                "name"
            ],
            "_const": [
                "value",
                "dtype",
                "name"
            ],
            "copy": [
                "input",
                "tensor_name",
                "name"
            ],
            "copy_host": [
                "input",
                "tensor_name",
                "name"
            ],
            "debug_identity": [
                "input",
                "tensor_name",
                "debug_urls",
                "name"
            ],
            "debug_nan_count": [
                "input",
                "tensor_name",
                "debug_urls",
                "name"
            ],
            "debug_numeric_summary": [
                "input",
                "tensor_name",
                "debug_urls",
                "name"
            ],
            "depth_to_space": [
                "input",
                "block_size",
                "name"
            ],
            "dequantize": [
                "input",
                "min_range",
                "max_range",
                "mode",
                "name"
            ],
            "diag": [
                "diagonal",
                "name"
            ],
            "diag_part": [
                "input",
                "name"
            ],
            "_edit_distance": [
                "hypothesis_indices",
                "hypothesis_values",
                "hypothesis_shape",
                "truth_indices",
                "truth_values",
                "truth_shape",
                "normalize",
                "name"
            ],
            "_expand_dims": [
                "input",
                "dim",
                "name"
            ],
            "extract_image_patches": [
                "images",
                "ksizes",
                "strides",
                "rates",
                "padding",
                "name"
            ],
            "fake_quant_with_min_max_args": [
                "inputs",
                "min",
                "max",
                "name"
            ],
            "fake_quant_with_min_max_args_gradient": [
                "gradients",
                "inputs",
                "min",
                "max",
                "name"
            ],
            "fake_quant_with_min_max_vars": [
                "inputs",
                "min",
                "max",
                "name"
            ],
            "fake_quant_with_min_max_vars_gradient": [
                "gradients",
                "inputs",
                "min",
                "max",
                "name"
            ],
            "fake_quant_with_min_max_vars_per_channel": [
                "inputs",
                "min",
                "max",
                "name"
            ],
            "fake_quant_with_min_max_vars_per_channel_gradient": [
                "gradients",
                "inputs",
                "min",
                "max",
                "name"
            ],
            "fill": [
                "dims",
                "value",
                "name"
            ],
            "gather": [
                "params",
                "indices",
                "validate_indices",
                "name"
            ],
            "gather_nd": [
                "params",
                "indices",
                "name"
            ],
            "identity": [
                "input",
                "name"
            ],
            "immutable_const": [
                "dtype",
                "shape",
                "memory_region_name",
                "name"
            ],
            "invert_permutation": [
                "x",
                "name"
            ],
            "_list_diff": [
                "x",
                "y",
                "out_idx",
                "name"
            ],
            "matrix_band_part": [
                "input",
                "num_lower",
                "num_upper",
                "name"
            ],
            "matrix_diag": [
                "diagonal",
                "name"
            ],
            "matrix_diag_part": [
                "input",
                "name"
            ],
            "matrix_set_diag": [
                "input",
                "diagonal",
                "name"
            ],
            "_mirror_pad": [
                "input",
                "paddings",
                "mode",
                "name"
            ],
            "_mirror_pad_grad": [
                "input",
                "paddings",
                "mode",
                "name"
            ],
            "_one_hot": [
                "indices",
                "depth",
                "on_value",
                "off_value",
                "axis",
                "name"
            ],
            "_pack": [
                "values",
                "axis",
                "name"
            ],
            "_pad": [
                "input",
                "paddings",
                "name"
            ],
            "_parallel_concat": [
                "values",
                "shape",
                "name"
            ],
            "_placeholder": [
                "dtype",
                "shape",
                "name"
            ],
            "placeholder_v2": [
                "dtype",
                "shape",
                "name"
            ],
            "placeholder_with_default": [
                "input",
                "shape",
                "name"
            ],
            "prevent_gradient": [
                "input",
                "name"
            ],
            "quantize_and_dequantize": [
                "input",
                "signed_input",
                "num_bits",
                "range_given",
                "input_min",
                "input_max",
                "name"
            ],
            "quantize_v2": [
                "input",
                "min_range",
                "max_range",
                "T",
                "mode",
                "name"
            ],
            "quantized_concat": [
                "concat_dim",
                "values",
                "input_mins",
                "input_maxes",
                "name"
            ],
            "quantized_instance_norm": [
                "x",
                "x_min",
                "x_max",
                "output_range_given",
                "given_y_min",
                "given_y_max",
                "variance_epsilon",
                "min_separation",
                "name"
            ],
            "quantized_reshape": [
                "tensor",
                "shape",
                "input_min",
                "input_max",
                "name"
            ],
            "rank": [
                "input",
                "name"
            ],
            "_ref_identity": [
                "input",
                "name"
            ],
            "reshape": [
                "tensor",
                "shape",
                "name"
            ],
            "_reverse": [
                "tensor",
                "dims",
                "name"
            ],
            "reverse_sequence": [
                "input",
                "seq_lengths",
                "seq_dim",
                "batch_dim",
                "name"
            ],
            "reverse_v2": [
                "tensor",
                "axis",
                "name"
            ],
            "scatter_nd": [
                "indices",
                "updates",
                "shape",
                "name"
            ],
            "shape": [
                "input",
                "out_type",
                "name"
            ],
            "shape_n": [
                "input",
                "out_type",
                "name"
            ],
            "size": [
                "input",
                "out_type",
                "name"
            ],
            "_slice": [
                "input",
                "begin",
                "size",
                "name"
            ],
            "_space_to_batch": [
                "input",
                "paddings",
                "block_size",
                "name"
            ],
            "space_to_batch_nd": [
                "input",
                "block_shape",
                "paddings",
                "name"
            ],
            "space_to_depth": [
                "input",
                "block_size",
                "name"
            ],
            "_split": [
                "split_dim",
                "value",
                "num_split",
                "name"
            ],
            "_split_v": [
                "value",
                "size_splits",
                "split_dim",
                "num_split",
                "name"
            ],
            "_squeeze": [
                "input",
                "squeeze_dims",
                "name"
            ],
            "stop_gradient": [
                "input",
                "name"
            ],
            "strided_slice": [
                "input",
                "begin",
                "end",
                "strides",
                "begin_mask",
                "end_mask",
                "ellipsis_mask",
                "new_axis_mask",
                "shrink_axis_mask",
                "name"
            ],
            "strided_slice_assign": [
                "ref",
                "begin",
                "end",
                "strides",
                "value",
                "begin_mask",
                "end_mask",
                "ellipsis_mask",
                "new_axis_mask",
                "shrink_axis_mask",
                "name"
            ],
            "strided_slice_grad": [
                "shape",
                "begin",
                "end",
                "strides",
                "dy",
                "begin_mask",
                "end_mask",
                "ellipsis_mask",
                "new_axis_mask",
                "shrink_axis_mask",
                "name"
            ],
            "tile": [
                "input",
                "multiples",
                "name"
            ],
            "_tile_grad": [
                "input",
                "multiples",
                "name"
            ],
            "transpose": [
                "x",
                "perm",
                "name"
            ],
            "unique": [
                "x",
                "out_idx",
                "name"
            ],
            "unique_with_counts": [
                "x",
                "out_idx",
                "name"
            ],
            "_unpack": [
                "value",
                "num",
                "axis",
                "name"
            ],
            "where": [
                "input",
                "name"
            ],
            "_zeros_like": [
                "x",
                "name"
            ],
            "_InitOpDefLibrary": []
        },
        "tensorflow.python.ops.metrics": {},
        "tensorflow.python.ops.data_flow_ops": {
            "_as_type_list": [
                "dtypes"
            ],
            "_as_shape_list": [
                "shapes",
                "dtypes",
                "unknown_dim_allowed",
                "unknown_rank_allowed"
            ],
            "_as_name_list": [
                "names",
                "dtypes"
            ],
            "_shape_common": [
                "s1",
                "s2"
            ],
            "initialize_all_tables": [
                "name"
            ],
            "tables_initializer": [
                "name"
            ],
            "QueueBase": {
                "__init__": [
                    "self",
                    "dtypes",
                    "shapes",
                    "names",
                    "queue_ref"
                ],
                "from_list": [
                    "index",
                    "queues"
                ],
                "queue_ref": [
                    "self"
                ],
                "name": [
                    "self"
                ],
                "dtypes": [
                    "self"
                ],
                "shapes": [
                    "self"
                ],
                "names": [
                    "self"
                ],
                "_check_enqueue_dtypes": [
                    "self",
                    "vals"
                ],
                "_scope_vals": [
                    "self",
                    "vals"
                ],
                "enqueue": [
                    "self",
                    "vals",
                    "name"
                ],
                "enqueue_many": [
                    "self",
                    "vals",
                    "name"
                ],
                "_dequeue_return_value": [
                    "self",
                    "tensors"
                ],
                "dequeue": [
                    "self",
                    "name"
                ],
                "dequeue_many": [
                    "self",
                    "n",
                    "name"
                ],
                "dequeue_up_to": [
                    "self",
                    "n",
                    "name"
                ],
                "close": [
                    "self",
                    "cancel_pending_enqueues",
                    "name"
                ],
                "size": [
                    "self",
                    "name"
                ]
            },
            "RandomShuffleQueue": {
                "__init__": [
                    "self",
                    "capacity",
                    "min_after_dequeue",
                    "dtypes",
                    "shapes",
                    "names",
                    "seed",
                    "shared_name",
                    "name"
                ]
            },
            "FIFOQueue": {
                "__init__": [
                    "self",
                    "capacity",
                    "dtypes",
                    "shapes",
                    "names",
                    "shared_name",
                    "name"
                ]
            },
            "PaddingFIFOQueue": {
                "__init__": [
                    "self",
                    "capacity",
                    "dtypes",
                    "shapes",
                    "names",
                    "shared_name",
                    "name"
                ]
            },
            "PriorityQueue": {
                "__init__": [
                    "self",
                    "capacity",
                    "types",
                    "shapes",
                    "names",
                    "shared_name",
                    "name"
                ]
            },
            "Barrier": {
                "__init__": [
                    "self",
                    "types",
                    "shapes",
                    "shared_name",
                    "name"
                ],
                "barrier_ref": [
                    "self"
                ],
                "name": [
                    "self"
                ],
                "insert_many": [
                    "self",
                    "component_index",
                    "keys",
                    "values",
                    "name"
                ],
                "take_many": [
                    "self",
                    "num_elements",
                    "allow_small_batch",
                    "timeout",
                    "name"
                ],
                "close": [
                    "self",
                    "cancel_pending_enqueues",
                    "name"
                ],
                "ready_size": [
                    "self",
                    "name"
                ],
                "incomplete_size": [
                    "self",
                    "name"
                ]
            },
            "ConditionalAccumulatorBase": {
                "__init__": [
                    "self",
                    "dtype",
                    "shape",
                    "accumulator_ref"
                ],
                "accumulator_ref": [
                    "self"
                ],
                "name": [
                    "self"
                ],
                "dtype": [
                    "self"
                ],
                "num_accumulated": [
                    "self",
                    "name"
                ],
                "set_global_step": [
                    "self",
                    "new_global_step",
                    "name"
                ]
            },
            "ConditionalAccumulator": {
                "__init__": [
                    "self",
                    "dtype",
                    "shape",
                    "shared_name",
                    "name"
                ],
                "apply_grad": [
                    "self",
                    "grad",
                    "local_step",
                    "name"
                ],
                "take_grad": [
                    "self",
                    "num_required",
                    "name"
                ]
            },
            "SparseConditionalAccumulator": {
                "__init__": [
                    "self",
                    "dtype",
                    "shape",
                    "shared_name",
                    "name"
                ],
                "apply_indexed_slices_grad": [
                    "self",
                    "grad",
                    "local_step",
                    "name"
                ],
                "apply_grad": [
                    "self",
                    "grad_indices",
                    "grad_values",
                    "grad_shape",
                    "local_step",
                    "name"
                ],
                "take_grad": [
                    "self",
                    "num_required",
                    "name"
                ],
                "take_indexed_slices_grad": [
                    "self",
                    "num_required",
                    "name"
                ]
            },
            "StagingArea": {
                "__init__": [
                    "self",
                    "dtypes",
                    "shapes",
                    "names",
                    "shared_name"
                ],
                "name": [
                    "self"
                ],
                "dtypes": [
                    "self"
                ],
                "shapes": [
                    "self"
                ],
                "names": [
                    "self"
                ],
                "_check_put_dtypes": [
                    "self",
                    "vals"
                ],
                "_scope_vals": [
                    "self",
                    "vals"
                ],
                "put": [
                    "self",
                    "values",
                    "name"
                ],
                "_get_return_value": [
                    "self",
                    "tensors"
                ],
                "get": [
                    "self",
                    "name"
                ]
            },
            "RecordInput": {
                "__init__": [
                    "self",
                    "file_pattern",
                    "batch_size",
                    "buffer_size",
                    "parallelism",
                    "shift_ratio",
                    "seed",
                    "name"
                ],
                "get_yield_op": [
                    "self"
                ]
            }
        },
        "tensorflow.python.ops.parsing_ops": {
            "_features_to_raw_params": [
                "features",
                "types"
            ],
            "_construct_sparse_tensors_for_sparse_features": [
                "features",
                "tensor_dict"
            ],
            "parse_example": [
                "serialized",
                "features",
                "name",
                "example_names"
            ],
            "_parse_example_raw": [
                "serialized",
                "names",
                "sparse_keys",
                "sparse_types",
                "dense_keys",
                "dense_types",
                "dense_defaults",
                "dense_shapes",
                "name"
            ],
            "parse_single_example": [
                "serialized",
                "features",
                "name",
                "example_names"
            ],
            "_parse_single_example_raw": [
                "serialized",
                "names",
                "sparse_keys",
                "sparse_types",
                "dense_keys",
                "dense_types",
                "dense_defaults",
                "dense_shapes",
                "name"
            ],
            "parse_single_sequence_example": [
                "serialized",
                "context_features",
                "sequence_features",
                "example_name",
                "name"
            ],
            "_parse_single_sequence_example_raw": [
                "serialized",
                "context_sparse_keys",
                "context_sparse_types",
                "context_dense_keys",
                "context_dense_types",
                "context_dense_defaults",
                "context_dense_shapes",
                "feature_list_sparse_keys",
                "feature_list_sparse_types",
                "feature_list_dense_keys",
                "feature_list_dense_types",
                "feature_list_dense_shapes",
                "feature_list_dense_defaults",
                "debug_name",
                "name"
            ],
            "VarLenFeature": {},
            "SparseFeature": {},
            "FixedLenFeature": {},
            "FixedLenSequenceFeature": {}
        },
        "tensorflow.python.ops.gen_script_ops": {
            "_py_func": [
                "input",
                "token",
                "Tout",
                "name"
            ],
            "_py_func_stateless": [
                "input",
                "token",
                "Tout",
                "name"
            ],
            "_InitOpDefLibrary": []
        },
        "tensorflow.python.ops.gen_cloud_ops": {
            "big_query_reader": [
                "project_id",
                "dataset_id",
                "table_id",
                "columns",
                "timestamp_millis",
                "container",
                "shared_name",
                "test_end_point",
                "name"
            ],
            "generate_big_query_reader_partitions": [
                "project_id",
                "dataset_id",
                "table_id",
                "columns",
                "timestamp_millis",
                "num_partitions",
                "test_end_point",
                "name"
            ],
            "_InitOpDefLibrary": []
        },
        "tensorflow.python.ops.math_ops": {
            "argmax": [
                "input",
                "axis",
                "name",
                "dimension"
            ],
            "argmin": [
                "input",
                "axis",
                "name",
                "dimension"
            ],
            "abs": [
                "x",
                "name"
            ],
            "divide": [
                "x",
                "y",
                "name"
            ],
            "multiply": [
                "x",
                "y",
                "name"
            ],
            "_mul": [
                "x",
                "y",
                "name"
            ],
            "subtract": [
                "x",
                "y",
                "name"
            ],
            "_sub": [
                "x",
                "y",
                "name"
            ],
            "negative": [
                "x",
                "name"
            ],
            "_neg": [
                "x",
                "name"
            ],
            "sign": [
                "x",
                "name"
            ],
            "square": [
                "x",
                "name"
            ],
            "sqrt": [
                "x",
                "name"
            ],
            "erf": [
                "x",
                "name"
            ],
            "scalar_mul": [
                "scalar",
                "x"
            ],
            "pow": [
                "x",
                "y",
                "name"
            ],
            "complex": [
                "real",
                "imag",
                "name"
            ],
            "real": [
                "input",
                "name"
            ],
            "imag": [
                "input",
                "name"
            ],
            "round": [
                "x",
                "name"
            ],
            "cast": [
                "x",
                "dtype",
                "name"
            ],
            "saturate_cast": [
                "value",
                "dtype",
                "name"
            ],
            "to_float": [
                "x",
                "name"
            ],
            "to_double": [
                "x",
                "name"
            ],
            "to_int32": [
                "x",
                "name"
            ],
            "to_int64": [
                "x",
                "name"
            ],
            "to_bfloat16": [
                "x",
                "name"
            ],
            "_OverrideBinaryOperatorHelper": [
                "func",
                "op_name",
                "clazz_object"
            ],
            "_sparse_dense_truediv": [
                "sp_indices",
                "sp_values",
                "sp_shape",
                "y",
                "name"
            ],
            "_truediv_python3": [
                "x",
                "y",
                "name"
            ],
            "_div_python2": [
                "x",
                "y",
                "name"
            ],
            "truediv": [
                "x",
                "y",
                "name"
            ],
            "div": [
                "x",
                "y",
                "name"
            ],
            "floordiv": [
                "x",
                "y",
                "name"
            ],
            "_mul_dispatch": [
                "x",
                "y",
                "name"
            ],
            "logical_xor": [
                "x",
                "y",
                "name"
            ],
            "range": [
                "start",
                "limit",
                "delta",
                "dtype",
                "name"
            ],
            "_ReductionDims": [
                "x",
                "axis",
                "reduction_indices"
            ],
            "reduce_sum": [
                "input_tensor",
                "axis",
                "keep_dims",
                "name",
                "reduction_indices"
            ],
            "count_nonzero": [
                "input_tensor",
                "axis",
                "keep_dims",
                "dtype",
                "name",
                "reduction_indices"
            ],
            "reduce_mean": [
                "input_tensor",
                "axis",
                "keep_dims",
                "name",
                "reduction_indices"
            ],
            "reduce_prod": [
                "input_tensor",
                "axis",
                "keep_dims",
                "name",
                "reduction_indices"
            ],
            "reduce_min": [
                "input_tensor",
                "axis",
                "keep_dims",
                "name",
                "reduction_indices"
            ],
            "reduce_max": [
                "input_tensor",
                "axis",
                "keep_dims",
                "name",
                "reduction_indices"
            ],
            "reduce_all": [
                "input_tensor",
                "axis",
                "keep_dims",
                "name",
                "reduction_indices"
            ],
            "reduce_any": [
                "input_tensor",
                "axis",
                "keep_dims",
                "name",
                "reduction_indices"
            ],
            "reduce_logsumexp": [
                "input_tensor",
                "axis",
                "keep_dims",
                "name",
                "reduction_indices"
            ],
            "trace": [
                "x",
                "name"
            ],
            "matmul": [
                "a",
                "b",
                "transpose_a",
                "transpose_b",
                "adjoint_a",
                "adjoint_b",
                "a_is_sparse",
                "b_is_sparse",
                "name"
            ],
            "_calc_mat_mul_flops": [
                "graph",
                "node"
            ],
            "_as_indexed_slices": [
                "x",
                "optimize"
            ],
            "_as_indexed_slices_list": [
                "inputs",
                "optimize"
            ],
            "add_n": [
                "inputs",
                "name"
            ],
            "accumulate_n": [
                "inputs",
                "shape",
                "tensor_dtype",
                "name"
            ],
            "sigmoid": [
                "x",
                "name"
            ],
            "tanh": [
                "x",
                "name"
            ],
            "cumsum": [
                "x",
                "axis",
                "exclusive",
                "reverse",
                "name"
            ],
            "cumprod": [
                "x",
                "axis",
                "exclusive",
                "reverse",
                "name"
            ],
            "conj": [
                "x",
                "name"
            ],
            "_BroadcastShape": [
                "op"
            ],
            "reduced_shape": [
                "input_shape",
                "axes"
            ],
            "tensordot": [
                "a",
                "b",
                "axes",
                "name"
            ],
            "DivideDelegateWithName": {
                "__init__": [
                    "self",
                    "x",
                    "name"
                ],
                "__truediv__": [
                    "self",
                    "y"
                ],
                "__floordiv__": [
                    "self",
                    "y"
                ],
                "__div__": [
                    "self",
                    "y"
                ]
            }
        },
        "tensorflow.python.ops.nn_ops": {
            "_non_atrous_convolution": [
                "input",
                "filter",
                "padding",
                "data_format",
                "strides",
                "name"
            ],
            "with_space_to_batch": [
                "input",
                "dilation_rate",
                "padding",
                "op",
                "filter_shape",
                "spatial_dims"
            ],
            "_get_strides_and_dilation_rate": [
                "num_spatial_dims",
                "strides",
                "dilation_rate"
            ],
            "convolution": [
                "input",
                "filter",
                "padding",
                "strides",
                "dilation_rate",
                "name",
                "data_format"
            ],
            "pool": [
                "input",
                "window_shape",
                "pooling_type",
                "padding",
                "dilation_rate",
                "strides",
                "name",
                "data_format"
            ],
            "atrous_conv2d": [
                "value",
                "filters",
                "rate",
                "padding",
                "name"
            ],
            "conv2d_transpose": [
                "value",
                "filter",
                "output_shape",
                "strides",
                "padding",
                "data_format",
                "name"
            ],
            "atrous_conv2d_transpose": [
                "value",
                "filters",
                "output_shape",
                "rate",
                "padding",
                "name"
            ],
            "conv3d_transpose": [
                "value",
                "filter",
                "output_shape",
                "strides",
                "padding",
                "name"
            ],
            "bias_add": [
                "value",
                "bias",
                "data_format",
                "name"
            ],
            "bias_add_v1": [
                "value",
                "bias",
                "name"
            ],
            "crelu": [
                "features",
                "name"
            ],
            "relu6": [
                "features",
                "name"
            ],
            "_flatten_outer_dims": [
                "logits"
            ],
            "_softmax": [
                "logits",
                "compute_op",
                "dim",
                "name"
            ],
            "softmax": [
                "logits",
                "dim",
                "name"
            ],
            "log_softmax": [
                "logits",
                "dim",
                "name"
            ],
            "_ensure_xent_args": [
                "name",
                "sentinel",
                "labels",
                "logits"
            ],
            "softmax_cross_entropy_with_logits": [
                "_sentinel",
                "labels",
                "logits",
                "dim",
                "name"
            ],
            "sparse_softmax_cross_entropy_with_logits": [
                "_sentinel",
                "labels",
                "logits",
                "name"
            ],
            "avg_pool": [
                "value",
                "ksize",
                "strides",
                "padding",
                "data_format",
                "name"
            ],
            "max_pool": [
                "value",
                "ksize",
                "strides",
                "padding",
                "data_format",
                "name"
            ],
            "_calc_conv_flops": [
                "graph",
                "node"
            ],
            "_calc_depthwise_conv_flops": [
                "graph",
                "node"
            ],
            "_calc_bias_add_flops": [
                "graph",
                "node"
            ],
            "xw_plus_b": [
                "x",
                "weights",
                "biases",
                "name"
            ],
            "xw_plus_b_v1": [
                "x",
                "weights",
                "biases",
                "name"
            ],
            "dropout": [
                "x",
                "keep_prob",
                "noise_shape",
                "seed",
                "name"
            ],
            "top_k": [
                "input",
                "k",
                "sorted",
                "name"
            ],
            "conv1d": [
                "value",
                "filters",
                "stride",
                "padding",
                "use_cudnn_on_gpu",
                "data_format",
                "name"
            ],
            "_calc_dilation2d_flops": [
                "graph",
                "node"
            ],
            "erosion2d": [
                "value",
                "kernel",
                "strides",
                "rates",
                "padding",
                "name"
            ]
        },
        "tensorflow.python.ops.gen_ctc_ops": {
            "_ctc_beam_search_decoder": [
                "inputs",
                "sequence_length",
                "beam_width",
                "top_paths",
                "merge_repeated",
                "name"
            ],
            "_ctc_greedy_decoder": [
                "inputs",
                "sequence_length",
                "merge_repeated",
                "name"
            ],
            "_ctc_loss": [
                "inputs",
                "labels_indices",
                "labels_values",
                "sequence_length",
                "preprocess_collapse_repeated",
                "ctc_merge_repeated",
                "name"
            ],
            "_InitOpDefLibrary": []
        },
        "tensorflow.python.ops.metrics_impl": {
            "_local_variable": [
                "initial_value",
                "validate_shape",
                "name"
            ],
            "_remove_squeezable_dimensions": [
                "labels",
                "predictions",
                "weights"
            ],
            "_maybe_expand_labels": [
                "labels",
                "predictions"
            ],
            "_create_local": [
                "name",
                "shape",
                "collections",
                "validate_shape",
                "dtype"
            ],
            "_safe_div": [
                "numerator",
                "denominator",
                "name"
            ],
            "_safe_scalar_div": [
                "numerator",
                "denominator",
                "name"
            ],
            "mean": [
                "values",
                "weights",
                "metrics_collections",
                "updates_collections",
                "name"
            ],
            "accuracy": [
                "labels",
                "predictions",
                "weights",
                "metrics_collections",
                "updates_collections",
                "name"
            ],
            "_confusion_matrix_at_thresholds": [
                "labels",
                "predictions",
                "thresholds",
                "weights",
                "includes"
            ],
            "auc": [
                "labels",
                "predictions",
                "weights",
                "num_thresholds",
                "metrics_collections",
                "updates_collections",
                "curve",
                "name"
            ],
            "mean_absolute_error": [
                "labels",
                "predictions",
                "weights",
                "metrics_collections",
                "updates_collections",
                "name"
            ],
            "mean_cosine_distance": [
                "labels",
                "predictions",
                "dim",
                "weights",
                "metrics_collections",
                "updates_collections",
                "name"
            ],
            "mean_iou": [
                "labels",
                "predictions",
                "num_classes",
                "weights",
                "metrics_collections",
                "updates_collections",
                "name"
            ],
            "mean_relative_error": [
                "labels",
                "predictions",
                "normalizer",
                "weights",
                "metrics_collections",
                "updates_collections",
                "name"
            ],
            "mean_squared_error": [
                "labels",
                "predictions",
                "weights",
                "metrics_collections",
                "updates_collections",
                "name"
            ],
            "mean_tensor": [
                "values",
                "weights",
                "metrics_collections",
                "updates_collections",
                "name"
            ],
            "percentage_below": [
                "values",
                "threshold",
                "weights",
                "metrics_collections",
                "updates_collections",
                "name"
            ],
            "_count_condition": [
                "values",
                "weights",
                "metrics_collections",
                "updates_collections"
            ],
            "true_positives": [
                "labels",
                "predictions",
                "weights",
                "metrics_collections",
                "updates_collections",
                "name"
            ],
            "false_positives": [
                "labels",
                "predictions",
                "weights",
                "metrics_collections",
                "updates_collections",
                "name"
            ],
            "precision": [
                "labels",
                "predictions",
                "weights",
                "metrics_collections",
                "updates_collections",
                "name"
            ],
            "precision_at_thresholds": [
                "labels",
                "predictions",
                "thresholds",
                "weights",
                "metrics_collections",
                "updates_collections",
                "name"
            ],
            "false_negatives": [
                "labels",
                "predictions",
                "weights",
                "metrics_collections",
                "updates_collections",
                "name"
            ],
            "recall": [
                "labels",
                "predictions",
                "weights",
                "metrics_collections",
                "updates_collections",
                "name"
            ],
            "_at_k_name": [
                "name",
                "k",
                "class_id"
            ],
            "_select_class_id": [
                "ids",
                "selected_id"
            ],
            "_maybe_select_class_id": [
                "labels",
                "predictions_idx",
                "selected_id"
            ],
            "_sparse_true_positive_at_k": [
                "labels",
                "predictions_idx",
                "class_id",
                "weights",
                "name"
            ],
            "_streaming_sparse_true_positive_at_k": [
                "labels",
                "predictions_idx",
                "k",
                "class_id",
                "weights",
                "name"
            ],
            "_sparse_false_negative_at_k": [
                "labels",
                "predictions_idx",
                "class_id",
                "weights"
            ],
            "_streaming_sparse_false_negative_at_k": [
                "labels",
                "predictions_idx",
                "k",
                "class_id",
                "weights",
                "name"
            ],
            "recall_at_k": [
                "labels",
                "predictions",
                "k",
                "class_id",
                "weights",
                "metrics_collections",
                "updates_collections",
                "name"
            ],
            "recall_at_thresholds": [
                "labels",
                "predictions",
                "thresholds",
                "weights",
                "metrics_collections",
                "updates_collections",
                "name"
            ],
            "root_mean_squared_error": [
                "labels",
                "predictions",
                "weights",
                "metrics_collections",
                "updates_collections",
                "name"
            ],
            "sensitivity_at_specificity": [
                "labels",
                "predictions",
                "specificity",
                "weights",
                "num_thresholds",
                "metrics_collections",
                "updates_collections",
                "name"
            ],
            "_expand_and_tile": [
                "tensor",
                "multiple",
                "dim",
                "name"
            ],
            "_num_relevant": [
                "labels",
                "k"
            ],
            "_sparse_average_precision_at_k": [
                "labels",
                "predictions",
                "k"
            ],
            "sparse_average_precision_at_k": [
                "labels",
                "predictions",
                "k",
                "weights",
                "metrics_collections",
                "updates_collections",
                "name"
            ],
            "_sparse_false_positive_at_k": [
                "labels",
                "predictions_idx",
                "class_id",
                "weights"
            ],
            "_streaming_sparse_false_positive_at_k": [
                "labels",
                "predictions_idx",
                "k",
                "class_id",
                "weights",
                "name"
            ],
            "sparse_precision_at_k": [
                "labels",
                "predictions",
                "k",
                "class_id",
                "weights",
                "metrics_collections",
                "updates_collections",
                "name"
            ],
            "specificity_at_sensitivity": [
                "labels",
                "predictions",
                "sensitivity",
                "weights",
                "num_thresholds",
                "metrics_collections",
                "updates_collections",
                "name"
            ]
        },
        "tensorflow.python.ops.confusion_matrix": {
            "remove_squeezable_dimensions": [
                "labels",
                "predictions",
                "expected_rank_diff",
                "name"
            ],
            "confusion_matrix": [
                "labels",
                "predictions",
                "num_classes",
                "dtype",
                "name",
                "weights"
            ]
        },
        "tensorflow.python.ops.tensor_array_grad": {
            "_GetGradSource": [
                "op_or_tensor"
            ],
            "_TensorArrayReadGrad": [
                "op",
                "grad"
            ],
            "_TensorArrayWriteGrad": [
                "op",
                "flow"
            ],
            "_TensorArrayGatherGrad": [
                "op",
                "grad"
            ],
            "_TensorArrayScatterGrad": [
                "op",
                "flow"
            ],
            "_TensorArrayConcatGrad": [
                "op",
                "grad",
                "unused_lengths_grad"
            ],
            "_TensorArraySplitGrad": [
                "op",
                "flow"
            ]
        },
        "tensorflow.python.ops.io_ops": {
            "_save": [
                "filename",
                "tensor_names",
                "tensors",
                "tensor_slices",
                "name"
            ],
            "_restore_slice": [
                "file_pattern",
                "tensor_name",
                "shape_and_slice",
                "tensor_type",
                "name",
                "preferred_shard"
            ],
            "ReaderBase": {
                "__init__": [
                    "self",
                    "reader_ref",
                    "supports_serialize"
                ],
                "reader_ref": [
                    "self"
                ],
                "read": [
                    "self",
                    "queue",
                    "name"
                ],
                "read_up_to": [
                    "self",
                    "queue",
                    "num_records",
                    "name"
                ],
                "num_records_produced": [
                    "self",
                    "name"
                ],
                "num_work_units_completed": [
                    "self",
                    "name"
                ],
                "serialize_state": [
                    "self",
                    "name"
                ],
                "restore_state": [
                    "self",
                    "state",
                    "name"
                ],
                "supports_serialize": [
                    "self"
                ],
                "reset": [
                    "self",
                    "name"
                ]
            },
            "WholeFileReader": {
                "__init__": [
                    "self",
                    "name"
                ]
            },
            "TextLineReader": {
                "__init__": [
                    "self",
                    "skip_header_lines",
                    "name"
                ]
            },
            "FixedLengthRecordReader": {
                "__init__": [
                    "self",
                    "record_bytes",
                    "header_bytes",
                    "footer_bytes",
                    "name"
                ]
            },
            "TFRecordReader": {
                "__init__": [
                    "self",
                    "name",
                    "options"
                ]
            },
            "IdentityReader": {
                "__init__": [
                    "self",
                    "name"
                ]
            }
        },
        "tensorflow.python.ops.gen_sdca_ops": {
            "_sdca_fprint": [
                "input",
                "name"
            ],
            "_sdca_optimizer": [
                "sparse_example_indices",
                "sparse_feature_indices",
                "sparse_feature_values",
                "dense_features",
                "example_weights",
                "example_labels",
                "sparse_indices",
                "sparse_weights",
                "dense_weights",
                "example_state_data",
                "loss_type",
                "l1",
                "l2",
                "num_loss_partitions",
                "num_inner_iterations",
                "adaptative",
                "name"
            ],
            "_sdca_shrink_l1": [
                "weights",
                "l1",
                "l2",
                "name"
            ],
            "_InitOpDefLibrary": []
        },
        "tensorflow.python.ops.resource_variable_ops": {
            "_register_variable_read": [
                "read",
                "collections",
                "trainable"
            ],
            "_dense_var_to_tensor": [
                "var",
                "dtype",
                "name",
                "as_ref"
            ],
            "ResourceVariable": {
                "__init__": [
                    "self",
                    "initial_value",
                    "trainable",
                    "collections",
                    "validate_shape",
                    "caching_device",
                    "name",
                    "dtype"
                ],
                "dtype": [
                    "self"
                ],
                "name": [
                    "self"
                ],
                "get_shape": [
                    "self"
                ],
                "create": [
                    "self"
                ],
                "handle": [
                    "self"
                ],
                "value": [
                    "self"
                ],
                "_as_graph_element": [
                    "self"
                ],
                "initializer": [
                    "self"
                ],
                "op": [
                    "self"
                ],
                "eval": [
                    "self",
                    "session"
                ],
                "read_value": [
                    "self",
                    "collections",
                    "trainable"
                ],
                "sparse_read": [
                    "self",
                    "indices",
                    "collections",
                    "trainable",
                    "name"
                ],
                "_OverloadAllOperators": [],
                "_AsTensor": [
                    "self"
                ],
                "_OverloadOperator": [
                    "operator"
                ]
            }
        },
        "tensorflow.python.ops.linalg_ops": {
            "cholesky_solve": [
                "chol",
                "rhs",
                "name"
            ],
            "eye": [
                "num_rows",
                "num_columns",
                "batch_shape",
                "dtype",
                "name"
            ],
            "matrix_solve_ls": [
                "matrix",
                "rhs",
                "l2_regularizer",
                "fast",
                "name"
            ],
            "self_adjoint_eig": [
                "tensor",
                "name"
            ],
            "self_adjoint_eigvals": [
                "tensor",
                "name"
            ],
            "svd": [
                "tensor",
                "full_matrices",
                "compute_uv",
                "name"
            ],
            "norm": [
                "tensor",
                "ord",
                "axis",
                "keep_dims",
                "name"
            ]
        },
        "tensorflow.python.ops.variables": {
            "global_variables": [],
            "all_variables": [],
            "_all_saveable_objects": [],
            "local_variables": [],
            "model_variables": [],
            "trainable_variables": [],
            "moving_average_variables": [],
            "variables_initializer": [
                "var_list",
                "name"
            ],
            "initialize_variables": [
                "var_list",
                "name"
            ],
            "global_variables_initializer": [],
            "initialize_all_variables": [],
            "local_variables_initializer": [],
            "initialize_local_variables": [],
            "is_variable_initialized": [
                "variable"
            ],
            "assert_variables_initialized": [
                "var_list"
            ],
            "report_uninitialized_variables": [
                "var_list",
                "name"
            ],
            "Variable": {
                "__init__": [
                    "self",
                    "initial_value",
                    "trainable",
                    "collections",
                    "validate_shape",
                    "caching_device",
                    "name",
                    "variable_def",
                    "dtype",
                    "expected_shape",
                    "import_scope"
                ],
                "__str__": [
                    "self"
                ],
                "_init_from_args": [
                    "self",
                    "initial_value",
                    "trainable",
                    "collections",
                    "validate_shape",
                    "caching_device",
                    "name",
                    "dtype",
                    "expected_shape"
                ],
                "_init_from_proto": [
                    "self",
                    "variable_def",
                    "import_scope"
                ],
                "_as_graph_element": [
                    "self"
                ],
                "_AsTensor": [
                    "self"
                ],
                "__iter__": [
                    "self"
                ],
                "value": [
                    "self"
                ],
                "read_value": [
                    "self"
                ],
                "_ref": [
                    "self"
                ],
                "set_shape": [
                    "self",
                    "shape"
                ],
                "eval": [
                    "self",
                    "session"
                ],
                "initialized_value": [
                    "self"
                ],
                "initial_value": [
                    "self"
                ],
                "assign": [
                    "self",
                    "value",
                    "use_locking"
                ],
                "assign_add": [
                    "self",
                    "delta",
                    "use_locking"
                ],
                "assign_sub": [
                    "self",
                    "delta",
                    "use_locking"
                ],
                "scatter_sub": [
                    "self",
                    "sparse_delta",
                    "use_locking"
                ],
                "count_up_to": [
                    "self",
                    "limit"
                ],
                "load": [
                    "self",
                    "value",
                    "session"
                ],
                "_TensorConversionFunction": [
                    "v",
                    "dtype",
                    "name",
                    "as_ref"
                ],
                "_OverloadAllOperators": [],
                "_OverloadOperator": [
                    "operator"
                ],
                "name": [
                    "self"
                ],
                "initializer": [
                    "self"
                ],
                "device": [
                    "self"
                ],
                "dtype": [
                    "self"
                ],
                "op": [
                    "self"
                ],
                "graph": [
                    "self"
                ],
                "get_shape": [
                    "self"
                ],
                "to_proto": [
                    "self",
                    "export_scope"
                ],
                "from_proto": [
                    "variable_def",
                    "import_scope"
                ],
                "_set_save_slice_info": [
                    "self",
                    "save_slice_info"
                ],
                "_get_save_slice_info": [
                    "self"
                ]
            },
            "PartitionedVariable": {
                "__init__": [
                    "self",
                    "name",
                    "shape",
                    "dtype",
                    "variable_list",
                    "partitions"
                ],
                "__iter__": [
                    "self"
                ],
                "__len__": [
                    "self"
                ],
                "_partition_axes": [
                    "self"
                ],
                "_concat": [
                    "self"
                ],
                "as_tensor": [
                    "self"
                ],
                "_TensorConversionFunction": [
                    "v",
                    "dtype",
                    "name",
                    "as_ref"
                ],
                "name": [
                    "self"
                ],
                "dtype": [
                    "self"
                ],
                "get_shape": [
                    "self"
                ],
                "_get_variable_list": [
                    "self"
                ],
                "_get_partitions": [
                    "self"
                ],
                "assign": [
                    "self",
                    "value",
                    "use_locking"
                ]
            }
        },
        "tensorflow.python.ops.nn_grad": {
            "_Conv2DBackpropInputGrad": [
                "op",
                "grad"
            ],
            "_Conv2DBackpropFilterGrad": [
                "op",
                "grad"
            ],
            "_Conv3DGrad": [
                "op",
                "grad"
            ],
            "_Conv3DBackpropInputGrad": [
                "op",
                "grad"
            ],
            "_Conv3DBackpropFilterGrad": [
                "op",
                "grad"
            ],
            "_AvgPool3DGrad": [
                "op",
                "grad"
            ],
            "_MaxPool3DGrad": [
                "op",
                "grad"
            ],
            "_SoftmaxGrad": [
                "op",
                "grad_softmax"
            ],
            "_LogSoftmaxGrad": [
                "op",
                "grad"
            ],
            "_BiasAddGrad": [
                "op",
                "received_grad"
            ],
            "_BiasAddGradGrad": [
                "op",
                "received_grad"
            ],
            "_BiasAddGradV1": [
                "unused_bias_op",
                "received_grad"
            ],
            "_ReluGrad": [
                "op",
                "grad"
            ],
            "_EluGradGrad": [
                "op",
                "grad"
            ],
            "_Relu6Grad": [
                "op",
                "grad"
            ],
            "_EluGrad": [
                "op",
                "grad"
            ],
            "_SoftplusGrad": [
                "op",
                "grad"
            ],
            "_SoftsignGrad": [
                "op",
                "grad"
            ],
            "_ReluGradGrad": [
                "op",
                "grad"
            ],
            "_BroadcastMul": [
                "vec",
                "mat"
            ],
            "_SoftmaxCrossEntropyWithLogitsGrad": [
                "op",
                "grad_0",
                "_"
            ],
            "_SparseSoftmaxCrossEntropyWithLogitsGrad": [
                "op",
                "grad_0",
                "_"
            ],
            "_Conv2DGrad": [
                "op",
                "grad"
            ],
            "_DepthwiseConv2dNativeGrad": [
                "op",
                "grad"
            ],
            "_Dilation2DGrad": [
                "op",
                "grad"
            ],
            "_LRNGrad": [
                "op",
                "grad"
            ],
            "_AvgPoolGrad": [
                "op",
                "grad"
            ],
            "_MaxPoolGrad": [
                "op",
                "grad"
            ],
            "_FractionalMaxPoolGrad": [
                "op",
                "grad_0",
                "unused_grad_1",
                "unused_grad_2"
            ],
            "_FractionalAvgPoolGrad": [
                "op",
                "grad_0",
                "unused_grad_1",
                "unused_grad_2"
            ],
            "_BatchNormWithGlobalNormalizationGrad": [
                "op",
                "grad"
            ],
            "_FusedBatchNormGrad": [
                "op"
            ],
            "_L2LossGrad": [
                "op",
                "grad"
            ],
            "_TopKGrad": [
                "op",
                "grad",
                "_"
            ]
        },
        "tensorflow.python.ops.tensor_array_ops": {
            "_maybe_set_device": [
                "handle_op",
                "value_t"
            ],
            "TensorArray": {
                "__init__": [
                    "self",
                    "dtype",
                    "size",
                    "dynamic_size",
                    "clear_after_read",
                    "tensor_array_name",
                    "handle",
                    "flow",
                    "infer_shape",
                    "element_shape",
                    "name"
                ],
                "flow": [
                    "self"
                ],
                "dtype": [
                    "self"
                ],
                "handle": [
                    "self"
                ],
                "_merge_element_shape": [
                    "self",
                    "shape"
                ],
                "identity": [
                    "self"
                ],
                "grad": [
                    "self",
                    "source",
                    "flow",
                    "name"
                ],
                "read": [
                    "self",
                    "index",
                    "name"
                ],
                "write": [
                    "self",
                    "index",
                    "value",
                    "name"
                ],
                "stack": [
                    "self",
                    "name"
                ],
                "gather": [
                    "self",
                    "indices",
                    "name"
                ],
                "concat": [
                    "self",
                    "name"
                ],
                "unstack": [
                    "self",
                    "value",
                    "name"
                ],
                "scatter": [
                    "self",
                    "indices",
                    "value",
                    "name"
                ],
                "split": [
                    "self",
                    "value",
                    "lengths",
                    "name"
                ],
                "size": [
                    "self",
                    "name"
                ],
                "close": [
                    "self",
                    "name"
                ]
            }
        },
        "tensorflow.python.ops.image_ops": {},
        "tensorflow.python.ops.gen_io_ops": {
            "_fixed_length_record_reader": [
                "record_bytes",
                "header_bytes",
                "footer_bytes",
                "container",
                "shared_name",
                "name"
            ],
            "_fixed_length_record_reader_v2": [
                "record_bytes",
                "header_bytes",
                "footer_bytes",
                "container",
                "shared_name",
                "name"
            ],
            "_identity_reader": [
                "container",
                "shared_name",
                "name"
            ],
            "_identity_reader_v2": [
                "container",
                "shared_name",
                "name"
            ],
            "matching_files": [
                "pattern",
                "name"
            ],
            "merge_v2_checkpoints": [
                "checkpoint_prefixes",
                "destination_prefix",
                "delete_old_dirs",
                "name"
            ],
            "read_file": [
                "filename",
                "name"
            ],
            "_reader_num_records_produced": [
                "reader_handle",
                "name"
            ],
            "_reader_num_records_produced_v2": [
                "reader_handle",
                "name"
            ],
            "_reader_num_work_units_completed": [
                "reader_handle",
                "name"
            ],
            "_reader_num_work_units_completed_v2": [
                "reader_handle",
                "name"
            ],
            "_reader_read": [
                "reader_handle",
                "queue_handle",
                "name"
            ],
            "_reader_read_up_to": [
                "reader_handle",
                "queue_handle",
                "num_records",
                "name"
            ],
            "_reader_read_up_to_v2": [
                "reader_handle",
                "queue_handle",
                "num_records",
                "name"
            ],
            "_reader_read_v2": [
                "reader_handle",
                "queue_handle",
                "name"
            ],
            "_reader_reset": [
                "reader_handle",
                "name"
            ],
            "_reader_reset_v2": [
                "reader_handle",
                "name"
            ],
            "_reader_restore_state": [
                "reader_handle",
                "state",
                "name"
            ],
            "_reader_restore_state_v2": [
                "reader_handle",
                "state",
                "name"
            ],
            "_reader_serialize_state": [
                "reader_handle",
                "name"
            ],
            "_reader_serialize_state_v2": [
                "reader_handle",
                "name"
            ],
            "_restore": [
                "file_pattern",
                "tensor_name",
                "dt",
                "preferred_shard",
                "name"
            ],
            "_restore_slice": [
                "file_pattern",
                "tensor_name",
                "shape_and_slice",
                "dt",
                "preferred_shard",
                "name"
            ],
            "restore_v2": [
                "prefix",
                "tensor_names",
                "shape_and_slices",
                "dtypes",
                "name"
            ],
            "_save": [
                "filename",
                "tensor_names",
                "data",
                "name"
            ],
            "_save_slices": [
                "filename",
                "tensor_names",
                "shapes_and_slices",
                "data",
                "name"
            ],
            "save_v2": [
                "prefix",
                "tensor_names",
                "shape_and_slices",
                "tensors",
                "name"
            ],
            "_sharded_filename": [
                "basename",
                "shard",
                "num_shards",
                "name"
            ],
            "_sharded_filespec": [
                "basename",
                "num_shards",
                "name"
            ],
            "_tf_record_reader": [
                "container",
                "shared_name",
                "compression_type",
                "name"
            ],
            "_tf_record_reader_v2": [
                "container",
                "shared_name",
                "compression_type",
                "name"
            ],
            "_text_line_reader": [
                "skip_header_lines",
                "container",
                "shared_name",
                "name"
            ],
            "_text_line_reader_v2": [
                "skip_header_lines",
                "container",
                "shared_name",
                "name"
            ],
            "_whole_file_reader": [
                "container",
                "shared_name",
                "name"
            ],
            "_whole_file_reader_v2": [
                "container",
                "shared_name",
                "name"
            ],
            "write_file": [
                "filename",
                "contents",
                "name"
            ],
            "_InitOpDefLibrary": []
        },
        "tensorflow.python.ops.init_ops": {
            "glorot_uniform_initializer": [
                "seed",
                "dtype"
            ],
            "glorot_normal_initializer": [
                "seed",
                "dtype"
            ],
            "_compute_fans": [
                "shape"
            ],
            "_assert_float_dtype": [
                "dtype"
            ],
            "Initializer": {
                "__call__": [
                    "self",
                    "shape",
                    "dtype",
                    "partition_info"
                ]
            },
            "Zeros": {
                "__init__": [
                    "self",
                    "dtype"
                ],
                "__call__": [
                    "self",
                    "shape",
                    "dtype",
                    "partition_info"
                ]
            },
            "Ones": {
                "__init__": [
                    "self",
                    "dtype"
                ],
                "__call__": [
                    "self",
                    "shape",
                    "dtype",
                    "partition_info"
                ]
            },
            "Constant": {
                "__init__": [
                    "self",
                    "value",
                    "dtype"
                ],
                "__call__": [
                    "self",
                    "shape",
                    "dtype",
                    "partition_info"
                ]
            },
            "RandomUniform": {
                "__init__": [
                    "self",
                    "minval",
                    "maxval",
                    "seed",
                    "dtype"
                ],
                "__call__": [
                    "self",
                    "shape",
                    "dtype",
                    "partition_info"
                ]
            },
            "RandomNormal": {
                "__init__": [
                    "self",
                    "mean",
                    "stddev",
                    "seed",
                    "dtype"
                ],
                "__call__": [
                    "self",
                    "shape",
                    "dtype",
                    "partition_info"
                ]
            },
            "TruncatedNormal": {
                "__init__": [
                    "self",
                    "mean",
                    "stddev",
                    "seed",
                    "dtype"
                ],
                "__call__": [
                    "self",
                    "shape",
                    "dtype",
                    "partition_info"
                ]
            },
            "UniformUnitScaling": {
                "__init__": [
                    "self",
                    "factor",
                    "seed",
                    "dtype"
                ],
                "__call__": [
                    "self",
                    "shape",
                    "dtype",
                    "partition_info"
                ]
            },
            "VarianceScaling": {
                "__init__": [
                    "self",
                    "scale",
                    "mode",
                    "distribution",
                    "seed",
                    "dtype"
                ],
                "__call__": [
                    "self",
                    "shape",
                    "dtype",
                    "partition_info"
                ]
            },
            "Orthogonal": {
                "__init__": [
                    "self",
                    "gain",
                    "dtype",
                    "seed"
                ],
                "__call__": [
                    "self",
                    "shape",
                    "dtype",
                    "partition_info"
                ]
            }
        },
        "tensorflow.python.ops.weights_broadcast_ops": {
            "_has_valid_dims": [
                "weights_shape",
                "values_shape"
            ],
            "_has_valid_nonscalar_shape": [
                "weights_rank",
                "weights_shape",
                "values_rank",
                "values_shape"
            ],
            "assert_broadcastable": [
                "weights",
                "values"
            ],
            "broadcast_weights": [
                "weights",
                "values"
            ]
        },
        "tensorflow.python.ops.gen_string_ops": {
            "as_string": [
                "input",
                "precision",
                "scientific",
                "shortest",
                "width",
                "fill",
                "name"
            ],
            "decode_base64": [
                "input",
                "name"
            ],
            "encode_base64": [
                "input",
                "pad",
                "name"
            ],
            "reduce_join": [
                "inputs",
                "reduction_indices",
                "keep_dims",
                "separator",
                "name"
            ],
            "string_join": [
                "inputs",
                "separator",
                "name"
            ],
            "_string_split": [
                "input",
                "delimiter",
                "name"
            ],
            "string_to_hash_bucket": [
                "string_tensor",
                "num_buckets",
                "name"
            ],
            "string_to_hash_bucket_fast": [
                "input",
                "num_buckets",
                "name"
            ],
            "string_to_hash_bucket_strong": [
                "input",
                "num_buckets",
                "key",
                "name"
            ],
            "substr": [
                "input",
                "pos",
                "len",
                "name"
            ],
            "_InitOpDefLibrary": []
        },
        "tensorflow.python.ops.template": {
            "make_template": [
                "name_",
                "func_",
                "create_scope_now_",
                "unique_name_",
                "custom_getter_"
            ],
            "_skip_common_stack_elements": [
                "stacktrace",
                "base_case"
            ],
            "Template": {
                "__init__": [
                    "self",
                    "name",
                    "func",
                    "create_scope_now",
                    "unique_name",
                    "custom_getter"
                ],
                "_call_func": [
                    "self",
                    "args",
                    "kwargs",
                    "check_for_new_variables"
                ],
                "__call__": [
                    "self"
                ],
                "variable_scope": [
                    "self"
                ],
                "var_scope": [
                    "self"
                ]
            }
        },
        "tensorflow.python.ops.clip_ops": {
            "clip_by_value": [
                "t",
                "clip_value_min",
                "clip_value_max",
                "name"
            ],
            "clip_by_norm": [
                "t",
                "clip_norm",
                "axes",
                "name"
            ],
            "global_norm": [
                "t_list",
                "name"
            ],
            "clip_by_global_norm": [
                "t_list",
                "clip_norm",
                "use_norm",
                "name"
            ],
            "clip_by_average_norm": [
                "t",
                "clip_norm",
                "name"
            ]
        },
        "tensorflow.python.ops.array_ops": {
            "expand_dims": [
                "input",
                "axis",
                "name",
                "dim"
            ],
            "listdiff": [
                "x",
                "y",
                "out_idx",
                "name"
            ],
            "setdiff1d": [
                "x",
                "y",
                "index_dtype",
                "name"
            ],
            "broadcast_dynamic_shape": [
                "shape_x",
                "shape_y"
            ],
            "broadcast_static_shape": [
                "shape_x",
                "shape_y"
            ],
            "shape": [
                "input",
                "name",
                "out_type"
            ],
            "shape_internal": [
                "input",
                "name",
                "optimize",
                "out_type"
            ],
            "size": [
                "input",
                "name",
                "out_type"
            ],
            "size_internal": [
                "input",
                "name",
                "optimize",
                "out_type"
            ],
            "rank": [
                "input",
                "name"
            ],
            "rank_internal": [
                "input",
                "name",
                "optimize"
            ],
            "_SliceHelper": [
                "tensor",
                "slice_spec",
                "var"
            ],
            "slice": [
                "input_",
                "begin",
                "size",
                "name"
            ],
            "strided_slice": [
                "input_",
                "begin",
                "end",
                "strides",
                "begin_mask",
                "end_mask",
                "ellipsis_mask",
                "new_axis_mask",
                "shrink_axis_mask",
                "var",
                "name"
            ],
            "_SliceHelperVar": [
                "var",
                "slice_spec"
            ],
            "parallel_stack": [
                "values",
                "name"
            ],
            "stack": [
                "values",
                "axis",
                "name"
            ],
            "_autopacking_helper": [
                "list_or_tuple",
                "dtype",
                "name"
            ],
            "_get_dtype_from_nested_lists": [
                "list_or_tuple"
            ],
            "_autopacking_conversion_function": [
                "v",
                "dtype",
                "name",
                "as_ref"
            ],
            "unstack": [
                "value",
                "num",
                "axis",
                "name"
            ],
            "concat": [
                "values",
                "axis",
                "name"
            ],
            "boolean_mask": [
                "tensor",
                "mask",
                "name"
            ],
            "sparse_mask": [
                "a",
                "mask_indices",
                "name"
            ],
            "split": [
                "value",
                "num_or_size_splits",
                "axis",
                "num",
                "name"
            ],
            "transpose": [
                "a",
                "perm",
                "name"
            ],
            "matrix_transpose": [
                "a",
                "name"
            ],
            "zeros": [
                "shape",
                "dtype",
                "name"
            ],
            "zeros_like": [
                "tensor",
                "dtype",
                "name",
                "optimize"
            ],
            "ones_like": [
                "tensor",
                "dtype",
                "name",
                "optimize"
            ],
            "ones": [
                "shape",
                "dtype",
                "name"
            ],
            "placeholder": [
                "dtype",
                "shape",
                "name"
            ],
            "_normalize_sparse_shape": [
                "shape",
                "name"
            ],
            "sparse_placeholder": [
                "dtype",
                "shape",
                "name"
            ],
            "pad": [
                "tensor",
                "paddings",
                "mode",
                "name"
            ],
            "meshgrid": [],
            "_compute_size_of_strided_dim": [
                "shrink",
                "spec",
                "size"
            ],
            "_TileGradShape": [
                "op"
            ],
            "edit_distance": [
                "hypothesis",
                "truth",
                "normalize",
                "name"
            ],
            "_FakeQuantWithMinMaxArgsGradient": [
                "op",
                "grad"
            ],
            "_FakeQuantWithMinMaxVarsGradient": [
                "op",
                "grad"
            ],
            "_FakeQuantWithMinMaxVarsPerChannelGradient": [
                "op",
                "grad"
            ],
            "required_space_to_batch_paddings": [
                "input_shape",
                "block_shape",
                "base_paddings",
                "name"
            ],
            "space_to_batch": [
                "input",
                "paddings",
                "block_size",
                "name"
            ],
            "batch_to_space": [
                "input",
                "crops",
                "block_size",
                "name"
            ],
            "one_hot": [
                "indices",
                "depth",
                "on_value",
                "off_value",
                "axis",
                "dtype",
                "name"
            ],
            "sequence_mask": [
                "lengths",
                "maxlen",
                "dtype",
                "name"
            ],
            "squeeze": [
                "input",
                "axis",
                "name",
                "squeeze_dims"
            ],
            "where": [
                "condition",
                "x",
                "y",
                "name"
            ],
            "reverse": [
                "tensor",
                "axis",
                "name"
            ],
            "reverse_sequence": [
                "input",
                "seq_lengths",
                "seq_axis",
                "batch_axis",
                "name",
                "seq_dim",
                "batch_dim"
            ]
        },
        "tensorflow.python.ops.sparse_ops": {
            "_convert_to_sparse_tensor": [
                "sp_input"
            ],
            "_convert_to_sparse_tensors": [
                "sp_inputs"
            ],
            "sparse_concat": [
                "axis",
                "sp_inputs",
                "name",
                "expand_nonconcat_dim",
                "concat_dim"
            ],
            "sparse_add": [
                "a",
                "b",
                "thresh"
            ],
            "sparse_dense_cwise_add": [
                "sp_t",
                "dense_t"
            ],
            "sparse_reorder": [
                "sp_input",
                "name"
            ],
            "sparse_reshape": [
                "sp_input",
                "shape",
                "name"
            ],
            "sparse_split": [
                "keyword_required",
                "sp_input",
                "num_split",
                "axis",
                "name",
                "split_dim"
            ],
            "sparse_to_dense": [
                "sparse_indices",
                "output_shape",
                "sparse_values",
                "default_value",
                "validate_indices",
                "name"
            ],
            "sparse_reduce_sum": [
                "sp_input",
                "axis",
                "keep_dims",
                "reduction_axes"
            ],
            "sparse_reduce_sum_sparse": [
                "sp_input",
                "axis",
                "keep_dims",
                "reduction_axes"
            ],
            "sparse_tensor_to_dense": [
                "sp_input",
                "default_value",
                "validate_indices",
                "name"
            ],
            "sparse_to_indicator": [
                "sp_input",
                "vocab_size",
                "name"
            ],
            "sparse_merge": [
                "sp_ids",
                "sp_values",
                "vocab_size",
                "name",
                "already_sorted"
            ],
            "sparse_retain": [
                "sp_input",
                "to_retain"
            ],
            "sparse_reset_shape": [
                "sp_input",
                "new_shape"
            ],
            "sparse_fill_empty_rows": [
                "sp_input",
                "default_value",
                "name"
            ],
            "serialize_sparse": [
                "sp_input",
                "name"
            ],
            "serialize_many_sparse": [
                "sp_input",
                "name"
            ],
            "deserialize_many_sparse": [
                "serialized_sparse",
                "dtype",
                "rank",
                "name"
            ],
            "sparse_tensor_dense_matmul": [
                "sp_a",
                "b",
                "adjoint_a",
                "adjoint_b",
                "name"
            ],
            "sparse_softmax": [
                "sp_input",
                "name"
            ],
            "sparse_maximum": [
                "sp_a",
                "sp_b",
                "name"
            ],
            "sparse_minimum": [
                "sp_a",
                "sp_b",
                "name"
            ],
            "sparse_transpose": [
                "sp_input",
                "perm",
                "name"
            ],
            "_add_sparse_to_tensors_map": [
                "sp_input",
                "container",
                "shared_name",
                "name"
            ],
            "_add_many_sparse_to_tensors_map": [
                "sp_input",
                "container",
                "shared_name",
                "name"
            ],
            "_take_many_sparse_from_tensors_map": [
                "sparse_map_op",
                "sparse_handles",
                "rank",
                "name"
            ],
            "KeywordRequired": {
                "__repr__": [
                    "self"
                ]
            }
        },
        "tensorflow.python.ops.nn_impl": {
            "log_poisson_loss": [
                "targets",
                "log_input",
                "compute_full_loss",
                "name"
            ],
            "sigmoid_cross_entropy_with_logits": [
                "_sentinel",
                "labels",
                "logits",
                "name"
            ],
            "weighted_cross_entropy_with_logits": [
                "targets",
                "logits",
                "pos_weight",
                "name"
            ],
            "relu_layer": [
                "x",
                "weights",
                "biases",
                "name"
            ],
            "l2_normalize": [
                "x",
                "dim",
                "epsilon",
                "name"
            ],
            "zero_fraction": [
                "value",
                "name"
            ],
            "depthwise_conv2d": [
                "input",
                "filter",
                "strides",
                "padding",
                "rate",
                "name"
            ],
            "separable_conv2d": [
                "input",
                "depthwise_filter",
                "pointwise_filter",
                "strides",
                "padding",
                "rate",
                "name"
            ],
            "sufficient_statistics": [
                "x",
                "axes",
                "shift",
                "keep_dims",
                "name"
            ],
            "normalize_moments": [
                "counts",
                "mean_ss",
                "variance_ss",
                "shift",
                "name"
            ],
            "moments": [
                "x",
                "axes",
                "shift",
                "name",
                "keep_dims"
            ],
            "weighted_moments": [
                "x",
                "axes",
                "frequency_weights",
                "name",
                "keep_dims"
            ],
            "batch_normalization": [
                "x",
                "mean",
                "variance",
                "offset",
                "scale",
                "variance_epsilon",
                "name"
            ],
            "fused_batch_norm": [
                "x",
                "scale",
                "offset",
                "mean",
                "variance",
                "epsilon",
                "data_format",
                "is_training",
                "name"
            ],
            "batch_norm_with_global_normalization": [
                "t",
                "m",
                "v",
                "beta",
                "gamma",
                "variance_epsilon",
                "scale_after_normalization",
                "name"
            ],
            "_sum_rows": [
                "x"
            ],
            "_compute_sampled_logits": [
                "weights",
                "biases",
                "labels",
                "inputs",
                "num_sampled",
                "num_classes",
                "num_true",
                "sampled_values",
                "subtract_log_q",
                "remove_accidental_hits",
                "partition_strategy",
                "name"
            ],
            "nce_loss": [
                "weights",
                "biases",
                "labels",
                "inputs",
                "num_sampled",
                "num_classes",
                "num_true",
                "sampled_values",
                "remove_accidental_hits",
                "partition_strategy",
                "name"
            ],
            "sampled_softmax_loss": [
                "weights",
                "biases",
                "labels",
                "inputs",
                "num_sampled",
                "num_classes",
                "num_true",
                "sampled_values",
                "remove_accidental_hits",
                "partition_strategy",
                "name"
            ]
        },
        "tensorflow.python.ops.gen_parsing_ops": {
            "decode_csv": [
                "records",
                "record_defaults",
                "field_delim",
                "name"
            ],
            "decode_json_example": [
                "json_examples",
                "name"
            ],
            "decode_raw": [
                "bytes",
                "out_type",
                "little_endian",
                "name"
            ],
            "_parse_example": [
                "serialized",
                "names",
                "sparse_keys",
                "dense_keys",
                "dense_defaults",
                "sparse_types",
                "dense_shapes",
                "name"
            ],
            "_parse_single_sequence_example": [
                "serialized",
                "feature_list_dense_missing_assumed_empty",
                "context_sparse_keys",
                "context_dense_keys",
                "feature_list_sparse_keys",
                "feature_list_dense_keys",
                "context_dense_defaults",
                "debug_name",
                "context_sparse_types",
                "feature_list_dense_types",
                "context_dense_shapes",
                "feature_list_sparse_types",
                "feature_list_dense_shapes",
                "name"
            ],
            "parse_tensor": [
                "serialized",
                "out_type",
                "name"
            ],
            "string_to_number": [
                "string_tensor",
                "out_type",
                "name"
            ],
            "_InitOpDefLibrary": []
        },
        "tensorflow.python.ops.gen_math_ops": {
            "_abs": [
                "x",
                "name"
            ],
            "acos": [
                "x",
                "name"
            ],
            "add": [
                "x",
                "y",
                "name"
            ],
            "_add_n": [
                "inputs",
                "name"
            ],
            "_all": [
                "input",
                "reduction_indices",
                "keep_dims",
                "name"
            ],
            "_any": [
                "input",
                "reduction_indices",
                "keep_dims",
                "name"
            ],
            "arg_max": [
                "input",
                "dimension",
                "name"
            ],
            "arg_min": [
                "input",
                "dimension",
                "name"
            ],
            "asin": [
                "x",
                "name"
            ],
            "atan": [
                "x",
                "name"
            ],
            "_batch_fft": [
                "input",
                "name"
            ],
            "_batch_fft2d": [
                "input",
                "name"
            ],
            "_batch_fft3d": [
                "input",
                "name"
            ],
            "_batch_ifft": [
                "input",
                "name"
            ],
            "_batch_ifft2d": [
                "input",
                "name"
            ],
            "_batch_ifft3d": [
                "input",
                "name"
            ],
            "_batch_mat_mul": [
                "x",
                "y",
                "adj_x",
                "adj_y",
                "name"
            ],
            "betainc": [
                "a",
                "b",
                "x",
                "name"
            ],
            "cast": [
                "x",
                "DstT",
                "name"
            ],
            "ceil": [
                "x",
                "name"
            ],
            "_complex": [
                "real",
                "imag",
                "Tout",
                "name"
            ],
            "_complex_abs": [
                "x",
                "Tout",
                "name"
            ],
            "_conj": [
                "input",
                "name"
            ],
            "cos": [
                "x",
                "name"
            ],
            "cross": [
                "a",
                "b",
                "name"
            ],
            "cumprod": [
                "x",
                "axis",
                "exclusive",
                "reverse",
                "name"
            ],
            "cumsum": [
                "x",
                "axis",
                "exclusive",
                "reverse",
                "name"
            ],
            "digamma": [
                "x",
                "name"
            ],
            "div": [
                "x",
                "y",
                "name"
            ],
            "equal": [
                "x",
                "y",
                "name"
            ],
            "erf": [
                "x",
                "name"
            ],
            "erfc": [
                "x",
                "name"
            ],
            "exp": [
                "x",
                "name"
            ],
            "expm1": [
                "x",
                "name"
            ],
            "fft": [
                "input",
                "name"
            ],
            "fft2d": [
                "input",
                "name"
            ],
            "fft3d": [
                "input",
                "name"
            ],
            "floor": [
                "x",
                "name"
            ],
            "_floor_div": [
                "x",
                "y",
                "name"
            ],
            "_floor_mod": [
                "x",
                "y",
                "name"
            ],
            "greater": [
                "x",
                "y",
                "name"
            ],
            "greater_equal": [
                "x",
                "y",
                "name"
            ],
            "ifft": [
                "input",
                "name"
            ],
            "ifft2d": [
                "input",
                "name"
            ],
            "ifft3d": [
                "input",
                "name"
            ],
            "igamma": [
                "a",
                "x",
                "name"
            ],
            "igammac": [
                "a",
                "x",
                "name"
            ],
            "imag": [
                "input",
                "Tout",
                "name"
            ],
            "inv": [
                "x",
                "name"
            ],
            "_inv_grad": [
                "x",
                "y",
                "name"
            ],
            "is_finite": [
                "x",
                "name"
            ],
            "is_inf": [
                "x",
                "name"
            ],
            "is_nan": [
                "x",
                "name"
            ],
            "less": [
                "x",
                "y",
                "name"
            ],
            "less_equal": [
                "x",
                "y",
                "name"
            ],
            "lgamma": [
                "x",
                "name"
            ],
            "lin_space": [
                "start",
                "stop",
                "num",
                "name"
            ],
            "log": [
                "x",
                "name"
            ],
            "log1p": [
                "x",
                "name"
            ],
            "logical_and": [
                "x",
                "y",
                "name"
            ],
            "logical_not": [
                "x",
                "name"
            ],
            "logical_or": [
                "x",
                "y",
                "name"
            ],
            "_mat_mul": [
                "a",
                "b",
                "transpose_a",
                "transpose_b",
                "name"
            ],
            "_max": [
                "input",
                "reduction_indices",
                "keep_dims",
                "name"
            ],
            "maximum": [
                "x",
                "y",
                "name"
            ],
            "_mean": [
                "input",
                "reduction_indices",
                "keep_dims",
                "name"
            ],
            "_min": [
                "input",
                "reduction_indices",
                "keep_dims",
                "name"
            ],
            "minimum": [
                "x",
                "y",
                "name"
            ],
            "mod": [
                "x",
                "y",
                "name"
            ],
            "_mul": [
                "x",
                "y",
                "name"
            ],
            "_neg": [
                "x",
                "name"
            ],
            "not_equal": [
                "x",
                "y",
                "name"
            ],
            "polygamma": [
                "a",
                "x",
                "name"
            ],
            "_pow": [
                "x",
                "y",
                "name"
            ],
            "_prod": [
                "input",
                "reduction_indices",
                "keep_dims",
                "name"
            ],
            "quantize_down_and_shrink_range": [
                "input",
                "input_min",
                "input_max",
                "out_type",
                "name"
            ],
            "quantized_mat_mul": [
                "a",
                "b",
                "min_a",
                "max_a",
                "min_b",
                "max_b",
                "Toutput",
                "transpose_a",
                "transpose_b",
                "Tactivation",
                "name"
            ],
            "_range": [
                "start",
                "limit",
                "delta",
                "name"
            ],
            "real": [
                "input",
                "Tout",
                "name"
            ],
            "_real_div": [
                "x",
                "y",
                "name"
            ],
            "reciprocal": [
                "x",
                "name"
            ],
            "_reciprocal_grad": [
                "x",
                "y",
                "name"
            ],
            "requantization_range": [
                "input",
                "input_min",
                "input_max",
                "name"
            ],
            "requantize": [
                "input",
                "input_min",
                "input_max",
                "requested_output_min",
                "requested_output_max",
                "out_type",
                "name"
            ],
            "rint": [
                "x",
                "name"
            ],
            "round": [
                "x",
                "name"
            ],
            "rsqrt": [
                "x",
                "name"
            ],
            "_rsqrt_grad": [
                "x",
                "y",
                "name"
            ],
            "segment_max": [
                "data",
                "segment_ids",
                "name"
            ],
            "segment_mean": [
                "data",
                "segment_ids",
                "name"
            ],
            "segment_min": [
                "data",
                "segment_ids",
                "name"
            ],
            "segment_prod": [
                "data",
                "segment_ids",
                "name"
            ],
            "segment_sum": [
                "data",
                "segment_ids",
                "name"
            ],
            "_select": [
                "condition",
                "t",
                "e",
                "name"
            ],
            "_sigmoid": [
                "x",
                "name"
            ],
            "_sigmoid_grad": [
                "x",
                "y",
                "name"
            ],
            "sign": [
                "x",
                "name"
            ],
            "sin": [
                "x",
                "name"
            ],
            "_sparse_mat_mul": [
                "a",
                "b",
                "transpose_a",
                "transpose_b",
                "a_is_sparse",
                "b_is_sparse",
                "name"
            ],
            "sparse_segment_mean": [
                "data",
                "indices",
                "segment_ids",
                "name"
            ],
            "sparse_segment_mean_grad": [
                "grad",
                "indices",
                "segment_ids",
                "output_dim0",
                "name"
            ],
            "sparse_segment_sqrt_n": [
                "data",
                "indices",
                "segment_ids",
                "name"
            ],
            "sparse_segment_sqrt_n_grad": [
                "grad",
                "indices",
                "segment_ids",
                "output_dim0",
                "name"
            ],
            "sparse_segment_sum": [
                "data",
                "indices",
                "segment_ids",
                "name"
            ],
            "sqrt": [
                "x",
                "name"
            ],
            "_sqrt_grad": [
                "x",
                "y",
                "name"
            ],
            "square": [
                "x",
                "name"
            ],
            "squared_difference": [
                "x",
                "y",
                "name"
            ],
            "_sub": [
                "x",
                "y",
                "name"
            ],
            "_sum": [
                "input",
                "reduction_indices",
                "keep_dims",
                "name"
            ],
            "tan": [
                "x",
                "name"
            ],
            "_tanh": [
                "x",
                "name"
            ],
            "_tanh_grad": [
                "x",
                "y",
                "name"
            ],
            "_truncate_div": [
                "x",
                "y",
                "name"
            ],
            "_truncate_mod": [
                "x",
                "y",
                "name"
            ],
            "unsorted_segment_sum": [
                "data",
                "segment_ids",
                "num_segments",
                "name"
            ],
            "zeta": [
                "x",
                "q",
                "name"
            ],
            "_InitOpDefLibrary": []
        },
        "tensorflow.python.ops.gen_set_ops": {
            "dense_to_dense_set_operation": [
                "set1",
                "set2",
                "set_operation",
                "validate_indices",
                "name"
            ],
            "dense_to_sparse_set_operation": [
                "set1",
                "set2_indices",
                "set2_values",
                "set2_shape",
                "set_operation",
                "validate_indices",
                "name"
            ],
            "set_size": [
                "set_indices",
                "set_values",
                "set_shape",
                "validate_indices",
                "name"
            ],
            "sparse_to_sparse_set_operation": [
                "set1_indices",
                "set1_values",
                "set1_shape",
                "set2_indices",
                "set2_values",
                "set2_shape",
                "set_operation",
                "validate_indices",
                "name"
            ],
            "_InitOpDefLibrary": []
        },
        "tensorflow.python.ops.candidate_sampling_ops": {
            "uniform_candidate_sampler": [
                "true_classes",
                "num_true",
                "num_sampled",
                "unique",
                "range_max",
                "seed",
                "name"
            ],
            "log_uniform_candidate_sampler": [
                "true_classes",
                "num_true",
                "num_sampled",
                "unique",
                "range_max",
                "seed",
                "name"
            ],
            "learned_unigram_candidate_sampler": [
                "true_classes",
                "num_true",
                "num_sampled",
                "unique",
                "range_max",
                "seed",
                "name"
            ],
            "fixed_unigram_candidate_sampler": [
                "true_classes",
                "num_true",
                "num_sampled",
                "unique",
                "range_max",
                "vocab_file",
                "distortion",
                "num_reserved_ids",
                "num_shards",
                "shard",
                "unigrams",
                "seed",
                "name"
            ],
            "all_candidate_sampler": [
                "true_classes",
                "num_true",
                "num_sampled",
                "unique",
                "seed",
                "name"
            ],
            "compute_accidental_hits": [
                "true_classes",
                "sampled_candidates",
                "num_true",
                "seed",
                "name"
            ]
        },
        "tensorflow.python.ops.gen_functional_ops": {
            "_symbolic_gradient": [
                "input",
                "Tout",
                "f",
                "name"
            ],
            "_InitOpDefLibrary": []
        },
        "tensorflow.python.ops.check_ops": {
            "assert_proper_iterable": [
                "values"
            ],
            "assert_negative": [
                "x",
                "data",
                "summarize",
                "message",
                "name"
            ],
            "assert_positive": [
                "x",
                "data",
                "summarize",
                "message",
                "name"
            ],
            "assert_non_negative": [
                "x",
                "data",
                "summarize",
                "message",
                "name"
            ],
            "assert_non_positive": [
                "x",
                "data",
                "summarize",
                "message",
                "name"
            ],
            "assert_equal": [
                "x",
                "y",
                "data",
                "summarize",
                "message",
                "name"
            ],
            "assert_less": [
                "x",
                "y",
                "data",
                "summarize",
                "message",
                "name"
            ],
            "assert_less_equal": [
                "x",
                "y",
                "data",
                "summarize",
                "message",
                "name"
            ],
            "assert_greater": [
                "x",
                "y",
                "data",
                "summarize",
                "message",
                "name"
            ],
            "assert_greater_equal": [
                "x",
                "y",
                "data",
                "summarize",
                "message",
                "name"
            ],
            "_assert_rank_condition": [
                "x",
                "rank",
                "static_condition",
                "dynamic_condition",
                "data",
                "summarize"
            ],
            "assert_rank": [
                "x",
                "rank",
                "data",
                "summarize",
                "message",
                "name"
            ],
            "assert_rank_at_least": [
                "x",
                "rank",
                "data",
                "summarize",
                "message",
                "name"
            ],
            "_static_rank_in": [
                "actual_rank",
                "given_ranks"
            ],
            "_dynamic_rank_in": [
                "actual_rank",
                "given_ranks"
            ],
            "_assert_ranks_condition": [
                "x",
                "ranks",
                "static_condition",
                "dynamic_condition",
                "data",
                "summarize"
            ],
            "assert_rank_in": [
                "x",
                "ranks",
                "data",
                "summarize",
                "message",
                "name"
            ],
            "assert_integer": [
                "x",
                "message",
                "name"
            ],
            "assert_type": [
                "tensor",
                "tf_type",
                "message",
                "name"
            ],
            "_get_diff_for_monotonic_comparison": [
                "x"
            ],
            "is_numeric_tensor": [
                "tensor"
            ],
            "is_non_decreasing": [
                "x",
                "name"
            ],
            "is_strictly_increasing": [
                "x",
                "name"
            ]
        },
        "tensorflow.python.ops.data_flow_grad": {
            "_DynamicPartitionGrads": [
                "op"
            ],
            "_DynamicStitchGrads": [
                "op",
                "grad"
            ]
        },
        "tensorflow.python.ops.embedding_ops": {
            "embedding_lookup": [
                "params",
                "ids",
                "partition_strategy",
                "name",
                "validate_indices",
                "max_norm"
            ],
            "embedding_lookup_sparse": [
                "params",
                "sp_ids",
                "sp_weights",
                "partition_strategy",
                "name",
                "combiner",
                "max_norm"
            ]
        },
        "tensorflow.python.ops.summary_ops": {
            "_Collect": [
                "val",
                "collections",
                "default_collections"
            ],
            "tensor_summary": [
                "name",
                "tensor",
                "summary_description",
                "collections"
            ]
        },
        "tensorflow.python.ops.ctc_ops": {
            "ctc_loss": [
                "labels",
                "inputs",
                "sequence_length",
                "preprocess_collapse_repeated",
                "ctc_merge_repeated",
                "time_major"
            ],
            "_CTCLossGrad": [
                "op",
                "grad_loss",
                "_"
            ],
            "ctc_greedy_decoder": [
                "inputs",
                "sequence_length",
                "merge_repeated"
            ],
            "ctc_beam_search_decoder": [
                "inputs",
                "sequence_length",
                "beam_width",
                "top_paths",
                "merge_repeated"
            ]
        },
        "tensorflow.python.ops.variable_scope": {
            "no_regularizer": [
                "_"
            ],
            "get_variable_scope": [],
            "_get_default_variable_store": [],
            "get_variable": [
                "name",
                "shape",
                "dtype",
                "initializer",
                "regularizer",
                "trainable",
                "collections",
                "caching_device",
                "partitioner",
                "validate_shape",
                "custom_getter"
            ],
            "get_local_variable": [],
            "_get_partitioned_variable": [
                "name",
                "shape",
                "dtype",
                "initializer",
                "regularizer",
                "trainable",
                "collections",
                "caching_device",
                "partitioner",
                "validate_shape"
            ],
            "_pure_variable_scope": [
                "name_or_scope",
                "reuse",
                "initializer",
                "regularizer",
                "caching_device",
                "partitioner",
                "custom_getter",
                "old_name_scope",
                "dtype"
            ],
            "_get_unique_variable_scope": [
                "prefix"
            ],
            "variable_scope": [
                "name_or_scope",
                "default_name",
                "values",
                "initializer",
                "regularizer",
                "caching_device",
                "partitioner",
                "custom_getter",
                "reuse",
                "dtype"
            ],
            "variable_op_scope": [
                "values",
                "name_or_scope",
                "default_name",
                "initializer",
                "regularizer",
                "caching_device",
                "partitioner",
                "custom_getter",
                "reuse",
                "dtype"
            ],
            "_compute_slice_dim_and_shape": [
                "full_shape",
                "slicing"
            ],
            "_PartitionInfo": {
                "__init__": [
                    "self",
                    "full_shape",
                    "var_offset"
                ],
                "full_shape": [
                    "self"
                ],
                "var_offset": [
                    "self"
                ],
                "single_offset": [
                    "self",
                    "shape"
                ],
                "single_slice_dim": [
                    "self",
                    "shape"
                ]
            },
            "_VariableStore": {
                "__init__": [
                    "self"
                ],
                "open_variable_scope": [
                    "self",
                    "scope_name"
                ],
                "close_variable_subscopes": [
                    "self",
                    "scope_name"
                ],
                "variable_scope_count": [
                    "self",
                    "scope_name"
                ],
                "get_variable": [
                    "self",
                    "name",
                    "shape",
                    "dtype",
                    "initializer",
                    "regularizer",
                    "reuse",
                    "trainable",
                    "collections",
                    "caching_device",
                    "partitioner",
                    "validate_shape",
                    "custom_getter"
                ],
                "_get_partitioned_variable": [
                    "self",
                    "name",
                    "partitioner",
                    "shape",
                    "dtype",
                    "initializer",
                    "regularizer",
                    "reuse",
                    "trainable",
                    "collections",
                    "caching_device",
                    "validate_shape"
                ],
                "_get_single_variable": [
                    "self",
                    "name",
                    "shape",
                    "dtype",
                    "initializer",
                    "regularizer",
                    "partition_info",
                    "reuse",
                    "trainable",
                    "collections",
                    "caching_device",
                    "validate_shape"
                ],
                "_get_default_initializer": [
                    "self",
                    "name",
                    "shape",
                    "dtype"
                ]
            },
            "VariableScope": {
                "__init__": [
                    "self",
                    "reuse",
                    "name",
                    "initializer",
                    "regularizer",
                    "caching_device",
                    "partitioner",
                    "custom_getter",
                    "name_scope",
                    "dtype"
                ],
                "name": [
                    "self"
                ],
                "original_name_scope": [
                    "self"
                ],
                "reuse": [
                    "self"
                ],
                "initializer": [
                    "self"
                ],
                "dtype": [
                    "self"
                ],
                "regularizer": [
                    "self"
                ],
                "caching_device": [
                    "self"
                ],
                "partitioner": [
                    "self"
                ],
                "custom_getter": [
                    "self"
                ],
                "reuse_variables": [
                    "self"
                ],
                "set_initializer": [
                    "self",
                    "initializer"
                ],
                "set_dtype": [
                    "self",
                    "dtype"
                ],
                "set_regularizer": [
                    "self",
                    "regularizer"
                ],
                "set_caching_device": [
                    "self",
                    "caching_device"
                ],
                "set_partitioner": [
                    "self",
                    "partitioner"
                ],
                "set_custom_getter": [
                    "self",
                    "custom_getter"
                ],
                "get_variable": [
                    "self",
                    "var_store",
                    "name",
                    "shape",
                    "dtype",
                    "initializer",
                    "regularizer",
                    "trainable",
                    "collections",
                    "caching_device",
                    "partitioner",
                    "validate_shape",
                    "custom_getter"
                ],
                "_get_partitioned_variable": [
                    "self",
                    "var_store",
                    "name",
                    "shape",
                    "dtype",
                    "initializer",
                    "regularizer",
                    "trainable",
                    "collections",
                    "caching_device",
                    "partitioner",
                    "validate_shape"
                ]
            }
        },
        "tensorflow.python.ops.gen_control_flow_ops": {
            "abort": [
                "error_msg",
                "exit_without_error",
                "name"
            ],
            "control_trigger": [
                "name"
            ],
            "enter": [
                "data",
                "frame_name",
                "is_constant",
                "parallel_iterations",
                "name"
            ],
            "_exit": [
                "data",
                "name"
            ],
            "loop_cond": [
                "input",
                "name"
            ],
            "_merge": [
                "inputs",
                "name"
            ],
            "next_iteration": [
                "data",
                "name"
            ],
            "no_op": [
                "name"
            ],
            "ref_enter": [
                "data",
                "frame_name",
                "is_constant",
                "parallel_iterations",
                "name"
            ],
            "_ref_exit": [
                "data",
                "name"
            ],
            "_ref_merge": [
                "inputs",
                "name"
            ],
            "ref_next_iteration": [
                "data",
                "name"
            ],
            "ref_select": [
                "index",
                "inputs",
                "name"
            ],
            "ref_switch": [
                "data",
                "pred",
                "name"
            ],
            "_switch": [
                "data",
                "pred",
                "name"
            ],
            "_InitOpDefLibrary": []
        },
        "tensorflow.python.ops.partitioned_variables": {
            "variable_axis_size_partitioner": [
                "max_shard_bytes",
                "axis",
                "bytes_per_string_element",
                "max_shards"
            ],
            "min_max_variable_partitioner": [
                "max_partitions",
                "axis",
                "min_slice_size",
                "bytes_per_string_element"
            ],
            "fixed_size_partitioner": [
                "num_shards",
                "axis"
            ],
            "create_partitioned_variables": [
                "shape",
                "slicing",
                "initializer",
                "dtype",
                "trainable",
                "collections",
                "name",
                "reuse"
            ]
        },
        "tensorflow.python.ops.numerics": {
            "verify_tensor_all_finite": [
                "t",
                "msg",
                "name"
            ],
            "add_check_numerics_ops": []
        },
        "tensorflow.python.ops.histogram_ops": {
            "histogram_fixed_width": [
                "values",
                "value_range",
                "nbins",
                "dtype",
                "name"
            ]
        },
        "tensorflow.python.ops.session_ops": {
            "get_session_handle": [
                "data",
                "name"
            ],
            "get_session_tensor": [
                "handle",
                "dtype",
                "name"
            ],
            "delete_session_tensor": [
                "handle",
                "name"
            ],
            "_register_handle_feeder": [
                "graph",
                "feeder",
                "dtype"
            ],
            "_get_handle_feeder": [
                "graph",
                "feeder"
            ],
            "_get_handle_reader": [
                "graph",
                "handle",
                "dtype"
            ],
            "_get_handle_mover": [
                "graph",
                "feeder",
                "handle"
            ],
            "_get_handle_deleter": [
                "graph",
                "handle"
            ],
            "TensorHandle": {
                "__init__": [
                    "self",
                    "handle",
                    "dtype",
                    "session"
                ],
                "__del__": [
                    "self"
                ],
                "__str__": [
                    "self"
                ],
                "handle": [
                    "self"
                ],
                "eval": [
                    "self"
                ],
                "delete": [
                    "self"
                ],
                "get_raw_handle": [
                    "self"
                ],
                "_get_device_name": [
                    "handle"
                ],
                "_get_reader_key": [
                    "handle"
                ],
                "_get_deleter_key": [
                    "handle"
                ],
                "_get_mover_key": [
                    "feeder",
                    "handle"
                ]
            }
        },
        "tensorflow.python.ops.random_ops": {
            "_ShapeTensor": [
                "shape"
            ],
            "random_normal": [
                "shape",
                "mean",
                "stddev",
                "dtype",
                "seed",
                "name"
            ],
            "parameterized_truncated_normal": [
                "shape",
                "means",
                "stddevs",
                "minvals",
                "maxvals",
                "dtype",
                "seed",
                "name"
            ],
            "truncated_normal": [
                "shape",
                "mean",
                "stddev",
                "dtype",
                "seed",
                "name"
            ],
            "random_uniform": [
                "shape",
                "minval",
                "maxval",
                "dtype",
                "seed",
                "name"
            ],
            "random_shuffle": [
                "value",
                "seed",
                "name"
            ],
            "random_crop": [
                "value",
                "size",
                "seed",
                "name"
            ],
            "multinomial": [
                "logits",
                "num_samples",
                "seed",
                "name"
            ],
            "random_gamma": [
                "shape",
                "alpha",
                "beta",
                "dtype",
                "seed",
                "name"
            ]
        },
        "tensorflow.python.ops.sdca_ops": {},
        "tensorflow.python.ops.linalg_grad": {
            "_MatrixInverseGrad": [
                "op",
                "grad"
            ],
            "_MatrixDeterminantGrad": [
                "op",
                "grad"
            ],
            "_CholeskyGrad": [
                "op",
                "grad"
            ],
            "_MatrixSolveGrad": [
                "op",
                "grad"
            ],
            "_MatrixSolveLsGrad": [
                "op",
                "grad"
            ],
            "_MatrixTriangularSolveGrad": [
                "op",
                "grad"
            ],
            "_SelfAdjointEigV2Grad": [
                "op",
                "grad_e",
                "grad_v"
            ]
        },
        "tensorflow.python.ops.gen_candidate_sampling_ops": {
            "_all_candidate_sampler": [
                "true_classes",
                "num_true",
                "num_sampled",
                "unique",
                "seed",
                "seed2",
                "name"
            ],
            "_compute_accidental_hits": [
                "true_classes",
                "sampled_candidates",
                "num_true",
                "seed",
                "seed2",
                "name"
            ],
            "_fixed_unigram_candidate_sampler": [
                "true_classes",
                "num_true",
                "num_sampled",
                "unique",
                "range_max",
                "vocab_file",
                "distortion",
                "num_reserved_ids",
                "num_shards",
                "shard",
                "unigrams",
                "seed",
                "seed2",
                "name"
            ],
            "_learned_unigram_candidate_sampler": [
                "true_classes",
                "num_true",
                "num_sampled",
                "unique",
                "range_max",
                "seed",
                "seed2",
                "name"
            ],
            "_log_uniform_candidate_sampler": [
                "true_classes",
                "num_true",
                "num_sampled",
                "unique",
                "range_max",
                "seed",
                "seed2",
                "name"
            ],
            "_thread_unsafe_unigram_candidate_sampler": [
                "true_classes",
                "num_true",
                "num_sampled",
                "unique",
                "range_max",
                "seed",
                "seed2",
                "name"
            ],
            "_uniform_candidate_sampler": [
                "true_classes",
                "num_true",
                "num_sampled",
                "unique",
                "range_max",
                "seed",
                "seed2",
                "name"
            ],
            "_InitOpDefLibrary": []
        },
        "tensorflow.python.ops.rnn": {
            "_infer_state_dtype": [
                "explicit_dtype",
                "state"
            ],
            "_on_device": [
                "fn",
                "device"
            ],
            "_rnn_step": [
                "time",
                "sequence_length",
                "min_sequence_length",
                "max_sequence_length",
                "zero_output",
                "state",
                "call_cell",
                "state_size",
                "skip_conditionals"
            ],
            "_reverse_seq": [
                "input_seq",
                "lengths"
            ],
            "bidirectional_dynamic_rnn": [
                "cell_fw",
                "cell_bw",
                "inputs",
                "sequence_length",
                "initial_state_fw",
                "initial_state_bw",
                "dtype",
                "parallel_iterations",
                "swap_memory",
                "time_major",
                "scope"
            ],
            "dynamic_rnn": [
                "cell",
                "inputs",
                "sequence_length",
                "initial_state",
                "dtype",
                "parallel_iterations",
                "swap_memory",
                "time_major",
                "scope"
            ],
            "_dynamic_rnn_loop": [
                "cell",
                "inputs",
                "initial_state",
                "parallel_iterations",
                "swap_memory",
                "sequence_length",
                "dtype"
            ],
            "raw_rnn": [
                "cell",
                "loop_fn",
                "parallel_iterations",
                "swap_memory",
                "scope"
            ]
        },
        "tensorflow.python.ops.gen_sparse_ops": {
            "_add_many_sparse_to_tensors_map": [
                "sparse_indices",
                "sparse_values",
                "sparse_shape",
                "container",
                "shared_name",
                "name"
            ],
            "_add_sparse_to_tensors_map": [
                "sparse_indices",
                "sparse_values",
                "sparse_shape",
                "container",
                "shared_name",
                "name"
            ],
            "_deserialize_many_sparse": [
                "serialized_sparse",
                "dtype",
                "name"
            ],
            "_serialize_many_sparse": [
                "sparse_indices",
                "sparse_values",
                "sparse_shape",
                "name"
            ],
            "_serialize_sparse": [
                "sparse_indices",
                "sparse_values",
                "sparse_shape",
                "name"
            ],
            "_sparse_add": [
                "a_indices",
                "a_values",
                "a_shape",
                "b_indices",
                "b_values",
                "b_shape",
                "thresh",
                "name"
            ],
            "_sparse_add_grad": [
                "backprop_val_grad",
                "a_indices",
                "b_indices",
                "sum_indices",
                "name"
            ],
            "_sparse_concat": [
                "indices",
                "values",
                "shapes",
                "concat_dim",
                "name"
            ],
            "sparse_dense_cwise_add": [
                "sp_indices",
                "sp_values",
                "sp_shape",
                "dense",
                "name"
            ],
            "sparse_dense_cwise_div": [
                "sp_indices",
                "sp_values",
                "sp_shape",
                "dense",
                "name"
            ],
            "sparse_dense_cwise_mul": [
                "sp_indices",
                "sp_values",
                "sp_shape",
                "dense",
                "name"
            ],
            "sparse_reduce_sum": [
                "input_indices",
                "input_values",
                "input_shape",
                "reduction_axes",
                "keep_dims",
                "name"
            ],
            "sparse_reduce_sum_sparse": [
                "input_indices",
                "input_values",
                "input_shape",
                "reduction_axes",
                "keep_dims",
                "name"
            ],
            "_sparse_reorder": [
                "input_indices",
                "input_values",
                "input_shape",
                "name"
            ],
            "_sparse_reshape": [
                "input_indices",
                "input_shape",
                "new_shape",
                "name"
            ],
            "sparse_softmax": [
                "sp_indices",
                "sp_values",
                "sp_shape",
                "name"
            ],
            "sparse_sparse_maximum": [
                "a_indices",
                "a_values",
                "a_shape",
                "b_indices",
                "b_values",
                "b_shape",
                "name"
            ],
            "sparse_sparse_minimum": [
                "a_indices",
                "a_values",
                "a_shape",
                "b_indices",
                "b_values",
                "b_shape",
                "name"
            ],
            "_sparse_split": [
                "split_dim",
                "indices",
                "values",
                "shape",
                "num_split",
                "name"
            ],
            "_sparse_tensor_dense_add": [
                "a_indices",
                "a_values",
                "a_shape",
                "b",
                "name"
            ],
            "_sparse_tensor_dense_mat_mul": [
                "a_indices",
                "a_values",
                "a_shape",
                "b",
                "adjoint_a",
                "adjoint_b",
                "name"
            ],
            "_sparse_to_dense": [
                "sparse_indices",
                "output_shape",
                "sparse_values",
                "default_value",
                "validate_indices",
                "name"
            ],
            "_take_many_sparse_from_tensors_map": [
                "sparse_handles",
                "dtype",
                "container",
                "shared_name",
                "name"
            ],
            "_InitOpDefLibrary": []
        },
        "tensorflow.python.ops.script_ops": {
            "py_func": [
                "func",
                "inp",
                "Tout",
                "stateful",
                "name"
            ],
            "FuncRegistry": {
                "__init__": [
                    "self"
                ],
                "insert": [
                    "self",
                    "func"
                ],
                "remove": [
                    "self",
                    "token"
                ],
                "_convert": [
                    "value"
                ],
                "__call__": [
                    "self",
                    "token",
                    "args"
                ],
                "size": [
                    "self"
                ],
                "_next_unique_token": [
                    "self"
                ]
            },
            "CleanupFunc": {
                "__init__": [
                    "self",
                    "token"
                ],
                "__del__": [
                    "self"
                ]
            }
        },
        "tensorflow.python.ops.special_math_ops": {
            "lbeta": [
                "x",
                "name"
            ],
            "einsum": [
                "equation"
            ],
            "_einsum_reduction": [
                "t0",
                "t0_axis_labels",
                "t1",
                "t1_axis_labels",
                "axes_to_sum"
            ],
            "_transpose_if_necessary": [
                "tensor",
                "perm"
            ],
            "_reshape_if_necessary": [
                "tensor",
                "new_shape"
            ],
            "_total_size": [
                "shape_values"
            ],
            "_exponential_space_einsum": [
                "equation"
            ]
        },
        "tensorflow.python.ops.string_ops": {
            "string_split": [
                "source",
                "delimiter"
            ],
            "_reduce_join_reduction_dims": [
                "x",
                "axis",
                "reduction_indices"
            ],
            "reduce_join": [
                "inputs",
                "axis",
                "keep_dims",
                "separator",
                "name",
                "reduction_indices"
            ]
        },
        "tensorflow.python.ops.cloud": {},
        "tensorflow.python.ops.cloud.cloud": {},
        "tensorflow.python.ops.cloud.bigquery_reader_ops": {
            "BigQueryReader": {
                "__init__": [
                    "self",
                    "project_id",
                    "dataset_id",
                    "table_id",
                    "timestamp_millis",
                    "num_partitions",
                    "features",
                    "columns",
                    "test_end_point",
                    "name"
                ],
                "partitions": [
                    "self",
                    "name"
                ]
            }
        },
        "tensorflow.python.ops.losses": {},
        "tensorflow.python.ops.losses.losses_impl": {
            "_scale_losses": [
                "losses",
                "weights"
            ],
            "_safe_div": [
                "numerator",
                "denominator",
                "name"
            ],
            "_safe_mean": [
                "losses",
                "num_present"
            ],
            "_num_present": [
                "losses",
                "weights",
                "per_batch"
            ],
            "compute_weighted_loss": [
                "losses",
                "weights",
                "scope",
                "loss_collection"
            ],
            "absolute_difference": [
                "labels",
                "predictions",
                "weights",
                "scope",
                "loss_collection"
            ],
            "cosine_distance": [
                "labels",
                "predictions",
                "dim",
                "weights",
                "scope",
                "loss_collection"
            ],
            "hinge_loss": [
                "labels",
                "logits",
                "weights",
                "scope",
                "loss_collection"
            ],
            "log_loss": [
                "labels",
                "predictions",
                "weights",
                "epsilon",
                "scope",
                "loss_collection"
            ],
            "mean_pairwise_squared_error": [
                "labels",
                "predictions",
                "weights",
                "scope",
                "loss_collection"
            ],
            "mean_squared_error": [
                "labels",
                "predictions",
                "weights",
                "scope",
                "loss_collection"
            ],
            "sigmoid_cross_entropy": [
                "multi_class_labels",
                "logits",
                "weights",
                "label_smoothing",
                "scope",
                "loss_collection"
            ],
            "softmax_cross_entropy": [
                "onehot_labels",
                "logits",
                "weights",
                "label_smoothing",
                "scope",
                "loss_collection"
            ],
            "_remove_squeezable_dimensions": [
                "labels",
                "predictions",
                "weights",
                "expected_rank_diff"
            ],
            "sparse_softmax_cross_entropy": [
                "labels",
                "logits",
                "weights",
                "scope",
                "loss_collection"
            ]
        },
        "tensorflow.python.ops.losses.util": {
            "add_loss": [
                "loss",
                "loss_collection"
            ],
            "get_losses": [
                "scope",
                "loss_collection"
            ],
            "get_regularization_losses": [
                "scope"
            ],
            "get_total_loss": [
                "add_regularization_losses",
                "name"
            ]
        },
        "tensorflow.python.ops.losses.losses": {},
        "tensorflow.python.user_ops": {},
        "tensorflow.python.user_ops.user_ops": {
            "my_fact": []
        },
        "tensorflow.python.summary.event_file_inspector": {
            "get_field_to_observations_map": [
                "generator",
                "query_for_tag"
            ],
            "get_unique_tags": [
                "field_to_obs"
            ],
            "print_dict": [
                "d",
                "show_missing"
            ],
            "get_dict_to_print": [
                "field_to_obs"
            ],
            "get_out_of_order": [
                "list_of_numbers"
            ],
            "generators_from_logdir": [
                "logdir"
            ],
            "generator_from_event_file": [
                "event_file"
            ],
            "get_inspection_units": [
                "logdir",
                "event_file",
                "tag"
            ],
            "inspect": [
                "logdir",
                "event_file",
                "tag"
            ]
        },
        "tensorflow.python.summary": {},
        "tensorflow.python.summary.event_accumulator": {
            "IsTensorFlowEventsFile": [
                "path"
            ],
            "_GetPurgeMessage": [
                "most_recent_step",
                "most_recent_wall_time",
                "event_step",
                "event_wall_time",
                "num_expired_scalars",
                "num_expired_histos",
                "num_expired_comp_histos",
                "num_expired_images",
                "num_expired_audio"
            ],
            "_GeneratorFromPath": [
                "path"
            ],
            "_ParseFileVersion": [
                "file_version"
            ],
            "_CompressHistogram": [
                "histo_ev",
                "bps"
            ],
            "_Remap": [
                "x",
                "x0",
                "x1",
                "y0",
                "y1"
            ],
            "EventAccumulator": {
                "__init__": [
                    "self",
                    "path",
                    "size_guidance",
                    "compression_bps",
                    "purge_orphaned_data"
                ],
                "Reload": [
                    "self"
                ],
                "FirstEventTimestamp": [
                    "self"
                ],
                "_ProcessEvent": [
                    "self",
                    "event"
                ],
                "_ProcessTensorSummary": [
                    "self",
                    "value",
                    "event"
                ],
                "_UpdateTensorSummaries": [
                    "self"
                ],
                "Tags": [
                    "self"
                ],
                "Scalars": [
                    "self",
                    "tag"
                ],
                "Graph": [
                    "self"
                ],
                "MetaGraph": [
                    "self"
                ],
                "RunMetadata": [
                    "self",
                    "tag"
                ],
                "Histograms": [
                    "self",
                    "tag"
                ],
                "CompressedHistograms": [
                    "self",
                    "tag"
                ],
                "Images": [
                    "self",
                    "tag"
                ],
                "Audio": [
                    "self",
                    "tag"
                ],
                "_MaybePurgeOrphanedData": [
                    "self",
                    "event"
                ],
                "_CheckForRestartAndMaybePurge": [
                    "self",
                    "event"
                ],
                "_CheckForOutOfOrderStepAndMaybePurge": [
                    "self",
                    "event"
                ],
                "_ConvertHistogramProtoToTuple": [
                    "self",
                    "histo"
                ],
                "_ProcessHistogram": [
                    "self",
                    "tag",
                    "wall_time",
                    "step",
                    "histo"
                ],
                "_ProcessImage": [
                    "self",
                    "tag",
                    "wall_time",
                    "step",
                    "image"
                ],
                "_ProcessAudio": [
                    "self",
                    "tag",
                    "wall_time",
                    "step",
                    "audio"
                ],
                "_ProcessScalar": [
                    "self",
                    "tag",
                    "wall_time",
                    "step",
                    "scalar"
                ],
                "_Purge": [
                    "self",
                    "event",
                    "by_tags"
                ]
            }
        },
        "tensorflow.python.summary.summary": {
            "_collect": [
                "val",
                "collections",
                "default_collections"
            ],
            "_clean_tag": [
                "name"
            ],
            "scalar": [
                "name",
                "tensor",
                "collections"
            ],
            "image": [
                "name",
                "tensor",
                "max_outputs",
                "collections"
            ],
            "histogram": [
                "name",
                "values",
                "collections"
            ],
            "audio": [
                "name",
                "tensor",
                "sample_rate",
                "max_outputs",
                "collections"
            ],
            "merge": [
                "inputs",
                "collections",
                "name"
            ],
            "merge_all": [
                "key"
            ],
            "get_summary_description": [
                "node_def"
            ]
        },
        "tensorflow.python.summary.summary_iterator": {
            "summary_iterator": [
                "path"
            ],
            "SummaryWriter": {
                "__init__": [
                    "self",
                    "logdir",
                    "graph",
                    "max_queue",
                    "flush_secs",
                    "graph_def"
                ],
                "get_logdir": [
                    "self"
                ],
                "reopen": [
                    "self"
                ],
                "add_summary": [
                    "self",
                    "summary",
                    "global_step"
                ],
                "add_session_log": [
                    "self",
                    "session_log",
                    "global_step"
                ],
                "add_event": [
                    "self",
                    "event"
                ],
                "_add_graph_def": [
                    "self",
                    "graph_def",
                    "global_step"
                ],
                "add_graph": [
                    "self",
                    "graph",
                    "global_step",
                    "graph_def"
                ],
                "add_run_metadata": [
                    "self",
                    "run_metadata",
                    "tag",
                    "global_step"
                ],
                "flush": [
                    "self"
                ],
                "close": [
                    "self"
                ]
            },
            "_EventLoggerThread": {
                "__init__": [
                    "self",
                    "queue",
                    "ev_writer",
                    "flush_secs"
                ],
                "run": [
                    "self"
                ]
            },
            "SummaryWriterCache": {
                "clear": [],
                "get": [
                    "logdir"
                ]
            }
        },
        "tensorflow.python.summary.event_multiplexer": {
            "GetLogdirSubdirectories": [
                "path"
            ],
            "EventMultiplexer": {
                "__init__": [
                    "self",
                    "run_path_map",
                    "size_guidance",
                    "purge_orphaned_data"
                ],
                "AddRun": [
                    "self",
                    "path",
                    "name"
                ],
                "AddRunsFromDirectory": [
                    "self",
                    "path",
                    "name"
                ],
                "Reload": [
                    "self"
                ],
                "FirstEventTimestamp": [
                    "self",
                    "run"
                ],
                "Scalars": [
                    "self",
                    "run",
                    "tag"
                ],
                "Graph": [
                    "self",
                    "run"
                ],
                "MetaGraph": [
                    "self",
                    "run"
                ],
                "RunMetadata": [
                    "self",
                    "run",
                    "tag"
                ],
                "Histograms": [
                    "self",
                    "run",
                    "tag"
                ],
                "CompressedHistograms": [
                    "self",
                    "run",
                    "tag"
                ],
                "Images": [
                    "self",
                    "run",
                    "tag"
                ],
                "Audio": [
                    "self",
                    "run",
                    "tag"
                ],
                "Runs": [
                    "self"
                ],
                "RunPaths": [
                    "self"
                ],
                "_GetAccumulator": [
                    "self",
                    "run"
                ]
            }
        },
        "tensorflow.python.summary.writer.event_file_writer": {
            "EventFileWriter": {
                "__init__": [
                    "self",
                    "logdir",
                    "max_queue",
                    "flush_secs"
                ],
                "get_logdir": [
                    "self"
                ],
                "reopen": [
                    "self"
                ],
                "add_event": [
                    "self",
                    "event"
                ],
                "flush": [
                    "self"
                ],
                "close": [
                    "self"
                ]
            },
            "_EventLoggerThread": {
                "__init__": [
                    "self",
                    "queue",
                    "ev_writer",
                    "flush_secs"
                ],
                "run": [
                    "self"
                ]
            }
        },
        "tensorflow.python.summary.writer": {},
        "tensorflow.python.summary.writer.writer": {
            "SummaryToEventTransformer": {
                "__init__": [
                    "self",
                    "event_writer",
                    "graph",
                    "graph_def"
                ],
                "add_summary": [
                    "self",
                    "summary",
                    "global_step"
                ],
                "add_session_log": [
                    "self",
                    "session_log",
                    "global_step"
                ],
                "_add_graph_def": [
                    "self",
                    "graph_def",
                    "global_step"
                ],
                "add_graph": [
                    "self",
                    "graph",
                    "global_step",
                    "graph_def"
                ],
                "add_meta_graph": [
                    "self",
                    "meta_graph_def",
                    "global_step"
                ],
                "add_run_metadata": [
                    "self",
                    "run_metadata",
                    "tag",
                    "global_step"
                ],
                "_add_event": [
                    "self",
                    "event",
                    "step"
                ]
            },
            "FileWriter": {
                "__init__": [
                    "self",
                    "logdir",
                    "graph",
                    "max_queue",
                    "flush_secs",
                    "graph_def"
                ],
                "get_logdir": [
                    "self"
                ],
                "add_event": [
                    "self",
                    "event"
                ],
                "flush": [
                    "self"
                ],
                "close": [
                    "self"
                ],
                "reopen": [
                    "self"
                ]
            }
        },
        "tensorflow.python.summary.writer.writer_cache": {
            "FileWriterCache": {
                "clear": [],
                "get": [
                    "logdir"
                ]
            }
        },
        "tensorflow.python.summary.impl": {},
        "tensorflow.python.summary.impl.io_wrapper": {
            "IsGCSPath": [
                "path"
            ],
            "ListDirectoryAbsolute": [
                "directory"
            ],
            "ListRecursively": [
                "top"
            ]
        },
        "tensorflow.python.summary.impl.event_file_loader": {
            "main": [
                "argv"
            ],
            "EventFileLoader": {
                "__init__": [
                    "self",
                    "file_path"
                ],
                "Load": [
                    "self"
                ]
            }
        },
        "tensorflow.python.summary.impl.directory_watcher": {
            "DirectoryWatcher": {
                "__init__": [
                    "self",
                    "directory",
                    "loader_factory",
                    "path_filter"
                ],
                "Load": [
                    "self"
                ],
                "_LoadInternal": [
                    "self"
                ],
                "OutOfOrderWritesDetected": [
                    "self"
                ],
                "_InitializeLoader": [
                    "self"
                ],
                "_SetPath": [
                    "self",
                    "path"
                ],
                "_GetNextPath": [
                    "self"
                ],
                "_HasOOOWrite": [
                    "self",
                    "path"
                ]
            },
            "DirectoryDeletedError": {}
        },
        "tensorflow.python.summary.impl.reservoir": {
            "Reservoir": {
                "__init__": [
                    "self",
                    "size",
                    "seed",
                    "always_keep_last"
                ],
                "Keys": [
                    "self"
                ],
                "Items": [
                    "self",
                    "key"
                ],
                "AddItem": [
                    "self",
                    "key",
                    "item",
                    "f"
                ],
                "FilterItems": [
                    "self",
                    "filterFn",
                    "key"
                ]
            },
            "_ReservoirBucket": {
                "__init__": [
                    "self",
                    "_max_size",
                    "_random",
                    "always_keep_last"
                ],
                "AddItem": [
                    "self",
                    "item",
                    "f"
                ],
                "FilterItems": [
                    "self",
                    "filterFn"
                ],
                "Items": [
                    "self"
                ]
            }
        },
        "tensorflow.python.training.rmsprop": {
            "RMSPropOptimizer": {
                "__init__": [
                    "self",
                    "learning_rate",
                    "decay",
                    "momentum",
                    "epsilon",
                    "use_locking",
                    "centered",
                    "name"
                ],
                "_create_slots": [
                    "self",
                    "var_list"
                ],
                "_prepare": [
                    "self"
                ],
                "_apply_dense": [
                    "self",
                    "grad",
                    "var"
                ],
                "_apply_sparse": [
                    "self",
                    "grad",
                    "var"
                ]
            }
        },
        "tensorflow.python.training.gen_training_ops": {
            "apply_adadelta": [
                "var",
                "accum",
                "accum_update",
                "lr",
                "rho",
                "epsilon",
                "grad",
                "use_locking",
                "name"
            ],
            "apply_adagrad": [
                "var",
                "accum",
                "lr",
                "grad",
                "use_locking",
                "name"
            ],
            "apply_adagrad_da": [
                "var",
                "gradient_accumulator",
                "gradient_squared_accumulator",
                "grad",
                "lr",
                "l1",
                "l2",
                "global_step",
                "use_locking",
                "name"
            ],
            "apply_adam": [
                "var",
                "m",
                "v",
                "beta1_power",
                "beta2_power",
                "lr",
                "beta1",
                "beta2",
                "epsilon",
                "grad",
                "use_locking",
                "name"
            ],
            "apply_centered_rms_prop": [
                "var",
                "mg",
                "ms",
                "mom",
                "lr",
                "rho",
                "momentum",
                "epsilon",
                "grad",
                "use_locking",
                "name"
            ],
            "apply_ftrl": [
                "var",
                "accum",
                "linear",
                "grad",
                "lr",
                "l1",
                "l2",
                "lr_power",
                "use_locking",
                "name"
            ],
            "apply_gradient_descent": [
                "var",
                "alpha",
                "delta",
                "use_locking",
                "name"
            ],
            "apply_momentum": [
                "var",
                "accum",
                "lr",
                "grad",
                "momentum",
                "use_locking",
                "use_nesterov",
                "name"
            ],
            "apply_proximal_adagrad": [
                "var",
                "accum",
                "lr",
                "l1",
                "l2",
                "grad",
                "use_locking",
                "name"
            ],
            "apply_proximal_gradient_descent": [
                "var",
                "alpha",
                "l1",
                "l2",
                "delta",
                "use_locking",
                "name"
            ],
            "apply_rms_prop": [
                "var",
                "ms",
                "mom",
                "lr",
                "rho",
                "momentum",
                "epsilon",
                "grad",
                "use_locking",
                "name"
            ],
            "resource_apply_adadelta": [
                "var",
                "accum",
                "accum_update",
                "lr",
                "rho",
                "epsilon",
                "grad",
                "use_locking",
                "name"
            ],
            "resource_apply_adagrad": [
                "var",
                "accum",
                "lr",
                "grad",
                "use_locking",
                "name"
            ],
            "resource_apply_adagrad_da": [
                "var",
                "gradient_accumulator",
                "gradient_squared_accumulator",
                "grad",
                "lr",
                "l1",
                "l2",
                "global_step",
                "use_locking",
                "name"
            ],
            "resource_apply_adam": [
                "var",
                "m",
                "v",
                "beta1_power",
                "beta2_power",
                "lr",
                "beta1",
                "beta2",
                "epsilon",
                "grad",
                "use_locking",
                "name"
            ],
            "resource_apply_centered_rms_prop": [
                "var",
                "mg",
                "ms",
                "mom",
                "lr",
                "rho",
                "momentum",
                "epsilon",
                "grad",
                "use_locking",
                "name"
            ],
            "resource_apply_ftrl": [
                "var",
                "accum",
                "linear",
                "grad",
                "lr",
                "l1",
                "l2",
                "lr_power",
                "use_locking",
                "name"
            ],
            "resource_apply_gradient_descent": [
                "var",
                "alpha",
                "delta",
                "use_locking",
                "name"
            ],
            "resource_apply_momentum": [
                "var",
                "accum",
                "lr",
                "grad",
                "momentum",
                "use_locking",
                "use_nesterov",
                "name"
            ],
            "resource_apply_proximal_adagrad": [
                "var",
                "accum",
                "lr",
                "l1",
                "l2",
                "grad",
                "use_locking",
                "name"
            ],
            "resource_apply_proximal_gradient_descent": [
                "var",
                "alpha",
                "l1",
                "l2",
                "delta",
                "use_locking",
                "name"
            ],
            "resource_apply_rms_prop": [
                "var",
                "ms",
                "mom",
                "lr",
                "rho",
                "momentum",
                "epsilon",
                "grad",
                "use_locking",
                "name"
            ],
            "resource_sparse_apply_adadelta": [
                "var",
                "accum",
                "accum_update",
                "lr",
                "rho",
                "epsilon",
                "grad",
                "indices",
                "use_locking",
                "name"
            ],
            "resource_sparse_apply_adagrad": [
                "var",
                "accum",
                "lr",
                "grad",
                "indices",
                "use_locking",
                "name"
            ],
            "resource_sparse_apply_adagrad_da": [
                "var",
                "gradient_accumulator",
                "gradient_squared_accumulator",
                "grad",
                "indices",
                "lr",
                "l1",
                "l2",
                "global_step",
                "use_locking",
                "name"
            ],
            "resource_sparse_apply_centered_rms_prop": [
                "var",
                "mg",
                "ms",
                "mom",
                "lr",
                "rho",
                "momentum",
                "epsilon",
                "grad",
                "indices",
                "use_locking",
                "name"
            ],
            "resource_sparse_apply_ftrl": [
                "var",
                "accum",
                "linear",
                "grad",
                "indices",
                "lr",
                "l1",
                "l2",
                "lr_power",
                "use_locking",
                "name"
            ],
            "resource_sparse_apply_momentum": [
                "var",
                "accum",
                "lr",
                "grad",
                "indices",
                "momentum",
                "use_locking",
                "use_nesterov",
                "name"
            ],
            "resource_sparse_apply_proximal_adagrad": [
                "var",
                "accum",
                "lr",
                "l1",
                "l2",
                "grad",
                "indices",
                "use_locking",
                "name"
            ],
            "resource_sparse_apply_proximal_gradient_descent": [
                "var",
                "alpha",
                "l1",
                "l2",
                "grad",
                "indices",
                "use_locking",
                "name"
            ],
            "resource_sparse_apply_rms_prop": [
                "var",
                "ms",
                "mom",
                "lr",
                "rho",
                "momentum",
                "epsilon",
                "grad",
                "indices",
                "use_locking",
                "name"
            ],
            "sparse_apply_adadelta": [
                "var",
                "accum",
                "accum_update",
                "lr",
                "rho",
                "epsilon",
                "grad",
                "indices",
                "use_locking",
                "name"
            ],
            "sparse_apply_adagrad": [
                "var",
                "accum",
                "lr",
                "grad",
                "indices",
                "use_locking",
                "name"
            ],
            "sparse_apply_adagrad_da": [
                "var",
                "gradient_accumulator",
                "gradient_squared_accumulator",
                "grad",
                "indices",
                "lr",
                "l1",
                "l2",
                "global_step",
                "use_locking",
                "name"
            ],
            "sparse_apply_centered_rms_prop": [
                "var",
                "mg",
                "ms",
                "mom",
                "lr",
                "rho",
                "momentum",
                "epsilon",
                "grad",
                "indices",
                "use_locking",
                "name"
            ],
            "sparse_apply_ftrl": [
                "var",
                "accum",
                "linear",
                "grad",
                "indices",
                "lr",
                "l1",
                "l2",
                "lr_power",
                "use_locking",
                "name"
            ],
            "sparse_apply_momentum": [
                "var",
                "accum",
                "lr",
                "grad",
                "indices",
                "momentum",
                "use_locking",
                "use_nesterov",
                "name"
            ],
            "sparse_apply_proximal_adagrad": [
                "var",
                "accum",
                "lr",
                "l1",
                "l2",
                "grad",
                "indices",
                "use_locking",
                "name"
            ],
            "sparse_apply_proximal_gradient_descent": [
                "var",
                "alpha",
                "l1",
                "l2",
                "grad",
                "indices",
                "use_locking",
                "name"
            ],
            "sparse_apply_rms_prop": [
                "var",
                "ms",
                "mom",
                "lr",
                "rho",
                "momentum",
                "epsilon",
                "grad",
                "indices",
                "use_locking",
                "name"
            ],
            "_InitOpDefLibrary": []
        },
        "tensorflow.python.training.adadelta": {
            "AdadeltaOptimizer": {
                "__init__": [
                    "self",
                    "learning_rate",
                    "rho",
                    "epsilon",
                    "use_locking",
                    "name"
                ],
                "_create_slots": [
                    "self",
                    "var_list"
                ],
                "_prepare": [
                    "self"
                ],
                "_apply_dense": [
                    "self",
                    "grad",
                    "var"
                ],
                "_apply_sparse": [
                    "self",
                    "grad",
                    "var"
                ]
            }
        },
        "tensorflow.python.training.input": {
            "match_filenames_once": [
                "pattern",
                "name"
            ],
            "limit_epochs": [
                "tensor",
                "num_epochs",
                "name"
            ],
            "input_producer": [
                "input_tensor",
                "element_shape",
                "num_epochs",
                "shuffle",
                "seed",
                "capacity",
                "shared_name",
                "summary_name",
                "name",
                "cancel_op"
            ],
            "string_input_producer": [
                "string_tensor",
                "num_epochs",
                "shuffle",
                "seed",
                "capacity",
                "shared_name",
                "name",
                "cancel_op"
            ],
            "range_input_producer": [
                "limit",
                "num_epochs",
                "shuffle",
                "seed",
                "capacity",
                "shared_name",
                "name"
            ],
            "slice_input_producer": [
                "tensor_list",
                "num_epochs",
                "shuffle",
                "seed",
                "capacity",
                "shared_name",
                "name"
            ],
            "_flatten": [
                "tensor_list_list"
            ],
            "_as_tensor_list": [
                "tensors"
            ],
            "_as_tensor_list_list": [
                "tensors_list"
            ],
            "_as_original_type": [
                "original_tensors",
                "tensor_list"
            ],
            "_store_sparse_tensors": [
                "tensor_list",
                "enqueue_many",
                "keep_input",
                "shared_map_ops"
            ],
            "_store_sparse_tensors_join": [
                "tensor_list_list",
                "enqueue_many",
                "keep_input"
            ],
            "_restore_sparse_tensors": [
                "stored_list",
                "sparse_info_list"
            ],
            "_validate": [
                "tensor_list"
            ],
            "_validate_join": [
                "tensor_list_list"
            ],
            "_validate_tensor_or_none": [
                "tensor_or_none"
            ],
            "_dtypes": [
                "tensor_list_list"
            ],
            "_merge_shapes": [
                "shape_list",
                "enqueue_many"
            ],
            "_shapes": [
                "tensor_list_list",
                "shapes",
                "enqueue_many"
            ],
            "_enqueue_join": [
                "queue",
                "tensor_list_list",
                "enqueue_many",
                "keep_input"
            ],
            "_enqueue": [
                "queue",
                "tensor_list",
                "threads",
                "enqueue_many",
                "keep_input"
            ],
            "_which_queue": [
                "dynamic_pad"
            ],
            "_batch": [
                "tensors",
                "batch_size",
                "keep_input",
                "num_threads",
                "capacity",
                "enqueue_many",
                "shapes",
                "dynamic_pad",
                "allow_smaller_final_batch",
                "shared_name",
                "name"
            ],
            "_batch_join": [
                "tensors_list",
                "batch_size",
                "keep_input",
                "capacity",
                "enqueue_many",
                "shapes",
                "dynamic_pad",
                "allow_smaller_final_batch",
                "shared_name",
                "name"
            ],
            "_shuffle_batch": [
                "tensors",
                "batch_size",
                "capacity",
                "min_after_dequeue",
                "keep_input",
                "num_threads",
                "seed",
                "enqueue_many",
                "shapes",
                "allow_smaller_final_batch",
                "shared_name",
                "name"
            ],
            "_shuffle_batch_join": [
                "tensors_list",
                "batch_size",
                "capacity",
                "min_after_dequeue",
                "keep_input",
                "seed",
                "enqueue_many",
                "shapes",
                "allow_smaller_final_batch",
                "shared_name",
                "name"
            ],
            "batch": [
                "tensors",
                "batch_size",
                "num_threads",
                "capacity",
                "enqueue_many",
                "shapes",
                "dynamic_pad",
                "allow_smaller_final_batch",
                "shared_name",
                "name"
            ],
            "maybe_batch": [
                "tensors",
                "keep_input",
                "batch_size",
                "num_threads",
                "capacity",
                "enqueue_many",
                "shapes",
                "dynamic_pad",
                "allow_smaller_final_batch",
                "shared_name",
                "name"
            ],
            "batch_join": [
                "tensors_list",
                "batch_size",
                "capacity",
                "enqueue_many",
                "shapes",
                "dynamic_pad",
                "allow_smaller_final_batch",
                "shared_name",
                "name"
            ],
            "maybe_batch_join": [
                "tensors_list",
                "keep_input",
                "batch_size",
                "capacity",
                "enqueue_many",
                "shapes",
                "dynamic_pad",
                "allow_smaller_final_batch",
                "shared_name",
                "name"
            ],
            "shuffle_batch": [
                "tensors",
                "batch_size",
                "capacity",
                "min_after_dequeue",
                "num_threads",
                "seed",
                "enqueue_many",
                "shapes",
                "allow_smaller_final_batch",
                "shared_name",
                "name"
            ],
            "maybe_shuffle_batch": [
                "tensors",
                "batch_size",
                "capacity",
                "min_after_dequeue",
                "keep_input",
                "num_threads",
                "seed",
                "enqueue_many",
                "shapes",
                "allow_smaller_final_batch",
                "shared_name",
                "name"
            ],
            "shuffle_batch_join": [
                "tensors_list",
                "batch_size",
                "capacity",
                "min_after_dequeue",
                "seed",
                "enqueue_many",
                "shapes",
                "allow_smaller_final_batch",
                "shared_name",
                "name"
            ],
            "maybe_shuffle_batch_join": [
                "tensors_list",
                "batch_size",
                "capacity",
                "min_after_dequeue",
                "keep_input",
                "seed",
                "enqueue_many",
                "shapes",
                "allow_smaller_final_batch",
                "shared_name",
                "name"
            ],
            "_SparseMetaData": {
                "__init__": [
                    "self",
                    "sparse",
                    "map_op",
                    "rank"
                ],
                "__eq__": [
                    "self",
                    "other"
                ],
                "__ne__": [
                    "self",
                    "other"
                ],
                "__str__": [
                    "self"
                ],
                "merge_with": [
                    "self",
                    "other"
                ],
                "map_op": [
                    "self"
                ],
                "sparse": [
                    "self"
                ],
                "rank": [
                    "self"
                ]
            }
        },
        "tensorflow.python.training.adagrad_da": {
            "AdagradDAOptimizer": {
                "__init__": [
                    "self",
                    "learning_rate",
                    "global_step",
                    "initial_gradient_squared_accumulator_value",
                    "l1_regularization_strength",
                    "l2_regularization_strength",
                    "use_locking",
                    "name"
                ],
                "_create_slots": [
                    "self",
                    "var_list"
                ],
                "_prepare": [
                    "self"
                ],
                "_apply_dense": [
                    "self",
                    "grad",
                    "var"
                ],
                "_apply_sparse": [
                    "self",
                    "grad",
                    "var"
                ]
            }
        },
        "tensorflow.python.training": {},
        "tensorflow.python.training.coordinator": {
            "Coordinator": {
                "__init__": [
                    "self",
                    "clean_stop_exception_types"
                ],
                "_filter_exception": [
                    "self",
                    "ex"
                ],
                "request_stop": [
                    "self",
                    "ex"
                ],
                "clear_stop": [
                    "self"
                ],
                "should_stop": [
                    "self"
                ],
                "stop_on_exception": [
                    "self"
                ],
                "wait_for_stop": [
                    "self",
                    "timeout"
                ],
                "register_thread": [
                    "self",
                    "thread"
                ],
                "join": [
                    "self",
                    "threads",
                    "stop_grace_period_secs"
                ],
                "joined": [
                    "self"
                ],
                "raise_requested_exception": [
                    "self"
                ]
            },
            "LooperThread": {
                "__init__": [
                    "self",
                    "coord",
                    "timer_interval_secs",
                    "target",
                    "args",
                    "kwargs"
                ],
                "loop": [
                    "coord",
                    "timer_interval_secs",
                    "target",
                    "args",
                    "kwargs"
                ],
                "run": [
                    "self"
                ],
                "start_loop": [
                    "self"
                ],
                "stop_loop": [
                    "self"
                ],
                "run_loop": [
                    "self"
                ]
            }
        },
        "tensorflow.python.training.session_run_hook": {
            "SessionRunHook": {
                "begin": [
                    "self"
                ],
                "after_create_session": [
                    "self",
                    "session",
                    "coord"
                ],
                "before_run": [
                    "self",
                    "run_context"
                ],
                "after_run": [
                    "self",
                    "run_context",
                    "run_values"
                ],
                "end": [
                    "self",
                    "session"
                ]
            },
            "SessionRunArgs": {
                "__new__": [
                    "cls",
                    "fetches",
                    "feed_dict",
                    "options"
                ]
            },
            "SessionRunContext": {
                "__init__": [
                    "self",
                    "original_args",
                    "session"
                ],
                "original_args": [
                    "self"
                ],
                "session": [
                    "self"
                ],
                "stop_requested": [
                    "self"
                ],
                "request_stop": [
                    "self"
                ]
            },
            "SessionRunValues": {}
        },
        "tensorflow.python.training.moving_averages": {
            "assign_moving_average": [
                "variable",
                "value",
                "decay",
                "zero_debias",
                "name"
            ],
            "weighted_moving_average": [
                "value",
                "decay",
                "weight",
                "truediv",
                "collections",
                "name"
            ],
            "_zero_debias": [
                "unbiased_var",
                "value",
                "decay"
            ],
            "ExponentialMovingAverage": {
                "__init__": [
                    "self",
                    "decay",
                    "num_updates",
                    "zero_debias",
                    "name"
                ],
                "apply": [
                    "self",
                    "var_list"
                ],
                "average": [
                    "self",
                    "var"
                ],
                "average_name": [
                    "self",
                    "var"
                ],
                "variables_to_restore": [
                    "self",
                    "moving_avg_variables"
                ]
            }
        },
        "tensorflow.python.training.adagrad": {
            "AdagradOptimizer": {
                "__init__": [
                    "self",
                    "learning_rate",
                    "initial_accumulator_value",
                    "use_locking",
                    "name"
                ],
                "_create_slots": [
                    "self",
                    "var_list"
                ],
                "_prepare": [
                    "self"
                ],
                "_apply_dense": [
                    "self",
                    "grad",
                    "var"
                ],
                "_apply_sparse": [
                    "self",
                    "grad",
                    "var"
                ]
            }
        },
        "tensorflow.python.training.queue_runner": {},
        "tensorflow.python.training.checkpoint_state_pb2": {},
        "tensorflow.python.training.sync_replicas_optimizer": {
            "SyncReplicasOptimizer": {
                "__init__": [
                    "self",
                    "opt",
                    "replicas_to_aggregate",
                    "total_num_replicas",
                    "variable_averages",
                    "variables_to_average",
                    "use_locking",
                    "name"
                ],
                "compute_gradients": [
                    "self"
                ],
                "apply_gradients": [
                    "self",
                    "grads_and_vars",
                    "global_step",
                    "name"
                ],
                "get_chief_queue_runner": [
                    "self"
                ],
                "get_slot": [
                    "self"
                ],
                "get_slot_names": [
                    "self"
                ],
                "get_init_tokens_op": [
                    "self",
                    "num_tokens"
                ],
                "make_session_run_hook": [
                    "self",
                    "is_chief",
                    "num_tokens"
                ]
            },
            "_SyncReplicasOptimizerHook": {
                "__init__": [
                    "self",
                    "local_init_op",
                    "ready_for_local_init_op",
                    "q_runner",
                    "init_tokens_op"
                ],
                "after_create_session": [
                    "self",
                    "session",
                    "coord"
                ]
            }
        },
        "tensorflow.python.training.training_util": {
            "global_step": [
                "sess",
                "global_step_tensor"
            ],
            "get_global_step": [
                "graph"
            ],
            "assert_global_step": [
                "global_step_tensor"
            ]
        },
        "tensorflow.python.training.proximal_gradient_descent": {
            "ProximalGradientDescentOptimizer": {
                "__init__": [
                    "self",
                    "learning_rate",
                    "l1_regularization_strength",
                    "l2_regularization_strength",
                    "use_locking",
                    "name"
                ],
                "_apply_dense": [
                    "self",
                    "grad",
                    "var"
                ],
                "_apply_sparse": [
                    "self",
                    "grad",
                    "var"
                ],
                "_prepare": [
                    "self"
                ]
            }
        },
        "tensorflow.python.training.optimizer": {
            "_get_processor": [
                "v"
            ],
            "_OptimizableVariable": {
                "target": [
                    "self"
                ],
                "update_op": [
                    "self",
                    "optimizer",
                    "g"
                ]
            },
            "_RefVariableProcessor": {
                "__init__": [
                    "self",
                    "v"
                ],
                "target": [
                    "self"
                ],
                "update_op": [
                    "self",
                    "optimizer",
                    "g"
                ]
            },
            "_DenseReadResourceVariableProcessor": {
                "__init__": [
                    "self",
                    "v"
                ],
                "target": [
                    "self"
                ],
                "update_op": [
                    "self",
                    "optimizer",
                    "g"
                ]
            },
            "_DenseResourceVariableProcessor": {
                "__init__": [
                    "self",
                    "v"
                ],
                "target": [
                    "self"
                ],
                "update_op": [
                    "self",
                    "optimizer",
                    "g"
                ]
            },
            "_SparseResourceVariableProcessor": {
                "__init__": [
                    "self",
                    "v"
                ],
                "target": [
                    "self"
                ],
                "update_op": [
                    "self",
                    "optimizer",
                    "g"
                ]
            },
            "Optimizer": {
                "__init__": [
                    "self",
                    "use_locking",
                    "name"
                ],
                "get_name": [
                    "self"
                ],
                "minimize": [
                    "self",
                    "loss",
                    "global_step",
                    "var_list",
                    "gate_gradients",
                    "aggregation_method",
                    "colocate_gradients_with_ops",
                    "name",
                    "grad_loss"
                ],
                "compute_gradients": [
                    "self",
                    "loss",
                    "var_list",
                    "gate_gradients",
                    "aggregation_method",
                    "colocate_gradients_with_ops",
                    "grad_loss"
                ],
                "apply_gradients": [
                    "self",
                    "grads_and_vars",
                    "global_step",
                    "name"
                ],
                "get_slot": [
                    "self",
                    "var",
                    "name"
                ],
                "get_slot_names": [
                    "self"
                ],
                "_assert_valid_dtypes": [
                    "self",
                    "tensors"
                ],
                "_valid_dtypes": [
                    "self"
                ],
                "_create_slots": [
                    "self",
                    "var_list"
                ],
                "_prepare": [
                    "self"
                ],
                "_apply_dense": [
                    "self",
                    "grad",
                    "var"
                ],
                "_resource_apply_dense": [
                    "self",
                    "grad",
                    "handle"
                ],
                "_apply_sparse_duplicate_indices": [
                    "self",
                    "grad",
                    "var"
                ],
                "_apply_sparse": [
                    "self",
                    "grad",
                    "var"
                ],
                "_finish": [
                    "self",
                    "update_ops",
                    "name_scope"
                ],
                "_slot_dict": [
                    "self",
                    "slot_name"
                ],
                "_get_or_make_slot": [
                    "self",
                    "var",
                    "val",
                    "slot_name",
                    "op_name"
                ],
                "_zeros_slot": [
                    "self",
                    "var",
                    "slot_name",
                    "op_name"
                ]
            }
        },
        "tensorflow.python.training.slot_creator": {
            "_create_slot_var": [
                "primary",
                "val",
                "scope"
            ],
            "create_slot": [
                "primary",
                "val",
                "name",
                "colocate_with_primary"
            ],
            "create_zeros_slot": [
                "primary",
                "name",
                "dtype",
                "colocate_with_primary"
            ]
        },
        "tensorflow.python.training.momentum": {
            "MomentumOptimizer": {
                "__init__": [
                    "self",
                    "learning_rate",
                    "momentum",
                    "use_locking",
                    "name",
                    "use_nesterov"
                ],
                "_create_slots": [
                    "self",
                    "var_list"
                ],
                "_prepare": [
                    "self"
                ],
                "_apply_dense": [
                    "self",
                    "grad",
                    "var"
                ],
                "_apply_sparse": [
                    "self",
                    "grad",
                    "var"
                ]
            }
        },
        "tensorflow.python.training.training_ops": {},
        "tensorflow.python.training.basic_loops": {
            "basic_train_loop": [
                "supervisor",
                "train_step_fn",
                "args",
                "kwargs",
                "master"
            ]
        },
        "tensorflow.python.training.basic_session_run_hooks": {
            "_as_graph_element": [
                "obj"
            ],
            "SecondOrStepTimer": {
                "__init__": [
                    "self",
                    "every_secs",
                    "every_steps"
                ],
                "should_trigger_for_step": [
                    "self",
                    "step"
                ],
                "update_last_triggered_step": [
                    "self",
                    "step"
                ],
                "last_triggered_step": [
                    "self"
                ]
            },
            "LoggingTensorHook": {
                "__init__": [
                    "self",
                    "tensors",
                    "every_n_iter",
                    "every_n_secs"
                ],
                "begin": [
                    "self"
                ],
                "before_run": [
                    "self",
                    "run_context"
                ],
                "after_run": [
                    "self",
                    "run_context",
                    "run_values"
                ]
            },
            "StopAtStepHook": {
                "__init__": [
                    "self",
                    "num_steps",
                    "last_step"
                ],
                "begin": [
                    "self"
                ],
                "before_run": [
                    "self",
                    "run_context"
                ],
                "after_run": [
                    "self",
                    "run_context",
                    "run_values"
                ]
            },
            "CheckpointSaverListener": {
                "begin": [
                    "self"
                ],
                "before_save": [
                    "self",
                    "session",
                    "global_step_value"
                ],
                "after_save": [
                    "self",
                    "session",
                    "global_step_value"
                ],
                "end": [
                    "self",
                    "session",
                    "global_step_value"
                ]
            },
            "CheckpointSaverHook": {
                "__init__": [
                    "self",
                    "checkpoint_dir",
                    "save_secs",
                    "save_steps",
                    "saver",
                    "checkpoint_basename",
                    "scaffold",
                    "listeners"
                ],
                "begin": [
                    "self"
                ],
                "before_run": [
                    "self",
                    "run_context"
                ],
                "after_run": [
                    "self",
                    "run_context",
                    "run_values"
                ],
                "end": [
                    "self",
                    "session"
                ],
                "_save": [
                    "self",
                    "step",
                    "session"
                ],
                "_get_saver": [
                    "self"
                ]
            },
            "StepCounterHook": {
                "__init__": [
                    "self",
                    "every_n_steps",
                    "every_n_secs",
                    "output_dir",
                    "summary_writer"
                ],
                "begin": [
                    "self"
                ],
                "before_run": [
                    "self",
                    "run_context"
                ],
                "after_run": [
                    "self",
                    "run_context",
                    "run_values"
                ]
            },
            "NanLossDuringTrainingError": {
                "__str__": [
                    "self"
                ]
            },
            "NanTensorHook": {
                "__init__": [
                    "self",
                    "loss_tensor",
                    "fail_on_nan_loss"
                ],
                "before_run": [
                    "self",
                    "run_context"
                ],
                "after_run": [
                    "self",
                    "run_context",
                    "run_values"
                ]
            },
            "SummarySaverHook": {
                "__init__": [
                    "self",
                    "save_steps",
                    "save_secs",
                    "output_dir",
                    "summary_writer",
                    "scaffold",
                    "summary_op"
                ],
                "begin": [
                    "self"
                ],
                "before_run": [
                    "self",
                    "run_context"
                ],
                "after_run": [
                    "self",
                    "run_context",
                    "run_values"
                ],
                "end": [
                    "self",
                    "session"
                ],
                "_get_summary_op": [
                    "self"
                ]
            },
            "GlobalStepWaiterHook": {
                "__init__": [
                    "self",
                    "wait_until_step"
                ],
                "begin": [
                    "self"
                ],
                "before_run": [
                    "self",
                    "run_context"
                ]
            },
            "FinalOpsHook": {
                "__init__": [
                    "self",
                    "final_ops",
                    "final_ops_feed_dict"
                ],
                "final_ops_values": [
                    "self"
                ],
                "end": [
                    "self",
                    "session"
                ]
            }
        },
        "tensorflow.python.training.server_lib": {
            "_make_server_def": [
                "server_or_cluster_def",
                "job_name",
                "task_index",
                "protocol",
                "config"
            ],
            "Server": {
                "__init__": [
                    "self",
                    "server_or_cluster_def",
                    "job_name",
                    "task_index",
                    "protocol",
                    "config",
                    "start"
                ],
                "start": [
                    "self"
                ],
                "join": [
                    "self"
                ],
                "server_def": [
                    "self"
                ],
                "target": [
                    "self"
                ],
                "create_local_server": [
                    "config",
                    "start"
                ]
            },
            "ClusterSpec": {
                "__init__": [
                    "self",
                    "cluster"
                ],
                "__nonzero__": [
                    "self"
                ],
                "__eq__": [
                    "self",
                    "other"
                ],
                "__ne__": [
                    "self",
                    "other"
                ],
                "as_dict": [
                    "self"
                ],
                "as_cluster_def": [
                    "self"
                ],
                "jobs": [
                    "self"
                ],
                "num_tasks": [
                    "self",
                    "job_name"
                ],
                "task_indices": [
                    "self",
                    "job_name"
                ],
                "task_address": [
                    "self",
                    "job_name",
                    "task_index"
                ],
                "job_tasks": [
                    "self",
                    "job_name"
                ],
                "_make_cluster_def": [
                    "self"
                ]
            }
        },
        "tensorflow.python.training.gradient_descent": {
            "GradientDescentOptimizer": {
                "__init__": [
                    "self",
                    "learning_rate",
                    "use_locking",
                    "name"
                ],
                "_apply_dense": [
                    "self",
                    "grad",
                    "var"
                ],
                "_resource_apply_dense": [
                    "self",
                    "grad",
                    "handle"
                ],
                "_resource_apply_sparse": [
                    "self",
                    "grad",
                    "handle",
                    "indices"
                ],
                "_apply_sparse_duplicate_indices": [
                    "self",
                    "grad",
                    "var"
                ],
                "_prepare": [
                    "self"
                ]
            }
        },
        "tensorflow.python.training.tensorboard_logging": {
            "get_verbosity": [],
            "set_verbosity": [
                "verbosity"
            ],
            "_check_verbosity": [
                "verbosity"
            ],
            "set_summary_writer": [
                "summary_writer"
            ],
            "_clear_summary_writer": [],
            "log": [
                "level",
                "message"
            ],
            "debug": [
                "message"
            ],
            "info": [
                "message"
            ],
            "warn": [
                "message"
            ],
            "error": [
                "message"
            ],
            "fatal": [
                "message"
            ]
        },
        "tensorflow.python.training.adam": {
            "AdamOptimizer": {
                "__init__": [
                    "self",
                    "learning_rate",
                    "beta1",
                    "beta2",
                    "epsilon",
                    "use_locking",
                    "name"
                ],
                "_get_beta_accumulators": [
                    "self"
                ],
                "_create_slots": [
                    "self",
                    "var_list"
                ],
                "_prepare": [
                    "self"
                ],
                "_apply_dense": [
                    "self",
                    "grad",
                    "var"
                ],
                "_apply_sparse": [
                    "self",
                    "grad",
                    "var"
                ],
                "_finish": [
                    "self",
                    "update_ops",
                    "name_scope"
                ]
            }
        },
        "tensorflow.python.training.device_setter": {
            "replica_device_setter": [
                "ps_tasks",
                "ps_device",
                "worker_device",
                "merge_devices",
                "cluster",
                "ps_ops",
                "ps_strategy"
            ],
            "_RoundRobinStrategy": {
                "__init__": [
                    "self",
                    "num_tasks"
                ],
                "__call__": [
                    "self",
                    "unused_op"
                ]
            },
            "_ReplicaDeviceChooser": {
                "__init__": [
                    "self",
                    "ps_tasks",
                    "ps_device",
                    "worker_device",
                    "merge_devices",
                    "ps_ops",
                    "ps_strategy"
                ],
                "device_function": [
                    "self",
                    "op"
                ]
            }
        },
        "tensorflow.python.training.queue_runner_impl": {
            "add_queue_runner": [
                "qr",
                "collection"
            ],
            "start_queue_runners": [
                "sess",
                "coord",
                "daemon",
                "start",
                "collection"
            ],
            "QueueRunner": {
                "__init__": [
                    "self",
                    "queue",
                    "enqueue_ops",
                    "close_op",
                    "cancel_op",
                    "queue_closed_exception_types",
                    "queue_runner_def",
                    "import_scope"
                ],
                "_init_from_args": [
                    "self",
                    "queue",
                    "enqueue_ops",
                    "close_op",
                    "cancel_op",
                    "queue_closed_exception_types"
                ],
                "_init_from_proto": [
                    "self",
                    "queue_runner_def",
                    "import_scope"
                ],
                "queue": [
                    "self"
                ],
                "enqueue_ops": [
                    "self"
                ],
                "close_op": [
                    "self"
                ],
                "cancel_op": [
                    "self"
                ],
                "queue_closed_exception_types": [
                    "self"
                ],
                "exceptions_raised": [
                    "self"
                ],
                "name": [
                    "self"
                ],
                "_run": [
                    "self",
                    "sess",
                    "enqueue_op",
                    "coord"
                ],
                "_close_on_stop": [
                    "self",
                    "sess",
                    "cancel_op",
                    "coord"
                ],
                "create_threads": [
                    "self",
                    "sess",
                    "coord",
                    "daemon",
                    "start"
                ],
                "to_proto": [
                    "self",
                    "export_scope"
                ],
                "from_proto": [
                    "queue_runner_def",
                    "import_scope"
                ]
            }
        },
        "tensorflow.python.training.proximal_adagrad": {
            "ProximalAdagradOptimizer": {
                "__init__": [
                    "self",
                    "learning_rate",
                    "initial_accumulator_value",
                    "l1_regularization_strength",
                    "l2_regularization_strength",
                    "use_locking",
                    "name"
                ],
                "_create_slots": [
                    "self",
                    "var_list"
                ],
                "_prepare": [
                    "self"
                ],
                "_apply_dense": [
                    "self",
                    "grad",
                    "var"
                ],
                "_apply_sparse": [
                    "self",
                    "grad",
                    "var"
                ]
            }
        },
        "tensorflow.python.training.learning_rate_decay": {
            "exponential_decay": [
                "learning_rate",
                "global_step",
                "decay_steps",
                "decay_rate",
                "staircase",
                "name"
            ],
            "piecewise_constant": [
                "x",
                "boundaries",
                "values",
                "name"
            ],
            "polynomial_decay": [
                "learning_rate",
                "global_step",
                "decay_steps",
                "end_learning_rate",
                "power",
                "cycle",
                "name"
            ],
            "natural_exp_decay": [
                "learning_rate",
                "global_step",
                "decay_steps",
                "decay_rate",
                "staircase",
                "name"
            ],
            "inverse_time_decay": [
                "learning_rate",
                "global_step",
                "decay_steps",
                "decay_rate",
                "staircase",
                "name"
            ]
        },
        "tensorflow.python.training.supervisor": {
            "Supervisor": {
                "__init__": [
                    "self",
                    "graph",
                    "ready_op",
                    "ready_for_local_init_op",
                    "is_chief",
                    "init_op",
                    "init_feed_dict",
                    "local_init_op",
                    "logdir",
                    "summary_op",
                    "saver",
                    "global_step",
                    "save_summaries_secs",
                    "save_model_secs",
                    "recovery_wait_secs",
                    "stop_grace_secs",
                    "checkpoint_basename",
                    "session_manager",
                    "summary_writer",
                    "init_fn"
                ],
                "_init_session_manager": [
                    "self",
                    "session_manager"
                ],
                "_get_first_op_from_collection": [
                    "self",
                    "key"
                ],
                "_init_ready_op": [
                    "self",
                    "ready_op",
                    "ready_for_local_init_op"
                ],
                "_init_init_op": [
                    "self",
                    "init_op",
                    "init_feed_dict"
                ],
                "_init_local_init_op": [
                    "self",
                    "local_init_op"
                ],
                "_init_saver": [
                    "self",
                    "saver"
                ],
                "_init_summary_op": [
                    "self",
                    "summary_op"
                ],
                "_init_global_step": [
                    "self",
                    "global_step"
                ],
                "is_chief": [
                    "self"
                ],
                "session_manager": [
                    "self"
                ],
                "coord": [
                    "self"
                ],
                "init_op": [
                    "self"
                ],
                "init_feed_dict": [
                    "self"
                ],
                "ready_op": [
                    "self"
                ],
                "ready_for_local_init_op": [
                    "self"
                ],
                "summary_writer": [
                    "self"
                ],
                "summary_op": [
                    "self"
                ],
                "save_summaries_secs": [
                    "self"
                ],
                "global_step": [
                    "self"
                ],
                "saver": [
                    "self"
                ],
                "save_model_secs": [
                    "self"
                ],
                "save_path": [
                    "self"
                ],
                "_write_graph": [
                    "self"
                ],
                "start_standard_services": [
                    "self",
                    "sess"
                ],
                "prepare_or_wait_for_session": [
                    "self",
                    "master",
                    "config",
                    "wait_for_checkpoint",
                    "max_wait_secs",
                    "start_standard_services"
                ],
                "start_queue_runners": [
                    "self",
                    "sess",
                    "queue_runners"
                ],
                "loop": [
                    "self",
                    "timer_interval_secs",
                    "target",
                    "args",
                    "kwargs"
                ],
                "stop": [
                    "self",
                    "threads",
                    "close_summary_writer"
                ],
                "request_stop": [
                    "self",
                    "ex"
                ],
                "should_stop": [
                    "self"
                ],
                "stop_on_exception": [
                    "self"
                ],
                "wait_for_stop": [
                    "self"
                ],
                "summary_computed": [
                    "self",
                    "sess",
                    "summary",
                    "global_step"
                ],
                "_default_global_step_tensor": [
                    "self"
                ],
                "_verify_setup": [
                    "self"
                ],
                "managed_session": [
                    "self",
                    "master",
                    "config",
                    "start_standard_services",
                    "close_summary_writer"
                ]
            },
            "SVSummaryThread": {
                "__init__": [
                    "self",
                    "sv",
                    "sess"
                ],
                "run_loop": [
                    "self"
                ]
            },
            "SVStepCounterThread": {
                "__init__": [
                    "self",
                    "sv",
                    "sess"
                ],
                "start_loop": [
                    "self"
                ],
                "run_loop": [
                    "self"
                ]
            },
            "SVTimerCheckpointThread": {
                "__init__": [
                    "self",
                    "sv",
                    "sess"
                ],
                "run_loop": [
                    "self"
                ]
            }
        },
        "tensorflow.python.training.summary_io": {
            "SummaryWriter": {
                "__init__": [
                    "self",
                    "logdir",
                    "graph",
                    "max_queue",
                    "flush_secs",
                    "graph_def"
                ]
            }
        },
        "tensorflow.python.training.ftrl": {
            "FtrlOptimizer": {
                "__init__": [
                    "self",
                    "learning_rate",
                    "learning_rate_power",
                    "initial_accumulator_value",
                    "l1_regularization_strength",
                    "l2_regularization_strength",
                    "use_locking",
                    "name"
                ],
                "_create_slots": [
                    "self",
                    "var_list"
                ],
                "_prepare": [
                    "self"
                ],
                "_apply_dense": [
                    "self",
                    "grad",
                    "var"
                ],
                "_apply_sparse": [
                    "self",
                    "grad",
                    "var"
                ]
            }
        },
        "tensorflow.python.training.saver": {
            "_set_cpu0": [
                "device_string"
            ],
            "_GetCheckpointFilename": [
                "save_dir",
                "latest_filename"
            ],
            "generate_checkpoint_state_proto": [
                "save_dir",
                "model_checkpoint_path",
                "all_model_checkpoint_paths"
            ],
            "update_checkpoint_state": [
                "save_dir",
                "model_checkpoint_path",
                "all_model_checkpoint_paths",
                "latest_filename"
            ],
            "get_checkpoint_state": [
                "checkpoint_dir",
                "latest_filename"
            ],
            "_prefix_to_checkpoint_path": [
                "prefix",
                "format_version"
            ],
            "latest_checkpoint": [
                "checkpoint_dir",
                "latest_filename"
            ],
            "import_meta_graph": [
                "meta_graph_or_file",
                "clear_devices",
                "import_scope"
            ],
            "export_meta_graph": [
                "filename",
                "meta_info_def",
                "graph_def",
                "saver_def",
                "collection_list",
                "as_text",
                "graph",
                "export_scope",
                "clear_devices"
            ],
            "checkpoint_exists": [
                "checkpoint_prefix"
            ],
            "get_checkpoint_mtimes": [
                "checkpoint_prefixes"
            ],
            "BaseSaverBuilder": {
                "__init__": [
                    "self",
                    "write_version"
                ],
                "save_op": [
                    "self",
                    "filename_tensor",
                    "saveables"
                ],
                "restore_op": [
                    "self",
                    "filename_tensor",
                    "saveable",
                    "preferred_shard"
                ],
                "sharded_filename": [
                    "self",
                    "filename_tensor",
                    "shard",
                    "num_shards"
                ],
                "_AddSaveOps": [
                    "self",
                    "filename_tensor",
                    "saveables"
                ],
                "_AddShardedSaveOpsForV2": [
                    "self",
                    "checkpoint_prefix",
                    "per_device"
                ],
                "_AddShardedSaveOps": [
                    "self",
                    "filename_tensor",
                    "per_device"
                ],
                "_AddRestoreOps": [
                    "self",
                    "filename_tensor",
                    "saveables",
                    "restore_sequentially",
                    "reshape",
                    "preferred_shard",
                    "name"
                ],
                "_AddShardedRestoreOps": [
                    "self",
                    "filename_tensor",
                    "per_device",
                    "restore_sequentially",
                    "reshape"
                ],
                "_IsVariable": [
                    "v"
                ],
                "_GroupByDevices": [
                    "self",
                    "saveables"
                ],
                "OpListToDict": [
                    "op_list"
                ],
                "_ValidateAndSliceInputs": [
                    "self",
                    "names_to_saveables"
                ],
                "_AddSaveable": [
                    "self",
                    "saveables",
                    "seen_ops",
                    "saveable"
                ],
                "build": [
                    "self",
                    "names_to_saveables",
                    "reshape",
                    "sharded",
                    "max_to_keep",
                    "keep_checkpoint_every_n_hours",
                    "name",
                    "restore_sequentially",
                    "filename"
                ]
            },
            "Saver": {
                "__init__": [
                    "self",
                    "var_list",
                    "reshape",
                    "sharded",
                    "max_to_keep",
                    "keep_checkpoint_every_n_hours",
                    "name",
                    "restore_sequentially",
                    "saver_def",
                    "builder",
                    "defer_build",
                    "allow_empty",
                    "write_version",
                    "pad_step_number"
                ],
                "build": [
                    "self"
                ],
                "_check_saver_def": [
                    "self"
                ],
                "_CheckpointFilename": [
                    "self",
                    "p"
                ],
                "_MetaGraphFilename": [
                    "self",
                    "checkpoint_filename",
                    "meta_graph_suffix"
                ],
                "_MaybeDeleteOldCheckpoints": [
                    "self",
                    "latest_save_path",
                    "meta_graph_suffix"
                ],
                "_delete_file_if_exists": [
                    "self",
                    "filespec"
                ],
                "as_saver_def": [
                    "self"
                ],
                "to_proto": [
                    "self",
                    "export_scope"
                ],
                "from_proto": [
                    "saver_def",
                    "import_scope"
                ],
                "last_checkpoints": [
                    "self"
                ],
                "set_last_checkpoints": [
                    "self",
                    "last_checkpoints"
                ],
                "set_last_checkpoints_with_time": [
                    "self",
                    "last_checkpoints_with_time"
                ],
                "recover_last_checkpoints": [
                    "self",
                    "checkpoint_paths"
                ],
                "save": [
                    "self",
                    "sess",
                    "save_path",
                    "global_step",
                    "latest_filename",
                    "meta_graph_suffix",
                    "write_meta_graph",
                    "write_state"
                ],
                "export_meta_graph": [
                    "self",
                    "filename",
                    "collection_list",
                    "as_text",
                    "export_scope",
                    "clear_devices"
                ],
                "restore": [
                    "self",
                    "sess",
                    "save_path"
                ],
                "_add_collection_def": [
                    "meta_graph_def",
                    "key",
                    "export_scope"
                ]
            }
        },
        "tensorflow.python.training.monitored_session": {
            "MonitoredTrainingSession": [
                "master",
                "is_chief",
                "checkpoint_dir",
                "scaffold",
                "hooks",
                "chief_only_hooks",
                "save_checkpoint_secs",
                "save_summaries_steps",
                "config"
            ],
            "Scaffold": {
                "__init__": [
                    "self",
                    "init_op",
                    "init_feed_dict",
                    "init_fn",
                    "ready_op",
                    "ready_for_local_init_op",
                    "local_init_op",
                    "summary_op",
                    "saver"
                ],
                "finalize": [
                    "self"
                ],
                "init_fn": [
                    "self"
                ],
                "init_op": [
                    "self"
                ],
                "ready_op": [
                    "self"
                ],
                "ready_for_local_init_op": [
                    "self"
                ],
                "local_init_op": [
                    "self"
                ],
                "summary_op": [
                    "self"
                ],
                "saver": [
                    "self"
                ],
                "init_feed_dict": [
                    "self"
                ],
                "get_or_default": [
                    "arg_name",
                    "collection_key",
                    "default_constructor"
                ],
                "_default_local_init_op": []
            },
            "SessionCreator": {
                "create_session": [
                    "self"
                ]
            },
            "ChiefSessionCreator": {
                "__init__": [
                    "self",
                    "scaffold",
                    "master",
                    "config",
                    "checkpoint_dir",
                    "checkpoint_filename_with_path"
                ],
                "_get_session_manager": [
                    "self"
                ],
                "create_session": [
                    "self"
                ]
            },
            "WorkerSessionCreator": {
                "__init__": [
                    "self",
                    "scaffold",
                    "master",
                    "config"
                ],
                "_get_session_manager": [
                    "self"
                ],
                "create_session": [
                    "self"
                ]
            },
            "_MonitoredSession": {
                "__init__": [
                    "self",
                    "session_creator",
                    "hooks",
                    "should_recover"
                ],
                "graph": [
                    "self"
                ],
                "run": [
                    "self",
                    "fetches",
                    "feed_dict",
                    "options",
                    "run_metadata"
                ],
                "should_stop": [
                    "self"
                ],
                "close": [
                    "self"
                ],
                "__enter__": [
                    "self"
                ],
                "__exit__": [
                    "self",
                    "exception_type",
                    "exception_value",
                    "traceback"
                ],
                "_close_internal": [
                    "self",
                    "exception_type"
                ],
                "_is_closed": [
                    "self"
                ],
                "_tf_sess": [
                    "self"
                ]
            },
            "MonitoredSession": {
                "__init__": [
                    "self",
                    "session_creator",
                    "hooks"
                ]
            },
            "SingularMonitoredSession": {
                "__init__": [
                    "self",
                    "hooks",
                    "scaffold",
                    "master",
                    "config",
                    "checkpoint_dir"
                ],
                "raw_session": [
                    "self"
                ]
            },
            "_WrappedSession": {
                "__init__": [
                    "self",
                    "sess"
                ],
                "graph": [
                    "self"
                ],
                "sess_str": [
                    "self"
                ],
                "should_stop": [
                    "self"
                ],
                "_check_stop": [
                    "self"
                ],
                "close": [
                    "self"
                ],
                "run": [
                    "self"
                ]
            },
            "_RecoverableSession": {
                "__init__": [
                    "self",
                    "sess_creator"
                ],
                "_create_session": [
                    "self"
                ],
                "run": [
                    "self",
                    "fetches",
                    "feed_dict",
                    "options",
                    "run_metadata"
                ]
            },
            "_CoordinatedSession": {
                "__init__": [
                    "self",
                    "sess",
                    "coord"
                ],
                "_check_stop": [
                    "self"
                ],
                "close": [
                    "self"
                ]
            },
            "_HookedSession": {
                "__init__": [
                    "self",
                    "sess",
                    "hooks"
                ],
                "_check_stop": [
                    "self"
                ],
                "run": [
                    "self",
                    "fetches",
                    "feed_dict",
                    "options",
                    "run_metadata"
                ],
                "_call_hook_before_run": [
                    "self",
                    "run_context",
                    "fetch_dict",
                    "user_feed_dict",
                    "options"
                ],
                "_raise_if_feeds_intersects": [
                    "self",
                    "feeds1",
                    "feeds2",
                    "message"
                ],
                "_merge_run_options": [
                    "self",
                    "options",
                    "incoming_options"
                ]
            }
        },
        "tensorflow.python.training.session_manager": {
            "_ready": [
                "op",
                "sess",
                "msg"
            ],
            "SessionManager": {
                "__init__": [
                    "self",
                    "local_init_op",
                    "ready_op",
                    "ready_for_local_init_op",
                    "graph",
                    "recovery_wait_secs"
                ],
                "_restore_checkpoint": [
                    "self",
                    "master",
                    "saver",
                    "checkpoint_dir",
                    "checkpoint_filename_with_path",
                    "wait_for_checkpoint",
                    "max_wait_secs",
                    "config"
                ],
                "prepare_session": [
                    "self",
                    "master",
                    "init_op",
                    "saver",
                    "checkpoint_dir",
                    "checkpoint_filename_with_path",
                    "wait_for_checkpoint",
                    "max_wait_secs",
                    "config",
                    "init_feed_dict",
                    "init_fn"
                ],
                "recover_session": [
                    "self",
                    "master",
                    "saver",
                    "checkpoint_dir",
                    "checkpoint_filename_with_path",
                    "wait_for_checkpoint",
                    "max_wait_secs",
                    "config"
                ],
                "wait_for_session": [
                    "self",
                    "master",
                    "config",
                    "max_wait_secs"
                ],
                "_safe_close": [
                    "self",
                    "sess"
                ],
                "_model_ready": [
                    "self",
                    "sess"
                ],
                "_model_ready_for_local_init": [
                    "self",
                    "sess"
                ],
                "_try_run_local_init_op": [
                    "self",
                    "sess"
                ]
            },
            "_CountDownTimer": {
                "__init__": [
                    "self",
                    "duration_secs"
                ],
                "secs_remaining": [
                    "self"
                ]
            }
        },
        "tensorflow.python.training.training": {},
        "tensorflow.python.debug": {},
        "tensorflow.python.debug.session_debug_testlib": {
            "SessionDebugTestBase": {
                "setUpClass": [
                    "cls"
                ],
                "tearDownClass": [
                    "cls"
                ],
                "setUp": [
                    "self"
                ],
                "tearDown": [
                    "self"
                ],
                "_debug_urls": [
                    "self",
                    "run_number"
                ],
                "_debug_dump_dir": [
                    "self",
                    "run_number"
                ],
                "_generate_dump_from_simple_addition_graph": [
                    "self"
                ],
                "testConcurrentDumpingToPathsWithOverlappingParentDirsWorks": [
                    "self"
                ],
                "testGetOpTypeWorks": [
                    "self"
                ],
                "testDumpStringTensorsWorks": [
                    "self"
                ],
                "testDumpUninitializedVariable": [
                    "self"
                ],
                "testDebugWhileLoopGeneratesMultipleDumps": [
                    "self"
                ],
                "testFindNodesWithBadTensorValues": [
                    "self"
                ],
                "_session_run_for_graph_structure_lookup": [
                    "self"
                ],
                "testGraphStructureLookupGivesDevicesAndNodesInfo": [
                    "self"
                ],
                "testGraphStructureLookupGivesNodesAndAttributes": [
                    "self"
                ],
                "testGraphStructureLookupGivesDebugWatchKeys": [
                    "self"
                ],
                "testGraphStructureLookupGivesNodeInputsAndRecipients": [
                    "self"
                ],
                "testGraphStructureLookupWithoutPartitionGraphsDoesNotErrorOut": [
                    "self"
                ],
                "testCausalityCheckOnDumpsDetectsWrongTemporalOrder": [
                    "self"
                ],
                "testWatchingOnlyOneOfTwoOutputSlotsDoesNotLeadToCausalityFailure": [
                    "self"
                ],
                "testOutputSlotWithoutOutgoingEdgeCanBeWatched": [
                    "self"
                ],
                "testWatchingVariableUpdateOpsSeesUpdatedValues": [
                    "self"
                ],
                "testAllowsWatchingUnconnectedOutputTensor": [
                    "self"
                ],
                "testDebuggingDuringOpError": [
                    "self"
                ],
                "testDebugNumericSummaryOnInitializedTensorGivesCorrectResult": [
                    "self"
                ],
                "testDebugNumericSummaryOnUninitializedTensorGivesCorrectResult": [
                    "self"
                ],
                "testLookUpNodePythonTracebackWorks": [
                    "self"
                ]
            }
        },
        "tensorflow.python.debug.session_debug_file_test": {
            "SessionDebugTest": {
                "_debug_urls": [
                    "self",
                    "run_number"
                ],
                "_debug_dump_dir": [
                    "self",
                    "run_number"
                ],
                "testAllowsDifferentWatchesOnDifferentRuns": [
                    "self"
                ]
            }
        },
        "tensorflow.python.debug.debug_data": {
            "load_tensor_from_event_file": [
                "event_file_path"
            ],
            "_load_graph_def_from_event_file": [
                "event_file_path"
            ],
            "_load_log_message_from_event_file": [
                "event_file_path"
            ],
            "parse_node_or_tensor_name": [
                "name"
            ],
            "_is_graph_file": [
                "file_name"
            ],
            "_is_run_fetches_info_file": [
                "file_name"
            ],
            "_is_run_feed_keys_info_file": [
                "file_name"
            ],
            "get_node_name": [
                "element_name"
            ],
            "get_output_slot": [
                "element_name"
            ],
            "_get_tensor_name": [
                "node_name",
                "output_slot"
            ],
            "_get_tensor_watch_key": [
                "node_name",
                "output_slot",
                "debug_op"
            ],
            "_is_copy_node": [
                "node_name"
            ],
            "_is_debug_node": [
                "node_name"
            ],
            "_parse_debug_node_name": [
                "node_name"
            ],
            "has_inf_or_nan": [
                "datum",
                "tensor"
            ],
            "DebugTensorDatum": {
                "__init__": [
                    "self",
                    "dump_root",
                    "debug_dump_rel_path"
                ],
                "__str__": [
                    "self"
                ],
                "__repr__": [
                    "self"
                ],
                "get_tensor": [
                    "self"
                ],
                "timestamp": [
                    "self"
                ],
                "debug_op": [
                    "self"
                ],
                "node_name": [
                    "self"
                ],
                "output_slot": [
                    "self"
                ],
                "tensor_name": [
                    "self"
                ],
                "watch_key": [
                    "self"
                ],
                "file_path": [
                    "self"
                ],
                "dump_size_bytes": [
                    "self"
                ]
            },
            "DebugDumpDir": {
                "__init__": [
                    "self",
                    "dump_root",
                    "partition_graphs",
                    "validate"
                ],
                "_load_dumps": [
                    "self",
                    "dump_root"
                ],
                "_dump_file_name_to_datum": [
                    "self",
                    "dir_name",
                    "file_name"
                ],
                "_create_tensor_watch_maps": [
                    "self"
                ],
                "set_python_graph": [
                    "self",
                    "python_graph"
                ],
                "dumped_tensor_data": [
                    "self"
                ],
                "t0": [
                    "self"
                ],
                "size": [
                    "self"
                ],
                "_load_partition_graphs": [
                    "self",
                    "partition_graphs",
                    "validate"
                ],
                "_process_partition_graph_node": [
                    "self",
                    "node"
                ],
                "_prune_nodes_from_input_and_recipient_maps": [
                    "self",
                    "nodes_to_prune"
                ],
                "_prune_non_control_edges_of_debug_ops": [
                    "self"
                ],
                "_prune_control_edges_of_debug_ops": [
                    "self"
                ],
                "_populate_recipient_maps": [
                    "self"
                ],
                "_validate_dump_with_graphs": [
                    "self"
                ],
                "loaded_partition_graphs": [
                    "self"
                ],
                "partition_graphs": [
                    "self"
                ],
                "run_fetches_info": [
                    "self"
                ],
                "run_feed_keys_info": [
                    "self"
                ],
                "nodes": [
                    "self"
                ],
                "node_attributes": [
                    "self",
                    "node_name"
                ],
                "node_inputs": [
                    "self",
                    "node_name",
                    "is_control"
                ],
                "transitive_inputs": [
                    "self",
                    "node_name",
                    "include_control"
                ],
                "node_recipients": [
                    "self",
                    "node_name",
                    "is_control"
                ],
                "devices": [
                    "self"
                ],
                "node_exists": [
                    "self",
                    "node_name"
                ],
                "node_device": [
                    "self",
                    "node_name"
                ],
                "node_op_type": [
                    "self",
                    "node_name"
                ],
                "debug_watch_keys": [
                    "self",
                    "node_name"
                ],
                "watch_key_to_data": [
                    "self",
                    "debug_watch_key"
                ],
                "find": [
                    "self",
                    "predicate",
                    "first_n"
                ],
                "get_tensor_file_paths": [
                    "self",
                    "node_name",
                    "output_slot",
                    "debug_op"
                ],
                "get_tensors": [
                    "self",
                    "node_name",
                    "output_slot",
                    "debug_op"
                ],
                "get_rel_timestamps": [
                    "self",
                    "node_name",
                    "output_slot",
                    "debug_op"
                ],
                "get_dump_sizes_bytes": [
                    "self",
                    "node_name",
                    "output_slot",
                    "debug_op"
                ],
                "node_traceback": [
                    "self",
                    "element_name"
                ]
            }
        },
        "tensorflow.python.debug.debug_utils_test": {
            "DebugUtilsTest": {
                "setUpClass": [
                    "cls"
                ],
                "setUp": [
                    "self"
                ],
                "_verify_watches": [
                    "self",
                    "watch_opts",
                    "expected_output_slot",
                    "expected_debug_ops",
                    "expected_debug_urls"
                ],
                "testAddDebugTensorWatches_defaultDebugOp": [
                    "self"
                ],
                "testAddDebugTensorWatches_explicitDebugOp": [
                    "self"
                ],
                "testAddDebugTensorWatches_multipleDebugOps": [
                    "self"
                ],
                "testAddDebugTensorWatches_multipleURLs": [
                    "self"
                ],
                "testWatchGraph_allNodes": [
                    "self"
                ],
                "testWatchGraph_nodeNameWhitelist": [
                    "self"
                ],
                "testWatchGraph_opTypeWhitelist": [
                    "self"
                ],
                "testWatchGraph_nodeNameAndOpTypeWhitelists": [
                    "self"
                ],
                "testWatchGraph_nodeNameBlacklist": [
                    "self"
                ],
                "testWatchGraph_opTypeBlacklist": [
                    "self"
                ],
                "testWatchGraph_nodeNameAndOpTypeBlacklists": [
                    "self"
                ]
            }
        },
        "tensorflow.python.debug.stepper": {
            "_flatten_fetches": [
                "fetches"
            ],
            "NodeStepper": {
                "__init__": [
                    "self",
                    "sess",
                    "fetches",
                    "feed_dict"
                ],
                "_get_fetch_and_name_lists": [
                    "self",
                    "flattened_fetches"
                ],
                "_dfs_visit": [
                    "self",
                    "graph",
                    "elem_list"
                ],
                "sorted_nodes": [
                    "self"
                ],
                "closure_elements": [
                    "self"
                ],
                "output_slots_in_closure": [
                    "self",
                    "node_name"
                ],
                "is_feedable": [
                    "self",
                    "name"
                ],
                "override_tensor": [
                    "self",
                    "tensor_name",
                    "overriding_val"
                ],
                "remove_override": [
                    "self",
                    "tensor_name"
                ],
                "last_feed_types": [
                    "self"
                ],
                "cont": [
                    "self",
                    "target",
                    "use_tensor_handles",
                    "use_overrides",
                    "restore_variable_values"
                ],
                "_get_node_name": [
                    "self",
                    "graph_element_name"
                ],
                "_invalidate_transitively_outgoing_cache": [
                    "self",
                    "source_element"
                ],
                "finalize": [
                    "self"
                ],
                "restore_variable_values": [
                    "self"
                ],
                "handle_names": [
                    "self"
                ],
                "handle_node_names": [
                    "self"
                ],
                "dirty_variables": [
                    "self"
                ],
                "is_placeholder": [
                    "self",
                    "graph_element_name"
                ],
                "placeholders": [
                    "self"
                ],
                "get_tensor_value": [
                    "self",
                    "tensor_name"
                ],
                "override_names": [
                    "self"
                ],
                "_get_node": [
                    "self",
                    "element"
                ]
            }
        },
        "tensorflow.python.debug.stepper_test": {
            "StepperTest": {
                "setUp": [
                    "self"
                ],
                "tearDown": [
                    "self"
                ],
                "testContToFetchNotInTransitiveClosureShouldError": [
                    "self"
                ],
                "testContToNodeNameShouldReturnTensorvalue": [
                    "self"
                ],
                "testUsingNamesNotUsingIntermediateTensors": [
                    "self"
                ],
                "testUsingNodesNotUsingIntermediateTensors": [
                    "self"
                ],
                "testIsFeedableShouldGiveCorrectAnswers": [
                    "self"
                ],
                "testOverrideValue": [
                    "self"
                ],
                "testOverrideValueTwice": [
                    "self"
                ],
                "testRemoveOverrideValue": [
                    "self"
                ],
                "testOverrideAndContToSameTensor": [
                    "self"
                ],
                "testFinalizeWithPreviousOverrides": [
                    "self"
                ],
                "testRemoveNonexistentOverrideValue": [
                    "self"
                ],
                "testAttemptToOverrideInvalidTensor": [
                    "self"
                ],
                "testInvalidOverrideArgumentType": [
                    "self"
                ],
                "testTransitiveClosureWithCrossLinksShouldHaveCorrectOrder": [
                    "self"
                ],
                "testNodeStepperConstructorShouldAllowListOrTupleOrDictOfFetches": [
                    "self"
                ]
            },
            "StepperTestWithPlaceHolders": {
                "setUp": [
                    "self"
                ],
                "tearDown": [
                    "self"
                ],
                "testGetTensorValueWorksOnPlaceholder": [
                    "self"
                ],
                "testIsPlaceholdersShouldGiveCorrectAnswers": [
                    "self"
                ],
                "testPlaceholdersShouldGiveCorrectAnswers": [
                    "self"
                ],
                "testContWithPlaceholders": [
                    "self"
                ],
                "testAttemptToContToPlaceholderWithTensorFeedKeysShouldWork": [
                    "self"
                ],
                "testAttemptToContToPlaceholderWithTensorNameFeedKeysShouldWork": [
                    "self"
                ]
            },
            "StepperBackwardRunTest": {
                "setUp": [
                    "self"
                ],
                "tearDown": [
                    "self"
                ],
                "testContToUpdateA": [
                    "self"
                ],
                "testContToUpdateB": [
                    "self"
                ],
                "testContAfterUpdateWithoutRestoringVariableValue": [
                    "self"
                ],
                "testUpdateTwiceRestoreVariable": [
                    "self"
                ],
                "testSelectiveHandleUsageDependingOnTransitiveCleanliness": [
                    "self"
                ],
                "testRestoreVariableValues": [
                    "self"
                ],
                "testFinalize": [
                    "self"
                ],
                "testOverrideThenContToUpdate": [
                    "self"
                ],
                "testContToNodeWithOutputTensors": [
                    "self"
                ]
            }
        },
        "tensorflow.python.debug.debug_data_test": {
            "ParseNodeOrTensorNameTest": {
                "testParseNodeName": [
                    "self"
                ],
                "testParseTensorName": [
                    "self"
                ]
            },
            "NodeNameChecksTest": {
                "testIsCopyNode": [
                    "self"
                ],
                "testIsDebugNode": [
                    "self"
                ]
            },
            "ParseDebugNodeNameTest": {
                "testParseDebugNodeName_valid": [
                    "self"
                ],
                "testParseDebugNodeName_invalidPrefix": [
                    "self"
                ],
                "testParseDebugNodeName_missingDebugOpIndex": [
                    "self"
                ],
                "testParseDebugNodeName_invalidWatchedTensorName": [
                    "self"
                ]
            },
            "HasNanOrInfTest": {
                "setUp": [
                    "self"
                ],
                "testNaN": [
                    "self"
                ],
                "testInf": [
                    "self"
                ],
                "testNanAndInf": [
                    "self"
                ],
                "testNoNanOrInf": [
                    "self"
                ],
                "testEmpty": [
                    "self"
                ],
                "testNone": [
                    "self"
                ],
                "testDTypeComplexWorks": [
                    "self"
                ],
                "testDTypeIntegerWorks": [
                    "self"
                ],
                "testDTypeStringGivesFalse": [
                    "self"
                ],
                "testDTypeObjectGivesFalse": [
                    "self"
                ]
            },
            "DebugTensorDatumTest": {
                "testDebugDatum": [
                    "self"
                ],
                "testDumpSizeBytesIsNoneForNonexistentFilePath": [
                    "self"
                ]
            },
            "DebugDumpDirTest": {
                "setUp": [
                    "self"
                ],
                "tearDown": [
                    "self"
                ],
                "testDebugDumpDir_nonexistentDumpRoot": [
                    "self"
                ],
                "testDebugDumpDir_invalidFileNamingPattern": [
                    "self"
                ],
                "testDebugDumpDir_emptyDumpDir": [
                    "self"
                ]
            },
            "GetNodeNameAndOutputSlotTest": {
                "testParseTensorNameInputWorks": [
                    "self"
                ],
                "testParseNodeNameInputWorks": [
                    "self"
                ]
            }
        },
        "tensorflow.python.debug.debug_utils": {
            "add_debug_tensor_watch": [
                "run_options",
                "node_name",
                "output_slot",
                "debug_ops",
                "debug_urls"
            ],
            "watch_graph": [
                "run_options",
                "graph",
                "debug_ops",
                "debug_urls",
                "node_name_regex_whitelist",
                "op_type_regex_whitelist"
            ],
            "watch_graph_with_blacklists": [
                "run_options",
                "graph",
                "debug_ops",
                "debug_urls",
                "node_name_regex_blacklist",
                "op_type_regex_blacklist"
            ]
        },
        "tensorflow.python.debug.examples.debug_errors": {
            "main": [
                "_"
            ]
        },
        "tensorflow.python.debug.examples": {},
        "tensorflow.python.debug.examples.debug_fibonacci": {
            "main": [
                "_"
            ]
        },
        "tensorflow.python.debug.examples.debug_tflearn_iris": {
            "maybe_download_data": [
                "data_dir"
            ],
            "iris_input_fn": [],
            "main": [
                "_"
            ]
        },
        "tensorflow.python.debug.examples.debug_mnist": {
            "main": [
                "_"
            ]
        },
        "tensorflow.python.debug.cli.tensor_format": {
            "format_tensor": [
                "tensor",
                "tensor_label",
                "include_metadata",
                "np_printoptions",
                "highlight_options"
            ],
            "_annotate_ndarray_lines": [
                "array_lines",
                "tensor",
                "np_printoptions",
                "offset"
            ],
            "locate_tensor_element": [
                "formatted",
                "indices"
            ],
            "_validate_indices_list": [
                "indices_list",
                "formatted"
            ],
            "_locate_elements_in_line": [
                "line",
                "indices_list",
                "ref_indices"
            ],
            "HighlightOptions": {
                "__init__": [
                    "self",
                    "criterion",
                    "description",
                    "font_attr"
                ]
            }
        },
        "tensorflow.python.debug.cli.ui_factory": {
            "get_ui": [
                "ui_type",
                "on_ui_exit",
                "available_ui_types"
            ]
        },
        "tensorflow.python.debug.cli.tensor_format_test": {
            "RichTextLinesTest": {
                "setUp": [
                    "self"
                ],
                "_checkTensorMetadata": [
                    "self",
                    "tensor",
                    "annotations"
                ],
                "_checkBeginIndices": [
                    "self",
                    "expected_indices",
                    "annot"
                ],
                "_checkOmittedIndices": [
                    "self",
                    "expected_indices",
                    "annot"
                ],
                "testFormatZeroDimensionTensor": [
                    "self"
                ],
                "testFormatTensorHighlightsTensorNameWithoutDebugOp": [
                    "self"
                ],
                "testFormatTensorHighlightsTensorNameWithDebugOp": [
                    "self"
                ],
                "testFormatTensor1DNoEllipsis": [
                    "self"
                ],
                "testFormatTensor2DNoEllipsisNoRowBreak": [
                    "self"
                ],
                "testFormatTensorSuppressingTensorName": [
                    "self"
                ],
                "testFormatTensorWithMetadata": [
                    "self"
                ],
                "testFormatTensor2DNoEllipsisWithRowBreak": [
                    "self"
                ],
                "testFormatTensor3DNoEllipsis": [
                    "self"
                ],
                "testFormatTensor3DNoEllipsisWithArgwhereHighlightWithMatches": [
                    "self"
                ],
                "testFormatTensor3DNoEllipsisWithArgwhereHighlightWithNoMatches": [
                    "self"
                ],
                "testFormatTensorWithEllipses": [
                    "self"
                ],
                "testFormatNone": [
                    "self"
                ],
                "testLocateTensorElement1DNoEllipsis": [
                    "self"
                ],
                "testLocateTensorElement1DNoEllipsisBatchMode": [
                    "self"
                ],
                "testBatchModeWithErrors": [
                    "self"
                ],
                "testLocateTensorElement1DTinyAndNanValues": [
                    "self"
                ],
                "testLocateTensorElement2DNoEllipsis": [
                    "self"
                ],
                "testLocateTensorElement3DWithEllipses": [
                    "self"
                ],
                "testLocateTensorElement3DWithEllipsesBatchMode": [
                    "self"
                ],
                "testLocateTensorElementAnnotationsUnavailable": [
                    "self"
                ]
            }
        },
        "tensorflow.python.debug.cli.command_parser": {
            "parse_command": [
                "command"
            ],
            "extract_output_file_path": [
                "args"
            ],
            "parse_tensor_name_with_slicing": [
                "in_str"
            ],
            "validate_slicing_string": [
                "slicing_string"
            ],
            "parse_indices": [
                "indices_string"
            ],
            "parse_ranges": [
                "range_string"
            ],
            "parse_readable_size_str": [
                "size_str"
            ],
            "evaluate_tensor_slice": [
                "tensor",
                "tensor_slicing"
            ]
        },
        "tensorflow.python.debug.cli.base_ui": {
            "BaseUI": {
                "__init__": [
                    "self",
                    "on_ui_exit"
                ],
                "set_help_intro": [
                    "self",
                    "help_intro"
                ],
                "register_command_handler": [
                    "self",
                    "prefix",
                    "handler",
                    "help_info",
                    "prefix_aliases"
                ],
                "register_tab_comp_context": [
                    "self"
                ],
                "run_ui": [
                    "self",
                    "init_command",
                    "title",
                    "title_color",
                    "enable_mouse_on_start"
                ],
                "_parse_command": [
                    "self",
                    "command"
                ],
                "_analyze_tab_complete_input": [
                    "self",
                    "text"
                ]
            }
        },
        "tensorflow.python.debug.cli": {},
        "tensorflow.python.debug.cli.stepper_cli_test": {
            "_parse_sorted_nodes_list": [
                "lines"
            ],
            "_parsed_used_feeds": [
                "lines"
            ],
            "NodeStepperSimpleGraphTest": {
                "setUp": [
                    "self"
                ],
                "tearDown": [
                    "self"
                ],
                "_assert_nodes_topologically_sorted_with_target_e": [
                    "self",
                    "node_names"
                ],
                "_assert_nodes_topologically_sorted_with_target_f": [
                    "self",
                    "node_names"
                ],
                "testListingSortedNodesPresentsTransitveClosure": [
                    "self"
                ],
                "testListingSortedNodesLabelsPlaceholders": [
                    "self"
                ],
                "testContToNonexistentNodeShouldError": [
                    "self"
                ],
                "testContToNodeOutsideTransitiveClosureShouldError": [
                    "self"
                ],
                "testContToValidNodeShouldUpdateStatus": [
                    "self"
                ],
                "testSteppingOneStepAtATimeShouldUpdateStatus": [
                    "self"
                ],
                "testSteppingMultipleStepsUpdatesStatus": [
                    "self"
                ],
                "testContToNodeWithoutOutputTensorInClosureShowsNoHandleCached": [
                    "self"
                ],
                "testContToUpdateNodeLeadsToDirtyVariableLabel": [
                    "self"
                ],
                "testContWithRestoreVariablesOptionShouldRestoreVariableValue": [
                    "self"
                ],
                "testPrintTensorShouldWorkWithTensorName": [
                    "self"
                ],
                "testPrintTensorShouldWorkWithNodeNameWithOutputTensor": [
                    "self"
                ],
                "testPrintTensorShouldWorkSlicingString": [
                    "self"
                ],
                "testPrintTensorWithNonexistentTensorShouldError": [
                    "self"
                ],
                "testPrintTensorWithNoHandleShouldError": [
                    "self"
                ],
                "testInjectTensorValueByTensorNameShouldBeReflected": [
                    "self"
                ],
                "testInjectTensorValueByNodeNameShouldBeReflected": [
                    "self"
                ],
                "testInjectToNonexistentTensorShouldError": [
                    "self"
                ]
            }
        },
        "tensorflow.python.debug.cli.offline_analyzer": {
            "main": [
                "_"
            ]
        },
        "tensorflow.python.debug.cli.debugger_cli_common_test": {
            "CommandLineExitTest": {
                "testConstructionWithoutToken": [
                    "self"
                ],
                "testConstructionWithToken": [
                    "self"
                ]
            },
            "RichTextLinesTest": {
                "testRichTextLinesConstructorComplete": [
                    "self"
                ],
                "testRichTextLinesConstructorWithInvalidType": [
                    "self"
                ],
                "testRichTextLinesConstructorWithString": [
                    "self"
                ],
                "testRichTextLinesConstructorIncomplete": [
                    "self"
                ],
                "testModifyRichTextLinesObject": [
                    "self"
                ],
                "testMergeRichTextLines": [
                    "self"
                ],
                "testMergeRichTextLinesEmptyOther": [
                    "self"
                ],
                "testMergeRichTextLinesEmptySelf": [
                    "self"
                ],
                "testAppendALineWithAttributeSegmentsWorks": [
                    "self"
                ],
                "testPrependALineWithAttributeSegmentsWorks": [
                    "self"
                ],
                "testWriteToFileSucceeds": [
                    "self"
                ],
                "testAttemptToWriteToADirectoryFails": [
                    "self"
                ],
                "testAttemptToWriteToFileInNonexistentDirectoryFails": [
                    "self"
                ]
            },
            "CommandHandlerRegistryTest": {
                "setUp": [
                    "self"
                ],
                "_noop_handler": [
                    "self",
                    "argv",
                    "screen_info"
                ],
                "_handler_raising_exception": [
                    "self",
                    "argv",
                    "screen_info"
                ],
                "_handler_returning_wrong_type": [
                    "self",
                    "argv",
                    "screen_info"
                ],
                "_echo_screen_cols": [
                    "self",
                    "argv",
                    "screen_info"
                ],
                "_exiting_handler": [
                    "self",
                    "argv",
                    "screen_info"
                ],
                "testRegisterEmptyCommandPrefix": [
                    "self"
                ],
                "testRegisterAndInvokeHandler": [
                    "self"
                ],
                "testExitingHandler": [
                    "self"
                ],
                "testInvokeHandlerWithScreenInfo": [
                    "self"
                ],
                "testRegisterAndInvokeHandlerWithAliases": [
                    "self"
                ],
                "testHandlerWithWrongReturnType": [
                    "self"
                ],
                "testRegisterDuplicateHandlers": [
                    "self"
                ],
                "testRegisterDuplicateAliases": [
                    "self"
                ],
                "testDispatchHandlerRaisingException": [
                    "self"
                ],
                "testRegisterNonCallableHandler": [
                    "self"
                ],
                "testRegisterHandlerWithInvalidHelpInfoType": [
                    "self"
                ],
                "testGetHelpFull": [
                    "self"
                ],
                "testGetHelpSingleCommand": [
                    "self"
                ],
                "testHelpCommandWithoutIntro": [
                    "self"
                ],
                "testHelpCommandWithIntro": [
                    "self"
                ]
            },
            "RegexFindTest": {
                "setUp": [
                    "self"
                ],
                "testRegexFindWithoutExistingFontAttrSegs": [
                    "self"
                ],
                "testRegexFindWithExistingFontAttrSegs": [
                    "self"
                ],
                "testRegexFindWithNoMatches": [
                    "self"
                ],
                "testInvalidRegex": [
                    "self"
                ]
            },
            "WrapScreenOutputTest": {
                "setUp": [
                    "self"
                ],
                "testNoActualWrapping": [
                    "self"
                ],
                "testWrappingWithAttrCutoff": [
                    "self"
                ],
                "testWrappingWithMultipleAttrCutoff": [
                    "self"
                ],
                "testWrappingInvalidArguments": [
                    "self"
                ],
                "testWrappingEmptyInput": [
                    "self"
                ]
            },
            "SliceRichTextLinesTest": {
                "setUp": [
                    "self"
                ],
                "testSliceBeginning": [
                    "self"
                ],
                "testSliceEnd": [
                    "self"
                ],
                "testAttemptSliceWithNegativeIndex": [
                    "self"
                ]
            },
            "TabCompletionRegistryTest": {
                "setUp": [
                    "self"
                ],
                "testTabCompletion": [
                    "self"
                ],
                "testExtendCompletionItems": [
                    "self"
                ],
                "testExtendCompletionItemsNonexistentContext": [
                    "self"
                ],
                "testRemoveCompletionItems": [
                    "self"
                ],
                "testRemoveCompletionItemsNonexistentContext": [
                    "self"
                ],
                "testDeregisterContext": [
                    "self"
                ],
                "testDeregisterNonexistentContext": [
                    "self"
                ]
            },
            "CommandHistoryTest": {
                "setUp": [
                    "self"
                ],
                "testLookUpMostRecent": [
                    "self"
                ],
                "testLookUpPrefix": [
                    "self"
                ],
                "testAddNonStrCommand": [
                    "self"
                ]
            },
            "MenuNodeTest": {
                "testCommandTypeConstructorSucceeds": [
                    "self"
                ],
                "testDisableWorks": [
                    "self"
                ],
                "testConstructAsDisabledWorks": [
                    "self"
                ]
            },
            "MenuTest": {
                "setUp": [
                    "self"
                ],
                "testFormatAsSingleLineWithStrItemAttrsWorks": [
                    "self"
                ],
                "testFormatAsSingleLineWithListItemAttrsWorks": [
                    "self"
                ],
                "testFormatAsSingleLineWithNoneItemAttrsWorks": [
                    "self"
                ],
                "testInsertNode": [
                    "self"
                ],
                "testFormatAsSingleLineWithDisabledNode": [
                    "self"
                ]
            }
        },
        "tensorflow.python.debug.cli.cli_shared": {
            "bytes_to_readable_str": [
                "num_bytes",
                "include_b"
            ],
            "parse_ranges_highlight": [
                "ranges_string"
            ],
            "format_tensor": [
                "tensor",
                "tensor_name",
                "np_printoptions",
                "print_all",
                "tensor_slicing",
                "highlight_options"
            ],
            "error": [
                "msg"
            ],
            "_get_fetch_name": [
                "fetch"
            ],
            "_get_fetch_names": [
                "fetches"
            ],
            "_recommend_command": [
                "command",
                "description",
                "indent",
                "create_link"
            ],
            "get_tfdbg_logo": [],
            "get_run_start_intro": [
                "run_call_count",
                "fetches",
                "feed_dict",
                "tensor_filters"
            ],
            "get_run_short_description": [
                "run_call_count",
                "fetches",
                "feed_dict"
            ],
            "get_error_intro": [
                "tf_error"
            ]
        },
        "tensorflow.python.debug.cli.debugger_cli_common": {
            "regex_find": [
                "orig_screen_output",
                "regex",
                "font_attr"
            ],
            "wrap_rich_text_lines": [
                "inp",
                "cols"
            ],
            "CommandLineExit": {
                "__init__": [
                    "self",
                    "exit_token"
                ],
                "exit_token": [
                    "self"
                ]
            },
            "RichTextLines": {
                "__init__": [
                    "self",
                    "lines",
                    "font_attr_segs",
                    "annotations"
                ],
                "lines": [
                    "self"
                ],
                "font_attr_segs": [
                    "self"
                ],
                "annotations": [
                    "self"
                ],
                "num_lines": [
                    "self"
                ],
                "slice": [
                    "self",
                    "begin",
                    "end"
                ],
                "extend": [
                    "self",
                    "other"
                ],
                "_extend_before": [
                    "self",
                    "other"
                ],
                "append": [
                    "self",
                    "line",
                    "font_attr_segs"
                ],
                "prepend": [
                    "self",
                    "line",
                    "font_attr_segs"
                ],
                "write_to_file": [
                    "self",
                    "file_path"
                ]
            },
            "CommandHandlerRegistry": {
                "__init__": [
                    "self"
                ],
                "register_command_handler": [
                    "self",
                    "prefix",
                    "handler",
                    "help_info",
                    "prefix_aliases"
                ],
                "dispatch_command": [
                    "self",
                    "prefix",
                    "argv",
                    "screen_info"
                ],
                "is_registered": [
                    "self",
                    "prefix"
                ],
                "get_help": [
                    "self",
                    "cmd_prefix"
                ],
                "set_help_intro": [
                    "self",
                    "help_intro"
                ],
                "_help_handler": [
                    "self",
                    "args",
                    "screen_info"
                ],
                "_resolve_prefix": [
                    "self",
                    "token"
                ],
                "_get_help_for_command_prefix": [
                    "self",
                    "cmd_prefix"
                ]
            },
            "TabCompletionRegistry": {
                "__init__": [
                    "self"
                ],
                "register_tab_comp_context": [
                    "self",
                    "context_words",
                    "comp_items"
                ],
                "deregister_context": [
                    "self",
                    "context_words"
                ],
                "extend_comp_items": [
                    "self",
                    "context_word",
                    "new_comp_items"
                ],
                "remove_comp_items": [
                    "self",
                    "context_word",
                    "comp_items"
                ],
                "get_completions": [
                    "self",
                    "context_word",
                    "prefix"
                ],
                "_common_prefix": [
                    "self",
                    "m"
                ]
            },
            "CommandHistory": {
                "__init__": [
                    "self",
                    "limit"
                ],
                "add_command": [
                    "self",
                    "command"
                ],
                "most_recent_n": [
                    "self",
                    "n"
                ],
                "lookup_prefix": [
                    "self",
                    "prefix",
                    "n"
                ]
            },
            "MenuItem": {
                "__init__": [
                    "self",
                    "caption",
                    "content",
                    "enabled"
                ],
                "caption": [
                    "self"
                ],
                "type": [
                    "self"
                ],
                "content": [
                    "self"
                ],
                "is_enabled": [
                    "self"
                ],
                "disable": [
                    "self"
                ],
                "enable": [
                    "self"
                ]
            },
            "Menu": {
                "__init__": [
                    "self",
                    "name"
                ],
                "append": [
                    "self",
                    "item"
                ],
                "insert": [
                    "self",
                    "index",
                    "item"
                ],
                "num_items": [
                    "self"
                ],
                "captions": [
                    "self"
                ],
                "caption_to_item": [
                    "self",
                    "caption"
                ],
                "format_as_single_line": [
                    "self",
                    "prefix",
                    "divider",
                    "enabled_item_attrs",
                    "disabled_item_attrs"
                ]
            }
        },
        "tensorflow.python.debug.cli.analyzer_cli_test": {
            "parse_op_and_node": [
                "line"
            ],
            "assert_column_header_command_shortcut": [
                "tst",
                "command",
                "reverse",
                "node_name_regex",
                "op_type_regex",
                "tensor_filter_name"
            ],
            "assert_listed_tensors": [
                "tst",
                "out",
                "expected_tensor_names",
                "expected_op_types",
                "node_name_regex",
                "op_type_regex",
                "tensor_filter_name",
                "sort_by",
                "reverse"
            ],
            "assert_node_attribute_lines": [
                "tst",
                "out",
                "node_name",
                "op_type",
                "device",
                "input_op_type_node_name_pairs",
                "ctrl_input_op_type_node_name_pairs",
                "recipient_op_type_node_name_pairs",
                "ctrl_recipient_op_type_node_name_pairs",
                "attr_key_val_pairs",
                "num_dumped_tensors",
                "show_stack_trace",
                "stack_trace_available"
            ],
            "check_syntax_error_output": [
                "tst",
                "out",
                "command_prefix"
            ],
            "check_error_output": [
                "tst",
                "out",
                "command_prefix",
                "args"
            ],
            "check_main_menu": [
                "tst",
                "out",
                "list_tensors_enabled",
                "node_info_node_name",
                "print_tensor_node_name",
                "list_inputs_node_name",
                "list_outputs_node_name"
            ],
            "check_menu_item": [
                "tst",
                "out",
                "line_index",
                "expected_begin",
                "expected_end",
                "expected_command"
            ],
            "AnalyzerCLISimpleMulAddTest": {
                "setUpClass": [
                    "cls"
                ],
                "tearDownClass": [
                    "cls"
                ],
                "testListTensors": [
                    "self"
                ],
                "testListTensorsInReverseTimeOrderWorks": [
                    "self"
                ],
                "testListTensorsInDumpSizeOrderWorks": [
                    "self"
                ],
                "testListTensorsInReverseDumpSizeOrderWorks": [
                    "self"
                ],
                "testListTensorsWithInvalidSortByFieldGivesError": [
                    "self"
                ],
                "testListTensorsInOpTypeOrderWorks": [
                    "self"
                ],
                "testListTensorsInReverseOpTypeOrderWorks": [
                    "self"
                ],
                "testListTensorsInTensorNameOrderWorks": [
                    "self"
                ],
                "testListTensorsInReverseTensorNameOrderWorks": [
                    "self"
                ],
                "testListTensorsFilterByNodeNameRegex": [
                    "self"
                ],
                "testListTensorFilterByOpTypeRegex": [
                    "self"
                ],
                "testListTensorFilterByNodeNameRegexAndOpTypeRegex": [
                    "self"
                ],
                "testListTensorsFilterNanOrInf": [
                    "self"
                ],
                "testListTensorNonexistentFilter": [
                    "self"
                ],
                "testListTensorsInvalidOptions": [
                    "self"
                ],
                "testNodeInfoByNodeName": [
                    "self"
                ],
                "testNodeInfoShowAttributes": [
                    "self"
                ],
                "testNodeInfoShowDumps": [
                    "self"
                ],
                "testNodeInfoShowStackTraceUnavailableIsIndicated": [
                    "self"
                ],
                "testNodeInfoShowStackTraceAvailableWorks": [
                    "self"
                ],
                "testNodeInfoByTensorName": [
                    "self"
                ],
                "testNodeInfoNonexistentNodeName": [
                    "self"
                ],
                "testPrintTensor": [
                    "self"
                ],
                "testPrintTensorHighlightingRanges": [
                    "self"
                ],
                "testPrintTensorWithSlicing": [
                    "self"
                ],
                "testPrintTensorInvalidSlicingString": [
                    "self"
                ],
                "testPrintTensorValidExplicitNumber": [
                    "self"
                ],
                "testPrintTensorInvalidExplicitNumber": [
                    "self"
                ],
                "testPrintTensorMissingOutputSlotLeadsToOnlyDumpedTensorPrinted": [
                    "self"
                ],
                "testPrintTensorNonexistentNodeName": [
                    "self"
                ],
                "testAddGetTensorFilterLambda": [
                    "self"
                ],
                "testAddGetTensorFilterNestedFunction": [
                    "self"
                ],
                "testAddTensorFilterEmptyName": [
                    "self"
                ],
                "testAddTensorFilterNonStrName": [
                    "self"
                ],
                "testAddGetTensorFilterNonCallable": [
                    "self"
                ],
                "testGetNonexistentTensorFilter": [
                    "self"
                ]
            },
            "AnalyzerCLIPrintLargeTensorTest": {
                "setUpClass": [
                    "cls"
                ],
                "tearDownClass": [
                    "cls"
                ],
                "testPrintLargeTensorWithoutAllOption": [
                    "self"
                ],
                "testPrintLargeTensorWithAllOption": [
                    "self"
                ]
            },
            "AnalyzerCLIControlDepTest": {
                "setUpClass": [
                    "cls"
                ],
                "tearDownClass": [
                    "cls"
                ],
                "testNodeInfoWithControlDependencies": [
                    "self"
                ],
                "testListInputsNonRecursiveNoControl": [
                    "self"
                ],
                "testListInputsNonRecursiveNoControlUsingTensorName": [
                    "self"
                ],
                "testListInputsNonRecursiveWithControls": [
                    "self"
                ],
                "testListInputsRecursiveWithControls": [
                    "self"
                ],
                "testListInputsRecursiveWithControlsWithDepthLimit": [
                    "self"
                ],
                "testListInputsNodeWithoutInputs": [
                    "self"
                ],
                "testListInputsNonexistentNode": [
                    "self"
                ],
                "testListRecipientsRecursiveWithControlsWithDepthLimit": [
                    "self"
                ]
            },
            "AnalyzerCLIWhileLoopTest": {
                "setUpClass": [
                    "cls"
                ],
                "tearDownClass": [
                    "cls"
                ],
                "testMultipleDumpsPrintTensorNoNumber": [
                    "self"
                ],
                "testMultipleDumpsPrintTensorWithNumber": [
                    "self"
                ],
                "testMultipleDumpsPrintTensorInvalidNumber": [
                    "self"
                ]
            }
        },
        "tensorflow.python.debug.cli.readline_ui": {
            "ReadlineUI": {
                "__init__": [
                    "self",
                    "on_ui_exit"
                ],
                "_init_input": [
                    "self"
                ],
                "_readline_complete": [
                    "self",
                    "text",
                    "state"
                ],
                "run_ui": [
                    "self",
                    "init_command",
                    "title",
                    "title_color",
                    "enable_mouse_on_start"
                ],
                "_ui_loop": [
                    "self"
                ],
                "_get_user_command": [
                    "self"
                ],
                "_dispatch_command": [
                    "self",
                    "command"
                ],
                "_display_output": [
                    "self",
                    "screen_output"
                ]
            }
        },
        "tensorflow.python.debug.cli.cli_shared_test": {
            "BytesToReadableStrTest": {
                "testNoneSizeWorks": [
                    "self"
                ],
                "testSizesBelowOneKiloByteWorks": [
                    "self"
                ],
                "testSizesBetweenOneKiloByteandOneMegaByteWorks": [
                    "self"
                ],
                "testSizesBetweenOneMegaByteandOneGigaByteWorks": [
                    "self"
                ],
                "testSizeAboveOneGigaByteWorks": [
                    "self"
                ],
                "testReadableStrIncludesBAtTheEndOnRequest": [
                    "self"
                ]
            },
            "GetRunStartIntroAndDescriptionTest": {
                "setUp": [
                    "self"
                ],
                "tearDown": [
                    "self"
                ],
                "testSingleFetchNoFeeds": [
                    "self"
                ],
                "testSparseTensorAsFetchShouldHandleNoNameAttribute": [
                    "self"
                ],
                "testTwoFetchesListNoFeeds": [
                    "self"
                ],
                "testNestedListAsFetches": [
                    "self"
                ],
                "testNestedDictAsFetches": [
                    "self"
                ],
                "testTwoFetchesAsTupleNoFeeds": [
                    "self"
                ],
                "testTwoFetchesAsNamedTupleNoFeeds": [
                    "self"
                ],
                "testWithFeedDict": [
                    "self"
                ],
                "testTensorFilters": [
                    "self"
                ],
                "testGetRunShortDescriptionWorksForTensorFeedKey": [
                    "self"
                ],
                "testGetRunShortDescriptionWorksForUnicodeFeedKey": [
                    "self"
                ]
            },
            "GetErrorIntroTest": {
                "setUp": [
                    "self"
                ],
                "tearDown": [
                    "self"
                ],
                "testShapeError": [
                    "self"
                ]
            }
        },
        "tensorflow.python.debug.cli.command_parser_test": {
            "ParseCommandTest": {
                "testParseNoBracketsOrQuotes": [
                    "self"
                ],
                "testParseLeadingTrailingWhitespaces": [
                    "self"
                ],
                "testParseCommandsWithBrackets": [
                    "self"
                ],
                "testParseCommandWithTwoArgsContainingBrackets": [
                    "self"
                ],
                "testParseCommandWithUnmatchedBracket": [
                    "self"
                ],
                "testParseCommandsWithQuotes": [
                    "self"
                ],
                "testParseCommandWithTwoArgsContainingQuotes": [
                    "self"
                ]
            },
            "ExtractOutputFilePathTest": {
                "testNoOutputFilePathIsReflected": [
                    "self"
                ],
                "testHasOutputFilePathInOneArgsIsReflected": [
                    "self"
                ],
                "testHasOutputFilePathInTwoArgsIsReflected": [
                    "self"
                ],
                "testHasGreaterThanSignButNoFileNameCausesSyntaxError": [
                    "self"
                ],
                "testOutputPathMergedWithLastArgIsHandledCorrectly": [
                    "self"
                ],
                "testOutputPathInLastArgGreaterThanInSecondLastIsHandledCorrectly": [
                    "self"
                ],
                "testOneArgumentIsHandledCorrectly": [
                    "self"
                ],
                "testEmptyArgumentIsHandledCorrectly": [
                    "self"
                ]
            },
            "ParseTensorNameTest": {
                "testParseTensorNameWithoutSlicing": [
                    "self"
                ],
                "testParseTensorNameWithSlicing": [
                    "self"
                ]
            },
            "ValidateSlicingStringTest": {
                "testValidateValidSlicingStrings": [
                    "self"
                ],
                "testValidateInvalidSlicingStrings": [
                    "self"
                ]
            },
            "ParseIndicesTest": {
                "testParseValidIndicesStringsWithBrackets": [
                    "self"
                ],
                "testParseValidIndicesStringsWithoutBrackets": [
                    "self"
                ],
                "testParseInvalidIndicesStringsWithoutBrackets": [
                    "self"
                ]
            },
            "ParseRangesTest": {
                "testParseEmptyRangeString": [
                    "self"
                ],
                "testParseSingleRange": [
                    "self"
                ],
                "testParseSingleListOfRanges": [
                    "self"
                ],
                "testParseInvalidRangeString": [
                    "self"
                ]
            },
            "ParseReadableSizeStrTest": {
                "testParseNoUnitWorks": [
                    "self"
                ],
                "testParseKiloBytesWorks": [
                    "self"
                ],
                "testParseMegaBytesWorks": [
                    "self"
                ],
                "testParseGigaBytesWorks": [
                    "self"
                ],
                "testParseUnsupportedUnitRaisesException": [
                    "self"
                ]
            }
        },
        "tensorflow.python.debug.cli.curses_ui_test": {
            "string_to_codes": [
                "cmd"
            ],
            "codes_to_string": [
                "cmd_code"
            ],
            "MockCursesUI": {
                "__init__": [
                    "self",
                    "height",
                    "width",
                    "command_sequence"
                ],
                "_screen_init": [
                    "self"
                ],
                "_screen_refresh_size": [
                    "self"
                ],
                "_screen_launch": [
                    "self",
                    "enable_mouse_on_start"
                ],
                "_screen_terminate": [
                    "self"
                ],
                "_screen_refresh": [
                    "self"
                ],
                "_screen_create_command_window": [
                    "self"
                ],
                "_screen_create_command_textbox": [
                    "self",
                    "existing_command"
                ],
                "_screen_new_output_pad": [
                    "self",
                    "rows",
                    "cols"
                ],
                "_screen_add_line_to_output_pad": [
                    "self",
                    "pad",
                    "row",
                    "txt",
                    "color_segments"
                ],
                "_screen_draw_text_line": [
                    "self",
                    "row",
                    "line",
                    "attr",
                    "color"
                ],
                "_screen_scroll_output_pad": [
                    "self",
                    "pad",
                    "viewport_top",
                    "viewport_left",
                    "screen_location_top",
                    "screen_location_left",
                    "screen_location_bottom",
                    "screen_location_right"
                ],
                "_screen_get_user_command": [
                    "self"
                ],
                "_screen_getmouse": [
                    "self"
                ],
                "_screen_gather_textbox_str": [
                    "self"
                ],
                "_scroll_output": [
                    "self",
                    "direction",
                    "line_index"
                ],
                "_display_main_menu": [
                    "self",
                    "output"
                ],
                "_screen_render_menu_pad": [
                    "self"
                ],
                "_display_candidates": [
                    "self",
                    "candidates"
                ],
                "_toast": [
                    "self",
                    "message",
                    "color",
                    "line_index"
                ]
            },
            "CursesTest": {
                "_babble": [
                    "self",
                    "args",
                    "screen_info"
                ],
                "_print_ones": [
                    "self",
                    "args",
                    "screen_info"
                ],
                "testInitialization": [
                    "self"
                ],
                "testRunUIExitImmediately": [
                    "self"
                ],
                "testRunUIEmptyCommand": [
                    "self"
                ],
                "testRunUIInvalidCommandPrefix": [
                    "self"
                ],
                "testRunUIInvalidCommandSyntax": [
                    "self"
                ],
                "testRunUIScrollTallOutputPageDownUp": [
                    "self"
                ],
                "testCutOffTooManyOutputLines": [
                    "self"
                ],
                "testRunUIScrollTallOutputEndHome": [
                    "self"
                ],
                "testRunUIWithInitCmd": [
                    "self"
                ],
                "testCompileHelpWithoutHelpIntro": [
                    "self"
                ],
                "testCompileHelpWithHelpIntro": [
                    "self"
                ],
                "testCommandHistoryNavBackwardOnce": [
                    "self"
                ],
                "testCommandHistoryNavBackwardTwice": [
                    "self"
                ],
                "testCommandHistoryNavBackwardOverLimit": [
                    "self"
                ],
                "testCommandHistoryNavBackwardThenForward": [
                    "self"
                ],
                "testCommandHistoryPrefixNavBackwardOnce": [
                    "self"
                ],
                "testTerminalResize": [
                    "self"
                ],
                "testTabCompletionWithCommonPrefix": [
                    "self"
                ],
                "testTabCompletionEmptyTriggerWithoutCommonPrefix": [
                    "self"
                ],
                "testTabCompletionNonemptyTriggerSingleCandidate": [
                    "self"
                ],
                "testTabCompletionNoMatch": [
                    "self"
                ],
                "testTabCompletionOneWordContext": [
                    "self"
                ],
                "testTabCompletionTwice": [
                    "self"
                ],
                "testRegexSearch": [
                    "self"
                ],
                "testRegexSearchContinuation": [
                    "self"
                ],
                "testRegexSearchUnderLineWrapping": [
                    "self"
                ],
                "testRegexSearchNoMatchContinuation": [
                    "self"
                ],
                "testRegexSearchContinuationWithoutSearch": [
                    "self"
                ],
                "testRegexSearchWithInvalidRegex": [
                    "self"
                ],
                "testRegexSearchFromCommandHistory": [
                    "self"
                ],
                "testDisplayTensorWithIndices": [
                    "self"
                ],
                "testScrollTensorByValidIndices": [
                    "self"
                ],
                "testScrollTensorByInvalidIndices": [
                    "self"
                ],
                "testWriteScreenOutputToFileWorks": [
                    "self"
                ],
                "testIncompleteRedirectErrors": [
                    "self"
                ],
                "testAppendingRedirectErrors": [
                    "self"
                ],
                "testMouseOffTakesEffect": [
                    "self"
                ],
                "testMouseOffAndOnTakeEffect": [
                    "self"
                ],
                "testMouseClickOnLinkTriggersCommand": [
                    "self"
                ],
                "testMouseClickOffLinkDoesNotTriggersCommand": [
                    "self"
                ],
                "testMouseClickOnEnabledMenuItemWorks": [
                    "self"
                ],
                "testMouseClickOnDisabledMenuItemTriggersNoCommand": [
                    "self"
                ]
            }
        },
        "tensorflow.python.debug.cli.readline_ui_test": {
            "MockReadlineUI": {
                "__init__": [
                    "self",
                    "on_ui_exit",
                    "command_sequence"
                ],
                "_get_user_command": [
                    "self"
                ],
                "_display_output": [
                    "self",
                    "screen_output"
                ]
            },
            "CursesTest": {
                "_babble": [
                    "self",
                    "args",
                    "screen_info"
                ],
                "testUIFactoryCreatesReadlineUI": [
                    "self"
                ],
                "testUIFactoryRaisesExceptionOnInvalidUIType": [
                    "self"
                ],
                "testUIFactoryRaisesExceptionOnInvalidUITypeGivenAvailable": [
                    "self"
                ],
                "testRunUIExitImmediately": [
                    "self"
                ],
                "testRunUIEmptyCommand": [
                    "self"
                ],
                "testRunUIWithInitCmd": [
                    "self"
                ],
                "testRunUIWithValidUsersCommands": [
                    "self"
                ],
                "testRunUIWithInvalidUsersCommands": [
                    "self"
                ],
                "testRunUIWithOnUIExitCallback": [
                    "self"
                ],
                "testIncompleteRedirectWorks": [
                    "self"
                ]
            }
        },
        "tensorflow.python.debug.cli.analyzer_cli": {
            "_add_main_menu": [
                "output",
                "node_name",
                "enable_list_tensors",
                "enable_node_info",
                "enable_print_tensor",
                "enable_list_inputs",
                "enable_list_outputs"
            ],
            "create_analyzer_ui": [
                "debug_dump",
                "tensor_filters",
                "ui_type"
            ],
            "DebugAnalyzer": {
                "__init__": [
                    "self",
                    "debug_dump"
                ],
                "add_tensor_filter": [
                    "self",
                    "filter_name",
                    "filter_callable"
                ],
                "get_tensor_filter": [
                    "self",
                    "filter_name"
                ],
                "get_help": [
                    "self",
                    "handler_name"
                ],
                "list_tensors": [
                    "self",
                    "args",
                    "screen_info"
                ],
                "_measure_tensor_list_column_widths": [
                    "self",
                    "data"
                ],
                "_sort_dump_data_by": [
                    "self",
                    "data",
                    "sort_by",
                    "reverse"
                ],
                "_tensor_list_column_heads": [
                    "self",
                    "parsed",
                    "max_timestamp_width",
                    "max_dump_size_width",
                    "max_op_type_width"
                ],
                "node_info": [
                    "self",
                    "args",
                    "screen_info"
                ],
                "_render_node_traceback": [
                    "self",
                    "node_name"
                ],
                "list_inputs": [
                    "self",
                    "args",
                    "screen_info"
                ],
                "print_tensor": [
                    "self",
                    "args",
                    "screen_info"
                ],
                "list_outputs": [
                    "self",
                    "args",
                    "screen_info"
                ],
                "_list_inputs_or_outputs": [
                    "self",
                    "recursive",
                    "node_name",
                    "depth",
                    "control",
                    "op_type",
                    "do_outputs"
                ],
                "_dfs_from_node": [
                    "self",
                    "lines",
                    "attr_segs",
                    "node_name",
                    "tracker",
                    "max_depth",
                    "depth",
                    "unfinished",
                    "include_control",
                    "show_op_type",
                    "command_template"
                ],
                "_format_neighbors": [
                    "self",
                    "neighbor_type",
                    "non_ctrls",
                    "ctrls"
                ],
                "_list_node_attributes": [
                    "self",
                    "node_name"
                ],
                "_list_node_dumps": [
                    "self",
                    "node_name"
                ]
            }
        },
        "tensorflow.python.debug.cli.curses_ui": {
            "_get_command_from_line_attr_segs": [
                "mouse_x",
                "attr_segs"
            ],
            "CursesUI": {
                "__init__": [
                    "self",
                    "on_ui_exit"
                ],
                "_init_layout": [
                    "self"
                ],
                "_screen_init": [
                    "self"
                ],
                "_screen_launch": [
                    "self",
                    "enable_mouse_on_start"
                ],
                "_screen_create_command_window": [
                    "self"
                ],
                "_screen_refresh": [
                    "self"
                ],
                "_screen_terminate": [
                    "self"
                ],
                "run_ui": [
                    "self",
                    "init_command",
                    "title",
                    "title_color",
                    "enable_mouse_on_start"
                ],
                "get_help": [
                    "self"
                ],
                "_screen_create_command_textbox": [
                    "self",
                    "existing_command"
                ],
                "_ui_loop": [
                    "self"
                ],
                "_get_user_command": [
                    "self"
                ],
                "_screen_get_user_command": [
                    "self"
                ],
                "_strip_terminator": [
                    "self",
                    "command"
                ],
                "_screen_refresh_size": [
                    "self"
                ],
                "_dispatch_command": [
                    "self",
                    "command"
                ],
                "_screen_gather_textbox_str": [
                    "self"
                ],
                "_on_textbox_keypress": [
                    "self",
                    "x"
                ],
                "_screen_getmouse": [
                    "self"
                ],
                "_redraw_output": [
                    "self"
                ],
                "_fetch_hyperlink_command": [
                    "self",
                    "mouse_x",
                    "mouse_y"
                ],
                "_title": [
                    "self",
                    "title",
                    "title_color"
                ],
                "_auto_key_in": [
                    "self",
                    "command"
                ],
                "_screen_draw_text_line": [
                    "self",
                    "row",
                    "line",
                    "attr",
                    "color"
                ],
                "_screen_new_output_pad": [
                    "self",
                    "rows",
                    "cols"
                ],
                "_screen_display_output": [
                    "self",
                    "output"
                ],
                "_display_output": [
                    "self",
                    "output",
                    "is_refresh",
                    "highlight_regex"
                ],
                "_display_lines": [
                    "self",
                    "output",
                    "min_num_rows"
                ],
                "_display_main_menu": [
                    "self",
                    "output"
                ],
                "_screen_add_line_to_output_pad": [
                    "self",
                    "pad",
                    "row",
                    "txt",
                    "color_segments"
                ],
                "_screen_scroll_output_pad": [
                    "self",
                    "pad",
                    "viewport_top",
                    "viewport_left",
                    "screen_location_top",
                    "screen_location_left",
                    "screen_location_bottom",
                    "screen_location_right"
                ],
                "_scroll_output": [
                    "self",
                    "direction",
                    "line_index"
                ],
                "_screen_render_menu_pad": [
                    "self"
                ],
                "_compile_ui_status_summary": [
                    "self"
                ],
                "_format_indices": [
                    "self",
                    "indices"
                ],
                "_show_array_indices": [
                    "self"
                ],
                "_show_array_index_at_line": [
                    "self",
                    "line_index"
                ],
                "_tab_complete": [
                    "self",
                    "command_str"
                ],
                "_display_candidates": [
                    "self",
                    "candidates"
                ],
                "_toast": [
                    "self",
                    "message",
                    "color",
                    "line_index"
                ],
                "_error_toast": [
                    "self",
                    "message"
                ],
                "_info_toast": [
                    "self",
                    "message"
                ],
                "_interrupt_handler": [
                    "self",
                    "signal_num",
                    "frame"
                ],
                "_mouse_mode_command_handler": [
                    "self",
                    "args",
                    "screen_info"
                ],
                "_set_mouse_enabled": [
                    "self",
                    "enabled"
                ],
                "_screen_set_mousemask": [
                    "self"
                ]
            }
        },
        "tensorflow.python.debug.cli.stepper_cli": {
            "NodeStepperCLI": {
                "__init__": [
                    "self",
                    "node_stepper"
                ],
                "_initialize_state": [
                    "self"
                ],
                "_calculate_next": [
                    "self"
                ],
                "list_sorted_nodes": [
                    "self",
                    "args",
                    "screen_info"
                ],
                "_get_status_labels": [
                    "self",
                    "element_name",
                    "handle_node_names",
                    "override_names",
                    "dirty_variable_names",
                    "offset"
                ],
                "_node_status_label_legend": [
                    "self"
                ],
                "cont": [
                    "self",
                    "args",
                    "screen_info"
                ],
                "step": [
                    "self",
                    "args",
                    "screen_info"
                ],
                "print_tensor": [
                    "self",
                    "args",
                    "screen_info"
                ],
                "inject_value": [
                    "self",
                    "args",
                    "screen_info"
                ],
                "_resolve_tensor_names": [
                    "self",
                    "element_name"
                ]
            }
        },
        "tensorflow.python.debug.wrappers.framework": {
            "_check_type": [
                "obj",
                "expected_type"
            ],
            "OnSessionInitRequest": {
                "__init__": [
                    "self",
                    "sess"
                ]
            },
            "OnSessionInitAction": {},
            "OnSessionInitResponse": {
                "__init__": [
                    "self",
                    "action"
                ]
            },
            "OnRunStartRequest": {
                "__init__": [
                    "self",
                    "fetches",
                    "feed_dict",
                    "run_options",
                    "run_metadata",
                    "run_call_count"
                ]
            },
            "OnRunStartAction": {},
            "OnRunStartResponse": {
                "__init__": [
                    "self",
                    "action",
                    "debug_urls",
                    "debug_ops",
                    "node_name_regex_whitelist",
                    "op_type_regex_whitelist"
                ]
            },
            "OnRunEndRequest": {
                "__init__": [
                    "self",
                    "performed_action",
                    "run_metadata",
                    "client_graph_def",
                    "tf_error"
                ]
            },
            "OnRunEndResponse": {
                "__init__": [
                    "self"
                ]
            },
            "BaseDebugWrapperSession": {
                "__init__": [
                    "self",
                    "sess"
                ],
                "graph": [
                    "self"
                ],
                "sess_str": [
                    "self"
                ],
                "session": [
                    "self"
                ],
                "run": [
                    "self",
                    "fetches",
                    "feed_dict",
                    "options",
                    "run_metadata"
                ],
                "partial_run_setup": [
                    "self",
                    "fetches",
                    "feeds"
                ],
                "partial_run": [
                    "self",
                    "handle",
                    "fetches",
                    "feed_dict"
                ],
                "_decorate_run_options": [
                    "self",
                    "run_options",
                    "debug_urls",
                    "debug_ops",
                    "node_name_regex_whitelist",
                    "op_type_regex_whitelist"
                ],
                "on_session_init": [
                    "self",
                    "request"
                ],
                "on_run_start": [
                    "self",
                    "request"
                ],
                "on_run_end": [
                    "self",
                    "request"
                ],
                "__enter__": [
                    "self"
                ],
                "__exit__": [
                    "self",
                    "exec_type",
                    "exec_value",
                    "exec_tb"
                ],
                "close": [
                    "self"
                ],
                "invoke_node_stepper": [
                    "self",
                    "node_stepper",
                    "restore_variable_values_on_exit"
                ]
            },
            "NonInteractiveDebugWrapperSession": {
                "__init__": [
                    "self",
                    "sess",
                    "watch_fn"
                ],
                "on_session_init": [
                    "self",
                    "request"
                ],
                "_prepare_run_debug_urls": [
                    "self",
                    "fetches",
                    "feed_dict"
                ],
                "on_run_start": [
                    "self",
                    "request"
                ],
                "_prepare_run_watch_config": [
                    "self",
                    "fetches",
                    "feed_dict"
                ],
                "on_run_end": [
                    "self",
                    "request"
                ],
                "invoke_node_stepper": [
                    "self",
                    "node_stepper",
                    "restore_variable_values_on_exit"
                ]
            }
        },
        "tensorflow.python.debug.wrappers": {},
        "tensorflow.python.debug.wrappers.dumping_wrapper_test": {
            "DumpingDebugWrapperSessionTest": {
                "setUp": [
                    "self"
                ],
                "tearDown": [
                    "self"
                ],
                "_assert_correct_run_subdir_naming": [
                    "self",
                    "run_subdir"
                ],
                "testConstructWrapperWithExistingNonEmptyRootDirRaisesException": [
                    "self"
                ],
                "testConstructWrapperWithExistingFileDumpRootRaisesException": [
                    "self"
                ],
                "testDumpingOnASingleRunWorks": [
                    "self"
                ],
                "testDumpingOnASingleRunWithFeedDictWorks": [
                    "self"
                ],
                "testDumpingOnMultipleRunsWorks": [
                    "self"
                ],
                "testUsingNonCallableAsWatchFnRaisesTypeError": [
                    "self"
                ],
                "testDumpingWithWatchFnOnFetchesWorks": [
                    "self"
                ],
                "testDumpingWithWatchFnWithNonDefaultDebugOpsWorks": [
                    "self"
                ],
                "testDumpingDebugHookWithoutWatchFnWorks": [
                    "self"
                ],
                "testDumpingDebugHookWithStatefulWatchFnWorks": [
                    "self"
                ],
                "testCallingInvokeNodeStepperOnDumpingWrapperRaisesException": [
                    "self"
                ]
            }
        },
        "tensorflow.python.debug.wrappers.framework_test": {
            "TestDebugWrapperSession": {
                "__init__": [
                    "self",
                    "sess",
                    "dump_root",
                    "observer"
                ],
                "on_session_init": [
                    "self",
                    "request"
                ],
                "on_run_start": [
                    "self",
                    "request"
                ],
                "on_run_end": [
                    "self",
                    "request"
                ]
            },
            "TestDebugWrapperSessionBadAction": {
                "__init__": [
                    "self",
                    "sess",
                    "bad_init_action",
                    "bad_run_start_action",
                    "bad_debug_urls"
                ],
                "on_session_init": [
                    "self",
                    "request"
                ],
                "on_run_start": [
                    "self",
                    "request"
                ],
                "on_run_end": [
                    "self",
                    "request"
                ]
            },
            "DebugWrapperSessionTest": {
                "setUp": [
                    "self"
                ],
                "tearDown": [
                    "self"
                ],
                "testSessionInit": [
                    "self"
                ],
                "testInteractiveSessionInit": [
                    "self"
                ],
                "testSessionRun": [
                    "self"
                ],
                "testSessionInitInvalidSessionType": [
                    "self"
                ],
                "testSessionInitBadActionValue": [
                    "self"
                ],
                "testRunStartBadActionValue": [
                    "self"
                ],
                "testRunStartBadURLs": [
                    "self"
                ],
                "testErrorDuringRun": [
                    "self"
                ],
                "testUsingWrappedSessionShouldWorkAsContextManager": [
                    "self"
                ],
                "testWrapperShouldSupportSessionClose": [
                    "self"
                ],
                "testUsingNonDirectSessionRaisesNotImplementedError": [
                    "self"
                ]
            }
        },
        "tensorflow.python.debug.wrappers.dumping_wrapper": {
            "DumpingDebugWrapperSession": {
                "__init__": [
                    "self",
                    "sess",
                    "session_root",
                    "watch_fn",
                    "log_usage"
                ],
                "_prepare_run_debug_urls": [
                    "self",
                    "fetches",
                    "feed_dict"
                ]
            }
        },
        "tensorflow.python.debug.wrappers.local_cli_wrapper_test": {
            "LocalCLIDebuggerWrapperSessionForTest": {
                "__init__": [
                    "self",
                    "command_args_sequence",
                    "sess",
                    "dump_root"
                ],
                "_prep_cli_for_run_start": [
                    "self"
                ],
                "_prep_cli_for_run_end": [
                    "self",
                    "debug_dump",
                    "tf_error",
                    "passed_filter"
                ],
                "_launch_cli": [
                    "self",
                    "is_run_start"
                ]
            },
            "LocalCLIDebugWrapperSessionTest": {
                "setUp": [
                    "self"
                ],
                "tearDown": [
                    "self"
                ],
                "testConstructWrapper": [
                    "self"
                ],
                "testConstructWrapperWithExistingEmptyDumpRoot": [
                    "self"
                ],
                "testConstructWrapperWithExistingNonEmptyDumpRoot": [
                    "self"
                ],
                "testConstructWrapperWithExistingFileDumpRoot": [
                    "self"
                ],
                "testRunsUnderDebugMode": [
                    "self"
                ],
                "testRunsUnderNonDebugMode": [
                    "self"
                ],
                "testRunsUnderNonDebugThenDebugMode": [
                    "self"
                ],
                "testRunMultipleTimesWithinLimit": [
                    "self"
                ],
                "testRunMultipleTimesOverLimit": [
                    "self"
                ],
                "testRunMixingDebugModeAndMultpleTimes": [
                    "self"
                ],
                "testRuntimeErrorShouldBeCaught": [
                    "self"
                ],
                "testRunTillFilterPassesShouldLaunchCLIAtCorrectRun": [
                    "self"
                ]
            }
        },
        "tensorflow.python.debug.wrappers.local_cli_wrapper": {
            "LocalCLIDebugWrapperSession": {
                "__init__": [
                    "self",
                    "sess",
                    "dump_root",
                    "log_usage",
                    "ui_type"
                ],
                "_initialize_argparsers": [
                    "self"
                ],
                "add_tensor_filter": [
                    "self",
                    "filter_name",
                    "tensor_filter"
                ],
                "on_session_init": [
                    "self",
                    "request"
                ],
                "on_run_start": [
                    "self",
                    "request"
                ],
                "_prep_cli_for_run_start": [
                    "self"
                ],
                "on_run_end": [
                    "self",
                    "request"
                ],
                "_remove_dump_root": [
                    "self"
                ],
                "_prep_cli_for_run_end": [
                    "self",
                    "debug_dump",
                    "tf_error",
                    "passed_filter"
                ],
                "_launch_cli": [
                    "self",
                    "is_run_start"
                ],
                "_run_info_handler": [
                    "self",
                    "args",
                    "screen_info"
                ],
                "_run_handler": [
                    "self",
                    "args",
                    "screen_info"
                ],
                "_register_this_run_info": [
                    "self",
                    "curses_cli"
                ],
                "_on_run_start_step_handler": [
                    "self",
                    "args",
                    "screen_info"
                ],
                "_get_run_debug_urls": [
                    "self"
                ],
                "_update_run_calls_state": [
                    "self",
                    "run_call_count",
                    "fetches",
                    "feed_dict"
                ],
                "invoke_node_stepper": [
                    "self",
                    "node_stepper",
                    "restore_variable_values_on_exit"
                ]
            }
        },
        "tensorflow.python.debug.wrappers.hooks": {
            "LocalCLIDebugHook": {
                "__init__": [
                    "self",
                    "ui_type"
                ],
                "begin": [
                    "self"
                ],
                "before_run": [
                    "self",
                    "run_context"
                ],
                "after_run": [
                    "self",
                    "run_context",
                    "run_values"
                ],
                "_decorate_options_for_debug": [
                    "self",
                    "options",
                    "graph"
                ]
            },
            "DumpingDebugHook": {
                "__init__": [
                    "self",
                    "session_root",
                    "watch_fn",
                    "log_usage"
                ],
                "begin": [
                    "self"
                ],
                "before_run": [
                    "self",
                    "run_context"
                ],
                "after_run": [
                    "self",
                    "run_context",
                    "run_values"
                ]
            }
        },
        "tensorflow.python.debug.wrappers.grpc_wrapper": {
            "GrpcDebugWrapperSession": {
                "__init__": [
                    "self",
                    "sess",
                    "grpc_debug_server_addresses",
                    "watch_fn",
                    "log_usage"
                ],
                "_prepare_run_debug_urls": [
                    "self",
                    "fetches",
                    "feed_dict"
                ]
            }
        },
        "tensorflow.python.util": {},
        "tensorflow.python.util.nest": {
            "_sequence_like": [
                "instance",
                "args"
            ],
            "_yield_flat_nest": [
                "nest"
            ],
            "is_sequence": [
                "seq"
            ],
            "flatten": [
                "nest"
            ],
            "_recursive_assert_same_structure": [
                "nest1",
                "nest2"
            ],
            "assert_same_structure": [
                "nest1",
                "nest2"
            ],
            "flatten_dict_items": [
                "dictionary"
            ],
            "_packed_nest_with_indices": [
                "structure",
                "flat",
                "index"
            ],
            "pack_sequence_as": [
                "structure",
                "flat_sequence"
            ],
            "map_structure": [
                "func"
            ]
        },
        "tensorflow.python.util.deprecation": {
            "_add_deprecated_function_notice_to_docstring": [
                "doc",
                "date",
                "instructions"
            ],
            "_add_deprecated_arg_notice_to_docstring": [
                "doc",
                "date",
                "instructions"
            ],
            "_validate_deprecation_args": [
                "date",
                "instructions"
            ],
            "_call_location": [],
            "deprecated": [
                "date",
                "instructions"
            ],
            "deprecated_args": [
                "date",
                "instructions"
            ],
            "deprecated_arg_values": [
                "date",
                "instructions"
            ],
            "deprecated_argument_lookup": [
                "new_name",
                "new_value",
                "old_name",
                "old_value"
            ],
            "rewrite_argument_docstring": [
                "old_doc",
                "old_argument",
                "new_argument"
            ]
        },
        "tensorflow.python.util.example_parser_configuration": {
            "extract_example_parser_configuration": [
                "parse_example_op",
                "sess"
            ]
        },
        "tensorflow.python.util.compat": {
            "as_bytes": [
                "bytes_or_text",
                "encoding"
            ],
            "as_text": [
                "bytes_or_text",
                "encoding"
            ],
            "as_str_any": [
                "value"
            ]
        },
        "tensorflow.python.util.decorator_utils": {
            "get_qualified_name": [
                "function"
            ],
            "_normalize_docstring": [
                "docstring"
            ],
            "add_notice_to_docstring": [
                "doc",
                "instructions",
                "no_doc_str",
                "suffix_str",
                "notice"
            ],
            "validate_callable": [
                "func",
                "decorator_name"
            ],
            "classproperty": {
                "__init__": [
                    "self",
                    "func"
                ],
                "__get__": [
                    "self",
                    "owner_self",
                    "owner_cls"
                ]
            }
        },
        "tensorflow.python.util.all_util": {
            "make_all": [
                "module_name",
                "doc_string_modules"
            ],
            "reveal_undocumented": [
                "symbol_name",
                "target_module"
            ],
            "remove_undocumented": [
                "module_name",
                "allowed_exception_list",
                "doc_string_modules"
            ]
        },
        "tensorflow.python.util.future_api": {},
        "tensorflow.python.util.keyword_args": {
            "keyword_args_only": [
                "func"
            ]
        },
        "tensorflow.python.util.protobuf.compare": {
            "assertProtoEqual": [
                "self",
                "a",
                "b",
                "check_initialized",
                "normalize_numbers",
                "msg"
            ],
            "NormalizeNumberFields": [
                "pb"
            ],
            "_IsMap": [
                "value"
            ],
            "_IsRepeatedContainer": [
                "value"
            ],
            "ProtoEq": [
                "a",
                "b"
            ],
            "ProtoAssertions": {
                "assertProtoEqual": [
                    "self"
                ]
            }
        },
        "tensorflow.python.util.protobuf": {},
        "tensorflow.python.client": {},
        "tensorflow.python.client.client_lib": {},
        "tensorflow.python.client.device_lib": {
            "list_local_devices": []
        },
        "tensorflow.python.client.session": {
            "_get_indexed_slices_value_from_fetches": [
                "fetched_vals"
            ],
            "_get_feeds_for_indexed_slices": [
                "feed",
                "feed_val"
            ],
            "register_session_run_conversion_functions": [
                "tensor_type",
                "fetch_function",
                "feed_function",
                "feed_function_for_partial_run"
            ],
            "_uniquify_fetches": [
                "fetch_mappers"
            ],
            "SessionInterface": {
                "graph": [
                    "self"
                ],
                "sess_str": [
                    "self"
                ],
                "run": [
                    "self",
                    "fetches",
                    "feed_dict",
                    "options",
                    "run_metadata"
                ],
                "partial_run_setup": [
                    "self",
                    "fetches",
                    "feeds"
                ],
                "partial_run": [
                    "self",
                    "handle",
                    "fetches",
                    "feed_dict"
                ]
            },
            "_FetchMapper": {
                "unique_fetches": [
                    "self"
                ],
                "build_results": [
                    "self",
                    "values"
                ],
                "for_fetch": [
                    "fetch"
                ]
            },
            "_ElementFetchMapper": {
                "__init__": [
                    "self",
                    "fetches",
                    "contraction_fn"
                ],
                "unique_fetches": [
                    "self"
                ],
                "build_results": [
                    "self",
                    "values"
                ]
            },
            "_ListFetchMapper": {
                "__init__": [
                    "self",
                    "fetches"
                ],
                "unique_fetches": [
                    "self"
                ],
                "build_results": [
                    "self",
                    "values"
                ]
            },
            "_DictFetchMapper": {
                "__init__": [
                    "self",
                    "fetches"
                ],
                "unique_fetches": [
                    "self"
                ],
                "build_results": [
                    "self",
                    "values"
                ]
            },
            "_FetchHandler": {
                "__init__": [
                    "self",
                    "graph",
                    "fetches",
                    "feeds"
                ],
                "_assert_fetchable": [
                    "self",
                    "graph",
                    "op"
                ],
                "fetches": [
                    "self"
                ],
                "targets": [
                    "self"
                ],
                "build_results": [
                    "self",
                    "session",
                    "tensor_values"
                ]
            },
            "BaseSession": {
                "__init__": [
                    "self",
                    "target",
                    "graph",
                    "config"
                ],
                "close": [
                    "self"
                ],
                "__del__": [
                    "self"
                ],
                "graph": [
                    "self"
                ],
                "graph_def": [
                    "self"
                ],
                "sess_str": [
                    "self"
                ],
                "as_default": [
                    "self"
                ],
                "run": [
                    "self",
                    "fetches",
                    "feed_dict",
                    "options",
                    "run_metadata"
                ],
                "partial_run": [
                    "self",
                    "handle",
                    "fetches",
                    "feed_dict"
                ],
                "partial_run_setup": [
                    "self",
                    "fetches",
                    "feeds"
                ],
                "_run": [
                    "self",
                    "handle",
                    "fetches",
                    "feed_dict",
                    "options",
                    "run_metadata"
                ],
                "_do_run": [
                    "self",
                    "handle",
                    "target_list",
                    "fetch_list",
                    "feed_dict",
                    "options",
                    "run_metadata"
                ],
                "_do_call": [
                    "self",
                    "fn"
                ],
                "_extend_graph": [
                    "self"
                ],
                "_register_dead_handle": [
                    "self",
                    "handle"
                ],
                "_update_with_movers": [
                    "self",
                    "feed_dict",
                    "feed_map"
                ]
            },
            "Session": {
                "__init__": [
                    "self",
                    "target",
                    "graph",
                    "config"
                ],
                "__enter__": [
                    "self"
                ],
                "__exit__": [
                    "self",
                    "exec_type",
                    "exec_value",
                    "exec_tb"
                ],
                "reset": [
                    "target",
                    "containers",
                    "config"
                ]
            },
            "InteractiveSession": {
                "__init__": [
                    "self",
                    "target",
                    "graph",
                    "config"
                ],
                "close": [
                    "self"
                ]
            }
        },
        "tensorflow.python.client.timeline": {
            "AllocationMaximum": {},
            "StepStatsAnalysis": {},
            "_ChromeTraceFormatter": {
                "__init__": [
                    "self",
                    "show_memory"
                ],
                "_create_event": [
                    "self",
                    "ph",
                    "category",
                    "name",
                    "pid",
                    "tid",
                    "timestamp"
                ],
                "emit_pid": [
                    "self",
                    "name",
                    "pid"
                ],
                "emit_tid": [
                    "self",
                    "name",
                    "pid",
                    "tid"
                ],
                "emit_region": [
                    "self",
                    "timestamp",
                    "duration",
                    "pid",
                    "tid",
                    "category",
                    "name",
                    "args"
                ],
                "emit_obj_create": [
                    "self",
                    "category",
                    "name",
                    "timestamp",
                    "pid",
                    "tid",
                    "object_id"
                ],
                "emit_obj_delete": [
                    "self",
                    "category",
                    "name",
                    "timestamp",
                    "pid",
                    "tid",
                    "object_id"
                ],
                "emit_obj_snapshot": [
                    "self",
                    "category",
                    "name",
                    "timestamp",
                    "pid",
                    "tid",
                    "object_id",
                    "snapshot"
                ],
                "emit_flow_start": [
                    "self",
                    "name",
                    "timestamp",
                    "pid",
                    "tid",
                    "flow_id"
                ],
                "emit_flow_end": [
                    "self",
                    "name",
                    "timestamp",
                    "pid",
                    "tid",
                    "flow_id"
                ],
                "emit_counter": [
                    "self",
                    "category",
                    "name",
                    "pid",
                    "timestamp",
                    "counter",
                    "value"
                ],
                "emit_counters": [
                    "self",
                    "category",
                    "name",
                    "pid",
                    "timestamp",
                    "counters"
                ],
                "format_to_string": [
                    "self",
                    "pretty"
                ]
            },
            "_TensorTracker": {
                "__init__": [
                    "self",
                    "name",
                    "object_id",
                    "timestamp",
                    "pid",
                    "allocator",
                    "num_bytes"
                ],
                "name": [
                    "self"
                ],
                "pid": [
                    "self"
                ],
                "create_time": [
                    "self"
                ],
                "object_id": [
                    "self"
                ],
                "num_bytes": [
                    "self"
                ],
                "allocator": [
                    "self"
                ],
                "last_unref": [
                    "self"
                ],
                "add_ref": [
                    "self",
                    "timestamp"
                ],
                "add_unref": [
                    "self",
                    "timestamp"
                ]
            },
            "Timeline": {
                "__init__": [
                    "self",
                    "step_stats",
                    "graph"
                ],
                "_alloc_pid": [
                    "self"
                ],
                "_alloc_flow_id": [
                    "self"
                ],
                "_parse_op_label": [
                    "self",
                    "label"
                ],
                "_assign_lanes": [
                    "self"
                ],
                "_emit_op": [
                    "self",
                    "nodestats",
                    "pid",
                    "is_gputrace"
                ],
                "_emit_tensor_snapshot": [
                    "self",
                    "tensor",
                    "timestamp",
                    "pid",
                    "tid",
                    "value"
                ],
                "_produce_tensor": [
                    "self",
                    "name",
                    "timestamp",
                    "tensors_pid",
                    "allocator",
                    "num_bytes"
                ],
                "_is_gputrace_device": [
                    "self",
                    "device_name"
                ],
                "_allocate_pids": [
                    "self"
                ],
                "_analyze_tensors": [
                    "self",
                    "show_memory"
                ],
                "_show_compute": [
                    "self",
                    "show_dataflow"
                ],
                "_show_memory_counters": [
                    "self"
                ],
                "analyze_step_stats": [
                    "self",
                    "show_dataflow",
                    "show_memory"
                ],
                "generate_chrome_trace_format": [
                    "self",
                    "show_dataflow",
                    "show_memory"
                ]
            }
        },
        "tensorflow.python.tools.optimize_for_inference_test": {
            "OptimizeForInferenceTest": {
                "create_node_def": [
                    "self",
                    "op",
                    "name",
                    "inputs"
                ],
                "create_constant_node_def": [
                    "self",
                    "name",
                    "value",
                    "dtype",
                    "shape"
                ],
                "set_attr_dtype": [
                    "self",
                    "node",
                    "key",
                    "value"
                ],
                "set_attr_tensor": [
                    "self",
                    "node",
                    "key",
                    "value",
                    "dtype",
                    "shape"
                ],
                "testOptimizeForInference": [
                    "self"
                ],
                "testFoldBatchNorms": [
                    "self"
                ],
                "testFuseResizePadAndConv": [
                    "self"
                ],
                "testFuseResizeAndConv": [
                    "self"
                ],
                "testFusePadAndConv": [
                    "self"
                ]
            }
        },
        "tensorflow.python.tools.inspect_checkpoint": {
            "print_tensors_in_checkpoint_file": [
                "file_name",
                "tensor_name",
                "all_tensors"
            ],
            "main": [
                "unused_argv"
            ]
        },
        "tensorflow.python.tools.strip_unused_test": {
            "StripUnusedTest": {
                "testStripUnused": [
                    "self"
                ],
                "testStripUnusedMultipleInputs": [
                    "self"
                ]
            }
        },
        "tensorflow.python.tools": {},
        "tensorflow.python.tools.optimize_for_inference": {
            "main": [
                "unused_args"
            ]
        },
        "tensorflow.python.tools.print_selective_registration_header": {
            "get_ops_and_kernels": [
                "proto_fileformat",
                "proto_files",
                "default_ops_str"
            ],
            "get_header": [
                "ops_and_kernels",
                "include_all_ops_and_kernels"
            ],
            "main": [
                "unused_argv"
            ]
        },
        "tensorflow.python.tools.freeze_graph": {
            "freeze_graph": [
                "input_graph",
                "input_saver",
                "input_binary",
                "input_checkpoint",
                "output_node_names",
                "restore_op_name",
                "filename_tensor_name",
                "output_graph",
                "clear_devices",
                "initializer_nodes",
                "variable_names_blacklist"
            ],
            "main": [
                "unused_args"
            ]
        },
        "tensorflow.python.tools.print_selective_registration_header_test": {
            "PrintOpFilegroupTest": {
                "WriteGraphFiles": [
                    "self",
                    "graphs"
                ],
                "testGetOps": [
                    "self"
                ],
                "testAll": [
                    "self"
                ]
            }
        },
        "tensorflow.python.tools.freeze_graph_test": {
            "FreezeGraphTest": {
                "_testFreezeGraph": [
                    "self",
                    "saver_write_version"
                ],
                "testFreezeGraphV1": [
                    "self"
                ],
                "testFreezeGraphV2": [
                    "self"
                ]
            }
        },
        "tensorflow.python.tools.strip_unused": {
            "main": [
                "unused_args"
            ]
        },
        "tensorflow.python.tools.optimize_for_inference_lib": {
            "optimize_for_inference": [
                "input_graph_def",
                "input_node_names",
                "output_node_names",
                "placeholder_type_enum"
            ],
            "ensure_graph_is_valid": [
                "graph_def"
            ],
            "node_name_from_input": [
                "node_name"
            ],
            "node_from_map": [
                "node_map",
                "name"
            ],
            "values_from_const": [
                "node_def"
            ],
            "fold_batch_norms": [
                "input_graph_def"
            ],
            "fuse_resize_and_conv": [
                "input_graph_def",
                "output_node_names"
            ]
        },
        "tensorflow.python.tools.strip_unused_lib": {
            "strip_unused": [
                "input_graph_def",
                "input_node_names",
                "output_node_names",
                "placeholder_type_enum"
            ],
            "strip_unused_from_files": [
                "input_graph",
                "input_binary",
                "output_graph",
                "output_binary",
                "input_node_names",
                "output_node_names",
                "placeholder_type_enum"
            ]
        },
        "tensorflow.python.lib": {},
        "tensorflow.python.lib.io.file_io": {
            "file_exists": [
                "filename"
            ],
            "delete_file": [
                "filename"
            ],
            "read_file_to_string": [
                "filename"
            ],
            "write_string_to_file": [
                "filename",
                "file_content"
            ],
            "get_matching_files": [
                "filename"
            ],
            "create_dir": [
                "dirname"
            ],
            "recursive_create_dir": [
                "dirname"
            ],
            "copy": [
                "oldpath",
                "newpath",
                "overwrite"
            ],
            "rename": [
                "oldname",
                "newname",
                "overwrite"
            ],
            "atomic_write_string_to_file": [
                "filename",
                "contents"
            ],
            "delete_recursively": [
                "dirname"
            ],
            "is_directory": [
                "dirname"
            ],
            "list_directory": [
                "dirname"
            ],
            "walk": [
                "top",
                "in_order"
            ],
            "stat": [
                "filename"
            ],
            "FileIO": {
                "__init__": [
                    "self",
                    "name",
                    "mode"
                ],
                "name": [
                    "self"
                ],
                "mode": [
                    "self"
                ],
                "_preread_check": [
                    "self"
                ],
                "_prewrite_check": [
                    "self"
                ],
                "size": [
                    "self"
                ],
                "write": [
                    "self",
                    "file_content"
                ],
                "read": [
                    "self",
                    "n"
                ],
                "seek": [
                    "self",
                    "position"
                ],
                "readline": [
                    "self"
                ],
                "readlines": [
                    "self"
                ],
                "tell": [
                    "self"
                ],
                "__enter__": [
                    "self"
                ],
                "__exit__": [
                    "self",
                    "unused_type",
                    "unused_value",
                    "unused_traceback"
                ],
                "__iter__": [
                    "self"
                ],
                "next": [
                    "self"
                ],
                "__next__": [
                    "self"
                ],
                "flush": [
                    "self"
                ],
                "close": [
                    "self"
                ]
            }
        },
        "tensorflow.python.lib.io": {},
        "tensorflow.python.lib.io.python_io": {},
        "tensorflow.python.lib.io.tf_record": {
            "tf_record_iterator": [
                "path",
                "options"
            ],
            "TFRecordCompressionType": {},
            "TFRecordOptions": {
                "__init__": [
                    "self",
                    "compression_type"
                ],
                "get_compression_type_string": [
                    "cls",
                    "options"
                ]
            },
            "TFRecordWriter": {
                "__init__": [
                    "self",
                    "path",
                    "options"
                ],
                "__enter__": [
                    "self"
                ],
                "__exit__": [
                    "self",
                    "unused_type",
                    "unused_value",
                    "unused_traceback"
                ],
                "write": [
                    "self",
                    "record"
                ],
                "close": [
                    "self"
                ]
            }
        },
        "tensorflow.python.saved_model.builder": {},
        "tensorflow.python.saved_model.builder_impl": {
            "SavedModelBuilder": {
                "__init__": [
                    "self",
                    "export_dir"
                ],
                "_asset_path_from_tensor": [
                    "self",
                    "path_tensor"
                ],
                "_add_asset_to_collection": [
                    "self",
                    "asset_filename",
                    "asset_tensor"
                ],
                "_save_and_write_assets": [
                    "self",
                    "assets_collection_to_add"
                ],
                "_maybe_add_legacy_init_op": [
                    "self",
                    "legacy_init_op"
                ],
                "_add_main_op": [
                    "self",
                    "main_op"
                ],
                "_maybe_save_assets": [
                    "self",
                    "assets_collection_to_add"
                ],
                "_tag_and_add_meta_graph": [
                    "self",
                    "meta_graph_def",
                    "tags",
                    "signature_def_map"
                ],
                "_validate_tensor_info": [
                    "self",
                    "tensor_info"
                ],
                "_validate_signature_def_map": [
                    "self",
                    "signature_def_map"
                ],
                "add_meta_graph": [
                    "self",
                    "tags",
                    "signature_def_map",
                    "assets_collection",
                    "legacy_init_op",
                    "clear_devices",
                    "main_op"
                ],
                "add_meta_graph_and_variables": [
                    "self",
                    "sess",
                    "tags",
                    "signature_def_map",
                    "assets_collection",
                    "legacy_init_op",
                    "clear_devices",
                    "main_op"
                ],
                "save": [
                    "self",
                    "as_text"
                ]
            }
        },
        "tensorflow.python.saved_model": {},
        "tensorflow.python.saved_model.loader": {},
        "tensorflow.python.saved_model.tag_constants": {},
        "tensorflow.python.saved_model.utils": {},
        "tensorflow.python.saved_model.saved_model_test": {
            "tearDownModule": [],
            "SavedModelTest": {
                "_init_and_validate_variable": [
                    "self",
                    "sess",
                    "variable_name",
                    "variable_value"
                ],
                "_build_asset_collection": [
                    "self",
                    "asset_file_name",
                    "asset_file_contents",
                    "asset_file_tensor_name"
                ],
                "_validate_asset_collection": [
                    "self",
                    "export_dir",
                    "graph_collection_def",
                    "expected_asset_file_name",
                    "expected_asset_file_contents",
                    "expected_asset_tensor_name"
                ],
                "_validate_inputs_tensor_info": [
                    "self",
                    "builder",
                    "tensor_info"
                ],
                "_validate_outputs_tensor_info": [
                    "self",
                    "builder",
                    "tensor_info"
                ],
                "testMaybeSavedModelDir": [
                    "self"
                ],
                "testSequence": [
                    "self"
                ],
                "testTags": [
                    "self"
                ],
                "testVariables": [
                    "self"
                ],
                "testGraphWithoutVariables": [
                    "self"
                ],
                "testNoOverwrite": [
                    "self"
                ],
                "testSaveAsText": [
                    "self"
                ],
                "testCollections": [
                    "self"
                ],
                "testSignatureDefs": [
                    "self"
                ],
                "testSignatureDefValidation": [
                    "self"
                ],
                "testAssets": [
                    "self"
                ],
                "testCustomMainOp": [
                    "self"
                ],
                "testLegacyInitOp": [
                    "self"
                ],
                "testMultipleAssets": [
                    "self"
                ],
                "testDuplicateAssets": [
                    "self"
                ],
                "testOp": [
                    "self"
                ],
                "testClearDevices": [
                    "self"
                ]
            }
        },
        "tensorflow.python.saved_model.constants": {},
        "tensorflow.python.saved_model.signature_constants": {},
        "tensorflow.python.saved_model.signature_def_utils_test": {
            "SignatureDefUtilsTest": {
                "testBuildSignatureDef": [
                    "self"
                ],
                "testRegressionSignatureDef": [
                    "self"
                ],
                "testClassificationSignatureDef": [
                    "self"
                ],
                "testPredictionSignatureDef": [
                    "self"
                ]
            }
        },
        "tensorflow.python.saved_model.utils_test": {
            "UtilsTest": {
                "testBuildTensorInfo": [
                    "self"
                ]
            }
        },
        "tensorflow.python.saved_model.saved_model": {},
        "tensorflow.python.saved_model.signature_def_utils_impl": {
            "build_signature_def": [
                "inputs",
                "outputs",
                "method_name"
            ],
            "regression_signature_def": [
                "examples",
                "predictions"
            ],
            "classification_signature_def": [
                "examples",
                "classes",
                "scores"
            ],
            "predict_signature_def": [
                "inputs",
                "outputs"
            ]
        },
        "tensorflow.python.saved_model.signature_def_utils": {},
        "tensorflow.python.saved_model.loader_impl": {
            "_parse_saved_model": [
                "export_dir"
            ],
            "_get_asset_tensors": [
                "export_dir",
                "meta_graph_def_to_load"
            ],
            "_get_main_op_tensor": [
                "meta_graph_def_to_load"
            ],
            "_get_legacy_init_op_tensor": [
                "meta_graph_def_to_load"
            ],
            "maybe_saved_model_directory": [
                "export_dir"
            ],
            "load": [
                "sess",
                "tags",
                "export_dir"
            ]
        },
        "tensorflow.python.saved_model.main_op": {},
        "tensorflow.python.saved_model.utils_impl": {
            "build_tensor_info": [
                "tensor"
            ]
        },
        "tensorflow.python.saved_model.main_op_impl": {
            "main_op": [],
            "main_op_with_restore": [
                "restore_op_name"
            ]
        },
        "tensorflow.python.framework.errors": {},
        "tensorflow.python.framework.constant_op": {
            "constant": [
                "value",
                "dtype",
                "shape",
                "name",
                "verify_shape"
            ],
            "_constant_tensor_conversion_function": [
                "v",
                "dtype",
                "name",
                "as_ref"
            ],
            "_tensor_shape_tensor_conversion_function": [
                "s",
                "dtype",
                "name",
                "as_ref"
            ],
            "_dimension_tensor_conversion_function": [
                "d",
                "dtype",
                "name",
                "as_ref"
            ]
        },
        "tensorflow.python.framework.tensor_util": {
            "ExtractBitsFromFloat16": [
                "x"
            ],
            "SlowAppendFloat16ArrayToTensorProto": [
                "tensor_proto",
                "proto_values"
            ],
            "GetFromNumpyDTypeDict": [
                "dtype_dict",
                "dtype"
            ],
            "GetNumpyAppendFn": [
                "dtype"
            ],
            "TensorShapeProtoToList": [
                "shape"
            ],
            "_GetDenseDimensions": [
                "list_of_lists"
            ],
            "_FlattenToStrings": [
                "nested_strings"
            ],
            "_FirstNotNone": [
                "l"
            ],
            "_NotNone": [
                "v"
            ],
            "_FilterTuple": [
                "v"
            ],
            "_FilterInt": [
                "v"
            ],
            "_FilterFloat": [
                "v"
            ],
            "_FilterComplex": [
                "v"
            ],
            "_FilterStr": [
                "v"
            ],
            "_FilterBool": [
                "v"
            ],
            "_FilterNotTensor": [
                "v"
            ],
            "_AssertCompatible": [
                "values",
                "dtype"
            ],
            "make_tensor_proto": [
                "values",
                "dtype",
                "shape",
                "verify_shape"
            ],
            "MakeNdarray": [
                "tensor"
            ],
            "ShapeEquals": [
                "tensor_proto",
                "shape"
            ],
            "_ConstantValue": [
                "tensor"
            ],
            "constant_value": [
                "tensor"
            ],
            "constant_value_as_shape": [
                "tensor"
            ],
            "_Message": {
                "__init__": [
                    "self",
                    "message"
                ],
                "__repr__": [
                    "self"
                ]
            }
        },
        "tensorflow.python.framework.tensor_shape": {
            "as_dimension": [
                "value"
            ],
            "as_shape": [
                "shape"
            ],
            "unknown_shape": [
                "ndims"
            ],
            "scalar": [],
            "vector": [
                "length"
            ],
            "matrix": [
                "rows",
                "cols"
            ],
            "Dimension": {
                "__init__": [
                    "self",
                    "value"
                ],
                "__repr__": [
                    "self"
                ],
                "__str__": [
                    "self"
                ],
                "__eq__": [
                    "self",
                    "other"
                ],
                "__ne__": [
                    "self",
                    "other"
                ],
                "__int__": [
                    "self"
                ],
                "__index__": [
                    "self"
                ],
                "value": [
                    "self"
                ],
                "is_compatible_with": [
                    "self",
                    "other"
                ],
                "assert_is_compatible_with": [
                    "self",
                    "other"
                ],
                "merge_with": [
                    "self",
                    "other"
                ],
                "__add__": [
                    "self",
                    "other"
                ],
                "__sub__": [
                    "self",
                    "other"
                ],
                "__mul__": [
                    "self",
                    "other"
                ],
                "__floordiv__": [
                    "self",
                    "other"
                ],
                "__div__": [
                    "self",
                    "other"
                ],
                "__mod__": [
                    "self",
                    "other"
                ],
                "__lt__": [
                    "self",
                    "other"
                ],
                "__le__": [
                    "self",
                    "other"
                ],
                "__gt__": [
                    "self",
                    "other"
                ],
                "__ge__": [
                    "self",
                    "other"
                ]
            },
            "TensorShape": {
                "__init__": [
                    "self",
                    "dims"
                ],
                "__repr__": [
                    "self"
                ],
                "__str__": [
                    "self"
                ],
                "dims": [
                    "self"
                ],
                "ndims": [
                    "self"
                ],
                "__len__": [
                    "self"
                ],
                "__bool__": [
                    "self"
                ],
                "__iter__": [
                    "self"
                ],
                "__getitem__": [
                    "self",
                    "key"
                ],
                "num_elements": [
                    "self"
                ],
                "merge_with": [
                    "self",
                    "other"
                ],
                "concatenate": [
                    "self",
                    "other"
                ],
                "assert_same_rank": [
                    "self",
                    "other"
                ],
                "assert_has_rank": [
                    "self",
                    "rank"
                ],
                "with_rank": [
                    "self",
                    "rank"
                ],
                "with_rank_at_least": [
                    "self",
                    "rank"
                ],
                "with_rank_at_most": [
                    "self",
                    "rank"
                ],
                "is_compatible_with": [
                    "self",
                    "other"
                ],
                "assert_is_compatible_with": [
                    "self",
                    "other"
                ],
                "is_fully_defined": [
                    "self"
                ],
                "assert_is_fully_defined": [
                    "self"
                ],
                "as_list": [
                    "self"
                ],
                "as_proto": [
                    "self"
                ],
                "__eq__": [
                    "self",
                    "other"
                ],
                "__ne__": [
                    "self",
                    "other"
                ]
            }
        },
        "tensorflow.python.framework.graph_io": {
            "write_graph": [
                "graph_or_graph_def",
                "logdir",
                "name",
                "as_text"
            ]
        },
        "tensorflow.python.framework.dtypes": {
            "as_dtype": [
                "type_value"
            ],
            "DType": {
                "__init__": [
                    "self",
                    "type_enum"
                ],
                "_is_ref_dtype": [
                    "self"
                ],
                "_as_ref": [
                    "self"
                ],
                "base_dtype": [
                    "self"
                ],
                "real_dtype": [
                    "self"
                ],
                "is_numpy_compatible": [
                    "self"
                ],
                "as_numpy_dtype": [
                    "self"
                ],
                "as_datatype_enum": [
                    "self"
                ],
                "is_bool": [
                    "self"
                ],
                "is_integer": [
                    "self"
                ],
                "is_floating": [
                    "self"
                ],
                "is_complex": [
                    "self"
                ],
                "is_quantized": [
                    "self"
                ],
                "is_unsigned": [
                    "self"
                ],
                "min": [
                    "self"
                ],
                "max": [
                    "self"
                ],
                "limits": [
                    "self",
                    "clip_negative"
                ],
                "is_compatible_with": [
                    "self",
                    "other"
                ],
                "__eq__": [
                    "self",
                    "other"
                ],
                "__ne__": [
                    "self",
                    "other"
                ],
                "name": [
                    "self"
                ],
                "__str__": [
                    "self"
                ],
                "__repr__": [
                    "self"
                ],
                "__hash__": [
                    "self"
                ],
                "size": [
                    "self"
                ]
            }
        },
        "tensorflow.python.framework.load_library": {
            "load_op_library": [
                "library_filename"
            ],
            "load_file_system_library": [
                "library_filename"
            ]
        },
        "tensorflow.python.framework": {},
        "tensorflow.python.framework.op_def_library": {
            "_Attr": [
                "op_def",
                "name"
            ],
            "_AttrValue": [
                "attr_protos",
                "name"
            ],
            "_SatisfiesTypeConstraint": [
                "dtype",
                "attr_def",
                "param_name"
            ],
            "_IsListParameter": [
                "arg"
            ],
            "_NumTypeFields": [
                "arg"
            ],
            "_IsListValue": [
                "v"
            ],
            "_Flatten": [
                "l"
            ],
            "_Restructure": [
                "l",
                "structure"
            ],
            "_MakeFloat": [
                "v",
                "arg_name"
            ],
            "_MakeInt": [
                "v",
                "arg_name"
            ],
            "_MakeStr": [
                "v",
                "arg_name"
            ],
            "_MakeBool": [
                "v",
                "arg_name"
            ],
            "_MakeType": [
                "v",
                "attr_def"
            ],
            "_MakeShape": [
                "v",
                "arg_name"
            ],
            "_MakeTensor": [
                "v",
                "arg_name"
            ],
            "_MaybeColocateWith": [
                "inputs"
            ],
            "_OpInfo": {
                "__init__": [
                    "self",
                    "op_def"
                ]
            },
            "OpDefLibrary": {
                "__init__": [
                    "self"
                ],
                "add_op": [
                    "self",
                    "op_def"
                ],
                "add_op_list": [
                    "self",
                    "op_list"
                ],
                "apply_op": [
                    "self",
                    "op_type_name",
                    "name"
                ]
            }
        },
        "tensorflow.python.framework.versions": {},
        "tensorflow.python.framework.registry": {
            "Registry": {
                "__init__": [
                    "self",
                    "name"
                ],
                "register": [
                    "self",
                    "candidate",
                    "name"
                ],
                "list": [
                    "self"
                ],
                "lookup": [
                    "self",
                    "name"
                ]
            }
        },
        "tensorflow.python.framework.test_ops": {
            "graph_def_version": [
                "name"
            ],
            "kernel_label": [
                "name"
            ],
            "old": [
                "name"
            ],
            "resource_create_op": [
                "resource",
                "name"
            ],
            "resource_initialized_op": [
                "resource",
                "name"
            ],
            "resource_using_op": [
                "resource",
                "name"
            ],
            "stub_resource_handle_op": [
                "container",
                "shared_name",
                "name"
            ],
            "test_string_output": [
                "input",
                "name"
            ],
            "_InitOpDefLibrary": []
        },
        "tensorflow.python.framework.graph_util_impl": {
            "_is_variable_op": [
                "op"
            ],
            "must_run_on_cpu": [
                "node",
                "pin_variables_on_cpu"
            ],
            "_node_name": [
                "n"
            ],
            "extract_sub_graph": [
                "graph_def",
                "dest_nodes"
            ],
            "tensor_shape_from_node_def_name": [
                "graph",
                "input_name"
            ],
            "convert_variables_to_constants": [
                "sess",
                "input_graph_def",
                "output_node_names",
                "variable_names_whitelist",
                "variable_names_blacklist"
            ],
            "remove_training_nodes": [
                "input_graph"
            ]
        },
        "tensorflow.python.framework.ops": {
            "_override_helper": [
                "clazz_object",
                "operator",
                "func"
            ],
            "_convert_stack": [
                "stack"
            ],
            "_extract_stack": [],
            "_as_graph_element": [
                "obj"
            ],
            "is_dense_tensor_like": [
                "t"
            ],
            "register_dense_tensor_like_type": [
                "tensor_type"
            ],
            "_TensorTensorConversionFunction": [
                "t",
                "dtype",
                "name",
                "as_ref"
            ],
            "convert_to_tensor": [
                "value",
                "dtype",
                "name",
                "preferred_dtype"
            ],
            "internal_convert_to_tensor": [
                "value",
                "dtype",
                "name",
                "as_ref",
                "preferred_dtype"
            ],
            "internal_convert_n_to_tensor": [
                "values",
                "dtype",
                "name",
                "as_ref",
                "preferred_dtype"
            ],
            "convert_n_to_tensor": [
                "values",
                "dtype",
                "name",
                "preferred_dtype"
            ],
            "convert_to_tensor_or_indexed_slices": [
                "value",
                "dtype",
                "name"
            ],
            "internal_convert_to_tensor_or_indexed_slices": [
                "value",
                "dtype",
                "name",
                "as_ref"
            ],
            "internal_convert_n_to_tensor_or_indexed_slices": [
                "values",
                "dtype",
                "name",
                "as_ref"
            ],
            "convert_n_to_tensor_or_indexed_slices": [
                "values",
                "dtype",
                "name"
            ],
            "register_tensor_conversion_function": [
                "base_type",
                "conversion_func",
                "priority"
            ],
            "_device_string": [
                "dev_spec"
            ],
            "_NodeDef": [
                "op_type",
                "name",
                "device",
                "attrs"
            ],
            "NotDifferentiable": [
                "op_type"
            ],
            "get_gradient_function": [
                "op"
            ],
            "_set_call_cpp_shape_fn": [
                "call_cpp_shape_fn"
            ],
            "set_shapes_for_outputs": [
                "op"
            ],
            "get_stats_for_node_def": [
                "graph",
                "node",
                "statistic_type"
            ],
            "_name_from_scope_name": [
                "name"
            ],
            "device": [
                "device_name_or_function"
            ],
            "container": [
                "container_name"
            ],
            "colocate_with": [
                "op",
                "ignore_existing"
            ],
            "control_dependencies": [
                "control_inputs"
            ],
            "default_session": [
                "session"
            ],
            "get_default_session": [],
            "_eval_using_default_session": [
                "tensors",
                "feed_dict",
                "graph",
                "session"
            ],
            "_run_using_default_session": [
                "operation",
                "feed_dict",
                "graph",
                "session"
            ],
            "reset_default_graph": [],
            "get_default_graph": [],
            "_assert_same_graph": [
                "original_item",
                "item"
            ],
            "_get_graph_from_inputs": [
                "op_input_list",
                "graph"
            ],
            "add_to_collection": [
                "name",
                "value"
            ],
            "add_to_collections": [
                "names",
                "value"
            ],
            "get_collection_ref": [
                "key"
            ],
            "get_collection": [
                "key",
                "scope"
            ],
            "get_all_collection_keys": [],
            "name_scope": [
                "name",
                "default_name",
                "values"
            ],
            "strip_name_scope": [
                "name",
                "export_scope"
            ],
            "prepend_name_scope": [
                "name",
                "import_scope"
            ],
            "op_scope": [
                "values",
                "name",
                "default_name"
            ],
            "register_proto_function": [
                "collection_name",
                "proto_type",
                "to_proto",
                "from_proto"
            ],
            "get_collection_proto_type": [
                "collection_name"
            ],
            "get_to_proto_function": [
                "collection_name"
            ],
            "get_from_proto_function": [
                "collection_name"
            ],
            "_operation_conversion_error": [
                "op",
                "dtype",
                "name",
                "as_ref"
            ],
            "_TensorLike": {},
            "Tensor": {
                "__init__": [
                    "self",
                    "op",
                    "value_index",
                    "dtype"
                ],
                "op": [
                    "self"
                ],
                "dtype": [
                    "self"
                ],
                "graph": [
                    "self"
                ],
                "name": [
                    "self"
                ],
                "device": [
                    "self"
                ],
                "shape": [
                    "self"
                ],
                "_shape_as_list": [
                    "self"
                ],
                "get_shape": [
                    "self"
                ],
                "set_shape": [
                    "self",
                    "shape"
                ],
                "value_index": [
                    "self"
                ],
                "consumers": [
                    "self"
                ],
                "_add_consumer": [
                    "self",
                    "consumer"
                ],
                "_as_node_def_input": [
                    "self"
                ],
                "__str__": [
                    "self"
                ],
                "__repr__": [
                    "self"
                ],
                "__hash__": [
                    "self"
                ],
                "__eq__": [
                    "self",
                    "other"
                ],
                "_override_operator": [
                    "operator",
                    "func"
                ],
                "__iter__": [
                    "self"
                ],
                "__bool__": [
                    "self"
                ],
                "__nonzero__": [
                    "self"
                ],
                "eval": [
                    "self",
                    "feed_dict",
                    "session"
                ]
            },
            "IndexedSlices": {
                "__init__": [
                    "self",
                    "values",
                    "indices",
                    "dense_shape"
                ],
                "values": [
                    "self"
                ],
                "indices": [
                    "self"
                ],
                "dense_shape": [
                    "self"
                ],
                "name": [
                    "self"
                ],
                "device": [
                    "self"
                ],
                "op": [
                    "self"
                ],
                "dtype": [
                    "self"
                ],
                "graph": [
                    "self"
                ],
                "__str__": [
                    "self"
                ],
                "__neg__": [
                    "self"
                ]
            },
            "Operation": {
                "__init__": [
                    "self",
                    "node_def",
                    "g",
                    "inputs",
                    "output_types",
                    "control_inputs",
                    "input_types",
                    "original_op",
                    "op_def"
                ],
                "colocation_groups": [
                    "self"
                ],
                "values": [
                    "self"
                ],
                "_get_control_flow_context": [
                    "self"
                ],
                "_set_control_flow_context": [
                    "self",
                    "context"
                ],
                "name": [
                    "self"
                ],
                "_id": [
                    "self"
                ],
                "device": [
                    "self"
                ],
                "_set_device": [
                    "self",
                    "device"
                ],
                "_add_input": [
                    "self",
                    "tensor",
                    "dtype"
                ],
                "_update_input": [
                    "self",
                    "index",
                    "tensor",
                    "dtype"
                ],
                "_add_control_inputs": [
                    "self",
                    "ops"
                ],
                "_add_control_input": [
                    "self",
                    "op"
                ],
                "_recompute_node_def": [
                    "self"
                ],
                "__str__": [
                    "self"
                ],
                "__repr__": [
                    "self"
                ],
                "outputs": [
                    "self"
                ],
                "inputs": [
                    "self"
                ],
                "_input_dtypes": [
                    "self"
                ],
                "control_inputs": [
                    "self"
                ],
                "type": [
                    "self"
                ],
                "graph": [
                    "self"
                ],
                "node_def": [
                    "self"
                ],
                "op_def": [
                    "self"
                ],
                "traceback": [
                    "self"
                ],
                "get_attr": [
                    "self",
                    "name"
                ],
                "run": [
                    "self",
                    "feed_dict",
                    "session"
                ]
            },
            "RegisterGradient": {
                "__init__": [
                    "self",
                    "op_type"
                ],
                "__call__": [
                    "self",
                    "f"
                ]
            },
            "RegisterShape": {
                "__init__": [
                    "self",
                    "op_type"
                ],
                "__call__": [
                    "self",
                    "f"
                ]
            },
            "OpStats": {
                "__init__": [
                    "self",
                    "statistic_type",
                    "value"
                ],
                "statistic_type": [
                    "self",
                    "statistic_type"
                ],
                "value": [
                    "self",
                    "value"
                ],
                "__iadd__": [
                    "self",
                    "other"
                ]
            },
            "RegisterStatistics": {
                "__init__": [
                    "self",
                    "op_type",
                    "statistic_type"
                ],
                "__call__": [
                    "self",
                    "f"
                ]
            },
            "Graph": {
                "__init__": [
                    "self"
                ],
                "_check_not_finalized": [
                    "self"
                ],
                "_add_op": [
                    "self",
                    "op"
                ],
                "version": [
                    "self"
                ],
                "graph_def_versions": [
                    "self"
                ],
                "seed": [
                    "self",
                    "seed"
                ],
                "finalized": [
                    "self"
                ],
                "finalize": [
                    "self"
                ],
                "_unsafe_unfinalize": [
                    "self"
                ],
                "_get_control_flow_context": [
                    "self"
                ],
                "_set_control_flow_context": [
                    "self",
                    "context"
                ],
                "_as_graph_def": [
                    "self",
                    "from_version",
                    "add_shapes"
                ],
                "as_graph_def": [
                    "self",
                    "from_version",
                    "add_shapes"
                ],
                "_is_function": [
                    "self",
                    "name"
                ],
                "_get_function": [
                    "self",
                    "name"
                ],
                "_add_function": [
                    "self",
                    "function"
                ],
                "building_function": [
                    "self"
                ],
                "create_op": [
                    "self",
                    "op_type",
                    "inputs",
                    "dtypes",
                    "input_types",
                    "name",
                    "attrs",
                    "op_def",
                    "compute_shapes",
                    "compute_device"
                ],
                "as_graph_element": [
                    "self",
                    "obj",
                    "allow_tensor",
                    "allow_operation"
                ],
                "_as_graph_element_locked": [
                    "self",
                    "obj",
                    "allow_tensor",
                    "allow_operation"
                ],
                "get_operations": [
                    "self"
                ],
                "get_operation_by_name": [
                    "self",
                    "name"
                ],
                "get_tensor_by_name": [
                    "self",
                    "name"
                ],
                "_next_id": [
                    "self"
                ],
                "_last_id": [
                    "self"
                ],
                "as_default": [
                    "self"
                ],
                "add_to_collection": [
                    "self",
                    "name",
                    "value"
                ],
                "add_to_collections": [
                    "self",
                    "names",
                    "value"
                ],
                "get_collection_ref": [
                    "self",
                    "name"
                ],
                "get_collection": [
                    "self",
                    "name",
                    "scope"
                ],
                "get_all_collection_keys": [
                    "self"
                ],
                "clear_collection": [
                    "self",
                    "name"
                ],
                "_original_op": [
                    "self",
                    "op"
                ],
                "name_scope": [
                    "self",
                    "name"
                ],
                "unique_name": [
                    "self",
                    "name",
                    "mark_as_used"
                ],
                "colocate_with": [
                    "self",
                    "op",
                    "ignore_existing"
                ],
                "device": [
                    "self",
                    "device_name_or_function"
                ],
                "_apply_device_functions": [
                    "self",
                    "op"
                ],
                "container": [
                    "self",
                    "container_name"
                ],
                "_push_control_dependencies_controller": [
                    "self",
                    "controller"
                ],
                "_pop_control_dependencies_controller": [
                    "self",
                    "controller"
                ],
                "_current_control_dependencies": [
                    "self"
                ],
                "_control_dependencies_for_inputs": [
                    "self",
                    "input_tensors"
                ],
                "_record_op_seen_by_control_dependencies": [
                    "self",
                    "op"
                ],
                "control_dependencies": [
                    "self",
                    "control_inputs"
                ],
                "_attr_scope": [
                    "self",
                    "attr_map"
                ],
                "_kernel_label_map": [
                    "self",
                    "op_to_kernel_label_map"
                ],
                "gradient_override_map": [
                    "self",
                    "op_type_map"
                ],
                "prevent_feeding": [
                    "self",
                    "tensor"
                ],
                "is_feedable": [
                    "self",
                    "tensor"
                ],
                "prevent_fetching": [
                    "self",
                    "op"
                ],
                "is_fetchable": [
                    "self",
                    "tensor_or_op"
                ]
            },
            "_DefaultStack": {
                "__init__": [
                    "self"
                ],
                "get_default": [
                    "self"
                ],
                "reset": [
                    "self"
                ],
                "enforce_nesting": [
                    "self",
                    "value"
                ],
                "get_controller": [
                    "self",
                    "default"
                ]
            },
            "_DefaultGraphStack": {
                "__init__": [
                    "self"
                ],
                "get_default": [
                    "self"
                ],
                "_GetGlobalDefaultGraph": [
                    "self"
                ],
                "reset": [
                    "self"
                ]
            },
            "GraphKeys": {
                "VARIABLES": [
                    "cls"
                ]
            }
        },
        "tensorflow.python.framework.importer": {
            "_GetNodeAttr": [
                "node_def",
                "attr_name"
            ],
            "_ArgToTypesNoRef": [
                "node_def",
                "arg_def"
            ],
            "_SingleArgToTypes": [
                "node_def",
                "arg_def"
            ],
            "_ArgsToTypes": [
                "node_def",
                "arg_list"
            ],
            "_InputTypes": [
                "node_def",
                "op_dict"
            ],
            "_OutputTypes": [
                "node_def",
                "op_dict"
            ],
            "_IsControlInput": [
                "input_name"
            ],
            "_ParseTensorName": [
                "tensor_name"
            ],
            "_CanonicalInputName": [
                "input_name"
            ],
            "_InvalidNodeMessage": [
                "node",
                "message"
            ],
            "_MaybeDevice": [
                "device"
            ],
            "_FindAttrInOpDef": [
                "attr_name",
                "op_def"
            ],
            "import_graph_def": [
                "graph_def",
                "input_map",
                "return_elements",
                "name",
                "op_dict",
                "producer_op_list"
            ]
        },
        "tensorflow.python.framework.subscribe": {
            "_recursive_apply": [
                "tensors",
                "apply_fn"
            ],
            "_subscribe": [
                "tensor",
                "side_effects",
                "control_cache"
            ],
            "subscribe": [
                "tensors",
                "side_effects"
            ],
            "_ControlOutputCache": {
                "__init__": [
                    "self"
                ],
                "calc_control_outputs": [
                    "self",
                    "graph"
                ],
                "get_control_outputs": [
                    "self",
                    "op"
                ]
            }
        },
        "tensorflow.python.framework.common_shapes": {
            "scalar_shape": [
                "unused_op"
            ],
            "unchanged_shape": [
                "op"
            ],
            "unchanged_shape_with_rank": [
                "rank"
            ],
            "unchanged_shape_with_rank_at_least": [
                "rank"
            ],
            "unchanged_shape_with_rank_at_most": [
                "rank"
            ],
            "matmul_shape": [
                "op"
            ],
            "get_conv_output_size": [
                "input_size",
                "filter_size",
                "strides",
                "padding_type"
            ],
            "get2d_conv_output_size": [
                "input_height",
                "input_width",
                "filter_height",
                "filter_width",
                "row_stride",
                "col_stride",
                "padding_type"
            ],
            "conv2d_shape": [
                "op"
            ],
            "depthwise_conv2d_native_shape": [
                "op"
            ],
            "separable_conv2d_shape": [
                "op"
            ],
            "avg_pool_shape": [
                "op"
            ],
            "max_pool_shape": [
                "op"
            ],
            "no_outputs": [
                "unused_op"
            ],
            "unknown_shape": [
                "op"
            ],
            "broadcast_shape": [
                "shape_x",
                "shape_y"
            ],
            "call_cpp_shape_fn": [
                "op",
                "input_tensors_needed",
                "input_tensors_as_shapes_needed",
                "debug_python_shape_fn",
                "require_shape_fn"
            ],
            "_call_cpp_shape_fn_impl": [
                "op",
                "input_tensors_needed",
                "input_tensors_as_shapes_needed",
                "debug_python_shape_fn",
                "require_shape_fn"
            ]
        },
        "tensorflow.python.framework.random_seed": {
            "_truncate_seed": [
                "seed"
            ],
            "get_seed": [
                "op_seed"
            ],
            "set_random_seed": [
                "seed"
            ]
        },
        "tensorflow.python.framework.device": {
            "check_valid": [
                "spec"
            ],
            "canonical_name": [
                "device"
            ],
            "merge_device": [
                "spec"
            ],
            "DeviceSpec": {
                "__init__": [
                    "self",
                    "job",
                    "replica",
                    "task",
                    "device_type",
                    "device_index"
                ],
                "_clear": [
                    "self"
                ],
                "job": [
                    "self",
                    "job"
                ],
                "replica": [
                    "self",
                    "replica"
                ],
                "task": [
                    "self",
                    "task"
                ],
                "parse_from_string": [
                    "self",
                    "spec"
                ],
                "merge_from": [
                    "self",
                    "dev"
                ],
                "to_string": [
                    "self"
                ],
                "from_string": [
                    "spec"
                ]
            }
        },
        "tensorflow.python.framework.errors_impl": {
            "exception_type_from_error_code": [
                "error_code"
            ],
            "error_code_from_exception_type": [
                "cls"
            ],
            "_make_specific_exception": [
                "node_def",
                "op",
                "message",
                "error_code"
            ],
            "raise_exception_on_not_ok_status": [],
            "OpError": {
                "__init__": [
                    "self",
                    "node_def",
                    "op",
                    "message",
                    "error_code"
                ],
                "message": [
                    "self"
                ],
                "op": [
                    "self"
                ],
                "error_code": [
                    "self"
                ],
                "node_def": [
                    "self"
                ],
                "__str__": [
                    "self"
                ]
            },
            "CancelledError": {
                "__init__": [
                    "self",
                    "node_def",
                    "op",
                    "message"
                ]
            },
            "UnknownError": {
                "__init__": [
                    "self",
                    "node_def",
                    "op",
                    "message",
                    "error_code"
                ]
            },
            "InvalidArgumentError": {
                "__init__": [
                    "self",
                    "node_def",
                    "op",
                    "message"
                ]
            },
            "DeadlineExceededError": {
                "__init__": [
                    "self",
                    "node_def",
                    "op",
                    "message"
                ]
            },
            "NotFoundError": {
                "__init__": [
                    "self",
                    "node_def",
                    "op",
                    "message"
                ]
            },
            "AlreadyExistsError": {
                "__init__": [
                    "self",
                    "node_def",
                    "op",
                    "message"
                ]
            },
            "PermissionDeniedError": {
                "__init__": [
                    "self",
                    "node_def",
                    "op",
                    "message"
                ]
            },
            "UnauthenticatedError": {
                "__init__": [
                    "self",
                    "node_def",
                    "op",
                    "message"
                ]
            },
            "ResourceExhaustedError": {
                "__init__": [
                    "self",
                    "node_def",
                    "op",
                    "message"
                ]
            },
            "FailedPreconditionError": {
                "__init__": [
                    "self",
                    "node_def",
                    "op",
                    "message"
                ]
            },
            "AbortedError": {
                "__init__": [
                    "self",
                    "node_def",
                    "op",
                    "message"
                ]
            },
            "OutOfRangeError": {
                "__init__": [
                    "self",
                    "node_def",
                    "op",
                    "message"
                ]
            },
            "UnimplementedError": {
                "__init__": [
                    "self",
                    "node_def",
                    "op",
                    "message"
                ]
            },
            "InternalError": {
                "__init__": [
                    "self",
                    "node_def",
                    "op",
                    "message"
                ]
            },
            "UnavailableError": {
                "__init__": [
                    "self",
                    "node_def",
                    "op",
                    "message"
                ]
            },
            "DataLossError": {
                "__init__": [
                    "self",
                    "node_def",
                    "op",
                    "message"
                ]
            }
        },
        "tensorflow.python.framework.function": {
            "_make_argname_from_tensor_name": [
                "name"
            ],
            "_tensor_to_argdef": [
                "t",
                "name",
                "used_names"
            ],
            "_get_node_def": [
                "op"
            ],
            "_get_op_def": [
                "op"
            ],
            "_is_in_placeholders": [
                "op",
                "func_arg_placeholders"
            ],
            "_create_input_dict": [
                "function_graph",
                "func_arg_placeholders"
            ],
            "_add_op_node": [
                "op",
                "func",
                "input_dict"
            ],
            "_graph_to_function_def": [
                "graph",
                "inputs",
                "outputs",
                "out_names"
            ],
            "_parse_kwargs_as_attrs": [],
            "_call": [
                "sig"
            ],
            "_get_func_name": [
                "func"
            ],
            "get_extra_vars": [],
            "get_extra_inputs": [],
            "get_extra_args": [],
            "_type_list_to_str": [
                "types"
            ],
            "_FuncGraph": {
                "__init__": [
                    "self"
                ],
                "getvar": [
                    "self",
                    "getter",
                    "name",
                    "shape",
                    "dtype",
                    "initializer",
                    "trainable",
                    "collections"
                ],
                "create_op": [
                    "self",
                    "op_type",
                    "inputs",
                    "data_types"
                ]
            },
            "_DefinedFunction": {
                "__init__": [
                    "self",
                    "func",
                    "argnames",
                    "input_types",
                    "func_name",
                    "grad_func",
                    "python_grad_func",
                    "out_names"
                ],
                "name": [
                    "self"
                ],
                "definition": [
                    "self"
                ],
                "set_grad_func": [
                    "self",
                    "grad_func"
                ],
                "grad_func_name": [
                    "self"
                ],
                "python_grad_func": [
                    "self"
                ],
                "declared_input_types": [
                    "self"
                ],
                "captured_inputs": [
                    "self"
                ],
                "_create_definition_if_needed": [
                    "self"
                ],
                "__hash__": [
                    "self"
                ],
                "add_to_graph": [
                    "self",
                    "g"
                ],
                "__call__": [
                    "self"
                ]
            },
            "_OverloadedFunction": {
                "__init__": [
                    "self",
                    "func",
                    "argnames",
                    "func_name",
                    "grad_func",
                    "python_grad_func",
                    "out_names"
                ],
                "instantiate": [
                    "self",
                    "input_types"
                ],
                "__call__": [
                    "self"
                ]
            },
            "Defun": {
                "__init__": [
                    "self"
                ],
                "__call__": [
                    "self",
                    "func"
                ]
            },
            "Declare": {
                "__init__": [
                    "self",
                    "func_name",
                    "inputs",
                    "outputs"
                ],
                "__call__": [
                    "self"
                ]
            }
        },
        "tensorflow.python.framework.graph_util": {},
        "tensorflow.python.framework.cpp_shape_inference_pb2": {},
        "tensorflow.python.framework.meta_graph": {
            "_node_def": [
                "from_node_def",
                "export_scope",
                "unbound_inputs",
                "clear_devices"
            ],
            "_read_file": [
                "filename"
            ],
            "ops_used_by_graph_def": [
                "graph_def"
            ],
            "stripped_op_list_for_graph": [
                "graph_def"
            ],
            "_get_kind_name": [
                "item"
            ],
            "_should_include_node": [
                "node_or_node_name",
                "export_scope"
            ],
            "add_collection_def": [
                "meta_graph_def",
                "key",
                "graph",
                "export_scope"
            ],
            "create_meta_graph_def": [
                "meta_info_def",
                "graph_def",
                "saver_def",
                "collection_list",
                "graph",
                "export_scope"
            ],
            "read_meta_graph_file": [
                "filename"
            ],
            "import_scoped_meta_graph": [
                "meta_graph_or_file",
                "clear_devices",
                "graph",
                "import_scope",
                "input_map",
                "unbound_inputs_col_name"
            ],
            "export_scoped_meta_graph": [
                "filename",
                "graph_def",
                "graph",
                "export_scope",
                "as_text",
                "unbound_inputs_col_name",
                "clear_devices"
            ],
            "copy_scoped_meta_graph": [
                "from_scope",
                "to_scope",
                "from_graph",
                "to_graph"
            ]
        },
        "tensorflow.python.framework.op_def_registry": {
            "register_op_list": [
                "op_list"
            ],
            "get_registered_ops": []
        },
        "tensorflow.python.framework.framework_lib": {},
        "tensorflow.python.framework.test_util": {
            "assert_ops_in_graph": [
                "expected_ops",
                "graph"
            ],
            "assert_equal_graph_def": [
                "actual",
                "expected",
                "checkpoint_v2"
            ],
            "_strip_checkpoint_v2_randomized": [
                "graph_def"
            ],
            "IsGoogleCudaEnabled": [],
            "CudaSupportsHalfMatMulAndConv": [],
            "TensorFlowTestCase": {
                "__init__": [
                    "self",
                    "methodName"
                ],
                "setUp": [
                    "self"
                ],
                "tearDown": [
                    "self"
                ],
                "_ClearCachedSession": [
                    "self"
                ],
                "get_temp_dir": [
                    "self"
                ],
                "_AssertProtoEquals": [
                    "self",
                    "a",
                    "b"
                ],
                "assertProtoEquals": [
                    "self",
                    "expected_message_maybe_ascii",
                    "message"
                ],
                "assertProtoEqualsVersion": [
                    "self",
                    "expected",
                    "actual",
                    "producer",
                    "min_consumer"
                ],
                "assertStartsWith": [
                    "self",
                    "actual",
                    "expected_start",
                    "msg"
                ],
                "test_session": [
                    "self",
                    "graph",
                    "config",
                    "use_gpu",
                    "force_gpu"
                ],
                "checkedThread": [
                    "self",
                    "target",
                    "args",
                    "kwargs"
                ],
                "assertNear": [
                    "self",
                    "f1",
                    "f2",
                    "err",
                    "msg"
                ],
                "assertArrayNear": [
                    "self",
                    "farray1",
                    "farray2",
                    "err"
                ],
                "_NDArrayNear": [
                    "self",
                    "ndarray1",
                    "ndarray2",
                    "err"
                ],
                "assertNDArrayNear": [
                    "self",
                    "ndarray1",
                    "ndarray2",
                    "err"
                ],
                "_GetNdArray": [
                    "self",
                    "a"
                ],
                "assertAllClose": [
                    "self",
                    "a",
                    "b",
                    "rtol",
                    "atol"
                ],
                "assertAllCloseAccordingToType": [
                    "self",
                    "a",
                    "b",
                    "rtol",
                    "atol"
                ],
                "assertAllEqual": [
                    "self",
                    "a",
                    "b"
                ],
                "assertRaisesWithPredicateMatch": [
                    "self",
                    "exception_type",
                    "expected_err_re_or_predicate"
                ],
                "assertRaisesOpError": [
                    "self",
                    "expected_err_re_or_predicate"
                ],
                "assertShapeEqual": [
                    "self",
                    "np_array",
                    "tf_tensor"
                ],
                "assertDeviceEqual": [
                    "self",
                    "device1",
                    "device2"
                ]
            }
        },
        "tensorflow.python.framework.sparse_tensor": {
            "convert_to_tensor_or_sparse_tensor": [
                "value",
                "dtype",
                "name"
            ],
            "SparseTensor": {
                "from_value": [
                    "cls",
                    "sparse_tensor_value"
                ],
                "__init__": [
                    "self",
                    "indices",
                    "values",
                    "dense_shape"
                ],
                "get_shape": [
                    "self"
                ],
                "indices": [
                    "self"
                ],
                "values": [
                    "self"
                ],
                "op": [
                    "self"
                ],
                "dtype": [
                    "self"
                ],
                "dense_shape": [
                    "self"
                ],
                "graph": [
                    "self"
                ],
                "__str__": [
                    "self"
                ],
                "eval": [
                    "self",
                    "feed_dict",
                    "session"
                ],
                "_override_operator": [
                    "operator",
                    "func"
                ]
            }
        },
        "tensorflow.python.platform.tf_logging": {
            "TaskLevelStatusMessage": [
                "msg"
            ],
            "flush": [],
            "vlog": [
                "level",
                "msg"
            ],
            "_GetNextLogCountPerToken": [
                "token"
            ],
            "log_every_n": [
                "level",
                "msg",
                "n"
            ],
            "log_first_n": [
                "level",
                "msg",
                "n"
            ],
            "log_if": [
                "level",
                "msg",
                "condition"
            ],
            "_GetFileAndLine": [],
            "google2_log_prefix": [
                "level",
                "timestamp",
                "file_and_line"
            ],
            "get_verbosity": [],
            "set_verbosity": [
                "verbosity"
            ],
            "_get_thread_id": []
        },
        "tensorflow.python.platform": {},
        "tensorflow.python.platform.app": {
            "run": [
                "main",
                "argv"
            ]
        },
        "tensorflow.python.platform.benchmark": {
            "_global_report_benchmark": [
                "name",
                "iters",
                "cpu_time",
                "wall_time",
                "throughput",
                "extras"
            ],
            "_run_benchmarks": [
                "regex"
            ],
            "benchmarks_main": [
                "true_main",
                "argv"
            ],
            "_BenchmarkRegistrar": {
                "__new__": [
                    "mcs",
                    "clsname",
                    "base",
                    "attrs"
                ]
            },
            "Benchmark": {
                "is_abstract": [
                    "cls"
                ],
                "_get_name": [
                    "self",
                    "overwrite_name"
                ],
                "report_benchmark": [
                    "self",
                    "iters",
                    "cpu_time",
                    "wall_time",
                    "throughput",
                    "extras",
                    "name"
                ]
            },
            "TensorFlowBenchmark": {
                "is_abstract": [
                    "cls"
                ],
                "run_op_benchmark": [
                    "self",
                    "sess",
                    "op_or_tensor",
                    "feed_dict",
                    "burn_iters",
                    "min_iters",
                    "store_trace",
                    "store_memory_usage",
                    "name",
                    "extras",
                    "mbs"
                ]
            }
        },
        "tensorflow.python.platform.test": {
            "main": [
                "argv"
            ],
            "get_temp_dir": [],
            "test_src_dir_path": [
                "relative_path"
            ],
            "is_built_with_cuda": [],
            "is_gpu_available": [
                "cuda_only"
            ],
            "gpu_device_name": []
        },
        "tensorflow.python.platform.parameterized": {},
        "tensorflow.python.platform.googletest": {
            "g_main": [
                "argv"
            ],
            "main": [
                "argv"
            ],
            "GetTempDir": [],
            "test_src_dir_path": [
                "relative_path"
            ],
            "StatefulSessionAvailable": [],
            "StubOutForTesting": {
                "__init__": [
                    "self"
                ],
                "__del__": [
                    "self"
                ],
                "__enter__": [
                    "self"
                ],
                "__exit__": [
                    "self",
                    "unused_exc_type",
                    "unused_exc_value",
                    "unused_tb"
                ],
                "CleanUp": [
                    "self"
                ],
                "SmartSet": [
                    "self",
                    "obj",
                    "attr_name",
                    "new_attr"
                ],
                "SmartUnsetAll": [
                    "self"
                ],
                "Set": [
                    "self",
                    "parent",
                    "child_name",
                    "new_child"
                ],
                "UnsetAll": [
                    "self"
                ]
            }
        },
        "tensorflow.python.platform.resource_loader": {
            "load_resource": [
                "path"
            ],
            "get_data_files_path": [],
            "get_path_to_datafile": [
                "path"
            ],
            "readahead_file_path": [
                "path",
                "unused_readahead"
            ]
        },
        "tensorflow.python.platform.flags": {
            "_define_helper": [
                "flag_name",
                "default_value",
                "docstring",
                "flagtype"
            ],
            "DEFINE_string": [
                "flag_name",
                "default_value",
                "docstring"
            ],
            "DEFINE_integer": [
                "flag_name",
                "default_value",
                "docstring"
            ],
            "DEFINE_boolean": [
                "flag_name",
                "default_value",
                "docstring"
            ],
            "DEFINE_float": [
                "flag_name",
                "default_value",
                "docstring"
            ],
            "_FlagValues": {
                "__init__": [
                    "self"
                ],
                "_parse_flags": [
                    "self",
                    "args"
                ],
                "__getattr__": [
                    "self",
                    "name"
                ],
                "__setattr__": [
                    "self",
                    "name",
                    "value"
                ]
            }
        },
        "tensorflow.python.platform.gfile": {
            "GFile": {
                "__init__": [
                    "self",
                    "name",
                    "mode"
                ]
            },
            "FastGFile": {
                "__init__": [
                    "self",
                    "name",
                    "mode"
                ]
            }
        },
        "tensorflow.python.platform.status_bar": {
            "SetupStatusBarInsideGoogle": [
                "unused_link_text",
                "unused_port"
            ]
        },
        "tensorflow.python.platform.sysconfig": {
            "get_include": [],
            "get_lib": []
        },
        "tensorflow.python.platform.control_imports": {},
        "tensorflow.tools": {},
        "tensorflow.tools.tfprof.tfprof_output_pb2": {},
        "tensorflow.tools.tfprof": {},
        "tensorflow.tools.tfprof.tfprof_options_pb2": {},
        "tensorflow.tools.tfprof.tfprof_log_pb2": {},
        "tensorflow.tools.pip_package.setup": {
            "find_files": [
                "pattern",
                "root"
            ],
            "BinaryDistribution": {
                "has_ext_modules": [
                    "self"
                ]
            },
            "InstallCommand": {
                "finalize_options": [
                    "self"
                ]
            },
            "InstallHeaders": {
                "initialize_options": [
                    "self"
                ],
                "finalize_options": [
                    "self"
                ],
                "mkdir_and_copy_file": [
                    "self",
                    "header"
                ],
                "run": [
                    "self"
                ],
                "get_inputs": [
                    "self"
                ],
                "get_outputs": [
                    "self"
                ]
            }
        },
        "tensorflow.tools.pip_package": {},
        "tensorflow.tools.pip_package.simple_console": {
            "main": [
                "_"
            ]
        },
        "external": {},
        "external.six_archive": {},
        "external.six_archive.six": {
            "_add_doc": [
                "func",
                "doc"
            ],
            "_import_module": [
                "name"
            ],
            "add_move": [
                "move"
            ],
            "remove_move": [
                "name"
            ],
            "assertCountEqual": [
                "self"
            ],
            "assertRaisesRegex": [
                "self"
            ],
            "assertRegex": [
                "self"
            ],
            "with_metaclass": [
                "meta"
            ],
            "add_metaclass": [
                "metaclass"
            ],
            "python_2_unicode_compatible": [
                "klass"
            ],
            "_LazyDescr": {
                "__init__": [
                    "self",
                    "name"
                ],
                "__get__": [
                    "self",
                    "obj",
                    "tp"
                ]
            },
            "MovedModule": {
                "__init__": [
                    "self",
                    "name",
                    "old",
                    "new"
                ],
                "_resolve": [
                    "self"
                ],
                "__getattr__": [
                    "self",
                    "attr"
                ]
            },
            "_LazyModule": {
                "__init__": [
                    "self",
                    "name"
                ],
                "__dir__": [
                    "self"
                ]
            },
            "MovedAttribute": {
                "__init__": [
                    "self",
                    "name",
                    "old_mod",
                    "new_mod",
                    "old_attr",
                    "new_attr"
                ],
                "_resolve": [
                    "self"
                ]
            },
            "_SixMetaPathImporter": {
                "__init__": [
                    "self",
                    "six_module_name"
                ],
                "_add_module": [
                    "self",
                    "mod"
                ],
                "_get_module": [
                    "self",
                    "fullname"
                ],
                "find_module": [
                    "self",
                    "fullname",
                    "path"
                ],
                "__get_module": [
                    "self",
                    "fullname"
                ],
                "load_module": [
                    "self",
                    "fullname"
                ],
                "is_package": [
                    "self",
                    "fullname"
                ],
                "get_code": [
                    "self",
                    "fullname"
                ]
            },
            "_MovedItems": {},
            "Module_six_moves_urllib_parse": {},
            "Module_six_moves_urllib_error": {},
            "Module_six_moves_urllib_request": {},
            "Module_six_moves_urllib_response": {},
            "Module_six_moves_urllib_robotparser": {},
            "Module_six_moves_urllib": {
                "__dir__": [
                    "self"
                ]
            }
        },
        "external.protobuf": {},
        "external.protobuf.pyext": {},
        "external.protobuf.internal": {},
        "external.protobuf.python": {},
        "external.protobuf.python.google": {},
        "external.protobuf.python.google.protobuf.proto_builder": {
            "_GetMessageFromFactory": [
                "factory",
                "full_name"
            ],
            "MakeSimpleProtoClass": [
                "fields",
                "full_name",
                "pool"
            ],
            "_MakeFileDescriptorProto": [
                "proto_file_name",
                "full_name",
                "field_items"
            ]
        },
        "external.protobuf.python.google.protobuf.symbol_database": {
            "Default": [],
            "SymbolDatabase": {
                "RegisterMessage": [
                    "self",
                    "message"
                ],
                "RegisterEnumDescriptor": [
                    "self",
                    "enum_descriptor"
                ],
                "RegisterFileDescriptor": [
                    "self",
                    "file_descriptor"
                ],
                "GetSymbol": [
                    "self",
                    "symbol"
                ],
                "GetMessages": [
                    "self",
                    "files"
                ]
            }
        },
        "external.protobuf.python.google.protobuf.api_pb2": {},
        "external.protobuf.python.google.protobuf": {},
        "external.protobuf.python.google.protobuf.text_encoding": {
            "CEscape": [
                "text",
                "as_utf8"
            ],
            "CUnescape": [
                "text"
            ]
        },
        "external.protobuf.python.google.protobuf.text_format": {
            "MessageToString": [
                "message",
                "as_utf8",
                "as_one_line",
                "pointy_brackets",
                "use_index_order",
                "float_format",
                "use_field_number",
                "descriptor_pool",
                "indent"
            ],
            "_IsMapEntry": [
                "field"
            ],
            "PrintMessage": [
                "message",
                "out",
                "indent",
                "as_utf8",
                "as_one_line",
                "pointy_brackets",
                "use_index_order",
                "float_format",
                "use_field_number",
                "descriptor_pool"
            ],
            "PrintField": [
                "field",
                "value",
                "out",
                "indent",
                "as_utf8",
                "as_one_line",
                "pointy_brackets",
                "use_index_order",
                "float_format"
            ],
            "PrintFieldValue": [
                "field",
                "value",
                "out",
                "indent",
                "as_utf8",
                "as_one_line",
                "pointy_brackets",
                "use_index_order",
                "float_format"
            ],
            "_BuildMessageFromTypeName": [
                "type_name",
                "descriptor_pool"
            ],
            "Parse": [
                "text",
                "message",
                "allow_unknown_extension",
                "allow_field_number"
            ],
            "Merge": [
                "text",
                "message",
                "allow_unknown_extension",
                "allow_field_number",
                "descriptor_pool"
            ],
            "ParseLines": [
                "lines",
                "message",
                "allow_unknown_extension",
                "allow_field_number"
            ],
            "MergeLines": [
                "lines",
                "message",
                "allow_unknown_extension",
                "allow_field_number",
                "descriptor_pool"
            ],
            "_SkipFieldContents": [
                "tokenizer"
            ],
            "_SkipField": [
                "tokenizer"
            ],
            "_SkipFieldMessage": [
                "tokenizer"
            ],
            "_SkipFieldValue": [
                "tokenizer"
            ],
            "_ConsumeInt32": [
                "tokenizer"
            ],
            "_ConsumeUint32": [
                "tokenizer"
            ],
            "_TryConsumeInt64": [
                "tokenizer"
            ],
            "_ConsumeInt64": [
                "tokenizer"
            ],
            "_TryConsumeUint64": [
                "tokenizer"
            ],
            "_ConsumeUint64": [
                "tokenizer"
            ],
            "_TryConsumeInteger": [
                "tokenizer",
                "is_signed",
                "is_long"
            ],
            "_ConsumeInteger": [
                "tokenizer",
                "is_signed",
                "is_long"
            ],
            "ParseInteger": [
                "text",
                "is_signed",
                "is_long"
            ],
            "_ParseAbstractInteger": [
                "text",
                "is_long"
            ],
            "ParseFloat": [
                "text"
            ],
            "ParseBool": [
                "text"
            ],
            "ParseEnum": [
                "field",
                "value"
            ],
            "Error": {},
            "ParseError": {
                "__init__": [
                    "self",
                    "message",
                    "line",
                    "column"
                ],
                "GetLine": [
                    "self"
                ],
                "GetColumn": [
                    "self"
                ]
            },
            "TextWriter": {
                "__init__": [
                    "self",
                    "as_utf8"
                ],
                "write": [
                    "self",
                    "val"
                ],
                "close": [
                    "self"
                ],
                "getvalue": [
                    "self"
                ]
            },
            "_Printer": {
                "__init__": [
                    "self",
                    "out",
                    "indent",
                    "as_utf8",
                    "as_one_line",
                    "pointy_brackets",
                    "use_index_order",
                    "float_format",
                    "use_field_number",
                    "descriptor_pool"
                ],
                "_TryPrintAsAnyMessage": [
                    "self",
                    "message"
                ],
                "PrintMessage": [
                    "self",
                    "message"
                ],
                "PrintField": [
                    "self",
                    "field",
                    "value"
                ],
                "_PrintMessageFieldValue": [
                    "self",
                    "value"
                ],
                "PrintFieldValue": [
                    "self",
                    "field",
                    "value"
                ]
            },
            "_Parser": {
                "__init__": [
                    "self",
                    "allow_unknown_extension",
                    "allow_field_number",
                    "descriptor_pool"
                ],
                "ParseFromString": [
                    "self",
                    "text",
                    "message"
                ],
                "ParseLines": [
                    "self",
                    "lines",
                    "message"
                ],
                "MergeFromString": [
                    "self",
                    "text",
                    "message"
                ],
                "MergeLines": [
                    "self",
                    "lines",
                    "message"
                ],
                "_ParseOrMerge": [
                    "self",
                    "lines",
                    "message"
                ],
                "_MergeField": [
                    "self",
                    "tokenizer",
                    "message"
                ],
                "_ConsumeAnyTypeUrl": [
                    "self",
                    "tokenizer"
                ],
                "_MergeMessageField": [
                    "self",
                    "tokenizer",
                    "message",
                    "field"
                ],
                "_MergeScalarField": [
                    "self",
                    "tokenizer",
                    "message",
                    "field"
                ]
            },
            "Tokenizer": {
                "__init__": [
                    "self",
                    "lines",
                    "skip_comments"
                ],
                "LookingAt": [
                    "self",
                    "token"
                ],
                "AtEnd": [
                    "self"
                ],
                "_PopLine": [
                    "self"
                ],
                "_SkipWhitespace": [
                    "self"
                ],
                "TryConsume": [
                    "self",
                    "token"
                ],
                "Consume": [
                    "self",
                    "token"
                ],
                "ConsumeComment": [
                    "self"
                ],
                "TryConsumeIdentifier": [
                    "self"
                ],
                "ConsumeIdentifier": [
                    "self"
                ],
                "TryConsumeIdentifierOrNumber": [
                    "self"
                ],
                "ConsumeIdentifierOrNumber": [
                    "self"
                ],
                "TryConsumeInteger": [
                    "self"
                ],
                "ConsumeInteger": [
                    "self",
                    "is_long"
                ],
                "TryConsumeFloat": [
                    "self"
                ],
                "ConsumeFloat": [
                    "self"
                ],
                "ConsumeBool": [
                    "self"
                ],
                "TryConsumeByteString": [
                    "self"
                ],
                "ConsumeString": [
                    "self"
                ],
                "ConsumeByteString": [
                    "self"
                ],
                "_ConsumeSingleByteString": [
                    "self"
                ],
                "ConsumeEnum": [
                    "self",
                    "field"
                ],
                "ParseErrorPreviousToken": [
                    "self",
                    "message"
                ],
                "ParseError": [
                    "self",
                    "message"
                ],
                "_StringParseError": [
                    "self",
                    "e"
                ],
                "NextToken": [
                    "self"
                ]
            }
        },
        "external.protobuf.python.google.protobuf.reflection": {
            "ParseMessage": [
                "descriptor",
                "byte_str"
            ],
            "MakeClass": [
                "descriptor"
            ]
        },
        "external.protobuf.python.google.protobuf.message": {
            "Error": {},
            "DecodeError": {},
            "EncodeError": {},
            "Message": {
                "__deepcopy__": [
                    "self",
                    "memo"
                ],
                "__eq__": [
                    "self",
                    "other_msg"
                ],
                "__ne__": [
                    "self",
                    "other_msg"
                ],
                "__hash__": [
                    "self"
                ],
                "__str__": [
                    "self"
                ],
                "__unicode__": [
                    "self"
                ],
                "MergeFrom": [
                    "self",
                    "other_msg"
                ],
                "CopyFrom": [
                    "self",
                    "other_msg"
                ],
                "Clear": [
                    "self"
                ],
                "SetInParent": [
                    "self"
                ],
                "IsInitialized": [
                    "self"
                ],
                "MergeFromString": [
                    "self",
                    "serialized"
                ],
                "ParseFromString": [
                    "self",
                    "serialized"
                ],
                "SerializeToString": [
                    "self"
                ],
                "SerializePartialToString": [
                    "self"
                ],
                "ListFields": [
                    "self"
                ],
                "HasField": [
                    "self",
                    "field_name"
                ],
                "ClearField": [
                    "self",
                    "field_name"
                ],
                "WhichOneof": [
                    "self",
                    "oneof_group"
                ],
                "HasExtension": [
                    "self",
                    "extension_handle"
                ],
                "ClearExtension": [
                    "self",
                    "extension_handle"
                ],
                "DiscardUnknownFields": [
                    "self"
                ],
                "ByteSize": [
                    "self"
                ],
                "_SetListener": [
                    "self",
                    "message_listener"
                ],
                "__getstate__": [
                    "self"
                ],
                "__setstate__": [
                    "self",
                    "state"
                ]
            }
        },
        "external.protobuf.python.google.protobuf.any_pb2": {},
        "external.protobuf.python.google.protobuf.descriptor": {
            "_ParseOptions": [
                "message",
                "string"
            ],
            "_ToCamelCase": [
                "name"
            ],
            "_OptionsOrNone": [
                "descriptor_proto"
            ],
            "_ToJsonName": [
                "name"
            ],
            "MakeDescriptor": [
                "desc_proto",
                "package",
                "build_file_if_cpp",
                "syntax"
            ],
            "Error": {},
            "TypeTransformationError": {},
            "DescriptorBase": {
                "__init__": [
                    "self",
                    "options",
                    "options_class_name"
                ],
                "_SetOptions": [
                    "self",
                    "options",
                    "options_class_name"
                ],
                "GetOptions": [
                    "self"
                ]
            },
            "_NestedDescriptorBase": {
                "__init__": [
                    "self",
                    "options",
                    "options_class_name",
                    "name",
                    "full_name",
                    "file",
                    "containing_type",
                    "serialized_start",
                    "serialized_end"
                ],
                "CopyToProto": [
                    "self",
                    "proto"
                ]
            },
            "Descriptor": {
                "__init__": [
                    "self",
                    "name",
                    "full_name",
                    "filename",
                    "containing_type",
                    "fields",
                    "nested_types",
                    "enum_types",
                    "extensions",
                    "options",
                    "is_extendable",
                    "extension_ranges",
                    "oneofs",
                    "file",
                    "serialized_start",
                    "serialized_end",
                    "syntax"
                ],
                "fields_by_camelcase_name": [
                    "self"
                ],
                "EnumValueName": [
                    "self",
                    "enum",
                    "value"
                ],
                "CopyToProto": [
                    "self",
                    "proto"
                ]
            },
            "FieldDescriptor": {
                "__init__": [
                    "self",
                    "name",
                    "full_name",
                    "index",
                    "number",
                    "type",
                    "cpp_type",
                    "label",
                    "default_value",
                    "message_type",
                    "enum_type",
                    "containing_type",
                    "is_extension",
                    "extension_scope",
                    "options",
                    "has_default_value",
                    "containing_oneof",
                    "json_name"
                ],
                "camelcase_name": [
                    "self"
                ],
                "ProtoTypeToCppProtoType": [
                    "proto_type"
                ]
            },
            "EnumDescriptor": {
                "__init__": [
                    "self",
                    "name",
                    "full_name",
                    "filename",
                    "values",
                    "containing_type",
                    "options",
                    "file",
                    "serialized_start",
                    "serialized_end"
                ],
                "CopyToProto": [
                    "self",
                    "proto"
                ]
            },
            "EnumValueDescriptor": {
                "__init__": [
                    "self",
                    "name",
                    "index",
                    "number",
                    "type",
                    "options"
                ]
            },
            "OneofDescriptor": {
                "__init__": [
                    "self",
                    "name",
                    "full_name",
                    "index",
                    "containing_type",
                    "fields",
                    "options"
                ]
            },
            "ServiceDescriptor": {
                "__init__": [
                    "self",
                    "name",
                    "full_name",
                    "index",
                    "methods",
                    "options",
                    "file",
                    "serialized_start",
                    "serialized_end"
                ],
                "FindMethodByName": [
                    "self",
                    "name"
                ],
                "CopyToProto": [
                    "self",
                    "proto"
                ]
            },
            "MethodDescriptor": {
                "__init__": [
                    "self",
                    "name",
                    "full_name",
                    "index",
                    "containing_service",
                    "input_type",
                    "output_type",
                    "options"
                ]
            },
            "FileDescriptor": {
                "__init__": [
                    "self",
                    "name",
                    "package",
                    "options",
                    "serialized_pb",
                    "dependencies",
                    "public_dependencies",
                    "syntax",
                    "pool"
                ],
                "CopyToProto": [
                    "self",
                    "proto"
                ]
            }
        },
        "external.protobuf.python.google.protobuf.timestamp_pb2": {},
        "external.protobuf.python.google.protobuf.descriptor_pool": {
            "_NormalizeFullyQualifiedName": [
                "name"
            ],
            "_OptionsOrNone": [
                "descriptor_proto"
            ],
            "_PrefixWithDot": [
                "name"
            ],
            "Default": [],
            "DescriptorPool": {
                "__init__": [
                    "self",
                    "descriptor_db"
                ],
                "Add": [
                    "self",
                    "file_desc_proto"
                ],
                "AddSerializedFile": [
                    "self",
                    "serialized_file_desc_proto"
                ],
                "AddDescriptor": [
                    "self",
                    "desc"
                ],
                "AddEnumDescriptor": [
                    "self",
                    "enum_desc"
                ],
                "AddFileDescriptor": [
                    "self",
                    "file_desc"
                ],
                "FindFileByName": [
                    "self",
                    "file_name"
                ],
                "FindFileContainingSymbol": [
                    "self",
                    "symbol"
                ],
                "FindMessageTypeByName": [
                    "self",
                    "full_name"
                ],
                "FindEnumTypeByName": [
                    "self",
                    "full_name"
                ],
                "FindFieldByName": [
                    "self",
                    "full_name"
                ],
                "FindExtensionByName": [
                    "self",
                    "full_name"
                ],
                "_ConvertFileProtoToFileDescriptor": [
                    "self",
                    "file_proto"
                ],
                "_ConvertMessageDescriptor": [
                    "self",
                    "desc_proto",
                    "package",
                    "file_desc",
                    "scope",
                    "syntax"
                ],
                "_ConvertEnumDescriptor": [
                    "self",
                    "enum_proto",
                    "package",
                    "file_desc",
                    "containing_type",
                    "scope"
                ],
                "_MakeFieldDescriptor": [
                    "self",
                    "field_proto",
                    "message_name",
                    "index",
                    "is_extension"
                ],
                "_SetAllFieldTypes": [
                    "self",
                    "package",
                    "desc_proto",
                    "scope"
                ],
                "_SetFieldType": [
                    "self",
                    "field_proto",
                    "field_desc",
                    "package",
                    "scope"
                ],
                "_MakeEnumValueDescriptor": [
                    "self",
                    "value_proto",
                    "index"
                ],
                "_MakeServiceDescriptor": [
                    "self",
                    "service_proto",
                    "service_index",
                    "scope",
                    "package",
                    "file_desc"
                ],
                "_MakeMethodDescriptor": [
                    "self",
                    "method_proto",
                    "service_name",
                    "package",
                    "scope",
                    "index"
                ],
                "_ExtractSymbols": [
                    "self",
                    "descriptors"
                ],
                "_GetDeps": [
                    "self",
                    "dependencies"
                ],
                "_GetTypeFromScope": [
                    "self",
                    "package",
                    "type_name",
                    "scope"
                ]
            }
        },
        "external.protobuf.python.google.protobuf.service_reflection": {
            "GeneratedServiceType": {
                "__init__": [
                    "cls",
                    "name",
                    "bases",
                    "dictionary"
                ]
            },
            "GeneratedServiceStubType": {
                "__init__": [
                    "cls",
                    "name",
                    "bases",
                    "dictionary"
                ]
            },
            "_ServiceBuilder": {
                "__init__": [
                    "self",
                    "service_descriptor"
                ],
                "BuildService": [
                    "self",
                    "cls"
                ],
                "_CallMethod": [
                    "self",
                    "srvc",
                    "method_descriptor",
                    "rpc_controller",
                    "request",
                    "callback"
                ],
                "_GetRequestClass": [
                    "self",
                    "method_descriptor"
                ],
                "_GetResponseClass": [
                    "self",
                    "method_descriptor"
                ],
                "_GenerateNonImplementedMethod": [
                    "self",
                    "method"
                ],
                "_NonImplementedMethod": [
                    "self",
                    "method_name",
                    "rpc_controller",
                    "callback"
                ]
            },
            "_ServiceStubBuilder": {
                "__init__": [
                    "self",
                    "service_descriptor"
                ],
                "BuildServiceStub": [
                    "self",
                    "cls"
                ],
                "_GenerateStubMethod": [
                    "self",
                    "method"
                ],
                "_StubMethod": [
                    "self",
                    "stub",
                    "method_descriptor",
                    "rpc_controller",
                    "request",
                    "callback"
                ]
            }
        },
        "external.protobuf.python.google.protobuf.duration_pb2": {},
        "external.protobuf.python.google.protobuf.field_mask_pb2": {},
        "external.protobuf.python.google.protobuf.message_factory": {
            "GetMessages": [
                "file_protos"
            ],
            "MessageFactory": {
                "__init__": [
                    "self",
                    "pool"
                ],
                "GetPrototype": [
                    "self",
                    "descriptor"
                ],
                "GetMessages": [
                    "self",
                    "files"
                ]
            }
        },
        "external.protobuf.python.google.protobuf.descriptor_pb2": {},
        "external.protobuf.python.google.protobuf.type_pb2": {},
        "external.protobuf.python.google.protobuf.wrappers_pb2": {},
        "external.protobuf.python.google.protobuf.empty_pb2": {},
        "external.protobuf.python.google.protobuf.json_format": {
            "MessageToJson": [
                "message",
                "including_default_value_fields",
                "preserving_proto_field_name"
            ],
            "MessageToDict": [
                "message",
                "including_default_value_fields",
                "preserving_proto_field_name"
            ],
            "_IsMapEntry": [
                "field"
            ],
            "_IsWrapperMessage": [
                "message_descriptor"
            ],
            "_DuplicateChecker": [
                "js"
            ],
            "_CreateMessageFromTypeUrl": [
                "type_url"
            ],
            "Parse": [
                "text",
                "message",
                "ignore_unknown_fields"
            ],
            "ParseDict": [
                "js_dict",
                "message",
                "ignore_unknown_fields"
            ],
            "_ConvertScalarFieldValue": [
                "value",
                "field",
                "require_str"
            ],
            "_ConvertInteger": [
                "value"
            ],
            "_ConvertFloat": [
                "value"
            ],
            "_ConvertBool": [
                "value",
                "require_str"
            ],
            "Error": {},
            "SerializeToJsonError": {},
            "ParseError": {},
            "_Printer": {
                "__init__": [
                    "self",
                    "including_default_value_fields",
                    "preserving_proto_field_name"
                ],
                "ToJsonString": [
                    "self",
                    "message"
                ],
                "_MessageToJsonObject": [
                    "self",
                    "message"
                ],
                "_RegularMessageToJsonObject": [
                    "self",
                    "message",
                    "js"
                ],
                "_FieldToJsonObject": [
                    "self",
                    "field",
                    "value"
                ],
                "_AnyMessageToJsonObject": [
                    "self",
                    "message"
                ],
                "_GenericMessageToJsonObject": [
                    "self",
                    "message"
                ],
                "_ValueMessageToJsonObject": [
                    "self",
                    "message"
                ],
                "_ListValueMessageToJsonObject": [
                    "self",
                    "message"
                ],
                "_StructMessageToJsonObject": [
                    "self",
                    "message"
                ],
                "_WrapperMessageToJsonObject": [
                    "self",
                    "message"
                ]
            },
            "_Parser": {
                "__init__": [
                    "self",
                    "ignore_unknown_fields"
                ],
                "ConvertMessage": [
                    "self",
                    "value",
                    "message"
                ],
                "_ConvertFieldValuePair": [
                    "self",
                    "js",
                    "message"
                ],
                "_ConvertAnyMessage": [
                    "self",
                    "value",
                    "message"
                ],
                "_ConvertGenericMessage": [
                    "self",
                    "value",
                    "message"
                ],
                "_ConvertValueMessage": [
                    "self",
                    "value",
                    "message"
                ],
                "_ConvertListValueMessage": [
                    "self",
                    "value",
                    "message"
                ],
                "_ConvertStructMessage": [
                    "self",
                    "value",
                    "message"
                ],
                "_ConvertWrapperMessage": [
                    "self",
                    "value",
                    "message"
                ],
                "_ConvertMapFieldValue": [
                    "self",
                    "value",
                    "message",
                    "field"
                ]
            }
        },
        "external.protobuf.python.google.protobuf.service": {
            "RpcException": {},
            "Service": {
                "GetDescriptor": [],
                "CallMethod": [
                    "self",
                    "method_descriptor",
                    "rpc_controller",
                    "request",
                    "done"
                ],
                "GetRequestClass": [
                    "self",
                    "method_descriptor"
                ],
                "GetResponseClass": [
                    "self",
                    "method_descriptor"
                ]
            },
            "RpcController": {
                "Reset": [
                    "self"
                ],
                "Failed": [
                    "self"
                ],
                "ErrorText": [
                    "self"
                ],
                "StartCancel": [
                    "self"
                ],
                "SetFailed": [
                    "self",
                    "reason"
                ],
                "IsCanceled": [
                    "self"
                ],
                "NotifyOnCancel": [
                    "self",
                    "callback"
                ]
            },
            "RpcChannel": {
                "CallMethod": [
                    "self",
                    "method_descriptor",
                    "rpc_controller",
                    "request",
                    "response_class",
                    "done"
                ]
            }
        },
        "external.protobuf.python.google.protobuf.source_context_pb2": {},
        "external.protobuf.python.google.protobuf.descriptor_database": {
            "_ExtractSymbols": [
                "desc_proto",
                "package"
            ],
            "Error": {},
            "DescriptorDatabaseConflictingDefinitionError": {},
            "DescriptorDatabase": {
                "__init__": [
                    "self"
                ],
                "Add": [
                    "self",
                    "file_desc_proto"
                ],
                "FindFileByName": [
                    "self",
                    "name"
                ],
                "FindFileContainingSymbol": [
                    "self",
                    "symbol"
                ]
            }
        },
        "external.protobuf.python.google.protobuf.struct_pb2": {},
        "external.protobuf.python.google.protobuf.compiler": {},
        "external.protobuf.python.google.protobuf.compiler.plugin_pb2": {},
        "external.protobuf.python.google.protobuf.pyext": {},
        "external.protobuf.python.google.protobuf.pyext.cpp_message": {
            "GeneratedProtocolMessageType": {}
        },
        "external.protobuf.python.google.protobuf.internal.well_known_types": {
            "_CheckDurationValid": [
                "seconds",
                "nanos"
            ],
            "_RoundTowardZero": [
                "value",
                "divider"
            ],
            "_IsValidPath": [
                "message_descriptor",
                "path"
            ],
            "_CheckFieldMaskMessage": [
                "message"
            ],
            "_SnakeCaseToCamelCase": [
                "path_name"
            ],
            "_CamelCaseToSnakeCase": [
                "path_name"
            ],
            "_StrConvert": [
                "value"
            ],
            "_MergeMessage": [
                "node",
                "source",
                "destination",
                "replace_message",
                "replace_repeated"
            ],
            "_AddFieldPaths": [
                "node",
                "prefix",
                "field_mask"
            ],
            "_SetStructValue": [
                "struct_value",
                "value"
            ],
            "_GetStructValue": [
                "struct_value"
            ],
            "Error": {},
            "ParseError": {},
            "Any": {
                "Pack": [
                    "self",
                    "msg",
                    "type_url_prefix"
                ],
                "Unpack": [
                    "self",
                    "msg"
                ],
                "TypeName": [
                    "self"
                ],
                "Is": [
                    "self",
                    "descriptor"
                ]
            },
            "Timestamp": {
                "ToJsonString": [
                    "self"
                ],
                "FromJsonString": [
                    "self",
                    "value"
                ],
                "GetCurrentTime": [
                    "self"
                ],
                "ToNanoseconds": [
                    "self"
                ],
                "ToMicroseconds": [
                    "self"
                ],
                "ToMilliseconds": [
                    "self"
                ],
                "ToSeconds": [
                    "self"
                ],
                "FromNanoseconds": [
                    "self",
                    "nanos"
                ],
                "FromMicroseconds": [
                    "self",
                    "micros"
                ],
                "FromMilliseconds": [
                    "self",
                    "millis"
                ],
                "FromSeconds": [
                    "self",
                    "seconds"
                ],
                "ToDatetime": [
                    "self"
                ],
                "FromDatetime": [
                    "self",
                    "dt"
                ]
            },
            "Duration": {
                "ToJsonString": [
                    "self"
                ],
                "FromJsonString": [
                    "self",
                    "value"
                ],
                "ToNanoseconds": [
                    "self"
                ],
                "ToMicroseconds": [
                    "self"
                ],
                "ToMilliseconds": [
                    "self"
                ],
                "ToSeconds": [
                    "self"
                ],
                "FromNanoseconds": [
                    "self",
                    "nanos"
                ],
                "FromMicroseconds": [
                    "self",
                    "micros"
                ],
                "FromMilliseconds": [
                    "self",
                    "millis"
                ],
                "FromSeconds": [
                    "self",
                    "seconds"
                ],
                "ToTimedelta": [
                    "self"
                ],
                "FromTimedelta": [
                    "self",
                    "td"
                ],
                "_NormalizeDuration": [
                    "self",
                    "seconds",
                    "nanos"
                ]
            },
            "FieldMask": {
                "ToJsonString": [
                    "self"
                ],
                "FromJsonString": [
                    "self",
                    "value"
                ],
                "IsValidForDescriptor": [
                    "self",
                    "message_descriptor"
                ],
                "AllFieldsFromDescriptor": [
                    "self",
                    "message_descriptor"
                ],
                "CanonicalFormFromMask": [
                    "self",
                    "mask"
                ],
                "Union": [
                    "self",
                    "mask1",
                    "mask2"
                ],
                "Intersect": [
                    "self",
                    "mask1",
                    "mask2"
                ],
                "MergeMessage": [
                    "self",
                    "source",
                    "destination",
                    "replace_message_field",
                    "replace_repeated_field"
                ]
            },
            "_FieldMaskTree": {
                "__init__": [
                    "self",
                    "field_mask"
                ],
                "MergeFromFieldMask": [
                    "self",
                    "field_mask"
                ],
                "AddPath": [
                    "self",
                    "path"
                ],
                "ToFieldMask": [
                    "self",
                    "field_mask"
                ],
                "IntersectPath": [
                    "self",
                    "path",
                    "intersection"
                ],
                "AddLeafNodes": [
                    "self",
                    "prefix",
                    "node"
                ],
                "MergeMessage": [
                    "self",
                    "source",
                    "destination",
                    "replace_message",
                    "replace_repeated"
                ]
            },
            "Struct": {
                "__getitem__": [
                    "self",
                    "key"
                ],
                "__setitem__": [
                    "self",
                    "key",
                    "value"
                ],
                "get_or_create_list": [
                    "self",
                    "key"
                ],
                "get_or_create_struct": [
                    "self",
                    "key"
                ]
            },
            "ListValue": {
                "__len__": [
                    "self"
                ],
                "append": [
                    "self",
                    "value"
                ],
                "extend": [
                    "self",
                    "elem_seq"
                ],
                "__getitem__": [
                    "self",
                    "index"
                ],
                "__setitem__": [
                    "self",
                    "index",
                    "value"
                ],
                "items": [
                    "self"
                ],
                "add_struct": [
                    "self"
                ],
                "add_list": [
                    "self"
                ]
            }
        },
        "external.protobuf.python.google.protobuf.internal": {},
        "external.protobuf.python.google.protobuf.internal._parameterized": {
            "_CleanRepr": [
                "obj"
            ],
            "_StrClass": [
                "cls"
            ],
            "_NonStringIterable": [
                "obj"
            ],
            "_FormatParameterList": [
                "testcase_params"
            ],
            "_IsSingletonList": [
                "testcases"
            ],
            "_ModifyClass": [
                "class_object",
                "testcases",
                "naming_type"
            ],
            "_ParameterDecorator": [
                "naming_type",
                "testcases"
            ],
            "Parameters": [],
            "NamedParameters": [],
            "_UpdateClassDictForParamTestCase": [
                "dct",
                "id_suffix",
                "name",
                "iterator"
            ],
            "CoopParameterizedTestCase": [
                "other_base_class"
            ],
            "_ParameterizedTestIter": {
                "__init__": [
                    "self",
                    "test_method",
                    "testcases",
                    "naming_type"
                ],
                "__call__": [
                    "self"
                ],
                "__iter__": [
                    "self"
                ]
            },
            "TestGeneratorMetaclass": {
                "__new__": [
                    "mcs",
                    "class_name",
                    "bases",
                    "dct"
                ]
            },
            "ParameterizedTestCase": {
                "_OriginalName": [
                    "self"
                ],
                "__str__": [
                    "self"
                ],
                "id": [
                    "self"
                ]
            }
        },
        "external.protobuf.python.google.protobuf.internal.decoder": {
            "_VarintDecoder": [
                "mask",
                "result_type"
            ],
            "_SignedVarintDecoder": [
                "mask",
                "result_type"
            ],
            "ReadTag": [
                "buffer",
                "pos"
            ],
            "_SimpleDecoder": [
                "wire_type",
                "decode_value"
            ],
            "_ModifiedDecoder": [
                "wire_type",
                "decode_value",
                "modify_value"
            ],
            "_StructPackDecoder": [
                "wire_type",
                "format"
            ],
            "_FloatDecoder": [],
            "_DoubleDecoder": [],
            "EnumDecoder": [
                "field_number",
                "is_repeated",
                "is_packed",
                "key",
                "new_default"
            ],
            "StringDecoder": [
                "field_number",
                "is_repeated",
                "is_packed",
                "key",
                "new_default"
            ],
            "BytesDecoder": [
                "field_number",
                "is_repeated",
                "is_packed",
                "key",
                "new_default"
            ],
            "GroupDecoder": [
                "field_number",
                "is_repeated",
                "is_packed",
                "key",
                "new_default"
            ],
            "MessageDecoder": [
                "field_number",
                "is_repeated",
                "is_packed",
                "key",
                "new_default"
            ],
            "MessageSetItemDecoder": [
                "extensions_by_number"
            ],
            "MapDecoder": [
                "field_descriptor",
                "new_default",
                "is_message_map"
            ],
            "_SkipVarint": [
                "buffer",
                "pos",
                "end"
            ],
            "_SkipFixed64": [
                "buffer",
                "pos",
                "end"
            ],
            "_SkipLengthDelimited": [
                "buffer",
                "pos",
                "end"
            ],
            "_SkipGroup": [
                "buffer",
                "pos",
                "end"
            ],
            "_EndGroup": [
                "buffer",
                "pos",
                "end"
            ],
            "_SkipFixed32": [
                "buffer",
                "pos",
                "end"
            ],
            "_RaiseInvalidWireType": [
                "buffer",
                "pos",
                "end"
            ],
            "_FieldSkipper": []
        },
        "external.protobuf.python.google.protobuf.internal.enum_type_wrapper": {
            "EnumTypeWrapper": {
                "__init__": [
                    "self",
                    "enum_type"
                ],
                "Name": [
                    "self",
                    "number"
                ],
                "Value": [
                    "self",
                    "name"
                ],
                "keys": [
                    "self"
                ],
                "values": [
                    "self"
                ],
                "items": [
                    "self"
                ]
            }
        },
        "external.protobuf.python.google.protobuf.internal.python_message": {
            "_PropertyName": [
                "proto_field_name"
            ],
            "_VerifyExtensionHandle": [
                "message",
                "extension_handle"
            ],
            "_AddSlots": [
                "message_descriptor",
                "dictionary"
            ],
            "_IsMessageSetExtension": [
                "field"
            ],
            "_IsMapField": [
                "field"
            ],
            "_IsMessageMapField": [
                "field"
            ],
            "_AttachFieldHelpers": [
                "cls",
                "field_descriptor"
            ],
            "_AddClassAttributesForNestedExtensions": [
                "descriptor",
                "dictionary"
            ],
            "_AddEnumValues": [
                "descriptor",
                "cls"
            ],
            "_GetInitializeDefaultForMap": [
                "field"
            ],
            "_DefaultValueConstructorForField": [
                "field"
            ],
            "_ReraiseTypeErrorWithFieldName": [
                "message_name",
                "field_name"
            ],
            "_AddInitMethod": [
                "message_descriptor",
                "cls"
            ],
            "_GetFieldByName": [
                "message_descriptor",
                "field_name"
            ],
            "_AddPropertiesForFields": [
                "descriptor",
                "cls"
            ],
            "_AddPropertiesForField": [
                "field",
                "cls"
            ],
            "_AddPropertiesForRepeatedField": [
                "field",
                "cls"
            ],
            "_AddPropertiesForNonRepeatedScalarField": [
                "field",
                "cls"
            ],
            "_AddPropertiesForNonRepeatedCompositeField": [
                "field",
                "cls"
            ],
            "_AddPropertiesForExtensions": [
                "descriptor",
                "cls"
            ],
            "_AddStaticMethods": [
                "cls"
            ],
            "_IsPresent": [
                "item"
            ],
            "_AddListFieldsMethod": [
                "message_descriptor",
                "cls"
            ],
            "_AddHasFieldMethod": [
                "message_descriptor",
                "cls"
            ],
            "_AddClearFieldMethod": [
                "message_descriptor",
                "cls"
            ],
            "_AddClearExtensionMethod": [
                "cls"
            ],
            "_AddHasExtensionMethod": [
                "cls"
            ],
            "_InternalUnpackAny": [
                "msg"
            ],
            "_AddEqualsMethod": [
                "message_descriptor",
                "cls"
            ],
            "_AddStrMethod": [
                "message_descriptor",
                "cls"
            ],
            "_AddReprMethod": [
                "message_descriptor",
                "cls"
            ],
            "_AddUnicodeMethod": [
                "unused_message_descriptor",
                "cls"
            ],
            "_BytesForNonRepeatedElement": [
                "value",
                "field_number",
                "field_type"
            ],
            "_AddByteSizeMethod": [
                "message_descriptor",
                "cls"
            ],
            "_AddSerializeToStringMethod": [
                "message_descriptor",
                "cls"
            ],
            "_AddSerializePartialToStringMethod": [
                "message_descriptor",
                "cls"
            ],
            "_AddMergeFromStringMethod": [
                "message_descriptor",
                "cls"
            ],
            "_AddIsInitializedMethod": [
                "message_descriptor",
                "cls"
            ],
            "_AddMergeFromMethod": [
                "cls"
            ],
            "_AddWhichOneofMethod": [
                "message_descriptor",
                "cls"
            ],
            "_Clear": [
                "self"
            ],
            "_DiscardUnknownFields": [
                "self"
            ],
            "_SetListener": [
                "self",
                "listener"
            ],
            "_AddMessageMethods": [
                "message_descriptor",
                "cls"
            ],
            "_AddPrivateHelperMethods": [
                "message_descriptor",
                "cls"
            ],
            "GeneratedProtocolMessageType": {
                "__new__": [
                    "cls",
                    "name",
                    "bases",
                    "dictionary"
                ],
                "__init__": [
                    "cls",
                    "name",
                    "bases",
                    "dictionary"
                ]
            },
            "_Listener": {
                "__init__": [
                    "self",
                    "parent_message"
                ],
                "Modified": [
                    "self"
                ]
            },
            "_OneofListener": {
                "__init__": [
                    "self",
                    "parent_message",
                    "field"
                ],
                "Modified": [
                    "self"
                ]
            },
            "_ExtensionDict": {
                "__init__": [
                    "self",
                    "extended_message"
                ],
                "__getitem__": [
                    "self",
                    "extension_handle"
                ],
                "__eq__": [
                    "self",
                    "other"
                ],
                "__ne__": [
                    "self",
                    "other"
                ],
                "__hash__": [
                    "self"
                ],
                "__setitem__": [
                    "self",
                    "extension_handle",
                    "value"
                ],
                "_FindExtensionByName": [
                    "self",
                    "name"
                ],
                "_FindExtensionByNumber": [
                    "self",
                    "number"
                ]
            }
        },
        "external.protobuf.python.google.protobuf.internal.type_checkers": {
            "SupportsOpenEnums": [
                "field_descriptor"
            ],
            "GetTypeChecker": [
                "field"
            ],
            "TypeChecker": {
                "__init__": [
                    "self"
                ],
                "CheckValue": [
                    "self",
                    "proposed_value"
                ]
            },
            "TypeCheckerWithDefault": {
                "__init__": [
                    "self",
                    "default_value"
                ],
                "DefaultValue": [
                    "self"
                ]
            },
            "IntValueChecker": {
                "CheckValue": [
                    "self",
                    "proposed_value"
                ],
                "DefaultValue": [
                    "self"
                ]
            },
            "EnumValueChecker": {
                "__init__": [
                    "self",
                    "enum_type"
                ],
                "CheckValue": [
                    "self",
                    "proposed_value"
                ],
                "DefaultValue": [
                    "self"
                ]
            },
            "UnicodeValueChecker": {
                "CheckValue": [
                    "self",
                    "proposed_value"
                ],
                "DefaultValue": [
                    "self"
                ]
            },
            "Int32ValueChecker": {},
            "Uint32ValueChecker": {},
            "Int64ValueChecker": {},
            "Uint64ValueChecker": {}
        },
        "external.protobuf.python.google.protobuf.internal.message_listener": {
            "MessageListener": {
                "Modified": [
                    "self"
                ]
            },
            "NullMessageListener": {
                "Modified": [
                    "self"
                ]
            }
        },
        "external.protobuf.python.google.protobuf.internal.api_implementation": {
            "Type": [],
            "Version": []
        },
        "external.protobuf.python.google.protobuf.internal.wire_format": {
            "PackTag": [
                "field_number",
                "wire_type"
            ],
            "UnpackTag": [
                "tag"
            ],
            "ZigZagEncode": [
                "value"
            ],
            "ZigZagDecode": [
                "value"
            ],
            "Int32ByteSize": [
                "field_number",
                "int32"
            ],
            "Int32ByteSizeNoTag": [
                "int32"
            ],
            "Int64ByteSize": [
                "field_number",
                "int64"
            ],
            "UInt32ByteSize": [
                "field_number",
                "uint32"
            ],
            "UInt64ByteSize": [
                "field_number",
                "uint64"
            ],
            "SInt32ByteSize": [
                "field_number",
                "int32"
            ],
            "SInt64ByteSize": [
                "field_number",
                "int64"
            ],
            "Fixed32ByteSize": [
                "field_number",
                "fixed32"
            ],
            "Fixed64ByteSize": [
                "field_number",
                "fixed64"
            ],
            "SFixed32ByteSize": [
                "field_number",
                "sfixed32"
            ],
            "SFixed64ByteSize": [
                "field_number",
                "sfixed64"
            ],
            "FloatByteSize": [
                "field_number",
                "flt"
            ],
            "DoubleByteSize": [
                "field_number",
                "double"
            ],
            "BoolByteSize": [
                "field_number",
                "b"
            ],
            "EnumByteSize": [
                "field_number",
                "enum"
            ],
            "StringByteSize": [
                "field_number",
                "string"
            ],
            "BytesByteSize": [
                "field_number",
                "b"
            ],
            "GroupByteSize": [
                "field_number",
                "message"
            ],
            "MessageByteSize": [
                "field_number",
                "message"
            ],
            "MessageSetItemByteSize": [
                "field_number",
                "msg"
            ],
            "TagByteSize": [
                "field_number"
            ],
            "_VarUInt64ByteSizeNoTag": [
                "uint64"
            ],
            "IsTypePackable": [
                "field_type"
            ]
        },
        "external.protobuf.python.google.protobuf.internal.containers": {
            "BaseContainer": {
                "__init__": [
                    "self",
                    "message_listener"
                ],
                "__getitem__": [
                    "self",
                    "key"
                ],
                "__len__": [
                    "self"
                ],
                "__ne__": [
                    "self",
                    "other"
                ],
                "__hash__": [
                    "self"
                ],
                "__repr__": [
                    "self"
                ],
                "sort": [
                    "self"
                ]
            },
            "RepeatedScalarFieldContainer": {
                "__init__": [
                    "self",
                    "message_listener",
                    "type_checker"
                ],
                "append": [
                    "self",
                    "value"
                ],
                "insert": [
                    "self",
                    "key",
                    "value"
                ],
                "extend": [
                    "self",
                    "elem_seq"
                ],
                "MergeFrom": [
                    "self",
                    "other"
                ],
                "remove": [
                    "self",
                    "elem"
                ],
                "pop": [
                    "self",
                    "key"
                ],
                "__setitem__": [
                    "self",
                    "key",
                    "value"
                ],
                "__getslice__": [
                    "self",
                    "start",
                    "stop"
                ],
                "__setslice__": [
                    "self",
                    "start",
                    "stop",
                    "values"
                ],
                "__delitem__": [
                    "self",
                    "key"
                ],
                "__delslice__": [
                    "self",
                    "start",
                    "stop"
                ],
                "__eq__": [
                    "self",
                    "other"
                ]
            },
            "RepeatedCompositeFieldContainer": {
                "__init__": [
                    "self",
                    "message_listener",
                    "message_descriptor"
                ],
                "add": [
                    "self"
                ],
                "extend": [
                    "self",
                    "elem_seq"
                ],
                "MergeFrom": [
                    "self",
                    "other"
                ],
                "remove": [
                    "self",
                    "elem"
                ],
                "pop": [
                    "self",
                    "key"
                ],
                "__getslice__": [
                    "self",
                    "start",
                    "stop"
                ],
                "__delitem__": [
                    "self",
                    "key"
                ],
                "__delslice__": [
                    "self",
                    "start",
                    "stop"
                ],
                "__eq__": [
                    "self",
                    "other"
                ]
            },
            "ScalarMap": {
                "__init__": [
                    "self",
                    "message_listener",
                    "key_checker",
                    "value_checker",
                    "entry_descriptor"
                ],
                "__getitem__": [
                    "self",
                    "key"
                ],
                "__contains__": [
                    "self",
                    "item"
                ],
                "get": [
                    "self",
                    "key",
                    "default"
                ],
                "__setitem__": [
                    "self",
                    "key",
                    "value"
                ],
                "__delitem__": [
                    "self",
                    "key"
                ],
                "__len__": [
                    "self"
                ],
                "__iter__": [
                    "self"
                ],
                "__repr__": [
                    "self"
                ],
                "MergeFrom": [
                    "self",
                    "other"
                ],
                "InvalidateIterators": [
                    "self"
                ],
                "clear": [
                    "self"
                ],
                "GetEntryClass": [
                    "self"
                ]
            },
            "MessageMap": {
                "__init__": [
                    "self",
                    "message_listener",
                    "message_descriptor",
                    "key_checker",
                    "entry_descriptor"
                ],
                "__getitem__": [
                    "self",
                    "key"
                ],
                "get_or_create": [
                    "self",
                    "key"
                ],
                "get": [
                    "self",
                    "key",
                    "default"
                ],
                "__contains__": [
                    "self",
                    "item"
                ],
                "__setitem__": [
                    "self",
                    "key",
                    "value"
                ],
                "__delitem__": [
                    "self",
                    "key"
                ],
                "__len__": [
                    "self"
                ],
                "__iter__": [
                    "self"
                ],
                "__repr__": [
                    "self"
                ],
                "MergeFrom": [
                    "self",
                    "other"
                ],
                "InvalidateIterators": [
                    "self"
                ],
                "clear": [
                    "self"
                ],
                "GetEntryClass": [
                    "self"
                ]
            }
        },
        "external.protobuf.python.google.protobuf.internal.testing_refleaks": {
            "LocalTestResult": {
                "__init__": [
                    "self",
                    "parent_result"
                ],
                "addError": [
                    "self",
                    "test",
                    "error"
                ],
                "addFailure": [
                    "self",
                    "test",
                    "error"
                ],
                "addSkip": [
                    "self",
                    "test",
                    "reason"
                ]
            },
            "ReferenceLeakCheckerTestCase": {
                "run": [
                    "self",
                    "result"
                ],
                "_getRefcounts": [
                    "self"
                ]
            }
        },
        "external.protobuf.python.google.protobuf.internal.encoder": {
            "_VarintSize": [
                "value"
            ],
            "_SignedVarintSize": [
                "value"
            ],
            "_TagSize": [
                "field_number"
            ],
            "_SimpleSizer": [
                "compute_value_size"
            ],
            "_ModifiedSizer": [
                "compute_value_size",
                "modify_value"
            ],
            "_FixedSizer": [
                "value_size"
            ],
            "StringSizer": [
                "field_number",
                "is_repeated",
                "is_packed"
            ],
            "BytesSizer": [
                "field_number",
                "is_repeated",
                "is_packed"
            ],
            "GroupSizer": [
                "field_number",
                "is_repeated",
                "is_packed"
            ],
            "MessageSizer": [
                "field_number",
                "is_repeated",
                "is_packed"
            ],
            "MessageSetItemSizer": [
                "field_number"
            ],
            "MapSizer": [
                "field_descriptor"
            ],
            "_VarintEncoder": [],
            "_SignedVarintEncoder": [],
            "_VarintBytes": [
                "value"
            ],
            "TagBytes": [
                "field_number",
                "wire_type"
            ],
            "_SimpleEncoder": [
                "wire_type",
                "encode_value",
                "compute_value_size"
            ],
            "_ModifiedEncoder": [
                "wire_type",
                "encode_value",
                "compute_value_size",
                "modify_value"
            ],
            "_StructPackEncoder": [
                "wire_type",
                "format"
            ],
            "_FloatingPointEncoder": [
                "wire_type",
                "format"
            ],
            "BoolEncoder": [
                "field_number",
                "is_repeated",
                "is_packed"
            ],
            "StringEncoder": [
                "field_number",
                "is_repeated",
                "is_packed"
            ],
            "BytesEncoder": [
                "field_number",
                "is_repeated",
                "is_packed"
            ],
            "GroupEncoder": [
                "field_number",
                "is_repeated",
                "is_packed"
            ],
            "MessageEncoder": [
                "field_number",
                "is_repeated",
                "is_packed"
            ],
            "MessageSetItemEncoder": [
                "field_number"
            ],
            "MapEncoder": [
                "field_descriptor"
            ]
        }
    }
}