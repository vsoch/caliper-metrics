{
    "0.12.0rc0": {
        "tensorflow": {
            "_LazyContribLoader": {
                "__getattr__": [
                    "self",
                    "item"
                ]
            }
        },
        "tensorflow.contrib": {},
        "tensorflow.contrib.android": {},
        "tensorflow.contrib.android.java": {},
        "tensorflow.contrib.android.java.org": {},
        "tensorflow.contrib.android.java.org.tensorflow": {},
        "tensorflow.contrib.android.java.org.tensorflow.contrib": {},
        "tensorflow.contrib.android.java.org.tensorflow.contrib.android": {},
        "tensorflow.contrib.android.jni": {},
        "tensorflow.contrib.slim.nets": {},
        "tensorflow.contrib.slim": {},
        "tensorflow.contrib.slim.python": {},
        "tensorflow.contrib.slim.python.slim.evaluation": {
            "wait_for_new_checkpoint": [
                "checkpoint_dir",
                "last_checkpoint",
                "seconds_to_sleep",
                "timeout"
            ],
            "checkpoints_iterator": [
                "checkpoint_dir",
                "min_interval_secs",
                "timeout"
            ],
            "evaluation": [
                "sess",
                "num_evals",
                "initial_op",
                "initial_op_feed_dict",
                "eval_op",
                "eval_op_feed_dict",
                "final_op",
                "final_op_feed_dict",
                "summary_op",
                "summary_op_feed_dict",
                "summary_writer",
                "global_step"
            ],
            "evaluate_once": [
                "master",
                "checkpoint_path",
                "logdir",
                "num_evals",
                "initial_op",
                "initial_op_feed_dict",
                "eval_op",
                "eval_op_feed_dict",
                "final_op",
                "final_op_feed_dict",
                "summary_op",
                "summary_op_feed_dict",
                "variables_to_restore",
                "session_config"
            ],
            "evaluation_loop": [
                "master",
                "checkpoint_dir",
                "logdir",
                "num_evals",
                "initial_op",
                "initial_op_feed_dict",
                "eval_op",
                "eval_op_feed_dict",
                "final_op",
                "final_op_feed_dict",
                "summary_op",
                "summary_op_feed_dict",
                "variables_to_restore",
                "eval_interval_secs",
                "max_number_of_evaluations",
                "session_config",
                "timeout"
            ]
        },
        "tensorflow.contrib.slim.python.slim.model_analyzer": {
            "tensor_description": [
                "var"
            ],
            "analyze_ops": [
                "graph",
                "print_info"
            ],
            "analyze_vars": [
                "variables",
                "print_info"
            ]
        },
        "tensorflow.contrib.slim.python.slim.queues": {
            "QueueRunners": [
                "session"
            ],
            "NestedQueueRunnerError": {}
        },
        "tensorflow.contrib.slim.python.slim.learning": {
            "clip_gradient_norms": [
                "gradients_to_variables",
                "max_norm"
            ],
            "multiply_gradients": [
                "grads_and_vars",
                "gradient_multipliers"
            ],
            "add_gradients_summaries": [
                "grads_and_vars"
            ],
            "create_train_op": [
                "total_loss",
                "optimizer",
                "global_step",
                "update_ops",
                "variables_to_train",
                "clip_gradient_norm",
                "summarize_gradients",
                "gate_gradients",
                "aggregation_method",
                "colocate_gradients_with_ops",
                "gradient_multipliers"
            ],
            "_wait_for_step": [
                "sess",
                "global_step",
                "step"
            ],
            "train_step": [
                "sess",
                "train_op",
                "global_step",
                "train_step_kwargs"
            ],
            "train": [
                "train_op",
                "logdir",
                "train_step_fn",
                "train_step_kwargs",
                "log_every_n_steps",
                "graph",
                "master",
                "is_chief",
                "global_step",
                "number_of_steps",
                "init_op",
                "init_feed_dict",
                "local_init_op",
                "init_fn",
                "ready_op",
                "summary_op",
                "save_summaries_secs",
                "summary_writer",
                "startup_delay_steps",
                "saver",
                "save_interval_secs",
                "sync_optimizer",
                "session_config",
                "trace_every_n_steps"
            ]
        },
        "tensorflow.contrib.slim.python.slim": {},
        "tensorflow.contrib.slim.python.slim.learning_test": {
            "LogisticClassifier": [
                "inputs"
            ],
            "BatchNormClassifier": [
                "inputs"
            ],
            "ClipGradientNormsTest": {
                "clip_values": [
                    "self",
                    "arr"
                ],
                "setUp": [
                    "self"
                ],
                "testOrdinaryGradIsClippedCorrectly": [
                    "self"
                ],
                "testNoneGradPassesThroughCorrectly": [
                    "self"
                ],
                "testIndexedSlicesGradIsClippedCorrectly": [
                    "self"
                ]
            },
            "MultiplyGradientsTest": {
                "setUp": [
                    "self"
                ],
                "testNonListGradsRaisesError": [
                    "self"
                ],
                "testEmptyMultiplesRaisesError": [
                    "self"
                ],
                "testNonDictMultiplierRaisesError": [
                    "self"
                ],
                "testMultipleOfNoneGradRaisesError": [
                    "self"
                ],
                "testMultipleGradientsWithVariables": [
                    "self"
                ],
                "testIndexedSlicesGradIsMultiplied": [
                    "self"
                ]
            },
            "TrainBNClassifierTest": {
                "setUp": [
                    "self"
                ],
                "testTrainWithNoInitAssignCanAchieveZeroLoss": [
                    "self"
                ]
            },
            "CreateTrainOpTest": {
                "setUp": [
                    "self"
                ],
                "testUseUpdateOps": [
                    "self"
                ],
                "testEmptyUpdateOps": [
                    "self"
                ],
                "testRecordTrainOpInCollection": [
                    "self"
                ]
            },
            "TrainTest": {
                "setUp": [
                    "self"
                ],
                "testTrainWithNonDefaultGraph": [
                    "self"
                ],
                "testTrainWithNoneAsLogdir": [
                    "self"
                ],
                "testTrainWithSessionConfig": [
                    "self"
                ],
                "testTrainWithTrace": [
                    "self"
                ],
                "testTrainWithNoneAsLogdirWhenUsingSummariesRaisesError": [
                    "self"
                ],
                "testTrainWithNoneAsLogdirWhenUsingTraceRaisesError": [
                    "self"
                ],
                "testTrainWithNoneAsLogdirWhenUsingSaverRaisesError": [
                    "self"
                ],
                "testTrainWithNoneAsInitWhenUsingVarsRaisesError": [
                    "self"
                ],
                "testTrainWithNoInitAssignCanAchieveZeroLoss": [
                    "self"
                ],
                "testTrainWithLocalVariable": [
                    "self"
                ],
                "testResumeTrainAchievesRoughlyTheSameLoss": [
                    "self"
                ],
                "create_train_op": [
                    "self",
                    "learning_rate",
                    "gradient_multiplier"
                ],
                "testTrainWithInitFromCheckpoint": [
                    "self"
                ],
                "testTrainWithInitFromFn": [
                    "self"
                ],
                "ModelLoss": [
                    "self"
                ],
                "testTrainAllVarsHasLowerLossThanTrainSubsetOfVars": [
                    "self"
                ],
                "testTrainingSubsetsOfVariablesOnlyUpdatesThoseVariables": [
                    "self"
                ],
                "testTrainWithAlteredGradients": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.slim.python.slim.evaluation_test": {
            "GenerateTestData": [
                "num_classes",
                "batch_size"
            ],
            "TestModel": [
                "inputs"
            ],
            "GroundTruthAccuracy": [
                "inputs",
                "labels",
                "batch_size"
            ],
            "EvaluationTest": {
                "setUp": [
                    "self"
                ],
                "testUpdateOpsAreEvaluated": [
                    "self"
                ],
                "testFinalOpsIsEvaluated": [
                    "self"
                ],
                "testFinalOpsOnEvaluationLoop": [
                    "self"
                ],
                "_create_names_to_metrics": [
                    "self",
                    "predictions",
                    "labels"
                ],
                "_verify_summaries": [
                    "self",
                    "output_dir",
                    "names_to_values"
                ],
                "testSummariesAreFlushedToDisk": [
                    "self"
                ],
                "testSummariesAreFlushedToDiskWithoutGlobalStep": [
                    "self"
                ],
                "testWithFeedDict": [
                    "self"
                ],
                "testWithQueueRunning": [
                    "self"
                ],
                "testLatestCheckpointReturnsNoneAfterTimeout": [
                    "self"
                ],
                "testMonitorCheckpointsLoopTimeout": [
                    "self"
                ],
                "testEvaluationLoopTimeout": [
                    "self"
                ]
            },
            "SingleEvaluationTest": {
                "setUp": [
                    "self"
                ],
                "testErrorRaisedIfCheckpointDoesntExist": [
                    "self"
                ],
                "testRestoredModelPerformance": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.slim.python.slim.data.data_decoder": {
            "DataDecoder": {
                "decode": [
                    "self",
                    "data",
                    "items"
                ],
                "list_items": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.slim.python.slim.data.parallel_reader": {
            "parallel_read": [
                "data_sources",
                "reader_class",
                "num_epochs",
                "num_readers",
                "reader_kwargs",
                "shuffle",
                "dtypes",
                "capacity",
                "min_after_dequeue",
                "seed"
            ],
            "single_pass_read": [
                "data_sources",
                "reader_class",
                "reader_kwargs"
            ],
            "get_data_files": [
                "data_sources"
            ],
            "ParallelReader": {
                "__init__": [
                    "self",
                    "reader_class",
                    "common_queue",
                    "num_readers",
                    "reader_kwargs"
                ],
                "num_readers": [
                    "self"
                ],
                "common_queue": [
                    "self"
                ],
                "read": [
                    "self",
                    "queue",
                    "name"
                ],
                "num_records_produced": [
                    "self",
                    "name"
                ],
                "num_work_units_completed": [
                    "self",
                    "name"
                ]
            }
        },
        "tensorflow.contrib.slim.python.slim.data.test_utils": {
            "_encoded_int64_feature": [
                "ndarray"
            ],
            "_encoded_bytes_feature": [
                "tf_encoded"
            ],
            "_string_feature": [
                "value"
            ],
            "_encoder": [
                "image",
                "image_format"
            ],
            "generate_image": [
                "image_shape",
                "image_format",
                "label"
            ],
            "create_tfrecord_files": [
                "output_dir",
                "num_files",
                "num_records_per_file"
            ]
        },
        "tensorflow.contrib.slim.python.slim.data.tfexample_decoder_test": {
            "TFExampleDecoderTest": {
                "_EncodedFloatFeature": [
                    "self",
                    "ndarray"
                ],
                "_EncodedInt64Feature": [
                    "self",
                    "ndarray"
                ],
                "_EncodedBytesFeature": [
                    "self",
                    "tf_encoded"
                ],
                "_BytesFeature": [
                    "self",
                    "ndarray"
                ],
                "_StringFeature": [
                    "self",
                    "value"
                ],
                "_Encoder": [
                    "self",
                    "image",
                    "image_format"
                ],
                "GenerateImage": [
                    "self",
                    "image_format",
                    "image_shape"
                ],
                "DecodeExample": [
                    "self",
                    "serialized_example",
                    "item_handler",
                    "image_format"
                ],
                "RunDecodeExample": [
                    "self",
                    "serialized_example",
                    "item_handler",
                    "image_format"
                ],
                "testDecodeExampleWithJpegEncoding": [
                    "self"
                ],
                "testDecodeExampleWithJPEGEncoding": [
                    "self"
                ],
                "testDecodeExampleWithNoShapeInfo": [
                    "self"
                ],
                "testDecodeExampleWithPngEncoding": [
                    "self"
                ],
                "testDecodeExampleWithPNGEncoding": [
                    "self"
                ],
                "testDecodeExampleWithRawEncoding": [
                    "self"
                ],
                "testDecodeExampleWithRAWEncoding": [
                    "self"
                ],
                "testDecodeExampleWithStringTensor": [
                    "self"
                ],
                "testDecodeExampleWithFloatTensor": [
                    "self"
                ],
                "testDecodeExampleWithInt64Tensor": [
                    "self"
                ],
                "testDecodeExampleWithVarLenTensor": [
                    "self"
                ],
                "testDecodeExampleWithFixLenTensorWithShape": [
                    "self"
                ],
                "testDecodeExampleWithVarLenTensorToDense": [
                    "self"
                ],
                "testDecodeExampleShapeKeyTensor": [
                    "self"
                ],
                "testDecodeExampleMultiShapeKeyTensor": [
                    "self"
                ],
                "testDecodeExampleWithSparseTensor": [
                    "self"
                ],
                "testDecodeExampleWithSparseTensorWithKeyShape": [
                    "self"
                ],
                "testDecodeExampleWithSparseTensorWithGivenShape": [
                    "self"
                ],
                "testDecodeExampleWithSparseTensorToDense": [
                    "self"
                ],
                "testDecodeExampleWithTensor": [
                    "self"
                ],
                "testDecodeExampleWithItemHandlerCallback": [
                    "self"
                ],
                "testDecodeImageWithItemHandlerCallback": [
                    "self"
                ],
                "testDecodeExampleWithBoundingBox": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.slim.python.slim.data.dataset_data_provider_test": {
            "_resize_image": [
                "image",
                "height",
                "width"
            ],
            "_create_tfrecord_dataset": [
                "tmpdir"
            ],
            "DatasetDataProviderTest": {
                "testTFRecordDataset": [
                    "self"
                ],
                "testTFRecordSeparateGetDataset": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.slim.python.slim.data.prefetch_queue_test": {
            "PrefetchQueueTest": {
                "testOneThread": [
                    "self"
                ],
                "testMultiThread": [
                    "self"
                ],
                "testMultipleDequeue": [
                    "self"
                ],
                "testDictConstruction": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.slim.python.slim.data.parallel_reader_test": {
            "ParallelReaderTest": {
                "setUp": [
                    "self"
                ],
                "_verify_all_data_sources_read": [
                    "self",
                    "shared_queue"
                ],
                "testRandomShuffleQueue": [
                    "self"
                ],
                "testFIFOSharedQueue": [
                    "self"
                ]
            },
            "ParallelReadTest": {
                "setUp": [
                    "self"
                ],
                "testTFRecordReader": [
                    "self"
                ]
            },
            "SinglePassReadTest": {
                "setUp": [
                    "self"
                ],
                "testOutOfRangeError": [
                    "self"
                ],
                "testTFRecordReader": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.slim.python.slim.data.prefetch_queue": {
            "prefetch_queue": [
                "tensors",
                "capacity",
                "shared_name",
                "name"
            ]
        },
        "tensorflow.contrib.slim.python.slim.data.data_provider": {
            "DataProvider": {
                "__init__": [
                    "self",
                    "items_to_tensors",
                    "num_samples"
                ],
                "get": [
                    "self",
                    "items"
                ],
                "list_items": [
                    "self"
                ],
                "num_samples": [
                    "self"
                ],
                "_validate_items": [
                    "self",
                    "items"
                ]
            }
        },
        "tensorflow.contrib.slim.python.slim.data.dataset": {
            "Dataset": {
                "__init__": [
                    "self",
                    "data_sources",
                    "reader",
                    "decoder",
                    "num_samples",
                    "items_to_descriptions"
                ]
            }
        },
        "tensorflow.contrib.slim.python.slim.data": {},
        "tensorflow.contrib.slim.python.slim.data.tfexample_decoder": {
            "ItemHandler": {
                "__init__": [
                    "self",
                    "keys"
                ],
                "keys": [
                    "self"
                ],
                "tensors_to_item": [
                    "self",
                    "keys_to_tensors"
                ]
            },
            "ItemHandlerCallback": {
                "__init__": [
                    "self",
                    "keys",
                    "func"
                ],
                "tensors_to_item": [
                    "self",
                    "keys_to_tensors"
                ]
            },
            "BoundingBox": {
                "__init__": [
                    "self",
                    "keys",
                    "prefix"
                ],
                "tensors_to_item": [
                    "self",
                    "keys_to_tensors"
                ]
            },
            "Tensor": {
                "__init__": [
                    "self",
                    "tensor_key",
                    "shape_keys",
                    "shape",
                    "default_value"
                ],
                "tensors_to_item": [
                    "self",
                    "keys_to_tensors"
                ]
            },
            "SparseTensor": {
                "__init__": [
                    "self",
                    "indices_key",
                    "values_key",
                    "shape_key",
                    "shape",
                    "densify",
                    "default_value"
                ],
                "tensors_to_item": [
                    "self",
                    "keys_to_tensors"
                ]
            },
            "Image": {
                "__init__": [
                    "self",
                    "image_key",
                    "format_key",
                    "shape",
                    "channels"
                ],
                "tensors_to_item": [
                    "self",
                    "keys_to_tensors"
                ],
                "_decode": [
                    "self",
                    "image_buffer",
                    "image_format"
                ]
            },
            "TFExampleDecoder": {
                "__init__": [
                    "self",
                    "keys_to_features",
                    "items_to_handlers"
                ],
                "list_items": [
                    "self"
                ],
                "decode": [
                    "self",
                    "serialized_example",
                    "items"
                ]
            }
        },
        "tensorflow.contrib.slim.python.slim.data.dataset_data_provider": {
            "DatasetDataProvider": {
                "__init__": [
                    "self",
                    "dataset",
                    "num_readers",
                    "shuffle",
                    "num_epochs",
                    "common_queue_capacity",
                    "common_queue_min",
                    "seed"
                ]
            }
        },
        "tensorflow.contrib.slim.python.slim.nets.inception_v1": {
            "inception_v1_base": [
                "inputs",
                "final_endpoint",
                "scope"
            ],
            "inception_v1": [
                "inputs",
                "num_classes",
                "is_training",
                "dropout_keep_prob",
                "prediction_fn",
                "spatial_squeeze",
                "reuse",
                "scope"
            ],
            "inception_v1_arg_scope": [
                "weight_decay",
                "use_batch_norm",
                "batch_norm_var_collection"
            ]
        },
        "tensorflow.contrib.slim.python.slim.nets.inception_v2": {
            "inception_v2_base": [
                "inputs",
                "final_endpoint",
                "min_depth",
                "depth_multiplier",
                "scope"
            ],
            "inception_v2": [
                "inputs",
                "num_classes",
                "is_training",
                "dropout_keep_prob",
                "min_depth",
                "depth_multiplier",
                "prediction_fn",
                "spatial_squeeze",
                "reuse",
                "scope"
            ],
            "_reduced_kernel_size_for_small_input": [
                "input_tensor",
                "kernel_size"
            ],
            "inception_v2_arg_scope": [
                "weight_decay",
                "batch_norm_var_collection"
            ]
        },
        "tensorflow.contrib.slim.python.slim.nets.inception_v3": {
            "inception_v3_base": [
                "inputs",
                "final_endpoint",
                "min_depth",
                "depth_multiplier",
                "scope"
            ],
            "inception_v3": [
                "inputs",
                "num_classes",
                "is_training",
                "dropout_keep_prob",
                "min_depth",
                "depth_multiplier",
                "prediction_fn",
                "spatial_squeeze",
                "reuse",
                "scope"
            ],
            "_reduced_kernel_size_for_small_input": [
                "input_tensor",
                "kernel_size"
            ],
            "inception_v3_arg_scope": [
                "weight_decay",
                "stddev",
                "batch_norm_var_collection"
            ]
        },
        "tensorflow.contrib.slim.python.slim.nets.resnet_v1_test": {
            "create_test_input": [
                "batch_size",
                "height",
                "width",
                "channels"
            ],
            "ResnetUtilsTest": {
                "testSubsampleThreeByThree": [
                    "self"
                ],
                "testSubsampleFourByFour": [
                    "self"
                ],
                "testConv2DSameEven": [
                    "self"
                ],
                "testConv2DSameOdd": [
                    "self"
                ],
                "_resnet_plain": [
                    "self",
                    "inputs",
                    "blocks",
                    "output_stride",
                    "scope"
                ],
                "testEndPointsV1": [
                    "self"
                ],
                "_stack_blocks_nondense": [
                    "self",
                    "net",
                    "blocks"
                ],
                "_atrousValues": [
                    "self",
                    "bottleneck"
                ],
                "testAtrousValuesBottleneck": [
                    "self"
                ]
            },
            "ResnetCompleteNetworkTest": {
                "_resnet_small": [
                    "self",
                    "inputs",
                    "num_classes",
                    "global_pool",
                    "output_stride",
                    "include_root_block",
                    "reuse",
                    "scope"
                ],
                "testClassificationEndPoints": [
                    "self"
                ],
                "testClassificationShapes": [
                    "self"
                ],
                "testFullyConvolutionalEndpointShapes": [
                    "self"
                ],
                "testRootlessFullyConvolutionalEndpointShapes": [
                    "self"
                ],
                "testAtrousFullyConvolutionalEndpointShapes": [
                    "self"
                ],
                "testAtrousFullyConvolutionalValues": [
                    "self"
                ],
                "testUnknownBatchSize": [
                    "self"
                ],
                "testFullyConvolutionalUnknownHeightWidth": [
                    "self"
                ],
                "testAtrousFullyConvolutionalUnknownHeightWidth": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.slim.python.slim.nets.alexnet": {
            "alexnet_v2_arg_scope": [
                "weight_decay"
            ],
            "alexnet_v2": [
                "inputs",
                "num_classes",
                "is_training",
                "dropout_keep_prob",
                "spatial_squeeze",
                "scope"
            ]
        },
        "tensorflow.contrib.slim.python.slim.nets.resnet_v2": {
            "bottleneck": [
                "inputs",
                "depth",
                "depth_bottleneck",
                "stride",
                "rate",
                "outputs_collections",
                "scope"
            ],
            "resnet_v2": [
                "inputs",
                "blocks",
                "num_classes",
                "global_pool",
                "output_stride",
                "include_root_block",
                "reuse",
                "scope"
            ],
            "resnet_v2_50": [
                "inputs",
                "num_classes",
                "global_pool",
                "output_stride",
                "reuse",
                "scope"
            ],
            "resnet_v2_101": [
                "inputs",
                "num_classes",
                "global_pool",
                "output_stride",
                "reuse",
                "scope"
            ],
            "resnet_v2_152": [
                "inputs",
                "num_classes",
                "global_pool",
                "output_stride",
                "reuse",
                "scope"
            ],
            "resnet_v2_200": [
                "inputs",
                "num_classes",
                "global_pool",
                "output_stride",
                "reuse",
                "scope"
            ]
        },
        "tensorflow.contrib.slim.python.slim.nets.inception_v1_test": {
            "InceptionV1Test": {
                "testBuildClassificationNetwork": [
                    "self"
                ],
                "testBuildBaseNetwork": [
                    "self"
                ],
                "testBuildOnlyUptoFinalEndpoint": [
                    "self"
                ],
                "testBuildAndCheckAllEndPointsUptoMixed5c": [
                    "self"
                ],
                "testModelHasExpectedNumberOfParameters": [
                    "self"
                ],
                "testHalfSizeImages": [
                    "self"
                ],
                "testUnknownImageShape": [
                    "self"
                ],
                "testUnknownBatchSize": [
                    "self"
                ],
                "testEvaluation": [
                    "self"
                ],
                "testTrainEvalWithReuse": [
                    "self"
                ],
                "testLogitsNotSqueezed": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.slim.python.slim.nets.vgg_test": {
            "VGGATest": {
                "testBuild": [
                    "self"
                ],
                "testFullyConvolutional": [
                    "self"
                ],
                "testEndPoints": [
                    "self"
                ],
                "testModelVariables": [
                    "self"
                ],
                "testEvaluation": [
                    "self"
                ],
                "testTrainEvalWithReuse": [
                    "self"
                ],
                "testForward": [
                    "self"
                ]
            },
            "VGG16Test": {
                "testBuild": [
                    "self"
                ],
                "testFullyConvolutional": [
                    "self"
                ],
                "testEndPoints": [
                    "self"
                ],
                "testModelVariables": [
                    "self"
                ],
                "testEvaluation": [
                    "self"
                ],
                "testTrainEvalWithReuse": [
                    "self"
                ],
                "testForward": [
                    "self"
                ]
            },
            "VGG19Test": {
                "testBuild": [
                    "self"
                ],
                "testFullyConvolutional": [
                    "self"
                ],
                "testEndPoints": [
                    "self"
                ],
                "testModelVariables": [
                    "self"
                ],
                "testEvaluation": [
                    "self"
                ],
                "testTrainEvalWithReuse": [
                    "self"
                ],
                "testForward": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.slim.python.slim.nets.alexnet_test": {
            "AlexnetV2Test": {
                "testBuild": [
                    "self"
                ],
                "testFullyConvolutional": [
                    "self"
                ],
                "testEndPoints": [
                    "self"
                ],
                "testModelVariables": [
                    "self"
                ],
                "testEvaluation": [
                    "self"
                ],
                "testTrainEvalWithReuse": [
                    "self"
                ],
                "testForward": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.slim.python.slim.nets.inception": {},
        "tensorflow.contrib.slim.python.slim.nets.inception_v2_test": {
            "InceptionV2Test": {
                "testBuildClassificationNetwork": [
                    "self"
                ],
                "testBuildBaseNetwork": [
                    "self"
                ],
                "testBuildOnlyUptoFinalEndpoint": [
                    "self"
                ],
                "testBuildAndCheckAllEndPointsUptoMixed5c": [
                    "self"
                ],
                "testModelHasExpectedNumberOfParameters": [
                    "self"
                ],
                "testBuildEndPointsWithDepthMultiplierLessThanOne": [
                    "self"
                ],
                "testBuildEndPointsWithDepthMultiplierGreaterThanOne": [
                    "self"
                ],
                "testRaiseValueErrorWithInvalidDepthMultiplier": [
                    "self"
                ],
                "testHalfSizeImages": [
                    "self"
                ],
                "testUnknownImageShape": [
                    "self"
                ],
                "testUnknownBatchSize": [
                    "self"
                ],
                "testEvaluation": [
                    "self"
                ],
                "testTrainEvalWithReuse": [
                    "self"
                ],
                "testLogitsNotSqueezed": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.slim.python.slim.nets.vgg": {
            "vgg_arg_scope": [
                "weight_decay"
            ],
            "vgg_a": [
                "inputs",
                "num_classes",
                "is_training",
                "dropout_keep_prob",
                "spatial_squeeze",
                "scope"
            ],
            "vgg_16": [
                "inputs",
                "num_classes",
                "is_training",
                "dropout_keep_prob",
                "spatial_squeeze",
                "scope"
            ],
            "vgg_19": [
                "inputs",
                "num_classes",
                "is_training",
                "dropout_keep_prob",
                "spatial_squeeze",
                "scope"
            ]
        },
        "tensorflow.contrib.slim.python.slim.nets.resnet_v2_test": {
            "create_test_input": [
                "batch_size",
                "height",
                "width",
                "channels"
            ],
            "ResnetUtilsTest": {
                "testSubsampleThreeByThree": [
                    "self"
                ],
                "testSubsampleFourByFour": [
                    "self"
                ],
                "testConv2DSameEven": [
                    "self"
                ],
                "testConv2DSameOdd": [
                    "self"
                ],
                "_resnet_plain": [
                    "self",
                    "inputs",
                    "blocks",
                    "output_stride",
                    "scope"
                ],
                "testEndPointsV2": [
                    "self"
                ],
                "_stack_blocks_nondense": [
                    "self",
                    "net",
                    "blocks"
                ],
                "_atrousValues": [
                    "self",
                    "bottleneck"
                ],
                "testAtrousValuesBottleneck": [
                    "self"
                ]
            },
            "ResnetCompleteNetworkTest": {
                "_resnet_small": [
                    "self",
                    "inputs",
                    "num_classes",
                    "global_pool",
                    "output_stride",
                    "include_root_block",
                    "reuse",
                    "scope"
                ],
                "testClassificationEndPoints": [
                    "self"
                ],
                "testClassificationShapes": [
                    "self"
                ],
                "testFullyConvolutionalEndpointShapes": [
                    "self"
                ],
                "testRootlessFullyConvolutionalEndpointShapes": [
                    "self"
                ],
                "testAtrousFullyConvolutionalEndpointShapes": [
                    "self"
                ],
                "testAtrousFullyConvolutionalValues": [
                    "self"
                ],
                "testUnknownBatchSize": [
                    "self"
                ],
                "testFullyConvolutionalUnknownHeightWidth": [
                    "self"
                ],
                "testAtrousFullyConvolutionalUnknownHeightWidth": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.slim.python.slim.nets": {},
        "tensorflow.contrib.slim.python.slim.nets.resnet_utils": {
            "subsample": [
                "inputs",
                "factor",
                "scope"
            ],
            "conv2d_same": [
                "inputs",
                "num_outputs",
                "kernel_size",
                "stride",
                "rate",
                "scope"
            ],
            "stack_blocks_dense": [
                "net",
                "blocks",
                "output_stride",
                "outputs_collections"
            ],
            "resnet_arg_scope": [
                "is_training",
                "weight_decay",
                "batch_norm_decay",
                "batch_norm_epsilon",
                "batch_norm_scale"
            ],
            "Block": {}
        },
        "tensorflow.contrib.slim.python.slim.nets.overfeat": {
            "overfeat_arg_scope": [
                "weight_decay"
            ],
            "overfeat": [
                "inputs",
                "num_classes",
                "is_training",
                "dropout_keep_prob",
                "spatial_squeeze",
                "scope"
            ]
        },
        "tensorflow.contrib.slim.python.slim.nets.inception_v3_test": {
            "InceptionV3Test": {
                "testBuildClassificationNetwork": [
                    "self"
                ],
                "testBuildBaseNetwork": [
                    "self"
                ],
                "testBuildOnlyUptoFinalEndpoint": [
                    "self"
                ],
                "testBuildAndCheckAllEndPointsUptoMixed7c": [
                    "self"
                ],
                "testModelHasExpectedNumberOfParameters": [
                    "self"
                ],
                "testBuildEndPoints": [
                    "self"
                ],
                "testBuildEndPointsWithDepthMultiplierLessThanOne": [
                    "self"
                ],
                "testBuildEndPointsWithDepthMultiplierGreaterThanOne": [
                    "self"
                ],
                "testRaiseValueErrorWithInvalidDepthMultiplier": [
                    "self"
                ],
                "testHalfSizeImages": [
                    "self"
                ],
                "testUnknownImageShape": [
                    "self"
                ],
                "testUnknownBatchSize": [
                    "self"
                ],
                "testEvaluation": [
                    "self"
                ],
                "testTrainEvalWithReuse": [
                    "self"
                ],
                "testLogitsNotSqueezed": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.slim.python.slim.nets.resnet_v1": {
            "bottleneck": [
                "inputs",
                "depth",
                "depth_bottleneck",
                "stride",
                "rate",
                "outputs_collections",
                "scope"
            ],
            "resnet_v1": [
                "inputs",
                "blocks",
                "num_classes",
                "global_pool",
                "output_stride",
                "include_root_block",
                "reuse",
                "scope"
            ],
            "resnet_v1_50": [
                "inputs",
                "num_classes",
                "global_pool",
                "output_stride",
                "reuse",
                "scope"
            ],
            "resnet_v1_101": [
                "inputs",
                "num_classes",
                "global_pool",
                "output_stride",
                "reuse",
                "scope"
            ],
            "resnet_v1_152": [
                "inputs",
                "num_classes",
                "global_pool",
                "output_stride",
                "reuse",
                "scope"
            ],
            "resnet_v1_200": [
                "inputs",
                "num_classes",
                "global_pool",
                "output_stride",
                "reuse",
                "scope"
            ]
        },
        "tensorflow.contrib.slim.python.slim.nets.overfeat_test": {
            "OverFeatTest": {
                "testBuild": [
                    "self"
                ],
                "testFullyConvolutional": [
                    "self"
                ],
                "testEndPoints": [
                    "self"
                ],
                "testModelVariables": [
                    "self"
                ],
                "testEvaluation": [
                    "self"
                ],
                "testTrainEvalWithReuse": [
                    "self"
                ],
                "testForward": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.factorization": {},
        "tensorflow.contrib.factorization.kernels": {},
        "tensorflow.contrib.factorization.python": {},
        "tensorflow.contrib.factorization.python.ops.gmm_ops": {
            "_covariance": [
                "x",
                "diag"
            ],
            "_init_clusters_random": [
                "data",
                "num_clusters",
                "random_seed"
            ],
            "gmm": [
                "inp",
                "initial_clusters",
                "num_clusters",
                "random_seed",
                "covariance_type",
                "params"
            ],
            "GmmAlgorithm": {
                "__init__": [
                    "self",
                    "data",
                    "num_classes",
                    "initial_means",
                    "params",
                    "covariance_type",
                    "random_seed"
                ],
                "_create_variables": [
                    "self",
                    "data",
                    "initial_means"
                ],
                "training_ops": [
                    "self"
                ],
                "alphas": [
                    "self"
                ],
                "clusters": [
                    "self"
                ],
                "covariances": [
                    "self"
                ],
                "assignments": [
                    "self"
                ],
                "scores": [
                    "self"
                ],
                "_define_graph": [
                    "self",
                    "data"
                ],
                "_define_full_covariance_probs": [
                    "self",
                    "shard_id",
                    "shard"
                ],
                "_define_diag_covariance_probs": [
                    "self",
                    "shard_id",
                    "shard"
                ],
                "_define_log_prob_operation": [
                    "self",
                    "shard_id",
                    "shard"
                ],
                "_define_prior_log_prob_operation": [
                    "self",
                    "shard_id"
                ],
                "_define_expectation_operation": [
                    "self",
                    "shard_id"
                ],
                "_define_partial_maximization_operation": [
                    "self",
                    "shard_id",
                    "shard"
                ],
                "_define_maximization_operation": [
                    "self",
                    "num_batches"
                ],
                "_define_distance_to_clusters": [
                    "self",
                    "data"
                ],
                "_define_loglikelihood_operation": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.factorization.python.ops.gmm_ops_test": {
            "GmmOpsTest": {
                "setUp": [
                    "self"
                ],
                "make_data": [
                    "num_vectors"
                ],
                "make_data_from_centers": [
                    "num_vectors",
                    "centers"
                ],
                "test_covariance": [
                    "self"
                ],
                "test_simple_cluster": [
                    "self"
                ],
                "testParams": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.factorization.python.ops.gmm_test": {
            "GMMTest": {
                "setUp": [
                    "self"
                ],
                "make_random_centers": [
                    "num_centers",
                    "num_dims"
                ],
                "make_random_points": [
                    "centers",
                    "num_points"
                ],
                "test_clusters": [
                    "self"
                ],
                "test_fit": [
                    "self"
                ],
                "test_infer": [
                    "self"
                ],
                "_compare_with_sklearn": [
                    "self",
                    "cov_type"
                ],
                "test_compare_full": [
                    "self"
                ],
                "test_compare_diag": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.factorization.python.ops.kmeans": {
            "KMeansClustering": {
                "__init__": [
                    "self",
                    "num_clusters",
                    "model_dir",
                    "initial_clusters",
                    "distance_metric",
                    "random_seed",
                    "use_mini_batch",
                    "kmeans_plus_plus_num_retries",
                    "config"
                ],
                "fit": [
                    "self",
                    "x",
                    "y",
                    "monitors",
                    "logdir",
                    "steps",
                    "batch_size",
                    "relative_tolerance"
                ],
                "predict": [
                    "self",
                    "x",
                    "batch_size"
                ],
                "score": [
                    "self",
                    "x",
                    "batch_size"
                ],
                "transform": [
                    "self",
                    "x",
                    "batch_size"
                ],
                "clusters": [
                    "self"
                ],
                "_parse_tensor_or_dict": [
                    "self",
                    "features"
                ],
                "_get_train_ops": [
                    "self",
                    "features",
                    "_"
                ],
                "_get_predict_ops": [
                    "self",
                    "features"
                ],
                "_get_eval_ops": [
                    "self",
                    "features",
                    "_",
                    "unused_metrics"
                ]
            }
        },
        "tensorflow.contrib.factorization.python.ops.kmeans_test": {
            "normalize": [
                "x"
            ],
            "cosine_similarity": [
                "x",
                "y"
            ],
            "make_random_centers": [
                "num_centers",
                "num_dims",
                "center_norm"
            ],
            "make_random_points": [
                "centers",
                "num_points",
                "max_offset"
            ],
            "KMeansTest": {
                "setUp": [
                    "self"
                ],
                "config": [
                    "tf_random_seed"
                ],
                "batch_size": [
                    "self"
                ],
                "use_mini_batch": [
                    "self"
                ],
                "test_clusters": [
                    "self"
                ],
                "test_fit": [
                    "self"
                ],
                "test_monitor": [
                    "self"
                ],
                "test_infer": [
                    "self"
                ],
                "test_fit_with_cosine_distance": [
                    "self"
                ],
                "test_transform_with_cosine_distance": [
                    "self"
                ],
                "test_predict_with_cosine_distance": [
                    "self"
                ],
                "test_predict_with_cosine_distance_and_kmeans_plus_plus": [
                    "self"
                ],
                "test_fit_raise_if_num_clusters_larger_than_num_points_random_init": [
                    "self"
                ],
                "test_fit_raise_if_num_clusters_larger_than_num_points_kmeans_plus_plus": [
                    "self"
                ]
            },
            "MiniBatchKMeansTest": {
                "batch_size": [
                    "self"
                ],
                "use_mini_batch": [
                    "self"
                ]
            },
            "KMeansBenchmark": {
                "SetUp": [
                    "self",
                    "dimension",
                    "num_clusters",
                    "points_per_cluster",
                    "center_norm",
                    "cluster_width"
                ],
                "_report": [
                    "self",
                    "num_iters",
                    "start",
                    "end",
                    "scores"
                ],
                "_fit": [
                    "self",
                    "num_iters"
                ],
                "benchmark_01_2dim_5center_500point": [
                    "self"
                ],
                "benchmark_02_20dim_20center_10kpoint": [
                    "self"
                ],
                "benchmark_03_100dim_50center_50kpoint": [
                    "self"
                ],
                "benchmark_03_100dim_50center_50kpoint_unseparated": [
                    "self"
                ],
                "benchmark_04_100dim_500center_500kpoint": [
                    "self"
                ],
                "benchmark_05_100dim_500center_500kpoint_unseparated": [
                    "self"
                ]
            },
            "TensorflowKMeansBenchmark": {
                "_fit": [
                    "self",
                    "num_iters"
                ]
            },
            "SklearnKMeansBenchmark": {
                "_fit": [
                    "self",
                    "num_iters"
                ]
            }
        },
        "tensorflow.contrib.factorization.python.ops.clustering_ops": {
            "KMeans": {
                "__init__": [
                    "self",
                    "inputs",
                    "num_clusters",
                    "initial_clusters",
                    "distance_metric",
                    "use_mini_batch",
                    "random_seed",
                    "kmeans_plus_plus_num_retries"
                ],
                "_distance_graph": [
                    "cls",
                    "inputs",
                    "clusters",
                    "distance_metric"
                ],
                "_compute_euclidean_distance": [
                    "cls",
                    "inputs",
                    "clusters"
                ],
                "_compute_cosine_distance": [
                    "cls",
                    "inputs",
                    "clusters",
                    "inputs_normalized"
                ],
                "_infer_graph": [
                    "self",
                    "inputs",
                    "clusters"
                ],
                "_init_clusters_random": [
                    "self"
                ],
                "_clusters_l2_normalized": [
                    "self"
                ],
                "_init_clusters": [
                    "self"
                ],
                "_l2_normalize_data": [
                    "cls",
                    "inputs"
                ],
                "training_graph": [
                    "self"
                ],
                "_mini_batch_training_op": [
                    "self",
                    "inputs",
                    "cluster_idx_list",
                    "cluster_centers",
                    "cluster_centers_var",
                    "total_counts"
                ],
                "_full_batch_training_op": [
                    "self",
                    "inputs",
                    "cluster_idx_list",
                    "cluster_centers"
                ]
            }
        },
        "tensorflow.contrib.factorization.python.ops.gen_clustering_ops": {
            "kmeans_plus_plus_initialization": [
                "points",
                "num_to_sample",
                "seed",
                "num_retries_per_sample",
                "name"
            ],
            "nearest_neighbors": [
                "points",
                "centers",
                "k",
                "name"
            ],
            "_InitOpDefLibrary": []
        },
        "tensorflow.contrib.factorization.python.ops.factorization_ops_test": {
            "np_matrix_to_tf_sparse": [
                "np_matrix",
                "row_slices",
                "col_slices",
                "transpose",
                "shuffle"
            ],
            "sparse_input": [],
            "WalsModelTest": {
                "setUp": [
                    "self"
                ],
                "_run_test_process_input": [
                    "self",
                    "use_factors_weights_cache"
                ],
                "_run_test_process_input_transposed": [
                    "self",
                    "use_factors_weights_cache"
                ],
                "_run_test_als": [
                    "self",
                    "use_factors_weights_cache"
                ],
                "_run_test_als_transposed": [
                    "self",
                    "use_factors_weights_cache"
                ],
                "simple_train": [
                    "self",
                    "model",
                    "inp",
                    "num_iterations"
                ],
                "_run_test_train_full_low_rank_als": [
                    "self",
                    "use_factors_weights_cache"
                ],
                "_run_test_train_full_low_rank_wals": [
                    "self",
                    "use_factors_weights_cache"
                ],
                "_run_test_train_matrix_completion_wals": [
                    "self",
                    "use_factors_weights_cache"
                ],
                "test_process_input_with_cache": [
                    "self"
                ],
                "test_process_input_without_cache": [
                    "self"
                ],
                "test_process_input_transposed_with_cache": [
                    "self"
                ],
                "test_process_input_transposed_without_cache": [
                    "self"
                ],
                "test_als_with_cache": [
                    "self"
                ],
                "test_als_without_cache": [
                    "self"
                ],
                "test_als_transposed_with_cache": [
                    "self"
                ],
                "test_als_transposed_without_cache": [
                    "self"
                ],
                "test_train_full_low_rank_wals_with_cache": [
                    "self"
                ],
                "test_train_full_low_rank_wals_without_cache": [
                    "self"
                ],
                "test_train_matrix_completion_wals_with_cache": [
                    "self"
                ],
                "test_train_matrix_completion_wals_without_cache": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.factorization.python.ops": {},
        "tensorflow.contrib.factorization.python.ops.gen_factorization_ops": {
            "wals_compute_partial_lhs_and_rhs": [
                "factors",
                "factor_weights",
                "unobserved_weights",
                "input_weights",
                "input_indices",
                "input_values",
                "input_block_size",
                "input_is_transpose",
                "name"
            ],
            "_InitOpDefLibrary": []
        },
        "tensorflow.contrib.factorization.python.ops.gmm": {
            "GMM": {
                "__init__": [
                    "self",
                    "num_clusters",
                    "model_dir",
                    "random_seed",
                    "params",
                    "initial_clusters",
                    "covariance_type",
                    "batch_size",
                    "steps",
                    "continue_training",
                    "config",
                    "verbose"
                ],
                "fit": [
                    "self",
                    "x",
                    "y",
                    "monitors",
                    "logdir",
                    "steps"
                ],
                "predict": [
                    "self",
                    "x",
                    "batch_size"
                ],
                "score": [
                    "self",
                    "x",
                    "batch_size"
                ],
                "transform": [
                    "self",
                    "x",
                    "batch_size"
                ],
                "clusters": [
                    "self"
                ],
                "covariances": [
                    "self"
                ],
                "_parse_tensor_or_dict": [
                    "self",
                    "features"
                ],
                "_get_train_ops": [
                    "self",
                    "features",
                    "_"
                ],
                "_get_predict_ops": [
                    "self",
                    "features"
                ],
                "_get_eval_ops": [
                    "self",
                    "features",
                    "_",
                    "unused_metrics"
                ]
            }
        },
        "tensorflow.contrib.factorization.python.ops.factorization_ops": {
            "WALSModel": {
                "__init__": [
                    "self",
                    "input_rows",
                    "input_cols",
                    "n_components",
                    "unobserved_weight",
                    "regularization",
                    "row_init",
                    "col_init",
                    "num_row_shards",
                    "num_col_shards",
                    "row_weights",
                    "col_weights",
                    "use_factors_weights_cache"
                ],
                "row_factors": [
                    "self"
                ],
                "col_factors": [
                    "self"
                ],
                "row_weights": [
                    "self"
                ],
                "col_weights": [
                    "self"
                ],
                "initialize_op": [
                    "self"
                ],
                "_shard_sizes": [
                    "cls",
                    "dims",
                    "num_shards"
                ],
                "_create_factors": [
                    "cls",
                    "rows",
                    "cols",
                    "num_shards",
                    "init",
                    "name"
                ],
                "_create_weights": [
                    "cls",
                    "wt_init",
                    "num_wts",
                    "num_shards",
                    "name"
                ],
                "_create_gramian": [
                    "n_components",
                    "name"
                ],
                "_transient_var": [
                    "name"
                ],
                "_prepare_gramian": [
                    "self",
                    "factors",
                    "gramian"
                ],
                "_cached_copy": [
                    "self",
                    "var",
                    "name",
                    "pass_through"
                ],
                "_create_transient_vars": [
                    "self"
                ],
                "worker_init": [
                    "self"
                ],
                "row_update_prep_gramian_op": [
                    "self"
                ],
                "col_update_prep_gramian_op": [
                    "self"
                ],
                "initialize_row_update_op": [
                    "self"
                ],
                "initialize_col_update_op": [
                    "self"
                ],
                "_get_sharding_func": [
                    "size",
                    "num_shards"
                ],
                "scatter_update": [
                    "cls",
                    "factor",
                    "indices",
                    "values",
                    "sharding_func"
                ],
                "update_row_factors": [
                    "self",
                    "sp_input",
                    "transpose_input"
                ],
                "update_col_factors": [
                    "self",
                    "sp_input",
                    "transpose_input"
                ],
                "project_row_factors": [
                    "self",
                    "sp_input",
                    "transpose_input",
                    "projection_weights"
                ],
                "project_col_factors": [
                    "self",
                    "sp_input",
                    "transpose_input",
                    "projection_weights"
                ],
                "_process_input_helper": [
                    "self",
                    "update_row_factors",
                    "sp_input",
                    "transpose_input",
                    "row_weights"
                ]
            }
        },
        "tensorflow.contrib.factorization.python.kernel_tests.wals_solver_ops_test": {
            "SparseBlock3x3": [],
            "WalsSolverOpsTest": {
                "setUp": [
                    "self"
                ],
                "testWalsSolverLhs": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.factorization.python.kernel_tests": {},
        "tensorflow.contrib.factorization.python.kernel_tests.clustering_ops_test": {
            "KmeansPlusPlusInitializationTest": {
                "setUp": [
                    "self"
                ],
                "runTestWithSeed": [
                    "self",
                    "seed"
                ],
                "testBasic": [
                    "self"
                ]
            },
            "NearestCentersTest": {
                "setUp": [
                    "self"
                ],
                "testNearest1": [
                    "self"
                ],
                "testNearest2": [
                    "self"
                ]
            },
            "NearestCentersLargeTest": {
                "setUp": [
                    "self"
                ],
                "testNearest1": [
                    "self"
                ],
                "testNearest5": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.factorization.ops": {},
        "tensorflow.contrib.factorization.examples.mnist": {
            "placeholder_inputs": [],
            "fill_feed_dict": [
                "data_set",
                "images_pl",
                "labels_pl",
                "batch_size"
            ],
            "do_eval": [
                "sess",
                "eval_correct",
                "images_placeholder",
                "labels_placeholder",
                "data_set"
            ],
            "inference": [
                "inp",
                "num_clusters",
                "hidden1_units",
                "hidden2_units"
            ],
            "run_training": [],
            "MnistTest": {
                "test_train": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.factorization.examples": {},
        "tensorflow.contrib.pi_examples": {},
        "tensorflow.contrib.pi_examples.camera": {},
        "tensorflow.contrib.pi_examples.label_image": {},
        "tensorflow.contrib.pi_examples.label_image.data": {},
        "tensorflow.contrib.lookup.lookup_ops": {
            "string_to_index": [
                "tensor",
                "mapping",
                "default_value",
                "name"
            ],
            "index_to_string": [
                "tensor",
                "mapping",
                "default_value",
                "name"
            ],
            "LookupInterface": {
                "__init__": [
                    "self",
                    "key_dtype",
                    "value_dtype",
                    "name"
                ],
                "key_dtype": [
                    "self"
                ],
                "value_dtype": [
                    "self"
                ],
                "name": [
                    "self"
                ],
                "init": [
                    "self"
                ],
                "size": [
                    "self",
                    "name"
                ],
                "lookup": [
                    "self",
                    "keys",
                    "name"
                ],
                "_check_table_dtypes": [
                    "self",
                    "key_dtype",
                    "value_dtype"
                ]
            },
            "InitializableLookupTableBase": {
                "__init__": [
                    "self",
                    "table_ref",
                    "default_value",
                    "initializer"
                ],
                "table_ref": [
                    "self"
                ],
                "default_value": [
                    "self"
                ],
                "init": [
                    "self"
                ],
                "size": [
                    "self",
                    "name"
                ],
                "lookup": [
                    "self",
                    "keys",
                    "name"
                ]
            },
            "HashTable": {
                "__init__": [
                    "self",
                    "initializer",
                    "default_value",
                    "shared_name",
                    "name"
                ]
            },
            "TableInitializerBase": {
                "__init__": [
                    "self",
                    "key_dtype",
                    "value_dtype"
                ],
                "key_dtype": [
                    "self"
                ],
                "value_dtype": [
                    "self"
                ],
                "initialize": [
                    "self",
                    "table"
                ]
            },
            "KeyValueTensorInitializer": {
                "__init__": [
                    "self",
                    "keys",
                    "values",
                    "key_dtype",
                    "value_dtype",
                    "name"
                ],
                "initialize": [
                    "self",
                    "table"
                ]
            },
            "TextFileIndex": {},
            "TextFileInitializer": {
                "__init__": [
                    "self",
                    "filename",
                    "key_dtype",
                    "key_index",
                    "value_dtype",
                    "value_index",
                    "vocab_size",
                    "delimiter",
                    "name"
                ],
                "initialize": [
                    "self",
                    "table"
                ]
            },
            "TextFileStringTableInitializer": {
                "__init__": [
                    "self",
                    "filename",
                    "key_column_index",
                    "value_column_index",
                    "vocab_size",
                    "delimiter",
                    "name"
                ]
            },
            "TextFileIdTableInitializer": {
                "__init__": [
                    "self",
                    "filename",
                    "key_column_index",
                    "value_column_index",
                    "vocab_size",
                    "delimiter",
                    "name"
                ]
            },
            "MutableHashTable": {
                "__init__": [
                    "self",
                    "key_dtype",
                    "value_dtype",
                    "default_value",
                    "shared_name",
                    "name",
                    "checkpoint"
                ],
                "size": [
                    "self",
                    "name"
                ],
                "lookup": [
                    "self",
                    "keys",
                    "name"
                ],
                "insert": [
                    "self",
                    "keys",
                    "values",
                    "name"
                ],
                "export": [
                    "self",
                    "name"
                ]
            },
            "MutableDenseHashTable": {
                "__init__": [
                    "self",
                    "key_dtype",
                    "value_dtype",
                    "default_value",
                    "empty_key",
                    "initial_num_buckets",
                    "shared_name",
                    "name",
                    "checkpoint"
                ],
                "size": [
                    "self",
                    "name"
                ],
                "lookup": [
                    "self",
                    "keys",
                    "name"
                ],
                "insert": [
                    "self",
                    "keys",
                    "values",
                    "name"
                ],
                "export": [
                    "self",
                    "name"
                ]
            }
        },
        "tensorflow.contrib.lookup.lookup_ops_test": {
            "HashTableOpTest": {
                "testHashTable": [
                    "self"
                ],
                "testHashTableFindHighRank": [
                    "self"
                ],
                "testHashTableInitWithPythonArrays": [
                    "self"
                ],
                "testHashTableInitWithNumPyArrays": [
                    "self"
                ],
                "testMultipleHashTables": [
                    "self"
                ],
                "testHashTableWithTensorDefault": [
                    "self"
                ],
                "testHashTableWithSparseTensorInput": [
                    "self"
                ],
                "testSignatureMismatch": [
                    "self"
                ],
                "testDTypes": [
                    "self"
                ],
                "testNotInitialized": [
                    "self"
                ],
                "testInitializeTwice": [
                    "self"
                ],
                "testInitializationWithInvalidDimensions": [
                    "self"
                ],
                "testMultipleSessions": [
                    "self"
                ]
            },
            "MutableHashTableOpTest": {
                "testMutableHashTable": [
                    "self"
                ],
                "testSaveRestore": [
                    "self"
                ],
                "testSharing": [
                    "self"
                ],
                "testMutableHashTableOfTensors": [
                    "self"
                ],
                "testMutableHashTableExportInsert": [
                    "self"
                ],
                "testMutableHashTableOfTensorsInvalidShape": [
                    "self"
                ],
                "testMutableHashTableInvalidDefaultValue": [
                    "self"
                ],
                "testMutableHashTableDuplicateInsert": [
                    "self"
                ],
                "testMutableHashTableFindHighRank": [
                    "self"
                ],
                "testMutableHashTableInsertHighRank": [
                    "self"
                ],
                "testMutableHashTableOfTensorsFindHighRank": [
                    "self"
                ],
                "testMultipleMutableHashTables": [
                    "self"
                ],
                "testMutableHashTableWithTensorDefault": [
                    "self"
                ],
                "testSignatureMismatch": [
                    "self"
                ],
                "testMutableHashTableStringFloat": [
                    "self"
                ],
                "testMutableHashTableInt64String": [
                    "self"
                ]
            },
            "MutableDenseHashTableOpTest": {
                "testBasic": [
                    "self"
                ],
                "testLookupUnknownShape": [
                    "self"
                ],
                "testMapStringToFloat": [
                    "self"
                ],
                "testMapInt64ToFloat": [
                    "self"
                ],
                "testVectorValues": [
                    "self"
                ],
                "testVectorKeys": [
                    "self"
                ],
                "testResize": [
                    "self"
                ],
                "testExport": [
                    "self"
                ],
                "testSaveRestore": [
                    "self"
                ],
                "testVectorSaveRestore": [
                    "self"
                ],
                "testVectorScalarSaveRestore": [
                    "self"
                ],
                "testReprobe": [
                    "self"
                ],
                "testCustomEmptyKey": [
                    "self"
                ],
                "testErrors": [
                    "self"
                ]
            },
            "StringToIndexTest": {
                "test_string_to_index": [
                    "self"
                ],
                "test_duplicate_entries": [
                    "self"
                ],
                "test_string_to_index_with_default_value": [
                    "self"
                ]
            },
            "IndexToStringTest": {
                "test_index_to_string": [
                    "self"
                ],
                "test_duplicate_entries": [
                    "self"
                ],
                "test_index_to_string_with_default_value": [
                    "self"
                ]
            },
            "InitializeTableFromFileOpTest": {
                "_createVocabFile": [
                    "self",
                    "basename"
                ],
                "testInitializeTable": [
                    "self"
                ],
                "testInitializeIndexTable": [
                    "self"
                ],
                "testMultiColumn": [
                    "self"
                ],
                "testInvalidDataTypeInMultiColumn": [
                    "self"
                ],
                "testInvalidDataType": [
                    "self"
                ],
                "testInvalidIndex": [
                    "self"
                ],
                "testInitializeSameTableWithMultipleNodes": [
                    "self"
                ],
                "testInitializeTableWithNoFilename": [
                    "self"
                ],
                "testInitializeWithVocabSize": [
                    "self"
                ],
                "testFeedVocabularyName": [
                    "self"
                ],
                "testInvalidFilenames": [
                    "self"
                ],
                "testIdToStringTable": [
                    "self"
                ],
                "testStringToIdTable": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.lookup": {},
        "tensorflow.contrib.distributions": {},
        "tensorflow.contrib.distributions.python": {},
        "tensorflow.contrib.distributions.python.ops.operator_pd_cholesky": {
            "OperatorPDCholesky": {
                "__init__": [
                    "self",
                    "chol",
                    "verify_pd",
                    "name"
                ],
                "verify_pd": [
                    "self"
                ],
                "name": [
                    "self"
                ],
                "dtype": [
                    "self"
                ],
                "_batch_log_det": [
                    "self"
                ],
                "inputs": [
                    "self"
                ],
                "_inv_quadratic_form_on_vectors": [
                    "self",
                    "x"
                ],
                "_matmul": [
                    "self",
                    "x",
                    "transpose_x"
                ],
                "_batch_matmul": [
                    "self",
                    "x",
                    "transpose_x"
                ],
                "_sqrt_matmul": [
                    "self",
                    "x",
                    "transpose_x"
                ],
                "_batch_sqrt_matmul": [
                    "self",
                    "x",
                    "transpose_x"
                ],
                "_batch_solve": [
                    "self",
                    "rhs"
                ],
                "_batch_sqrt_solve": [
                    "self",
                    "rhs"
                ],
                "get_shape": [
                    "self"
                ],
                "_shape": [
                    "self"
                ],
                "_check_chol": [
                    "self",
                    "chol"
                ],
                "_sqrt_to_dense": [
                    "self"
                ],
                "_to_dense": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.distributions.python.ops.transformed_distribution": {
            "TransformedDistribution": {
                "__init__": [
                    "self",
                    "distribution",
                    "bijector",
                    "validate_args",
                    "name"
                ],
                "distribution": [
                    "self"
                ],
                "bijector": [
                    "self"
                ],
                "_event_shape": [
                    "self"
                ],
                "_get_event_shape": [
                    "self"
                ],
                "_batch_shape": [
                    "self"
                ],
                "_get_batch_shape": [
                    "self"
                ],
                "_sample_n": [
                    "self",
                    "n",
                    "seed",
                    "bijector_kwargs",
                    "distribution_kwargs"
                ],
                "_log_prob": [
                    "self",
                    "y",
                    "bijector_kwargs",
                    "distribution_kwargs"
                ],
                "_prob": [
                    "self",
                    "y",
                    "bijector_kwargs",
                    "distribution_kwargs"
                ],
                "_log_cdf": [
                    "self",
                    "y",
                    "bijector_kwargs",
                    "distribution_kwargs"
                ],
                "_cdf": [
                    "self",
                    "y",
                    "bijector_kwargs",
                    "distribution_kwargs"
                ],
                "_log_survival_function": [
                    "self",
                    "y",
                    "bijector_kwargs",
                    "distribution_kwargs"
                ],
                "_survival_function": [
                    "self",
                    "y",
                    "bijector_kwargs",
                    "distribution_kwargs"
                ]
            }
        },
        "tensorflow.contrib.distributions.python.ops.student_t": {
            "StudentT": {
                "__init__": [
                    "self",
                    "df",
                    "mu",
                    "sigma",
                    "validate_args",
                    "allow_nan_stats",
                    "name"
                ],
                "_param_shapes": [
                    "sample_shape"
                ],
                "df": [
                    "self"
                ],
                "mu": [
                    "self"
                ],
                "sigma": [
                    "self"
                ],
                "_batch_shape": [
                    "self"
                ],
                "_get_batch_shape": [
                    "self"
                ],
                "_event_shape": [
                    "self"
                ],
                "_get_event_shape": [
                    "self"
                ],
                "_sample_n": [
                    "self",
                    "n",
                    "seed"
                ],
                "_log_prob": [
                    "self",
                    "x"
                ],
                "_prob": [
                    "self",
                    "x"
                ],
                "_entropy": [
                    "self"
                ],
                "_mean": [
                    "self"
                ],
                "_variance": [
                    "self"
                ],
                "_std": [
                    "self"
                ],
                "_mode": [
                    "self"
                ],
                "_ones": [
                    "self"
                ]
            },
            "StudentTWithAbsDfSoftplusSigma": {
                "__init__": [
                    "self",
                    "df",
                    "mu",
                    "sigma",
                    "validate_args",
                    "allow_nan_stats",
                    "name"
                ]
            }
        },
        "tensorflow.contrib.distributions.python.ops.distribution": {
            "_copy_fn": [
                "fn"
            ],
            "_update_docstring": [
                "old_str",
                "append_str"
            ],
            "_BaseDistribution": {},
            "_DistributionMeta": {
                "__new__": [
                    "mcs",
                    "classname",
                    "baseclasses",
                    "attrs"
                ]
            },
            "Distribution": {
                "__init__": [
                    "self",
                    "dtype",
                    "is_continuous",
                    "is_reparameterized",
                    "validate_args",
                    "allow_nan_stats",
                    "parameters",
                    "graph_parents",
                    "name"
                ],
                "param_shapes": [
                    "cls",
                    "sample_shape",
                    "name"
                ],
                "param_static_shapes": [
                    "cls",
                    "sample_shape"
                ],
                "_param_shapes": [
                    "sample_shape"
                ],
                "name": [
                    "self"
                ],
                "dtype": [
                    "self"
                ],
                "parameters": [
                    "self"
                ],
                "is_continuous": [
                    "self"
                ],
                "is_reparameterized": [
                    "self"
                ],
                "allow_nan_stats": [
                    "self"
                ],
                "validate_args": [
                    "self"
                ],
                "copy": [
                    "self"
                ],
                "_batch_shape": [
                    "self"
                ],
                "batch_shape": [
                    "self",
                    "name"
                ],
                "_get_batch_shape": [
                    "self"
                ],
                "get_batch_shape": [
                    "self"
                ],
                "_event_shape": [
                    "self"
                ],
                "event_shape": [
                    "self",
                    "name"
                ],
                "_get_event_shape": [
                    "self"
                ],
                "get_event_shape": [
                    "self"
                ],
                "_sample_n": [
                    "self",
                    "n",
                    "seed"
                ],
                "sample": [
                    "self",
                    "sample_shape",
                    "seed",
                    "name"
                ],
                "sample_n": [
                    "self",
                    "n",
                    "seed",
                    "name"
                ],
                "_log_prob": [
                    "self",
                    "value"
                ],
                "log_prob": [
                    "self",
                    "value",
                    "name"
                ],
                "prob": [
                    "self",
                    "value",
                    "name"
                ],
                "_log_cdf": [
                    "self",
                    "value"
                ],
                "log_cdf": [
                    "self",
                    "value",
                    "name"
                ],
                "_cdf": [
                    "self",
                    "value"
                ],
                "cdf": [
                    "self",
                    "value",
                    "name"
                ],
                "_log_survival_function": [
                    "self",
                    "value"
                ],
                "log_survival_function": [
                    "self",
                    "value",
                    "name"
                ],
                "_survival_function": [
                    "self",
                    "value"
                ],
                "survival_function": [
                    "self",
                    "value",
                    "name"
                ],
                "_entropy": [
                    "self"
                ],
                "entropy": [
                    "self",
                    "name"
                ],
                "_mean": [
                    "self"
                ],
                "mean": [
                    "self",
                    "name"
                ],
                "_variance": [
                    "self"
                ],
                "variance": [
                    "self",
                    "name"
                ],
                "_std": [
                    "self"
                ],
                "std": [
                    "self",
                    "name"
                ],
                "_mode": [
                    "self"
                ],
                "mode": [
                    "self",
                    "name"
                ],
                "log_pdf": [
                    "self",
                    "value",
                    "name"
                ],
                "pdf": [
                    "self",
                    "value",
                    "name"
                ],
                "log_pmf": [
                    "self",
                    "value",
                    "name"
                ],
                "pmf": [
                    "self",
                    "value",
                    "name"
                ],
                "_name_scope": [
                    "self",
                    "name",
                    "values"
                ],
                "_expand_sample_shape": [
                    "self",
                    "sample_shape"
                ]
            }
        },
        "tensorflow.contrib.distributions.python.ops.mixture": {
            "Mixture": {
                "__init__": [
                    "self",
                    "cat",
                    "components",
                    "validate_args",
                    "allow_nan_stats",
                    "name"
                ],
                "cat": [
                    "self"
                ],
                "components": [
                    "self"
                ],
                "num_components": [
                    "self"
                ],
                "_batch_shape": [
                    "self"
                ],
                "_get_batch_shape": [
                    "self"
                ],
                "_event_shape": [
                    "self"
                ],
                "_get_event_shape": [
                    "self"
                ],
                "_mean": [
                    "self"
                ],
                "_log_prob": [
                    "self",
                    "x"
                ],
                "_prob": [
                    "self",
                    "x"
                ],
                "_sample_n": [
                    "self",
                    "n",
                    "seed"
                ],
                "entropy_lower_bound": [
                    "self",
                    "name"
                ],
                "_cat_probs": [
                    "self",
                    "log_probs"
                ]
            }
        },
        "tensorflow.contrib.distributions.python.ops.kullback_leibler": {
            "_registered_kl": [
                "type_a",
                "type_b"
            ],
            "kl": [
                "dist_a",
                "dist_b",
                "allow_nan",
                "name"
            ],
            "RegisterKL": {
                "__init__": [
                    "self",
                    "dist_cls_a",
                    "dist_cls_b"
                ],
                "__call__": [
                    "self",
                    "kl_fn"
                ]
            }
        },
        "tensorflow.contrib.distributions.python.ops.inverse_gamma": {
            "InverseGamma": {
                "__init__": [
                    "self",
                    "alpha",
                    "beta",
                    "validate_args",
                    "allow_nan_stats",
                    "name"
                ],
                "_param_shapes": [
                    "sample_shape"
                ],
                "alpha": [
                    "self"
                ],
                "beta": [
                    "self"
                ],
                "_batch_shape": [
                    "self"
                ],
                "_get_batch_shape": [
                    "self"
                ],
                "_event_shape": [
                    "self"
                ],
                "_get_event_shape": [
                    "self"
                ],
                "_sample_n": [
                    "self",
                    "n",
                    "seed"
                ],
                "_log_prob": [
                    "self",
                    "x"
                ],
                "_prob": [
                    "self",
                    "x"
                ],
                "_log_cdf": [
                    "self",
                    "x"
                ],
                "_cdf": [
                    "self",
                    "x"
                ],
                "_entropy": [
                    "self"
                ],
                "_mean": [
                    "self"
                ],
                "_variance": [
                    "self"
                ],
                "_mode": [
                    "self"
                ]
            },
            "InverseGammaWithSoftplusAlphaBeta": {
                "__init__": [
                    "self",
                    "alpha",
                    "beta",
                    "validate_args",
                    "allow_nan_stats",
                    "name"
                ]
            }
        },
        "tensorflow.contrib.distributions.python.ops.normal_conjugate_posteriors": {
            "normal_conjugates_known_sigma_posterior": [
                "prior",
                "sigma",
                "s",
                "n"
            ],
            "normal_conjugates_known_sigma_predictive": [
                "prior",
                "sigma",
                "s",
                "n"
            ]
        },
        "tensorflow.contrib.distributions.python.ops.quantized_distribution": {
            "_logsum_expbig_minus_expsmall": [
                "big",
                "small"
            ],
            "QuantizedDistribution": {
                "__init__": [
                    "self",
                    "distribution",
                    "lower_cutoff",
                    "upper_cutoff",
                    "validate_args",
                    "name"
                ],
                "_batch_shape": [
                    "self"
                ],
                "_get_batch_shape": [
                    "self"
                ],
                "_event_shape": [
                    "self"
                ],
                "_get_event_shape": [
                    "self"
                ],
                "_sample_n": [
                    "self",
                    "n",
                    "seed"
                ],
                "_log_prob": [
                    "self",
                    "y"
                ],
                "_log_prob_with_logcdf": [
                    "self",
                    "y"
                ],
                "_log_prob_with_logsf_and_logcdf": [
                    "self",
                    "y"
                ],
                "_prob": [
                    "self",
                    "y"
                ],
                "_prob_with_cdf": [
                    "self",
                    "y"
                ],
                "_prob_with_sf_and_cdf": [
                    "self",
                    "y"
                ],
                "_log_cdf": [
                    "self",
                    "y"
                ],
                "_cdf": [
                    "self",
                    "y"
                ],
                "_log_survival_function": [
                    "self",
                    "y"
                ],
                "_survival_function": [
                    "self",
                    "y"
                ],
                "_check_integer": [
                    "self",
                    "value"
                ],
                "distribution": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.distributions.python.ops.multinomial": {
            "Multinomial": {
                "__init__": [
                    "self",
                    "n",
                    "logits",
                    "p",
                    "validate_args",
                    "allow_nan_stats",
                    "name"
                ],
                "n": [
                    "self"
                ],
                "logits": [
                    "self"
                ],
                "p": [
                    "self"
                ],
                "_batch_shape": [
                    "self"
                ],
                "_get_batch_shape": [
                    "self"
                ],
                "_event_shape": [
                    "self"
                ],
                "_get_event_shape": [
                    "self"
                ],
                "_log_prob": [
                    "self",
                    "counts"
                ],
                "_prob": [
                    "self",
                    "counts"
                ],
                "_mean": [
                    "self"
                ],
                "_variance": [
                    "self"
                ],
                "_assert_valid_sample": [
                    "self",
                    "counts"
                ]
            }
        },
        "tensorflow.contrib.distributions.python.ops.shape": {
            "_DistributionShape": {
                "__init__": [
                    "self",
                    "batch_ndims",
                    "event_ndims",
                    "validate_args",
                    "name"
                ],
                "name": [
                    "self"
                ],
                "batch_ndims": [
                    "self"
                ],
                "event_ndims": [
                    "self"
                ],
                "validate_args": [
                    "self"
                ],
                "get_ndims": [
                    "self",
                    "x",
                    "name"
                ],
                "get_sample_ndims": [
                    "self",
                    "x",
                    "name"
                ],
                "get_dims": [
                    "self",
                    "x",
                    "name"
                ],
                "get_shape": [
                    "self",
                    "x",
                    "name"
                ],
                "make_batch_of_event_sample_matrices": [
                    "self",
                    "x",
                    "name"
                ],
                "undo_make_batch_of_event_sample_matrices": [
                    "self",
                    "x",
                    "sample_shape",
                    "name"
                ],
                "_name_scope": [
                    "self",
                    "name",
                    "values"
                ],
                "_is_all_constant_helper": [
                    "self"
                ],
                "_assert_non_negative_int32_scalar": [
                    "self",
                    "x"
                ],
                "_introspect_ndims": [
                    "self",
                    "ndims"
                ]
            }
        },
        "tensorflow.contrib.distributions.python.ops.poisson": {
            "Poisson": {
                "__init__": [
                    "self",
                    "lam",
                    "validate_args",
                    "allow_nan_stats",
                    "name"
                ],
                "lam": [
                    "self"
                ],
                "_batch_shape": [
                    "self"
                ],
                "_get_batch_shape": [
                    "self"
                ],
                "_event_shape": [
                    "self"
                ],
                "_get_event_shape": [
                    "self"
                ],
                "_log_prob": [
                    "self",
                    "x"
                ],
                "_prob": [
                    "self",
                    "x"
                ],
                "_log_cdf": [
                    "self",
                    "x"
                ],
                "_cdf": [
                    "self",
                    "x"
                ],
                "_mean": [
                    "self"
                ],
                "_variance": [
                    "self"
                ],
                "_std": [
                    "self"
                ],
                "_mode": [
                    "self"
                ],
                "_assert_valid_sample": [
                    "self",
                    "x",
                    "check_integer"
                ]
            }
        },
        "tensorflow.contrib.distributions.python.ops.laplace": {
            "Laplace": {
                "__init__": [
                    "self",
                    "loc",
                    "scale",
                    "validate_args",
                    "allow_nan_stats",
                    "name"
                ],
                "_param_shapes": [
                    "sample_shape"
                ],
                "loc": [
                    "self"
                ],
                "scale": [
                    "self"
                ],
                "_batch_shape": [
                    "self"
                ],
                "_get_batch_shape": [
                    "self"
                ],
                "_event_shape": [
                    "self"
                ],
                "_get_event_shape": [
                    "self"
                ],
                "_sample_n": [
                    "self",
                    "n",
                    "seed"
                ],
                "_log_prob": [
                    "self",
                    "x"
                ],
                "_prob": [
                    "self",
                    "x"
                ],
                "_log_cdf": [
                    "self",
                    "x"
                ],
                "_cdf": [
                    "self",
                    "x"
                ],
                "_entropy": [
                    "self"
                ],
                "_mean": [
                    "self"
                ],
                "_variance": [
                    "self"
                ],
                "_std": [
                    "self"
                ],
                "_median": [
                    "self"
                ],
                "_mode": [
                    "self"
                ]
            },
            "LaplaceWithSoftplusScale": {
                "__init__": [
                    "self",
                    "loc",
                    "scale",
                    "validate_args",
                    "allow_nan_stats",
                    "name"
                ]
            }
        },
        "tensorflow.contrib.distributions.python.ops.operator_pd_vdvt_update": {
            "OperatorPDSqrtVDVTUpdate": {
                "__init__": [
                    "self",
                    "operator",
                    "v",
                    "diag",
                    "verify_pd",
                    "verify_shapes",
                    "name"
                ],
                "_get_identity_operator": [
                    "self",
                    "v"
                ],
                "_check_types": [
                    "self",
                    "operator",
                    "v",
                    "diag"
                ],
                "_check_shapes_static": [
                    "self",
                    "operator",
                    "v",
                    "diag"
                ],
                "_check_shapes_dynamic": [
                    "self",
                    "operator",
                    "v",
                    "diag"
                ],
                "name": [
                    "self"
                ],
                "verify_pd": [
                    "self"
                ],
                "dtype": [
                    "self"
                ],
                "_inv_quadratic_form_on_vectors": [
                    "self",
                    "x"
                ],
                "inputs": [
                    "self"
                ],
                "get_shape": [
                    "self"
                ],
                "_shape": [
                    "self"
                ],
                "_det": [
                    "self"
                ],
                "_batch_log_det": [
                    "self"
                ],
                "_log_det": [
                    "self"
                ],
                "_sqrt_log_det": [
                    "self"
                ],
                "_batch_sqrt_log_det": [
                    "self"
                ],
                "_chol_capacitance": [
                    "self",
                    "batch_mode"
                ],
                "_sqrt_log_det_core": [
                    "self",
                    "diag_chol_c"
                ],
                "_batch_matmul": [
                    "self",
                    "x",
                    "transpose_x"
                ],
                "_matmul": [
                    "self",
                    "x",
                    "transpose_x"
                ],
                "_batch_sqrt_matmul": [
                    "self",
                    "x",
                    "transpose_x"
                ],
                "_sqrt_matmul": [
                    "self",
                    "x",
                    "transpose_x"
                ],
                "_solve": [
                    "self",
                    "rhs"
                ],
                "_batch_solve": [
                    "self",
                    "rhs"
                ],
                "_sqrt_solve": [
                    "self",
                    "rhs"
                ],
                "_batch_sqrt_solve": [
                    "self",
                    "rhs"
                ],
                "_to_dense": [
                    "self"
                ],
                "_sqrt_to_dense": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.distributions.python.ops.uniform": {
            "Uniform": {
                "__init__": [
                    "self",
                    "a",
                    "b",
                    "validate_args",
                    "allow_nan_stats",
                    "name"
                ],
                "_param_shapes": [
                    "sample_shape"
                ],
                "a": [
                    "self"
                ],
                "b": [
                    "self"
                ],
                "range": [
                    "self",
                    "name"
                ],
                "_batch_shape": [
                    "self"
                ],
                "_get_batch_shape": [
                    "self"
                ],
                "_event_shape": [
                    "self"
                ],
                "_get_event_shape": [
                    "self"
                ],
                "_sample_n": [
                    "self",
                    "n",
                    "seed"
                ],
                "_log_prob": [
                    "self",
                    "x"
                ],
                "_prob": [
                    "self",
                    "x"
                ],
                "_log_cdf": [
                    "self",
                    "x"
                ],
                "_cdf": [
                    "self",
                    "x"
                ],
                "_entropy": [
                    "self"
                ],
                "_mean": [
                    "self"
                ],
                "_variance": [
                    "self"
                ],
                "_std": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.distributions.python.ops.beta": {
            "_kl_beta_beta": [
                "d1",
                "d2",
                "name"
            ],
            "Beta": {
                "__init__": [
                    "self",
                    "a",
                    "b",
                    "validate_args",
                    "allow_nan_stats",
                    "name"
                ],
                "_param_shapes": [
                    "sample_shape"
                ],
                "a": [
                    "self"
                ],
                "b": [
                    "self"
                ],
                "a_b_sum": [
                    "self"
                ],
                "_batch_shape": [
                    "self"
                ],
                "_get_batch_shape": [
                    "self"
                ],
                "_event_shape": [
                    "self"
                ],
                "_get_event_shape": [
                    "self"
                ],
                "_sample_n": [
                    "self",
                    "n",
                    "seed"
                ],
                "_log_prob": [
                    "self",
                    "x"
                ],
                "_prob": [
                    "self",
                    "x"
                ],
                "_log_cdf": [
                    "self",
                    "x"
                ],
                "_cdf": [
                    "self",
                    "x"
                ],
                "_entropy": [
                    "self"
                ],
                "_mean": [
                    "self"
                ],
                "_variance": [
                    "self"
                ],
                "_std": [
                    "self"
                ],
                "_mode": [
                    "self"
                ],
                "_assert_valid_sample": [
                    "self",
                    "x"
                ]
            },
            "BetaWithSoftplusAB": {
                "__init__": [
                    "self",
                    "a",
                    "b",
                    "validate_args",
                    "allow_nan_stats",
                    "name"
                ]
            }
        },
        "tensorflow.contrib.distributions.python.ops.dirichlet_multinomial": {
            "DirichletMultinomial": {
                "__init__": [
                    "self",
                    "n",
                    "alpha",
                    "validate_args",
                    "allow_nan_stats",
                    "name"
                ],
                "n": [
                    "self"
                ],
                "alpha": [
                    "self"
                ],
                "alpha_sum": [
                    "self"
                ],
                "_batch_shape": [
                    "self"
                ],
                "_get_batch_shape": [
                    "self"
                ],
                "_event_shape": [
                    "self"
                ],
                "_get_event_shape": [
                    "self"
                ],
                "_log_prob": [
                    "self",
                    "counts"
                ],
                "_prob": [
                    "self",
                    "counts"
                ],
                "_mean": [
                    "self"
                ],
                "_variance": [
                    "self"
                ],
                "_assert_valid_counts": [
                    "self",
                    "counts"
                ],
                "_assert_valid_alpha": [
                    "self",
                    "alpha",
                    "validate_args"
                ],
                "_assert_valid_n": [
                    "self",
                    "n",
                    "validate_args"
                ]
            }
        },
        "tensorflow.contrib.distributions.python.ops.operator_pd_diag": {
            "OperatorPDDiagBase": {
                "__init__": [
                    "self",
                    "diag",
                    "verify_pd",
                    "name"
                ],
                "_check_diag": [
                    "self",
                    "diag"
                ],
                "name": [
                    "self"
                ],
                "verify_pd": [
                    "self"
                ],
                "dtype": [
                    "self"
                ],
                "inputs": [
                    "self"
                ],
                "get_shape": [
                    "self"
                ],
                "_shape": [
                    "self"
                ],
                "_batch_log_det": [
                    "self"
                ],
                "_inv_quadratic_form_on_vectors": [
                    "self",
                    "x"
                ],
                "_batch_matmul": [
                    "self",
                    "x",
                    "transpose_x"
                ],
                "_batch_sqrt_matmul": [
                    "self",
                    "x",
                    "transpose_x"
                ],
                "_batch_solve": [
                    "self",
                    "rhs"
                ],
                "_batch_sqrt_solve": [
                    "self",
                    "rhs"
                ],
                "_to_dense": [
                    "self"
                ],
                "_sqrt_to_dense": [
                    "self"
                ],
                "_add_to_tensor": [
                    "self",
                    "mat"
                ]
            },
            "OperatorPDDiag": {
                "__init__": [
                    "self",
                    "diag",
                    "verify_pd",
                    "name"
                ],
                "_batch_log_det": [
                    "self"
                ],
                "_inv_quadratic_form_on_vectors": [
                    "self",
                    "x"
                ],
                "_batch_matmul": [
                    "self",
                    "x",
                    "transpose_x"
                ],
                "_batch_sqrt_matmul": [
                    "self",
                    "x",
                    "transpose_x"
                ],
                "_batch_solve": [
                    "self",
                    "rhs"
                ],
                "_batch_sqrt_solve": [
                    "self",
                    "rhs"
                ],
                "_to_dense": [
                    "self"
                ],
                "_sqrt_to_dense": [
                    "self"
                ],
                "_add_to_tensor": [
                    "self",
                    "mat"
                ]
            },
            "OperatorPDSqrtDiag": {
                "__init__": [
                    "self",
                    "diag",
                    "verify_pd",
                    "name"
                ],
                "_batch_log_det": [
                    "self"
                ],
                "_inv_quadratic_form_on_vectors": [
                    "self",
                    "x"
                ],
                "_batch_matmul": [
                    "self",
                    "x",
                    "transpose_x"
                ],
                "_batch_sqrt_matmul": [
                    "self",
                    "x",
                    "transpose_x"
                ],
                "_batch_solve": [
                    "self",
                    "rhs"
                ],
                "_batch_sqrt_solve": [
                    "self",
                    "rhs"
                ],
                "_to_dense": [
                    "self"
                ],
                "_sqrt_to_dense": [
                    "self"
                ],
                "_add_to_tensor": [
                    "self",
                    "mat"
                ]
            }
        },
        "tensorflow.contrib.distributions.python.ops.wishart": {
            "_WishartOperatorPD": {
                "__init__": [
                    "self",
                    "df",
                    "scale_operator_pd",
                    "cholesky_input_output_matrices",
                    "validate_args",
                    "allow_nan_stats",
                    "name"
                ],
                "df": [
                    "self"
                ],
                "scale": [
                    "self"
                ],
                "scale_operator_pd": [
                    "self"
                ],
                "cholesky_input_output_matrices": [
                    "self"
                ],
                "dimension": [
                    "self"
                ],
                "_event_shape": [
                    "self"
                ],
                "_get_event_shape": [
                    "self"
                ],
                "_batch_shape": [
                    "self"
                ],
                "_get_batch_shape": [
                    "self"
                ],
                "_sample_n": [
                    "self",
                    "n",
                    "seed"
                ],
                "_log_prob": [
                    "self",
                    "x"
                ],
                "_prob": [
                    "self",
                    "x"
                ],
                "_entropy": [
                    "self"
                ],
                "_mean": [
                    "self"
                ],
                "_variance": [
                    "self"
                ],
                "_std": [
                    "self"
                ],
                "_mode": [
                    "self"
                ],
                "mean_log_det": [
                    "self",
                    "name"
                ],
                "log_normalizing_constant": [
                    "self",
                    "name"
                ],
                "_multi_gamma_sequence": [
                    "self",
                    "a",
                    "p",
                    "name"
                ],
                "_multi_lgamma": [
                    "self",
                    "a",
                    "p",
                    "name"
                ],
                "_multi_digamma": [
                    "self",
                    "a",
                    "p",
                    "name"
                ]
            },
            "WishartCholesky": {
                "__init__": [
                    "self",
                    "df",
                    "scale",
                    "cholesky_input_output_matrices",
                    "validate_args",
                    "allow_nan_stats",
                    "name"
                ]
            },
            "WishartFull": {
                "__init__": [
                    "self",
                    "df",
                    "scale",
                    "cholesky_input_output_matrices",
                    "validate_args",
                    "allow_nan_stats",
                    "name"
                ]
            }
        },
        "tensorflow.contrib.distributions.python.ops.categorical": {
            "_kl_categorical_categorical": [
                "a",
                "b",
                "name"
            ],
            "Categorical": {
                "__init__": [
                    "self",
                    "logits",
                    "p",
                    "dtype",
                    "validate_args",
                    "allow_nan_stats",
                    "name"
                ],
                "num_classes": [
                    "self"
                ],
                "logits": [
                    "self"
                ],
                "p": [
                    "self"
                ],
                "_batch_shape": [
                    "self"
                ],
                "_get_batch_shape": [
                    "self"
                ],
                "_event_shape": [
                    "self"
                ],
                "_get_event_shape": [
                    "self"
                ],
                "_sample_n": [
                    "self",
                    "n",
                    "seed"
                ],
                "_log_prob": [
                    "self",
                    "k"
                ],
                "_prob": [
                    "self",
                    "k"
                ],
                "_entropy": [
                    "self"
                ],
                "_mode": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.distributions.python.ops.dirichlet": {
            "Dirichlet": {
                "__init__": [
                    "self",
                    "alpha",
                    "validate_args",
                    "allow_nan_stats",
                    "name"
                ],
                "alpha": [
                    "self"
                ],
                "alpha_sum": [
                    "self"
                ],
                "_batch_shape": [
                    "self"
                ],
                "_get_batch_shape": [
                    "self"
                ],
                "_event_shape": [
                    "self"
                ],
                "_get_event_shape": [
                    "self"
                ],
                "_sample_n": [
                    "self",
                    "n",
                    "seed"
                ],
                "_log_prob": [
                    "self",
                    "x"
                ],
                "_prob": [
                    "self",
                    "x"
                ],
                "_entropy": [
                    "self"
                ],
                "_mean": [
                    "self"
                ],
                "_variance": [
                    "self"
                ],
                "_std": [
                    "self"
                ],
                "_mode": [
                    "self"
                ],
                "_assert_valid_sample": [
                    "self",
                    "x"
                ]
            }
        },
        "tensorflow.contrib.distributions.python.ops.operator_pd_identity": {
            "OperatorPDIdentity": {
                "__init__": [
                    "self",
                    "shape",
                    "dtype",
                    "verify_pd",
                    "name"
                ],
                "_check_shape": [
                    "self",
                    "shape"
                ],
                "_check_x": [
                    "self",
                    "x"
                ],
                "name": [
                    "self"
                ],
                "verify_pd": [
                    "self"
                ],
                "dtype": [
                    "self"
                ],
                "_add_to_tensor": [
                    "self",
                    "mat"
                ],
                "_inv_quadratic_form_on_vectors": [
                    "self",
                    "x"
                ],
                "inputs": [
                    "self"
                ],
                "get_shape": [
                    "self"
                ],
                "_shape": [
                    "self"
                ],
                "_det": [
                    "self"
                ],
                "_batch_log_det": [
                    "self"
                ],
                "_batch_sqrt_log_det": [
                    "self"
                ],
                "_batch_matmul": [
                    "self",
                    "x",
                    "transpose_x"
                ],
                "_batch_sqrt_matmul": [
                    "self",
                    "x",
                    "transpose_x"
                ],
                "_batch_solve": [
                    "self",
                    "rhs"
                ],
                "_batch_sqrt_solve": [
                    "self",
                    "rhs"
                ],
                "_to_dense": [
                    "self"
                ],
                "_sqrt_to_dense": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.distributions.python.ops.bernoulli": {
            "_kl_bernoulli_bernoulli": [
                "a",
                "b",
                "name"
            ],
            "Bernoulli": {
                "__init__": [
                    "self",
                    "logits",
                    "p",
                    "dtype",
                    "validate_args",
                    "allow_nan_stats",
                    "name"
                ],
                "_param_shapes": [
                    "sample_shape"
                ],
                "logits": [
                    "self"
                ],
                "p": [
                    "self"
                ],
                "q": [
                    "self"
                ],
                "_batch_shape": [
                    "self"
                ],
                "_get_batch_shape": [
                    "self"
                ],
                "_event_shape": [
                    "self"
                ],
                "_get_event_shape": [
                    "self"
                ],
                "_sample_n": [
                    "self",
                    "n",
                    "seed"
                ],
                "_log_prob": [
                    "self",
                    "event"
                ],
                "_prob": [
                    "self",
                    "event"
                ],
                "_entropy": [
                    "self"
                ],
                "_mean": [
                    "self"
                ],
                "_variance": [
                    "self"
                ],
                "_std": [
                    "self"
                ],
                "_mode": [
                    "self"
                ]
            },
            "BernoulliWithSigmoidP": {
                "__init__": [
                    "self",
                    "p",
                    "dtype",
                    "validate_args",
                    "allow_nan_stats",
                    "name"
                ]
            }
        },
        "tensorflow.contrib.distributions.python.ops.exponential": {
            "Exponential": {
                "__init__": [
                    "self",
                    "lam",
                    "validate_args",
                    "allow_nan_stats",
                    "name"
                ],
                "_param_shapes": [
                    "sample_shape"
                ],
                "lam": [
                    "self"
                ],
                "_sample_n": [
                    "self",
                    "n",
                    "seed"
                ]
            },
            "ExponentialWithSoftplusLam": {
                "__init__": [
                    "self",
                    "lam",
                    "validate_args",
                    "allow_nan_stats",
                    "name"
                ]
            }
        },
        "tensorflow.contrib.distributions.python.ops.mvn": {
            "_kl_mvn_mvn_brute_force": [
                "mvn_a",
                "mvn_b",
                "name"
            ],
            "_MultivariateNormalOperatorPD": {
                "__init__": [
                    "self",
                    "mu",
                    "cov",
                    "validate_args",
                    "allow_nan_stats",
                    "name"
                ],
                "_assert_valid_mu": [
                    "self",
                    "mu"
                ],
                "mu": [
                    "self"
                ],
                "sigma": [
                    "self"
                ],
                "log_sigma_det": [
                    "self",
                    "name"
                ],
                "sigma_det": [
                    "self",
                    "name"
                ],
                "_batch_shape": [
                    "self"
                ],
                "_get_batch_shape": [
                    "self"
                ],
                "_event_shape": [
                    "self"
                ],
                "_get_event_shape": [
                    "self"
                ],
                "_sample_n": [
                    "self",
                    "n",
                    "seed"
                ],
                "_log_prob": [
                    "self",
                    "x"
                ],
                "_prob": [
                    "self",
                    "x"
                ],
                "_entropy": [
                    "self"
                ],
                "_mean": [
                    "self"
                ],
                "_variance": [
                    "self"
                ],
                "_mode": [
                    "self"
                ]
            },
            "MultivariateNormalDiag": {
                "__init__": [
                    "self",
                    "mu",
                    "diag_stdev",
                    "validate_args",
                    "allow_nan_stats",
                    "name"
                ]
            },
            "MultivariateNormalDiagWithSoftplusStDev": {
                "__init__": [
                    "self",
                    "mu",
                    "diag_stdev",
                    "validate_args",
                    "allow_nan_stats",
                    "name"
                ]
            },
            "MultivariateNormalDiagPlusVDVT": {
                "__init__": [
                    "self",
                    "mu",
                    "diag_large",
                    "v",
                    "diag_small",
                    "validate_args",
                    "allow_nan_stats",
                    "name"
                ]
            },
            "MultivariateNormalCholesky": {
                "__init__": [
                    "self",
                    "mu",
                    "chol",
                    "validate_args",
                    "allow_nan_stats",
                    "name"
                ]
            },
            "MultivariateNormalFull": {
                "__init__": [
                    "self",
                    "mu",
                    "sigma",
                    "validate_args",
                    "allow_nan_stats",
                    "name"
                ]
            }
        },
        "tensorflow.contrib.distributions.python.ops.normal": {
            "_kl_normal_normal": [
                "n_a",
                "n_b",
                "name"
            ],
            "Normal": {
                "__init__": [
                    "self",
                    "mu",
                    "sigma",
                    "validate_args",
                    "allow_nan_stats",
                    "name"
                ],
                "_param_shapes": [
                    "sample_shape"
                ],
                "mu": [
                    "self"
                ],
                "sigma": [
                    "self"
                ],
                "_batch_shape": [
                    "self"
                ],
                "_get_batch_shape": [
                    "self"
                ],
                "_event_shape": [
                    "self"
                ],
                "_get_event_shape": [
                    "self"
                ],
                "_sample_n": [
                    "self",
                    "n",
                    "seed"
                ],
                "_log_prob": [
                    "self",
                    "x"
                ],
                "_prob": [
                    "self",
                    "x"
                ],
                "_log_cdf": [
                    "self",
                    "x"
                ],
                "_cdf": [
                    "self",
                    "x"
                ],
                "_log_survival_function": [
                    "self",
                    "x"
                ],
                "_survival_function": [
                    "self",
                    "x"
                ],
                "_entropy": [
                    "self"
                ],
                "_mean": [
                    "self"
                ],
                "_variance": [
                    "self"
                ],
                "_std": [
                    "self"
                ],
                "_mode": [
                    "self"
                ],
                "_z": [
                    "self",
                    "x"
                ]
            },
            "NormalWithSoftplusSigma": {
                "__init__": [
                    "self",
                    "mu",
                    "sigma",
                    "validate_args",
                    "allow_nan_stats",
                    "name"
                ]
            }
        },
        "tensorflow.contrib.distributions.python.ops": {},
        "tensorflow.contrib.distributions.python.ops.operator_test_util": {
            "OperatorPDDerivedClassTest": {
                "setUp": [
                    "self"
                ],
                "_compare_results": [
                    "self",
                    "expected",
                    "actual",
                    "static_shapes",
                    "atol"
                ],
                "_build_operator_and_mat": [
                    "self",
                    "batch_shape",
                    "k",
                    "dtype"
                ],
                "testToDense": [
                    "self"
                ],
                "testSqrtToDense": [
                    "self"
                ],
                "testDeterminants": [
                    "self"
                ],
                "testMatmul": [
                    "self"
                ],
                "testSqrtMatmul": [
                    "self"
                ],
                "testSolve": [
                    "self"
                ],
                "testSqrtSolve": [
                    "self"
                ],
                "testAddToTensor": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.distributions.python.ops.binomial": {
            "Binomial": {
                "__init__": [
                    "self",
                    "n",
                    "logits",
                    "p",
                    "validate_args",
                    "allow_nan_stats",
                    "name"
                ],
                "n": [
                    "self"
                ],
                "logits": [
                    "self"
                ],
                "p": [
                    "self"
                ],
                "_batch_shape": [
                    "self"
                ],
                "_get_batch_shape": [
                    "self"
                ],
                "_event_shape": [
                    "self"
                ],
                "_get_event_shape": [
                    "self"
                ],
                "_log_prob": [
                    "self",
                    "counts"
                ],
                "_prob": [
                    "self",
                    "counts"
                ],
                "_mean": [
                    "self"
                ],
                "_variance": [
                    "self"
                ],
                "_std": [
                    "self"
                ],
                "_mode": [
                    "self"
                ],
                "_check_counts": [
                    "self",
                    "counts"
                ]
            }
        },
        "tensorflow.contrib.distributions.python.ops.chi2": {
            "Chi2": {
                "__init__": [
                    "self",
                    "df",
                    "validate_args",
                    "allow_nan_stats",
                    "name"
                ],
                "_param_shapes": [
                    "sample_shape"
                ],
                "df": [
                    "self"
                ]
            },
            "Chi2WithAbsDf": {
                "__init__": [
                    "self",
                    "df",
                    "validate_args",
                    "allow_nan_stats",
                    "name"
                ]
            }
        },
        "tensorflow.contrib.distributions.python.ops.bijector": {
            "_Mapping": {
                "__new__": [
                    "cls",
                    "x",
                    "y",
                    "ildj",
                    "condition_kwargs"
                ],
                "x_key": [
                    "self"
                ],
                "y_key": [
                    "self"
                ],
                "merge": [
                    "self",
                    "x",
                    "y",
                    "ildj",
                    "condition_kwargs",
                    "mapping"
                ],
                "_merge": [
                    "self",
                    "old",
                    "new"
                ],
                "_deep_tuple": [
                    "self",
                    "x"
                ]
            },
            "Bijector": {
                "__init__": [
                    "self",
                    "batch_ndims",
                    "event_ndims",
                    "parameters",
                    "is_constant_jacobian",
                    "validate_args",
                    "dtype",
                    "name"
                ],
                "shaper": [
                    "self"
                ],
                "parameters": [
                    "self"
                ],
                "is_constant_jacobian": [
                    "self"
                ],
                "validate_args": [
                    "self"
                ],
                "dtype": [
                    "self"
                ],
                "name": [
                    "self"
                ],
                "_forward_event_shape": [
                    "self",
                    "input_shape"
                ],
                "forward_event_shape": [
                    "self",
                    "input_shape",
                    "name"
                ],
                "_get_forward_event_shape": [
                    "self",
                    "input_shape"
                ],
                "get_forward_event_shape": [
                    "self",
                    "input_shape"
                ],
                "_inverse_event_shape": [
                    "self",
                    "output_shape"
                ],
                "inverse_event_shape": [
                    "self",
                    "output_shape",
                    "name"
                ],
                "_get_inverse_event_shape": [
                    "self",
                    "output_shape"
                ],
                "get_inverse_event_shape": [
                    "self",
                    "output_shape"
                ],
                "_forward": [
                    "self",
                    "x"
                ],
                "forward": [
                    "self",
                    "x",
                    "name"
                ],
                "_inverse": [
                    "self",
                    "y"
                ],
                "inverse": [
                    "self",
                    "y",
                    "name"
                ],
                "_inverse_log_det_jacobian": [
                    "self",
                    "y"
                ],
                "inverse_log_det_jacobian": [
                    "self",
                    "y",
                    "name"
                ],
                "_inverse_and_inverse_log_det_jacobian": [
                    "self",
                    "y"
                ],
                "inverse_and_inverse_log_det_jacobian": [
                    "self",
                    "y",
                    "name"
                ],
                "_forward_log_det_jacobian": [
                    "self",
                    "x"
                ],
                "forward_log_det_jacobian": [
                    "self",
                    "x",
                    "name"
                ],
                "_name_scope": [
                    "self",
                    "name",
                    "values"
                ],
                "_maybe_assert_dtype": [
                    "self",
                    "x"
                ],
                "_cache": [
                    "self",
                    "mapping"
                ],
                "_lookup": [
                    "self",
                    "x",
                    "y",
                    "condition_kwargs"
                ]
            },
            "Inline": {
                "__init__": [
                    "self",
                    "forward_fn",
                    "inverse_fn",
                    "inverse_log_det_jacobian_fn",
                    "forward_log_det_jacobian_fn",
                    "get_forward_event_shape_fn",
                    "forward_event_shape_fn",
                    "get_inverse_event_shape_fn",
                    "inverse_event_shape_fn",
                    "is_constant_jacobian",
                    "validate_args",
                    "name"
                ],
                "_get_forward_event_shape": [
                    "self",
                    "input_shape"
                ],
                "_forward_event_shape": [
                    "self",
                    "input_shape"
                ],
                "_get_inverse_event_shape": [
                    "self",
                    "output_shape"
                ],
                "_inverse_event_shape": [
                    "self",
                    "output_shape"
                ],
                "_forward": [
                    "self",
                    "x"
                ],
                "_inverse": [
                    "self",
                    "y"
                ],
                "_inverse_log_det_jacobian": [
                    "self",
                    "y"
                ],
                "_forward_log_det_jacobian": [
                    "self",
                    "y"
                ]
            },
            "Invert": {
                "__init__": [
                    "self",
                    "bijector",
                    "validate_args",
                    "name"
                ],
                "_get_forward_event_shape": [
                    "self",
                    "input_shape"
                ],
                "_forward_event_shape": [
                    "self",
                    "input_shape"
                ],
                "_get_inverse_event_shape": [
                    "self",
                    "output_shape"
                ],
                "_inverse_event_shape": [
                    "self",
                    "output_shape"
                ],
                "bijector": [
                    "self"
                ],
                "_forward": [
                    "self",
                    "x"
                ],
                "_inverse_and_inverse_log_det_jacobian": [
                    "self",
                    "y"
                ],
                "_forward_log_det_jacobian": [
                    "self",
                    "x"
                ]
            },
            "Chain": {
                "__init__": [
                    "self",
                    "bijectors",
                    "validate_args",
                    "name"
                ],
                "bijectors": [
                    "self"
                ],
                "_shape_helper": [
                    "self",
                    "func_name",
                    "input_shape",
                    "reverse"
                ],
                "_get_forward_event_shape": [
                    "self",
                    "input_shape"
                ],
                "_forward_event_shape": [
                    "self",
                    "input_shape"
                ],
                "_get_inverse_event_shape": [
                    "self",
                    "output_shape"
                ],
                "_inverse_event_shape": [
                    "self",
                    "output_shape"
                ],
                "_forward": [
                    "self",
                    "x"
                ],
                "_inverse_and_inverse_log_det_jacobian": [
                    "self",
                    "y"
                ],
                "_forward_log_det_jacobian": [
                    "self",
                    "x"
                ]
            },
            "Identity": {
                "__init__": [
                    "self",
                    "validate_args",
                    "name"
                ],
                "_forward": [
                    "self",
                    "x"
                ],
                "_inverse_and_inverse_log_det_jacobian": [
                    "self",
                    "y"
                ],
                "_forward_log_det_jacobian": [
                    "self",
                    "x"
                ]
            },
            "Exp": {
                "__init__": [
                    "self",
                    "event_ndims",
                    "validate_args",
                    "name"
                ],
                "_forward": [
                    "self",
                    "x"
                ],
                "_inverse_and_inverse_log_det_jacobian": [
                    "self",
                    "y"
                ],
                "_forward_log_det_jacobian": [
                    "self",
                    "x"
                ]
            },
            "ScaleAndShift": {
                "__init__": [
                    "self",
                    "shift",
                    "scale",
                    "event_ndims",
                    "validate_args",
                    "name"
                ],
                "_process_scale": [
                    "self",
                    "scale",
                    "event_ndims"
                ],
                "shift": [
                    "self"
                ],
                "scale": [
                    "self"
                ],
                "_forward": [
                    "self",
                    "x"
                ],
                "_inverse": [
                    "self",
                    "y"
                ],
                "_inverse_log_det_jacobian": [
                    "self",
                    "y"
                ],
                "_forward_log_det_jacobian": [
                    "self",
                    "x"
                ]
            },
            "Softplus": {
                "__init__": [
                    "self",
                    "event_ndims",
                    "validate_args",
                    "name"
                ],
                "_forward": [
                    "self",
                    "x"
                ],
                "_inverse_and_inverse_log_det_jacobian": [
                    "self",
                    "y"
                ],
                "_forward_log_det_jacobian": [
                    "self",
                    "x"
                ]
            },
            "SoftmaxCentered": {
                "__init__": [
                    "self",
                    "event_ndims",
                    "validate_args",
                    "name"
                ],
                "_get_forward_event_shape": [
                    "self",
                    "input_shape"
                ],
                "_forward_event_shape": [
                    "self",
                    "input_shape"
                ],
                "_get_inverse_event_shape": [
                    "self",
                    "output_shape"
                ],
                "_inverse_event_shape": [
                    "self",
                    "output_shape"
                ],
                "_forward": [
                    "self",
                    "x"
                ],
                "_inverse": [
                    "self",
                    "y"
                ],
                "_inverse_log_det_jacobian": [
                    "self",
                    "y"
                ],
                "_forward_log_det_jacobian": [
                    "self",
                    "x"
                ]
            },
            "SigmoidCentered": {
                "__init__": [
                    "self",
                    "validate_args",
                    "name"
                ]
            },
            "CholeskyOuterProduct": {
                "__init__": [
                    "self",
                    "event_ndims",
                    "validate_args",
                    "name"
                ],
                "_forward": [
                    "self",
                    "x"
                ],
                "_inverse_and_inverse_log_det_jacobian": [
                    "self",
                    "y"
                ],
                "_forward_log_det_jacobian": [
                    "self",
                    "x"
                ]
            }
        },
        "tensorflow.contrib.distributions.python.ops.operator_pd_full": {
            "OperatorPDFull": {
                "__init__": [
                    "self",
                    "matrix",
                    "verify_pd",
                    "name"
                ]
            }
        },
        "tensorflow.contrib.distributions.python.ops.operator_pd": {
            "flip_matrix_to_vector": [
                "mat",
                "batch_shape",
                "static_batch_shape"
            ],
            "_flip_matrix_to_vector_static": [
                "mat",
                "static_batch_shape"
            ],
            "_flip_matrix_to_vector_dynamic": [
                "mat",
                "batch_shape"
            ],
            "flip_vector_to_matrix": [
                "vec",
                "batch_shape",
                "static_batch_shape"
            ],
            "_flip_vector_to_matrix_dynamic": [
                "vec",
                "batch_shape"
            ],
            "_flip_vector_to_matrix_static": [
                "vec",
                "batch_shape"
            ],
            "extract_batch_shape": [
                "x",
                "num_event_dims",
                "name"
            ],
            "OperatorPDBase": {
                "name": [
                    "self"
                ],
                "verify_pd": [
                    "self"
                ],
                "dtype": [
                    "self"
                ],
                "add_to_tensor": [
                    "self",
                    "mat",
                    "name"
                ],
                "_add_to_tensor": [
                    "self",
                    "mat"
                ],
                "_dispatch_based_on_batch": [
                    "self",
                    "batch_method",
                    "singleton_method"
                ],
                "inv_quadratic_form_on_vectors": [
                    "self",
                    "x",
                    "name"
                ],
                "_inv_quadratic_form_on_vectors": [
                    "self",
                    "x"
                ],
                "_iqfov_via_sqrt_solve": [
                    "self",
                    "x"
                ],
                "_iqfov_via_solve": [
                    "self",
                    "x"
                ],
                "det": [
                    "self",
                    "name"
                ],
                "_det": [
                    "self"
                ],
                "log_det": [
                    "self",
                    "name"
                ],
                "_batch_log_det": [
                    "self"
                ],
                "_log_det": [
                    "self"
                ],
                "sqrt_log_det": [
                    "self",
                    "name"
                ],
                "_batch_sqrt_log_det": [
                    "self"
                ],
                "_sqrt_log_det": [
                    "self"
                ],
                "inputs": [
                    "self"
                ],
                "get_shape": [
                    "self"
                ],
                "get_batch_shape": [
                    "self"
                ],
                "get_vector_shape": [
                    "self"
                ],
                "shape": [
                    "self",
                    "name"
                ],
                "_shape": [
                    "self"
                ],
                "rank": [
                    "self",
                    "name"
                ],
                "batch_shape": [
                    "self",
                    "name"
                ],
                "vector_shape": [
                    "self",
                    "name"
                ],
                "vector_space_dimension": [
                    "self",
                    "name"
                ],
                "matmul": [
                    "self",
                    "x",
                    "transpose_x",
                    "name"
                ],
                "_batch_matmul": [
                    "self",
                    "x",
                    "transpose_x"
                ],
                "_matmul": [
                    "self",
                    "x",
                    "transpose_x"
                ],
                "sqrt_matmul": [
                    "self",
                    "x",
                    "transpose_x",
                    "name"
                ],
                "_batch_sqrt_matmul": [
                    "self",
                    "x",
                    "transpose_x"
                ],
                "_sqrt_matmul": [
                    "self",
                    "x",
                    "transpose_x"
                ],
                "solve": [
                    "self",
                    "rhs",
                    "name"
                ],
                "_solve": [
                    "self",
                    "rhs"
                ],
                "_batch_solve": [
                    "self",
                    "rhs"
                ],
                "sqrt_solve": [
                    "self",
                    "rhs",
                    "name"
                ],
                "_sqrt_solve": [
                    "self",
                    "rhs"
                ],
                "_batch_sqrt_solve": [
                    "self",
                    "rhs"
                ],
                "to_dense": [
                    "self",
                    "name"
                ],
                "_to_dense": [
                    "self"
                ],
                "sqrt_to_dense": [
                    "self",
                    "name"
                ],
                "_sqrt_to_dense": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.distributions.python.ops.distribution_util": {
            "assert_close": [
                "x",
                "y",
                "data",
                "summarize",
                "message",
                "name"
            ],
            "assert_integer_form": [
                "x",
                "data",
                "summarize",
                "message",
                "name"
            ],
            "assert_symmetric": [
                "matrix"
            ],
            "get_logits_and_prob": [
                "logits",
                "p",
                "multidimensional",
                "validate_args",
                "name"
            ],
            "log_combinations": [
                "n",
                "counts",
                "name"
            ],
            "matrix_diag_transform": [
                "matrix",
                "transform",
                "name"
            ],
            "rotate_transpose": [
                "x",
                "shift",
                "name"
            ],
            "pick_vector": [
                "cond",
                "true_vector",
                "false_vector",
                "name"
            ],
            "gen_new_seed": [
                "seed",
                "salt"
            ],
            "fill_lower_triangular": [
                "x",
                "validate_args",
                "name"
            ],
            "AppendDocstring": {
                "__init__": [
                    "self",
                    "additional_note",
                    "condition_kwargs_dict"
                ],
                "__call__": [
                    "self",
                    "fn"
                ]
            }
        },
        "tensorflow.contrib.distributions.python.ops.gamma": {
            "Gamma": {
                "__init__": [
                    "self",
                    "alpha",
                    "beta",
                    "validate_args",
                    "allow_nan_stats",
                    "name"
                ],
                "_param_shapes": [
                    "sample_shape"
                ],
                "alpha": [
                    "self"
                ],
                "beta": [
                    "self"
                ],
                "_batch_shape": [
                    "self"
                ],
                "_get_batch_shape": [
                    "self"
                ],
                "_event_shape": [
                    "self"
                ],
                "_get_event_shape": [
                    "self"
                ],
                "_sample_n": [
                    "self",
                    "n",
                    "seed"
                ],
                "_log_prob": [
                    "self",
                    "x"
                ],
                "_prob": [
                    "self",
                    "x"
                ],
                "_log_cdf": [
                    "self",
                    "x"
                ],
                "_cdf": [
                    "self",
                    "x"
                ],
                "_entropy": [
                    "self"
                ],
                "_mean": [
                    "self"
                ],
                "_variance": [
                    "self"
                ],
                "_std": [
                    "self"
                ],
                "_mode": [
                    "self"
                ]
            },
            "GammaWithSoftplusAlphaBeta": {
                "__init__": [
                    "self",
                    "alpha",
                    "beta",
                    "validate_args",
                    "allow_nan_stats",
                    "name"
                ]
            }
        },
        "tensorflow.contrib.distributions.python.kernel_tests.bijector_test": {
            "assert_finite": [
                "array"
            ],
            "assert_strictly_increasing": [
                "array"
            ],
            "assert_strictly_decreasing": [
                "array"
            ],
            "assert_strictly_monotonic": [
                "array"
            ],
            "assert_scalar_congruency": [
                "bijector",
                "lower_x",
                "upper_x",
                "n",
                "rtol",
                "sess"
            ],
            "assert_bijective_and_finite": [
                "bijector",
                "x",
                "y",
                "atol",
                "rtol",
                "sess"
            ],
            "BaseBijectorTest": {
                "testBijector": [
                    "self"
                ]
            },
            "IntentionallyMissingError": {},
            "BrokenBijectorWithInverseAndInverseLogDetJacobian": {
                "__init__": [
                    "self",
                    "forward_missing",
                    "inverse_missing"
                ],
                "_forward": [
                    "self",
                    "x"
                ],
                "_inverse_and_inverse_log_det_jacobian": [
                    "self",
                    "y"
                ],
                "_forward_log_det_jacobian": [
                    "self",
                    "x"
                ]
            },
            "BrokenBijectorSeparateInverseAndInverseLogDetJacobian": {
                "__init__": [
                    "self",
                    "forward_missing",
                    "inverse_missing"
                ],
                "_forward": [
                    "self",
                    "x"
                ],
                "_inverse": [
                    "self",
                    "y"
                ],
                "_inverse_log_det_jacobian": [
                    "self",
                    "y"
                ],
                "_forward_log_det_jacobian": [
                    "self",
                    "x"
                ]
            },
            "BijectorCachingTest": {
                "broken_bijector_cls": [
                    "self"
                ],
                "testCachingOfForwardResultsWhenCalledOneByOne": [
                    "self"
                ],
                "testCachingOfInverseResultsWhenCalledOneByOne": [
                    "self"
                ],
                "testCachingOfInverseResultsWhenCalledTogether": [
                    "self"
                ]
            },
            "SeparateCallsBijectorCachingTest": {
                "broken_bijector_cls": [
                    "self"
                ]
            },
            "JointCallsBijectorCachingTest": {
                "broken_bijector_cls": [
                    "self"
                ]
            },
            "IdentityBijectorTest": {
                "testBijector": [
                    "self"
                ],
                "testScalarCongruency": [
                    "self"
                ]
            },
            "ExpBijectorTest": {
                "testBijector": [
                    "self"
                ],
                "testScalarCongruency": [
                    "self"
                ],
                "testBijectiveAndFinite": [
                    "self"
                ]
            },
            "InlineBijectorTest": {
                "testBijector": [
                    "self"
                ],
                "testShapeGetters": [
                    "self"
                ]
            },
            "ScaleAndShiftBijectorTest": {
                "testProperties": [
                    "self"
                ],
                "testNoBatchScalar": [
                    "self"
                ],
                "testWeirdSampleNoBatchScalar": [
                    "self"
                ],
                "testOneBatchScalar": [
                    "self"
                ],
                "testTwoBatchScalar": [
                    "self"
                ],
                "testNoBatchMultivariate": [
                    "self"
                ],
                "testNoBatchMultivariateFullDynamic": [
                    "self"
                ],
                "testBatchMultivariate": [
                    "self"
                ],
                "testBatchMultivariateFullDynamic": [
                    "self"
                ],
                "testNoBatchMultivariateRaisesWhenSingular": [
                    "self"
                ],
                "testEventNdimsLargerThanOneRaises": [
                    "self"
                ],
                "testNonSquareMatrixScaleRaises": [
                    "self"
                ],
                "testScaleZeroScalarRaises": [
                    "self"
                ],
                "testScalarCongruency": [
                    "self"
                ],
                "testScalarCongruencyWithNegativeScale": [
                    "self"
                ]
            },
            "SoftplusBijectorTest": {
                "_softplus": [
                    "self",
                    "x"
                ],
                "_softplus_inverse": [
                    "self",
                    "y"
                ],
                "_softplus_ildj_before_reduction": [
                    "self",
                    "y"
                ],
                "testBijectorForwardInverseEventDimsZero": [
                    "self"
                ],
                "testBijectorLogDetJacobianEventDimsZero": [
                    "self"
                ],
                "testBijectorForwardInverseEventDimsOne": [
                    "self"
                ],
                "testBijectorLogDetJacobianEventDimsOne": [
                    "self"
                ],
                "testScalarCongruency": [
                    "self"
                ],
                "testBijectiveAndFinite32bit": [
                    "self"
                ],
                "testBijectiveAndFinite16bit": [
                    "self"
                ]
            },
            "SoftmaxCenteredBijectorTest": {
                "testBijectorScalar": [
                    "self"
                ],
                "testBijectorVector": [
                    "self"
                ],
                "testShapeGetters": [
                    "self"
                ],
                "testBijectiveAndFinite": [
                    "self"
                ]
            },
            "SigmoidCenteredBijectorTest": {
                "testBijector": [
                    "self"
                ]
            },
            "CholeskyOuterProductBijectorTest": {
                "testBijectorMatrix": [
                    "self"
                ],
                "testBijectorScalar": [
                    "self"
                ],
                "testScalarCongruency": [
                    "self"
                ]
            },
            "ChainBijectorTest": {
                "testBijector": [
                    "self"
                ],
                "testBijectorIdentity": [
                    "self"
                ],
                "testScalarCongruency": [
                    "self"
                ],
                "testShapeGetters": [
                    "self"
                ]
            },
            "InvertBijectorTest": {
                "testBijector": [
                    "self"
                ],
                "testScalarCongruency": [
                    "self"
                ],
                "testShapeGetters": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.distributions.python.kernel_tests.operator_pd_test": {
            "OperatorShape": {
                "__init__": [
                    "self",
                    "shape"
                ],
                "verify_pd": [
                    "self"
                ],
                "get_shape": [
                    "self"
                ],
                "_shape": [
                    "self"
                ],
                "name": [
                    "self"
                ],
                "dtype": [
                    "self"
                ],
                "inputs": [
                    "self"
                ]
            },
            "OperatorSqrtSolve": {
                "__init__": [
                    "self",
                    "chol_array"
                ],
                "_sqrt_solve": [
                    "self",
                    "rhs"
                ],
                "_batch_sqrt_solve": [
                    "self",
                    "rhs"
                ],
                "_inv_quadratic_form_on_vectors": [
                    "self",
                    "x"
                ]
            },
            "OperatorSolve": {
                "__init__": [
                    "self",
                    "chol"
                ],
                "_solve": [
                    "self",
                    "rhs"
                ],
                "_batch_solve": [
                    "self",
                    "rhs"
                ],
                "_inv_quadratic_form_on_vectors": [
                    "self",
                    "x"
                ]
            },
            "OperatorPDBaseTest": {
                "setUp": [
                    "self"
                ],
                "_random_cholesky_array": [
                    "self",
                    "shape"
                ],
                "_numpy_inv_quadratic_form_on_vectors": [
                    "self",
                    "chol",
                    "x"
                ],
                "testAllShapesMethodsDefinedByTheOneAbstractpropertyShape": [
                    "self"
                ],
                "testIqfovXRankSameAsBroadcastRankUsingSqrtSolve": [
                    "self"
                ],
                "testIqfovXRankGreaterThanBroadcastRankUsingSqrtSolve": [
                    "self"
                ],
                "testIqfovXRankTwoGreaterThanBroadcastRankUsingSqrtSolve": [
                    "self"
                ],
                "testIqfovXRankSameAsBroadcastRankUsingSolve": [
                    "self"
                ],
                "testIqfovXRankGreaterThanBroadcastRankUsingSolve": [
                    "self"
                ],
                "testIqfovXRankTwoGreaterThanBroadcastRankUsingSolve": [
                    "self"
                ]
            },
            "FlipMatrixToVectorTest": {
                "setUp": [
                    "self"
                ],
                "testMatrixAndVectorBatchShapesTheSame": [
                    "self"
                ],
                "testMatrixAndVectorBatchShapesSameRankButPermuted": [
                    "self"
                ],
                "testVectorBatchShapeLongerThanMatrixBatchShape": [
                    "self"
                ],
                "testMatrixBatchShapeHasASingletonThatVecBatchShapeDoesnt": [
                    "self"
                ]
            },
            "FlipVectorToMatrixTest": {
                "setUp": [
                    "self"
                ],
                "testWhenXBatchRankIsSameAsBatchRankArg": [
                    "self"
                ],
                "testWhenXHasOneLargerLargerBatchRankThanBatchRankArg": [
                    "self"
                ],
                "testWhenBatchShapeRequiresReshapeOfVectorBatchShape": [
                    "self"
                ],
                "testWhenXHasTwoLargerLargerBatchRankThanBatchRankArg": [
                    "self"
                ]
            },
            "ExtractBatchShapeTest": {
                "setUp": [
                    "self"
                ],
                "testXHasEmptyBatchShape": [
                    "self"
                ],
                "testXHasNonEmptyBatchShape": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.distributions.python.kernel_tests.categorical_test": {
            "make_categorical": [
                "batch_shape",
                "num_classes",
                "dtype"
            ],
            "CategoricalTest": {
                "testP": [
                    "self"
                ],
                "testLogits": [
                    "self"
                ],
                "testShapes": [
                    "self"
                ],
                "testDtype": [
                    "self"
                ],
                "testUnknownShape": [
                    "self"
                ],
                "testPMFWithBatch": [
                    "self"
                ],
                "testPMFNoBatch": [
                    "self"
                ],
                "testLogPMF": [
                    "self"
                ],
                "testEntropyNoBatch": [
                    "self"
                ],
                "testEntropyWithBatch": [
                    "self"
                ],
                "testSample": [
                    "self"
                ],
                "testSampleWithSampleShape": [
                    "self"
                ],
                "testLogPMFBroadcasting": [
                    "self"
                ],
                "testLogPMFShape": [
                    "self"
                ],
                "testLogPMFShapeNoBatch": [
                    "self"
                ],
                "testMode": [
                    "self"
                ],
                "testCategoricalCategoricalKL": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.distributions.python.kernel_tests.beta_test": {
            "BetaTest": {
                "testSimpleShapes": [
                    "self"
                ],
                "testComplexShapes": [
                    "self"
                ],
                "testComplexShapesBroadcast": [
                    "self"
                ],
                "testAlphaProperty": [
                    "self"
                ],
                "testBetaProperty": [
                    "self"
                ],
                "testPdfXProper": [
                    "self"
                ],
                "testPdfTwoBatches": [
                    "self"
                ],
                "testPdfTwoBatchesNontrivialX": [
                    "self"
                ],
                "testPdfUniformZeroBatch": [
                    "self"
                ],
                "testPdfAlphaStretchedInBroadcastWhenSameRank": [
                    "self"
                ],
                "testPdfAlphaStretchedInBroadcastWhenLowerRank": [
                    "self"
                ],
                "testPdfXStretchedInBroadcastWhenSameRank": [
                    "self"
                ],
                "testPdfXStretchedInBroadcastWhenLowerRank": [
                    "self"
                ],
                "testBetaMean": [
                    "self"
                ],
                "testBetaVariance": [
                    "self"
                ],
                "testBetaMode": [
                    "self"
                ],
                "testBetaModeInvalid": [
                    "self"
                ],
                "testBetaModeEnableAllowNanStats": [
                    "self"
                ],
                "testBetaEntropy": [
                    "self"
                ],
                "testBetaSample": [
                    "self"
                ],
                "testBetaSampleMultipleTimes": [
                    "self"
                ],
                "testBetaSampleMultidimensional": [
                    "self"
                ],
                "testBetaCdf": [
                    "self"
                ],
                "testBetaLogCdf": [
                    "self"
                ],
                "testBetaWithSoftplusAB": [
                    "self"
                ],
                "testBetaBetaKL": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.distributions.python.kernel_tests.operator_pd_full_test": {
            "OperatorPDFullTest": {
                "setUp": [
                    "self"
                ],
                "_random_positive_def_array": [
                    "self"
                ],
                "testPositiveDefiniteMatrixDoesntRaise": [
                    "self"
                ],
                "testNegativeDefiniteMatrixRaises": [
                    "self"
                ],
                "testNonSymmetricMatrixRaises": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.distributions.python.kernel_tests.distribution_util_test": {
            "AssertCloseTest": {
                "testAssertCloseIntegerDtype": [
                    "self"
                ],
                "testAssertCloseNonIntegerDtype": [
                    "self"
                ],
                "testAssertCloseEpsilon": [
                    "self"
                ],
                "testAssertIntegerForm": [
                    "self"
                ]
            },
            "GetLogitsAndProbTest": {
                "testGetLogitsAndProbImproperArguments": [
                    "self"
                ],
                "testGetLogitsAndProbLogits": [
                    "self"
                ],
                "testGetLogitsAndProbLogitsMultidimensional": [
                    "self"
                ],
                "testGetLogitsAndProbProbability": [
                    "self"
                ],
                "testGetLogitsAndProbProbabilityMultidimensional": [
                    "self"
                ],
                "testGetLogitsAndProbProbabilityValidateArgs": [
                    "self"
                ],
                "testGetLogitsAndProbProbabilityValidateArgsMultidimensional": [
                    "self"
                ]
            },
            "LogCombinationsTest": {
                "testLogCombinationsBinomial": [
                    "self"
                ],
                "testLogCombinationsShape": [
                    "self"
                ]
            },
            "RotateTransposeTest": {
                "_np_rotate_transpose": [
                    "self",
                    "x",
                    "shift"
                ],
                "testRollStatic": [
                    "self"
                ],
                "testRollDynamic": [
                    "self"
                ]
            },
            "PickVectorTest": {
                "testCorrectlyPicksVector": [
                    "self"
                ]
            },
            "FillLowerTriangularTest": {
                "setUp": [
                    "self"
                ],
                "_fill_lower_triangular": [
                    "self",
                    "x"
                ],
                "testCorrectlyMakes1x1LowerTril": [
                    "self"
                ],
                "testCorrectlyMakesNoBatchLowerTril": [
                    "self"
                ],
                "testCorrectlyMakesBatchLowerTril": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.distributions.python.kernel_tests.kullback_leibler_test": {
            "KLTest": {
                "testRegistration": [
                    "self"
                ],
                "testDomainErrorExceptions": [
                    "self"
                ],
                "testRegistrationFailures": [
                    "self"
                ],
                "testExactRegistrationsAllMatch": [
                    "self"
                ],
                "testIndirectRegistration": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.distributions.python.kernel_tests.quantized_distribution_test": {
            "QuantizedDistributionTest": {
                "_assert_all_finite": [
                    "self",
                    "array"
                ],
                "testQuantizationOfUniformWithCutoffsHavingNoEffect": [
                    "self"
                ],
                "testQuantizationOfUniformWithCutoffsInTheMiddle": [
                    "self"
                ],
                "testQuantizationOfBatchOfUniforms": [
                    "self"
                ],
                "testSamplingFromBatchOfNormals": [
                    "self"
                ],
                "testSamplesAgreeWithCdfForSamplesOverLargeRange": [
                    "self"
                ],
                "testSamplesAgreeWithPdfForSamplesOverSmallRange": [
                    "self"
                ],
                "testNormalCdfAndSurvivalFunction": [
                    "self"
                ],
                "testNormalLogCdfAndLogSurvivalFunction": [
                    "self"
                ],
                "testNormalProbWithCutoffs": [
                    "self"
                ],
                "testNormalLogProbWithCutoffs": [
                    "self"
                ],
                "testLogProbAndGradGivesFiniteResults": [
                    "self"
                ],
                "testProbAndGradGivesFiniteResultsForCommonEvents": [
                    "self"
                ],
                "testLowerCutoffMustBeBelowUpperCutoffOrWeRaise": [
                    "self"
                ],
                "testCutoffsMustBeIntegerValuedIfValidateArgsTrue": [
                    "self"
                ],
                "testCutoffsCanBeFloatValuedIfValidateArgsFalse": [
                    "self"
                ],
                "testDtypeAndShapeInheritedFromBaseDist": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.distributions.python.kernel_tests.mixture_test": {
            "_swap_first_last_axes": [
                "array"
            ],
            "_test_capture_mvndiag_sample_outputs": [],
            "_test_capture_normal_sample_outputs": [],
            "make_univariate_mixture": [
                "batch_shape",
                "num_components"
            ],
            "make_multivariate_mixture": [
                "batch_shape",
                "num_components",
                "event_shape"
            ],
            "MixtureTest": {
                "testShapes": [
                    "self"
                ],
                "testBrokenShapesStatic": [
                    "self"
                ],
                "testBrokenShapesDynamic": [
                    "self"
                ],
                "testBrokenTypes": [
                    "self"
                ],
                "testMeanUnivariate": [
                    "self"
                ],
                "testMeanMultivariate": [
                    "self"
                ],
                "testProbScalarUnivariate": [
                    "self"
                ],
                "testProbScalarMultivariate": [
                    "self"
                ],
                "testProbBatchUnivariate": [
                    "self"
                ],
                "testProbBatchMultivariate": [
                    "self"
                ],
                "testSampleScalarBatchUnivariate": [
                    "self"
                ],
                "testSampleMultipleTimes": [
                    "self"
                ],
                "testSampleScalarBatchMultivariate": [
                    "self"
                ],
                "testSampleBatchUnivariate": [
                    "self"
                ],
                "testSampleBatchMultivariate": [
                    "self"
                ],
                "testEntropyLowerBoundMultivariate": [
                    "self"
                ]
            },
            "MixtureBenchmark": {
                "_runSamplingBenchmark": [
                    "self",
                    "name",
                    "create_distribution",
                    "use_gpu",
                    "num_components",
                    "batch_size",
                    "num_features",
                    "sample_size"
                ],
                "benchmarkSamplingMVNDiag": [
                    "self"
                ],
                "benchmarkSamplingMVNFull": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.distributions.python.kernel_tests.shape_test": {
            "_eval": [
                "x"
            ],
            "_constant": [
                "x"
            ],
            "DistributionShapeTest": {
                "setUp": [
                    "self"
                ],
                "_random_sample": [
                    "self",
                    "sample_shape",
                    "dtype"
                ],
                "_assertNdArrayEqual": [
                    "self",
                    "expected",
                    "actual"
                ],
                "testDistributionShapeGetNdimsStatic": [
                    "self"
                ],
                "testDistributionShapeGetNdimsDynamic": [
                    "self"
                ],
                "testDistributionShapeGetDimsStatic": [
                    "self"
                ],
                "testDistributionShapeGetDimsDynamic": [
                    "self"
                ],
                "testDistributionShapeGetShapeStatic": [
                    "self"
                ],
                "testDistributionShapeGetShapeDynamic": [
                    "self"
                ],
                "testDistributionShapeMakeBatchReadyStatic": [
                    "self"
                ],
                "testDistributionShapeMakeBatchReadyDynamic": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.distributions.python.kernel_tests.chi2_test": {
            "Chi2Test": {
                "testChi2LogPDF": [
                    "self"
                ],
                "testChi2CDF": [
                    "self"
                ],
                "testChi2Mean": [
                    "self"
                ],
                "testChi2Variance": [
                    "self"
                ],
                "testChi2Entropy": [
                    "self"
                ],
                "testChi2WithAbsDf": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.distributions.python.kernel_tests.wishart_test": {
            "make_pd": [
                "start",
                "n"
            ],
            "chol": [
                "x"
            ],
            "wishart_var": [
                "df",
                "x"
            ],
            "WishartCholeskyTest": {
                "testEntropy": [
                    "self"
                ],
                "testMeanLogDetAndLogNormalizingConstant": [
                    "self"
                ],
                "testMean": [
                    "self"
                ],
                "testMode": [
                    "self"
                ],
                "testStd": [
                    "self"
                ],
                "testVariance": [
                    "self"
                ],
                "testSample": [
                    "self"
                ],
                "testSampleMultipleTimes": [
                    "self"
                ],
                "testProb": [
                    "self"
                ],
                "testBatchShape": [
                    "self"
                ],
                "testEventShape": [
                    "self"
                ],
                "testValidateArgs": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.distributions.python.kernel_tests.uniform_test": {
            "UniformTest": {
                "testUniformRange": [
                    "self"
                ],
                "testUniformPDF": [
                    "self"
                ],
                "testUniformShape": [
                    "self"
                ],
                "testUniformPDFWithScalarEndpoint": [
                    "self"
                ],
                "testUniformCDF": [
                    "self"
                ],
                "testUniformEntropy": [
                    "self"
                ],
                "testUniformAssertMaxGtMin": [
                    "self"
                ],
                "testUniformSample": [
                    "self"
                ],
                "_testUniformSampleMultiDimensional": [
                    "self"
                ],
                "testUniformMean": [
                    "self"
                ],
                "testUniformVariance": [
                    "self"
                ],
                "testUniformStd": [
                    "self"
                ],
                "testUniformNans": [
                    "self"
                ],
                "testUniformSamplePdf": [
                    "self"
                ],
                "testUniformBroadcasting": [
                    "self"
                ],
                "testUniformSampleWithShape": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.distributions.python.kernel_tests.gamma_test": {
            "GammaTest": {
                "testGammaShape": [
                    "self"
                ],
                "testGammaLogPDF": [
                    "self"
                ],
                "testGammaLogPDFMultidimensional": [
                    "self"
                ],
                "testGammaLogPDFMultidimensionalBroadcasting": [
                    "self"
                ],
                "testGammaCDF": [
                    "self"
                ],
                "testGammaMean": [
                    "self"
                ],
                "testGammaModeAllowNanStatsIsFalseWorksWhenAllBatchMembersAreDefined": [
                    "self"
                ],
                "testGammaModeAllowNanStatsFalseRaisesForUndefinedBatchMembers": [
                    "self"
                ],
                "testGammaModeAllowNanStatsIsTrueReturnsNaNforUndefinedBatchMembers": [
                    "self"
                ],
                "testGammaVariance": [
                    "self"
                ],
                "testGammaStd": [
                    "self"
                ],
                "testGammaEntropy": [
                    "self"
                ],
                "testGammaSampleSmallAlpha": [
                    "self"
                ],
                "testGammaSample": [
                    "self"
                ],
                "testGammaSampleMultiDimensional": [
                    "self"
                ],
                "_kstest": [
                    "self",
                    "alpha",
                    "beta",
                    "samples"
                ],
                "testGammaPdfOfSampleMultiDims": [
                    "self"
                ],
                "_assertIntegral": [
                    "self",
                    "sample_vals",
                    "pdf_vals",
                    "err"
                ],
                "testGammaNonPositiveInitializationParamsRaises": [
                    "self"
                ],
                "testGammaWithSoftplusAlphaBeta": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.distributions.python.kernel_tests.operator_pd_identity_test": {
            "OperatorPDIdentityTest": {
                "_build_operator_and_mat": [
                    "self",
                    "batch_shape",
                    "k",
                    "dtype"
                ],
                "testBadDtypeArgsRaise": [
                    "self"
                ],
                "testBadRankArgsRaise": [
                    "self"
                ],
                "testIncompatibleShapeArgsRaise": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.distributions.python.kernel_tests.operator_pd_cholesky_test": {
            "softplus": [
                "x"
            ],
            "OperatorPDCholeskyTest": {
                "setUp": [
                    "self"
                ],
                "_random_cholesky_array": [
                    "self",
                    "shape"
                ],
                "testLogDet": [
                    "self"
                ],
                "testLogDetBatchMatrix": [
                    "self"
                ],
                "testSqrtMatmulSingleMatrix": [
                    "self"
                ],
                "testSqrtMatmulBatchMatrix": [
                    "self"
                ],
                "testSqrtMatmulBatchMatrixWithTranspose": [
                    "self"
                ],
                "testMatmulSingleMatrix": [
                    "self"
                ],
                "testMatmulBatchMatrix": [
                    "self"
                ],
                "testMatmulBatchMatrixWithTranspose": [
                    "self"
                ],
                "testShape": [
                    "self"
                ],
                "testToDense": [
                    "self"
                ],
                "testSqrtToDense": [
                    "self"
                ],
                "testNonPositiveDefiniteMatrixRaises": [
                    "self"
                ],
                "testNonPositiveDefiniteMatrixDoesNotRaiseIfNotVerifyPd": [
                    "self"
                ],
                "testNotHavingTwoIdenticalLastDimsRaises": [
                    "self"
                ]
            },
            "MatrixDiagTransformTest": {
                "setUp": [
                    "self"
                ],
                "check_off_diagonal_same": [
                    "self",
                    "m1",
                    "m2"
                ],
                "testNonBatchMatrixWithTransform": [
                    "self"
                ],
                "testNonBatchMatrixNoTransform": [
                    "self"
                ],
                "testBatchMatrixWithTransform": [
                    "self"
                ],
                "testBatchMatrixNoTransform": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.distributions.python.kernel_tests.poisson_test": {
            "PoissonTest": {
                "testPoissonShape": [
                    "self"
                ],
                "testInvalidLam": [
                    "self"
                ],
                "testPoissonLogPmf": [
                    "self"
                ],
                "testPoissonLogPmfValidateArgs": [
                    "self"
                ],
                "testPoissonLogPmfMultidimensional": [
                    "self"
                ],
                "testPoissonCDF": [
                    "self"
                ],
                "testPoissonCdfMultidimensional": [
                    "self"
                ],
                "testPoissonMean": [
                    "self"
                ],
                "testPoissonVariance": [
                    "self"
                ],
                "testPoissonStd": [
                    "self"
                ],
                "testPoissonMode": [
                    "self"
                ],
                "testPoissonMultipleMode": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.distributions.python.kernel_tests.operator_pd_diag_test": {
            "OperatorPDDiagBaseTest": {
                "setUp": [
                    "self"
                ],
                "_random_pd_diag": [
                    "self",
                    "diag_shape"
                ],
                "_diag_to_matrix": [
                    "self",
                    "diag"
                ],
                "operator_class": [
                    "self"
                ],
                "_build_operator_and_mat": [
                    "self",
                    "batch_shape",
                    "k",
                    "dtype"
                ],
                "testNonPositiveDefiniteMatrixRaises": [
                    "self"
                ],
                "testNonPositiveDefiniteMatrixDoesNotRaiseIfNotVerifyPd": [
                    "self"
                ]
            },
            "OperatorPDDiagTest": {
                "_diag_to_matrix": [
                    "self",
                    "diag"
                ],
                "operator_class": [
                    "self"
                ]
            },
            "OperatorPDSqrtDiagTest": {
                "_diag_to_matrix": [
                    "self",
                    "diag"
                ],
                "operator_class": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.distributions.python.kernel_tests.normal_conjugate_posteriors_test": {
            "NormalTest": {
                "testNormalConjugateKnownSigmaPosterior": [
                    "self"
                ],
                "testNormalConjugateKnownSigmaPosteriorND": [
                    "self"
                ],
                "testNormalConjugateKnownSigmaNDPosteriorND": [
                    "self"
                ],
                "testNormalConjugateKnownSigmaPredictive": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.distributions.python.kernel_tests.distribution_test": {
            "DistributionTest": {
                "testParamShapesAndFromParams": [
                    "self"
                ],
                "testCopyExtraArgs": [
                    "self"
                ],
                "testCopyOverride": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.distributions.python.kernel_tests.mvn_test": {
            "_compute_non_batch_kl": [
                "mu_a",
                "sigma_a",
                "mu_b",
                "sigma_b"
            ],
            "MultivariateNormalShapeTest": {
                "_testPDFShapes": [
                    "self",
                    "mvn_dist",
                    "mu",
                    "sigma"
                ],
                "testPDFUnknownSize": [
                    "self"
                ],
                "testPDFUnknownShape": [
                    "self"
                ]
            },
            "MultivariateNormalDiagTest": {
                "setUp": [
                    "self"
                ],
                "testMean": [
                    "self"
                ],
                "testEntropy": [
                    "self"
                ],
                "testNonmatchingMuDiagDimensionsFailsStatic": [
                    "self"
                ],
                "testNonmatchingMuDiagDimensionsFailsDynamic": [
                    "self"
                ],
                "testSample": [
                    "self"
                ],
                "testMultivariateNormalDiagWithSoftplusStDev": [
                    "self"
                ]
            },
            "MultivariateNormalDiagPlusVDVTTest": {
                "setUp": [
                    "self"
                ],
                "testMean": [
                    "self"
                ],
                "testNonmatchingMuAndSigmaDimensionFailsStatic": [
                    "self"
                ],
                "testNonmatchingMuDiagDimensionsFailsDynamic": [
                    "self"
                ],
                "testSample": [
                    "self"
                ]
            },
            "MultivariateNormalCholeskyTest": {
                "setUp": [
                    "self"
                ],
                "_random_chol": [
                    "self"
                ],
                "testNonmatchingMuSigmaFailsStatic": [
                    "self"
                ],
                "testNonmatchingMuSigmaFailsDynamic": [
                    "self"
                ],
                "testLogPDFScalarBatch": [
                    "self"
                ],
                "testLogPDFXIsHigherRank": [
                    "self"
                ],
                "testLogPDFXLowerDimension": [
                    "self"
                ],
                "testEntropy": [
                    "self"
                ],
                "testEntropyMultidimensional": [
                    "self"
                ],
                "testSample": [
                    "self"
                ],
                "testSampleWithSampleShape": [
                    "self"
                ],
                "testSampleMultiDimensional": [
                    "self"
                ],
                "testShapes": [
                    "self"
                ]
            },
            "MultivariateNormalFullTest": {
                "setUp": [
                    "self"
                ],
                "_random_mu_and_sigma": [
                    "self",
                    "batch_shape",
                    "event_shape"
                ],
                "testKLNonBatch": [
                    "self"
                ],
                "testKLBatch": [
                    "self"
                ],
                "testKLTwoIdenticalDistributionsIsZero": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.distributions.python.kernel_tests.laplace_test": {
            "LaplaceTest": {
                "testLaplaceShape": [
                    "self"
                ],
                "testLaplaceLogPDF": [
                    "self"
                ],
                "testLaplaceLogPDFMultidimensional": [
                    "self"
                ],
                "testLaplaceLogPDFMultidimensionalBroadcasting": [
                    "self"
                ],
                "testLaplaceCDF": [
                    "self"
                ],
                "testLaplaceMean": [
                    "self"
                ],
                "testLaplaceMode": [
                    "self"
                ],
                "testLaplaceVariance": [
                    "self"
                ],
                "testLaplaceStd": [
                    "self"
                ],
                "testLaplaceEntropy": [
                    "self"
                ],
                "testLaplaceSample": [
                    "self"
                ],
                "testLaplaceSampleMultiDimensional": [
                    "self"
                ],
                "_kstest": [
                    "self",
                    "loc",
                    "scale",
                    "samples"
                ],
                "testLaplacePdfOfSampleMultiDims": [
                    "self"
                ],
                "_assertIntegral": [
                    "self",
                    "sample_vals",
                    "pdf_vals",
                    "err"
                ],
                "testLaplaceNonPositiveInitializationParamsRaises": [
                    "self"
                ],
                "testLaplaceWithSoftplusScale": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.distributions.python.kernel_tests": {},
        "tensorflow.contrib.distributions.python.kernel_tests.student_t_test": {
            "StudentTTest": {
                "testStudentPDFAndLogPDF": [
                    "self"
                ],
                "testStudentLogPDFMultidimensional": [
                    "self"
                ],
                "testStudentEntropy": [
                    "self"
                ],
                "testStudentSample": [
                    "self"
                ],
                "testStudentSampleMultipleTimes": [
                    "self"
                ],
                "testStudentSampleSmallDfNoNan": [
                    "self"
                ],
                "testStudentSampleMultiDimensional": [
                    "self"
                ],
                "_checkKLApprox": [
                    "self",
                    "df",
                    "mu",
                    "sigma",
                    "samples"
                ],
                "testBroadcastingParams": [
                    "self"
                ],
                "testBroadcastingPdfArgs": [
                    "self"
                ],
                "testMeanAllowNanStatsIsFalseWorksWhenAllBatchMembersAreDefined": [
                    "self"
                ],
                "testMeanAllowNanStatsIsFalseRaisesWhenBatchMemberIsUndefined": [
                    "self"
                ],
                "testMeanAllowNanStatsIsTrueReturnsNaNForUndefinedBatchMembers": [
                    "self"
                ],
                "testVarianceAllowNanStatsTrueReturnsNaNforUndefinedBatchMembers": [
                    "self"
                ],
                "testVarianceAllowNanStatsFalseGivesCorrectValueForDefinedBatchMembers": [
                    "self"
                ],
                "testVarianceAllowNanStatsFalseRaisesForUndefinedBatchMembers": [
                    "self"
                ],
                "testStd": [
                    "self"
                ],
                "testMode": [
                    "self"
                ],
                "testPdfOfSample": [
                    "self"
                ],
                "testPdfOfSampleMultiDims": [
                    "self"
                ],
                "_assertIntegral": [
                    "self",
                    "sample_vals",
                    "pdf_vals",
                    "err"
                ],
                "testNegativeDofFails": [
                    "self"
                ],
                "testNegativeScaleFails": [
                    "self"
                ],
                "testStudentTWithAbsDfSoftplusSigma": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.distributions.python.kernel_tests.bernoulli_test": {
            "make_bernoulli": [
                "batch_shape",
                "dtype"
            ],
            "entropy": [
                "p"
            ],
            "BernoulliTest": {
                "testP": [
                    "self"
                ],
                "testLogits": [
                    "self"
                ],
                "testInvalidP": [
                    "self"
                ],
                "testShapes": [
                    "self"
                ],
                "testDtype": [
                    "self"
                ],
                "_testPmf": [
                    "self"
                ],
                "testPmfWithP": [
                    "self"
                ],
                "testBroadcasting": [
                    "self"
                ],
                "testPmfShapes": [
                    "self"
                ],
                "testBoundaryConditions": [
                    "self"
                ],
                "testEntropyNoBatch": [
                    "self"
                ],
                "testEntropyWithBatch": [
                    "self"
                ],
                "testSampleN": [
                    "self"
                ],
                "testSampleActsLikeSampleN": [
                    "self"
                ],
                "testMean": [
                    "self"
                ],
                "testVarianceAndStd": [
                    "self"
                ],
                "testBernoulliWithSigmoidP": [
                    "self"
                ],
                "testBernoulliBernoulliKL": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.distributions.python.kernel_tests.inverse_gamma_test": {
            "InverseGammaTest": {
                "testInverseGammaShape": [
                    "self"
                ],
                "testInverseGammaLogPDF": [
                    "self"
                ],
                "testInverseGammaLogPDFMultidimensional": [
                    "self"
                ],
                "testInverseGammaLogPDFMultidimensionalBroadcasting": [
                    "self"
                ],
                "testInverseGammaCDF": [
                    "self"
                ],
                "testInverseGammaMode": [
                    "self"
                ],
                "testInverseGammaMeanAllDefined": [
                    "self"
                ],
                "testInverseGammaMeanAllowNanStats": [
                    "self"
                ],
                "testInverseGammaMeanNanStats": [
                    "self"
                ],
                "testInverseGammaVarianceAllDefined": [
                    "self"
                ],
                "testInverseGammaVarianceAllowNanStats": [
                    "self"
                ],
                "testInverseGammaVarianceNanStats": [
                    "self"
                ],
                "testInverseGammaEntropy": [
                    "self"
                ],
                "testInverseGammaSample": [
                    "self"
                ],
                "testInverseGammaSampleMultiDimensional": [
                    "self"
                ],
                "_kstest": [
                    "self",
                    "alpha",
                    "beta",
                    "samples"
                ],
                "testInverseGammaPdfOfSampleMultiDims": [
                    "self"
                ],
                "_assertIntegral": [
                    "self",
                    "sample_vals",
                    "pdf_vals",
                    "err"
                ],
                "testInverseGammaNonPositiveInitializationParamsRaises": [
                    "self"
                ],
                "testInverseGammaWithSoftplusAlphaBeta": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.distributions.python.kernel_tests.exponential_test": {
            "ExponentialTest": {
                "testExponentialLogPDF": [
                    "self"
                ],
                "testExponentialCDF": [
                    "self"
                ],
                "testExponentialMean": [
                    "self"
                ],
                "testExponentialVariance": [
                    "self"
                ],
                "testExponentialEntropy": [
                    "self"
                ],
                "testExponentialSample": [
                    "self"
                ],
                "testExponentialSampleMultiDimensional": [
                    "self"
                ],
                "testExponentialWithSoftplusLam": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.distributions.python.kernel_tests.operator_pd_vdvt_update_test": {
            "OperatorPDSqrtVDVTUpdateTest": {
                "setUp": [
                    "self"
                ],
                "_random_pd_matrix": [
                    "self",
                    "shape"
                ],
                "_random_v_and_diag": [
                    "self",
                    "mat_shape",
                    "v_matrix_rank"
                ],
                "_updated_mat": [
                    "self",
                    "mat",
                    "v",
                    "diag"
                ],
                "_build_operator_and_mat": [
                    "self",
                    "batch_shape",
                    "k",
                    "dtype"
                ],
                "testToDensePlaceholder": [
                    "self"
                ],
                "testOperatorNotSubclassOfOperatorPdRaises": [
                    "self"
                ],
                "testNonPosDefDiagRaises": [
                    "self"
                ],
                "testNonPosDefDiagDoesntRaiseIfVerifyPd_false": [
                    "self"
                ],
                "testEventShapeMismatchVAndDiagRaisesStatic": [
                    "self"
                ],
                "testBatchShapeMismatchVAndDiagRaisesStatic": [
                    "self"
                ],
                "testTensorRankShapeMismatchVAndDiagRaisesStatic": [
                    "self"
                ],
                "testEventShapeMismatchVAndDiagRaisesDynamic": [
                    "self"
                ],
                "testBatchShapeMismatchVAndDiagRaisesDynamic": [
                    "self"
                ],
                "testTensorRankShapeMismatchVAndDiagRaisesDynamic": [
                    "self"
                ]
            },
            "OperatorPDSqrtVDVTUpdateNoneDiagTest": {}
        },
        "tensorflow.contrib.distributions.python.kernel_tests.dirichlet_multinomial_test": {
            "DirichletMultinomialTest": {
                "testSimpleShapes": [
                    "self"
                ],
                "testComplexShapes": [
                    "self"
                ],
                "testNproperty": [
                    "self"
                ],
                "testAlphaProperty": [
                    "self"
                ],
                "testPmfNandCountsAgree": [
                    "self"
                ],
                "testPmfNonIntegerCounts": [
                    "self"
                ],
                "testPmfBothZeroBatches": [
                    "self"
                ],
                "testPmfBothZeroBatchesNontrivialN": [
                    "self"
                ],
                "testPmfBothZeroBatchesMultidimensionalN": [
                    "self"
                ],
                "testPmfAlphaStretchedInBroadcastWhenSameRank": [
                    "self"
                ],
                "testPmfAlphaStretchedInBroadcastWhenLowerRank": [
                    "self"
                ],
                "testPmfCountsStretchedInBroadcastWhenSameRank": [
                    "self"
                ],
                "testPmfCountsStretchedInBroadcastWhenLowerRank": [
                    "self"
                ],
                "testPmfForOneVoteIsTheMeanWithOneRecordInput": [
                    "self"
                ],
                "testMeanDoubleTwoVotes": [
                    "self"
                ],
                "testVariance": [
                    "self"
                ],
                "testVarianceNAlphaBroadcast": [
                    "self"
                ],
                "testVarianceMultidimensional": [
                    "self"
                ],
                "testZeroCountsResultsInPmfEqualToOne": [
                    "self"
                ],
                "testLargeTauGivesPreciseProbabilities": [
                    "self"
                ],
                "testSmallTauPrefersCorrelatedResults": [
                    "self"
                ],
                "testNonStrictTurnsOffAllChecks": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.distributions.python.kernel_tests.transformed_distribution_test": {
            "_ChooseLocation": {
                "__init__": [
                    "self",
                    "loc",
                    "name"
                ],
                "_forward": [
                    "self",
                    "x",
                    "z"
                ],
                "_inverse": [
                    "self",
                    "x",
                    "z"
                ],
                "_inverse_log_det_jacobian": [
                    "self",
                    "x",
                    "z"
                ],
                "_gather_loc": [
                    "self",
                    "z"
                ]
            },
            "TransformedDistributionTest": {
                "testTransformedDistribution": [
                    "self"
                ],
                "testCachedSamplesWithoutInverse": [
                    "self"
                ],
                "testConditioning": [
                    "self"
                ],
                "testShapeChangingBijector": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.distributions.python.kernel_tests.multinomial_test": {
            "MultinomialTest": {
                "testSimpleShapes": [
                    "self"
                ],
                "testComplexShapes": [
                    "self"
                ],
                "testN": [
                    "self"
                ],
                "testP": [
                    "self"
                ],
                "testLogits": [
                    "self"
                ],
                "testPmfNandCountsAgree": [
                    "self"
                ],
                "testPmfNonIntegerCounts": [
                    "self"
                ],
                "testPmfBothZeroBatches": [
                    "self"
                ],
                "testPmfBothZeroBatchesNontrivialN": [
                    "self"
                ],
                "testPmfPStretchedInBroadcastWhenSameRank": [
                    "self"
                ],
                "testPmfPStretchedInBroadcastWhenLowerRank": [
                    "self"
                ],
                "testPmfCountsStretchedInBroadcastWhenSameRank": [
                    "self"
                ],
                "testPmfCountsStretchedInBroadcastWhenLowerRank": [
                    "self"
                ],
                "testPmfShapeCountsStretchedN": [
                    "self"
                ],
                "testPmfShapeCountsPStretchedN": [
                    "self"
                ],
                "testMultinomialMean": [
                    "self"
                ],
                "testMultinomialVariance": [
                    "self"
                ],
                "testMultinomialVarianceBatch": [
                    "self"
                ],
                "testVarianceMultidimensional": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.distributions.python.kernel_tests.normal_test": {
            "NormalTest": {
                "setUp": [
                    "self"
                ],
                "assertAllFinite": [
                    "self",
                    "tensor"
                ],
                "_testParamShapes": [
                    "self",
                    "sample_shape",
                    "expected"
                ],
                "_testParamStaticShapes": [
                    "self",
                    "sample_shape",
                    "expected"
                ],
                "testParamShapes": [
                    "self"
                ],
                "testParamStaticShapes": [
                    "self"
                ],
                "testNormalWithSoftplusSigma": [
                    "self"
                ],
                "testNormalLogPDF": [
                    "self"
                ],
                "testNormalLogPDFMultidimensional": [
                    "self"
                ],
                "testNormalCDF": [
                    "self"
                ],
                "testNormalSurvivalFunction": [
                    "self"
                ],
                "testNormalLogCDF": [
                    "self"
                ],
                "testFiniteGradientAtDifficultPoints": [
                    "self"
                ],
                "testNormalLogSurvivalFunction": [
                    "self"
                ],
                "testNormalEntropyWithScalarInputs": [
                    "self"
                ],
                "testNormalEntropy": [
                    "self"
                ],
                "testNormalMeanAndMode": [
                    "self"
                ],
                "testNormalVariance": [
                    "self"
                ],
                "testNormalStandardDeviation": [
                    "self"
                ],
                "testNormalSample": [
                    "self"
                ],
                "testNormalSampleMultiDimensional": [
                    "self"
                ],
                "testNegativeSigmaFails": [
                    "self"
                ],
                "testNormalShape": [
                    "self"
                ],
                "testNormalShapeWithPlaceholders": [
                    "self"
                ],
                "testNormalNormalKL": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.distributions.python.kernel_tests.dirichlet_test": {
            "DirichletTest": {
                "testSimpleShapes": [
                    "self"
                ],
                "testComplexShapes": [
                    "self"
                ],
                "testAlphaProperty": [
                    "self"
                ],
                "testPdfXProper": [
                    "self"
                ],
                "testPdfZeroBatches": [
                    "self"
                ],
                "testPdfZeroBatchesNontrivialX": [
                    "self"
                ],
                "testPdfUniformZeroBatches": [
                    "self"
                ],
                "testPdfAlphaStretchedInBroadcastWhenSameRank": [
                    "self"
                ],
                "testPdfAlphaStretchedInBroadcastWhenLowerRank": [
                    "self"
                ],
                "testPdfXStretchedInBroadcastWhenSameRank": [
                    "self"
                ],
                "testPdfXStretchedInBroadcastWhenLowerRank": [
                    "self"
                ],
                "testDirichletMean": [
                    "self"
                ],
                "testDirichletVariance": [
                    "self"
                ],
                "testDirichletMode": [
                    "self"
                ],
                "testDirichletModeInvalid": [
                    "self"
                ],
                "testDirichletModeEnableAllowNanStats": [
                    "self"
                ],
                "testDirichletEntropy": [
                    "self"
                ],
                "testDirichletSample": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.distributions.python.kernel_tests.binomial_test": {
            "BinomialTest": {
                "testSimpleShapes": [
                    "self"
                ],
                "testComplexShapes": [
                    "self"
                ],
                "testNProperty": [
                    "self"
                ],
                "testPProperty": [
                    "self"
                ],
                "testLogitsProperty": [
                    "self"
                ],
                "testPmfNandCountsAgree": [
                    "self"
                ],
                "testPmfNonIntegerCounts": [
                    "self"
                ],
                "testPmfBothZeroBatches": [
                    "self"
                ],
                "testPmfBothZeroBatchesNontrivialN": [
                    "self"
                ],
                "testPmfPStretchedInBroadcastWhenSameRank": [
                    "self"
                ],
                "testPmfPStretchedInBroadcastWhenLowerRank": [
                    "self"
                ],
                "testBinomialMean": [
                    "self"
                ],
                "testBinomialVariance": [
                    "self"
                ],
                "testBinomialMode": [
                    "self"
                ],
                "testBinomialMultipleMode": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.specs": {},
        "tensorflow.contrib.specs.python.params_ops": {
            "Uf": [
                "lo",
                "hi"
            ],
            "Ui": [
                "lo",
                "hi"
            ],
            "Lf": [
                "lo",
                "hi"
            ],
            "Li": [
                "lo",
                "hi"
            ],
            "Nt": [
                "mu",
                "sigma",
                "limit"
            ]
        },
        "tensorflow.contrib.specs.python.specs_lib": {
            "check_keywords": [
                "spec"
            ],
            "get_positional": [
                "args",
                "kw",
                "kw_overrides"
            ],
            "External": [
                "module_name",
                "function_name"
            ],
            "Import": [
                "statements"
            ],
            "debug": [
                "mode"
            ],
            "Composable": {
                "__or__": [
                    "self",
                    "f"
                ],
                "__add__": [
                    "self",
                    "g"
                ],
                "__mul__": [
                    "self",
                    "g"
                ],
                "__pow__": [
                    "self",
                    "n"
                ]
            },
            "Callable": {
                "__init__": [
                    "self",
                    "f"
                ],
                "funcall": [
                    "self",
                    "x"
                ]
            },
            "Operator": {
                "__init__": [
                    "self",
                    "op"
                ],
                "funcall": [
                    "self",
                    "x"
                ]
            },
            "Function": {
                "__init__": [
                    "self",
                    "f"
                ],
                "__call__": [
                    "self"
                ],
                "funcall": [
                    "self",
                    "x"
                ]
            },
            "AutoFunction": {
                "__init__": [
                    "self",
                    "source"
                ],
                "__getattr__": [
                    "self",
                    "key"
                ]
            },
            "Composition": {
                "__init__": [
                    "self",
                    "f",
                    "g"
                ],
                "funcall": [
                    "self",
                    "x"
                ]
            }
        },
        "tensorflow.contrib.specs.python.summaries": {
            "_truncate_structure": [
                "x"
            ],
            "tf_structure": [
                "x",
                "include_shapes",
                "finished"
            ],
            "tf_print": [
                "x",
                "depth",
                "finished",
                "printer"
            ],
            "tf_num_params": [
                "x"
            ],
            "tf_left_split": [
                "op"
            ],
            "tf_parameter_iter": [
                "x"
            ],
            "_combine_filter": [
                "x"
            ],
            "tf_parameter_summary": [
                "x",
                "printer",
                "combine"
            ],
            "tf_spec_structure": [
                "spec",
                "inputs",
                "input_shape",
                "input_type"
            ],
            "tf_spec_summary": [
                "spec",
                "inputs",
                "input_shape",
                "input_type"
            ],
            "tf_spec_print": [
                "spec",
                "inputs",
                "input_shape",
                "input_type"
            ]
        },
        "tensorflow.contrib.specs.python.specs_ops": {
            "Clstm2": [
                "n"
            ],
            "Dws": [
                "n"
            ],
            "Dwm": [
                "n"
            ],
            "Var": [
                "name"
            ],
            "Idx": {
                "funcall": [
                    "self",
                    "x"
                ]
            },
            "Conc": {
                "__init__": [
                    "self",
                    "dim"
                ],
                "funcall": [
                    "self",
                    "x"
                ]
            },
            "Shared": {
                "__init__": [
                    "self",
                    "subnet",
                    "name",
                    "scope"
                ],
                "funcall": [
                    "self",
                    "x"
                ]
            }
        },
        "tensorflow.contrib.specs.python.specs": {
            "eval_params": [
                "params",
                "environment"
            ],
            "eval_spec": [
                "spec",
                "environment"
            ],
            "create_net_fun": [
                "spec",
                "environment"
            ],
            "create_net": [
                "spec",
                "inputs",
                "environment"
            ],
            "LocalImport": {
                "__init__": [
                    "self",
                    "names"
                ],
                "__enter__": [
                    "self"
                ],
                "__exit__": [
                    "self",
                    "some_type",
                    "value",
                    "traceback"
                ]
            }
        },
        "tensorflow.contrib.specs.python.summaries_test": {
            "_rand": [],
            "SummariesTest": {
                "testStructure": [
                    "self"
                ],
                "testStructureFromTensor": [
                    "self"
                ],
                "testPrint": [
                    "self"
                ],
                "testSummary": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.specs.python": {},
        "tensorflow.contrib.specs.python.specs_test": {
            "_rand": [],
            "SpecsTest": {
                "testSimpleConv": [
                    "self"
                ],
                "testUnary": [
                    "self"
                ],
                "testAdd": [
                    "self"
                ],
                "testMpPower": [
                    "self"
                ],
                "testAbbrevPower": [
                    "self"
                ],
                "testAbbrevPower2": [
                    "self"
                ],
                "testConc": [
                    "self"
                ],
                "testImport": [
                    "self"
                ],
                "testLstm2": [
                    "self"
                ],
                "testLstm2to1": [
                    "self"
                ],
                "testLstm2to0": [
                    "self"
                ],
                "testKeywordRestriction": [
                    "self"
                ],
                "testParams": [
                    "self"
                ],
                "testSpecsOps": [
                    "self"
                ],
                "testVar": [
                    "self"
                ],
                "testShared": [
                    "self"
                ],
                "testAutoFunction": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.copy_graph": {},
        "tensorflow.contrib.copy_graph.python": {},
        "tensorflow.contrib.copy_graph.python.util.copy_test": {
            "CopyVariablesTest": {
                "testVariableCopy": [
                    "self"
                ]
            },
            "CopyOpsTest": {
                "testOpsCopy": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.copy_graph.python.util.copy_elements": {
            "copy_variable_to_graph": [
                "org_instance",
                "to_graph",
                "scope"
            ],
            "copy_op_to_graph": [
                "org_instance",
                "to_graph",
                "variables",
                "scope"
            ],
            "get_copied_op": [
                "org_instance",
                "graph",
                "scope"
            ]
        },
        "tensorflow.contrib.copy_graph.python.util": {},
        "tensorflow.contrib.losses": {},
        "tensorflow.contrib.losses.python": {},
        "tensorflow.contrib.losses.python.losses.loss_ops_test": {
            "AbsoluteDifferenceLossTest": {
                "setUp": [
                    "self"
                ],
                "testValueErrorThrownWhenWeightIsNone": [
                    "self"
                ],
                "testAllCorrectNoLossWeight": [
                    "self"
                ],
                "testNonZeroLoss": [
                    "self"
                ],
                "testNonZeroLossWithPythonScalarWeight": [
                    "self"
                ],
                "testDeprecatedArgs": [
                    "self"
                ],
                "testNonZeroLossWithScalarTensorWeight": [
                    "self"
                ],
                "testNonZeroLossWithOneDimBatchSpecificWeights": [
                    "self"
                ],
                "testNonZeroLossWithTwoDimBatchSpecificWeights": [
                    "self"
                ],
                "testNonZeroLossWithSampleSpecificWeights": [
                    "self"
                ],
                "testNonZeroLossWithSampleSpecificWeightsMostZero": [
                    "self"
                ],
                "testLossWithSampleSpecificWeightsAllZero": [
                    "self"
                ]
            },
            "SoftmaxCrossEntropyLossTest": {
                "testNoneWeightRaisesValueError": [
                    "self"
                ],
                "testAllCorrect": [
                    "self"
                ],
                "testAllWrong": [
                    "self"
                ],
                "testNonZeroLossWithPythonScalarWeight": [
                    "self"
                ],
                "testDeprecatedArgs": [
                    "self"
                ],
                "testNonZeroLossWithScalarTensorWeight": [
                    "self"
                ],
                "testNonZeroLossWithOneDimBatchSpecificWeights": [
                    "self"
                ],
                "testAllWrongAllWeightsMissing": [
                    "self"
                ],
                "testSomeWeightsMissing": [
                    "self"
                ],
                "testSoftmaxWithMeasurementSpecificWeightsRaisesException": [
                    "self"
                ],
                "testSoftmaxLabelSmoothing": [
                    "self"
                ]
            },
            "SparseSoftmaxCrossEntropyLossTest": {
                "testNoneWeightRaisesValueError": [
                    "self"
                ],
                "testAllCorrectInt32Labels": [
                    "self"
                ],
                "testAllCorrectInt64Labels": [
                    "self"
                ],
                "testAllCorrectNonColumnLabels": [
                    "self"
                ],
                "testAllWrongInt32Labels": [
                    "self"
                ],
                "testAllWrongInt64Labels": [
                    "self"
                ],
                "testAllWrongNonColumnLabels": [
                    "self"
                ],
                "testNonZeroLossWithPythonScalarWeight": [
                    "self"
                ],
                "testDeprecatedArgs": [
                    "self"
                ],
                "testNonZeroLossWithScalarTensorWeight": [
                    "self"
                ],
                "testNonZeroLossWithOneDimBatchSpecificWeights": [
                    "self"
                ],
                "testNonZeroLossWithColumnWeights": [
                    "self"
                ],
                "testAllWrongAllWeightsMissing": [
                    "self"
                ],
                "testSomeWeightsMissing": [
                    "self"
                ],
                "testMeasurementSpecificWeightsRaisesException": [
                    "self"
                ],
                "testInconsistentWeightSizeRaisesException": [
                    "self"
                ],
                "testInconsistentLabelSizeRaisesException": [
                    "self"
                ],
                "testInconsistentWeightShapeRaisesException": [
                    "self"
                ],
                "testInconsistentLabelShapeRaisesException": [
                    "self"
                ]
            },
            "SigmoidCrossEntropyLossTest": {
                "testAllCorrectSigmoid": [
                    "self"
                ],
                "testLossWithSingleDimPlaceholderForLogitsAndWeights1": [
                    "self"
                ],
                "testLossWithSingleDimPlaceholderForLogitsAndWeights2": [
                    "self"
                ],
                "testAllWrongSigmoid": [
                    "self"
                ],
                "testAllWrongSigmoidWithMeasurementSpecificWeights": [
                    "self"
                ],
                "testMultiCorrectSigmoid": [
                    "self"
                ],
                "testSigmoidLabelSmoothingCorrect": [
                    "self"
                ],
                "testSigmoidLabelSmoothingEqualsSoftmaxTwoLabel": [
                    "self"
                ]
            },
            "LogLossTest": {
                "setUp": [
                    "self"
                ],
                "testValueErrorThrownWhenWeightIsNone": [
                    "self"
                ],
                "testAllCorrectNoLossWeight": [
                    "self"
                ],
                "testAllCorrectNoLossWeightWithPlaceholder": [
                    "self"
                ],
                "testNonZeroLoss": [
                    "self"
                ],
                "testNonZeroLossWithPythonScalarWeight": [
                    "self"
                ],
                "testDeprecatedArgs": [
                    "self"
                ],
                "testNonZeroLossWithScalarTensorWeight": [
                    "self"
                ],
                "testNonZeroLossWithScalarTensorWeightAndPlaceholder": [
                    "self"
                ],
                "testNonZeroLossWithScalarTensorWeightAndPlaceholderWithRankOnly": [
                    "self"
                ],
                "testNonZeroLossWithOneDimBatchSpecificWeights": [
                    "self"
                ],
                "testNonZeroLossWithOneDimBatchSpecificWeightsSomeZero": [
                    "self"
                ],
                "testNonZeroLossWithTwoDimBatchSpecificWeightsSomeZero": [
                    "self"
                ],
                "testWeightsWithSameNumDimsButWrongShapeThrowsException": [
                    "self"
                ],
                "testNonZeroLossWithMeasurementSpecificWeights": [
                    "self"
                ],
                "testNonZeroLossWithMeasurementSpecificWeightsWithPlaceholder": [
                    "self"
                ],
                "testNonZeroLossWithSampleSpecificWeightsMostZero": [
                    "self"
                ],
                "testNonZeroLossWithSampleSpecificWeightsMostZeroWithPlaceholder": [
                    "self"
                ],
                "testLossWithSampleSpecificWeightsAllZero": [
                    "self"
                ]
            },
            "HingeLossTest": {
                "testIncompatibleShapes": [
                    "self"
                ],
                "testAllOutsideMargin": [
                    "self"
                ],
                "testSomeInsideMargin": [
                    "self"
                ],
                "testSomeMisclassified": [
                    "self"
                ]
            },
            "MeanSquaredErrorTest": {
                "setUp": [
                    "self"
                ],
                "testValueErrorThrownWhenWeightIsNone": [
                    "self"
                ],
                "testAllCorrectNoLossWeight": [
                    "self"
                ],
                "testNonZeroLoss": [
                    "self"
                ],
                "testNonZeroLossWithPythonScalarWeight": [
                    "self"
                ],
                "testNonZeroLossWithScalarTensorWeight": [
                    "self"
                ],
                "testDeprecatedArgs": [
                    "self"
                ],
                "testNonZeroLossWithOneDimBatchSpecificWeights": [
                    "self"
                ],
                "testNonZeroLossWithTwoDimBatchSpecificWeights": [
                    "self"
                ],
                "testNonZeroLossWithSampleSpecificWeights": [
                    "self"
                ],
                "testNonZeroLossWithSampleSpecificWeightsMostZero": [
                    "self"
                ],
                "testLossWithSampleSpecificWeightsAllZero": [
                    "self"
                ]
            },
            "MeanPairwiseSquaresErrorTest": {
                "setUp": [
                    "self"
                ],
                "testValueErrorThrownWhenWeightIsNone": [
                    "self"
                ],
                "testAllCorrectNoLossWeight": [
                    "self"
                ],
                "testNonZeroLoss": [
                    "self"
                ],
                "testGradientWithZeroWeight": [
                    "self"
                ],
                "testNonZeroLossWithPythonScalarWeight": [
                    "self"
                ],
                "testNonZeroLossWithScalarTensorWeight": [
                    "self"
                ],
                "testNonZeroLossWithScalarZeroWeight": [
                    "self"
                ],
                "testNonZeroLossWithScalarTensorWeightWithPlaceholder": [
                    "self"
                ],
                "testDeprecatedArgs": [
                    "self"
                ],
                "testNonZeroLossWithOneDimBatchSpecificWeights": [
                    "self"
                ],
                "testZeroLossWithOneDimBatchZeroWeights": [
                    "self"
                ],
                "testNonZeroLossWithOneDimBatchSpecificWeightsAndPlaceholders": [
                    "self"
                ],
                "testLossWithAllZeroBatchSpecificWeights": [
                    "self"
                ]
            },
            "CosineDistanceLossTest": {
                "setUp": [
                    "self"
                ],
                "testValueErrorThrownWhenWeightIsNone": [
                    "self"
                ],
                "testAllCorrectNoWeights": [
                    "self"
                ],
                "testPartiallyCorrectWithIntegerValues": [
                    "self"
                ],
                "testPartiallyCorrectFloatingPointValues": [
                    "self"
                ],
                "testSampleSpecificWeights": [
                    "self"
                ],
                "testMeasurementSpecificWeights": [
                    "self"
                ],
                "testValueErrorThrownWithShapelessPlaceholder": [
                    "self"
                ],
                "testMeasurementSpecificWeightsWithPlaceholderWithShape": [
                    "self"
                ],
                "testZeroLossWhenAllSampleSpecificWeightsAreZero": [
                    "self"
                ],
                "testZeroLossWhenAllMeasurementSpecificWeightsAreZero": [
                    "self"
                ]
            },
            "ComputeWeightedLossTest": {
                "testDeprecatedArgs": [
                    "self"
                ],
                "testHingeLoss": [
                    "self"
                ]
            },
            "AddLossTest": {
                "testAddExternalLoss": [
                    "self"
                ],
                "testNoneLossCollection": [
                    "self"
                ],
                "testNoCollectLosses": [
                    "self"
                ],
                "testNoCollectLossesBatch2": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.losses.python.losses": {},
        "tensorflow.contrib.losses.python.losses.loss_ops": {
            "_labels": [
                "labels",
                "targets"
            ],
            "_weights": [
                "weights",
                "weight"
            ],
            "_scale_losses": [
                "losses",
                "weights"
            ],
            "_safe_div": [
                "numerator",
                "denominator",
                "name"
            ],
            "_safe_mean": [
                "losses",
                "num_present"
            ],
            "compute_weighted_loss": [
                "losses",
                "weights",
                "weight"
            ],
            "_num_present": [
                "losses",
                "weights",
                "per_batch"
            ],
            "add_loss": [
                "loss",
                "loss_collection"
            ],
            "get_losses": [
                "scope",
                "loss_collection"
            ],
            "get_regularization_losses": [
                "scope"
            ],
            "get_total_loss": [
                "add_regularization_losses",
                "name"
            ],
            "absolute_difference": [
                "predictions",
                "labels",
                "weights",
                "scope",
                "targets",
                "weight"
            ],
            "sigmoid_cross_entropy": [
                "logits",
                "multi_class_labels",
                "weights",
                "label_smoothing",
                "scope",
                "weight"
            ],
            "softmax_cross_entropy": [
                "logits",
                "onehot_labels",
                "weights",
                "label_smoothing",
                "scope",
                "weight"
            ],
            "sparse_softmax_cross_entropy": [
                "logits",
                "labels",
                "weights",
                "scope",
                "weight"
            ],
            "log_loss": [
                "predictions",
                "labels",
                "weights",
                "epsilon",
                "scope",
                "targets",
                "weight"
            ],
            "hinge_loss": [
                "logits",
                "labels",
                "scope",
                "target"
            ],
            "mean_squared_error": [
                "predictions",
                "labels",
                "weights",
                "scope",
                "targets",
                "weight"
            ],
            "mean_pairwise_squared_error": [
                "predictions",
                "labels",
                "weights",
                "scope",
                "targets",
                "weight"
            ],
            "cosine_distance": [
                "predictions",
                "labels",
                "dim",
                "weights",
                "scope",
                "targets",
                "weight"
            ]
        },
        "tensorflow.contrib.grid_rnn": {},
        "tensorflow.contrib.grid_rnn.python": {},
        "tensorflow.contrib.grid_rnn.python.ops": {},
        "tensorflow.contrib.grid_rnn.python.ops.grid_rnn_cell": {
            "_parse_rnn_config": [
                "num_dims",
                "ls_input_dims",
                "ls_output_dims",
                "ls_priority_dims",
                "ls_non_recurrent_dims",
                "non_recurrent_fn",
                "tied",
                "num_units"
            ],
            "_propagate": [
                "dim_indices",
                "conf",
                "cell",
                "c_prev",
                "m_prev",
                "new_output",
                "new_state",
                "first_call"
            ],
            "GridRNNCell": {
                "__init__": [
                    "self",
                    "num_units",
                    "num_dims",
                    "input_dims",
                    "output_dims",
                    "priority_dims",
                    "non_recurrent_dims",
                    "tied",
                    "cell_fn",
                    "non_recurrent_fn"
                ],
                "input_size": [
                    "self"
                ],
                "output_size": [
                    "self"
                ],
                "state_size": [
                    "self"
                ],
                "__call__": [
                    "self",
                    "inputs",
                    "state",
                    "scope"
                ]
            },
            "Grid1BasicRNNCell": {
                "__init__": [
                    "self",
                    "num_units"
                ]
            },
            "Grid2BasicRNNCell": {
                "__init__": [
                    "self",
                    "num_units",
                    "tied",
                    "non_recurrent_fn"
                ]
            },
            "Grid1BasicLSTMCell": {
                "__init__": [
                    "self",
                    "num_units",
                    "forget_bias"
                ]
            },
            "Grid2BasicLSTMCell": {
                "__init__": [
                    "self",
                    "num_units",
                    "tied",
                    "non_recurrent_fn",
                    "forget_bias"
                ]
            },
            "Grid1LSTMCell": {
                "__init__": [
                    "self",
                    "num_units",
                    "use_peepholes",
                    "forget_bias"
                ]
            },
            "Grid2LSTMCell": {
                "__init__": [
                    "self",
                    "num_units",
                    "tied",
                    "non_recurrent_fn",
                    "use_peepholes",
                    "forget_bias"
                ]
            },
            "Grid3LSTMCell": {
                "__init__": [
                    "self",
                    "num_units",
                    "tied",
                    "non_recurrent_fn",
                    "use_peepholes",
                    "forget_bias"
                ]
            },
            "Grid2GRUCell": {
                "__init__": [
                    "self",
                    "num_units",
                    "tied",
                    "non_recurrent_fn"
                ]
            }
        },
        "tensorflow.contrib.grid_rnn.python.kernel_tests.grid_rnn_test": {
            "GridRNNCellTest": {
                "testGrid2BasicLSTMCell": [
                    "self"
                ],
                "testGrid2BasicLSTMCellTied": [
                    "self"
                ],
                "testGrid2BasicLSTMCellWithRelu": [
                    "self"
                ],
                "testGrid2LSTMCell": [
                    "self"
                ],
                "testGrid2LSTMCellTied": [
                    "self"
                ],
                "testGrid2LSTMCellWithRelu": [
                    "self"
                ],
                "testGrid2BasicRNNCell": [
                    "self"
                ],
                "testGrid2BasicRNNCellTied": [
                    "self"
                ],
                "testGrid2BasicRNNCellWithRelu": [
                    "self"
                ],
                "testGrid1LSTMCell": [
                    "self"
                ],
                "testGrid3LSTMCell": [
                    "self"
                ],
                "testGridRNNEdgeCasesLikeRelu": [
                    "self"
                ],
                "testGridRNNEdgeCasesNoOutput": [
                    "self"
                ],
                "testGrid2LSTMCellWithRNN": [
                    "self"
                ],
                "testGrid2LSTMCellReLUWithRNN": [
                    "self"
                ],
                "testGrid3LSTMCellReLUWithRNN": [
                    "self"
                ],
                "testGrid1LSTMCellWithRNN": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.grid_rnn.python.kernel_tests": {},
        "tensorflow.contrib.training": {},
        "tensorflow.contrib.training.python": {},
        "tensorflow.contrib.training.python.training.resample_test": {
            "ResampleTest": {
                "testRoundtrip": [
                    "self",
                    "rate",
                    "count",
                    "n"
                ],
                "testCorrectRates": [
                    "self",
                    "rate",
                    "count",
                    "n",
                    "rtol"
                ],
                "testZeroRateUnknownShapes": [
                    "self",
                    "count"
                ],
                "get_weights": [
                    "self",
                    "n",
                    "mean",
                    "stddev"
                ],
                "get_values": [
                    "self",
                    "n"
                ],
                "assert_expected": [
                    "self",
                    "weights",
                    "overall_rate",
                    "counts",
                    "n",
                    "tol",
                    "abs_delta"
                ]
            }
        },
        "tensorflow.contrib.training.python.training.device_setter_test": {
            "GreedyLoadBalancingStrategyTest": {
                "testUniformLoadEqualsRoundRobin": [
                    "self"
                ],
                "testByteSizeLoadFn": [
                    "self"
                ],
                "testByteSizeLoadFnWithScalar": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.training.python.training.training": {
            "add_gradients_summaries": [
                "grads_and_vars"
            ],
            "clip_gradient_norms": [
                "gradients_to_variables",
                "max_norm"
            ],
            "multiply_gradients": [
                "grads_and_vars",
                "gradient_multipliers"
            ],
            "create_train_op": [
                "total_loss",
                "optimizer",
                "global_step",
                "update_ops",
                "variables_to_train",
                "transform_grads_fn",
                "summarize_gradients",
                "gate_gradients",
                "aggregation_method",
                "colocate_gradients_with_ops"
            ],
            "train": [
                "train_op",
                "logdir",
                "master",
                "is_chief",
                "scaffold",
                "hooks",
                "chief_only_hooks",
                "save_checkpoint_secs",
                "save_summaries_steps",
                "config"
            ]
        },
        "tensorflow.contrib.training.python.training.resample": {
            "resample_at_rate": [
                "inputs",
                "rates",
                "scope",
                "seed",
                "back_prop"
            ],
            "weighted_resample": [
                "inputs",
                "weights",
                "overall_rate",
                "scope",
                "mean_decay",
                "warmup",
                "seed"
            ]
        },
        "tensorflow.contrib.training.python.training.failure_tolerator": {
            "FailureTolerator": {
                "__init__": [
                    "self",
                    "limit",
                    "init_delay",
                    "backoff_factor",
                    "forgive_after_seconds",
                    "handled_exceptions"
                ],
                "_adjusted_now": [
                    "self"
                ],
                "_forgive_old": [
                    "self"
                ],
                "_handle_error": [
                    "self",
                    "e"
                ],
                "forgive": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.training.python.training.feeder_test": {
            "FeederThread": {
                "__init__": [
                    "self",
                    "test_case",
                    "coord",
                    "servers",
                    "job",
                    "task_num",
                    "prefix"
                ],
                "_get_feed_values": [
                    "self"
                ],
                "add_remote_device": [
                    "self",
                    "dev"
                ],
                "start": [
                    "self"
                ],
                "join": [
                    "self"
                ],
                "_session": [
                    "self"
                ],
                "_feed_thread": [
                    "self"
                ]
            },
            "FeederTest": {
                "_create_local_cluster": [
                    "self"
                ],
                "testFeederActsLikeQueue": [
                    "self"
                ],
                "testFeederSeparateThread": [
                    "self"
                ],
                "testOneEachFeeding": [
                    "self"
                ],
                "testMultipleProducersAndConsumers": [
                    "self"
                ],
                "testAddRemoteReplicas": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.training.python.training.evaluation": {
            "wait_for_new_checkpoint": [
                "checkpoint_dir",
                "last_checkpoint",
                "seconds_to_sleep",
                "timeout"
            ],
            "checkpoints_iterator": [
                "checkpoint_dir",
                "min_interval_secs",
                "timeout"
            ],
            "get_or_create_eval_step": [],
            "_scaffold_with_init": [
                "scaffold",
                "saver",
                "checkpoint_path"
            ],
            "evaluate_once": [
                "checkpoint_path",
                "master",
                "scaffold",
                "eval_ops",
                "feed_dict",
                "final_ops",
                "final_ops_feed_dict",
                "variables_to_restore",
                "hooks",
                "config"
            ],
            "evaluate_repeatedly": [
                "checkpoint_dir",
                "master",
                "scaffold",
                "eval_ops",
                "feed_dict",
                "final_ops",
                "final_ops_feed_dict",
                "variables_to_restore",
                "eval_interval_secs",
                "hooks",
                "config",
                "max_number_of_evaluations",
                "timeout"
            ],
            "StopAfterNEvalsHook": {
                "__init__": [
                    "self",
                    "num_evals"
                ],
                "begin": [
                    "self"
                ],
                "before_run": [
                    "self",
                    "run_context"
                ],
                "after_run": [
                    "self",
                    "run_context",
                    "run_values"
                ]
            },
            "_FinalOpsHook": {
                "__init__": [
                    "self",
                    "final_ops",
                    "final_ops_feed_dict"
                ],
                "final_ops_values": [
                    "self"
                ],
                "end": [
                    "self",
                    "session"
                ]
            },
            "SummaryAtEndHook": {
                "__init__": [
                    "self",
                    "log_dir",
                    "summary_op",
                    "feed_dict"
                ],
                "begin": [
                    "self"
                ],
                "end": [
                    "self",
                    "session"
                ]
            }
        },
        "tensorflow.contrib.training.python.training.bucket_ops_test": {
            "_which_bucket": [
                "bucket_edges",
                "v"
            ],
            "BucketTest": {
                "setUp": [
                    "self"
                ],
                "enqueue_inputs": [
                    "self",
                    "sess",
                    "feed_dict"
                ],
                "start_queue_runners": [
                    "self",
                    "sess"
                ],
                "tearDown": [
                    "self"
                ],
                "testSingleBucket": [
                    "self"
                ],
                "testEvenOddBuckets": [
                    "self"
                ],
                "testEvenOddBucketsFilterOutAllOdd": [
                    "self"
                ]
            },
            "BucketBySequenceLengthTest": {
                "_testBucketBySequenceLength": [
                    "self",
                    "allow_small_batch"
                ],
                "testBucketBySequenceLength": [
                    "self"
                ],
                "testBucketBySequenceLengthAllow": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.training.python.training.feeder": {
            "_link_coordinators": [
                "inner_coord",
                "outer_coord",
                "start",
                "wait_time"
            ],
            "Feeder": {
                "__init__": [
                    "self",
                    "dtypes",
                    "shapes",
                    "capacity",
                    "shared_name"
                ],
                "get_fed_tensors": [
                    "self"
                ],
                "get_many_fed_tensors": [
                    "self",
                    "batch_size"
                ],
                "set_fed_tensors": [
                    "self",
                    "tensors"
                ],
                "set_many_fed_tensors": [
                    "self",
                    "tensors"
                ],
                "add_remote_device": [
                    "self",
                    "remote_device"
                ],
                "add_remote_devices": [
                    "self",
                    "devices"
                ],
                "add_remote_replicas": [
                    "self",
                    "job_name",
                    "replica_count",
                    "feeder_task_num",
                    "replicas_per_feeder",
                    "base_device_spec"
                ],
                "run_feeding_forever": [
                    "self",
                    "sess_callback",
                    "outer_coordinator",
                    "tolerator",
                    "start_queue_runners"
                ],
                "wait_until_feeding": [
                    "self",
                    "timeout"
                ],
                "_feed_remote_queues_forever": [
                    "self",
                    "sess_callback",
                    "outer_coordinator",
                    "tolerator"
                ],
                "_add_remote_queue_runner": [
                    "self",
                    "queue",
                    "enq_ops"
                ]
            }
        },
        "tensorflow.contrib.training.python.training.batch_sequences_with_states_test": {
            "BatchSequencesWithStatesTest": {
                "setUp": [
                    "self"
                ],
                "_prefix": [
                    "self",
                    "key_value"
                ],
                "_testBasics": [
                    "self",
                    "num_unroll",
                    "length",
                    "pad",
                    "expected_seq1_batch1",
                    "expected_seq2_batch1",
                    "expected_seq1_batch2",
                    "expected_seq2_batch2"
                ],
                "testBasicPadding": [
                    "self"
                ],
                "testBasics": [
                    "self"
                ],
                "testNotAMultiple": [
                    "self"
                ],
                "testAdvancedPadding": [
                    "self"
                ]
            },
            "PaddingTest": {
                "testPaddingInvalidLengths": [
                    "self"
                ],
                "testPadding": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.training.python.training.sequence_queueing_state_saver_test": {
            "SequenceQueueingStateSaverTest": {
                "testSequenceInputWrapper": [
                    "self"
                ],
                "testStateSaverWithTwoSimpleSteps": [
                    "self"
                ],
                "testStateSaverFailsIfPaddedLengthIsNotMultipleOfNumUnroll": [
                    "self"
                ],
                "testStateSaverFailsIfInconsistentPaddedLength": [
                    "self"
                ],
                "testStateSaverFailsIfInconsistentWriteState": [
                    "self"
                ],
                "testStateSaverWithManyInputsReadWriteThread": [
                    "self"
                ],
                "testStateSaverProcessesExamplesInOrder": [
                    "self"
                ],
                "testStateSaverCanHandleVariableBatchsize": [
                    "self"
                ],
                "testStateSaverScopeNames": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.training.python.training.training_test": {
            "logistic_classifier": [
                "inputs"
            ],
            "batchnorm_classifier": [
                "inputs"
            ],
            "CreateTrainOpTest": {
                "setUp": [
                    "self"
                ],
                "testUseUpdateOps": [
                    "self"
                ],
                "testEmptyUpdateOps": [
                    "self"
                ]
            },
            "TrainBNClassifierTest": {
                "setUp": [
                    "self"
                ],
                "testTrainWithNoInitAssignCanAchieveZeroLoss": [
                    "self"
                ]
            },
            "TrainTest": {
                "setUp": [
                    "self"
                ],
                "testCanAchieveZeroLoss": [
                    "self"
                ],
                "testTrainWithLocalVariable": [
                    "self"
                ],
                "testResumeTrainAchievesRoughlyTheSameLoss": [
                    "self"
                ],
                "create_train_op": [
                    "self",
                    "learning_rate",
                    "gradient_multiplier"
                ],
                "testTrainWithInitFromCheckpoint": [
                    "self"
                ],
                "ModelLoss": [
                    "self"
                ],
                "testTrainAllVarsHasLowerLossThanTrainSubsetOfVars": [
                    "self"
                ],
                "testTrainingSubsetsOfVariablesOnlyUpdatesThoseVariables": [
                    "self"
                ],
                "testTrainWithAlteredGradients": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.training.python.training": {},
        "tensorflow.contrib.training.python.training.device_setter": {
            "byte_size_load_fn": [
                "op"
            ],
            "GreedyLoadBalancingStrategy": {
                "__init__": [
                    "self",
                    "num_tasks",
                    "load_fn"
                ],
                "__call__": [
                    "self",
                    "op"
                ]
            }
        },
        "tensorflow.contrib.training.python.training.sampling_ops": {
            "rejection_sample": [
                "tensors",
                "accept_prob_fn",
                "batch_size",
                "queue_threads",
                "enqueue_many",
                "prebatch_capacity",
                "prebatch_threads",
                "runtime_checks",
                "name"
            ],
            "stratified_sample": [
                "tensors",
                "labels",
                "target_probs",
                "batch_size",
                "init_probs",
                "enqueue_many",
                "queue_capacity",
                "threads_per_queue",
                "name"
            ],
            "_estimate_data_distribution": [
                "labels",
                "num_classes",
                "smoothing_constant"
            ],
            "_verify_data_inputs": [
                "tensor_list"
            ],
            "_verify_input": [
                "tensor_list",
                "labels",
                "probs_list"
            ],
            "_calculate_acceptance_probabilities": [
                "init_probs",
                "target_probs"
            ],
            "_conditional_batch": [
                "tensors",
                "keep_input",
                "batch_size",
                "num_threads"
            ]
        },
        "tensorflow.contrib.training.python.training.failure_tolerator_test": {
            "ForgiveMe": {},
            "Unforgivable": {},
            "FailureToleratorTest": {
                "testHandledExceptions": [
                    "self"
                ],
                "testLimit": [
                    "self"
                ],
                "testDelaysExponentially": [
                    "self"
                ],
                "testForgivesSuccessfully": [
                    "self"
                ],
                "testForgivesDoesNotCountDelays": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.training.python.training.sequence_queueing_state_saver": {
            "_check_multiple_of": [
                "value",
                "multiple_of"
            ],
            "_check_rank": [
                "value",
                "expected_rank"
            ],
            "_check_shape": [
                "value",
                "expected_shape"
            ],
            "_check_dimensions": [
                "value",
                "dimensions",
                "expected_sizes",
                "debug_prefix"
            ],
            "_prepare_sequence_inputs": [
                "inputs",
                "states"
            ],
            "batch_sequences_with_states": [
                "input_key",
                "input_sequences",
                "input_context",
                "input_length",
                "initial_states",
                "num_unroll",
                "batch_size",
                "num_threads",
                "capacity",
                "allow_small_batch",
                "pad",
                "name"
            ],
            "_padding": [
                "sequences",
                "num_unroll"
            ],
            "_SequenceInputWrapper": {
                "__init__": [
                    "self",
                    "length",
                    "key",
                    "sequences",
                    "context"
                ],
                "length": [
                    "self"
                ],
                "key": [
                    "self"
                ],
                "sequences": [
                    "self"
                ],
                "context": [
                    "self"
                ]
            },
            "NextQueuedSequenceBatch": {
                "__init__": [
                    "self",
                    "state_saver"
                ],
                "total_length": [
                    "self"
                ],
                "length": [
                    "self"
                ],
                "batch_size": [
                    "self"
                ],
                "insertion_index": [
                    "self"
                ],
                "key": [
                    "self"
                ],
                "next_key": [
                    "self"
                ],
                "sequence": [
                    "self"
                ],
                "sequence_count": [
                    "self"
                ],
                "context": [
                    "self"
                ],
                "sequences": [
                    "self"
                ],
                "state": [
                    "self",
                    "state_name"
                ],
                "save_state": [
                    "self",
                    "state_name",
                    "value",
                    "name"
                ]
            },
            "SequenceQueueingStateSaver": {
                "__init__": [
                    "self",
                    "batch_size",
                    "num_unroll",
                    "input_length",
                    "input_key",
                    "input_sequences",
                    "input_context",
                    "initial_states",
                    "capacity",
                    "allow_small_batch",
                    "name"
                ],
                "name": [
                    "self"
                ],
                "barrier": [
                    "self"
                ],
                "batch_size": [
                    "self"
                ],
                "num_unroll": [
                    "self"
                ],
                "prefetch_op": [
                    "self"
                ],
                "next_batch": [
                    "self"
                ],
                "close": [
                    "self",
                    "cancel_pending_enqueues",
                    "name"
                ],
                "_store_index_maps": [
                    "self",
                    "sequences",
                    "context",
                    "states"
                ],
                "_get_barrier_length_index": [
                    "self"
                ],
                "_get_barrier_total_length_index": [
                    "self"
                ],
                "_get_barrier_next_key_index": [
                    "self"
                ],
                "_get_barrier_sequence_index": [
                    "self"
                ],
                "_get_barrier_sequence_count_index": [
                    "self"
                ],
                "_get_barrier_index": [
                    "self",
                    "index_type",
                    "name"
                ],
                "_create_barrier": [
                    "self"
                ],
                "_create_prefetch_op": [
                    "self"
                ],
                "_prepare_barrier_reads": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.training.python.training.sampling_ops_threading_test": {
            "SamplingOpsThreadingTest": {
                "testMultiThreadedEstimateDataDistribution": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.training.python.training.sampling_ops_test": {
            "StratifiedSampleTest": {
                "testGraphBuildAssertionFailures": [
                    "self"
                ],
                "testRuntimeAssertionFailures": [
                    "self"
                ],
                "testCanBeCalledMultipleTimes": [
                    "self"
                ],
                "testRejectionBatchingBehavior": [
                    "self"
                ],
                "testBatchDimensionNotRequired": [
                    "self"
                ],
                "testRejectionDataListInput": [
                    "self"
                ],
                "normalBehaviorHelper": [
                    "self",
                    "sampler"
                ],
                "testRejectionNormalBehavior": [
                    "self"
                ],
                "testRejectionNormalBehaviorWithOnlineInitPEstimate": [
                    "self"
                ]
            },
            "RejectionSampleTest": {
                "testGraphConstructionFailures": [
                    "self"
                ],
                "testRuntimeFailures": [
                    "self"
                ],
                "testNormalBehavior": [
                    "self"
                ]
            },
            "ConditionalBatchTest": {
                "testConditionallyEnqueueAndBatch": [
                    "self"
                ],
                "testConditionallyEnqueueAndBatchTypes": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.training.python.training.bucket_ops": {
            "_validate_bucket": [
                "tensor_list"
            ],
            "bucket": [
                "tensors",
                "which_bucket",
                "batch_size",
                "num_buckets",
                "num_threads",
                "capacity",
                "shapes",
                "dynamic_pad",
                "allow_smaller_final_batch",
                "keep_input",
                "shared_name",
                "name"
            ],
            "bucket_by_sequence_length": [
                "input_length",
                "tensors",
                "batch_size",
                "bucket_boundaries",
                "num_threads",
                "capacity",
                "shapes",
                "dynamic_pad",
                "allow_smaller_final_batch",
                "keep_input",
                "shared_name",
                "name"
            ]
        },
        "tensorflow.contrib.training.python.training.evaluation_test": {
            "logistic_classifier": [
                "inputs"
            ],
            "CheckpointIteratorTest": {
                "testReturnsEmptyIfNoCheckpointsFound": [
                    "self"
                ],
                "testReturnsSingleCheckpointIfOneCheckpointFound": [
                    "self"
                ],
                "testReturnsSingleCheckpointIfOneShardedCheckpoint": [
                    "self"
                ]
            },
            "WaitForNewCheckpointTest": {
                "testReturnsNoneAfterTimeout": [
                    "self"
                ]
            },
            "EvaluateOnceTest": {
                "setUp": [
                    "self"
                ],
                "_train_model": [
                    "self",
                    "checkpoint_dir",
                    "num_steps"
                ],
                "testEvaluatePerfectModel": [
                    "self"
                ],
                "testEvalOpAndFinalOp": [
                    "self"
                ],
                "testOnlyFinalOp": [
                    "self"
                ]
            },
            "EvaluateRepeatedlyTest": {
                "setUp": [
                    "self"
                ],
                "_train_model": [
                    "self",
                    "checkpoint_dir",
                    "num_steps"
                ],
                "testEvaluatePerfectModel": [
                    "self"
                ],
                "testEvaluationLoopTimeout": [
                    "self"
                ],
                "testEvaluateWithEvalFeedDict": [
                    "self"
                ],
                "_create_names_to_metrics": [
                    "self",
                    "predictions",
                    "labels"
                ],
                "_verify_summaries": [
                    "self",
                    "output_dir",
                    "names_to_values"
                ],
                "testSummariesAreFlushedToDisk": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.stat_summarizer": {},
        "tensorflow.contrib.bayesflow": {},
        "tensorflow.contrib.bayesflow.python": {},
        "tensorflow.contrib.bayesflow.python.ops.stochastic_gradient_estimators": {
            "score_function": [
                "stochastic_tensor",
                "value",
                "loss",
                "baseline",
                "name"
            ],
            "get_score_function_with_advantage": [
                "advantage_fn",
                "name"
            ],
            "get_score_function_with_constant_baseline": [
                "baseline",
                "name"
            ],
            "get_score_function_with_baseline": [
                "baseline_fn",
                "name"
            ],
            "get_mean_baseline": [
                "ema_decay",
                "name"
            ]
        },
        "tensorflow.contrib.bayesflow.python.ops.stochastic_variables": {
            "get_stochastic_variable": [
                "getter",
                "name",
                "shape",
                "dist_cls",
                "dist_kwargs",
                "param_initializers",
                "prior"
            ],
            "make_stochastic_variable_getter": [
                "dist_cls",
                "dist_kwargs",
                "param_initializers",
                "prior"
            ]
        },
        "tensorflow.contrib.bayesflow.python.ops.stochastic_graph": {
            "_upstream_stochastic_nodes": [
                "tensors"
            ],
            "_stochastic_dependencies_map": [
                "fixed_losses",
                "stochastic_tensors"
            ],
            "surrogate_loss": [
                "sample_losses",
                "stochastic_tensors",
                "name"
            ],
            "_add_n_or_sum": [
                "terms"
            ]
        },
        "tensorflow.contrib.bayesflow.python.ops.stochastic_tensor": {
            "value_type": [
                "dist_value_type"
            ],
            "get_current_value_type": [],
            "BaseStochasticTensor": {
                "__init__": [
                    "self"
                ],
                "name": [
                    "self"
                ],
                "dtype": [
                    "self"
                ],
                "graph": [
                    "self"
                ],
                "value": [
                    "self",
                    "name"
                ],
                "loss": [
                    "self",
                    "sample_loss"
                ],
                "_tensor_conversion_function": [
                    "v",
                    "dtype",
                    "name",
                    "as_ref"
                ]
            },
            "_StochasticValueType": {
                "pushed_above": [
                    "self",
                    "unused_value_type"
                ],
                "popped_above": [
                    "self",
                    "unused_value_type"
                ],
                "declare_inputs": [
                    "self",
                    "unused_stochastic_tensor",
                    "unused_inputs_dict"
                ],
                "stop_gradient": [
                    "self"
                ]
            },
            "MeanValue": {
                "__init__": [
                    "self",
                    "stop_gradient"
                ],
                "stop_gradient": [
                    "self"
                ]
            },
            "SampleValue": {
                "__init__": [
                    "self",
                    "shape",
                    "stop_gradient"
                ],
                "shape": [
                    "self"
                ],
                "stop_gradient": [
                    "self"
                ]
            },
            "NoValueTypeSetError": {},
            "StochasticTensor": {
                "__init__": [
                    "self",
                    "dist",
                    "name",
                    "dist_value_type",
                    "loss_fn"
                ],
                "value_type": [
                    "self"
                ],
                "distribution": [
                    "self"
                ],
                "_create_value": [
                    "self"
                ],
                "name": [
                    "self"
                ],
                "graph": [
                    "self"
                ],
                "dtype": [
                    "self"
                ],
                "entropy": [
                    "self",
                    "name"
                ],
                "mean": [
                    "self",
                    "name"
                ],
                "value": [
                    "self",
                    "name"
                ],
                "loss": [
                    "self",
                    "final_loss",
                    "name"
                ]
            },
            "ObservedStochasticTensor": {
                "__init__": [
                    "self",
                    "dist",
                    "value",
                    "name"
                ],
                "loss": [
                    "self",
                    "final_loss",
                    "name"
                ]
            }
        },
        "tensorflow.contrib.bayesflow.python.ops.entropy": {
            "elbo_ratio": [
                "log_p",
                "q",
                "z",
                "n",
                "seed",
                "form",
                "name"
            ],
            "entropy_shannon": [
                "p",
                "z",
                "n",
                "seed",
                "form",
                "name"
            ],
            "renyi_ratio": [
                "log_p",
                "q",
                "alpha",
                "z",
                "n",
                "seed",
                "name"
            ],
            "renyi_alpha": [
                "step",
                "decay_time",
                "alpha_min",
                "alpha_max",
                "name"
            ]
        },
        "tensorflow.contrib.bayesflow.python.ops.variational_inference": {
            "register_prior": [
                "variational",
                "prior"
            ],
            "elbo": [
                "log_likelihood",
                "variational_with_prior",
                "keep_batch_dim",
                "form",
                "name"
            ],
            "elbo_with_log_joint": [
                "log_joint",
                "variational",
                "keep_batch_dim",
                "form",
                "name"
            ],
            "_elbo": [
                "form",
                "log_likelihood",
                "log_joint",
                "variational_with_prior",
                "keep_batch_dim"
            ],
            "_find_variational_and_priors": [
                "model",
                "variational_with_prior",
                "require_prior"
            ],
            "_ELBOForm": {},
            "ELBOForms": {
                "check_form": [
                    "form"
                ]
            }
        },
        "tensorflow.contrib.bayesflow.python.ops": {},
        "tensorflow.contrib.bayesflow.python.ops.special_math": {
            "ndtr": [
                "x",
                "name"
            ],
            "_ndtr": [
                "x"
            ],
            "log_ndtr": [
                "x",
                "series_order",
                "name"
            ],
            "_log_ndtr_lower": [
                "x",
                "series_order"
            ],
            "_log_ndtr_asymptotic_series": [
                "x",
                "series_order"
            ],
            "_double_factorial": [
                "n"
            ]
        },
        "tensorflow.contrib.bayesflow.python.ops.monte_carlo": {
            "expectation_importance_sampler": [
                "f",
                "log_p",
                "sampling_dist_q",
                "z",
                "n",
                "seed",
                "name"
            ],
            "expectation_importance_sampler_logspace": [
                "log_f",
                "log_p",
                "sampling_dist_q",
                "z",
                "n",
                "seed",
                "name"
            ],
            "_logspace_mean": [
                "log_values"
            ],
            "expectation": [
                "f",
                "p",
                "z",
                "n",
                "seed",
                "name"
            ],
            "_sample_mean": [
                "values"
            ],
            "_sample_max": [
                "values"
            ],
            "_get_samples": [
                "dist",
                "z",
                "n",
                "seed"
            ]
        },
        "tensorflow.contrib.bayesflow.python.kernel_tests.entropy_test": {
            "get_train_op": [
                "scalar_loss",
                "optimizer",
                "learning_rate",
                "decay"
            ],
            "_assert_monotonic_decreasing": [
                "array",
                "atol"
            ],
            "_assert_monotonic_increasing": [
                "array",
                "atol"
            ],
            "NormalNoEntropy": {
                "entropy": [
                    "self"
                ]
            },
            "ElboRatioTest": {
                "setUp": [
                    "self"
                ],
                "test_convergence_to_kl_using_sample_form_on_3dim_normal": [
                    "self"
                ],
                "test_convergence_to_kl_using_analytic_entropy_form_on_3dim_normal": [
                    "self"
                ],
                "test_sample_kl_zero_when_p_and_q_are_the_same_distribution": [
                    "self"
                ]
            },
            "EntropyShannonTest": {
                "test_normal_entropy_default_form_uses_exact_entropy": [
                    "self"
                ],
                "test_normal_entropy_analytic_form_uses_exact_entropy": [
                    "self"
                ],
                "test_normal_entropy_sample_form_gets_approximate_answer": [
                    "self"
                ],
                "test_default_entropy_falls_back_on_sample_if_analytic_not_available": [
                    "self"
                ]
            },
            "RenyiRatioTest": {
                "setUp": [
                    "self"
                ],
                "test_fitting_two_dimensional_normal_n_equals_1000": [
                    "self"
                ],
                "test_divergence_between_identical_distributions_is_zero": [
                    "self"
                ]
            },
            "RenyiAlphaTest": {
                "test_with_three_alphas": [
                    "self"
                ],
                "test_non_scalar_input_raises": [
                    "self"
                ],
                "test_input_with_wrong_sign_raises": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.bayesflow.python.kernel_tests.variational_inference_test": {
            "inference_net": [
                "x",
                "latent_size"
            ],
            "generative_net": [
                "z",
                "data_size"
            ],
            "mini_vae": [],
            "NormalNoEntropy": {
                "entropy": [
                    "self"
                ]
            },
            "VariationalInferenceTest": {
                "testDefaultVariationalAndPrior": [
                    "self"
                ],
                "testExplicitVariationalAndPrior": [
                    "self"
                ],
                "testExplicitForms": [
                    "self"
                ],
                "testDefaultsSampleKLWithoutAnalyticKLOrEntropy": [
                    "self"
                ],
                "testElboWithLogJoint": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.bayesflow.python.kernel_tests.monte_carlo_test": {
            "ExpectationImportanceSampleTest": {
                "test_normal_integral_mean_and_var_correctly_estimated": [
                    "self"
                ],
                "test_multivariate_normal_prob_positive_product_of_components": [
                    "self"
                ]
            },
            "ExpectationImportanceSampleLogspaceTest": {
                "test_normal_distribution_second_moment_estimated_correctly": [
                    "self"
                ]
            },
            "ExpectationTest": {
                "test_mc_estimate_of_normal_mean_and_variance_is_correct_vs_analytic": [
                    "self"
                ]
            },
            "GetSamplesTest": {
                "test_raises_if_both_z_and_n_are_none": [
                    "self"
                ],
                "test_raises_if_both_z_and_n_are_not_none": [
                    "self"
                ],
                "test_returns_n_samples_if_n_provided": [
                    "self"
                ],
                "test_returns_z_if_z_provided": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.bayesflow.python.kernel_tests.special_math_test": {
            "_check_strictly_increasing": [
                "array_1d"
            ],
            "_make_grid": [
                "dtype",
                "grid_spec"
            ],
            "NdtrTest": {
                "_test_grid": [
                    "self",
                    "dtype",
                    "grid_spec",
                    "error_spec"
                ],
                "_test_grid_log": [
                    "self",
                    "dtype",
                    "grid_spec",
                    "error_spec"
                ],
                "_test_grid_no_log": [
                    "self",
                    "dtype",
                    "grid_spec",
                    "error_spec"
                ],
                "test_float32": [
                    "self"
                ],
                "test_float64": [
                    "self"
                ]
            },
            "LogNdtrTestLower": {},
            "LogNdtrTestMid": {},
            "LogNdtrTestUpper": {},
            "NdtrGradientTest": {
                "assert_all_true": [
                    "self",
                    "v"
                ],
                "assert_all_false": [
                    "self",
                    "v"
                ],
                "_test_grad_finite": [
                    "self",
                    "dtype"
                ],
                "_test_grad_accuracy": [
                    "self",
                    "dtype",
                    "grid_spec",
                    "error_spec"
                ],
                "test_float32": [
                    "self"
                ],
                "test_float64": [
                    "self"
                ]
            },
            "LogNdtrGradientTest": {}
        },
        "tensorflow.contrib.bayesflow.python.kernel_tests.stochastic_graph_test": {
            "NormalNotParam": {
                "is_reparameterized": [
                    "self"
                ]
            },
            "TestSurrogateLosses": {
                "testPathwiseDerivativeDoesNotAddSurrogateLosses": [
                    "self"
                ],
                "_testSurrogateLoss": [
                    "self",
                    "session",
                    "losses",
                    "expected_addl_terms",
                    "xs"
                ],
                "testSurrogateLoss": [
                    "self"
                ],
                "testNoSurrogateLoss": [
                    "self"
                ],
                "testExplicitStochasticTensors": [
                    "self"
                ]
            },
            "StochasticDependenciesMapTest": {
                "testBuildsMapOfUpstreamNodes": [
                    "self"
                ],
                "testHandlesStackedStochasticNodes": [
                    "self"
                ],
                "testTraversesControlInputs": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.bayesflow.python.kernel_tests.stochastic_gradient_estimators_test": {
            "StochasticGradientEstimatorsTest": {
                "setUp": [
                    "self"
                ],
                "_testScoreFunction": [
                    "self",
                    "loss_fn",
                    "expected"
                ],
                "testScoreFunction": [
                    "self"
                ],
                "testScoreFunctionWithConstantBaseline": [
                    "self"
                ],
                "testScoreFunctionWithBaselineFn": [
                    "self"
                ],
                "testScoreFunctionWithMeanBaseline": [
                    "self"
                ],
                "testScoreFunctionWithAdvantageFn": [
                    "self"
                ],
                "testScoreFunctionWithMeanBaselineHasUniqueVarScope": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.bayesflow.python.kernel_tests.stochastic_tensor_test": {
            "StochasticTensorTest": {
                "testConstructionAndValue": [
                    "self"
                ],
                "testMeanValue": [
                    "self"
                ],
                "testSampleValueScalar": [
                    "self"
                ],
                "testDistributionEntropy": [
                    "self"
                ],
                "testSurrogateLoss": [
                    "self"
                ]
            },
            "ValueTypeTest": {
                "testValueType": [
                    "self"
                ]
            },
            "ObservedStochasticTensorTest": {
                "testConstructionAndValue": [
                    "self"
                ],
                "testConstructionWithUnknownShapes": [
                    "self"
                ],
                "testConstructionErrors": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.bayesflow.python.kernel_tests.stochastic_variables_test": {
            "StochasticVariablesTest": {
                "testStochasticVariables": [
                    "self"
                ],
                "testStochasticVariablesWithConstantInitializer": [
                    "self"
                ],
                "testStochasticVariablesWithCallableInitializer": [
                    "self"
                ],
                "testStochasticVariablesWithPrior": [
                    "self"
                ],
                "testStochasticVariablesWithCallablePriorInitializer": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.bayesflow.python.kernel_tests": {},
        "tensorflow.contrib.bayesflow.examples": {},
        "tensorflow.contrib.bayesflow.examples.reinforce_simple.reinforce_simple_example": {
            "split_apply_merge": [
                "inp",
                "partitions",
                "fns"
            ],
            "plus_1": [
                "inputs"
            ],
            "minus_1": [
                "inputs"
            ],
            "build_split_apply_merge_model": [],
            "REINFORCESimpleExample": {
                "testSplitApplyMerge": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.bayesflow.examples.reinforce_simple": {},
        "tensorflow.contrib.ios_examples": {},
        "tensorflow.contrib.ios_examples.benchmark": {},
        "tensorflow.contrib.ios_examples.benchmark.data": {},
        "tensorflow.contrib.ios_examples.benchmark.benchmark.xcodeproj": {},
        "tensorflow.contrib.ios_examples.camera": {},
        "tensorflow.contrib.ios_examples.camera.data": {},
        "tensorflow.contrib.ios_examples.camera.en.lproj": {},
        "tensorflow.contrib.ios_examples.camera.camera_example.xcodeproj": {},
        "tensorflow.contrib.ios_examples.simple": {},
        "tensorflow.contrib.ios_examples.simple.data": {},
        "tensorflow.contrib.ios_examples.simple.tf_ios_makefile_example.xcodeproj": {},
        "tensorflow.contrib.util.loader": {
            "load_op_library": [
                "path"
            ]
        },
        "tensorflow.contrib.util": {},
        "tensorflow.contrib.rnn": {},
        "tensorflow.contrib.rnn.kernels": {},
        "tensorflow.contrib.rnn.python": {},
        "tensorflow.contrib.rnn.python.ops.rnn_cell": {
            "_get_concat_variable": [
                "name",
                "shape",
                "dtype",
                "num_shards"
            ],
            "_get_sharded_variable": [
                "name",
                "shape",
                "dtype",
                "num_shards"
            ],
            "CoupledInputForgetGateLSTMCell": {
                "__init__": [
                    "self",
                    "num_units",
                    "use_peepholes",
                    "initializer",
                    "num_proj",
                    "proj_clip",
                    "num_unit_shards",
                    "num_proj_shards",
                    "forget_bias",
                    "state_is_tuple",
                    "activation"
                ],
                "state_size": [
                    "self"
                ],
                "output_size": [
                    "self"
                ],
                "__call__": [
                    "self",
                    "inputs",
                    "state",
                    "scope"
                ]
            },
            "TimeFreqLSTMCell": {
                "__init__": [
                    "self",
                    "num_units",
                    "use_peepholes",
                    "cell_clip",
                    "initializer",
                    "num_unit_shards",
                    "forget_bias",
                    "feature_size",
                    "frequency_skip"
                ],
                "output_size": [
                    "self"
                ],
                "state_size": [
                    "self"
                ],
                "__call__": [
                    "self",
                    "inputs",
                    "state",
                    "scope"
                ],
                "_make_tf_features": [
                    "self",
                    "input_feat"
                ]
            },
            "GridLSTMCell": {
                "__init__": [
                    "self",
                    "num_units",
                    "use_peepholes",
                    "share_time_frequency_weights",
                    "cell_clip",
                    "initializer",
                    "num_unit_shards",
                    "forget_bias",
                    "feature_size",
                    "frequency_skip",
                    "num_frequency_blocks",
                    "start_freqindex_list",
                    "end_freqindex_list",
                    "couple_input_forget_gates",
                    "state_is_tuple"
                ],
                "output_size": [
                    "self"
                ],
                "state_size": [
                    "self"
                ],
                "state_tuple_type": [
                    "self"
                ],
                "__call__": [
                    "self",
                    "inputs",
                    "state",
                    "scope"
                ],
                "_compute": [
                    "self",
                    "freq_inputs",
                    "block",
                    "state",
                    "batch_size",
                    "state_prefix",
                    "state_is_tuple"
                ],
                "_make_tf_features": [
                    "self",
                    "input_feat",
                    "slice_offset"
                ]
            },
            "BidirectionalGridLSTMCell": {
                "__init__": [
                    "self",
                    "num_units",
                    "use_peepholes",
                    "share_time_frequency_weights",
                    "cell_clip",
                    "initializer",
                    "num_unit_shards",
                    "forget_bias",
                    "feature_size",
                    "frequency_skip",
                    "num_frequency_blocks",
                    "start_freqindex_list",
                    "end_freqindex_list",
                    "couple_input_forget_gates",
                    "backward_slice_offset"
                ],
                "__call__": [
                    "self",
                    "inputs",
                    "state",
                    "scope"
                ]
            },
            "AttentionCellWrapper": {
                "__init__": [
                    "self",
                    "cell",
                    "attn_length",
                    "attn_size",
                    "attn_vec_size",
                    "input_size",
                    "state_is_tuple"
                ],
                "state_size": [
                    "self"
                ],
                "output_size": [
                    "self"
                ],
                "__call__": [
                    "self",
                    "inputs",
                    "state",
                    "scope"
                ],
                "_attention": [
                    "self",
                    "query",
                    "attn_states"
                ]
            },
            "LayerNormBasicLSTMCell": {
                "__init__": [
                    "self",
                    "num_units",
                    "forget_bias",
                    "input_size",
                    "activation",
                    "layer_norm",
                    "norm_gain",
                    "norm_shift",
                    "dropout_keep_prob",
                    "dropout_prob_seed"
                ],
                "state_size": [
                    "self"
                ],
                "output_size": [
                    "self"
                ],
                "_norm": [
                    "self",
                    "inp",
                    "scope"
                ],
                "_linear": [
                    "self",
                    "args",
                    "scope"
                ],
                "__call__": [
                    "self",
                    "inputs",
                    "state",
                    "scope"
                ]
            }
        },
        "tensorflow.contrib.rnn.python.ops.lstm_ops": {
            "_lstm_block_cell": [
                "x",
                "cs_prev",
                "h_prev",
                "w",
                "b",
                "wci",
                "wcf",
                "wco",
                "forget_bias",
                "cell_clip",
                "use_peephole",
                "name"
            ],
            "_block_lstm": [
                "seq_len_max",
                "x",
                "w",
                "b",
                "cs_prev",
                "h_prev",
                "wci",
                "wcf",
                "wco",
                "forget_bias",
                "cell_clip",
                "use_peephole",
                "name"
            ],
            "_LSTMBlockCellGrad": [
                "op"
            ],
            "_BlockLSTMGrad": [
                "op"
            ],
            "LSTMBlockCell": {
                "__init__": [
                    "self",
                    "num_units",
                    "forget_bias",
                    "use_peephole",
                    "use_compatible_names"
                ],
                "state_size": [
                    "self"
                ],
                "output_size": [
                    "self"
                ],
                "__call__": [
                    "self",
                    "x",
                    "states_prev",
                    "scope"
                ]
            },
            "LSTMBlockWrapper": {
                "num_units": [
                    "self"
                ],
                "_call_cell": [
                    "self",
                    "inputs",
                    "initial_cell_state",
                    "initial_output",
                    "dtype",
                    "sequence_length"
                ],
                "__call__": [
                    "self",
                    "inputs",
                    "initial_state",
                    "dtype",
                    "sequence_length",
                    "scope"
                ],
                "_gather_states": [
                    "self",
                    "data",
                    "indices",
                    "batch_size"
                ]
            },
            "LSTMBlockFusedCell": {
                "__init__": [
                    "self",
                    "num_units",
                    "forget_bias",
                    "cell_clip",
                    "use_peephole"
                ],
                "num_units": [
                    "self"
                ],
                "_call_cell": [
                    "self",
                    "inputs",
                    "initial_cell_state",
                    "initial_output",
                    "dtype",
                    "sequence_length"
                ]
            }
        },
        "tensorflow.contrib.rnn.python.ops.gru_ops": {
            "_GRUBlockCellGrad": [
                "op"
            ],
            "GRUBlockCell": {
                "__init__": [
                    "self",
                    "cell_size"
                ],
                "state_size": [
                    "self"
                ],
                "output_size": [
                    "self"
                ],
                "__call__": [
                    "self",
                    "x",
                    "h_prev",
                    "scope"
                ]
            }
        },
        "tensorflow.contrib.rnn.python.ops.fused_rnn_cell": {
            "FusedRNNCell": {
                "__call__": [
                    "self",
                    "inputs",
                    "initial_state",
                    "dtype",
                    "sequence_length",
                    "scope"
                ]
            },
            "FusedRNNCellAdaptor": {
                "__init__": [
                    "self",
                    "cell",
                    "use_dynamic_rnn"
                ],
                "__call__": [
                    "self",
                    "inputs",
                    "initial_state",
                    "dtype",
                    "sequence_length",
                    "scope"
                ]
            },
            "TimeReversedFusedRNN": {
                "__init__": [
                    "self",
                    "cell"
                ],
                "_reverse": [
                    "self",
                    "t",
                    "lengths"
                ],
                "__call__": [
                    "self",
                    "inputs",
                    "initial_state",
                    "dtype",
                    "sequence_length",
                    "scope"
                ]
            }
        },
        "tensorflow.contrib.rnn.python.ops": {},
        "tensorflow.contrib.rnn.python.ops.rnn": {
            "stack_bidirectional_rnn": [
                "cells_fw",
                "cells_bw",
                "inputs",
                "initial_states_fw",
                "initial_states_bw",
                "dtype",
                "sequence_length",
                "scope"
            ],
            "stack_bidirectional_dynamic_rnn": [
                "cells_fw",
                "cells_bw",
                "inputs",
                "initial_states_fw",
                "initial_states_bw",
                "dtype",
                "sequence_length",
                "scope"
            ]
        },
        "tensorflow.contrib.rnn.python.kernel_tests.rnn_cell_test": {
            "RNNCellTest": {
                "testCoupledInputForgetGateLSTMCell": [
                    "self"
                ],
                "testTimeFreqLSTMCell": [
                    "self"
                ],
                "testGridLSTMCell": [
                    "self"
                ],
                "testGridLSTMCellWithFrequencyBlocks": [
                    "self"
                ],
                "testGridLstmCellWithCoupledInputForgetGates": [
                    "self"
                ],
                "testBidirectionGridLSTMCell": [
                    "self"
                ],
                "testBidirectionGridLSTMCellWithSliceOffset": [
                    "self"
                ],
                "testAttentionCellWrapperFailures": [
                    "self"
                ],
                "testAttentionCellWrapperZeros": [
                    "self"
                ],
                "testAttentionCellWrapperValues": [
                    "self"
                ],
                "testAttentionCellWrapperCorrectResult": [
                    "self"
                ]
            },
            "LayerNormBasicLSTMCellTest": {
                "testBasicLSTMCell": [
                    "self"
                ],
                "testBasicLSTMCellWithStateTuple": [
                    "self"
                ],
                "testBasicLSTMCellWithDropout": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.rnn.python.kernel_tests.fused_rnn_cell_test": {
            "FusedRnnCellTest": {
                "testBasicRNNFusedWrapper": [
                    "self"
                ],
                "testTimeReversedFusedRNN": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.rnn.python.kernel_tests.gru_ops_test": {
            "time_taken_by_op": [
                "op",
                "sess",
                "num_runs"
            ],
            "training_gru_block_vs_gru_cell": [
                "batch_size",
                "cell_size",
                "input_size",
                "time_steps",
                "use_gpu",
                "iters"
            ],
            "inference_gru_block_vs_gru_cell": [
                "batch_size",
                "cell_size",
                "input_size",
                "time_steps",
                "use_gpu",
                "iters"
            ],
            "single_bprop_step_gru_block_vs_gru_cell": [
                "batch_size",
                "cell_size",
                "input_size",
                "use_gpu",
                "iters"
            ],
            "GRUBlockCellTest": {
                "testNoneDimsWithDynamicRNN": [
                    "self"
                ],
                "testBlockGRUToGRUCellSingleStep": [
                    "self"
                ],
                "testBlockGRUToGRUCellMultiStep": [
                    "self"
                ],
                "testDerivativeOfBlockGRUToGRUCellSingleStep": [
                    "self"
                ],
                "testDerivativeOfBlockGRUToGRUCellMultiSteps": [
                    "self"
                ],
                "testGradient": [
                    "self"
                ]
            },
            "GRUBlockCellGpuTest": {},
            "BenchmarkGRUBlock": {
                "benchmarkTrainingBlockGRUVsGRUCell": [
                    "self"
                ],
                "benchmarkInferenceBlockGRUVsGRUCell": [
                    "self"
                ],
                "benchmarkSingleBpropStepBlockGRUVsGRUCell": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.rnn.python.kernel_tests.rnn_test": {
            "StackBidirectionalRNNTest": {
                "setUp": [
                    "self"
                ],
                "_createStackBidirectionalRNN": [
                    "self",
                    "use_gpu",
                    "use_shape",
                    "use_sequence_length",
                    "initial_states_fw",
                    "initial_states_bw",
                    "scope"
                ],
                "_testStackBidirectionalRNN": [
                    "self",
                    "use_gpu",
                    "use_shape"
                ],
                "_testStackBidirectionalRNNStates": [
                    "self",
                    "use_gpu"
                ],
                "testStackBidirectionalRNN": [
                    "self"
                ],
                "_createStackBidirectionalDynamicRNN": [
                    "self",
                    "use_gpu",
                    "use_shape",
                    "use_state_tuple",
                    "initial_states_fw",
                    "initial_states_bw",
                    "scope"
                ],
                "_testStackBidirectionalDynamicRNN": [
                    "self",
                    "use_gpu",
                    "use_shape",
                    "use_state_tuple"
                ],
                "_testStackBidirectionalDynamicRNNStates": [
                    "self",
                    "use_gpu"
                ],
                "testBidirectionalRNN": [
                    "self"
                ],
                "_testScope": [
                    "self",
                    "factory",
                    "prefix",
                    "use_outer_scope"
                ],
                "testStackBidirectionalRNNScope": [
                    "self"
                ],
                "testBidirectionalDynamicRNNScope": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.rnn.python.kernel_tests": {},
        "tensorflow.contrib.rnn.python.kernel_tests.lstm_ops_test": {
            "LSTMBlockCellTest": {
                "testNoneDimsWithDynamicRNN": [
                    "self"
                ],
                "testLSTMBlockCell": [
                    "self"
                ],
                "testCompatibleNames": [
                    "self"
                ],
                "testLSTMBasicToBlockCell": [
                    "self"
                ],
                "testLSTMBasicToBlockCellPeeping": [
                    "self"
                ],
                "testLSTMBasicToBlock": [
                    "self"
                ],
                "testLSTMBasicToBlockPeeping": [
                    "self"
                ],
                "testLSTMFusedSequenceLengths": [
                    "self"
                ]
            },
            "LSTMBlockCellGpuTest": {}
        },
        "tensorflow.contrib.rnn.ops": {},
        "tensorflow.contrib.graph_editor.reroute": {
            "_check_ts_compatibility": [
                "ts0",
                "ts1"
            ],
            "_reroute_t": [
                "t0",
                "t1",
                "consumers1",
                "can_modify",
                "cannot_modify"
            ],
            "_reroute_ts": [
                "ts0",
                "ts1",
                "mode",
                "can_modify",
                "cannot_modify"
            ],
            "swap_ts": [
                "ts0",
                "ts1",
                "can_modify",
                "cannot_modify"
            ],
            "reroute_a2b_ts": [
                "ts0",
                "ts1",
                "can_modify",
                "cannot_modify"
            ],
            "reroute_b2a_ts": [
                "ts0",
                "ts1",
                "can_modify",
                "cannot_modify"
            ],
            "_reroute_sgv_remap": [
                "sgv0",
                "sgv1",
                "mode"
            ],
            "_reroute_sgv_inputs": [
                "sgv0",
                "sgv1",
                "mode"
            ],
            "_reroute_sgv_outputs": [
                "sgv0",
                "sgv1",
                "mode"
            ],
            "_reroute_sgv": [
                "sgv0",
                "sgv1",
                "mode"
            ],
            "swap_inputs": [
                "sgv0",
                "sgv1"
            ],
            "reroute_a2b_inputs": [
                "sgv0",
                "sgv1"
            ],
            "reroute_b2a_inputs": [
                "sgv0",
                "sgv1"
            ],
            "swap_outputs": [
                "sgv0",
                "sgv1"
            ],
            "reroute_a2b_outputs": [
                "sgv0",
                "sgv1"
            ],
            "reroute_b2a_outputs": [
                "sgv0",
                "sgv1"
            ],
            "swap": [
                "sgv0",
                "sgv1"
            ],
            "reroute_a2b": [
                "sgv0",
                "sgv1"
            ],
            "reroute_b2a": [
                "sgv0",
                "sgv1"
            ],
            "remove_control_inputs": [
                "op",
                "cops"
            ],
            "add_control_inputs": [
                "op",
                "cops"
            ],
            "_RerouteMode": {
                "check": [
                    "cls",
                    "mode"
                ]
            }
        },
        "tensorflow.contrib.graph_editor.edit": {
            "detach_control_inputs": [
                "sgv"
            ],
            "detach_control_outputs": [
                "sgv",
                "control_outputs"
            ],
            "detach_inputs": [
                "sgv",
                "control_inputs"
            ],
            "detach_outputs": [
                "sgv",
                "control_outputs"
            ],
            "detach": [
                "sgv",
                "control_inputs",
                "control_outputs",
                "control_ios"
            ],
            "connect": [
                "sgv0",
                "sgv1",
                "disconnect_first"
            ],
            "bypass": [
                "sgv"
            ]
        },
        "tensorflow.contrib.graph_editor.util": {
            "concatenate_unique": [
                "la",
                "lb"
            ],
            "is_iterable": [
                "obj"
            ],
            "flatten_tree": [
                "tree",
                "leaves"
            ],
            "transform_tree": [
                "tree",
                "fn",
                "iterable_type"
            ],
            "check_graphs": [],
            "get_unique_graph": [
                "tops",
                "check_types",
                "none_if_empty"
            ],
            "make_list_of_op": [
                "ops",
                "check_graph",
                "allow_graph",
                "ignore_ts"
            ],
            "get_tensors": [
                "graph"
            ],
            "make_list_of_t": [
                "ts",
                "check_graph",
                "allow_graph",
                "ignore_ops"
            ],
            "get_generating_ops": [
                "ts"
            ],
            "get_consuming_ops": [
                "ts"
            ],
            "scope_finalize": [
                "scope"
            ],
            "scope_dirname": [
                "scope"
            ],
            "scope_basename": [
                "scope"
            ],
            "placeholder_name": [
                "t",
                "scope"
            ],
            "make_placeholder_from_tensor": [
                "t",
                "scope"
            ],
            "make_placeholder_from_dtype_and_shape": [
                "dtype",
                "shape",
                "scope"
            ],
            "ListView": {
                "__init__": [
                    "self",
                    "list_"
                ],
                "__iter__": [
                    "self"
                ],
                "__len__": [
                    "self"
                ],
                "__bool__": [
                    "self"
                ],
                "__getitem__": [
                    "self",
                    "i"
                ],
                "__add__": [
                    "self",
                    "other"
                ]
            },
            "ControlOutputs": {
                "__init__": [
                    "self",
                    "graph"
                ],
                "update": [
                    "self"
                ],
                "_build": [
                    "self"
                ],
                "get_all": [
                    "self"
                ],
                "get": [
                    "self",
                    "op"
                ],
                "graph": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.graph_editor.select": {
            "can_be_regex": [
                "obj"
            ],
            "make_regex": [
                "obj"
            ],
            "_get_input_ts": [
                "ops"
            ],
            "_get_output_ts": [
                "ops"
            ],
            "filter_ts": [
                "ops",
                "positive_filter"
            ],
            "filter_ts_from_regex": [
                "ops",
                "regex"
            ],
            "filter_ops": [
                "ops",
                "positive_filter"
            ],
            "filter_ops_from_regex": [
                "ops",
                "regex"
            ],
            "get_name_scope_ops": [
                "ops",
                "scope"
            ],
            "check_cios": [
                "control_inputs",
                "control_outputs",
                "control_ios"
            ],
            "get_ops_ios": [
                "ops",
                "control_inputs",
                "control_outputs",
                "control_ios"
            ],
            "compute_boundary_ts": [
                "ops",
                "ambiguous_ts_are_outputs"
            ],
            "get_within_boundary_ops": [
                "ops",
                "seed_ops",
                "boundary_ops",
                "inclusive",
                "control_inputs",
                "control_outputs",
                "control_ios"
            ],
            "get_forward_walk_ops": [
                "seed_ops",
                "inclusive",
                "within_ops",
                "stop_at_ts",
                "control_outputs"
            ],
            "get_backward_walk_ops": [
                "seed_ops",
                "inclusive",
                "within_ops",
                "stop_at_ts",
                "control_inputs"
            ],
            "get_walks_intersection_ops": [
                "forward_seed_ops",
                "backward_seed_ops",
                "forward_inclusive",
                "backward_inclusive",
                "within_ops",
                "control_inputs",
                "control_outputs",
                "control_ios"
            ],
            "get_walks_union_ops": [
                "forward_seed_ops",
                "backward_seed_ops",
                "forward_inclusive",
                "backward_inclusive",
                "within_ops",
                "control_inputs",
                "control_outputs",
                "control_ios"
            ],
            "select_ops": [],
            "select_ts": [],
            "select_ops_and_ts": []
        },
        "tensorflow.contrib.graph_editor": {},
        "tensorflow.contrib.graph_editor.subgraph": {
            "_check_within_range": [
                "mapping",
                "n",
                "repetition"
            ],
            "_check_graph": [
                "sgv",
                "graph"
            ],
            "make_view": [],
            "make_view_from_scope": [
                "scope",
                "graph"
            ],
            "SubGraphView": {
                "__init__": [
                    "self",
                    "inside_ops",
                    "passthrough_ts"
                ],
                "__copy__": [
                    "self"
                ],
                "_assign_from": [
                    "self",
                    "other"
                ],
                "copy": [
                    "self"
                ],
                "_remap_default": [
                    "self",
                    "remove_input_map",
                    "remove_output_map"
                ],
                "remap_default": [
                    "self",
                    "remove_input_map",
                    "remove_output_map"
                ],
                "_remap_inputs": [
                    "self",
                    "new_input_indices"
                ],
                "_remap_outputs": [
                    "self",
                    "new_output_indices"
                ],
                "_remap_outputs_make_unique": [
                    "self"
                ],
                "_remap_outputs_to_consumers": [
                    "self"
                ],
                "remap_outputs_make_unique": [
                    "self"
                ],
                "remap_outputs_to_consumers": [
                    "self"
                ],
                "_remove_unused_ops": [
                    "self",
                    "control_inputs"
                ],
                "remove_unused_ops": [
                    "self",
                    "control_inputs"
                ],
                "remap_inputs": [
                    "self",
                    "new_input_indices"
                ],
                "remap_outputs": [
                    "self",
                    "new_output_indices"
                ],
                "remap": [
                    "self",
                    "new_input_indices",
                    "new_output_indices"
                ],
                "find_op_by_name": [
                    "self",
                    "op_name"
                ],
                "__str__": [
                    "self"
                ],
                "graph": [
                    "self"
                ],
                "ops": [
                    "self"
                ],
                "inputs": [
                    "self"
                ],
                "connected_inputs": [
                    "self"
                ],
                "outputs": [
                    "self"
                ],
                "connected_outputs": [
                    "self"
                ],
                "passthroughs": [
                    "self"
                ],
                "__bool__": [
                    "self"
                ],
                "op": [
                    "self",
                    "op_id"
                ],
                "is_passthrough": [
                    "self",
                    "t"
                ],
                "__enter__": [
                    "self"
                ],
                "__exit__": [
                    "self",
                    "exc_type",
                    "exc_value",
                    "traceback"
                ],
                "input_index": [
                    "self",
                    "t"
                ],
                "output_index": [
                    "self",
                    "t"
                ],
                "consumers": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.graph_editor.match": {
            "_make_graph_match": [
                "graph_match"
            ],
            "op_type": [
                "op_types",
                "op"
            ],
            "OpMatcher": {
                "__init__": [
                    "self",
                    "positive_filter"
                ],
                "_finalize_positive_filter": [
                    "self",
                    "elem"
                ],
                "__call__": [
                    "self",
                    "op"
                ],
                "input_ops": [
                    "self"
                ],
                "control_input_ops": [
                    "self"
                ],
                "output_ops": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.graph_editor.transform": {
            "replace_t_with_placeholder_handler": [
                "info",
                "t"
            ],
            "keep_t_if_possible_handler": [
                "info",
                "t"
            ],
            "assign_renamed_collections_handler": [
                "info",
                "elem",
                "elem_"
            ],
            "transform_op_if_inside_handler": [
                "info",
                "op",
                "keep_if_possible"
            ],
            "copy_op_handler": [
                "info",
                "op",
                "copy_shape"
            ],
            "transform_op_in_place": [
                "info",
                "op",
                "detach_outputs"
            ],
            "copy": [
                "sgv",
                "dst_graph",
                "dst_scope",
                "src_scope",
                "reuse_dst_scope"
            ],
            "copy_with_input_replacements": [
                "sgv",
                "replacement_ts",
                "dst_graph",
                "dst_scope",
                "src_scope",
                "reuse_dst_scope"
            ],
            "graph_replace": [
                "target_ts",
                "replacement_ts",
                "dst_scope",
                "src_scope",
                "reuse_dst_scope"
            ],
            "Transformer": {
                "__init__": [
                    "self"
                ],
                "__call__": [
                    "self",
                    "sgv",
                    "dst_graph",
                    "dst_scope",
                    "src_scope",
                    "reuse_dst_scope"
                ],
                "_transform_sgv": [
                    "self",
                    "sgv"
                ],
                "_transform_t": [
                    "self",
                    "t"
                ],
                "_transform_op": [
                    "self",
                    "op"
                ],
                "new_name": [
                    "self",
                    "name"
                ]
            }
        },
        "tensorflow.contrib.graph_editor.tests.match_test": {
            "MatchTest": {
                "setUp": [
                    "self"
                ],
                "test_simple_match": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.graph_editor.tests.select_test": {
            "SelectTest": {
                "setUp": [
                    "self"
                ],
                "test_regex": [
                    "self"
                ],
                "test_get_input_output_ts": [
                    "self"
                ],
                "test_get_filter": [
                    "self"
                ],
                "test_get_ops_ios": [
                    "self"
                ],
                "test_compute_boundary_ts_0": [
                    "self"
                ],
                "test_compute_boundary_ts_1": [
                    "self"
                ],
                "test_get_within_boundary_ops_0": [
                    "self"
                ],
                "test_get_within_boundary_ops_1": [
                    "self"
                ],
                "test_get_walks_intersection": [
                    "self"
                ],
                "test_get_walks_union": [
                    "self"
                ],
                "test_select_ops": [
                    "self"
                ],
                "test_select_ts": [
                    "self"
                ],
                "test_select_ops_and_ts": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.graph_editor.tests.edit_test": {
            "EditTest": {
                "setUp": [
                    "self"
                ],
                "test_detach": [
                    "self"
                ],
                "test_connect": [
                    "self"
                ],
                "test_bypass": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.graph_editor.tests.subgraph_test": {
            "SubgraphTest": {
                "setUp": [
                    "self"
                ],
                "test_subgraph": [
                    "self"
                ],
                "test_subgraph_remap": [
                    "self"
                ],
                "test_remove_unused_ops": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.graph_editor.tests.reroute_test": {
            "RerouteTest": {
                "setUp": [
                    "self"
                ],
                "test_swap": [
                    "self"
                ],
                "test_multiswap": [
                    "self"
                ],
                "test_reroute": [
                    "self"
                ],
                "test_compatibility": [
                    "self"
                ],
                "test_reroute_can_modify": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.graph_editor.tests.util_test": {
            "UtilTest": {
                "test_list_view": [
                    "self"
                ],
                "test_is_iterable": [
                    "self"
                ],
                "test_unique_graph": [
                    "self"
                ],
                "test_make_list_of_op": [
                    "self"
                ],
                "test_make_list_of_t": [
                    "self"
                ],
                "test_get_generating_consuming": [
                    "self"
                ],
                "test_control_outputs": [
                    "self"
                ],
                "test_scope": [
                    "self"
                ],
                "test_placeholder": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.graph_editor.tests": {},
        "tensorflow.contrib.graph_editor.tests.transform_test": {
            "TransformTest": {
                "setUp": [
                    "self"
                ],
                "test_copy": [
                    "self"
                ],
                "test_transform": [
                    "self"
                ],
                "test_transform_in_place": [
                    "self"
                ],
                "test_copy_with_input_replacements": [
                    "self"
                ],
                "test_graph_replace": [
                    "self"
                ],
                "test_graph_replace_dict": [
                    "self"
                ],
                "test_graph_replace_ordered_dict": [
                    "self"
                ],
                "test_graph_replace_named_tuple": [
                    "self"
                ],
                "test_graph_replace_missing": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.graph_editor.examples": {},
        "tensorflow.contrib.graph_editor.examples.edit_graph_example": {
            "main": [
                "_"
            ]
        },
        "tensorflow.contrib.session_bundle.manifest_pb2": {},
        "tensorflow.contrib.session_bundle.constants": {},
        "tensorflow.contrib.session_bundle.session_bundle": {
            "load_session_bundle_from_path": [
                "export_dir",
                "target",
                "config"
            ]
        },
        "tensorflow.contrib.session_bundle.session_bundle_test": {
            "_make_serialized_example": [
                "x"
            ],
            "SessionBundleLoadTest": {
                "_checkRegressionSignature": [
                    "self",
                    "signatures",
                    "sess"
                ],
                "_checkNamedSigantures": [
                    "self",
                    "signatures",
                    "sess"
                ],
                "testBasic": [
                    "self"
                ],
                "testBadPath": [
                    "self"
                ]
            },
            "SessionBundleLoadNoVarsTest": {
                "setUp": [
                    "self"
                ],
                "tearDown": [
                    "self"
                ],
                "testGraphWithoutVarsLoadsCorrectly": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.session_bundle.gc_test": {
            "tearDownModule": [],
            "GcTest": {
                "testLargestExportVersions": [
                    "self"
                ],
                "testLargestExportVersionsDoesNotDeleteZeroFolder": [
                    "self"
                ],
                "testModExportVersion": [
                    "self"
                ],
                "testOneOfEveryNExportVersions": [
                    "self"
                ],
                "testOneOfEveryNExportVersionsZero": [
                    "self"
                ],
                "testUnion": [
                    "self"
                ],
                "testNegation": [
                    "self"
                ],
                "testPathsWithParse": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.session_bundle": {},
        "tensorflow.contrib.session_bundle.gc": {
            "largest_export_versions": [
                "n"
            ],
            "one_of_every_n_export_versions": [
                "n"
            ],
            "mod_export_version": [
                "n"
            ],
            "union": [
                "lf",
                "rf"
            ],
            "negation": [
                "f"
            ],
            "get_paths": [
                "base_dir",
                "parser"
            ]
        },
        "tensorflow.contrib.session_bundle.exporter_test": {
            "tearDownModule": [],
            "SaveRestoreShardedTest": {
                "doBasicsOneExportPath": [
                    "self",
                    "export_path",
                    "clear_devices",
                    "global_step",
                    "sharded",
                    "export_count"
                ],
                "testDuplicateExportRaisesError": [
                    "self"
                ],
                "testBasics": [
                    "self"
                ],
                "testBasicsNoShard": [
                    "self"
                ],
                "testClearDevice": [
                    "self"
                ],
                "testGC": [
                    "self"
                ],
                "testExportMultipleTimes": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.session_bundle.exporter": {
            "gfile_copy_callback": [
                "files_to_copy",
                "export_dir_path"
            ],
            "regression_signature": [
                "input_tensor",
                "output_tensor"
            ],
            "classification_signature": [
                "input_tensor",
                "classes_tensor",
                "scores_tensor"
            ],
            "generic_signature": [
                "name_tensor_map"
            ],
            "Exporter": {
                "__init__": [
                    "self",
                    "saver"
                ],
                "init": [
                    "self",
                    "graph_def",
                    "init_op",
                    "clear_devices",
                    "default_graph_signature",
                    "named_graph_signatures",
                    "assets_collection",
                    "assets_callback"
                ],
                "export": [
                    "self",
                    "export_dir_base",
                    "global_step_tensor",
                    "sess",
                    "exports_to_keep"
                ],
                "_file_path_value": [
                    "self",
                    "path_tensor"
                ]
            }
        },
        "tensorflow.contrib.session_bundle.testdata": {},
        "tensorflow.contrib.session_bundle.testdata.saved_model_half_plus_two": {},
        "tensorflow.contrib.session_bundle.testdata.saved_model_half_plus_two.variables": {},
        "tensorflow.contrib.session_bundle.example.export_half_plus_two": {
            "Export": [],
            "main": [
                "_"
            ]
        },
        "tensorflow.contrib.session_bundle.example": {},
        "tensorflow.contrib.crf": {},
        "tensorflow.contrib.crf.python": {},
        "tensorflow.contrib.crf.python.ops.crf": {
            "_lengths_to_masks": [
                "lengths",
                "max_length"
            ],
            "crf_sequence_score": [
                "inputs",
                "tag_indices",
                "sequence_lengths",
                "transition_params"
            ],
            "crf_log_norm": [
                "inputs",
                "sequence_lengths",
                "transition_params"
            ],
            "crf_log_likelihood": [
                "inputs",
                "tag_indices",
                "sequence_lengths",
                "transition_params"
            ],
            "crf_unary_score": [
                "tag_indices",
                "sequence_lengths",
                "inputs"
            ],
            "crf_binary_score": [
                "tag_indices",
                "sequence_lengths",
                "transition_params"
            ],
            "viterbi_decode": [
                "score",
                "transition_params"
            ],
            "CrfForwardRnnCell": {
                "__init__": [
                    "self",
                    "transition_params"
                ],
                "state_size": [
                    "self"
                ],
                "output_size": [
                    "self"
                ],
                "__call__": [
                    "self",
                    "inputs",
                    "state",
                    "scope"
                ]
            }
        },
        "tensorflow.contrib.crf.python.ops": {},
        "tensorflow.contrib.crf.python.kernel_tests.crf_test": {
            "CrfTest": {
                "testCrfSequenceScore": [
                    "self"
                ],
                "testCrfUnaryScore": [
                    "self"
                ],
                "testCrfBinaryScore": [
                    "self"
                ],
                "testCrfLogNorm": [
                    "self"
                ],
                "testCrfLogLikelihood": [
                    "self"
                ],
                "testLengthsToMasks": [
                    "self"
                ],
                "testViterbiDecode": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.crf.python.kernel_tests": {},
        "tensorflow.contrib.tensorboard": {},
        "tensorflow.contrib.tensorboard.plugins": {},
        "tensorflow.contrib.tensorboard.plugins.projector.projector_config_pb2": {},
        "tensorflow.contrib.tensorboard.plugins.projector": {
            "visualize_embeddings": [
                "summary_writer",
                "config"
            ]
        },
        "tensorflow.contrib.tensorboard.plugins.projector.projector_api_test": {
            "ProjectorApiTest": {
                "testVisualizeEmbeddings": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.solvers": {},
        "tensorflow.contrib.solvers.python": {},
        "tensorflow.contrib.solvers.python.ops.lanczos": {
            "lanczos_bidiag": [
                "operator",
                "k",
                "orthogonalize",
                "starting_vector",
                "name"
            ],
            "bidiag_matmul": [
                "matrix",
                "alpha",
                "beta",
                "adjoint_b",
                "name"
            ]
        },
        "tensorflow.contrib.solvers.python.ops.least_squares": {
            "cgls": [
                "operator",
                "rhs",
                "tol",
                "max_iter",
                "name"
            ]
        },
        "tensorflow.contrib.solvers.python.ops.util": {
            "create_operator": [
                "matrix"
            ],
            "dot": [
                "x",
                "y"
            ],
            "l2norm_squared": [
                "v"
            ],
            "l2norm": [
                "v"
            ],
            "l2normalize": [
                "v"
            ]
        },
        "tensorflow.contrib.solvers.python.ops": {},
        "tensorflow.contrib.solvers.python.ops.linear_equations": {
            "conjugate_gradient": [
                "operator",
                "rhs",
                "tol",
                "max_iter",
                "name"
            ]
        },
        "tensorflow.contrib.makefile": {},
        "tensorflow.contrib.makefile.test": {},
        "tensorflow.contrib.testing": {},
        "tensorflow.contrib.testing.python": {},
        "tensorflow.contrib.testing.python.framework.util_test": {
            "assert_summary": [
                "expected_tags",
                "expected_simple_values",
                "summary_proto"
            ],
            "to_summary_proto": [
                "summary_str"
            ],
            "latest_event_file": [
                "base_dir"
            ],
            "latest_events": [
                "base_dir"
            ],
            "latest_summaries": [
                "base_dir"
            ],
            "simple_values_from_events": [
                "events",
                "tags"
            ]
        },
        "tensorflow.contrib.testing.python.framework": {},
        "tensorflow.contrib.testing.python.framework.fake_summary_writer": {
            "FakeSummaryWriter": {
                "install": [
                    "cls"
                ],
                "uninstall": [
                    "cls"
                ],
                "__init__": [
                    "self",
                    "logdir",
                    "graph"
                ],
                "summaries": [
                    "self"
                ],
                "assert_summaries": [
                    "self",
                    "test_case",
                    "expected_logdir",
                    "expected_graph",
                    "expected_summaries",
                    "expected_added_graphs",
                    "expected_added_meta_graphs",
                    "expected_session_logs"
                ],
                "add_summary": [
                    "self",
                    "summary",
                    "current_global_step"
                ],
                "add_graph": [
                    "self",
                    "graph",
                    "global_step",
                    "graph_def"
                ],
                "add_meta_graph": [
                    "self",
                    "meta_graph_def",
                    "global_step"
                ],
                "add_session_log": [
                    "self",
                    "session_log",
                    "global_step"
                ],
                "flush": [
                    "self"
                ],
                "reopen": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.metrics": {},
        "tensorflow.contrib.metrics.kernels": {},
        "tensorflow.contrib.metrics.python": {},
        "tensorflow.contrib.metrics.python.ops.metric_ops": {
            "_safe_div": [
                "numerator",
                "denominator",
                "name"
            ],
            "_safe_scalar_div": [
                "numerator",
                "denominator",
                "name"
            ],
            "_create_local": [
                "name",
                "shape",
                "collections",
                "validate_shape",
                "dtype"
            ],
            "_count_condition": [
                "values",
                "weights",
                "metrics_collections",
                "updates_collections"
            ],
            "_streaming_true_positives": [
                "predictions",
                "labels",
                "weights",
                "metrics_collections",
                "updates_collections",
                "name"
            ],
            "_streaming_false_positives": [
                "predictions",
                "labels",
                "weights",
                "metrics_collections",
                "updates_collections",
                "name"
            ],
            "_streaming_false_negatives": [
                "predictions",
                "labels",
                "weights",
                "metrics_collections",
                "updates_collections",
                "name"
            ],
            "_broadcast_weights": [
                "weights",
                "values"
            ],
            "streaming_mean": [
                "values",
                "weights",
                "metrics_collections",
                "updates_collections",
                "name"
            ],
            "streaming_mean_tensor": [
                "values",
                "weights",
                "metrics_collections",
                "updates_collections",
                "name"
            ],
            "streaming_accuracy": [
                "predictions",
                "labels",
                "weights",
                "metrics_collections",
                "updates_collections",
                "name"
            ],
            "streaming_precision": [
                "predictions",
                "labels",
                "weights",
                "metrics_collections",
                "updates_collections",
                "name"
            ],
            "streaming_recall": [
                "predictions",
                "labels",
                "weights",
                "metrics_collections",
                "updates_collections",
                "name"
            ],
            "_tp_fn_tn_fp": [
                "predictions",
                "labels",
                "thresholds",
                "weights"
            ],
            "streaming_auc": [
                "predictions",
                "labels",
                "weights",
                "num_thresholds",
                "metrics_collections",
                "updates_collections",
                "curve",
                "name"
            ],
            "streaming_specificity_at_sensitivity": [
                "predictions",
                "labels",
                "sensitivity",
                "weights",
                "num_thresholds",
                "metrics_collections",
                "updates_collections",
                "name"
            ],
            "streaming_sensitivity_at_specificity": [
                "predictions",
                "labels",
                "specificity",
                "weights",
                "num_thresholds",
                "metrics_collections",
                "updates_collections",
                "name"
            ],
            "streaming_precision_at_thresholds": [
                "predictions",
                "labels",
                "thresholds",
                "weights",
                "metrics_collections",
                "updates_collections",
                "name"
            ],
            "streaming_recall_at_thresholds": [
                "predictions",
                "labels",
                "thresholds",
                "weights",
                "metrics_collections",
                "updates_collections",
                "name"
            ],
            "_at_k_name": [
                "name",
                "k",
                "class_id"
            ],
            "streaming_recall_at_k": [
                "predictions",
                "labels",
                "k",
                "weights",
                "metrics_collections",
                "updates_collections",
                "name"
            ],
            "streaming_sparse_recall_at_k": [
                "predictions",
                "labels",
                "k",
                "class_id",
                "weights",
                "metrics_collections",
                "updates_collections",
                "name"
            ],
            "_streaming_sparse_precision_at_k": [
                "top_k_idx",
                "labels",
                "k",
                "class_id",
                "weights",
                "metrics_collections",
                "updates_collections",
                "name"
            ],
            "streaming_sparse_precision_at_k": [
                "predictions",
                "labels",
                "k",
                "class_id",
                "weights",
                "metrics_collections",
                "updates_collections",
                "name"
            ],
            "streaming_sparse_precision_at_top_k": [
                "top_k_predictions",
                "labels",
                "class_id",
                "weights",
                "metrics_collections",
                "updates_collections",
                "name"
            ],
            "num_relevant": [
                "labels",
                "k"
            ],
            "expand_and_tile": [
                "tensor",
                "multiple",
                "dim",
                "name"
            ],
            "sparse_average_precision_at_k": [
                "predictions",
                "labels",
                "k"
            ],
            "streaming_sparse_average_precision_at_k": [
                "predictions",
                "labels",
                "k",
                "weights",
                "metrics_collections",
                "updates_collections",
                "name"
            ],
            "_select_class_id": [
                "ids",
                "selected_id"
            ],
            "_maybe_select_class_id": [
                "labels",
                "predictions_idx",
                "selected_id"
            ],
            "_sparse_true_positive_at_k": [
                "predictions_idx",
                "labels",
                "class_id",
                "weights",
                "name"
            ],
            "_streaming_sparse_true_positive_at_k": [
                "predictions_idx",
                "labels",
                "k",
                "class_id",
                "weights",
                "name"
            ],
            "_sparse_false_positive_at_k": [
                "predictions_idx",
                "labels",
                "class_id",
                "weights"
            ],
            "_streaming_sparse_false_positive_at_k": [
                "predictions_idx",
                "labels",
                "k",
                "class_id",
                "weights",
                "name"
            ],
            "_sparse_false_negative_at_k": [
                "predictions_idx",
                "labels",
                "class_id",
                "weights"
            ],
            "_streaming_sparse_false_negative_at_k": [
                "predictions_idx",
                "labels",
                "k",
                "class_id",
                "weights",
                "name"
            ],
            "streaming_mean_absolute_error": [
                "predictions",
                "labels",
                "weights",
                "metrics_collections",
                "updates_collections",
                "name"
            ],
            "streaming_mean_relative_error": [
                "predictions",
                "labels",
                "normalizer",
                "weights",
                "metrics_collections",
                "updates_collections",
                "name"
            ],
            "streaming_mean_squared_error": [
                "predictions",
                "labels",
                "weights",
                "metrics_collections",
                "updates_collections",
                "name"
            ],
            "streaming_root_mean_squared_error": [
                "predictions",
                "labels",
                "weights",
                "metrics_collections",
                "updates_collections",
                "name"
            ],
            "streaming_covariance": [
                "predictions",
                "labels",
                "weights",
                "metrics_collections",
                "updates_collections",
                "name"
            ],
            "streaming_pearson_correlation": [
                "predictions",
                "labels",
                "weights",
                "metrics_collections",
                "updates_collections",
                "name"
            ],
            "streaming_mean_cosine_distance": [
                "predictions",
                "labels",
                "dim",
                "weights",
                "metrics_collections",
                "updates_collections",
                "name"
            ],
            "streaming_percentage_less": [
                "values",
                "threshold",
                "weights",
                "metrics_collections",
                "updates_collections",
                "name"
            ],
            "streaming_mean_iou": [
                "predictions",
                "labels",
                "num_classes",
                "weights",
                "metrics_collections",
                "updates_collections",
                "name"
            ],
            "_next_array_size": [
                "required_size",
                "growth_factor"
            ],
            "streaming_concat": [
                "values",
                "axis",
                "max_size",
                "metrics_collections",
                "updates_collections",
                "name"
            ],
            "aggregate_metrics": [],
            "aggregate_metric_map": [
                "names_to_tuples"
            ],
            "_remove_squeezable_dimensions": [
                "predictions",
                "labels",
                "weights"
            ]
        },
        "tensorflow.contrib.metrics.python.ops.set_ops": {
            "set_size": [
                "a",
                "validate_indices"
            ],
            "_set_operation": [
                "a",
                "b",
                "set_operation",
                "validate_indices"
            ],
            "set_intersection": [
                "a",
                "b",
                "validate_indices"
            ],
            "set_difference": [
                "a",
                "b",
                "aminusb",
                "validate_indices"
            ],
            "set_union": [
                "a",
                "b",
                "validate_indices"
            ]
        },
        "tensorflow.contrib.metrics.python.ops.confusion_matrix_ops": {
            "confusion_matrix": [
                "predictions",
                "labels",
                "num_classes",
                "dtype",
                "name",
                "weights"
            ]
        },
        "tensorflow.contrib.metrics.python.ops.histogram_ops": {
            "auc_using_histogram": [
                "boolean_labels",
                "scores",
                "score_range",
                "nbins",
                "collections",
                "check_shape",
                "name"
            ],
            "_check_labels_and_scores": [
                "boolean_labels",
                "scores",
                "check_shape"
            ],
            "_make_auc_histograms": [
                "boolean_labels",
                "scores",
                "score_range",
                "nbins"
            ],
            "_auc_hist_accumulate": [
                "hist_true",
                "hist_false",
                "nbins",
                "collections"
            ],
            "_auc_convert_hist_to_auc": [
                "hist_true_acc",
                "hist_false_acc",
                "nbins"
            ],
            "_strict_1d_cumsum": [
                "tensor",
                "len_tensor"
            ],
            "_strict_conv1d": [
                "x",
                "h"
            ]
        },
        "tensorflow.contrib.metrics.python.ops.metric_ops_test": {
            "_enqueue_vector": [
                "sess",
                "queue",
                "values",
                "shape"
            ],
            "_binary_2d_label_to_sparse_value": [
                "labels"
            ],
            "_binary_2d_label_to_sparse": [
                "labels"
            ],
            "_binary_3d_label_to_sparse_value": [
                "labels"
            ],
            "_binary_3d_label_to_sparse": [
                "labels"
            ],
            "_assert_nan": [
                "test_case",
                "actual"
            ],
            "_reweight": [
                "predictions",
                "labels",
                "weights"
            ],
            "StreamingMeanTest": {
                "setUp": [
                    "self"
                ],
                "testMetricsCollection": [
                    "self"
                ],
                "testUpdatesCollection": [
                    "self"
                ],
                "testBasic": [
                    "self"
                ],
                "testUpdateOpsReturnsCurrentValue": [
                    "self"
                ],
                "test1dWeightedValues": [
                    "self"
                ],
                "test1dWeightedValues_placeholders": [
                    "self"
                ],
                "test2dWeightedValues": [
                    "self"
                ],
                "test2dWeightedValues_placeholders": [
                    "self"
                ]
            },
            "StreamingMeanTensorTest": {
                "setUp": [
                    "self"
                ],
                "testMetricsCollection": [
                    "self"
                ],
                "testUpdatesCollection": [
                    "self"
                ],
                "testBasic": [
                    "self"
                ],
                "testMultiDimensional": [
                    "self"
                ],
                "testUpdateOpsReturnsCurrentValue": [
                    "self"
                ],
                "testWeighted1d": [
                    "self"
                ],
                "testWeighted2d_1": [
                    "self"
                ],
                "testWeighted2d_2": [
                    "self"
                ]
            },
            "StreamingAccuracyTest": {
                "setUp": [
                    "self"
                ],
                "testMetricsCollection": [
                    "self"
                ],
                "testUpdatesCollection": [
                    "self"
                ],
                "testPredictionsAndLabelsOfDifferentSizeRaisesValueError": [
                    "self"
                ],
                "testPredictionsAndWeightsOfDifferentSizeRaisesValueError": [
                    "self"
                ],
                "testValueTensorIsIdempotent": [
                    "self"
                ],
                "testMultipleUpdates": [
                    "self"
                ],
                "testEffectivelyEquivalentSizes": [
                    "self"
                ],
                "testEffectivelyEquivalentSizesWithStaicShapedWeight": [
                    "self"
                ],
                "testEffectivelyEquivalentSizesWithDynamicallyShapedWeight": [
                    "self"
                ],
                "testMultipleUpdatesWithWeightedValues": [
                    "self"
                ]
            },
            "StreamingPrecisionTest": {
                "setUp": [
                    "self"
                ],
                "testMetricsCollection": [
                    "self"
                ],
                "testUpdatesCollection": [
                    "self"
                ],
                "testValueTensorIsIdempotent": [
                    "self"
                ],
                "testAllCorrect": [
                    "self"
                ],
                "testSomeCorrect": [
                    "self"
                ],
                "testWeighted1d": [
                    "self"
                ],
                "testWeighted1d_placeholders": [
                    "self"
                ],
                "testWeighted2d": [
                    "self"
                ],
                "testWeighted2d_placeholders": [
                    "self"
                ],
                "testAllIncorrect": [
                    "self"
                ],
                "testZeroTrueAndFalsePositivesGivesZeroPrecision": [
                    "self"
                ]
            },
            "StreamingRecallTest": {
                "setUp": [
                    "self"
                ],
                "testMetricsCollection": [
                    "self"
                ],
                "testUpdatesCollection": [
                    "self"
                ],
                "testValueTensorIsIdempotent": [
                    "self"
                ],
                "testAllCorrect": [
                    "self"
                ],
                "testSomeCorrect": [
                    "self"
                ],
                "testWeighted1d": [
                    "self"
                ],
                "testWeighted2d": [
                    "self"
                ],
                "testAllIncorrect": [
                    "self"
                ],
                "testZeroTruePositivesAndFalseNegativesGivesZeroRecall": [
                    "self"
                ]
            },
            "StreamingAUCTest": {
                "setUp": [
                    "self"
                ],
                "testMetricsCollection": [
                    "self"
                ],
                "testUpdatesCollection": [
                    "self"
                ],
                "testValueTensorIsIdempotent": [
                    "self"
                ],
                "testAllCorrect": [
                    "self"
                ],
                "allCorrectAsExpected": [
                    "self",
                    "curve"
                ],
                "testSomeCorrect": [
                    "self"
                ],
                "testWeighted1d": [
                    "self"
                ],
                "testWeighted2d": [
                    "self"
                ],
                "testAUCPRSpecialCase": [
                    "self"
                ],
                "testAnotherAUCPRSpecialCase": [
                    "self"
                ],
                "testThirdAUCPRSpecialCase": [
                    "self"
                ],
                "testAllIncorrect": [
                    "self"
                ],
                "testZeroTruePositivesAndFalseNegativesGivesOneAUC": [
                    "self"
                ],
                "testRecallOneAndPrecisionOneGivesOnePRAUC": [
                    "self"
                ],
                "np_auc": [
                    "self",
                    "predictions",
                    "labels",
                    "weights"
                ],
                "testWithMultipleUpdates": [
                    "self"
                ]
            },
            "StreamingSpecificityAtSensitivityTest": {
                "setUp": [
                    "self"
                ],
                "testMetricsCollection": [
                    "self"
                ],
                "testUpdatesCollection": [
                    "self"
                ],
                "testValueTensorIsIdempotent": [
                    "self"
                ],
                "testAllCorrect": [
                    "self"
                ],
                "testSomeCorrectHighSensitivity": [
                    "self"
                ],
                "testSomeCorrectLowSensitivity": [
                    "self"
                ],
                "testWeighted1d": [
                    "self"
                ],
                "testWeighted2d": [
                    "self"
                ]
            },
            "StreamingSensitivityAtSpecificityTest": {
                "setUp": [
                    "self"
                ],
                "testMetricsCollection": [
                    "self"
                ],
                "testUpdatesCollection": [
                    "self"
                ],
                "testValueTensorIsIdempotent": [
                    "self"
                ],
                "testAllCorrect": [
                    "self"
                ],
                "testSomeCorrectHighSpecificity": [
                    "self"
                ],
                "testSomeCorrectLowSpecificity": [
                    "self"
                ],
                "testWeighted": [
                    "self"
                ]
            },
            "StreamingPrecisionRecallThresholdsTest": {
                "setUp": [
                    "self"
                ],
                "testMetricsCollection": [
                    "self"
                ],
                "testUpdatesCollection": [
                    "self"
                ],
                "testValueTensorIsIdempotent": [
                    "self"
                ],
                "testAllCorrect": [
                    "self"
                ],
                "testSomeCorrect": [
                    "self"
                ],
                "testAllIncorrect": [
                    "self"
                ],
                "testWeights1d": [
                    "self"
                ],
                "testWeights2d": [
                    "self"
                ],
                "testExtremeThresholds": [
                    "self"
                ],
                "testZeroLabelsPredictions": [
                    "self"
                ],
                "testWithMultipleUpdates": [
                    "self"
                ]
            },
            "StreamingRecallAtKTest": {
                "setUp": [
                    "self"
                ],
                "testMetricsCollection": [
                    "self"
                ],
                "testUpdatesCollection": [
                    "self"
                ],
                "testSingleUpdateKIs1": [
                    "self"
                ],
                "testSingleUpdateKIs2": [
                    "self"
                ],
                "testSingleUpdateKIs3": [
                    "self"
                ],
                "testSingleUpdateSomeMissingKIs2": [
                    "self"
                ]
            },
            "StreamingSparsePrecisionTest": {
                "_test_streaming_sparse_precision_at_k": [
                    "self",
                    "predictions",
                    "labels",
                    "k",
                    "expected",
                    "class_id",
                    "weights"
                ],
                "_test_streaming_sparse_precision_at_top_k": [
                    "self",
                    "top_k_predictions",
                    "labels",
                    "expected",
                    "class_id",
                    "weights"
                ],
                "_test_sparse_average_precision_at_k": [
                    "self",
                    "predictions",
                    "labels",
                    "k",
                    "expected"
                ],
                "_test_streaming_sparse_average_precision_at_k": [
                    "self",
                    "predictions",
                    "labels",
                    "k",
                    "expected",
                    "weights"
                ],
                "test_top_k_rank_invalid": [
                    "self"
                ],
                "test_average_precision": [
                    "self"
                ],
                "test_average_precision_some_labels_out_of_range": [
                    "self"
                ],
                "test_one_label_at_k1_nan": [
                    "self"
                ],
                "test_one_label_at_k1": [
                    "self"
                ],
                "test_three_labels_at_k5_no_predictions": [
                    "self"
                ],
                "test_three_labels_at_k5_no_labels": [
                    "self"
                ],
                "test_three_labels_at_k5": [
                    "self"
                ],
                "test_three_labels_at_k5_some_out_of_range": [
                    "self"
                ],
                "test_3d_nan": [
                    "self"
                ],
                "test_3d_no_labels": [
                    "self"
                ],
                "test_3d": [
                    "self"
                ],
                "test_3d_ignore_all": [
                    "self"
                ],
                "test_3d_ignore_some": [
                    "self"
                ],
                "test_sparse_tensor_value": [
                    "self"
                ]
            },
            "StreamingSparseRecallTest": {
                "_test_streaming_sparse_recall_at_k": [
                    "self",
                    "predictions",
                    "labels",
                    "k",
                    "expected",
                    "class_id",
                    "weights"
                ],
                "test_one_label_at_k1_nan": [
                    "self"
                ],
                "test_one_label_at_k1_no_predictions": [
                    "self"
                ],
                "test_one_label_at_k1": [
                    "self"
                ],
                "test_one_label_at_k1_weighted": [
                    "self"
                ],
                "test_three_labels_at_k5_nan": [
                    "self"
                ],
                "test_three_labels_at_k5_no_predictions": [
                    "self"
                ],
                "test_three_labels_at_k5": [
                    "self"
                ],
                "test_three_labels_at_k5_some_out_of_range": [
                    "self"
                ],
                "test_3d_nan": [
                    "self"
                ],
                "test_3d_no_predictions": [
                    "self"
                ],
                "test_3d": [
                    "self"
                ],
                "test_3d_ignore_all": [
                    "self"
                ],
                "test_3d_ignore_some": [
                    "self"
                ],
                "test_sparse_tensor_value": [
                    "self"
                ]
            },
            "StreamingMeanAbsoluteErrorTest": {
                "setUp": [
                    "self"
                ],
                "testMetricsCollection": [
                    "self"
                ],
                "testUpdatesCollection": [
                    "self"
                ],
                "testValueTensorIsIdempotent": [
                    "self"
                ],
                "testSingleUpdateWithErrorAndWeights": [
                    "self"
                ]
            },
            "StreamingMeanRelativeErrorTest": {
                "setUp": [
                    "self"
                ],
                "testMetricsCollection": [
                    "self"
                ],
                "testUpdatesCollection": [
                    "self"
                ],
                "testValueTensorIsIdempotent": [
                    "self"
                ],
                "testSingleUpdateNormalizedByLabels": [
                    "self"
                ],
                "testSingleUpdateNormalizedByZeros": [
                    "self"
                ]
            },
            "StreamingMeanSquaredErrorTest": {
                "setUp": [
                    "self"
                ],
                "testMetricsCollection": [
                    "self"
                ],
                "testUpdatesCollection": [
                    "self"
                ],
                "testValueTensorIsIdempotent": [
                    "self"
                ],
                "testSingleUpdateZeroError": [
                    "self"
                ],
                "testSingleUpdateWithError": [
                    "self"
                ],
                "testSingleUpdateWithErrorAndWeights": [
                    "self"
                ],
                "testMultipleBatchesOfSizeOne": [
                    "self"
                ],
                "testMetricsComputedConcurrently": [
                    "self"
                ],
                "testMultipleMetricsOnMultipleBatchesOfSizeOne": [
                    "self"
                ]
            },
            "StreamingRootMeanSquaredErrorTest": {
                "setUp": [
                    "self"
                ],
                "testMetricsCollection": [
                    "self"
                ],
                "testUpdatesCollection": [
                    "self"
                ],
                "testValueTensorIsIdempotent": [
                    "self"
                ],
                "testSingleUpdateZeroError": [
                    "self"
                ],
                "testSingleUpdateWithError": [
                    "self"
                ],
                "testSingleUpdateWithErrorAndWeights": [
                    "self"
                ]
            },
            "StreamingCovarianceTest": {
                "setUp": [
                    "self"
                ],
                "testMetricsCollection": [
                    "self"
                ],
                "testUpdatesCollection": [
                    "self"
                ],
                "testValueTensorIsIdempotent": [
                    "self"
                ],
                "testSingleUpdateIdentical": [
                    "self"
                ],
                "testSingleUpdateNonIdentical": [
                    "self"
                ],
                "testSingleUpdateWithErrorAndWeights": [
                    "self"
                ],
                "testMultiUpdateWithErrorNoWeights": [
                    "self"
                ],
                "testMultiUpdateWithErrorAndWeights": [
                    "self"
                ]
            },
            "StreamingPearsonRTest": {
                "setUp": [
                    "self"
                ],
                "testMetricsCollection": [
                    "self"
                ],
                "testUpdatesCollection": [
                    "self"
                ],
                "testValueTensorIsIdempotent": [
                    "self"
                ],
                "testSingleUpdateIdentical": [
                    "self"
                ],
                "testSingleUpdateNonIdentical": [
                    "self"
                ],
                "testSingleUpdateWithErrorAndWeights": [
                    "self"
                ],
                "testMultiUpdateWithErrorNoWeights": [
                    "self"
                ],
                "testMultiUpdateWithErrorAndWeights": [
                    "self"
                ]
            },
            "StreamingMeanCosineDistanceTest": {
                "setUp": [
                    "self"
                ],
                "testMetricsCollection": [
                    "self"
                ],
                "testUpdatesCollection": [
                    "self"
                ],
                "testValueTensorIsIdempotent": [
                    "self"
                ],
                "testSingleUpdateZeroError": [
                    "self"
                ],
                "testSingleUpdateWithError1": [
                    "self"
                ],
                "testSingleUpdateWithError2": [
                    "self"
                ],
                "testSingleUpdateWithErrorAndWeights1": [
                    "self"
                ],
                "testSingleUpdateWithErrorAndWeights2": [
                    "self"
                ]
            },
            "PcntBelowThreshTest": {
                "setUp": [
                    "self"
                ],
                "testMetricsCollection": [
                    "self"
                ],
                "testUpdatesCollection": [
                    "self"
                ],
                "testOneUpdate": [
                    "self"
                ],
                "testSomePresentOneUpdate": [
                    "self"
                ]
            },
            "StreamingMeanIOUTest": {
                "setUp": [
                    "self"
                ],
                "testMetricsCollections": [
                    "self"
                ],
                "testUpdatesCollection": [
                    "self"
                ],
                "testPredictionsAndLabelsOfDifferentSizeRaisesValueError": [
                    "self"
                ],
                "testLabelsAndWeightsOfDifferentSizeRaisesValueError": [
                    "self"
                ],
                "testValueTensorIsIdempotent": [
                    "self"
                ],
                "testMultipleUpdates": [
                    "self"
                ],
                "testMultipleUpdatesWithWeights": [
                    "self"
                ],
                "testMultipleUpdatesWithMissingClass": [
                    "self"
                ],
                "testUpdateOpEvalIsAccumulatedConfusionMatrix": [
                    "self"
                ],
                "testAllCorrect": [
                    "self"
                ],
                "testAllWrong": [
                    "self"
                ],
                "testResultsWithSomeMissing": [
                    "self"
                ]
            },
            "StreamingConcatTest": {
                "setUp": [
                    "self"
                ],
                "testMetricsCollection": [
                    "self"
                ],
                "testUpdatesCollection": [
                    "self"
                ],
                "testNextArraySize": [
                    "self"
                ],
                "testStreamingConcat": [
                    "self"
                ],
                "testStreamingConcatMaxSize": [
                    "self"
                ],
                "testStreamingConcat2D": [
                    "self"
                ],
                "testStreamingConcatErrors": [
                    "self"
                ],
                "testStreamingConcatReset": [
                    "self"
                ]
            },
            "AggregateMetricsTest": {
                "testAggregateNoMetricsRaisesValueError": [
                    "self"
                ],
                "testAggregateSingleMetricReturnsOneItemLists": [
                    "self"
                ],
                "testAggregateMultipleMetricsReturnsListsInOrder": [
                    "self"
                ]
            },
            "AggregateMetricMapTest": {
                "testAggregateMultipleMetricsReturnsListsInOrder": [
                    "self"
                ]
            },
            "NumRelevantTest": {
                "testNumRelevantInvalidArgs": [
                    "self"
                ],
                "testNumRelevantDense": [
                    "self"
                ],
                "testNumRelevantSparse": [
                    "self"
                ]
            },
            "ExpandAndTileTest": {
                "testExpandAndTileInvalidArgs": [
                    "self"
                ],
                "testSparseExpandAndTileInvalidArgs": [
                    "self"
                ],
                "_test_expand_and_tile": [
                    "self",
                    "expected_shape",
                    "expected_value",
                    "tensor",
                    "multiple",
                    "dim"
                ],
                "testExpandAndTile1x": [
                    "self"
                ],
                "testExpandAndTile5x": [
                    "self"
                ],
                "_assert_sparse_tensors_equal": [
                    "self",
                    "expected",
                    "actual"
                ],
                "testSparseExpandAndTile1x": [
                    "self"
                ],
                "testSparseExpandAndTile5x": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.metrics.python.ops": {},
        "tensorflow.contrib.metrics.python.kernel_tests.confusion_matrix_ops_test": {
            "ConfusionMatrixTest": {
                "_testConfMatrix": [
                    "self",
                    "predictions",
                    "labels",
                    "truth",
                    "weights"
                ],
                "_testBasic": [
                    "self",
                    "dtype"
                ],
                "testInt32Basic": [
                    "self"
                ],
                "testInt64Basic": [
                    "self"
                ],
                "_testConfMatrixOnTensors": [
                    "self",
                    "tf_dtype",
                    "np_dtype"
                ],
                "_testOnTensors_int32": [
                    "self"
                ],
                "testOnTensors_int64": [
                    "self"
                ],
                "_testDifferentLabelsInPredictionAndTarget": [
                    "self",
                    "dtype"
                ],
                "testInt32DifferentLabels": [
                    "self",
                    "dtype"
                ],
                "testInt64DifferentLabels": [
                    "self",
                    "dtype"
                ],
                "_testMultipleLabels": [
                    "self",
                    "dtype"
                ],
                "testInt32MultipleLabels": [
                    "self",
                    "dtype"
                ],
                "testInt64MultipleLabels": [
                    "self",
                    "dtype"
                ],
                "testWeighted": [
                    "self"
                ],
                "testInvalidRank": [
                    "self"
                ],
                "testInputDifferentSize": [
                    "self"
                ],
                "testOutputIsInt32": [
                    "self"
                ],
                "testOutputIsInt64": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.metrics.python.kernel_tests.set_ops_test": {
            "_values": [
                "values",
                "dtype"
            ],
            "_constant": [
                "values",
                "dtype"
            ],
            "_dense_to_sparse": [
                "dense",
                "dtype"
            ],
            "SetOpsTest": {
                "test_set_size_2d": [
                    "self"
                ],
                "_test_set_size_2d": [
                    "self",
                    "dtype"
                ],
                "test_set_size_duplicates_2d": [
                    "self"
                ],
                "_test_set_size_duplicates_2d": [
                    "self",
                    "dtype"
                ],
                "test_set_size_3d": [
                    "self"
                ],
                "test_set_size_3d_invalid_indices": [
                    "self"
                ],
                "_test_set_size_3d": [
                    "self",
                    "dtype",
                    "invalid_indices"
                ],
                "_set_size": [
                    "self",
                    "sparse_data"
                ],
                "test_set_intersection_multirow_2d": [
                    "self"
                ],
                "_test_set_intersection_multirow_2d": [
                    "self",
                    "dtype"
                ],
                "test_dense_set_intersection_multirow_2d": [
                    "self"
                ],
                "_test_dense_set_intersection_multirow_2d": [
                    "self",
                    "dtype"
                ],
                "test_set_intersection_duplicates_2d": [
                    "self"
                ],
                "_test_set_intersection_duplicates_2d": [
                    "self",
                    "dtype"
                ],
                "test_set_intersection_3d": [
                    "self"
                ],
                "test_set_intersection_3d_invalid_indices": [
                    "self"
                ],
                "_test_set_intersection_3d": [
                    "self",
                    "dtype",
                    "invalid_indices"
                ],
                "_assert_shapes": [
                    "self",
                    "input_tensor",
                    "result_sparse_tensor"
                ],
                "_set_intersection": [
                    "self",
                    "a",
                    "b"
                ],
                "_set_intersection_count": [
                    "self",
                    "a",
                    "b"
                ],
                "test_set_difference_multirow_2d": [
                    "self"
                ],
                "_test_set_difference_multirow_2d": [
                    "self",
                    "dtype"
                ],
                "test_dense_set_difference_multirow_2d": [
                    "self"
                ],
                "_test_dense_set_difference_multirow_2d": [
                    "self",
                    "dtype"
                ],
                "test_sparse_set_difference_multirow_2d": [
                    "self"
                ],
                "_test_sparse_set_difference_multirow_2d": [
                    "self",
                    "dtype"
                ],
                "test_set_difference_duplicates_2d": [
                    "self"
                ],
                "_test_set_difference_duplicates_2d": [
                    "self",
                    "dtype"
                ],
                "test_sparse_set_difference_3d": [
                    "self"
                ],
                "test_sparse_set_difference_3d_invalid_indices": [
                    "self"
                ],
                "_test_sparse_set_difference_3d": [
                    "self",
                    "dtype",
                    "invalid_indices"
                ],
                "_set_difference": [
                    "self",
                    "a",
                    "b",
                    "aminusb"
                ],
                "_set_difference_count": [
                    "self",
                    "a",
                    "b",
                    "aminusb"
                ],
                "test_set_union_multirow_2d": [
                    "self"
                ],
                "_test_set_union_multirow_2d": [
                    "self",
                    "dtype"
                ],
                "test_dense_set_union_multirow_2d": [
                    "self"
                ],
                "_test_dense_set_union_multirow_2d": [
                    "self",
                    "dtype"
                ],
                "test_set_union_duplicates_2d": [
                    "self"
                ],
                "_test_set_union_duplicates_2d": [
                    "self",
                    "dtype"
                ],
                "test_sparse_set_union_3d": [
                    "self"
                ],
                "test_sparse_set_union_3d_invalid_indices": [
                    "self"
                ],
                "_test_sparse_set_union_3d": [
                    "self",
                    "dtype",
                    "invalid_indices"
                ],
                "_set_union": [
                    "self",
                    "a",
                    "b"
                ],
                "_set_union_count": [
                    "self",
                    "a",
                    "b"
                ],
                "_assert_set_operation": [
                    "self",
                    "expected_indices",
                    "expected_values",
                    "expected_shape",
                    "sparse_tensor",
                    "dtype"
                ]
            }
        },
        "tensorflow.contrib.metrics.python.kernel_tests": {},
        "tensorflow.contrib.metrics.python.kernel_tests.histogram_ops_test": {
            "synthetic_data": [
                "desired_auc",
                "score_range",
                "num_records",
                "rng",
                "frac_true"
            ],
            "Strict1dCumsumTest": {
                "test_empty_tensor_returns_empty": [
                    "self"
                ],
                "test_length_1_tensor_works": [
                    "self"
                ],
                "test_length_3_tensor_works": [
                    "self"
                ]
            },
            "AUCUsingHistogramTest": {
                "setUp": [
                    "self"
                ],
                "test_empty_labels_and_scores_gives_nan_auc": [
                    "self"
                ],
                "test_perfect_scores_gives_auc_1": [
                    "self"
                ],
                "test_terrible_scores_gives_auc_0": [
                    "self"
                ],
                "test_many_common_conditions": [
                    "self"
                ],
                "test_large_class_imbalance_still_ok": [
                    "self"
                ],
                "test_super_accuracy_with_many_bins_and_records": [
                    "self"
                ],
                "_check_auc": [
                    "self",
                    "nbins",
                    "desired_auc",
                    "score_range",
                    "num_records",
                    "frac_true",
                    "atol",
                    "num_updates"
                ]
            }
        },
        "tensorflow.contrib.metrics.python.metrics.classification_test": {
            "ClassificationTest": {
                "testAccuracy1D": [
                    "self"
                ],
                "testAccuracy1DBool": [
                    "self"
                ],
                "testAccuracy1DInt64": [
                    "self"
                ],
                "testAccuracy1DString": [
                    "self"
                ],
                "testAccuracyDtypeMismatch": [
                    "self"
                ],
                "testAccuracyFloatLabels": [
                    "self"
                ],
                "testAccuracy1DWeighted": [
                    "self"
                ],
                "testAccuracy1DWeightedBroadcast": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.metrics.python.metrics.classification": {
            "accuracy": [
                "predictions",
                "labels",
                "weights"
            ]
        },
        "tensorflow.contrib.metrics.python.metrics": {},
        "tensorflow.contrib.metrics.ops": {},
        "tensorflow.contrib.labeled_tensor": {},
        "tensorflow.contrib.labeled_tensor.python": {},
        "tensorflow.contrib.labeled_tensor.python.ops.io_ops": {
            "_labeled_to_unlabeled_features": [
                "features"
            ],
            "parse_example": [
                "serialized",
                "features",
                "name",
                "example_names"
            ],
            "parse_single_example": [
                "serialized",
                "features",
                "name",
                "example_names"
            ],
            "placeholder": [
                "dtype",
                "axes",
                "name"
            ],
            "FixedLenFeature": {
                "__init__": [
                    "self",
                    "axes",
                    "dtype",
                    "default_value"
                ],
                "axes": [
                    "self"
                ],
                "dtype": [
                    "self"
                ],
                "default_value": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.labeled_tensor.python.ops.ops": {
            "_gather_1d_on_axis": [
                "labeled_tensor",
                "indexer",
                "axis",
                "name"
            ],
            "select": [
                "labeled_tensor",
                "selection",
                "name"
            ],
            "concat": [
                "labeled_tensors",
                "axis_name",
                "name"
            ],
            "pack": [
                "labeled_tensors",
                "new_axis",
                "axis_position",
                "name"
            ],
            "unpack": [
                "labeled_tensor",
                "axis_name",
                "name"
            ],
            "reshape": [
                "labeled_tensor",
                "existing_axes",
                "new_axes",
                "name"
            ],
            "rename_axis": [
                "labeled_tensor",
                "existing_name",
                "new_name",
                "name"
            ],
            "_batch_helper": [
                "default_name",
                "batch_fn",
                "batch_size",
                "enqueue_many",
                "labeled_tensors",
                "allow_smaller_final_batch",
                "name"
            ],
            "batch": [
                "labeled_tensors",
                "batch_size",
                "num_threads",
                "capacity",
                "enqueue_many",
                "allow_smaller_final_batch",
                "name"
            ],
            "shuffle_batch": [
                "labeled_tensors",
                "batch_size",
                "num_threads",
                "capacity",
                "enqueue_many",
                "min_after_dequeue",
                "seed",
                "allow_smaller_final_batch",
                "name"
            ],
            "random_crop": [
                "labeled_tensor",
                "shape_map",
                "seed",
                "name"
            ],
            "map_fn": [
                "fn",
                "labeled_tensor",
                "name"
            ],
            "squeeze": [
                "labeled_tensor",
                "axis_names",
                "name"
            ],
            "matmul": [
                "a",
                "b",
                "name"
            ],
            "define_reduce_op": [
                "op_name",
                "reduce_fn"
            ],
            "tile": [
                "labeled_tensor",
                "multiples",
                "name"
            ],
            "pad": [
                "labeled_tensor",
                "paddings",
                "mode",
                "name"
            ],
            "constant": [
                "value",
                "dtype",
                "axes",
                "name"
            ],
            "zeros_like": [
                "labeled_tensor",
                "dtype",
                "name"
            ],
            "ones_like": [
                "labeled_tensor",
                "dtype",
                "name"
            ],
            "cast": [
                "labeled_tensor",
                "dtype",
                "name"
            ],
            "verify_tensor_all_finite": [
                "labeled_tensor",
                "message",
                "name"
            ],
            "boolean_mask": [
                "labeled_tensor",
                "mask",
                "name"
            ],
            "where": [
                "condition",
                "x",
                "y",
                "name"
            ]
        },
        "tensorflow.contrib.labeled_tensor.python.ops.ops_test": {
            "Base": {
                "setUp": [
                    "self"
                ]
            },
            "SelectTest": {
                "test_name": [
                    "self"
                ],
                "test_scalar": [
                    "self"
                ],
                "test_slice": [
                    "self"
                ],
                "test_slices": [
                    "self"
                ],
                "test_list": [
                    "self"
                ],
                "test_list_one_item": [
                    "self"
                ],
                "test_list_zero_items": [
                    "self"
                ],
                "test_scalars": [
                    "self"
                ],
                "test_invalid_input": [
                    "self"
                ]
            },
            "ConcatTest": {
                "setUp": [
                    "self"
                ],
                "test_name": [
                    "self"
                ],
                "test": [
                    "self"
                ],
                "test_transposed": [
                    "self"
                ],
                "test_invalid_input": [
                    "self"
                ]
            },
            "PackTest": {
                "test_name": [
                    "self"
                ],
                "test": [
                    "self"
                ],
                "test_axis": [
                    "self"
                ],
                "test_invalid_input": [
                    "self"
                ]
            },
            "UnpackTest": {
                "test_name": [
                    "self"
                ],
                "test": [
                    "self"
                ],
                "test_axis": [
                    "self"
                ],
                "test_invalid_input": [
                    "self"
                ]
            },
            "ReshapeTest": {
                "test_name": [
                    "self"
                ],
                "test_identity": [
                    "self"
                ],
                "test_known_size": [
                    "self"
                ],
                "test_unknown_size": [
                    "self"
                ],
                "test_unknown_dimension": [
                    "self"
                ],
                "test_with_labels": [
                    "self"
                ],
                "test_invalid_input": [
                    "self"
                ]
            },
            "RenameAxisTest": {
                "test_name": [
                    "self"
                ],
                "test_identity": [
                    "self"
                ],
                "test_new_name": [
                    "self"
                ],
                "test_invalid_input": [
                    "self"
                ]
            },
            "BatchTest": {
                "setUp": [
                    "self"
                ],
                "test_name": [
                    "self"
                ],
                "test_enqueue_many": [
                    "self"
                ],
                "test_no_enqueue_many": [
                    "self"
                ],
                "test_invalid_input": [
                    "self"
                ],
                "test_allow_smaller_final_batch": [
                    "self"
                ]
            },
            "ShuffleBatchTest": {
                "setUp": [
                    "self"
                ],
                "test_name": [
                    "self"
                ],
                "test_enqueue_many": [
                    "self"
                ],
                "test_allow_smaller_final_batch": [
                    "self"
                ]
            },
            "RandomCropTest": {
                "test_name": [
                    "self"
                ],
                "test_single": [
                    "self"
                ],
                "test_double": [
                    "self"
                ],
                "test_size1": [
                    "self"
                ],
                "test_different_seeds": [
                    "self"
                ],
                "test_identical_seeds": [
                    "self"
                ],
                "test_crop_idempotent": [
                    "self"
                ],
                "test_invalid_input": [
                    "self"
                ]
            },
            "MapFnTest": {
                "test_name": [
                    "self"
                ],
                "test_identity": [
                    "self"
                ],
                "test_callable_object": [
                    "self"
                ],
                "test_slice": [
                    "self"
                ]
            },
            "SqueezeTest": {
                "setUp": [
                    "self"
                ],
                "test_name": [
                    "self"
                ],
                "test_none": [
                    "self"
                ],
                "test": [
                    "self"
                ],
                "test_invalid_input": [
                    "self"
                ]
            },
            "MatMulTest": {
                "test_name": [
                    "self"
                ],
                "test_vector_vector": [
                    "self"
                ],
                "test_matrix_vector": [
                    "self"
                ],
                "test_matrix_matrix": [
                    "self"
                ],
                "test_matrix_matrix_axis_order": [
                    "self"
                ],
                "test_invalid": [
                    "self"
                ]
            },
            "ReduceSumTest": {
                "test_name": [
                    "self"
                ],
                "test_drop_axis": [
                    "self"
                ],
                "test_drop_scalar_axis": [
                    "self"
                ],
                "test_keep_axis": [
                    "self"
                ],
                "test_keep_scalar_axis": [
                    "self"
                ],
                "test_scalar": [
                    "self"
                ],
                "test_empty_list": [
                    "self"
                ],
                "test_none": [
                    "self"
                ],
                "test_function_docstring_and_name": [
                    "self"
                ]
            },
            "ReduceMeanTest": {
                "test_name": [
                    "self"
                ],
                "test": [
                    "self"
                ]
            },
            "ReduceProdTest": {
                "test_name": [
                    "self"
                ],
                "test": [
                    "self"
                ]
            },
            "ReduceMinTest": {
                "test_name": [
                    "self"
                ],
                "test": [
                    "self"
                ]
            },
            "ReduceMaxTest": {
                "test_name": [
                    "self"
                ],
                "test": [
                    "self"
                ]
            },
            "BaseReduceBoolean": {
                "setUp": [
                    "self"
                ]
            },
            "ReduceAllTest": {
                "test_name": [
                    "self"
                ],
                "test": [
                    "self"
                ]
            },
            "ReduceAnyTest": {
                "test_name": [
                    "self"
                ],
                "test": [
                    "self"
                ]
            },
            "TileTest": {
                "test_name": [
                    "self"
                ],
                "test": [
                    "self"
                ],
                "test_invalid_input": [
                    "self"
                ]
            },
            "PadTest": {
                "test_name": [
                    "self"
                ],
                "test": [
                    "self"
                ],
                "test_invalid_input": [
                    "self"
                ]
            },
            "ConstantTest": {
                "test_name": [
                    "self"
                ],
                "test_scalar": [
                    "self"
                ],
                "test_infer_shape": [
                    "self"
                ],
                "test_specify_shape": [
                    "self"
                ],
                "test_existing_axes": [
                    "self"
                ]
            },
            "ZerosLikeTest": {
                "test_name": [
                    "self"
                ],
                "test": [
                    "self"
                ]
            },
            "OnesLikeTest": {
                "test_name": [
                    "self"
                ],
                "test": [
                    "self"
                ]
            },
            "CastTest": {
                "test_name": [
                    "self"
                ],
                "test": [
                    "self"
                ]
            },
            "VerifyTensorAllFiniteTest": {
                "setUp": [
                    "self"
                ],
                "test_name": [
                    "self"
                ],
                "test_finite": [
                    "self"
                ],
                "test_nan": [
                    "self"
                ]
            },
            "BooleanMaskTest": {
                "test_name": [
                    "self"
                ],
                "test": [
                    "self"
                ],
                "test_invalid_rank": [
                    "self"
                ],
                "test_mismatched_axis": [
                    "self"
                ]
            },
            "WhereTest": {
                "test_name": [
                    "self"
                ],
                "test": [
                    "self"
                ],
                "test_mismatched_axes": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.labeled_tensor.python.ops.sugar_test": {
            "Base": {
                "setUp": [
                    "self"
                ]
            },
            "ReshapeCoderTest": {
                "setUp": [
                    "self"
                ],
                "test_name": [
                    "self"
                ],
                "test_bijection_flat": [
                    "self"
                ],
                "test_bijection_with_labels": [
                    "self"
                ],
                "test_invalid_input": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.labeled_tensor.python.ops._typecheck": {
            "_replace_forward_references": [
                "t",
                "context"
            ],
            "register_type_abbreviation": [
                "name",
                "alias"
            ],
            "_type_repr": [
                "t"
            ],
            "accepts": [],
            "returns": [],
            "Type": {
                "__init__": [
                    "self"
                ],
                "__repr__": [
                    "self"
                ]
            },
            "_SingleArgumentType": {
                "__init__": [
                    "self",
                    "tpe"
                ],
                "_type": [
                    "self"
                ]
            },
            "_TwoArgumentType": {
                "__init__": [
                    "self",
                    "first_type",
                    "second_type"
                ]
            },
            "Union": {
                "__instancecheck__": [
                    "self",
                    "instance"
                ]
            },
            "Optional": {
                "__instancecheck__": [
                    "self",
                    "instance"
                ]
            },
            "List": {
                "__instancecheck__": [
                    "self",
                    "instance"
                ]
            },
            "Sequence": {
                "__instancecheck__": [
                    "self",
                    "instance"
                ]
            },
            "Collection": {
                "__instancecheck__": [
                    "self",
                    "instance"
                ]
            },
            "Tuple": {
                "__instancecheck__": [
                    "self",
                    "instance"
                ]
            },
            "Mapping": {
                "__instancecheck__": [
                    "self",
                    "instance"
                ]
            },
            "Dict": {
                "__instancecheck__": [
                    "self",
                    "instance"
                ]
            },
            "Error": {}
        },
        "tensorflow.contrib.labeled_tensor.python.ops.core_test": {
            "AxisTest": {
                "setUp": [
                    "self"
                ],
                "test_equality": [
                    "self"
                ],
                "test_axis_value": [
                    "self"
                ],
                "test_axis_input": [
                    "self"
                ],
                "test_axis_value_input": [
                    "self"
                ],
                "test_size": [
                    "self"
                ],
                "test_concat_single": [
                    "self"
                ],
                "test_concat_many": [
                    "self"
                ],
                "test_concat_different_names": [
                    "self"
                ],
                "test_concat_unknown": [
                    "self"
                ],
                "test_repr": [
                    "self"
                ],
                "test_invalid_input": [
                    "self"
                ],
                "test_as_axis": [
                    "self"
                ]
            },
            "AxesTest": {
                "setUp": [
                    "self"
                ],
                "test_equality": [
                    "self"
                ],
                "test_repr": [
                    "self"
                ],
                "test_remove": [
                    "self"
                ],
                "test_typecheck_error_message": [
                    "self"
                ]
            },
            "LabeledTensorTest": {
                "setUp": [
                    "self"
                ],
                "test_repr": [
                    "self"
                ],
                "test_reuse_existing_axes": [
                    "self"
                ],
                "test_reuse_existing_axis_objects": [
                    "self"
                ],
                "test_indexing_scalars": [
                    "self"
                ],
                "test_indexing_1d": [
                    "self"
                ],
                "test_indexing_slices": [
                    "self"
                ],
                "test_invalid_indexing": [
                    "self"
                ],
                "test_unknown_size": [
                    "self"
                ],
                "test_eq": [
                    "self"
                ],
                "test_hash": [
                    "self"
                ],
                "test_name": [
                    "self"
                ],
                "test_dtype": [
                    "self"
                ],
                "test_get_shape": [
                    "self"
                ],
                "test_convert_to_tensor": [
                    "self"
                ]
            },
            "Base": {
                "setUp": [
                    "self"
                ]
            },
            "IdentityTest": {
                "test_name": [
                    "self"
                ]
            },
            "SliceFunctionTest": {
                "test_name": [
                    "self"
                ],
                "test_scalar": [
                    "self"
                ],
                "test_slice": [
                    "self"
                ],
                "test_slices": [
                    "self"
                ],
                "test_slice_unlabeled": [
                    "self"
                ],
                "test_slice_unknown_shape": [
                    "self"
                ]
            },
            "TransposeTest": {
                "test_name": [
                    "self"
                ],
                "test_identity": [
                    "self"
                ],
                "test": [
                    "self"
                ],
                "test_default_axis_order": [
                    "self"
                ],
                "test_invalid_input": [
                    "self"
                ]
            },
            "ExpandDimsTest": {
                "test_name": [
                    "self"
                ],
                "test_identity": [
                    "self"
                ],
                "test": [
                    "self"
                ],
                "test_label": [
                    "self"
                ],
                "test_unknown_dimension": [
                    "self"
                ],
                "test_invalid_input": [
                    "self"
                ]
            },
            "AxisOrderScopeTest": {
                "test": [
                    "self"
                ]
            },
            "CheckAxisOrderTest": {
                "test_passes": [
                    "self"
                ],
                "test_invalid": [
                    "self"
                ],
                "test_scope": [
                    "self"
                ]
            },
            "ImposeAxisOrderTest": {
                "test_identity": [
                    "self"
                ],
                "test_reverse": [
                    "self"
                ],
                "test_scope": [
                    "self"
                ],
                "test_invalid": [
                    "self"
                ]
            },
            "FindConsistentOrderingTest": {
                "test": [
                    "self"
                ]
            },
            "AlignTest": {
                "test_name": [
                    "self"
                ],
                "test_identical_shaped_inputs": [
                    "self"
                ],
                "test_different_inputs": [
                    "self"
                ],
                "test_axis_order_scope": [
                    "self"
                ],
                "test_invalid_input": [
                    "self"
                ]
            },
            "ConvertToLabeledTensorTest": {
                "test_labeled_tensor": [
                    "self"
                ],
                "test_python_scalar": [
                    "self"
                ],
                "test_numpy_array": [
                    "self"
                ],
                "test_tensor": [
                    "self"
                ],
                "test_invalid_input": [
                    "self"
                ]
            },
            "DocStringCheckMixin": {
                "test_function_docstring_and_name": [
                    "self"
                ]
            },
            "UnaryOpsTestsMixin": {
                "test_core_op": [
                    "self"
                ],
                "test_infix": [
                    "self"
                ]
            },
            "CoreUnaryOpsTest": {
                "setUp": [
                    "self"
                ]
            },
            "LogicalNotTest": {
                "setUp": [
                    "self"
                ]
            },
            "BinaryOpsTestsMixin": {
                "test_core_op": [
                    "self"
                ],
                "test_infix": [
                    "self"
                ]
            },
            "CoreBinaryOpsTest": {
                "setUp": [
                    "self"
                ],
                "test_reflexive": [
                    "self"
                ]
            },
            "LogicalBinaryOpsTest": {
                "setUp": [
                    "self"
                ]
            },
            "FloatBinaryOpsTest": {
                "setUp": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.labeled_tensor.python.ops.test_util": {
            "Base": {
                "eval": [
                    "self",
                    "tensors"
                ],
                "assertTensorsEqual": [
                    "self",
                    "tensor_0",
                    "tensor_1"
                ],
                "assertLabeledTensorsEqual": [
                    "self",
                    "tensor_0",
                    "tensor_1"
                ]
            }
        },
        "tensorflow.contrib.labeled_tensor.python.ops.io_ops_test": {
            "ParseBase": {
                "setUp": [
                    "self"
                ]
            },
            "TestParseExample": {
                "test": [
                    "self"
                ],
                "test_placeholder": [
                    "self"
                ]
            },
            "TestParseSingleExample": {
                "test": [
                    "self"
                ],
                "test_unknown_size": [
                    "self"
                ]
            },
            "PlaceholderTest": {
                "test_name": [
                    "self"
                ],
                "test": [
                    "self"
                ],
                "test_feed": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.labeled_tensor.python.ops.sugar": {
            "ReshapeCoder": {
                "__init__": [
                    "self",
                    "existing_axis_names",
                    "new_axes",
                    "name"
                ],
                "encode": [
                    "self",
                    "labeled_tensor"
                ],
                "decode": [
                    "self",
                    "labeled_tensor"
                ]
            }
        },
        "tensorflow.contrib.labeled_tensor.python.ops.core": {
            "as_axis": [
                "axis_data"
            ],
            "_convert_labeled_tensor_to_tensor": [
                "value"
            ],
            "convert_to_labeled_tensor": [
                "value",
                "dtype",
                "name"
            ],
            "concat_axes": [
                "axes"
            ],
            "identity": [
                "labeled_tensor",
                "name"
            ],
            "slice_function": [
                "labeled_tensor",
                "selection",
                "name"
            ],
            "transpose": [
                "labeled_tensor",
                "axis_order",
                "name"
            ],
            "expand_dims": [
                "labeled_tensor",
                "axes",
                "name"
            ],
            "get_axis_order": [],
            "_set_axis_order": [
                "axis_order"
            ],
            "axis_order_scope": [
                "axis_order"
            ],
            "_get_valid_axis_order": [],
            "check_axis_order": [
                "labeled_tensor",
                "axis_order"
            ],
            "impose_axis_order": [
                "labeled_tensor",
                "axis_order",
                "name"
            ],
            "_find_consistent_ordering": [
                "a",
                "b"
            ],
            "align": [
                "labeled_tensor_0",
                "labeled_tensor_1",
                "name"
            ],
            "define_unary_op": [
                "op_name",
                "elementwise_function"
            ],
            "define_binary_op": [
                "op_name",
                "elementwise_function"
            ],
            "Axis": {
                "__init__": [
                    "self",
                    "name",
                    "value"
                ],
                "name": [
                    "self"
                ],
                "__repr__": [
                    "self"
                ],
                "__eq__": [
                    "self",
                    "other"
                ],
                "__hash__": [
                    "self"
                ],
                "__ne__": [
                    "self",
                    "other"
                ],
                "__len__": [
                    "self"
                ],
                "dimension": [
                    "self"
                ],
                "size": [
                    "self"
                ],
                "value": [
                    "self"
                ],
                "labels": [
                    "self"
                ],
                "index": [
                    "self",
                    "value"
                ]
            },
            "Axes": {
                "__init__": [
                    "self",
                    "axes"
                ],
                "__iter__": [
                    "self"
                ],
                "__repr__": [
                    "self"
                ],
                "__getitem__": [
                    "self",
                    "name"
                ],
                "__contains__": [
                    "self",
                    "name"
                ],
                "__len__": [
                    "self"
                ],
                "__hash__": [
                    "self"
                ],
                "remove": [
                    "self",
                    "axis_name"
                ]
            },
            "LabeledTensor": {
                "__init__": [
                    "self",
                    "tensor",
                    "axes"
                ],
                "__repr__": [
                    "self"
                ],
                "tensor": [
                    "self"
                ],
                "_as_graph_element": [
                    "self"
                ],
                "axes": [
                    "self"
                ],
                "dtype": [
                    "self"
                ],
                "name": [
                    "self"
                ],
                "get_shape": [
                    "self"
                ],
                "__getitem__": [
                    "self",
                    "key"
                ],
                "__abs__": [
                    "self"
                ],
                "__neg__": [
                    "self"
                ],
                "__pos__": [
                    "self"
                ],
                "__add__": [
                    "self",
                    "other"
                ],
                "__radd__": [
                    "self",
                    "other"
                ],
                "__sub__": [
                    "self",
                    "other"
                ],
                "__rsub__": [
                    "self",
                    "other"
                ],
                "__mul__": [
                    "self",
                    "other"
                ],
                "__rmul__": [
                    "self",
                    "other"
                ],
                "__truediv__": [
                    "self",
                    "other"
                ],
                "__rtruediv__": [
                    "self",
                    "other"
                ],
                "__mod__": [
                    "self",
                    "other"
                ],
                "__rmod__": [
                    "self",
                    "other"
                ],
                "__pow__": [
                    "self",
                    "other"
                ],
                "__rpow__": [
                    "self",
                    "other"
                ],
                "__invert__": [
                    "self"
                ],
                "__and__": [
                    "self",
                    "other"
                ],
                "__or__": [
                    "self",
                    "other"
                ],
                "__xor__": [
                    "self",
                    "other"
                ],
                "__lt__": [
                    "self",
                    "other"
                ],
                "__le__": [
                    "self",
                    "other"
                ],
                "__gt__": [
                    "self",
                    "other"
                ],
                "__ge__": [
                    "self",
                    "other"
                ],
                "__eq__": [
                    "self",
                    "other"
                ],
                "__ne__": [
                    "self",
                    "other"
                ],
                "__hash__": [
                    "self"
                ]
            },
            "AxisOrderError": {}
        },
        "tensorflow.contrib.labeled_tensor.python.ops": {},
        "tensorflow.contrib.labeled_tensor.python.ops.nn_test": {
            "NNTests": {
                "setUp": [
                    "self"
                ],
                "test_unary_ops": [
                    "self"
                ],
                "test_binary_ops": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.labeled_tensor.python.ops.nn": {},
        "tensorflow.contrib.framework": {},
        "tensorflow.contrib.framework.kernels": {},
        "tensorflow.contrib.framework.python": {},
        "tensorflow.contrib.framework.python.ops.ops": {
            "get_graph_from_inputs": [
                "op_input_list",
                "graph"
            ]
        },
        "tensorflow.contrib.framework.python.ops.ops_test": {
            "OpsTest": {
                "testGetGraphFromEmptyInputs": [
                    "self"
                ],
                "testGetGraphFromValidInputs": [
                    "self"
                ],
                "testGetGraphFromInvalidInputs": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.framework.python.ops.arg_scope_test": {
            "func1": [],
            "func2": [],
            "func3": [
                "args",
                "a",
                "b",
                "c"
            ],
            "_key_op": [
                "op"
            ],
            "ArgScopeTest": {
                "testEmptyArgScope": [
                    "self"
                ],
                "testClearArgScope": [
                    "self"
                ],
                "testNonDecorated": [
                    "self"
                ],
                "testUnexpectedArg": [
                    "self"
                ],
                "testCurrentArgScope": [
                    "self"
                ],
                "testArgScopedArguments": [
                    "self"
                ],
                "testCurrentArgScopeNested": [
                    "self"
                ],
                "testReuseArgScope": [
                    "self"
                ],
                "testReuseArgScopeNested": [
                    "self"
                ],
                "testSimpleArgScope": [
                    "self"
                ],
                "testSimpleArgScopeWithTuple": [
                    "self"
                ],
                "testOverwriteArgScope": [
                    "self"
                ],
                "testNestedArgScope": [
                    "self"
                ],
                "testSharedArgScope": [
                    "self"
                ],
                "testSharedArgScopeTuple": [
                    "self"
                ],
                "testPartiallySharedArgScope": [
                    "self"
                ],
                "testDocString": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.framework.python.ops.prettyprint_ops_test": {
            "PrettyPrintOpsTest": {
                "testPrintTensorPassthrough": [
                    "self"
                ],
                "testPrintSparseTensorPassthrough": [
                    "self"
                ],
                "testPrintTensorArrayPassthrough": [
                    "self"
                ],
                "testPrintVariable": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.framework.python.ops.variables_test": {
            "LocalVariableTest": {
                "test_local_variable": [
                    "self"
                ],
                "testLocalVariableNameAndShape": [
                    "self"
                ],
                "testLocalVariableNotInAllVariables": [
                    "self"
                ],
                "testLocalVariableNotInVariablesToRestore": [
                    "self"
                ],
                "testGetVariablesDontReturnsTransients": [
                    "self"
                ],
                "testGetLocalVariablesReturnsTransients": [
                    "self"
                ],
                "testInitializedVariableValue": [
                    "self"
                ]
            },
            "GlobalStepTest": {
                "_assert_global_step": [
                    "self",
                    "global_step",
                    "expected_dtype"
                ],
                "test_invalid_dtype": [
                    "self"
                ],
                "test_invalid_shape": [
                    "self"
                ],
                "test_create_global_step": [
                    "self"
                ],
                "test_get_global_step": [
                    "self"
                ],
                "test_get_or_create_global_step": [
                    "self"
                ]
            },
            "VariablesTest": {
                "testCreateVariable": [
                    "self"
                ],
                "testGetVariables": [
                    "self"
                ],
                "testGetVariablesWithScope": [
                    "self"
                ],
                "testGetVariablesSuffix": [
                    "self"
                ],
                "testGetVariableWithSingleVar": [
                    "self"
                ],
                "testGetVariableWithDistractors": [
                    "self"
                ],
                "testGetVariableThrowsExceptionWithNoMatch": [
                    "self"
                ],
                "testGetThrowsExceptionWithChildrenButNoMatch": [
                    "self"
                ],
                "testGetVariablesToRestore": [
                    "self"
                ],
                "testIncludeGetVariablesToRestore": [
                    "self"
                ],
                "testExcludeGetVariablesToRestore": [
                    "self"
                ],
                "testWrongIncludeGetVariablesToRestore": [
                    "self"
                ],
                "testGetMixedVariablesToRestore": [
                    "self"
                ],
                "testExcludeGetMixedVariablesToRestore": [
                    "self"
                ],
                "testReuseVariable": [
                    "self"
                ],
                "testVariableWithRegularizer": [
                    "self"
                ],
                "testVariableWithRegularizerColocate": [
                    "self"
                ],
                "testVariableWithDevice": [
                    "self"
                ],
                "testVariableWithDeviceFromScope": [
                    "self"
                ],
                "testVariableWithDeviceFunction": [
                    "self"
                ],
                "testVariableWithReplicaDeviceSetter": [
                    "self"
                ],
                "testVariableWithVariableDeviceChooser": [
                    "self"
                ],
                "testVariableGPUPlacement": [
                    "self"
                ]
            },
            "ModelVariablesTest": {
                "testNameAndShape": [
                    "self"
                ],
                "testNotInLocalVariables": [
                    "self"
                ],
                "testGetVariablesReturns": [
                    "self"
                ],
                "testGetModelVariables": [
                    "self"
                ],
                "testGetLocalVariables": [
                    "self"
                ],
                "testInitializedVariableValue": [
                    "self"
                ],
                "testDeviceFn": [
                    "self"
                ],
                "testVariableWithVariableDeviceChooser": [
                    "self"
                ]
            },
            "GetVariablesCollections": {
                "testVariableCollection": [
                    "self"
                ],
                "testVariableCollections": [
                    "self"
                ],
                "testVariableCollectionsWithArgScope": [
                    "self"
                ],
                "testVariableCollectionsWithArgScopeNested": [
                    "self"
                ],
                "testVariableCollectionsWithArgScopeNonNested": [
                    "self"
                ],
                "testVariableRestoreWithArgScopeNested": [
                    "self"
                ]
            },
            "GetVariablesBySuffixTest": {
                "testGetVariableGivenNameScoped": [
                    "self"
                ],
                "testGetVariableWithScope": [
                    "self"
                ],
                "testGetVariableWithoutScope": [
                    "self"
                ]
            },
            "GetVariablesByNameTest": {
                "testGetVariableGivenNameScoped": [
                    "self"
                ],
                "testGetVariableWithScope": [
                    "self"
                ],
                "testGetVariableWithoutScope": [
                    "self"
                ]
            },
            "AssignFromValuesTest": {
                "testNoScopes": [
                    "self"
                ],
                "testWithScopes": [
                    "self"
                ]
            },
            "AssignFromValuesFnTest": {
                "testNoScopes": [
                    "self"
                ],
                "testWithScopes": [
                    "self"
                ]
            },
            "AssignFromCheckpointTest": {
                "create_checkpoint_from_values": [
                    "self",
                    "var_names_to_values",
                    "checkpoint_dir",
                    "global_step"
                ],
                "testLoadExistingVariables": [
                    "self"
                ],
                "testRaisesValueErrorIfAVariableIsntFound": [
                    "self"
                ],
                "testInitFromCheckpointWithScopes": [
                    "self"
                ]
            },
            "AssignFromCheckpointFnTest": {
                "create_checkpoint_from_values": [
                    "self",
                    "var_names_to_values",
                    "checkpoint_dir",
                    "global_step"
                ],
                "testLoadExistingVariables": [
                    "self"
                ],
                "testLoadExistingVariablesDifferentShapeDefaultDoesNotAllowReshape": [
                    "self"
                ],
                "testLoadExistingVariablesDifferentShapeAllowReshape": [
                    "self"
                ],
                "testNotFoundError": [
                    "self"
                ],
                "testMissingVariablesList": [
                    "self"
                ],
                "testMissingVariablesDict": [
                    "self"
                ]
            },
            "ZeroInitializerOpTest": {
                "_testZeroInitializer": [
                    "self",
                    "shape",
                    "initializer",
                    "use_init"
                ],
                "testZeroInitializer": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.framework.python.ops": {},
        "tensorflow.contrib.framework.python.ops.variables": {
            "zero_initializer": [
                "ref",
                "use_locking",
                "name"
            ],
            "assert_global_step": [
                "global_step_tensor"
            ],
            "assert_or_get_global_step": [
                "graph",
                "global_step_tensor"
            ],
            "get_global_step": [
                "graph"
            ],
            "create_global_step": [
                "graph"
            ],
            "get_or_create_global_step": [
                "graph"
            ],
            "local_variable": [
                "initial_value",
                "validate_shape",
                "name"
            ],
            "variable": [
                "name",
                "shape",
                "dtype",
                "initializer",
                "regularizer",
                "trainable",
                "collections",
                "caching_device",
                "device"
            ],
            "model_variable": [
                "name",
                "shape",
                "dtype",
                "initializer",
                "regularizer",
                "trainable",
                "collections",
                "caching_device",
                "device"
            ],
            "add_model_variable": [
                "var"
            ],
            "get_variables": [
                "scope",
                "suffix",
                "collection"
            ],
            "get_model_variables": [
                "scope",
                "suffix"
            ],
            "get_local_variables": [
                "scope",
                "suffix"
            ],
            "get_variables_to_restore": [
                "include",
                "exclude"
            ],
            "get_variables_by_suffix": [
                "suffix",
                "scope"
            ],
            "get_variables_by_name": [
                "given_name",
                "scope"
            ],
            "get_unique_variable": [
                "var_op_name"
            ],
            "assign_from_values": [
                "var_names_to_values"
            ],
            "assign_from_values_fn": [
                "var_names_to_values"
            ],
            "assign_from_checkpoint": [
                "model_path",
                "var_list"
            ],
            "assign_from_checkpoint_fn": [
                "model_path",
                "var_list",
                "ignore_missing_vars",
                "reshape_variables"
            ],
            "VariableDeviceChooser": {
                "__init__": [
                    "self",
                    "num_tasks",
                    "job_name",
                    "device_type",
                    "device_index"
                ],
                "__call__": [
                    "self",
                    "op"
                ]
            }
        },
        "tensorflow.contrib.framework.python.ops.gen_variable_ops": {
            "zero_initializer": [
                "ref",
                "name"
            ],
            "_InitOpDefLibrary": []
        },
        "tensorflow.contrib.framework.python.ops.prettyprint_ops": {
            "_get_tensor_repr": [
                "t",
                "print_tensor_name",
                "print_tensor_type",
                "print_shape",
                "summarize_indicator_vector"
            ],
            "print_op": [
                "input_",
                "data",
                "message",
                "first_n",
                "summarize",
                "print_tensor_name",
                "print_tensor_type",
                "print_shape",
                "summarize_indicator_vector",
                "name"
            ]
        },
        "tensorflow.contrib.framework.python.ops.arg_scope": {
            "_get_arg_stack": [],
            "_current_arg_scope": [],
            "_key_op": [
                "op"
            ],
            "_name_op": [
                "op"
            ],
            "_kwarg_names": [
                "func"
            ],
            "_add_op": [
                "op"
            ],
            "arg_scope": [
                "list_ops_or_scope"
            ],
            "add_arg_scope": [
                "func"
            ],
            "has_arg_scope": [
                "func"
            ],
            "arg_scoped_arguments": [
                "func"
            ]
        },
        "tensorflow.contrib.framework.python.framework.checkpoint_utils": {
            "_get_checkpoint_filename": [
                "filepattern"
            ],
            "load_checkpoint": [
                "filepattern"
            ],
            "load_variable": [
                "checkpoint_dir",
                "name"
            ],
            "list_variables": [
                "checkpoint_dir"
            ],
            "_set_checkpoint_initializer": [
                "variable",
                "file_pattern",
                "tensor_name",
                "slice_spec",
                "name"
            ],
            "_set_variable_or_list_initializer": [
                "variable_or_list",
                "file_pattern",
                "tensor_name"
            ],
            "init_from_checkpoint": [
                "checkpoint_dir",
                "assignment_map"
            ]
        },
        "tensorflow.contrib.framework.python.framework.checkpoint_utils_test": {
            "_create_checkpoints": [
                "sess",
                "checkpoint_dir"
            ],
            "_create_partition_checkpoints": [
                "sess",
                "checkpoint_dir"
            ],
            "CheckpointsTest": {
                "testNoCheckpoints": [
                    "self"
                ],
                "testNoTensor": [
                    "self"
                ],
                "testGetTensor": [
                    "self"
                ],
                "testGetAllVariables": [
                    "self"
                ],
                "testInitFromCheckpoint": [
                    "self"
                ],
                "testInitFromRootCheckpoint": [
                    "self"
                ],
                "testInitFromPartitionVar": [
                    "self"
                ],
                "testInitFromCheckpointMissing": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.framework.python.framework.experimental_test": {
            "ExperimentalTest": {
                "test_warning": [
                    "self",
                    "mock_warning"
                ]
            }
        },
        "tensorflow.contrib.framework.python.framework.experimental": {
            "_add_experimental_function_notice_to_docstring": [
                "doc"
            ],
            "experimental": [
                "func"
            ]
        },
        "tensorflow.contrib.framework.python.framework": {},
        "tensorflow.contrib.framework.python.framework.tensor_util_test": {
            "FloatDTypeTest": {
                "test_assert_same_float_dtype": [
                    "self"
                ]
            },
            "AssertScalarTest": {
                "test_assert_scalar": [
                    "self"
                ],
                "test_assert_scalar_int": [
                    "self"
                ]
            },
            "LocalVariabletest": {
                "test_local_variable": [
                    "self"
                ]
            },
            "ReduceSumNTest": {
                "test_reduce_sum_n": [
                    "self"
                ]
            },
            "WithShapeTest": {
                "_assert_with_shape": [
                    "self",
                    "tensor",
                    "expected_value",
                    "expected_shape",
                    "unexpected_shapes"
                ],
                "test_with_shape_invalid_expected_shape": [
                    "self"
                ],
                "test_with_shape_invalid_type": [
                    "self"
                ],
                "test_with_shape_0": [
                    "self"
                ],
                "test_with_shape_1": [
                    "self"
                ],
                "test_with_shape_2": [
                    "self"
                ],
                "test_with_shape_2x2": [
                    "self"
                ],
                "test_with_shape_none": [
                    "self"
                ],
                "test_with_shape_partial": [
                    "self"
                ]
            },
            "ConvertToTensorOrSparseTensorTest": {
                "test_convert_dense": [
                    "self"
                ],
                "test_convert_sparse": [
                    "self"
                ]
            },
            "RemoveSqueezableDimensionsTest": {
                "testRemoveSqueezableDimensions": [
                    "self"
                ],
                "testRemoveSqueezableDimensions_extraLabelDim": [
                    "self"
                ],
                "testRemoveSqueezableDimensions_staticLabel": [
                    "self"
                ],
                "testRemoveSqueezableDimensions_staticLabel_extraLabelDim": [
                    "self"
                ],
                "testRemoveSqueezableDimensions_extraPredictionDim": [
                    "self"
                ],
                "testRemoveSqueezableDimensions_extraPredictionDim_staticLabel": [
                    "self"
                ],
                "testRemoveSqueezableDimensions_staticPrediction": [
                    "self"
                ],
                "testRemoveSqueezableDimensions_staticPrediction_extraLabelDim": [
                    "self"
                ],
                "testRemoveSqueezableDimensions_static": [
                    "self"
                ],
                "testRemoveSqueezableDimensions_static_extraLabelDim": [
                    "self"
                ],
                "testRemoveSqueezableDimensions_staticPrediction_extraPredictionDim": [
                    "self"
                ],
                "testRemoveSqueezableDimensions_static_extraPredictionDim": [
                    "self"
                ],
                "_testRemoveSqueezableDimensions": [
                    "self",
                    "predictions_have_static_shape",
                    "predictions_have_extra_dim",
                    "labels_have_static_shape",
                    "labels_have_extra_dim"
                ]
            }
        },
        "tensorflow.contrib.framework.python.framework.tensor_util": {
            "_assert_same_base_type": [
                "items",
                "expected_type"
            ],
            "assert_same_float_dtype": [
                "tensors",
                "dtype"
            ],
            "assert_scalar_int": [
                "tensor"
            ],
            "assert_scalar": [
                "tensor"
            ],
            "reduce_sum_n": [
                "tensors",
                "name"
            ],
            "remove_squeezable_dimensions": [
                "predictions",
                "labels"
            ],
            "_all_equal": [
                "tensor0",
                "tensor1"
            ],
            "_is_rank": [
                "expected_rank",
                "actual_tensor"
            ],
            "_is_shape": [
                "expected_shape",
                "actual_tensor",
                "actual_shape"
            ],
            "_assert_shape_op": [
                "expected_shape",
                "actual_tensor"
            ],
            "with_same_shape": [
                "expected_tensor",
                "tensor"
            ],
            "is_tensor": [
                "x"
            ],
            "with_shape": [
                "expected_shape",
                "tensor"
            ],
            "convert_to_tensor_or_sparse_tensor": [
                "value",
                "dtype",
                "name",
                "as_ref"
            ]
        },
        "tensorflow.contrib.framework.ops": {},
        "tensorflow.contrib.tfprof": {},
        "tensorflow.contrib.layers": {},
        "tensorflow.contrib.layers.kernels": {},
        "tensorflow.contrib.layers.python": {},
        "tensorflow.contrib.layers.python.ops.sparse_feature_cross_op": {
            "sparse_feature_cross": [
                "inputs",
                "hashed_output",
                "num_buckets",
                "name",
                "hash_key"
            ]
        },
        "tensorflow.contrib.layers.python.ops.bucketization_op": {
            "bucketize": [
                "input_tensor",
                "boundaries",
                "name"
            ]
        },
        "tensorflow.contrib.layers.python.ops.sparse_ops": {
            "_multiplier_helper": [
                "shape"
            ],
            "dense_to_sparse_tensor": [
                "dense_tensor",
                "ignore_value"
            ]
        },
        "tensorflow.contrib.layers.python.ops": {},
        "tensorflow.contrib.layers.python.ops.sparse_ops_test": {
            "SparseOpsTest": {
                "test_dense_to_sparse_tensor_1d": [
                    "self"
                ],
                "test_dense_to_sparse_tensor_1d_float": [
                    "self"
                ],
                "test_dense_to_sparse_tensor_1d_bool": [
                    "self"
                ],
                "test_dense_to_sparse_tensor_1d_str": [
                    "self"
                ],
                "test_dense_to_sparse_tensor_1d_str_special_ignore": [
                    "self"
                ],
                "test_dense_to_sparse_tensor_2d": [
                    "self"
                ],
                "test_dense_to_sparse_tensor_3d": [
                    "self"
                ],
                "test_dense_to_sparse_tensor_1d_no_shape": [
                    "self"
                ],
                "test_dense_to_sparse_tensor_3d_no_shape": [
                    "self"
                ],
                "test_convert_to_sparse_undef_shape": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.layers.python.kernel_tests.bucketization_op_test": {
            "BucketizationOpTest": {
                "test_normal_usecase": [
                    "self"
                ],
                "test_invalid_boundaries_order": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.layers.python.kernel_tests": {},
        "tensorflow.contrib.layers.python.kernel_tests.sparse_feature_cross_op_test": {
            "SparseCrossOpTest": {
                "test_simple": [
                    "self"
                ],
                "test_dense": [
                    "self"
                ],
                "test_integer_mixed_string_sparse": [
                    "self"
                ],
                "test_integer_mixed_string_dense": [
                    "self"
                ],
                "test_sparse_cross_dense": [
                    "self"
                ],
                "test_integer_sparse_input": [
                    "self"
                ],
                "test_permutation_3x3x3": [
                    "self"
                ],
                "test_permutation_3x1x2": [
                    "self"
                ],
                "test_large_batch": [
                    "self"
                ],
                "test_one_column_empty": [
                    "self"
                ],
                "test_some_columns_empty": [
                    "self"
                ],
                "test_all_columns_empty": [
                    "self"
                ],
                "test_hashed_output_zero_bucket": [
                    "self"
                ],
                "test_hashed_output_zero_bucket_v2": [
                    "self"
                ],
                "test_hashed_output": [
                    "self"
                ],
                "test_hashed_output_v2": [
                    "self"
                ],
                "test_hashed_output_v1_has_collision": [
                    "self"
                ],
                "test_hashed_output_v2_has_no_collision": [
                    "self"
                ],
                "test_hashed_3x1x2": [
                    "self"
                ],
                "_assert_sparse_tensor_empty": [
                    "self",
                    "sp"
                ],
                "_assert_sparse_tensor_equals": [
                    "self",
                    "sp1",
                    "sp2"
                ],
                "_sparse_tensor": [
                    "self",
                    "data",
                    "batch_size"
                ]
            }
        },
        "tensorflow.contrib.layers.python.layers.utils_test": {
            "ConstantValueTest": {
                "test_value": [
                    "self"
                ],
                "test_constant": [
                    "self"
                ],
                "test_variable": [
                    "self"
                ],
                "test_placeholder": [
                    "self"
                ]
            },
            "StaticCondTest": {
                "test_value": [
                    "self"
                ],
                "test_constant": [
                    "self"
                ],
                "test_variable": [
                    "self"
                ],
                "test_tensors": [
                    "self"
                ]
            },
            "SmartCondStaticTest": {
                "test_value": [
                    "self"
                ],
                "test_constant": [
                    "self"
                ],
                "test_variable": [
                    "self"
                ],
                "test_tensors": [
                    "self"
                ]
            },
            "SmartCondDynamicTest": {
                "test_value": [
                    "self"
                ],
                "test_constant": [
                    "self"
                ],
                "test_variable": [
                    "self"
                ],
                "test_tensors": [
                    "self"
                ]
            },
            "CollectNamedOutputsTest": {
                "test_collect": [
                    "self"
                ],
                "test_aliases": [
                    "self"
                ],
                "test_gather_aliases": [
                    "self"
                ]
            },
            "NPositiveIntegersTest": {
                "test_invalid_input": [
                    "self"
                ],
                "test_valid_input": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.layers.python.layers.layers": {
            "avg_pool2d": [
                "inputs",
                "kernel_size",
                "stride",
                "padding",
                "data_format",
                "outputs_collections",
                "scope"
            ],
            "_fused_batch_norm": [
                "inputs",
                "decay",
                "center",
                "scale",
                "epsilon",
                "activation_fn",
                "param_initializers",
                "updates_collections",
                "is_training",
                "reuse",
                "variables_collections",
                "outputs_collections",
                "trainable",
                "data_format",
                "scope"
            ],
            "batch_norm": [
                "inputs",
                "decay",
                "center",
                "scale",
                "epsilon",
                "activation_fn",
                "param_initializers",
                "updates_collections",
                "is_training",
                "reuse",
                "variables_collections",
                "outputs_collections",
                "trainable",
                "batch_weights",
                "fused",
                "data_format",
                "scope"
            ],
            "bias_add": [
                "inputs",
                "activation_fn",
                "initializer",
                "regularizer",
                "reuse",
                "variables_collections",
                "outputs_collections",
                "trainable",
                "data_format",
                "scope"
            ],
            "convolution": [
                "inputs",
                "num_outputs",
                "kernel_size",
                "stride",
                "padding",
                "data_format",
                "rate",
                "activation_fn",
                "normalizer_fn",
                "normalizer_params",
                "weights_initializer",
                "weights_regularizer",
                "biases_initializer",
                "biases_regularizer",
                "reuse",
                "variables_collections",
                "outputs_collections",
                "trainable",
                "scope"
            ],
            "convolution2d_in_plane": [
                "inputs",
                "kernel_size",
                "stride",
                "padding",
                "activation_fn",
                "normalizer_fn",
                "normalizer_params",
                "weights_initializer",
                "weights_regularizer",
                "biases_initializer",
                "biases_regularizer",
                "reuse",
                "variables_collections",
                "outputs_collections",
                "trainable",
                "scope"
            ],
            "convolution2d_transpose": [
                "inputs",
                "num_outputs",
                "kernel_size",
                "stride",
                "padding",
                "data_format",
                "activation_fn",
                "normalizer_fn",
                "normalizer_params",
                "weights_initializer",
                "weights_regularizer",
                "biases_initializer",
                "biases_regularizer",
                "reuse",
                "variables_collections",
                "outputs_collections",
                "trainable",
                "scope"
            ],
            "dropout": [
                "inputs",
                "keep_prob",
                "noise_shape",
                "is_training",
                "outputs_collections",
                "scope"
            ],
            "flatten": [
                "inputs",
                "outputs_collections",
                "scope"
            ],
            "_sparse_inner_flatten": [
                "inputs",
                "new_rank"
            ],
            "_dense_inner_flatten": [
                "inputs",
                "new_rank"
            ],
            "_inner_flatten": [
                "inputs",
                "new_rank",
                "output_collections",
                "scope"
            ],
            "fully_connected": [
                "inputs",
                "num_outputs",
                "activation_fn",
                "normalizer_fn",
                "normalizer_params",
                "weights_initializer",
                "weights_regularizer",
                "biases_initializer",
                "biases_regularizer",
                "reuse",
                "variables_collections",
                "outputs_collections",
                "trainable",
                "scope"
            ],
            "layer_norm": [
                "inputs",
                "center",
                "scale",
                "activation_fn",
                "reuse",
                "variables_collections",
                "outputs_collections",
                "trainable",
                "scope"
            ],
            "max_pool2d": [
                "inputs",
                "kernel_size",
                "stride",
                "padding",
                "data_format",
                "outputs_collections",
                "scope"
            ],
            "pool": [
                "inputs",
                "kernel_size",
                "pooling_type",
                "padding",
                "data_format",
                "dilation_rate",
                "stride",
                "outputs_collections",
                "scope"
            ],
            "one_hot_encoding": [
                "labels",
                "num_classes",
                "on_value",
                "off_value",
                "outputs_collections",
                "scope"
            ],
            "_apply_activation": [
                "y",
                "activation_fn",
                "output_collections"
            ],
            "repeat": [
                "inputs",
                "repetitions",
                "layer"
            ],
            "separable_convolution2d": [
                "inputs",
                "num_outputs",
                "kernel_size",
                "depth_multiplier",
                "stride",
                "padding",
                "activation_fn",
                "normalizer_fn",
                "normalizer_params",
                "weights_initializer",
                "weights_regularizer",
                "biases_initializer",
                "biases_regularizer",
                "reuse",
                "variables_collections",
                "outputs_collections",
                "trainable",
                "scope"
            ],
            "softmax": [
                "logits",
                "scope"
            ],
            "stack": [
                "inputs",
                "layer",
                "stack_args"
            ],
            "unit_norm": [
                "inputs",
                "dim",
                "epsilon",
                "scope"
            ],
            "legacy_fully_connected": [
                "x",
                "num_output_units",
                "activation_fn",
                "weight_init",
                "bias_init",
                "name",
                "weight_collections",
                "bias_collections",
                "output_collections",
                "trainable",
                "weight_regularizer",
                "bias_regularizer"
            ]
        },
        "tensorflow.contrib.layers.python.layers.encoders": {
            "bow_encoder": [
                "ids",
                "vocab_size",
                "embed_dim",
                "sparse_lookup",
                "initializer",
                "regularizer",
                "trainable",
                "scope",
                "reuse"
            ],
            "embed_sequence": [
                "ids",
                "vocab_size",
                "embed_dim",
                "unique",
                "initializer",
                "regularizer",
                "trainable",
                "scope",
                "reuse"
            ]
        },
        "tensorflow.contrib.layers.python.layers.target_column_test": {
            "RegressionTargetColumnTest": {
                "testRegression": [
                    "self"
                ],
                "testRegressionWithWeights": [
                    "self"
                ]
            },
            "MultiClassTargetColumnTest": {
                "testBinaryClassification": [
                    "self"
                ],
                "testBinaryClassificationWithWeights": [
                    "self"
                ],
                "testBinaryEvalMetrics": [
                    "self"
                ],
                "testMultiClass": [
                    "self"
                ],
                "testMultiClassWithWeight": [
                    "self"
                ],
                "testMultiClassWithInvalidNClass": [
                    "self"
                ],
                "testMultiClassEvalMetrics": [
                    "self"
                ],
                "testBinarySVMDefaultWeights": [
                    "self"
                ],
                "testBinarySVMWithWeights": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.layers.python.layers.embedding_ops_test": {
            "SafeEmbeddingLookupSparseTest": {
                "_random_weights": [
                    "self",
                    "vocab_size",
                    "embed_dim",
                    "num_shards"
                ],
                "_ids_and_weights_2d": [
                    "self"
                ],
                "_ids_and_weights_3d": [
                    "self"
                ],
                "test_safe_embedding_lookup_sparse_return_zero_vector": [
                    "self"
                ],
                "test_safe_embedding_lookup_sparse_return_special_vector": [
                    "self"
                ],
                "test_safe_embedding_lookup_sparse_no_weights": [
                    "self"
                ],
                "test_safe_embedding_lookup_sparse_partitioned": [
                    "self"
                ],
                "test_safe_embedding_lookup_sparse_partitioned_inconsistent_weights": [
                    "self"
                ],
                "test_safe_embedding_lookup_sparse_3d_return_zero_vector": [
                    "self"
                ],
                "test_safe_embedding_lookup_sparse_3d_return_special_vector": [
                    "self"
                ],
                "test_safe_embedding_lookup_sparse_3d_no_weights": [
                    "self"
                ],
                "test_safe_embedding_lookup_sparse_3d_partitioned": [
                    "self"
                ],
                "test_safe_embedding_lookup_sparse_3d_partitioned_inconsistent_weights": [
                    "self"
                ]
            },
            "HashedEmbeddingLookupTest": {
                "setUp": [
                    "self"
                ],
                "_random_weights": [
                    "self",
                    "size",
                    "num_shards"
                ],
                "test_hashed_embedding_consistency": [
                    "self"
                ],
                "test_hashed_embedding_multiple_partition": [
                    "self"
                ],
                "test_hashed_embedding_coverage": [
                    "self"
                ],
                "test_hashed_embedding_multi_dimension": [
                    "self"
                ],
                "test_hashed_embedding_lookup_sparse": [
                    "self"
                ],
                "test_embedding_lookup_unique": [
                    "self"
                ],
                "test_embedding_lookup_unique_param3d": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.layers.python.layers.optimizers_test": {
            "_setup_model": [],
            "_no_op_learning_rate_decay_fn": [
                "lr",
                "global_step"
            ],
            "OptimizersTest": {
                "testSGDOptimizer": [
                    "self"
                ],
                "testNoLrCallable": [
                    "self"
                ],
                "testWrongOptimizer": [
                    "self"
                ],
                "testInvalidLoss": [
                    "self"
                ],
                "testInvalidGlobalStep": [
                    "self"
                ],
                "testInvalidLearningRate": [
                    "self"
                ],
                "testGradientNoise": [
                    "self"
                ],
                "testGradientNoiseWithClipping": [
                    "self"
                ],
                "testGradientClip": [
                    "self"
                ],
                "testAdaptiveGradientClip": [
                    "self"
                ],
                "testGradientMultiply": [
                    "self"
                ],
                "testIgnoreVariablesWithNoGradients": [
                    "self"
                ],
                "testNoGlobalStep": [
                    "self"
                ],
                "testNoGlobalStepWithDecay": [
                    "self"
                ],
                "testNoGlobalStepArg": [
                    "self"
                ],
                "testUpdateOp": [
                    "self"
                ],
                "testUpdateOpWithNoOpDecay": [
                    "self"
                ],
                "testUpdateOpFromCollection": [
                    "self"
                ]
            },
            "AdaptiveClipping": {
                "testAverages": [
                    "self"
                ],
                "testClip": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.layers.python.layers.initializers": {
            "xavier_initializer": [
                "uniform",
                "seed",
                "dtype"
            ],
            "variance_scaling_initializer": [
                "factor",
                "mode",
                "uniform",
                "seed",
                "dtype"
            ]
        },
        "tensorflow.contrib.layers.python.layers.summaries": {
            "_add_scalar_summary": [
                "tensor",
                "tag"
            ],
            "_add_histogram_summary": [
                "tensor",
                "tag"
            ],
            "summarize_activation": [
                "op"
            ],
            "summarize_tensor": [
                "tensor",
                "tag"
            ],
            "summarize_tensors": [
                "tensors",
                "summarizer"
            ],
            "summarize_collection": [
                "collection",
                "name_filter",
                "summarizer"
            ],
            "summarize_activations": [
                "name_filter",
                "summarizer"
            ]
        },
        "tensorflow.contrib.layers.python.layers.feature_column": {
            "sparse_column_with_integerized_feature": [
                "column_name",
                "bucket_size",
                "combiner",
                "dtype"
            ],
            "sparse_column_with_hash_bucket": [
                "column_name",
                "hash_bucket_size",
                "combiner",
                "dtype"
            ],
            "sparse_column_with_keys": [
                "column_name",
                "keys",
                "default_value",
                "combiner"
            ],
            "weighted_sparse_column": [
                "sparse_id_column",
                "weight_column_name",
                "dtype"
            ],
            "one_hot_column": [
                "sparse_id_column"
            ],
            "embedding_column": [
                "sparse_id_column",
                "dimension",
                "combiner",
                "initializer",
                "ckpt_to_load_from",
                "tensor_name_in_ckpt"
            ],
            "shared_embedding_columns": [
                "sparse_id_columns",
                "dimension",
                "combiner",
                "shared_embedding_name",
                "initializer",
                "ckpt_to_load_from",
                "tensor_name_in_ckpt"
            ],
            "hashed_embedding_column": [
                "column_name",
                "size",
                "dimension",
                "combiner",
                "initializer"
            ],
            "_reshape_real_valued_tensor": [
                "input_tensor",
                "output_rank",
                "column_name"
            ],
            "real_valued_column": [
                "column_name",
                "dimension",
                "default_value",
                "dtype",
                "normalizer"
            ],
            "bucketized_column": [
                "source_column",
                "boundaries"
            ],
            "crossed_column": [
                "columns",
                "hash_bucket_size",
                "combiner",
                "ckpt_to_load_from",
                "tensor_name_in_ckpt",
                "hash_key"
            ],
            "_get_feature_config": [
                "feature_column"
            ],
            "create_feature_spec_for_parsing": [
                "feature_columns"
            ],
            "_create_sequence_feature_spec_for_parsing": [
                "sequence_feature_columns",
                "allow_missing_by_default"
            ],
            "make_place_holder_tensors_for_base_features": [
                "feature_columns"
            ],
            "_LinearEmbeddingLookupArguments": {},
            "_DeepEmbeddingLookupArguments": {},
            "_FeatureColumn": {
                "name": [
                    "self"
                ],
                "config": [
                    "self"
                ],
                "key": [
                    "self"
                ],
                "insert_transformed_feature": [
                    "self",
                    "columns_to_tensors"
                ],
                "_to_dnn_input_layer": [
                    "self",
                    "input_tensor",
                    "weight_collection",
                    "trainable",
                    "output_rank"
                ],
                "_deep_embedding_lookup_arguments": [
                    "self",
                    "input_tensor"
                ],
                "_wide_embedding_lookup_arguments": [
                    "self",
                    "input_tensor"
                ],
                "_to_dense_tensor": [
                    "self",
                    "input_tensor"
                ],
                "_checkpoint_path": [
                    "self"
                ],
                "_key_without_properties": [
                    "self",
                    "properties"
                ]
            },
            "_SparseColumn": {
                "__new__": [
                    "cls",
                    "column_name",
                    "is_integerized",
                    "bucket_size",
                    "lookup_config",
                    "combiner",
                    "dtype"
                ],
                "name": [
                    "self"
                ],
                "length": [
                    "self"
                ],
                "config": [
                    "self"
                ],
                "key": [
                    "self"
                ],
                "id_tensor": [
                    "self",
                    "input_tensor"
                ],
                "weight_tensor": [
                    "self",
                    "input_tensor"
                ],
                "_to_dnn_input_layer": [
                    "self",
                    "input_tensor",
                    "weight_collections",
                    "trainable",
                    "output_rank"
                ],
                "_wide_embedding_lookup_arguments": [
                    "self",
                    "input_tensor"
                ],
                "_get_input_sparse_tensor": [
                    "self",
                    "columns_to_tensors"
                ],
                "is_compatible": [
                    "self",
                    "other_column"
                ]
            },
            "_SparseColumnIntegerized": {
                "__new__": [
                    "cls",
                    "column_name",
                    "bucket_size",
                    "combiner",
                    "dtype"
                ],
                "insert_transformed_feature": [
                    "self",
                    "columns_to_tensors"
                ]
            },
            "_SparseColumnHashed": {
                "__new__": [
                    "cls",
                    "column_name",
                    "hash_bucket_size",
                    "combiner",
                    "dtype"
                ],
                "insert_transformed_feature": [
                    "self",
                    "columns_to_tensors"
                ]
            },
            "_SparseColumnKeys": {
                "__new__": [
                    "cls",
                    "column_name",
                    "keys",
                    "default_value",
                    "combiner"
                ],
                "insert_transformed_feature": [
                    "self",
                    "columns_to_tensors"
                ]
            },
            "_WeightedSparseColumn": {
                "__new__": [
                    "cls",
                    "sparse_id_column",
                    "weight_column_name",
                    "dtype"
                ],
                "name": [
                    "self"
                ],
                "length": [
                    "self"
                ],
                "config": [
                    "self"
                ],
                "key": [
                    "self"
                ],
                "insert_transformed_feature": [
                    "self",
                    "columns_to_tensors"
                ],
                "id_tensor": [
                    "self",
                    "input_tensor"
                ],
                "weight_tensor": [
                    "self",
                    "input_tensor"
                ],
                "_to_dnn_input_layer": [
                    "self",
                    "input_tensor",
                    "weight_collections",
                    "trainable",
                    "output_rank"
                ],
                "_wide_embedding_lookup_arguments": [
                    "self",
                    "input_tensor"
                ]
            },
            "_OneHotColumn": {
                "name": [
                    "self"
                ],
                "length": [
                    "self"
                ],
                "config": [
                    "self"
                ],
                "key": [
                    "self"
                ],
                "insert_transformed_feature": [
                    "self",
                    "columns_to_tensors"
                ],
                "_to_dnn_input_layer": [
                    "self",
                    "transformed_input_tensor",
                    "unused_weight_collections",
                    "unused_trainable",
                    "output_rank"
                ]
            },
            "_EmbeddingColumn": {
                "__new__": [
                    "cls",
                    "sparse_id_column",
                    "dimension",
                    "combiner",
                    "initializer",
                    "ckpt_to_load_from",
                    "tensor_name_in_ckpt",
                    "shared_embedding_name",
                    "shared_vocab_size",
                    "max_norm"
                ],
                "name": [
                    "self"
                ],
                "length": [
                    "self"
                ],
                "config": [
                    "self"
                ],
                "key": [
                    "self"
                ],
                "insert_transformed_feature": [
                    "self",
                    "columns_to_tensors"
                ],
                "_deep_embedding_lookup_arguments": [
                    "self",
                    "input_tensor"
                ],
                "_checkpoint_path": [
                    "self"
                ],
                "_wide_embedding_lookup_arguments": [
                    "self",
                    "input_tensor"
                ]
            },
            "_HashedEmbeddingColumn": {
                "__new__": [
                    "cls",
                    "column_name",
                    "size",
                    "dimension",
                    "combiner",
                    "initializer"
                ],
                "name": [
                    "self"
                ],
                "config": [
                    "self"
                ],
                "insert_transformed_feature": [
                    "self",
                    "columns_to_tensors"
                ],
                "_deep_embedding_lookup_arguments": [
                    "self",
                    "input_tensor"
                ]
            },
            "_RealValuedColumn": {
                "__new__": [
                    "cls",
                    "column_name",
                    "dimension",
                    "default_value",
                    "dtype",
                    "normalizer"
                ],
                "name": [
                    "self"
                ],
                "config": [
                    "self"
                ],
                "key": [
                    "self"
                ],
                "normalizer_fn": [
                    "self"
                ],
                "_normalized_input_tensor": [
                    "self",
                    "input_tensor"
                ],
                "insert_transformed_feature": [
                    "self",
                    "columns_to_tensors"
                ],
                "_to_dnn_input_layer": [
                    "self",
                    "input_tensor",
                    "weight_collections",
                    "trainable",
                    "output_rank"
                ],
                "_to_dense_tensor": [
                    "self",
                    "input_tensor"
                ]
            },
            "_BucketizedColumn": {
                "__new__": [
                    "cls",
                    "source_column",
                    "boundaries"
                ],
                "name": [
                    "self"
                ],
                "length": [
                    "self"
                ],
                "config": [
                    "self"
                ],
                "key": [
                    "self"
                ],
                "insert_transformed_feature": [
                    "self",
                    "columns_to_tensors"
                ],
                "_to_dnn_input_layer": [
                    "self",
                    "input_tensor",
                    "weight_collections",
                    "trainable",
                    "output_rank"
                ],
                "to_sparse_tensor": [
                    "self",
                    "input_tensor"
                ],
                "_wide_embedding_lookup_arguments": [
                    "self",
                    "input_tensor"
                ]
            },
            "_CrossedColumn": {
                "_assert_is_crossable": [
                    "column"
                ],
                "__new__": [
                    "cls",
                    "columns",
                    "hash_bucket_size",
                    "hash_key",
                    "combiner",
                    "ckpt_to_load_from",
                    "tensor_name_in_ckpt"
                ],
                "name": [
                    "self"
                ],
                "config": [
                    "self"
                ],
                "length": [
                    "self"
                ],
                "key": [
                    "self"
                ],
                "id_tensor": [
                    "self",
                    "input_tensor"
                ],
                "weight_tensor": [
                    "self",
                    "input_tensor"
                ],
                "insert_transformed_feature": [
                    "self",
                    "columns_to_tensors"
                ],
                "_to_dnn_input_layer": [
                    "self",
                    "input_tensor",
                    "weight_collections",
                    "trainable",
                    "output_rank"
                ],
                "_checkpoint_path": [
                    "self"
                ],
                "_wide_embedding_lookup_arguments": [
                    "self",
                    "input_tensor"
                ]
            },
            "DataFrameColumn": {
                "__new__": [
                    "cls",
                    "column_name",
                    "series"
                ],
                "name": [
                    "self"
                ],
                "config": [
                    "self"
                ],
                "key": [
                    "self"
                ],
                "insert_transformed_feature": [
                    "self",
                    "columns_to_tensors"
                ],
                "_to_dnn_input_layer": [
                    "self",
                    "input_tensor",
                    "weight_collections",
                    "trainable",
                    "output_rank"
                ],
                "_to_dense_tensor": [
                    "self",
                    "input_tensor"
                ],
                "__eq__": [
                    "self",
                    "other"
                ],
                "__ne__": [
                    "self",
                    "other"
                ]
            },
            "_SparseIdLookupConfig": {
                "__new__": [
                    "cls",
                    "vocabulary_file",
                    "keys",
                    "num_oov_buckets",
                    "vocab_size",
                    "default_value"
                ]
            }
        },
        "tensorflow.contrib.layers.python.layers.encoders_test": {
            "_get_const_var": [
                "name",
                "shape",
                "value"
            ],
            "EncodersTest": {
                "testBowEncoderSparse": [
                    "self"
                ],
                "testBowEncoderSparseTensor": [
                    "self"
                ],
                "testBowEncoderSparseEmptyRow": [
                    "self"
                ],
                "testBowEncoderDense": [
                    "self"
                ],
                "testBowEncoderSparseTensorDenseLookup": [
                    "self"
                ],
                "testBowEncodersSharingEmbeddings": [
                    "self"
                ],
                "testBowEncodersSharingEmbeddingsInheritedScopes": [
                    "self"
                ],
                "testBowEncodersSharingEmbeddingsSharedScope": [
                    "self"
                ],
                "testBowEncoderReuseEmbeddingsVariable": [
                    "self"
                ],
                "testEmbedSequence": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.layers.python.layers.layers_test": {
            "_sparsify": [
                "array",
                "threshold"
            ],
            "AvgPool2DTest": {
                "testInvalidDataFormat": [
                    "self"
                ],
                "testCreateAvgPool": [
                    "self"
                ],
                "testCreateAvgPoolNCHW": [
                    "self"
                ],
                "testCollectOutputs": [
                    "self"
                ],
                "testCreateSquareAvgPool": [
                    "self"
                ],
                "testCreateAvgPoolWithScope": [
                    "self"
                ],
                "testCreateAvgPoolWithSamePadding": [
                    "self"
                ],
                "testCreateAvgPoolWithSamePaddingNCHW": [
                    "self"
                ],
                "testCreateAvgPoolStrideWithSamePadding": [
                    "self"
                ],
                "testGlobalAvgPool": [
                    "self"
                ]
            },
            "PoolTest": {
                "testCreatePool": [
                    "self"
                ],
                "testCreatePoolNCHW": [
                    "self"
                ],
                "testCollectOutputs": [
                    "self"
                ],
                "testCreateSquareAvgPool": [
                    "self"
                ],
                "testCreateMaxPoolWithScope": [
                    "self"
                ],
                "testCreateMaxPoolWithSamePadding": [
                    "self"
                ],
                "testCreateAvgPoolStrideWithSamePadding": [
                    "self"
                ],
                "testGlobalAvgPool": [
                    "self"
                ],
                "testAvgPoolWithStride": [
                    "self"
                ],
                "testAvgPoolWithDilation": [
                    "self"
                ],
                "testAvgPoolWithDilationNCHW": [
                    "self"
                ]
            },
            "BiasAddTest": {
                "testCreate": [
                    "self"
                ],
                "testCreateWithActivation": [
                    "self"
                ],
                "testCreateDimensions": [
                    "self"
                ]
            },
            "ConvolutionTest": {
                "testInvalidDataFormat": [
                    "self"
                ],
                "testCreateConv": [
                    "self"
                ],
                "testCreateConvNCHW": [
                    "self"
                ],
                "testCreateSquareConv": [
                    "self"
                ],
                "testCreateConvWithTensorShape": [
                    "self"
                ],
                "testCreateFullyConv": [
                    "self"
                ],
                "testCreateVerticalConv": [
                    "self"
                ],
                "testCreateHorizontalConv": [
                    "self"
                ],
                "testCreateConvWithStride": [
                    "self"
                ],
                "testCreateConvCreatesWeightsAndBiasesVars": [
                    "self"
                ],
                "testCreateConvWithScope": [
                    "self"
                ],
                "testCreateConvWithCollection": [
                    "self"
                ],
                "testCreateConvWithoutActivation": [
                    "self"
                ],
                "testCreateConvValid": [
                    "self"
                ],
                "testCreateConvWithWD": [
                    "self"
                ],
                "testCreateConvNoRegularizers": [
                    "self"
                ],
                "testReuseVars": [
                    "self"
                ],
                "testNonReuseVars": [
                    "self"
                ],
                "testReuseConvWithWD": [
                    "self"
                ],
                "testConvWithBatchNorm": [
                    "self"
                ],
                "testReuseConvWithBatchNorm": [
                    "self"
                ],
                "testCreateConvCreatesWeightsAndBiasesVarsWithRateTwo": [
                    "self"
                ],
                "testOutputSizeWithRateTwoSamePadding": [
                    "self"
                ],
                "testOutputSizeWithRateTwoValidPadding": [
                    "self"
                ],
                "testOutputSizeWithRateTwoThreeValidPadding": [
                    "self"
                ],
                "testDynamicOutputSizeWithRateOneValidPadding": [
                    "self"
                ],
                "testDynamicOutputSizeWithRateOneValidPaddingNCHW": [
                    "self"
                ],
                "testDynamicOutputSizeWithRateTwoValidPadding": [
                    "self"
                ],
                "testWithScope": [
                    "self"
                ],
                "testWithScopeWithoutActivation": [
                    "self"
                ]
            },
            "Convolution2dTransposeTests": {
                "testInvalidDataFormat": [
                    "self"
                ],
                "testOutputSizeWithStrideOneSamePaddingNCHW": [
                    "self"
                ],
                "testOutputSizeWithStrideOneValidPaddingNCHW": [
                    "self"
                ],
                "testOutputSizeWithStrideTwoValidPaddingNCHW": [
                    "self"
                ],
                "testOutputSizeWith1x1StrideTwoSamePaddingNCHW": [
                    "self"
                ],
                "testOutputSizeWith1x1StrideTwoValidPaddingNCHW": [
                    "self"
                ],
                "testOutputSizeWith2x2StrideTwoSamePaddingNCHW": [
                    "self"
                ],
                "testOutputSizeWith2x2StrideTwoValidPaddingNCHW": [
                    "self"
                ],
                "testOutputSizeWithStride2x1NCHW": [
                    "self"
                ],
                "testOutputSizeWithStride2x4NCHW": [
                    "self"
                ],
                "testOutputSizeWithStride2x5NCHW": [
                    "self"
                ],
                "testOutputSizeWithStrideOneSamePadding": [
                    "self"
                ],
                "testOutputSizeWithStrideOneValidPadding": [
                    "self"
                ],
                "testOutputSizeWithStrideTwoValidPadding": [
                    "self"
                ],
                "testOutputSizeWith1x1StrideTwoSamePadding": [
                    "self"
                ],
                "testOutputSizeWith1x1StrideTwoValidPadding": [
                    "self"
                ],
                "testOutputSizeWith2x2StrideTwoSamePadding": [
                    "self"
                ],
                "testOutputSizeWith2x2StrideTwoValidPadding": [
                    "self"
                ],
                "testOutputSizeWithStride2x1": [
                    "self"
                ],
                "testOutputSizeWithStride2x4": [
                    "self"
                ],
                "testOutputSizeWithStride2x5": [
                    "self"
                ],
                "testOutputSizeRandomSizesAndStridesValidPadding": [
                    "self"
                ],
                "testDynamicOutputSizeWithStrideTwoValidPadding": [
                    "self"
                ],
                "testDynamicOutputSizeWithStrideTwoSamePadding": [
                    "self"
                ],
                "testWithScope": [
                    "self"
                ],
                "testWithScopeWithoutActivation": [
                    "self"
                ],
                "testDeconvWithoutBiasesProducesConv2dTranspose": [
                    "self"
                ]
            },
            "ConvolutionInPlaneTest": {
                "testHorzConvWithBlankImage": [
                    "self"
                ],
                "testHorzConvWithBlankImageAndPlaceholder": [
                    "self"
                ],
                "testHorzConvWithRandomImageMultiBatch": [
                    "self"
                ],
                "testHorzConvWithRandomImageMultiBatchMultiChannel": [
                    "self"
                ],
                "testHorzConvWithVaryingImage": [
                    "self"
                ],
                "testVertConvWithBlankImage": [
                    "self"
                ],
                "testVertConvWithVaryingImage": [
                    "self"
                ]
            },
            "DropoutTest": {
                "testCreateDropout": [
                    "self"
                ],
                "testCreateDropoutWithConstantTrue": [
                    "self"
                ],
                "testCreateDropoutWithConstantFalse": [
                    "self"
                ],
                "testCreateDropoutWithPlaceholder": [
                    "self"
                ],
                "testCollectOutputs": [
                    "self"
                ],
                "testDropout": [
                    "self"
                ],
                "testCreateDropoutNoTraining": [
                    "self"
                ],
                "testCreateFCFollowByDropout": [
                    "self"
                ],
                "testCreateFCWithDropout": [
                    "self"
                ]
            },
            "FlattenTest": {
                "testInvalidRank": [
                    "self"
                ],
                "testUnknownLastDim": [
                    "self"
                ],
                "testCollectOutputs": [
                    "self"
                ],
                "testFlatten4D": [
                    "self"
                ],
                "testFlatten3D": [
                    "self"
                ],
                "testFlattenBatchSize": [
                    "self"
                ]
            },
            "PartialFlattenTest": {
                "testDensePartialFlatten": [
                    "self"
                ],
                "testSparsePartialFlatten": [
                    "self"
                ],
                "testIncompleteShape": [
                    "self"
                ]
            },
            "FCTest": {
                "testCreateFC": [
                    "self"
                ],
                "testCreateFCWithScope": [
                    "self"
                ],
                "testCreateFCWithCollection": [
                    "self"
                ],
                "testCreateFcCreatesWeightsAndBiasesVars": [
                    "self"
                ],
                "testReuseVars": [
                    "self"
                ],
                "testNonReuseVars": [
                    "self"
                ],
                "testCreateFCWithoutActivation": [
                    "self"
                ],
                "testCreateFCWithWD": [
                    "self"
                ],
                "testCreateNoRegularizers": [
                    "self"
                ],
                "testReuseFCWithWD": [
                    "self"
                ],
                "testFCWithBatchNorm": [
                    "self"
                ],
                "testReuseFCWithBatchNorm": [
                    "self"
                ]
            },
            "BatchNormTest": {
                "_addBesselsCorrection": [
                    "self",
                    "sample_size",
                    "expected_var"
                ],
                "testUnknownShape": [
                    "self"
                ],
                "testInvalidDataFormat": [
                    "self"
                ],
                "testUnknownChannelsDimNHWC": [
                    "self"
                ],
                "testUnknownChannelsDimNCHW": [
                    "self"
                ],
                "testWeightedMomentsFused": [
                    "self"
                ],
                "_testCreateOp": [
                    "self",
                    "fused"
                ],
                "testCreateOpDefault": [
                    "self"
                ],
                "testCreateOpFused": [
                    "self"
                ],
                "testCreateVariables": [
                    "self"
                ],
                "testMovingAverageVariables": [
                    "self"
                ],
                "testUpdatesCollection": [
                    "self"
                ],
                "testReuseVariables": [
                    "self"
                ],
                "testReuseUpdateOps": [
                    "self"
                ],
                "testCreateMovingVars": [
                    "self"
                ],
                "_testNoneUpdatesCollections": [
                    "self",
                    "fused",
                    "data_format"
                ],
                "testNoneUpdatesCollectionsNHWC": [
                    "self"
                ],
                "testNoneUpdatesCollectionsNCHW": [
                    "self"
                ],
                "testNoneUpdatesCollectionsFusedNCHW": [
                    "self"
                ],
                "testNoneUpdatesCollectionsFusedNHWC": [
                    "self"
                ],
                "_testDelayedUpdateMovingVars": [
                    "self",
                    "fused",
                    "data_format"
                ],
                "testDelayedUpdateMovingVarsNHWC": [
                    "self"
                ],
                "testDelayedUpdateMovingVarsNCHW": [
                    "self"
                ],
                "testDelayedUpdateMovingVarsFusedNCHW": [
                    "self"
                ],
                "testDelayedUpdateMovingVarsFusedNHWC": [
                    "self"
                ],
                "testDelayedUpdateMovingVars": [
                    "self"
                ],
                "testEvalMovingVars": [
                    "self"
                ],
                "testEvalMovingVarsWithPartitioner": [
                    "self"
                ],
                "_testReuseVars": [
                    "self",
                    "fused"
                ],
                "testReuseVarsDefault": [
                    "self"
                ],
                "testReuseVarsFused": [
                    "self"
                ],
                "_testIsTrainingVariable": [
                    "self",
                    "fused",
                    "data_format"
                ],
                "testIsTrainingVariableNHWC": [
                    "self"
                ],
                "testIsTrainingVariableNCHW": [
                    "self"
                ],
                "testIsTrainingVariableFusedNCHW": [
                    "self"
                ],
                "testIsTrainingVariableFusedNHWC": [
                    "self"
                ],
                "testNoUpdatesWhenIsTrainingFalse": [
                    "self"
                ],
                "testNoneUpdatesCollectionNoTraining": [
                    "self"
                ],
                "_testNoneUpdatesCollectionIsTrainingVariable": [
                    "self",
                    "fused",
                    "data_format"
                ],
                "testNoneUpdatesCollectionIsTrainingVariableNHWC": [
                    "self"
                ],
                "testNoneUpdatesCollectionIsTrainingVariableNCHW": [
                    "self"
                ],
                "testNoneUpdatesCollectionIsTrainingVariableFusedNCHW": [
                    "self"
                ],
                "testNoneUpdatesCollectionIsTrainingVariableFusedNHWC": [
                    "self"
                ],
                "_testTrainMovingVars": [
                    "self",
                    "fused",
                    "data_format"
                ],
                "testTrainMovingVarsNHWC": [
                    "self"
                ],
                "testTrainMovingVarsNCHW": [
                    "self"
                ],
                "testTrainMovingVarsFusedNCHW": [
                    "self"
                ],
                "testTrainMovingVarsFusedNHWC": [
                    "self"
                ],
                "testCustomInitializer": [
                    "self"
                ],
                "_runBatchNormalizationWithFormat": [
                    "self",
                    "shape",
                    "data_format",
                    "is_training"
                ],
                "testNHWCAndNCHWInferenceProduceSameOutput": [
                    "self"
                ],
                "testNHWCAndNCHWTrainingProduceSameOutput": [
                    "self"
                ]
            },
            "LayerNormTest": {
                "testUnknownShape": [
                    "self"
                ],
                "testUnknownLastDim": [
                    "self"
                ],
                "testCreateOp": [
                    "self"
                ],
                "testCreateVariables": [
                    "self"
                ],
                "testReuseVariables": [
                    "self"
                ],
                "testReuseVars": [
                    "self"
                ],
                "doOutputTest": [
                    "self",
                    "input_shape"
                ],
                "testOutput2DInput": [
                    "self"
                ],
                "testOutput4DInput": [
                    "self"
                ]
            },
            "MaxPool2DTest": {
                "testInvalidDataFormat": [
                    "self"
                ],
                "testCreateMaxPool": [
                    "self"
                ],
                "testCreateMaxPoolNCHW": [
                    "self"
                ],
                "testCollectOutputs": [
                    "self"
                ],
                "testCreateSquareMaxPool": [
                    "self"
                ],
                "testCreateMaxPoolWithScope": [
                    "self"
                ],
                "testCreateMaxPoolWithSamePadding": [
                    "self"
                ],
                "testCreateMaxPoolWithSamePaddingNCHW": [
                    "self"
                ],
                "testCreateMaxPoolStrideWithSamePadding": [
                    "self"
                ],
                "testGlobalMaxPool": [
                    "self"
                ]
            },
            "OneHotEncodingTest": {
                "testOneHotEncodingCreate": [
                    "self"
                ],
                "testCollectOutputs": [
                    "self"
                ],
                "testOneHotEncoding": [
                    "self"
                ],
                "testOneHotEncodingInt32": [
                    "self"
                ]
            },
            "RepeatTests": {
                "testRepeat": [
                    "self"
                ],
                "testRepeatWithScope": [
                    "self"
                ]
            },
            "SeparableConv2dTest": {
                "testCreateConvInt32": [
                    "self"
                ],
                "testCreateConvFloat32": [
                    "self"
                ],
                "testCreateConvFloat64": [
                    "self"
                ],
                "testCreateDepthwiseConv": [
                    "self"
                ],
                "testCreateConvCreatesWeightsAndBiasesVars": [
                    "self"
                ],
                "testCreateDepthwiseConvCreatesWeightsAndBiasesVars": [
                    "self"
                ],
                "testCreateConvWithScope": [
                    "self"
                ],
                "testCreateConvWithoutActivation": [
                    "self"
                ],
                "testCreateConvValid": [
                    "self"
                ],
                "testCreateDepthwiseConvValid": [
                    "self"
                ],
                "testCreateConvWithWeightDecay": [
                    "self"
                ],
                "testReuseConvWithWeightDecay": [
                    "self"
                ],
                "testConvWithBatchNorm": [
                    "self"
                ],
                "testConvWithInputsViaPlaceHolder": [
                    "self"
                ]
            },
            "SoftmaxTests": {
                "setUp": [
                    "self"
                ],
                "testSoftmax2D": [
                    "self"
                ],
                "testSoftmax3D": [
                    "self"
                ],
                "testSoftmax3DUnknownSize": [
                    "self"
                ],
                "testSoftmaxUndefinedNthDimension": [
                    "self"
                ]
            },
            "StackTests": {
                "testStackFullyConnected": [
                    "self"
                ],
                "testStackRelu": [
                    "self"
                ],
                "testStackConvolution2d": [
                    "self"
                ],
                "testStackWithScope": [
                    "self"
                ]
            },
            "UnitNormTests": {
                "testUnitNormWithRandomMatrix": [
                    "self"
                ],
                "testDimEqualToRankRaisesError": [
                    "self"
                ],
                "testUnknownRankRaisesError": [
                    "self"
                ],
                "testKnownRankUnknownDimsSucceeds": [
                    "self"
                ]
            },
            "LegacyFullyConnectedTest": {
                "setUp": [
                    "self"
                ],
                "_fully_connected_basic_use": [
                    "self",
                    "x",
                    "num_output_units",
                    "expected_shape"
                ],
                "test_fully_connected_basic_use": [
                    "self"
                ],
                "test_fully_connected_basic_use_multi_dim": [
                    "self"
                ],
                "test_relu_layer_basic_use": [
                    "self"
                ],
                "test_variable_reuse_with_scope": [
                    "self"
                ],
                "test_variable_reuse_with_template": [
                    "self"
                ],
                "_custom_initializers": [
                    "self",
                    "x",
                    "num_output_units",
                    "expected_outputs"
                ],
                "test_custom_initializers": [
                    "self"
                ],
                "test_custom_initializers_multi_dim": [
                    "self"
                ],
                "test_custom_collections": [
                    "self"
                ],
                "test_all_custom_collections": [
                    "self"
                ],
                "test_no_bias": [
                    "self"
                ],
                "test_no_activation": [
                    "self"
                ],
                "test_no_activation_no_bias": [
                    "self"
                ],
                "test_regularizer": [
                    "self"
                ],
                "test_regularizer_with_multiple_variables": [
                    "self"
                ],
                "test_regularizer_with_variable_reuse": [
                    "self"
                ],
                "test_empty_x_results_in_empty_output": [
                    "self"
                ],
                "test_shapes_variable_first_dim": [
                    "self"
                ],
                "_unknown_dim_invalid_input": [
                    "self",
                    "last_dim"
                ],
                "test_known_dim_valid_input": [
                    "self"
                ],
                "test_unknown_dim_invalid_input": [
                    "self"
                ],
                "test_1d_invalid_input": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.layers.python.layers.utils": {
            "collect_named_outputs": [
                "collections",
                "alias",
                "outputs"
            ],
            "gather_tensors_alias": [
                "tensors"
            ],
            "get_tensor_alias": [
                "tensor"
            ],
            "convert_collection_to_dict": [
                "collection"
            ],
            "constant_value": [
                "value_or_tensor_or_var",
                "dtype"
            ],
            "static_cond": [
                "pred",
                "fn1",
                "fn2"
            ],
            "smart_cond": [
                "pred",
                "fn1",
                "fn2",
                "name"
            ],
            "get_variable_collections": [
                "variables_collections",
                "name"
            ],
            "first_dimension": [
                "shape",
                "min_rank"
            ],
            "last_dimension": [
                "shape",
                "min_rank"
            ],
            "two_element_tuple": [
                "int_or_tuple"
            ],
            "n_positive_integers": [
                "n",
                "value"
            ]
        },
        "tensorflow.contrib.layers.python.layers.optimizers": {
            "optimize_loss": [
                "loss",
                "global_step",
                "learning_rate",
                "optimizer",
                "gradient_noise_scale",
                "gradient_multipliers",
                "clip_gradients",
                "learning_rate_decay_fn",
                "update_ops",
                "variables",
                "name",
                "summaries",
                "colocate_gradients_with_ops"
            ],
            "_clip_gradients_by_norm": [
                "grads_and_vars",
                "clip_gradients"
            ],
            "_adaptive_max_norm": [
                "norm",
                "std_factor",
                "decay",
                "global_step",
                "epsilon",
                "name"
            ],
            "adaptive_clipping_fn": [
                "std_factor",
                "decay",
                "static_max_norm",
                "global_step",
                "report_summary",
                "epsilon",
                "name"
            ],
            "_add_scaled_noise_to_gradients": [
                "grads_and_vars",
                "gradient_noise_scale"
            ],
            "_multiply_gradients": [
                "grads_and_vars",
                "gradient_multipliers"
            ]
        },
        "tensorflow.contrib.layers.python.layers.target_column": {
            "regression_target": [
                "label_name",
                "weight_column_name",
                "label_dimension"
            ],
            "multi_class_target": [
                "n_classes",
                "label_name",
                "weight_column_name"
            ],
            "binary_svm_target": [
                "label_name",
                "weight_column_name"
            ],
            "_mean_squared_loss": [
                "logits",
                "target"
            ],
            "_log_loss_with_two_classes": [
                "logits",
                "target"
            ],
            "_softmax_cross_entropy_loss": [
                "logits",
                "target"
            ],
            "_run_metrics": [
                "predictions",
                "labels",
                "metrics",
                "weights"
            ],
            "get_default_binary_metrics_for_eval": [
                "thresholds"
            ],
            "_float_weights_or_none": [
                "weights"
            ],
            "_labels_streaming_mean": [
                "unused_predictions",
                "labels",
                "weights"
            ],
            "_predictions_streaming_mean": [
                "predictions",
                "unused_labels",
                "weights"
            ],
            "_streaming_auc": [
                "predictions",
                "labels",
                "weights"
            ],
            "_accuracy_at_threshold": [
                "threshold"
            ],
            "_streaming_at_threshold": [
                "streaming_metrics_fn",
                "threshold"
            ],
            "ProblemType": {},
            "_TargetColumn": {
                "__init__": [
                    "self",
                    "loss_fn",
                    "num_label_columns",
                    "label_name",
                    "weight_column_name",
                    "problem_type"
                ],
                "logits_to_predictions": [
                    "self",
                    "logits",
                    "proba"
                ],
                "get_eval_ops": [
                    "self",
                    "features",
                    "logits",
                    "labels",
                    "metrics"
                ],
                "label_name": [
                    "self"
                ],
                "weight_column_name": [
                    "self"
                ],
                "num_label_columns": [
                    "self"
                ],
                "get_weight_tensor": [
                    "self",
                    "features"
                ],
                "problem_type": [
                    "self"
                ],
                "_weighted_loss": [
                    "self",
                    "loss",
                    "weight_tensor"
                ],
                "training_loss": [
                    "self",
                    "logits",
                    "target",
                    "features",
                    "name"
                ],
                "loss": [
                    "self",
                    "logits",
                    "target",
                    "features"
                ]
            },
            "_RegressionTargetColumn": {
                "__init__": [
                    "self",
                    "loss_fn",
                    "label_name",
                    "weight_column_name",
                    "label_dimension"
                ],
                "logits_to_predictions": [
                    "self",
                    "logits",
                    "proba"
                ],
                "get_eval_ops": [
                    "self",
                    "features",
                    "logits",
                    "labels",
                    "metrics"
                ]
            },
            "_MultiClassTargetColumn": {
                "__init__": [
                    "self",
                    "loss_fn",
                    "n_classes",
                    "label_name",
                    "weight_column_name"
                ],
                "logits_to_predictions": [
                    "self",
                    "logits",
                    "proba"
                ],
                "_default_eval_metrics": [
                    "self"
                ],
                "get_eval_ops": [
                    "self",
                    "features",
                    "logits",
                    "labels",
                    "metrics"
                ]
            },
            "_BinarySvmTargetColumn": {
                "__init__": [
                    "self",
                    "label_name",
                    "weight_column_name"
                ],
                "logits_to_predictions": [
                    "self",
                    "logits",
                    "proba"
                ]
            },
            "_MetricKeys": {}
        },
        "tensorflow.contrib.layers.python.layers.feature_column_ops_test": {
            "TransformerTest": {
                "testRealValuedColumnIsIdentityTransformation": [
                    "self"
                ],
                "testBucketizedColumn": [
                    "self"
                ],
                "testBucketizedColumnWithMultiDimensions": [
                    "self"
                ],
                "testCachedTransformation": [
                    "self"
                ],
                "testSparseColumnWithHashBucket": [
                    "self"
                ],
                "testSparseIntColumnWithHashBucket": [
                    "self"
                ],
                "testSparseColumnWithHashBucketWithDenseInputTensor": [
                    "self"
                ],
                "testEmbeddingColumn": [
                    "self"
                ],
                "testSparseColumnWithKeys": [
                    "self"
                ],
                "testSparseColumnWithKeysWithDenseInputTensor": [
                    "self"
                ],
                "testSparseColumnWithHashBucket_IsIntegerized": [
                    "self"
                ],
                "testSparseColumnWithHashBucketWithDenseInputTensor_IsIntegerized": [
                    "self"
                ],
                "testWeightedSparseColumn": [
                    "self"
                ],
                "testCrossColumn": [
                    "self"
                ],
                "testCrossWithBucketizedColumn": [
                    "self"
                ],
                "testCrossWithMultiDimensionBucketizedColumn": [
                    "self"
                ],
                "testCrossWithCrossedColumn": [
                    "self"
                ],
                "testIfFeatureTableContainsTransformationReturnIt": [
                    "self"
                ]
            },
            "CreateInputLayersForDNNsTest": {
                "testAllDNNColumns": [
                    "self"
                ],
                "testRealValuedColumn": [
                    "self"
                ],
                "testRealValuedColumnWithMultiDimensions": [
                    "self"
                ],
                "testRealValuedColumnWithNormalizer": [
                    "self"
                ],
                "testRealValuedColumnWithMultiDimensionsAndNormalizer": [
                    "self"
                ],
                "testBucketizedColumnSucceedsForDNN": [
                    "self"
                ],
                "testBucketizedColumnWithNormalizerSucceedsForDNN": [
                    "self"
                ],
                "testBucketizedColumnWithMultiDimensionsSucceedsForDNN": [
                    "self"
                ],
                "testOneHotColumnFromWeightedSparseColumnFails": [
                    "self"
                ],
                "testOneHotColumnFromSparseColumnWithKeysSucceedsForDNN": [
                    "self"
                ],
                "testOneHotColumnFromMultivalentSparseColumnWithKeysSucceedsForDNN": [
                    "self"
                ],
                "testOneHotColumnFromSparseColumnWithIntegerizedFeaturePassesForDNN": [
                    "self"
                ],
                "testOneHotColumnFromSparseColumnWithHashBucketSucceedsForDNN": [
                    "self"
                ],
                "testEmbeddingColumnSucceedsForDNN": [
                    "self"
                ],
                "testHashedEmbeddingColumnSucceedsForDNN": [
                    "self"
                ],
                "testEmbeddingColumnWithInitializerSucceedsForDNN": [
                    "self"
                ],
                "testEmbeddingColumnWithMultipleInitializersFails": [
                    "self"
                ],
                "testEmbeddingColumnWithWeightedSparseColumnSucceedsForDNN": [
                    "self"
                ],
                "testEmbeddingColumnWithCrossedColumnSucceedsForDNN": [
                    "self"
                ],
                "testSparseColumnFailsForDNN": [
                    "self"
                ],
                "testWeightedSparseColumnFailsForDNN": [
                    "self"
                ],
                "testCrossedColumnFailsForDNN": [
                    "self"
                ],
                "testDeepColumnsSucceedForDNN": [
                    "self"
                ],
                "testEmbeddingColumnForDNN": [
                    "self"
                ],
                "testEmbeddingColumnWithWeightedSparseColumnForDNN": [
                    "self"
                ],
                "testInputLayerWithCollectionsForDNN": [
                    "self"
                ],
                "testInputLayerWithTrainableArgForDNN": [
                    "self"
                ]
            },
            "SequenceInputFromFeatureColumnTest": {
                "testSupportedColumns": [
                    "self"
                ],
                "testRealValuedColumn": [
                    "self"
                ],
                "testRealValuedColumnWithExtraDimensions": [
                    "self"
                ],
                "testRealValuedColumnWithNormalizer": [
                    "self"
                ],
                "testRealValuedColumnWithMultiDimensionsAndNormalizer": [
                    "self"
                ],
                "testOneHotColumnFromSparseColumnWithKeys": [
                    "self"
                ],
                "testOneHotColumnFromSparseColumnWithHashBucket": [
                    "self"
                ],
                "testEmbeddingColumn": [
                    "self"
                ],
                "testEmbeddingColumnGradient": [
                    "self"
                ],
                "testMultipleColumns": [
                    "self"
                ]
            },
            "WeightedSumTest": {
                "testSparseColumn": [
                    "self"
                ],
                "testSparseIntColumn": [
                    "self"
                ],
                "testSparseColumnWithDenseInputTensor": [
                    "self"
                ],
                "testWeightedSparseColumn": [
                    "self"
                ],
                "testWeightedSparseColumnWithDenseInputTensor": [
                    "self"
                ],
                "testCrossedColumn": [
                    "self"
                ],
                "testEmbeddingColumn": [
                    "self"
                ],
                "testRealValuedColumnWithMultiDimensions": [
                    "self"
                ],
                "testBucketizedColumnWithMultiDimensions": [
                    "self"
                ],
                "testAllWideColumns": [
                    "self"
                ],
                "testPredictions": [
                    "self"
                ],
                "testJointPredictions": [
                    "self"
                ],
                "testJointPredictionsWeightedFails": [
                    "self"
                ],
                "testJointPredictionsRealFails": [
                    "self"
                ],
                "testPredictionsWithWeightedSparseColumn": [
                    "self"
                ],
                "testPredictionsWithMultivalentColumnButNoCross": [
                    "self"
                ],
                "testSparseFeatureColumnWithHashedBucketSize": [
                    "self"
                ],
                "testCrossUsageInPredictions": [
                    "self"
                ],
                "testCrossColumnByItself": [
                    "self"
                ],
                "testMultivalentCrossUsageInPredictions": [
                    "self"
                ],
                "testMultivalentCrossUsageInPredictionsWithPartition": [
                    "self"
                ],
                "testRealValuedColumnHavingMultiDimensions": [
                    "self"
                ],
                "testMulticlassWithRealValuedColumnHavingMultiDimensions": [
                    "self"
                ],
                "testBucketizedColumn": [
                    "self"
                ],
                "testBucketizedColumnHavingMultiDimensions": [
                    "self"
                ],
                "testMulticlassWithBucketizedColumnHavingMultiDimensions": [
                    "self"
                ],
                "testCrossWithBucketizedColumn": [
                    "self"
                ],
                "testCrossWithCrossedColumn": [
                    "self"
                ],
                "testIntegerizedColumn": [
                    "self"
                ],
                "testIntegerizedColumnWithDenseInputTensor": [
                    "self"
                ],
                "testIntegerizedColumnWithDenseInputTensor2": [
                    "self"
                ],
                "testIntegerizedColumnWithInvalidId": [
                    "self"
                ],
                "testMulticlassWithOnlyBias": [
                    "self"
                ],
                "testMulticlassWithRealValuedColumn": [
                    "self"
                ],
                "testMulticlassWithSparseColumn": [
                    "self"
                ],
                "testMulticlassWithBucketizedColumn": [
                    "self"
                ],
                "testMulticlassWithCrossedColumn": [
                    "self"
                ],
                "testMulticlassWithMultivalentColumn": [
                    "self"
                ],
                "testVariablesAddedToCollection": [
                    "self"
                ]
            },
            "ParseExampleTest": {
                "testParseExample": [
                    "self"
                ],
                "testParseSequenceExample": [
                    "self"
                ]
            },
            "InferRealValuedColumnTest": {
                "testTensorInt32": [
                    "self"
                ],
                "testTensorInt64": [
                    "self"
                ],
                "testTensorFloat32": [
                    "self"
                ],
                "testTensorFloat64": [
                    "self"
                ],
                "testDictionary": [
                    "self"
                ],
                "testNotGoodDtype": [
                    "self"
                ],
                "testSparseTensor": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.layers.python.layers.summaries_test": {
            "SummariesTest": {
                "test_summarize_scalar_tensor": [
                    "self"
                ],
                "test_summarize_multidim_tensor": [
                    "self"
                ],
                "test_summarize_activation": [
                    "self"
                ],
                "test_summarize_activation_relu": [
                    "self"
                ],
                "test_summarize_activation_relu6": [
                    "self"
                ],
                "test_summarize_collection_regex": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.layers.python.layers.embedding_ops": {
            "safe_embedding_lookup_sparse": [
                "embedding_weights",
                "sparse_ids",
                "sparse_weights",
                "combiner",
                "default_id",
                "name",
                "partition_strategy",
                "max_norm"
            ],
            "_prune_invalid_ids": [
                "sparse_ids",
                "sparse_weights"
            ],
            "hashed_embedding_lookup": [
                "params",
                "values",
                "dimension",
                "name",
                "hash_key"
            ],
            "hashed_embedding_lookup_sparse": [
                "params",
                "sparse_values",
                "dimension",
                "combiner",
                "default_value",
                "name",
                "hash_key"
            ],
            "embedding_lookup_unique": [
                "params",
                "ids",
                "name"
            ]
        },
        "tensorflow.contrib.layers.python.layers": {},
        "tensorflow.contrib.layers.python.layers.regularizers": {
            "l1_regularizer": [
                "scale",
                "scope"
            ],
            "l2_regularizer": [
                "scale",
                "scope"
            ],
            "l1_l2_regularizer": [
                "scale_l1",
                "scale_l2",
                "scope"
            ],
            "sum_regularizer": [
                "regularizer_list",
                "scope"
            ],
            "apply_regularization": [
                "regularizer",
                "weights_list"
            ]
        },
        "tensorflow.contrib.layers.python.layers.regularizers_test": {
            "RegularizerTest": {
                "test_l1": [
                    "self"
                ],
                "test_l2": [
                    "self"
                ],
                "test_l1_l2": [
                    "self"
                ],
                "testL1L2RegularizerWithScope": [
                    "self"
                ],
                "test_sum_regularizer": [
                    "self"
                ],
                "test_apply_regularization": [
                    "self"
                ],
                "test_apply_zero_regularization": [
                    "self"
                ],
                "test_apply_regularization_invalid_regularizer": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.layers.python.layers.feature_column_ops": {
            "_embeddings_from_arguments": [
                "column",
                "args",
                "weight_collections",
                "trainable",
                "output_rank"
            ],
            "_input_from_feature_columns": [
                "columns_to_tensors",
                "feature_columns",
                "weight_collections",
                "trainable",
                "scope",
                "output_rank",
                "default_name"
            ],
            "input_from_feature_columns": [
                "columns_to_tensors",
                "feature_columns",
                "weight_collections",
                "trainable",
                "scope"
            ],
            "sequence_input_from_feature_columns": [
                "columns_to_tensors",
                "feature_columns",
                "weight_collections",
                "trainable",
                "scope"
            ],
            "_create_embedding_lookup": [
                "column",
                "columns_to_tensors",
                "embedding_lookup_arguments",
                "num_outputs",
                "trainable",
                "weight_collections"
            ],
            "_maybe_restore_from_checkpoint": [
                "checkpoint_path",
                "variable"
            ],
            "_create_joint_embedding_lookup": [
                "columns_to_tensors",
                "embedding_lookup_arguments",
                "num_outputs",
                "trainable",
                "weight_collections"
            ],
            "joint_weighted_sum_from_feature_columns": [
                "columns_to_tensors",
                "feature_columns",
                "num_outputs",
                "weight_collections",
                "trainable",
                "scope"
            ],
            "weighted_sum_from_feature_columns": [
                "columns_to_tensors",
                "feature_columns",
                "num_outputs",
                "weight_collections",
                "trainable",
                "scope"
            ],
            "parse_feature_columns_from_examples": [
                "serialized",
                "feature_columns",
                "name",
                "example_names"
            ],
            "transform_features": [
                "features",
                "feature_columns"
            ],
            "parse_feature_columns_from_sequence_examples": [
                "serialized",
                "context_feature_columns",
                "sequence_feature_columns",
                "name",
                "example_name"
            ],
            "_log_variable": [
                "variable"
            ],
            "_infer_real_valued_column_for_tensor": [
                "name",
                "tensor"
            ],
            "infer_real_valued_columns": [
                "features"
            ],
            "check_feature_columns": [
                "feature_columns"
            ],
            "_add_variable_collection": [
                "weight_collections"
            ],
            "_check_supported_sequence_columns": [
                "feature_columns"
            ],
            "_get_parent_columns": [
                "feature_column"
            ],
            "_gather_feature_columns": [
                "feature_columns"
            ],
            "_check_forbidden_sequence_columns": [
                "feature_columns"
            ],
            "_Transformer": {
                "__init__": [
                    "self",
                    "columns_to_tensors"
                ],
                "transform": [
                    "self",
                    "feature_column"
                ]
            }
        },
        "tensorflow.contrib.layers.python.layers.feature_column_test": {
            "_sparse_id_tensor": [
                "shape",
                "vocab_size",
                "seed"
            ],
            "FeatureColumnTest": {
                "testImmutability": [
                    "self"
                ],
                "testSparseColumnWithHashBucket": [
                    "self"
                ],
                "testWeightedSparseColumn": [
                    "self"
                ],
                "testEmbeddingColumn": [
                    "self"
                ],
                "testSharedEmbeddingColumn": [
                    "self"
                ],
                "testSharedEmbeddingColumnDeterminism": [
                    "self"
                ],
                "testSharedEmbeddingColumnErrors": [
                    "self"
                ],
                "testOneHotColumn": [
                    "self"
                ],
                "testOneHotReshaping": [
                    "self"
                ],
                "testRealValuedColumn": [
                    "self"
                ],
                "testRealValuedColumnReshaping": [
                    "self"
                ],
                "testBucketizedColumnNameEndsWithUnderscoreBucketized": [
                    "self"
                ],
                "testBucketizedColumnRequiresRealValuedColumn": [
                    "self"
                ],
                "testBucketizedColumnRequiresSortedBuckets": [
                    "self"
                ],
                "testBucketizedColumnWithSameBucketBoundaries": [
                    "self"
                ],
                "testCrossedColumnNameCreatesSortedNames": [
                    "self"
                ],
                "testCrossedColumnNotSupportRealValuedColumn": [
                    "self"
                ],
                "testWeightedSparseColumnDtypes": [
                    "self"
                ],
                "testRealValuedColumnDtypes": [
                    "self"
                ],
                "testSparseColumnDtypes": [
                    "self"
                ],
                "testSparseColumnSingleBucket": [
                    "self"
                ],
                "testCreateFeatureSpec": [
                    "self"
                ],
                "testCreateFeatureSpec_RealValuedColumnWithDefaultValue": [
                    "self"
                ],
                "testCreateSequenceFeatureSpec": [
                    "self"
                ],
                "testMakePlaceHolderTensorsForBaseFeatures": [
                    "self"
                ],
                "testInitEmbeddingColumnWeightsFromCkpt": [
                    "self"
                ],
                "testInitCrossedColumnWeightsFromCkpt": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.layers.python.layers.initializers_test": {
            "InitializerTest": {
                "test_xavier_wrong_dtype": [
                    "self"
                ],
                "_test_xavier": [
                    "self",
                    "initializer",
                    "shape",
                    "variance",
                    "uniform"
                ],
                "test_xavier_uniform": [
                    "self"
                ],
                "test_xavier_normal": [
                    "self"
                ],
                "test_xavier_scalar": [
                    "self"
                ],
                "test_xavier_conv2d_uniform": [
                    "self"
                ],
                "test_xavier_conv2d_normal": [
                    "self"
                ]
            },
            "VarianceScalingInitializerTest": {
                "test_wrong_dtype": [
                    "self"
                ],
                "_test_variance": [
                    "self",
                    "initializer",
                    "shape",
                    "variance",
                    "factor",
                    "mode",
                    "uniform"
                ],
                "test_fan_in": [
                    "self"
                ],
                "test_fan_out": [
                    "self"
                ],
                "test_fan_avg": [
                    "self"
                ],
                "test_conv2d_fan_in": [
                    "self"
                ],
                "test_conv2d_fan_out": [
                    "self"
                ],
                "test_conv2d_fan_avg": [
                    "self"
                ],
                "test_xavier_uniform": [
                    "self"
                ],
                "test_xavier_normal": [
                    "self"
                ],
                "test_xavier_scalar": [
                    "self"
                ],
                "test_xavier_conv2d_uniform": [
                    "self"
                ],
                "test_xavier_conv2d_normal": [
                    "self"
                ],
                "test_1d_shape_fan_in": [
                    "self"
                ],
                "test_1d_shape_fan_out": [
                    "self"
                ],
                "test_1d_shape_fan_avg": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.layers.ops": {},
        "tensorflow.contrib.ndlstm": {},
        "tensorflow.contrib.ndlstm.python.misc": {
            "_shape": [
                "tensor"
            ],
            "pixels_as_vector": [
                "images",
                "scope"
            ],
            "pool_as_vector": [
                "images",
                "scope"
            ],
            "one_hot_planes": [
                "labels",
                "num_classes",
                "scope"
            ],
            "one_hot_mask": [
                "labels",
                "num_classes",
                "scope"
            ]
        },
        "tensorflow.contrib.ndlstm.python.lstm1d_test": {
            "_rand": [],
            "Lstm1DTest": {
                "testSequenceToSequenceDims": [
                    "self"
                ],
                "testSequenceToSequenceGradient": [
                    "self"
                ],
                "testSequenceToSequenceGradientReverse": [
                    "self"
                ],
                "testSequenceToFinalDims": [
                    "self"
                ],
                "testSequenceSoftmaxDims": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.ndlstm.python.lstm2d_test": {
            "_rand": [],
            "Lstm2DTest": {
                "testImagesToSequenceDims": [
                    "self"
                ],
                "testSequenceToImagesDims": [
                    "self"
                ],
                "testImagesAndSequenceDims": [
                    "self"
                ],
                "testSeparableLstmDims": [
                    "self"
                ],
                "testReduceToSequenceDims": [
                    "self"
                ],
                "testReduceToFinalDims": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.ndlstm.python.lstm2d": {
            "_shape": [
                "tensor"
            ],
            "images_to_sequence": [
                "tensor"
            ],
            "sequence_to_images": [
                "tensor",
                "num_image_batches"
            ],
            "horizontal_lstm": [
                "images",
                "num_filters_out",
                "scope"
            ],
            "separable_lstm": [
                "images",
                "num_filters_out",
                "nhidden",
                "scope"
            ],
            "reduce_to_sequence": [
                "images",
                "num_filters_out",
                "scope"
            ],
            "reduce_to_final": [
                "images",
                "num_filters_out",
                "nhidden",
                "scope"
            ]
        },
        "tensorflow.contrib.ndlstm.python": {},
        "tensorflow.contrib.ndlstm.python.misc_test": {
            "_rand": [],
            "LstmMiscTest": {
                "testPixelsAsVectorDims": [
                    "self"
                ],
                "testPoolAsVectorDims": [
                    "self"
                ],
                "testOneHotPlanes": [
                    "self"
                ],
                "testOneHotMask": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.ndlstm.python.lstm1d": {
            "_shape": [
                "tensor"
            ],
            "ndlstm_base_unrolled": [
                "inputs",
                "noutput",
                "scope",
                "reverse"
            ],
            "ndlstm_base_dynamic": [
                "inputs",
                "noutput",
                "scope",
                "reverse"
            ],
            "ndlstm_base": [
                "inputs",
                "noutput",
                "scope",
                "reverse",
                "dynamic"
            ],
            "sequence_to_final": [
                "inputs",
                "noutput",
                "scope",
                "name",
                "reverse"
            ],
            "sequence_softmax": [
                "inputs",
                "noutput",
                "scope",
                "name",
                "linear_name"
            ]
        },
        "tensorflow.contrib.seq2seq": {},
        "tensorflow.contrib.seq2seq.python": {},
        "tensorflow.contrib.seq2seq.python.ops.layers": {
            "rnn_decoder": [],
            "rnn_decoder_attention": []
        },
        "tensorflow.contrib.seq2seq.python.ops.loss": {
            "seq2seq_loss": []
        },
        "tensorflow.contrib.seq2seq.python.ops": {},
        "tensorflow.contrib.seq2seq.python.kernel_tests.loss_test": {
            "LossTest": {
                "testLoss": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.seq2seq.python.kernel_tests.layers_test": {
            "LayersTest": {
                "testRNNDecoder": [
                    "self"
                ],
                "testRNNDecoderAttention": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.seq2seq.python.kernel_tests": {},
        "tensorflow.contrib.tensor_forest": {},
        "tensorflow.contrib.tensor_forest.python.topn": {
            "TopN": {
                "__init__": [
                    "self",
                    "max_id",
                    "shortlist_size",
                    "name_prefix"
                ],
                "insert": [
                    "self",
                    "ids",
                    "scores"
                ],
                "remove": [
                    "self",
                    "ids"
                ],
                "get_best": [
                    "self",
                    "n"
                ],
                "get_and_remove_best": [
                    "self",
                    "n"
                ]
            }
        },
        "tensorflow.contrib.tensor_forest.python.topn_test": {
            "TopNOpsTest": {
                "setUp": [
                    "self"
                ],
                "testInsertOpIntoEmptyShortlist": [
                    "self"
                ],
                "testInsertOpIntoAlmostFullShortlist": [
                    "self"
                ],
                "testInsertOpIntoFullShortlist": [
                    "self"
                ],
                "testInsertOpHard": [
                    "self"
                ],
                "testRemoveSimple": [
                    "self"
                ],
                "testRemoveAllMissing": [
                    "self"
                ],
                "testRemoveAll": [
                    "self"
                ]
            },
            "TopNTest": {
                "testSimple": [
                    "self"
                ],
                "testSimpler": [
                    "self"
                ],
                "testLotsOfInsertsAscending": [
                    "self"
                ],
                "testLotsOfInsertsDescending": [
                    "self"
                ],
                "testRemoveNotInShortlist": [
                    "self"
                ],
                "testNeedToRefreshShortlistInGetBest": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.tensor_forest.python.tensor_forest_test": {
            "TensorForestTest": {
                "testForestHParams": [
                    "self"
                ],
                "testForestHParamsBigTree": [
                    "self"
                ],
                "testTrainingConstructionClassification": [
                    "self"
                ],
                "testTrainingConstructionRegression": [
                    "self"
                ],
                "testInferenceConstruction": [
                    "self"
                ],
                "testImpurityConstruction": [
                    "self"
                ],
                "testTrainingConstructionClassificationSparse": [
                    "self"
                ],
                "testInferenceConstructionSparse": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.tensor_forest.python.constants": {},
        "tensorflow.contrib.tensor_forest.python": {},
        "tensorflow.contrib.tensor_forest.python.tensor_forest": {
            "get_epoch_variable": [],
            "one_hot_wrapper": [
                "num_classes",
                "loss_fn"
            ],
            "ForestHParams": {
                "__init__": [
                    "self",
                    "num_trees",
                    "max_nodes",
                    "bagging_fraction",
                    "num_splits_to_consider",
                    "feature_bagging_fraction",
                    "max_fertile_nodes",
                    "split_after_samples",
                    "min_split_samples",
                    "valid_leaf_threshold",
                    "dominate_method",
                    "dominate_fraction"
                ],
                "values": [
                    "self"
                ],
                "fill": [
                    "self"
                ]
            },
            "TreeTrainingVariables": {
                "__init__": [
                    "self",
                    "params",
                    "tree_num",
                    "training"
                ],
                "get_tree_name": [
                    "self",
                    "name",
                    "num"
                ]
            },
            "ForestStats": {
                "__init__": [
                    "self",
                    "tree_stats",
                    "params"
                ],
                "get_average": [
                    "self",
                    "thing"
                ]
            },
            "TreeStats": {
                "__init__": [
                    "self",
                    "num_nodes",
                    "num_leaves"
                ]
            },
            "ForestTrainingVariables": {
                "__init__": [
                    "self",
                    "params",
                    "device_assigner",
                    "training",
                    "tree_variables_class"
                ],
                "__setitem__": [
                    "self",
                    "t",
                    "val"
                ],
                "__getitem__": [
                    "self",
                    "t"
                ]
            },
            "RandomForestDeviceAssigner": {
                "__init__": [
                    "self"
                ],
                "get_device": [
                    "self",
                    "unused_tree_num"
                ]
            },
            "RandomForestGraphs": {
                "__init__": [
                    "self",
                    "params",
                    "device_assigner",
                    "variables",
                    "tree_variables_class",
                    "tree_graphs",
                    "training",
                    "t_ops",
                    "i_ops"
                ],
                "_bag_features": [
                    "self",
                    "tree_num",
                    "input_data"
                ],
                "training_graph": [
                    "self",
                    "input_data",
                    "input_labels",
                    "data_spec"
                ],
                "inference_graph": [
                    "self",
                    "input_data",
                    "data_spec"
                ],
                "average_size": [
                    "self"
                ],
                "training_loss": [
                    "self",
                    "features",
                    "labels",
                    "data_spec",
                    "name"
                ],
                "validation_loss": [
                    "self",
                    "features",
                    "labels"
                ],
                "average_impurity": [
                    "self"
                ],
                "get_stats": [
                    "self",
                    "session"
                ]
            },
            "TrainingLossForest": {
                "__init__": [
                    "self",
                    "params",
                    "loss_fn"
                ],
                "_get_loss": [
                    "self",
                    "features",
                    "labels",
                    "data_spec"
                ],
                "training_graph": [
                    "self",
                    "input_data",
                    "input_labels",
                    "data_spec"
                ],
                "training_loss": [
                    "self",
                    "features",
                    "labels",
                    "data_spec",
                    "name"
                ]
            },
            "RandomTreeGraphs": {
                "__init__": [
                    "self",
                    "variables",
                    "params",
                    "t_ops",
                    "i_ops",
                    "tree_num"
                ],
                "tree_initialization": [
                    "self"
                ],
                "_gini": [
                    "self",
                    "class_counts"
                ],
                "_weighted_gini": [
                    "self",
                    "class_counts"
                ],
                "_variance": [
                    "self",
                    "sums",
                    "squares"
                ],
                "training_graph": [
                    "self",
                    "input_data",
                    "input_labels",
                    "random_seed",
                    "data_spec",
                    "input_weights"
                ],
                "finish_iteration": [
                    "self"
                ],
                "inference_graph": [
                    "self",
                    "input_data",
                    "data_spec"
                ],
                "average_impurity": [
                    "self"
                ],
                "size": [
                    "self"
                ],
                "get_stats": [
                    "self",
                    "session"
                ]
            }
        },
        "tensorflow.contrib.tensor_forest.python.ops.training_ops": {
            "Load": []
        },
        "tensorflow.contrib.tensor_forest.python.ops.topn_ops": {
            "Load": []
        },
        "tensorflow.contrib.tensor_forest.python.ops": {},
        "tensorflow.contrib.tensor_forest.python.ops.inference_ops": {
            "Load": []
        },
        "tensorflow.contrib.tensor_forest.python.kernel_tests.count_extremely_random_stats_op_test": {
            "CountExtremelyRandomStatsClassificationTest": {
                "setUp": [
                    "self"
                ],
                "testSimple": [
                    "self"
                ],
                "testSimpleWeighted": [
                    "self"
                ],
                "testMissingLabel": [
                    "self"
                ],
                "testSparseInput": [
                    "self"
                ],
                "testFutureEpoch": [
                    "self"
                ],
                "testThreaded": [
                    "self"
                ],
                "testNoAccumulators": [
                    "self"
                ],
                "testBadInput": [
                    "self"
                ]
            },
            "CountExtremelyRandomStatsRegressionTest": {
                "setUp": [
                    "self"
                ],
                "testSimple": [
                    "self"
                ],
                "testSimpleWeighted": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.tensor_forest.python.kernel_tests.finished_nodes_op_test": {
            "FinishedNodesTest": {
                "setUp": [
                    "self"
                ],
                "testSimple": [
                    "self"
                ],
                "testLeavesCanBeNegativeOne": [
                    "self"
                ],
                "testNoAccumulators": [
                    "self"
                ],
                "testBadInput": [
                    "self"
                ],
                "testEarlyDominatesHoeffding": [
                    "self"
                ],
                "testEarlyDominatesBootstrap": [
                    "self"
                ],
                "testEarlyDominatesChebyshev": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.tensor_forest.python.kernel_tests.update_fertile_slots_op_test": {
            "UpdateFertileSlotsTest": {
                "setUp": [
                    "self"
                ],
                "testSimple": [
                    "self"
                ],
                "testNoFinished": [
                    "self"
                ],
                "testPureCounts": [
                    "self"
                ],
                "testBadInput": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.tensor_forest.python.kernel_tests.best_splits_op_test": {
            "BestSplitsClassificationTests": {
                "setUp": [
                    "self"
                ],
                "testSimple": [
                    "self"
                ],
                "testNoFinished": [
                    "self"
                ],
                "testBadInput": [
                    "self"
                ]
            },
            "BestSplitsRegressionTests": {
                "setUp": [
                    "self"
                ],
                "testSimple": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.tensor_forest.python.kernel_tests.grow_tree_op_test": {
            "GrowTreeTest": {
                "setUp": [
                    "self"
                ],
                "testSimple": [
                    "self"
                ],
                "testNoRoomToGrow": [
                    "self"
                ],
                "testNoFinished": [
                    "self"
                ],
                "testBadInput": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.tensor_forest.python.kernel_tests": {},
        "tensorflow.contrib.tensor_forest.python.kernel_tests.scatter_add_ndim_op_test": {
            "ScatterAddNdimTest": {
                "setUp": [
                    "self"
                ],
                "test1dim": [
                    "self"
                ],
                "test3dim": [
                    "self"
                ],
                "testNoUpdates": [
                    "self"
                ],
                "testBadInput": [
                    "self"
                ],
                "testIncompleteIndices": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.tensor_forest.python.kernel_tests.tree_predictions_op_test": {
            "TreePredictionsTest": {
                "setUp": [
                    "self"
                ],
                "testSimple": [
                    "self"
                ],
                "testSparseInput": [
                    "self"
                ],
                "testSparseInputDefaultIsZero": [
                    "self"
                ],
                "testBackoffToParent": [
                    "self"
                ],
                "testNoInput": [
                    "self"
                ],
                "testBadInput": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.tensor_forest.python.kernel_tests.sample_inputs_op_test": {
            "SampleInputsTest": {
                "setUp": [
                    "self"
                ],
                "testSimple": [
                    "self"
                ],
                "testSparse": [
                    "self"
                ],
                "testWeights": [
                    "self"
                ],
                "testNoAccumulators": [
                    "self"
                ],
                "testBadInput": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.tensor_forest.data": {},
        "tensorflow.contrib.tensor_forest.data.data_ops": {
            "Load": [],
            "ParseDataTensorOrDict": [
                "data"
            ],
            "ParseLabelTensorOrDict": [
                "labels"
            ]
        },
        "tensorflow.contrib.tensor_forest.hybrid": {},
        "tensorflow.contrib.tensor_forest.hybrid.python.hybrid_model": {
            "HybridModel": {
                "__init__": [
                    "self",
                    "params",
                    "device_assigner",
                    "optimizer_class"
                ],
                "_do_layer_inference": [
                    "self",
                    "layer",
                    "data"
                ],
                "_base_inference": [
                    "self",
                    "data",
                    "data_spec"
                ],
                "inference_graph": [
                    "self",
                    "data",
                    "data_spec"
                ],
                "training_inference_graph": [
                    "self",
                    "data",
                    "data_spec"
                ],
                "predict_proba": [
                    "self",
                    "data",
                    "data_spec"
                ],
                "training_graph": [
                    "self",
                    "data",
                    "labels",
                    "data_spec",
                    "epoch"
                ],
                "loss": [
                    "self",
                    "data",
                    "labels"
                ],
                "training_loss": [
                    "self",
                    "data",
                    "labels"
                ],
                "validation_loss": [
                    "self",
                    "data",
                    "labels"
                ]
            }
        },
        "tensorflow.contrib.tensor_forest.hybrid.python.hybrid_layer_test": {
            "HybridLayerTest": {
                "setUp": [
                    "self"
                ],
                "testLayerNums": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.tensor_forest.hybrid.python.hybrid_layer": {
            "HybridLayer": {
                "_define_vars": [
                    "self",
                    "params"
                ],
                "__init__": [
                    "self",
                    "params",
                    "layer_num",
                    "device_assigner"
                ],
                "inference_graph": [
                    "self",
                    "data",
                    "data_spec"
                ]
            }
        },
        "tensorflow.contrib.tensor_forest.hybrid.python": {},
        "tensorflow.contrib.tensor_forest.hybrid.python.ops.training_ops": {
            "_RoutingFunctionGradient": [
                "op",
                "grad"
            ],
            "_StochasticHardRoutingFunctionGradient": [
                "op",
                "routing_grad",
                "unused_path_grad"
            ],
            "_KFeatureRoutingFunctionGradient": [
                "op",
                "grad"
            ],
            "Load": []
        },
        "tensorflow.contrib.tensor_forest.hybrid.python.ops": {},
        "tensorflow.contrib.tensor_forest.hybrid.python.kernel_tests.k_feature_routing_function_op_test": {
            "KFeatureRoutingFunctionTest": {
                "setUp": [
                    "self"
                ],
                "testParams": [
                    "self"
                ],
                "testRoutingFunction": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.tensor_forest.hybrid.python.kernel_tests.routing_function_op_test": {
            "RoutingFunctionTest": {
                "setUp": [
                    "self"
                ],
                "testRoutingFunction": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.tensor_forest.hybrid.python.kernel_tests": {},
        "tensorflow.contrib.tensor_forest.hybrid.python.layers.decisions_to_data_test": {
            "DecisionsToDataTest": {
                "setUp": [
                    "self"
                ],
                "testInferenceConstruction": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.tensor_forest.hybrid.python.layers.decisions_to_data": {
            "DecisionsToDataLayer": {
                "_define_vars": [
                    "self",
                    "params"
                ],
                "__init__": [
                    "self",
                    "params",
                    "layer_num",
                    "device_assigner"
                ],
                "inference_graph": [
                    "self",
                    "data"
                ]
            },
            "KFeatureDecisionsToDataLayer": {
                "_define_vars": [
                    "self",
                    "params"
                ],
                "__init__": [
                    "self",
                    "params",
                    "layer_num",
                    "device_assigner"
                ],
                "inference_graph": [
                    "self",
                    "data"
                ]
            },
            "HardDecisionsToDataLayer": {
                "_define_vars": [
                    "self",
                    "params"
                ],
                "soft_inference_graph": [
                    "self",
                    "data"
                ],
                "inference_graph": [
                    "self",
                    "data"
                ]
            },
            "StochasticHardDecisionsToDataLayer": {
                "_define_vars": [
                    "self",
                    "params"
                ],
                "soft_inference_graph": [
                    "self",
                    "data"
                ],
                "inference_graph": [
                    "self",
                    "data"
                ]
            },
            "StochasticSoftDecisionsToDataLayer": {
                "_define_vars": [
                    "self",
                    "params"
                ],
                "inference_graph": [
                    "self",
                    "data"
                ]
            }
        },
        "tensorflow.contrib.tensor_forest.hybrid.python.layers": {},
        "tensorflow.contrib.tensor_forest.hybrid.python.layers.fully_connected": {
            "FullyConnectedLayer": {
                "_define_vars": [
                    "self",
                    "params"
                ],
                "inference_graph": [
                    "self",
                    "data"
                ]
            },
            "ManyToOneLayer": {
                "_define_vars": [
                    "self",
                    "params"
                ],
                "inference_graph": [
                    "self",
                    "data"
                ]
            },
            "FlattenedFullyConnectedLayer": {
                "_define_vars": [
                    "self",
                    "params"
                ],
                "inference_graph": [
                    "self",
                    "data"
                ]
            }
        },
        "tensorflow.contrib.tensor_forest.hybrid.python.models.k_feature_decisions_to_data_then_nn_test": {
            "KFeatureDecisionsToDataThenNNTest": {
                "setUp": [
                    "self"
                ],
                "testKFeatureInferenceConstruction": [
                    "self"
                ],
                "testKFeatureTrainingConstruction": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.tensor_forest.hybrid.python.models.decisions_to_data_then_nn_test": {
            "DecisionsToDataThenNNTest": {
                "setUp": [
                    "self"
                ],
                "testHParams": [
                    "self"
                ],
                "testConstructionPollution": [
                    "self"
                ],
                "testInferenceConstruction": [
                    "self"
                ],
                "testTrainingConstruction": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.tensor_forest.hybrid.python.models.k_feature_decisions_to_data_then_nn": {
            "KFeatureDecisionsToDataThenNN": {
                "__init__": [
                    "self",
                    "params",
                    "device_assigner",
                    "optimizer_class"
                ]
            }
        },
        "tensorflow.contrib.tensor_forest.hybrid.python.models.decisions_to_data_then_nn": {
            "DecisionsToDataThenNN": {
                "__init__": [
                    "self",
                    "params",
                    "device_assigner",
                    "optimizer_class"
                ]
            }
        },
        "tensorflow.contrib.tensor_forest.hybrid.python.models": {},
        "tensorflow.contrib.tensor_forest.hybrid.python.models.stochastic_soft_decisions_to_data_then_nn": {
            "StochasticSoftDecisionsToDataThenNN": {
                "__init__": [
                    "self",
                    "params",
                    "device_assigner",
                    "optimizer_class"
                ]
            }
        },
        "tensorflow.contrib.tensor_forest.hybrid.python.models.stochastic_hard_decisions_to_data_then_nn": {
            "StochasticHardDecisionsToDataThenNN": {
                "__init__": [
                    "self",
                    "params",
                    "device_assigner",
                    "optimizer_class"
                ]
            }
        },
        "tensorflow.contrib.tensor_forest.hybrid.python.models.hard_decisions_to_data_then_nn": {
            "HardDecisionsToDataThenNN": {
                "__init__": [
                    "self",
                    "params",
                    "device_assigner",
                    "optimizer_class"
                ],
                "_base_inference": [
                    "self",
                    "data",
                    "data_spec",
                    "soft"
                ],
                "inference_graph": [
                    "self",
                    "data",
                    "data_spec"
                ],
                "training_inference_graph": [
                    "self",
                    "data",
                    "data_spec"
                ]
            }
        },
        "tensorflow.contrib.tensor_forest.hybrid.python.models.forest_to_data_then_nn_test": {
            "ForestToDataThenNNTest": {
                "setUp": [
                    "self"
                ],
                "testInferenceConstruction": [
                    "self"
                ],
                "testTrainingConstruction": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.tensor_forest.hybrid.python.models.forest_to_data_then_nn": {
            "ForestToDataThenNN": {
                "__init__": [
                    "self",
                    "params",
                    "device_assigner",
                    "optimizer_class"
                ]
            }
        },
        "tensorflow.contrib.tensor_forest.hybrid.python.models.nn": {
            "NN": {
                "__init__": [
                    "self",
                    "params",
                    "device_assigner",
                    "optimizer_class"
                ]
            }
        },
        "tensorflow.contrib.tensor_forest.hybrid.core": {},
        "tensorflow.contrib.tensor_forest.hybrid.core.ops": {},
        "tensorflow.contrib.tensor_forest.client": {},
        "tensorflow.contrib.tensor_forest.client.eval_metrics": {
            "_top_k_generator": [
                "k"
            ],
            "_accuracy": [
                "predictions",
                "targets",
                "weights"
            ],
            "_r2": [
                "probabilities",
                "targets",
                "weights"
            ],
            "_squeeze_and_onehot": [
                "targets",
                "depth"
            ],
            "_sigmoid_entropy": [
                "probabilities",
                "targets",
                "weights"
            ],
            "_softmax_entropy": [
                "probabilities",
                "targets",
                "weights"
            ],
            "_predictions": [
                "predictions",
                "unused_targets"
            ],
            "_class_log_loss": [
                "probabilities",
                "targets",
                "weights"
            ],
            "_precision": [
                "predictions",
                "targets",
                "weights"
            ],
            "_recall": [
                "predictions",
                "targets",
                "weights"
            ],
            "get_metric": [
                "metric_name"
            ],
            "get_prediction_key": [
                "metric_name"
            ]
        },
        "tensorflow.contrib.tensor_forest.core": {},
        "tensorflow.contrib.tensor_forest.core.ops": {},
        "tensorflow.contrib.learn": {},
        "tensorflow.contrib.learn.python": {},
        "tensorflow.contrib.learn.python.learn.grid_search_test": {
            "GridSearchTest": {
                "testIrisDNN": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.learn.python.learn.trainable": {
            "Trainable": {
                "fit": [
                    "self",
                    "x",
                    "y",
                    "input_fn",
                    "steps",
                    "batch_size",
                    "monitors",
                    "max_steps"
                ]
            }
        },
        "tensorflow.contrib.learn.python.learn.experiment": {
            "_new_attr_context": [
                "obj",
                "attr"
            ],
            "_GlobalStepWaiterHook": {
                "__init__": [
                    "self",
                    "wait_until_step"
                ],
                "begin": [
                    "self"
                ],
                "before_run": [
                    "self",
                    "run_context"
                ]
            },
            "Experiment": {
                "__init__": [
                    "self",
                    "estimator",
                    "train_input_fn",
                    "eval_input_fn",
                    "eval_metrics",
                    "train_steps",
                    "eval_steps",
                    "train_monitors",
                    "local_eval_frequency",
                    "eval_delay_secs",
                    "continuous_eval_throttle_secs",
                    "min_eval_frequency",
                    "delay_workers_by_global_step"
                ],
                "estimator": [
                    "self"
                ],
                "train": [
                    "self",
                    "delay_secs"
                ],
                "evaluate": [
                    "self",
                    "delay_secs"
                ],
                "local_run": [
                    "self"
                ],
                "_continuous_eval": [
                    "self",
                    "input_fn",
                    "name",
                    "delay_secs",
                    "throttle_delay_secs"
                ],
                "continuous_eval": [
                    "self",
                    "delay_secs",
                    "throttle_delay_secs"
                ],
                "continuous_eval_on_train_data": [
                    "self",
                    "delay_secs",
                    "throttle_delay_secs"
                ],
                "train_and_evaluate": [
                    "self"
                ],
                "run_std_server": [
                    "self"
                ],
                "test": [
                    "self"
                ],
                "_start_server": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.learn.python.learn.models": {
            "linear_regression_zero_init": [
                "x",
                "y"
            ],
            "logistic_regression_zero_init": [
                "x",
                "y"
            ],
            "linear_regression": [
                "x",
                "y",
                "init_mean",
                "init_stddev"
            ],
            "logistic_regression": [
                "x",
                "y",
                "class_weight",
                "init_mean",
                "init_stddev"
            ],
            "_reverse_seq": [
                "input_seq",
                "lengths"
            ],
            "bidirectional_rnn": [
                "cell_fw",
                "cell_bw",
                "inputs",
                "initial_state_fw",
                "initial_state_bw",
                "dtype",
                "sequence_length",
                "scope"
            ],
            "get_rnn_model": [
                "rnn_size",
                "cell_type",
                "num_layers",
                "input_op_fn",
                "bidirectional",
                "target_predictor_fn",
                "sequence_length",
                "initial_state",
                "attn_length",
                "attn_size",
                "attn_vec_size"
            ]
        },
        "tensorflow.contrib.learn.python.learn.summary_writer_cache": {},
        "tensorflow.contrib.learn.python.learn.graph_actions_test": {
            "_Feeder": {
                "__init__": [
                    "self",
                    "tensor",
                    "max_step"
                ],
                "step": [
                    "self"
                ],
                "feed_fn": [
                    "self"
                ]
            },
            "_BaseMonitorWrapper": {
                "__init__": [
                    "self",
                    "run_on_all_workers"
                ],
                "run_on_all_workers": [
                    "self"
                ],
                "is_active": [
                    "self"
                ],
                "has_step": [
                    "self"
                ],
                "begin": [
                    "self",
                    "max_steps"
                ],
                "step_begin": [
                    "self",
                    "step"
                ]
            },
            "GraphActionsTest": {
                "setUp": [
                    "self"
                ],
                "tearDown": [
                    "self"
                ],
                "_assert_summaries": [
                    "self",
                    "output_dir",
                    "writer",
                    "expected_summaries",
                    "expected_graphs",
                    "expected_meta_graphs",
                    "expected_session_logs"
                ],
                "_assert_ckpt": [
                    "self",
                    "output_dir",
                    "expected"
                ],
                "test_summary_writer": [
                    "self"
                ],
                "_build_inference_graph": [
                    "self"
                ],
                "test_infer": [
                    "self"
                ],
                "test_coordinator_request_stop_called": [
                    "self",
                    "request_stop"
                ],
                "test_run_feeds_iter_cleanup_with_exceptions": [
                    "self",
                    "request_stop"
                ],
                "test_run_feeds_iter_calls_resources_init": [
                    "self"
                ],
                "test_infer_different_default_graph": [
                    "self"
                ],
                "test_infer_invalid_feed": [
                    "self"
                ],
                "test_infer_feed": [
                    "self"
                ],
                "test_evaluate_invalid_args": [
                    "self"
                ],
                "test_evaluate": [
                    "self"
                ],
                "test_evaluate_feed_fn": [
                    "self"
                ],
                "test_evaluate_feed_fn_with_exhaustion": [
                    "self"
                ],
                "test_evaluate_with_saver": [
                    "self"
                ],
                "test_train_invalid_args": [
                    "self"
                ],
                "test_train": [
                    "self"
                ],
                "test_train_steps_is_incremental": [
                    "self"
                ],
                "test_train_max_steps_is_not_incremental": [
                    "self"
                ],
                "test_train_skip_train_if_max_step_already_saved": [
                    "self"
                ],
                "test_train_loss": [
                    "self"
                ],
                "test_train_summaries": [
                    "self"
                ],
                "test_train_override_saver": [
                    "self"
                ]
            },
            "GraphActionsTrainTest": {
                "setUp": [
                    "self"
                ],
                "tearDown": [
                    "self"
                ],
                "_assert_summaries": [
                    "self",
                    "output_dir",
                    "expected_summaries",
                    "expected_graphs",
                    "expected_meta_graphs",
                    "expected_session_logs"
                ],
                "_assert_ckpt": [
                    "self",
                    "output_dir",
                    "expected"
                ],
                "_build_inference_graph": [
                    "self"
                ],
                "test_train_invalid_args": [
                    "self"
                ],
                "test_train": [
                    "self"
                ],
                "test_train_steps_is_incremental": [
                    "self"
                ],
                "test_train_max_steps_is_not_incremental": [
                    "self"
                ],
                "test_train_loss": [
                    "self"
                ],
                "test_train_summaries": [
                    "self"
                ],
                "test_train_chief_monitor": [
                    "self"
                ],
                "test_train_worker_monitor": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.learn.python.learn.session_run_hook": {},
        "tensorflow.contrib.learn.python.learn.graph_actions": {
            "clear_summary_writers": [],
            "get_summary_writer": [
                "logdir"
            ],
            "_make_saver": [
                "graph",
                "keep_checkpoint_max"
            ],
            "_restore_from_checkpoint": [
                "session",
                "graph",
                "checkpoint_path",
                "saver"
            ],
            "_run_with_monitors": [
                "session",
                "step",
                "tensors",
                "feed_dict",
                "monitors"
            ],
            "_monitored_train": [
                "graph",
                "output_dir",
                "train_op",
                "loss_op",
                "global_step_tensor",
                "init_op",
                "init_feed_dict",
                "init_fn",
                "log_every_steps",
                "supervisor_is_chief",
                "supervisor_master",
                "supervisor_save_model_secs",
                "supervisor_save_model_steps",
                "keep_checkpoint_max",
                "supervisor_save_summaries_secs",
                "supervisor_save_summaries_steps",
                "feed_fn",
                "steps",
                "fail_on_nan_loss",
                "hooks",
                "max_steps"
            ],
            "train": [
                "graph",
                "output_dir",
                "train_op",
                "loss_op",
                "global_step_tensor",
                "init_op",
                "init_feed_dict",
                "init_fn",
                "log_every_steps",
                "supervisor_is_chief",
                "supervisor_master",
                "supervisor_save_model_secs",
                "keep_checkpoint_max",
                "supervisor_save_summaries_steps",
                "feed_fn",
                "steps",
                "fail_on_nan_loss",
                "monitors",
                "max_steps"
            ],
            "_train_internal": [
                "graph",
                "output_dir",
                "train_op",
                "loss_op",
                "global_step_tensor",
                "init_op",
                "init_feed_dict",
                "init_fn",
                "log_every_steps",
                "supervisor_is_chief",
                "supervisor_master",
                "supervisor_save_model_secs",
                "keep_checkpoint_max",
                "supervisor_save_summaries_steps",
                "feed_fn",
                "steps",
                "fail_on_nan_loss",
                "monitors",
                "max_steps"
            ],
            "_get_first_op_from_collection": [
                "collection_name"
            ],
            "_get_saver": [],
            "_get_ready_op": [],
            "_get_local_init_op": [],
            "_eval_results_to_str": [
                "eval_results"
            ],
            "_write_summary_results": [
                "output_dir",
                "eval_results",
                "current_global_step"
            ],
            "evaluate": [
                "graph",
                "output_dir",
                "checkpoint_path",
                "eval_dict",
                "update_op",
                "global_step_tensor",
                "supervisor_master",
                "log_every_steps",
                "feed_fn",
                "max_steps"
            ],
            "run_n": [
                "output_dict",
                "feed_dict",
                "restore_checkpoint_path",
                "n"
            ],
            "run_feeds_iter": [
                "output_dict",
                "feed_dicts",
                "restore_checkpoint_path"
            ],
            "run_feeds": [],
            "infer": [
                "restore_checkpoint_path",
                "output_dict",
                "feed_dict"
            ]
        },
        "tensorflow.contrib.learn.python.learn.learn_runner": {
            "run": [
                "experiment_fn",
                "output_dir",
                "schedule"
            ],
            "_is_distributed": [
                "config"
            ],
            "_get_default_schedule": [
                "config"
            ]
        },
        "tensorflow.contrib.learn.python.learn.metric_spec_test": {
            "test_metric": [
                "predictions",
                "labels",
                "weights"
            ],
            "MetricSpecTest": {
                "test_create_metric_ops": [
                    "self"
                ],
                "test_no_weight": [
                    "self"
                ],
                "test_fail_no_prediction": [
                    "self"
                ],
                "test_fail_no_label": [
                    "self"
                ],
                "test_single_prediction": [
                    "self"
                ],
                "test_single_label": [
                    "self"
                ],
                "test_fail_single_prediction": [
                    "self"
                ],
                "test_fail_single_label": [
                    "self"
                ],
                "test_str": [
                    "self"
                ],
                "test_partial_str": [
                    "self"
                ],
                "test_partial": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.learn.python.learn.experiment_test": {
            "TestEstimator": {
                "__init__": [
                    "self",
                    "config"
                ],
                "config": [
                    "self"
                ],
                "evaluate": [
                    "self"
                ],
                "fit": [
                    "self"
                ]
            },
            "GlobalStepWaiterHookTest": {
                "test_not_wait_for_step_zero": [
                    "self"
                ],
                "test_wait_for_step": [
                    "self"
                ]
            },
            "ExperimentTest": {
                "setUp": [
                    "self"
                ],
                "_cluster_spec": [
                    "self"
                ],
                "test_train": [
                    "self"
                ],
                "test_train_delay": [
                    "self"
                ],
                "test_train_default_delay": [
                    "self"
                ],
                "test_train_starts_server": [
                    "self",
                    "mock_server"
                ],
                "test_train_server_does_not_start_without_cluster_spec": [
                    "self",
                    "mock_server"
                ],
                "test_train_server_does_not_start_with_empty_master": [
                    "self",
                    "mock_server"
                ],
                "test_train_raises_if_job_name_is_missing": [
                    "self"
                ],
                "test_evaluate": [
                    "self"
                ],
                "test_evaluate_delay": [
                    "self"
                ],
                "test_continuous_eval": [
                    "self"
                ],
                "test_continuous_eval_throttle_delay": [
                    "self"
                ],
                "test_run_local": [
                    "self"
                ],
                "test_train_and_evaluate": [
                    "self"
                ],
                "test_run_std_server": [
                    "self",
                    "mock_server"
                ],
                "test_run_std_server_raises_without_cluster_spec": [
                    "self",
                    "mock_server"
                ],
                "test_test": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.learn.python.learn.evaluable": {
            "Evaluable": {
                "evaluate": [
                    "self",
                    "x",
                    "y",
                    "input_fn",
                    "feed_fn",
                    "batch_size",
                    "steps",
                    "metrics",
                    "name"
                ]
            }
        },
        "tensorflow.contrib.learn.python.learn.monitors": {
            "_extract_output": [
                "outputs",
                "request"
            ],
            "get_default_monitors": [
                "loss_op",
                "summary_op",
                "save_summary_steps",
                "output_dir",
                "summary_writer"
            ],
            "replace_monitors_with_hooks": [
                "monitors_or_hooks",
                "estimator"
            ],
            "_as_graph_element": [
                "obj"
            ],
            "BaseMonitor": {
                "__init__": [
                    "self"
                ],
                "run_on_all_workers": [
                    "self"
                ],
                "set_estimator": [
                    "self",
                    "estimator"
                ],
                "begin": [
                    "self",
                    "max_steps"
                ],
                "end": [
                    "self",
                    "session"
                ],
                "epoch_begin": [
                    "self",
                    "epoch"
                ],
                "epoch_end": [
                    "self",
                    "epoch"
                ],
                "step_begin": [
                    "self",
                    "step"
                ],
                "step_end": [
                    "self",
                    "step",
                    "output"
                ],
                "post_step": [
                    "self",
                    "step",
                    "session"
                ]
            },
            "EveryN": {
                "__init__": [
                    "self",
                    "every_n_steps",
                    "first_n_steps"
                ],
                "every_n_step_begin": [
                    "self",
                    "step"
                ],
                "every_n_step_end": [
                    "self",
                    "step",
                    "outputs"
                ],
                "every_n_post_step": [
                    "self",
                    "step",
                    "session"
                ],
                "step_begin": [
                    "self",
                    "step"
                ],
                "step_end": [
                    "self",
                    "step",
                    "output"
                ],
                "post_step": [
                    "self",
                    "step",
                    "session"
                ],
                "end": [
                    "self",
                    "session"
                ]
            },
            "StopAtStep": {
                "__init__": [
                    "self",
                    "num_steps",
                    "last_step"
                ],
                "run_on_all_workers": [
                    "self"
                ],
                "step_begin": [
                    "self",
                    "step"
                ],
                "step_end": [
                    "self",
                    "step",
                    "output"
                ]
            },
            "PrintTensor": {
                "__init__": [
                    "self",
                    "tensor_names",
                    "every_n",
                    "first_n"
                ],
                "every_n_step_begin": [
                    "self",
                    "step"
                ],
                "every_n_step_end": [
                    "self",
                    "step",
                    "outputs"
                ]
            },
            "LoggingTrainable": {
                "__init__": [
                    "self",
                    "scope",
                    "every_n",
                    "first_n"
                ],
                "every_n_step_begin": [
                    "self",
                    "step"
                ],
                "every_n_step_end": [
                    "self",
                    "step",
                    "outputs"
                ]
            },
            "SummarySaver": {
                "__init__": [
                    "self",
                    "summary_op",
                    "save_steps",
                    "output_dir",
                    "summary_writer",
                    "scaffold"
                ],
                "set_estimator": [
                    "self",
                    "estimator"
                ],
                "every_n_step_begin": [
                    "self",
                    "step"
                ],
                "every_n_step_end": [
                    "self",
                    "step",
                    "outputs"
                ],
                "end": [
                    "self",
                    "session"
                ]
            },
            "ValidationMonitor": {
                "__init__": [
                    "self",
                    "x",
                    "y",
                    "input_fn",
                    "batch_size",
                    "eval_steps",
                    "every_n_steps",
                    "metrics",
                    "early_stopping_rounds",
                    "early_stopping_metric",
                    "early_stopping_metric_minimize",
                    "name"
                ],
                "early_stopped": [
                    "self"
                ],
                "best_step": [
                    "self"
                ],
                "best_value": [
                    "self"
                ],
                "every_n_step_end": [
                    "self",
                    "step",
                    "outputs"
                ]
            },
            "CaptureVariable": {
                "__init__": [
                    "self",
                    "var_name",
                    "every_n",
                    "first_n"
                ],
                "values": [
                    "self"
                ],
                "every_n_step_begin": [
                    "self",
                    "step"
                ],
                "every_n_step_end": [
                    "self",
                    "step",
                    "outputs"
                ]
            },
            "GraphDump": {
                "__init__": [
                    "self",
                    "ignore_ops"
                ],
                "begin": [
                    "self",
                    "max_steps"
                ],
                "step_begin": [
                    "self",
                    "step"
                ],
                "step_end": [
                    "self",
                    "step",
                    "output"
                ],
                "data": [
                    "self"
                ],
                "compare": [
                    "self",
                    "other_dump",
                    "step",
                    "atol"
                ]
            },
            "ExportMonitor": {
                "__init__": [
                    "self",
                    "every_n_steps",
                    "export_dir",
                    "input_fn",
                    "input_feature_key",
                    "exports_to_keep",
                    "signature_fn",
                    "default_batch_size"
                ],
                "export_dir": [
                    "self"
                ],
                "exports_to_keep": [
                    "self"
                ],
                "signature_fn": [
                    "self"
                ],
                "last_export_dir": [
                    "self"
                ],
                "every_n_step_end": [
                    "self",
                    "step",
                    "outputs"
                ],
                "end": [
                    "self",
                    "session"
                ]
            },
            "CheckpointSaver": {
                "__init__": [
                    "self",
                    "checkpoint_dir",
                    "save_secs",
                    "save_steps",
                    "saver",
                    "checkpoint_basename",
                    "scaffold"
                ],
                "begin": [
                    "self",
                    "max_steps"
                ],
                "step_begin": [
                    "self",
                    "step"
                ],
                "post_step": [
                    "self",
                    "step",
                    "session"
                ],
                "end": [
                    "self",
                    "session"
                ],
                "_save": [
                    "self",
                    "step",
                    "session"
                ]
            },
            "StepCounter": {
                "__init__": [
                    "self",
                    "every_n_steps",
                    "output_dir",
                    "summary_writer"
                ],
                "set_estimator": [
                    "self",
                    "estimator"
                ],
                "every_n_step_end": [
                    "self",
                    "current_step",
                    "outputs"
                ]
            },
            "NanLossDuringTrainingError": {
                "__str__": [
                    "self"
                ]
            },
            "NanLoss": {
                "__init__": [
                    "self",
                    "loss_tensor",
                    "every_n_steps",
                    "fail_on_nan_loss"
                ],
                "every_n_step_begin": [
                    "self",
                    "step"
                ],
                "every_n_step_end": [
                    "self",
                    "step",
                    "outputs"
                ]
            },
            "RunHookAdapterForMonitors": {
                "__init__": [
                    "self",
                    "monitors"
                ],
                "begin": [
                    "self"
                ],
                "before_run": [
                    "self",
                    "run_context"
                ],
                "after_run": [
                    "self",
                    "run_context",
                    "run_values"
                ],
                "end": [
                    "self",
                    "session"
                ]
            }
        },
        "tensorflow.contrib.learn.python.learn.metric_spec": {
            "MetricSpec": {
                "__init__": [
                    "self",
                    "metric_fn",
                    "prediction_key",
                    "label_key",
                    "weight_key"
                ],
                "prediction_key": [
                    "self"
                ],
                "label_key": [
                    "self"
                ],
                "weight_key": [
                    "self"
                ],
                "metric_fn": [
                    "self"
                ],
                "__str__": [
                    "self"
                ],
                "create_metric_ops": [
                    "self",
                    "inputs",
                    "labels",
                    "predictions"
                ]
            }
        },
        "tensorflow.contrib.learn.python.learn": {},
        "tensorflow.contrib.learn.python.learn.monitored_session": {},
        "tensorflow.contrib.learn.python.learn.basic_session_run_hooks": {},
        "tensorflow.contrib.learn.python.learn.monitors_test": {
            "_MyEveryN": {
                "__init__": [
                    "self",
                    "every_n_steps",
                    "first_n_steps"
                ],
                "steps_begun": [
                    "self"
                ],
                "steps_ended": [
                    "self"
                ],
                "post_steps": [
                    "self"
                ],
                "every_n_step_begin": [
                    "self",
                    "step"
                ],
                "every_n_step_end": [
                    "self",
                    "step",
                    "outputs"
                ],
                "every_n_post_step": [
                    "self",
                    "step",
                    "session"
                ]
            },
            "MonitorsTest": {
                "setUp": [
                    "self"
                ],
                "tearDown": [
                    "self"
                ],
                "_run_monitor": [
                    "self",
                    "monitor",
                    "num_epochs",
                    "num_steps_per_epoch",
                    "pass_max_steps"
                ],
                "test_base_monitor": [
                    "self"
                ],
                "test_every_0": [
                    "self"
                ],
                "test_every_1": [
                    "self"
                ],
                "test_every_2": [
                    "self"
                ],
                "test_every_8": [
                    "self"
                ],
                "test_every_8_no_max_steps": [
                    "self"
                ],
                "test_every_8_recovered_after_step_begin": [
                    "self"
                ],
                "test_every_8_recovered_after_step_end": [
                    "self"
                ],
                "test_every_8_call_post_step_at_the_end": [
                    "self"
                ],
                "test_every_8_call_post_step_should_not_be_called_twice": [
                    "self"
                ],
                "test_print": [
                    "self"
                ],
                "test_logging_trainable": [
                    "self"
                ],
                "test_summary_saver": [
                    "self"
                ],
                "_assert_validation_monitor": [
                    "self",
                    "monitor",
                    "expected_early_stopped",
                    "expected_best_step",
                    "expected_best_value"
                ],
                "test_validation_monitor_no_estimator": [
                    "self"
                ],
                "test_validation_monitor_no_ckpt": [
                    "self",
                    "mock_latest_checkpoint",
                    "mock_estimator_class"
                ],
                "test_validation_monitor_no_early_stopping_rounds": [
                    "self",
                    "mock_latest_checkpoint",
                    "mock_estimator_class"
                ],
                "test_validation_monitor_invalid_metric": [
                    "self",
                    "mock_latest_checkpoint",
                    "mock_estimator_class"
                ],
                "test_validation_monitor": [
                    "self",
                    "mock_latest_checkpoint",
                    "mock_estimator_class"
                ],
                "test_graph_dump": [
                    "self"
                ],
                "test_capture_variable": [
                    "self"
                ]
            },
            "StopAtStepTest": {
                "test_raise_in_both_last_step_and_num_steps": [
                    "self"
                ],
                "test_stop_based_on_last_step": [
                    "self"
                ],
                "test_stop_based_on_num_step": [
                    "self"
                ]
            },
            "CheckpointSaverTest": {
                "setUp": [
                    "self"
                ],
                "tearDown": [
                    "self"
                ],
                "_run": [
                    "self",
                    "monitor",
                    "step",
                    "train_op",
                    "sess"
                ],
                "test_raise_in_both_secs_and_steps": [
                    "self"
                ],
                "test_raise_in_none_secs_and_steps": [
                    "self"
                ],
                "test_save_secs_saves_in_first_step": [
                    "self"
                ],
                "disabled_test_save_secs_saves_periodically": [
                    "self"
                ],
                "test_save_steps_saves_in_first_step": [
                    "self"
                ],
                "test_save_steps_saves_periodically": [
                    "self"
                ],
                "test_save_saves_at_end": [
                    "self"
                ]
            },
            "FakeMonitor": {
                "__init__": [
                    "self"
                ],
                "begin": [
                    "self",
                    "max_steps"
                ],
                "end": [
                    "self",
                    "session"
                ],
                "step_begin": [
                    "self",
                    "step"
                ],
                "step_end": [
                    "self",
                    "step",
                    "output"
                ],
                "post_step": [
                    "self",
                    "step",
                    "session"
                ]
            },
            "RunHookAdapterForMonitorsTest": {
                "test_calls_and_steps": [
                    "self"
                ],
                "test_requests": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.learn.python.learn.learn_runner_test": {
            "build_experiment": [
                "output_dir"
            ],
            "build_non_experiment": [
                "output_dir"
            ],
            "build_distributed_cluster_spec": [],
            "build_non_distributed_cluster_spec": [],
            "TestExperiment": {
                "__init__": [
                    "self",
                    "default",
                    "config"
                ],
                "estimator": [
                    "self"
                ],
                "local_run": [
                    "self"
                ],
                "train": [
                    "self"
                ],
                "run_std_server": [
                    "self"
                ],
                "train_and_evaluate": [
                    "self"
                ],
                "simple_task": [
                    "self"
                ]
            },
            "MainTest": {
                "setUp": [
                    "self"
                ],
                "test_run_with_custom_schedule": [
                    "self"
                ],
                "test_run_with_explicit_local_run": [
                    "self"
                ],
                "test_schedule_from_tf_config_runs_train_on_worker": [
                    "self"
                ],
                "test_schedule_from_tf_config_runs_train_and_evaluate_on_master": [
                    "self"
                ],
                "test_schedule_from_tf_config_runs_serve_on_ps": [
                    "self"
                ],
                "test_fail_no_output_dir": [
                    "self"
                ],
                "test_no_schedule_and_no_config_runs_train_and_evaluate": [
                    "self"
                ],
                "test_no_schedule_and_non_distributed_runs_train_and_evaluate": [
                    "self"
                ],
                "test_fail_task_type_with_no_default_schedule": [
                    "self"
                ],
                "test_fail_non_callable": [
                    "self"
                ],
                "test_fail_not_experiment": [
                    "self"
                ],
                "test_fail_non_existent_task": [
                    "self"
                ],
                "test_fail_non_callable_task": [
                    "self"
                ],
                "test_fail_schedule_from_config_with_no_task_type": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.learn.python.learn.dataframe.dataframe": {
            "DataFrame": {
                "__init__": [
                    "self"
                ],
                "columns": [
                    "self"
                ],
                "__len__": [
                    "self"
                ],
                "assign": [
                    "self"
                ],
                "select_columns": [
                    "self",
                    "keys"
                ],
                "exclude_columns": [
                    "self",
                    "exclude_keys"
                ],
                "__getitem__": [
                    "self",
                    "key"
                ],
                "__setitem__": [
                    "self",
                    "key",
                    "value"
                ],
                "__delitem__": [
                    "self",
                    "key"
                ],
                "build": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.learn.python.learn.dataframe.series": {
            "Series": {
                "register_unary_op": [
                    "cls",
                    "series_method_name"
                ],
                "register_binary_op": [
                    "cls",
                    "series_method_name"
                ],
                "build": [
                    "self",
                    "cache"
                ]
            },
            "PredefinedSeries": {
                "__init__": [
                    "self",
                    "name",
                    "feature_spec"
                ],
                "name": [
                    "self"
                ],
                "feature_spec": [
                    "self"
                ],
                "required_base_features": [
                    "self"
                ],
                "build": [
                    "self",
                    "cache"
                ],
                "__repr__": [
                    "self"
                ],
                "__eq__": [
                    "self",
                    "other"
                ],
                "__ne__": [
                    "self",
                    "other"
                ]
            },
            "TransformedSeries": {
                "__init__": [
                    "self",
                    "input_series",
                    "transform",
                    "output_name"
                ],
                "required_base_features": [
                    "self"
                ],
                "build": [
                    "self",
                    "cache"
                ],
                "__repr__": [
                    "self"
                ],
                "make_repr": [
                    "input_series",
                    "transform",
                    "output_name"
                ]
            }
        },
        "tensorflow.contrib.learn.python.learn.dataframe.tensorflow_dataframe": {
            "_expand_file_names": [
                "filepatterns"
            ],
            "_dtype_to_nan": [
                "dtype"
            ],
            "_get_default_value": [
                "feature_spec"
            ],
            "TensorFlowDataFrame": {
                "run": [
                    "self",
                    "num_batches",
                    "graph",
                    "session",
                    "start_queues",
                    "initialize_variables"
                ],
                "select_rows": [
                    "self",
                    "boolean_series"
                ],
                "split": [
                    "self",
                    "index_series",
                    "proportion",
                    "batch_size"
                ],
                "split_fast": [
                    "self",
                    "index_series",
                    "proportion",
                    "batch_size",
                    "base_batch_size"
                ],
                "run_one_batch": [
                    "self"
                ],
                "run_one_epoch": [
                    "self"
                ],
                "materialize_to_memory": [
                    "self",
                    "batch_size"
                ],
                "batch": [
                    "self",
                    "batch_size",
                    "shuffle",
                    "num_threads",
                    "queue_capacity",
                    "min_after_dequeue",
                    "seed"
                ],
                "_from_csv_base": [
                    "cls",
                    "filepatterns",
                    "get_default_values",
                    "has_header",
                    "column_names",
                    "num_threads",
                    "enqueue_size",
                    "batch_size",
                    "queue_capacity",
                    "min_after_dequeue",
                    "shuffle",
                    "seed"
                ],
                "from_csv": [
                    "cls",
                    "filepatterns",
                    "default_values",
                    "has_header",
                    "column_names",
                    "num_threads",
                    "enqueue_size",
                    "batch_size",
                    "queue_capacity",
                    "min_after_dequeue",
                    "shuffle",
                    "seed"
                ],
                "from_csv_with_feature_spec": [
                    "cls",
                    "filepatterns",
                    "feature_spec",
                    "has_header",
                    "column_names",
                    "num_threads",
                    "enqueue_size",
                    "batch_size",
                    "queue_capacity",
                    "min_after_dequeue",
                    "shuffle",
                    "seed"
                ],
                "from_examples": [
                    "cls",
                    "filepatterns",
                    "features",
                    "reader_cls",
                    "num_threads",
                    "enqueue_size",
                    "batch_size",
                    "queue_capacity",
                    "min_after_dequeue",
                    "shuffle",
                    "seed"
                ],
                "from_pandas": [
                    "cls",
                    "pandas_dataframe",
                    "num_threads",
                    "enqueue_size",
                    "batch_size",
                    "queue_capacity",
                    "min_after_dequeue",
                    "shuffle",
                    "seed",
                    "data_name"
                ],
                "from_numpy": [
                    "cls",
                    "numpy_array",
                    "num_threads",
                    "enqueue_size",
                    "batch_size",
                    "queue_capacity",
                    "min_after_dequeue",
                    "shuffle",
                    "seed",
                    "data_name"
                ],
                "from_ordereddict": [
                    "cls",
                    "ordered_dict_of_arrays",
                    "num_threads",
                    "enqueue_size",
                    "batch_size",
                    "queue_capacity",
                    "min_after_dequeue",
                    "shuffle",
                    "seed",
                    "data_name"
                ]
            }
        },
        "tensorflow.contrib.learn.python.learn.dataframe.estimator_utils": {
            "_to_feature_spec": [
                "tensor",
                "default_value"
            ],
            "_infer_feature_specs": [
                "dataframe",
                "keys_with_defaults"
            ],
            "_build_alternate_universe": [
                "dataframe",
                "base_input_keys_with_defaults",
                "feature_keys"
            ],
            "to_feature_columns_and_input_fn": [
                "dataframe",
                "base_input_keys_with_defaults",
                "feature_keys",
                "label_keys"
            ]
        },
        "tensorflow.contrib.learn.python.learn.dataframe": {},
        "tensorflow.contrib.learn.python.learn.dataframe.transform": {
            "_make_list_of_series": [
                "x"
            ],
            "_make_tuple_of_string": [
                "x"
            ],
            "parameter": [
                "func"
            ],
            "Transform": {
                "__init__": [
                    "self"
                ],
                "name": [
                    "self"
                ],
                "parameters": [
                    "self"
                ],
                "input_valency": [
                    "self"
                ],
                "output_names": [
                    "self"
                ],
                "_output_names": [
                    "self"
                ],
                "return_type": [
                    "self"
                ],
                "__str__": [
                    "self"
                ],
                "__repr__": [
                    "self"
                ],
                "__call__": [
                    "self",
                    "input_series"
                ],
                "_produce_output_series": [
                    "self",
                    "input_series"
                ]
            },
            "TensorFlowTransform": {
                "_check_output_tensors": [
                    "self",
                    "output_tensors"
                ],
                "_produce_output_series": [
                    "self",
                    "input_series"
                ],
                "build_transitive": [
                    "self",
                    "input_series",
                    "cache"
                ],
                "_apply_transform": [
                    "self",
                    "input_tensors"
                ]
            }
        },
        "tensorflow.contrib.learn.python.learn.dataframe.transforms.in_memory_source": {
            "BaseInMemorySource": {
                "__init__": [
                    "self",
                    "data",
                    "num_threads",
                    "enqueue_size",
                    "batch_size",
                    "queue_capacity",
                    "shuffle",
                    "min_after_dequeue",
                    "seed",
                    "data_name"
                ],
                "data": [
                    "self"
                ],
                "num_threads": [
                    "self"
                ],
                "enqueue_size": [
                    "self"
                ],
                "batch_size": [
                    "self"
                ],
                "queue_capacity": [
                    "self"
                ],
                "shuffle": [
                    "self"
                ],
                "min_after_dequeue": [
                    "self"
                ],
                "seed": [
                    "self"
                ],
                "data_name": [
                    "self"
                ],
                "input_valency": [
                    "self"
                ],
                "_apply_transform": [
                    "self",
                    "transform_input"
                ]
            },
            "NumpySource": {
                "name": [
                    "self"
                ],
                "_output_names": [
                    "self"
                ]
            },
            "OrderedDictNumpySource": {
                "__init__": [
                    "self",
                    "ordered_dict_of_arrays",
                    "num_threads",
                    "enqueue_size",
                    "batch_size",
                    "queue_capacity",
                    "shuffle",
                    "min_after_dequeue",
                    "seed",
                    "data_name"
                ],
                "name": [
                    "self"
                ],
                "_output_names": [
                    "self"
                ]
            },
            "PandasSource": {
                "__init__": [
                    "self",
                    "dataframe",
                    "num_threads",
                    "enqueue_size",
                    "batch_size",
                    "queue_capacity",
                    "shuffle",
                    "min_after_dequeue",
                    "seed",
                    "data_name"
                ],
                "name": [
                    "self"
                ],
                "_output_names": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.learn.python.learn.dataframe.transforms.difference": {
            "_negate_sparse": [
                "st"
            ],
            "Difference": {
                "__init__": [
                    "self"
                ],
                "name": [
                    "self"
                ],
                "input_valency": [
                    "self"
                ],
                "_output_names": [
                    "self"
                ],
                "_apply_transform": [
                    "self",
                    "input_tensors"
                ]
            }
        },
        "tensorflow.contrib.learn.python.learn.dataframe.transforms.csv_parser": {
            "CSVParser": {
                "__init__": [
                    "self",
                    "column_names",
                    "default_values"
                ],
                "name": [
                    "self"
                ],
                "input_valency": [
                    "self"
                ],
                "_output_names": [
                    "self"
                ],
                "column_names": [
                    "self"
                ],
                "default_values": [
                    "self"
                ],
                "_apply_transform": [
                    "self",
                    "input_tensors"
                ]
            }
        },
        "tensorflow.contrib.learn.python.learn.dataframe.transforms.unary_transforms": {
            "register_unary_op": [
                "registered_name",
                "operation",
                "ignore_dtype"
            ]
        },
        "tensorflow.contrib.learn.python.learn.dataframe.transforms.hashes": {
            "HashFast": {
                "__init__": [
                    "self",
                    "num_buckets"
                ],
                "name": [
                    "self"
                ],
                "input_valency": [
                    "self"
                ],
                "_output_names": [
                    "self"
                ],
                "_apply_transform": [
                    "self",
                    "input_tensors"
                ]
            }
        },
        "tensorflow.contrib.learn.python.learn.dataframe.transforms.boolean_mask": {
            "sparse_boolean_mask": [
                "sparse_tensor",
                "mask",
                "name"
            ],
            "BooleanMask": {
                "name": [
                    "self"
                ],
                "input_valency": [
                    "self"
                ],
                "_output_names": [
                    "self"
                ],
                "_apply_transform": [
                    "self",
                    "input_tensors"
                ]
            }
        },
        "tensorflow.contrib.learn.python.learn.dataframe.transforms.sparsify": {
            "Sparsify": {
                "__init__": [
                    "self",
                    "strip_value"
                ],
                "strip_value": [
                    "self"
                ],
                "name": [
                    "self"
                ],
                "input_valency": [
                    "self"
                ],
                "_output_names": [
                    "self"
                ],
                "_apply_transform": [
                    "self",
                    "input_tensors"
                ]
            }
        },
        "tensorflow.contrib.learn.python.learn.dataframe.transforms.split_mask": {
            "SplitMask": {
                "__init__": [
                    "self",
                    "proportion"
                ],
                "name": [
                    "self"
                ],
                "input_valency": [
                    "self"
                ],
                "_output_names": [
                    "self"
                ],
                "_produce_output_series": [
                    "self",
                    "input_series"
                ]
            }
        },
        "tensorflow.contrib.learn.python.learn.dataframe.transforms.batch": {
            "AbstractBatchTransform": {
                "__init__": [
                    "self",
                    "batch_size",
                    "output_names",
                    "num_threads",
                    "queue_capacity"
                ],
                "batch_size": [
                    "self"
                ],
                "num_threads": [
                    "self"
                ],
                "queue_capacity": [
                    "self"
                ],
                "input_valency": [
                    "self"
                ],
                "_output_names": [
                    "self"
                ]
            },
            "Batch": {
                "name": [
                    "self"
                ],
                "_apply_transform": [
                    "self",
                    "transform_input"
                ]
            },
            "ShuffleBatch": {
                "name": [
                    "self"
                ],
                "__init__": [
                    "self",
                    "batch_size",
                    "output_names",
                    "num_threads",
                    "queue_capacity",
                    "min_after_dequeue",
                    "seed"
                ],
                "min_after_dequeue": [
                    "self"
                ],
                "seed": [
                    "self"
                ],
                "_apply_transform": [
                    "self",
                    "transform_input"
                ]
            }
        },
        "tensorflow.contrib.learn.python.learn.dataframe.transforms.sum": {
            "Sum": {
                "__init__": [
                    "self"
                ],
                "name": [
                    "self"
                ],
                "input_valency": [
                    "self"
                ],
                "_output_names": [
                    "self"
                ],
                "_apply_transform": [
                    "self",
                    "input_tensors"
                ]
            }
        },
        "tensorflow.contrib.learn.python.learn.dataframe.transforms": {},
        "tensorflow.contrib.learn.python.learn.dataframe.transforms.reader_source": {
            "TextFileSource": [
                "file_names",
                "reader_kwargs",
                "enqueue_size",
                "batch_size",
                "queue_capacity",
                "shuffle",
                "min_after_dequeue",
                "num_threads",
                "seed"
            ],
            "TFRecordSource": [
                "file_names",
                "reader_kwargs",
                "enqueue_size",
                "batch_size",
                "queue_capacity",
                "shuffle",
                "min_after_dequeue",
                "num_threads",
                "seed"
            ],
            "ReaderSource": {
                "__init__": [
                    "self",
                    "reader_cls",
                    "work_units",
                    "reader_kwargs",
                    "enqueue_size",
                    "batch_size",
                    "queue_capacity",
                    "shuffle",
                    "min_after_dequeue",
                    "num_threads",
                    "seed"
                ],
                "reader_cls": [
                    "self"
                ],
                "work_units": [
                    "self"
                ],
                "reader_kwargs": [
                    "self"
                ],
                "enqueue_size": [
                    "self"
                ],
                "batch_size": [
                    "self"
                ],
                "queue_capacity": [
                    "self"
                ],
                "shuffle": [
                    "self"
                ],
                "min_after_dequeue": [
                    "self"
                ],
                "num_threads": [
                    "self"
                ],
                "seed": [
                    "self"
                ],
                "name": [
                    "self"
                ],
                "input_valency": [
                    "self"
                ],
                "_output_names": [
                    "self"
                ],
                "_apply_transform": [
                    "self",
                    "transform_input"
                ]
            }
        },
        "tensorflow.contrib.learn.python.learn.dataframe.transforms.example_parser": {
            "ExampleParser": {
                "__init__": [
                    "self",
                    "features"
                ],
                "name": [
                    "self"
                ],
                "input_valency": [
                    "self"
                ],
                "_output_names": [
                    "self"
                ],
                "feature_definitions": [
                    "self"
                ],
                "_apply_transform": [
                    "self",
                    "input_tensors"
                ]
            }
        },
        "tensorflow.contrib.learn.python.learn.dataframe.transforms.binary_transforms": {
            "register_binary_op": [
                "method_name",
                "operation"
            ],
            "SeriesBinaryTransform": {
                "input_valency": [
                    "self"
                ],
                "_output_names": [
                    "self"
                ],
                "_apply_transform": [
                    "self",
                    "input_tensors"
                ]
            },
            "ScalarBinaryTransform": {
                "__init__": [
                    "self",
                    "scalar"
                ],
                "scalar": [
                    "self"
                ],
                "input_valency": [
                    "self"
                ],
                "_output_names": [
                    "self"
                ],
                "_apply_transform": [
                    "self",
                    "input_tensors"
                ]
            }
        },
        "tensorflow.contrib.learn.python.learn.dataframe.transforms.densify": {
            "Densify": {
                "__init__": [
                    "self",
                    "default_value"
                ],
                "default_value": [
                    "self"
                ],
                "name": [
                    "self"
                ],
                "input_valency": [
                    "self"
                ],
                "_output_names": [
                    "self"
                ],
                "_apply_transform": [
                    "self",
                    "input_tensors"
                ]
            }
        },
        "tensorflow.contrib.learn.python.learn.dataframe.queues.feeding_queue_runner": {
            "FeedingQueueRunner": {
                "__init__": [
                    "self",
                    "queue",
                    "enqueue_ops",
                    "close_op",
                    "cancel_op",
                    "feed_fns",
                    "queue_closed_exception_types"
                ],
                "_run": [
                    "self",
                    "sess",
                    "enqueue_op",
                    "feed_fn",
                    "coord"
                ],
                "create_threads": [
                    "self",
                    "sess",
                    "coord",
                    "daemon",
                    "start"
                ],
                "_init_from_proto": [
                    "self",
                    "queue_runner_def"
                ],
                "to_proto": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.learn.python.learn.dataframe.queues.feeding_functions": {
            "enqueue_data": [
                "data",
                "capacity",
                "shuffle",
                "min_after_dequeue",
                "num_threads",
                "seed",
                "name",
                "enqueue_size",
                "num_epochs"
            ],
            "_ArrayFeedFn": {
                "__init__": [
                    "self",
                    "placeholders",
                    "array",
                    "batch_size",
                    "random_start",
                    "seed",
                    "num_epochs"
                ],
                "__call__": [
                    "self"
                ]
            },
            "_OrderedDictNumpyFeedFn": {
                "__init__": [
                    "self",
                    "placeholders",
                    "ordered_dict_of_arrays",
                    "batch_size",
                    "random_start",
                    "seed",
                    "num_epochs"
                ],
                "__call__": [
                    "self"
                ]
            },
            "_PandasFeedFn": {
                "__init__": [
                    "self",
                    "placeholders",
                    "dataframe",
                    "batch_size",
                    "random_start",
                    "seed",
                    "num_epochs"
                ],
                "__call__": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.learn.python.learn.dataframe.queues": {},
        "tensorflow.contrib.learn.python.learn.ops.embeddings_ops": {
            "embedding_lookup": [
                "params",
                "ids",
                "name"
            ],
            "categorical_variable": [
                "tensor_in",
                "n_classes",
                "embedding_size",
                "name"
            ]
        },
        "tensorflow.contrib.learn.python.learn.ops.seq2seq_ops_test": {
            "Seq2SeqOpsTest": {
                "test_sequence_classifier": [
                    "self"
                ],
                "test_seq2seq_inputs": [
                    "self"
                ],
                "test_rnn_decoder": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.learn.python.learn.ops.seq2seq_ops": {
            "sequence_classifier": [
                "decoding",
                "labels",
                "sampling_decoding",
                "name"
            ],
            "seq2seq_inputs": [
                "x",
                "y",
                "input_length",
                "output_length",
                "sentinel",
                "name"
            ],
            "rnn_decoder": [
                "decoder_inputs",
                "initial_state",
                "cell",
                "scope"
            ],
            "rnn_seq2seq": [
                "encoder_inputs",
                "decoder_inputs",
                "encoder_cell",
                "decoder_cell",
                "dtype",
                "scope"
            ]
        },
        "tensorflow.contrib.learn.python.learn.ops.ops_test": {
            "OpsTest": {
                "test_softmax_classifier": [
                    "self"
                ],
                "test_embedding_lookup": [
                    "self"
                ],
                "test_categorical_variable": [
                    "self"
                ],
                "test_one_hot_matrix": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.learn.python.learn.ops.losses_ops": {
            "mean_squared_error_regressor": [
                "tensor_in",
                "labels",
                "weights",
                "biases",
                "name"
            ],
            "softmax_classifier": [
                "tensor_in",
                "labels",
                "weights",
                "biases",
                "class_weight",
                "name"
            ]
        },
        "tensorflow.contrib.learn.python.learn.ops": {},
        "tensorflow.contrib.learn.python.learn.ops.array_ops": {
            "one_hot_matrix": [
                "tensor_in",
                "num_classes",
                "on_value",
                "off_value"
            ]
        },
        "tensorflow.contrib.learn.python.learn.preprocessing.categorical_vocabulary": {
            "CategoricalVocabulary": {
                "__init__": [
                    "self",
                    "unknown_token",
                    "support_reverse"
                ],
                "__len__": [
                    "self"
                ],
                "freeze": [
                    "self",
                    "freeze"
                ],
                "get": [
                    "self",
                    "category"
                ],
                "add": [
                    "self",
                    "category",
                    "count"
                ],
                "trim": [
                    "self",
                    "min_frequency",
                    "max_frequency"
                ],
                "reverse": [
                    "self",
                    "class_id"
                ]
            }
        },
        "tensorflow.contrib.learn.python.learn.preprocessing.categorical": {
            "CategoricalProcessor": {
                "__init__": [
                    "self",
                    "min_frequency",
                    "share",
                    "vocabularies"
                ],
                "freeze": [
                    "self",
                    "freeze"
                ],
                "fit": [
                    "self",
                    "x",
                    "unused_y"
                ],
                "fit_transform": [
                    "self",
                    "x",
                    "unused_y"
                ],
                "transform": [
                    "self",
                    "x"
                ]
            }
        },
        "tensorflow.contrib.learn.python.learn.preprocessing": {},
        "tensorflow.contrib.learn.python.learn.preprocessing.text": {
            "tokenizer": [
                "iterator"
            ],
            "ByteProcessor": {
                "__init__": [
                    "self",
                    "max_document_length"
                ],
                "fit": [
                    "self",
                    "x"
                ],
                "fit_transform": [
                    "self",
                    "x"
                ],
                "reverse": [
                    "self",
                    "x"
                ],
                "transform": [
                    "self",
                    "x"
                ]
            },
            "VocabularyProcessor": {
                "__init__": [
                    "self",
                    "max_document_length",
                    "min_frequency",
                    "vocabulary",
                    "tokenizer_fn"
                ],
                "fit": [
                    "self",
                    "raw_documents",
                    "unused_y"
                ],
                "fit_transform": [
                    "self",
                    "raw_documents",
                    "unused_y"
                ],
                "transform": [
                    "self",
                    "raw_documents"
                ],
                "reverse": [
                    "self",
                    "documents"
                ],
                "save": [
                    "self",
                    "filename"
                ],
                "restore": [
                    "cls",
                    "filename"
                ]
            }
        },
        "tensorflow.contrib.learn.python.learn.preprocessing.tests.categorical_vocabulary_test": {
            "CategoricalVocabularyTest": {
                "testIntVocabulary": [
                    "self"
                ],
                "testWordVocabulary": [
                    "self"
                ],
                "testCountsTrim": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.learn.python.learn.preprocessing.tests.categorical_test": {
            "CategoricalTest": {
                "testSingleCategoricalProcessor": [
                    "self"
                ],
                "testSingleCategoricalProcessorPandasSingleDF": [
                    "self"
                ],
                "testMultiCategoricalProcessor": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.learn.python.learn.preprocessing.tests.text_test": {
            "TextTest": {
                "testTokenizer": [
                    "self"
                ],
                "testByteProcessor": [
                    "self"
                ],
                "testVocabularyProcessor": [
                    "self"
                ],
                "testVocabularyProcessorSaveRestore": [
                    "self"
                ],
                "testExistingVocabularyProcessor": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.learn.python.learn.preprocessing.tests": {},
        "tensorflow.contrib.learn.python.learn.datasets.produce_small_datasets": {
            "main": [
                "unused_argv"
            ]
        },
        "tensorflow.contrib.learn.python.learn.datasets.load_csv_test": {
            "LoadCsvTest": {
                "testIris": [
                    "self"
                ],
                "testBoston": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.learn.python.learn.datasets.mnist": {
            "_read32": [
                "bytestream"
            ],
            "extract_images": [
                "f"
            ],
            "dense_to_one_hot": [
                "labels_dense",
                "num_classes"
            ],
            "extract_labels": [
                "f",
                "one_hot",
                "num_classes"
            ],
            "read_data_sets": [
                "train_dir",
                "fake_data",
                "one_hot",
                "dtype",
                "reshape",
                "validation_size"
            ],
            "load_mnist": [
                "train_dir"
            ],
            "DataSet": {
                "__init__": [
                    "self",
                    "images",
                    "labels",
                    "fake_data",
                    "one_hot",
                    "dtype",
                    "reshape"
                ],
                "images": [
                    "self"
                ],
                "labels": [
                    "self"
                ],
                "num_examples": [
                    "self"
                ],
                "epochs_completed": [
                    "self"
                ],
                "next_batch": [
                    "self",
                    "batch_size",
                    "fake_data"
                ]
            }
        },
        "tensorflow.contrib.learn.python.learn.datasets.base": {
            "load_csv_with_header": [
                "filename",
                "target_dtype",
                "features_dtype",
                "target_column"
            ],
            "load_csv_without_header": [
                "filename",
                "target_dtype",
                "features_dtype",
                "target_column"
            ],
            "shrink_csv": [
                "filename",
                "ratio"
            ],
            "load_iris": [
                "data_path"
            ],
            "load_boston": [
                "data_path"
            ],
            "maybe_download": [
                "filename",
                "work_directory",
                "source_url"
            ]
        },
        "tensorflow.contrib.learn.python.learn.datasets": {
            "load_dataset": [
                "name",
                "size",
                "test_with_fake_data"
            ]
        },
        "tensorflow.contrib.learn.python.learn.datasets.text_datasets": {
            "maybe_download_dbpedia": [
                "data_dir"
            ],
            "load_dbpedia": [
                "size",
                "test_with_fake_data"
            ]
        },
        "tensorflow.contrib.learn.python.learn.datasets.data": {},
        "tensorflow.contrib.learn.python.learn.estimators.run_config": {
            "_count_ps": [
                "cluster_spec"
            ],
            "_get_master": [
                "cluster_spec",
                "task_type",
                "task_id"
            ],
            "Environment": {},
            "TaskType": {},
            "ClusterConfig": {
                "__init__": [
                    "self",
                    "master",
                    "evaluation_master"
                ],
                "cluster_spec": [
                    "self"
                ],
                "environment": [
                    "self"
                ],
                "evaluation_master": [
                    "self"
                ],
                "is_chief": [
                    "self"
                ],
                "master": [
                    "self"
                ],
                "num_ps_replicas": [
                    "self"
                ],
                "task_id": [
                    "self"
                ],
                "task_type": [
                    "self"
                ],
                "get_task_id": []
            },
            "RunConfig": {
                "__init__": [
                    "self",
                    "master",
                    "num_cores",
                    "log_device_placement",
                    "gpu_memory_fraction",
                    "tf_random_seed",
                    "save_summary_steps",
                    "save_checkpoints_secs",
                    "save_checkpoints_steps",
                    "keep_checkpoint_max",
                    "keep_checkpoint_every_n_hours",
                    "evaluation_master"
                ]
            }
        },
        "tensorflow.contrib.learn.python.learn.estimators.dnn": {
            "_get_feature_dict": [
                "features"
            ],
            "_get_optimizer": [
                "optimizer"
            ],
            "_add_hidden_layer_summary": [
                "value",
                "tag"
            ],
            "_dnn_model_fn": [
                "features",
                "labels",
                "mode",
                "params"
            ],
            "DNNClassifier": {
                "__init__": [
                    "self",
                    "hidden_units",
                    "feature_columns",
                    "model_dir",
                    "n_classes",
                    "weight_column_name",
                    "optimizer",
                    "activation_fn",
                    "dropout",
                    "gradient_clip_norm",
                    "enable_centered_bias",
                    "config",
                    "feature_engineering_fn"
                ],
                "fit": [
                    "self",
                    "x",
                    "y",
                    "input_fn",
                    "steps",
                    "batch_size",
                    "monitors",
                    "max_steps"
                ],
                "evaluate": [
                    "self",
                    "x",
                    "y",
                    "input_fn",
                    "feed_fn",
                    "batch_size",
                    "steps",
                    "metrics",
                    "name"
                ],
                "predict": [
                    "self",
                    "x",
                    "input_fn",
                    "batch_size",
                    "as_iterable"
                ],
                "predict_proba": [
                    "self",
                    "x",
                    "input_fn",
                    "batch_size",
                    "as_iterable"
                ],
                "_get_predict_ops": [
                    "self",
                    "features"
                ],
                "get_variable_names": [
                    "self"
                ],
                "get_variable_value": [
                    "self",
                    "name"
                ],
                "export": [
                    "self",
                    "export_dir",
                    "input_fn",
                    "input_feature_key",
                    "use_deprecated_input_fn",
                    "signature_fn",
                    "default_batch_size",
                    "exports_to_keep"
                ],
                "model_dir": [
                    "self"
                ],
                "weights_": [
                    "self"
                ],
                "bias_": [
                    "self"
                ],
                "config": [
                    "self"
                ]
            },
            "DNNRegressor": {
                "__init__": [
                    "self",
                    "hidden_units",
                    "feature_columns",
                    "model_dir",
                    "weight_column_name",
                    "optimizer",
                    "activation_fn",
                    "dropout",
                    "gradient_clip_norm",
                    "enable_centered_bias",
                    "config",
                    "feature_engineering_fn",
                    "label_dimension"
                ],
                "weights_": [
                    "self"
                ],
                "bias_": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.learn.python.learn.estimators.random_forest": {
            "_assert_float32": [
                "tensors"
            ],
            "get_model_fn": [
                "params",
                "graph_builder_class",
                "device_assigner",
                "weights_name",
                "keys_name"
            ],
            "TensorForestLossHook": {
                "__init__": [
                    "self",
                    "early_stopping_rounds"
                ],
                "before_run": [
                    "self",
                    "run_context"
                ],
                "after_run": [
                    "self",
                    "run_context",
                    "run_values"
                ]
            },
            "TensorForestEstimator": {
                "__init__": [
                    "self",
                    "params",
                    "device_assigner",
                    "model_dir",
                    "graph_builder_class",
                    "config",
                    "weights_name",
                    "keys_name",
                    "feature_engineering_fn",
                    "early_stopping_rounds"
                ],
                "evaluate": [
                    "self",
                    "x",
                    "y",
                    "input_fn",
                    "feed_fn",
                    "batch_size",
                    "steps",
                    "metrics",
                    "name"
                ],
                "fit": [
                    "self",
                    "x",
                    "y",
                    "input_fn",
                    "steps",
                    "batch_size",
                    "monitors",
                    "max_steps"
                ],
                "predict_proba": [
                    "self",
                    "x",
                    "input_fn",
                    "batch_size",
                    "outputs",
                    "as_iterable"
                ],
                "predict": [
                    "self",
                    "x",
                    "input_fn",
                    "axis",
                    "batch_size",
                    "outputs",
                    "as_iterable"
                ],
                "predict_with_keys": [
                    "self",
                    "x",
                    "input_fn",
                    "axis",
                    "batch_size",
                    "outputs",
                    "as_iterable"
                ],
                "export": [
                    "self",
                    "export_dir",
                    "input_fn",
                    "signature_fn",
                    "default_batch_size"
                ]
            }
        },
        "tensorflow.contrib.learn.python.learn.estimators._sklearn": {
            "_pprint": [
                "d"
            ],
            "_accuracy_score": [
                "y_true",
                "y_pred"
            ],
            "_mean_squared_error": [
                "y_true",
                "y_pred"
            ],
            "_train_test_split": [],
            "_BaseEstimator": {
                "get_params": [
                    "self",
                    "deep"
                ],
                "set_params": [
                    "self"
                ],
                "__repr__": [
                    "self"
                ]
            },
            "_ClassifierMixin": {},
            "_RegressorMixin": {},
            "_TransformerMixin": {},
            "NotFittedError": {}
        },
        "tensorflow.contrib.learn.python.learn.estimators.dynamic_rnn_estimator": {
            "padding_mask": [
                "sequence_lengths",
                "padded_length"
            ],
            "mask_activations_and_labels": [
                "activations",
                "labels",
                "sequence_lengths"
            ],
            "select_last_activations": [
                "activations",
                "sequence_lengths"
            ],
            "_concatenate_context_input": [
                "sequence_input",
                "context_input"
            ],
            "build_sequence_input": [
                "features",
                "sequence_feature_columns",
                "context_feature_columns",
                "weight_collections",
                "scope"
            ],
            "construct_rnn": [
                "initial_state",
                "sequence_input",
                "cell",
                "num_label_columns",
                "dtype",
                "parallel_iterations",
                "swap_memory"
            ],
            "_mask_multivalue": [
                "sequence_length",
                "metric"
            ],
            "_get_default_metrics": [
                "problem_type",
                "prediction_type",
                "sequence_length"
            ],
            "_multi_value_predictions": [
                "activations",
                "target_column",
                "predict_probabilities"
            ],
            "_single_value_predictions": [
                "activations",
                "sequence_length",
                "target_column",
                "predict_probabilities"
            ],
            "_multi_value_loss": [
                "activations",
                "labels",
                "sequence_length",
                "target_column",
                "features"
            ],
            "_single_value_loss": [
                "activations",
                "labels",
                "sequence_length",
                "target_column",
                "features"
            ],
            "apply_dropout": [
                "cell",
                "input_keep_probability",
                "output_keep_probability",
                "random_seed"
            ],
            "_get_dynamic_rnn_model_fn": [
                "cell",
                "target_column",
                "problem_type",
                "prediction_type",
                "optimizer",
                "sequence_feature_columns",
                "context_feature_columns",
                "predict_probabilities",
                "learning_rate",
                "gradient_clipping_norm",
                "input_keep_probability",
                "output_keep_probability",
                "sequence_length_key",
                "initial_state_key",
                "dtype",
                "parallel_iterations",
                "swap_memory",
                "name"
            ],
            "_to_rnn_cell": [
                "cell_or_type",
                "num_units",
                "num_layers"
            ],
            "multi_value_rnn_regressor": [
                "num_units",
                "sequence_feature_columns",
                "context_feature_columns",
                "cell_type",
                "num_rnn_layers",
                "optimizer_type",
                "learning_rate",
                "momentum",
                "gradient_clipping_norm",
                "input_keep_probability",
                "output_keep_probability",
                "model_dir",
                "config",
                "params",
                "feature_engineering_fn"
            ],
            "multi_value_rnn_classifier": [
                "num_classes",
                "num_units",
                "sequence_feature_columns",
                "context_feature_columns",
                "cell_type",
                "num_rnn_layers",
                "optimizer_type",
                "learning_rate",
                "predict_probabilities",
                "momentum",
                "gradient_clipping_norm",
                "input_keep_probability",
                "output_keep_probability",
                "model_dir",
                "config",
                "params",
                "feature_engineering_fn"
            ],
            "single_value_rnn_regressor": [
                "num_units",
                "sequence_feature_columns",
                "context_feature_columns",
                "cell_type",
                "num_rnn_layers",
                "optimizer_type",
                "learning_rate",
                "momentum",
                "gradient_clipping_norm",
                "input_keep_probability",
                "output_keep_probability",
                "model_dir",
                "config",
                "params",
                "feature_engineering_fn"
            ],
            "single_value_rnn_classifier": [
                "num_classes",
                "num_units",
                "sequence_feature_columns",
                "context_feature_columns",
                "cell_type",
                "num_rnn_layers",
                "optimizer_type",
                "learning_rate",
                "predict_probabilities",
                "momentum",
                "gradient_clipping_norm",
                "input_keep_probability",
                "output_keep_probability",
                "model_dir",
                "config",
                "params",
                "feature_engineering_fn"
            ],
            "ProblemType": {},
            "PredictionType": {},
            "RNNKeys": {}
        },
        "tensorflow.contrib.learn.python.learn.estimators.multioutput_test": {
            "MultiOutputTest": {
                "testMultiRegression": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.learn.python.learn.estimators.dynamic_rnn_estimator_test": {
            "sequence_length_mask": [
                "values",
                "lengths"
            ],
            "IdentityRNNCell": {
                "__init__": [
                    "self",
                    "state_size",
                    "output_size"
                ],
                "state_size": [
                    "self"
                ],
                "output_size": [
                    "self"
                ],
                "__call__": [
                    "self",
                    "inputs",
                    "state"
                ]
            },
            "MockTargetColumn": {
                "__init__": [
                    "self",
                    "num_label_columns"
                ],
                "get_eval_ops": [
                    "self",
                    "features",
                    "activations",
                    "labels",
                    "metrics"
                ],
                "logits_to_predictions": [
                    "self",
                    "flattened_activations",
                    "proba"
                ],
                "loss": [
                    "self",
                    "activations",
                    "labels",
                    "features"
                ],
                "num_label_columns": [
                    "self"
                ],
                "set_num_label_columns": [
                    "self",
                    "n"
                ]
            },
            "MockOptimizer": {
                "compute_gradients": [
                    "self",
                    "loss",
                    "var_list"
                ],
                "apply_gradients": [
                    "self",
                    "processed_gradients",
                    "global_step"
                ]
            },
            "DynamicRnnEstimatorTest": {
                "setUp": [
                    "self"
                ],
                "testBuildSequenceInputInput": [
                    "self"
                ],
                "testConstructRNN": [
                    "self"
                ],
                "testPaddingMask": [
                    "self"
                ],
                "testMaskActivationsAndLabels": [
                    "self"
                ],
                "testSelectLastActivations": [
                    "self"
                ]
            },
            "DynamicRNNEstimatorLearningTest": {
                "testLearnSineFunction": [
                    "self"
                ],
                "testLearnShiftByOne": [
                    "self"
                ],
                "testLearnMean": [
                    "self"
                ],
                "testLearnMajority": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.learn.python.learn.estimators.test_data": {
            "get_quantile_based_buckets": [
                "feature_values",
                "num_buckets"
            ],
            "prepare_iris_data_for_logistic_regression": [],
            "iris_input_multiclass_fn": [],
            "iris_input_logistic_fn": []
        },
        "tensorflow.contrib.learn.python.learn.estimators.composable_model": {
            "_ComposableModel": {
                "__init__": [
                    "self",
                    "num_label_columns",
                    "optimizer",
                    "gradient_clip_norm",
                    "num_ps_replicas",
                    "scope"
                ],
                "get_scope_name": [
                    "self"
                ],
                "build_model": [
                    "self",
                    "features",
                    "feature_columns",
                    "is_training"
                ],
                "get_train_step": [
                    "self",
                    "loss"
                ],
                "_get_feature_columns": [
                    "self"
                ],
                "_get_vars": [
                    "self"
                ],
                "_get_optimizer": [
                    "self"
                ],
                "_get_default_optimizer": [
                    "self",
                    "optimizer_name"
                ]
            },
            "LinearComposableModel": {
                "__init__": [
                    "self",
                    "num_label_columns",
                    "optimizer",
                    "_joint_weights",
                    "gradient_clip_norm",
                    "num_ps_replicas",
                    "scope"
                ],
                "get_weights": [
                    "self",
                    "model_dir"
                ],
                "get_bias": [
                    "self",
                    "model_dir"
                ],
                "build_model": [
                    "self",
                    "features",
                    "feature_columns",
                    "is_training"
                ],
                "_get_default_optimizer": [
                    "self",
                    "optimizer_name"
                ]
            },
            "DNNComposableModel": {
                "__init__": [
                    "self",
                    "num_label_columns",
                    "hidden_units",
                    "optimizer",
                    "activation_fn",
                    "dropout",
                    "gradient_clip_norm",
                    "num_ps_replicas",
                    "scope"
                ],
                "get_weights": [
                    "self",
                    "model_dir"
                ],
                "get_bias": [
                    "self",
                    "model_dir"
                ],
                "_add_hidden_layer_summary": [
                    "self",
                    "value",
                    "tag"
                ],
                "build_model": [
                    "self",
                    "features",
                    "feature_columns",
                    "is_training"
                ],
                "_get_default_optimizer": [
                    "self",
                    "optimizer_name"
                ]
            }
        },
        "tensorflow.contrib.learn.python.learn.estimators.estimator": {
            "_get_input_fn": [
                "x",
                "y",
                "input_fn",
                "feed_fn",
                "batch_size",
                "shuffle",
                "epochs"
            ],
            "infer_real_valued_columns_from_input_fn": [
                "input_fn"
            ],
            "infer_real_valued_columns_from_input": [
                "x"
            ],
            "_get_arguments": [
                "func"
            ],
            "_get_replica_device_setter": [
                "config"
            ],
            "_make_metrics_ops": [
                "metrics",
                "features",
                "labels",
                "predictions"
            ],
            "_identity_feature_engineering_fn": [
                "features",
                "labels"
            ],
            "BaseEstimator": {
                "__init__": [
                    "self",
                    "model_dir",
                    "config"
                ],
                "config": [
                    "self"
                ],
                "fit": [
                    "self",
                    "x",
                    "y",
                    "input_fn",
                    "steps",
                    "batch_size",
                    "monitors",
                    "max_steps"
                ],
                "partial_fit": [
                    "self",
                    "x",
                    "y",
                    "input_fn",
                    "steps",
                    "batch_size",
                    "monitors"
                ],
                "evaluate": [
                    "self",
                    "x",
                    "y",
                    "input_fn",
                    "feed_fn",
                    "batch_size",
                    "steps",
                    "metrics",
                    "name"
                ],
                "predict": [
                    "self",
                    "x",
                    "input_fn",
                    "batch_size",
                    "outputs",
                    "as_iterable"
                ],
                "get_variable_value": [
                    "self",
                    "name"
                ],
                "get_variable_names": [
                    "self"
                ],
                "model_dir": [
                    "self"
                ],
                "export": [
                    "self",
                    "export_dir",
                    "input_fn",
                    "input_feature_key",
                    "use_deprecated_input_fn",
                    "signature_fn",
                    "prediction_key",
                    "default_batch_size",
                    "exports_to_keep"
                ],
                "_get_train_ops": [
                    "self",
                    "features",
                    "labels"
                ],
                "_get_predict_ops": [
                    "self",
                    "features"
                ],
                "_get_eval_ops": [
                    "self",
                    "features",
                    "labels",
                    "metrics"
                ],
                "_get_feature_ops_from_example": [
                    "self",
                    "examples_batch"
                ],
                "_check_inputs": [
                    "self",
                    "features",
                    "labels"
                ],
                "_train_model": [
                    "self",
                    "input_fn",
                    "steps",
                    "feed_fn",
                    "init_op",
                    "init_feed_fn",
                    "init_fn",
                    "device_fn",
                    "monitors",
                    "log_every_steps",
                    "fail_on_nan_loss",
                    "max_steps"
                ],
                "_extract_metric_update_ops": [
                    "self",
                    "eval_dict"
                ],
                "_evaluate_model": [
                    "self",
                    "input_fn",
                    "steps",
                    "feed_fn",
                    "metrics",
                    "name"
                ],
                "_get_features_from_input_fn": [
                    "self",
                    "input_fn"
                ],
                "_infer_model": [
                    "self",
                    "input_fn",
                    "feed_fn",
                    "outputs",
                    "as_iterable"
                ],
                "_infer_model_single": [
                    "self",
                    "checkpoint_path",
                    "predictions",
                    "feed_fn",
                    "return_dict"
                ],
                "_infer_model_as_iterable": [
                    "self",
                    "checkpoint_path",
                    "predictions",
                    "feed_fn",
                    "return_dict"
                ]
            },
            "Estimator": {
                "__init__": [
                    "self",
                    "model_fn",
                    "model_dir",
                    "config",
                    "params",
                    "feature_engineering_fn"
                ],
                "_call_model_fn": [
                    "self",
                    "features",
                    "labels",
                    "mode"
                ],
                "_get_train_ops": [
                    "self",
                    "features",
                    "labels"
                ],
                "_get_eval_ops": [
                    "self",
                    "features",
                    "labels",
                    "metrics"
                ],
                "_get_predict_ops": [
                    "self",
                    "features"
                ]
            },
            "SKCompat": {
                "__init__": [
                    "self",
                    "estimator"
                ],
                "fit": [
                    "self",
                    "x",
                    "y",
                    "batch_size",
                    "steps",
                    "max_steps",
                    "monitors"
                ],
                "score": [
                    "self",
                    "x",
                    "y",
                    "batch_size",
                    "steps",
                    "metrics"
                ],
                "predict": [
                    "self",
                    "x",
                    "batch_size",
                    "outputs"
                ]
            }
        },
        "tensorflow.contrib.learn.python.learn.estimators.prediction_key": {
            "PredictionKey": {}
        },
        "tensorflow.contrib.learn.python.learn.estimators.dnn_linear_combined_test": {
            "_assert_metrics_in_range": [
                "keys",
                "metrics"
            ],
            "DNNLinearCombinedClassifierTest": {
                "testEstimatorContract": [
                    "self"
                ],
                "testNoFeatureColumns": [
                    "self"
                ],
                "testLogisticRegression_MatrixData": [
                    "self"
                ],
                "testLogisticRegression_TensorData": [
                    "self"
                ],
                "testTrainWithPartitionedVariables": [
                    "self"
                ],
                "testMultiClass": [
                    "self"
                ],
                "testLoss": [
                    "self"
                ],
                "testLossWithWeights": [
                    "self"
                ],
                "testTrainWithWeights": [
                    "self"
                ],
                "testCustomOptimizerByObject": [
                    "self"
                ],
                "testCustomOptimizerByString": [
                    "self"
                ],
                "testCustomOptimizerByFunction": [
                    "self"
                ],
                "testPredict": [
                    "self"
                ],
                "testCustomMetrics": [
                    "self"
                ],
                "testVariableQuery": [
                    "self"
                ],
                "testExport": [
                    "self"
                ],
                "testCenteredBias": [
                    "self"
                ],
                "testDisableCenteredBias": [
                    "self"
                ],
                "testLinearOnly": [
                    "self"
                ],
                "testLinearOnlyOneFeature": [
                    "self"
                ],
                "testDNNOnly": [
                    "self"
                ],
                "testDNNWeightsBiasesNames": [
                    "self"
                ]
            },
            "DNNLinearCombinedRegressorTest": {
                "testEstimatorContract": [
                    "self"
                ],
                "testRegression_MatrixData": [
                    "self"
                ],
                "testRegression_TensorData": [
                    "self"
                ],
                "testLoss": [
                    "self"
                ],
                "testLossWithWeights": [
                    "self"
                ],
                "testTrainWithWeights": [
                    "self"
                ],
                "testPredict_AsIterableFalse": [
                    "self"
                ],
                "testPredict_AsIterable": [
                    "self"
                ],
                "testCustomMetrics": [
                    "self"
                ],
                "testExport": [
                    "self"
                ],
                "testTrainSaveLoad": [
                    "self"
                ],
                "testTrainWithPartitionedVariables": [
                    "self"
                ],
                "testDisableCenteredBias": [
                    "self"
                ],
                "testLinearOnly": [
                    "self"
                ],
                "testDNNOnly": [
                    "self"
                ]
            },
            "FeatureEngineeringFunctionTest": {
                "testNoneFeatureEngineeringFn": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.learn.python.learn.estimators.svm": {
            "_as_iterable": [
                "preds",
                "output"
            ],
            "_get_metric_args": [
                "metric"
            ],
            "SVM": {
                "__init__": [
                    "self",
                    "example_id_column",
                    "feature_columns",
                    "weight_column_name",
                    "model_dir",
                    "l1_regularization",
                    "l2_regularization",
                    "num_loss_partitions",
                    "kernels",
                    "config",
                    "feature_engineering_fn"
                ],
                "fit": [
                    "self",
                    "x",
                    "y",
                    "input_fn",
                    "steps",
                    "batch_size",
                    "monitors",
                    "max_steps"
                ],
                "evaluate": [
                    "self",
                    "x",
                    "y",
                    "input_fn",
                    "feed_fn",
                    "batch_size",
                    "steps",
                    "metrics",
                    "name"
                ],
                "predict": [
                    "self",
                    "x",
                    "input_fn",
                    "batch_size",
                    "as_iterable"
                ],
                "predict_proba": [
                    "self",
                    "x",
                    "input_fn",
                    "batch_size",
                    "outputs",
                    "as_iterable"
                ],
                "get_variable_names": [
                    "self"
                ],
                "export": [
                    "self",
                    "export_dir",
                    "signature_fn",
                    "input_fn",
                    "default_batch_size",
                    "exports_to_keep"
                ],
                "weights_": [
                    "self"
                ],
                "bias_": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.learn.python.learn.estimators.random_forest_test": {
            "TensorForestTrainerTests": {
                "testClassification": [
                    "self"
                ],
                "testClassificationTrainingLoss": [
                    "self"
                ],
                "testRegression": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.learn.python.learn.estimators.dnn_linear_combined_benchmark_test": {
            "DNNLinearCombinedClassifierBenchmark": {
                "_assertSingleClassMetrics": [
                    "self",
                    "metrics"
                ],
                "_assertCommonMetrics": [
                    "self",
                    "metrics"
                ],
                "benchmarkMatrixData": [
                    "self"
                ],
                "benchmarkTensorData": [
                    "self"
                ],
                "benchmarkPartitionedVariables": [
                    "self"
                ],
                "benchmarkCustomOptimizer": [
                    "self"
                ],
                "benchmarkMultiClass": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.learn.python.learn.estimators.svm_test": {
            "SVMTest": {
                "testRealValuedFeaturesPerfectlySeparable": [
                    "self"
                ],
                "testRealValuedFeaturesWithL2Regularization": [
                    "self"
                ],
                "testMultiDimensionalRealValuedFeaturesWithL2Regularization": [
                    "self"
                ],
                "testRealValuedFeaturesWithMildL1Regularization": [
                    "self"
                ],
                "testRealValuedFeaturesWithBigL1Regularization": [
                    "self"
                ],
                "testSparseFeatures": [
                    "self"
                ],
                "testBucketizedFeatures": [
                    "self"
                ],
                "testMixedFeatures": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.learn.python.learn.estimators.classifier": {
            "classification_signature_fn": [
                "examples",
                "unused_features",
                "predictions"
            ],
            "_get_classifier_metrics": [
                "unused_n_classes"
            ],
            "Classifier": {
                "__init__": [
                    "self",
                    "model_fn",
                    "n_classes",
                    "model_dir",
                    "config",
                    "params",
                    "feature_engineering_fn"
                ],
                "evaluate": [
                    "self",
                    "x",
                    "y",
                    "input_fn",
                    "feed_fn",
                    "batch_size",
                    "steps",
                    "metrics",
                    "name"
                ],
                "predict": [
                    "self",
                    "x",
                    "input_fn",
                    "batch_size",
                    "as_iterable"
                ],
                "predict_proba": [
                    "self",
                    "x",
                    "input_fn",
                    "batch_size",
                    "as_iterable"
                ],
                "_classifier_model": [
                    "self",
                    "features",
                    "labels",
                    "mode"
                ],
                "_classifier_model_with_params": [
                    "self",
                    "features",
                    "labels",
                    "mode",
                    "params"
                ],
                "_convert_to_estimator_model_result": [
                    "self",
                    "logits_fn_result"
                ]
            }
        },
        "tensorflow.contrib.learn.python.learn.estimators.estimator_test_utils": {
            "assert_estimator_contract": [
                "tester",
                "estimator_class"
            ],
            "assert_in_range": [
                "min_value",
                "max_value",
                "key",
                "metrics"
            ]
        },
        "tensorflow.contrib.learn.python.learn.estimators.head": {
            "_regression_head": [
                "label_name",
                "weight_column_name",
                "label_dimension",
                "enable_centered_bias",
                "head_name"
            ],
            "_multi_class_head": [
                "n_classes",
                "label_name",
                "weight_column_name",
                "enable_centered_bias",
                "head_name",
                "thresholds"
            ],
            "_binary_svm_head": [
                "label_name",
                "weight_column_name",
                "enable_centered_bias",
                "head_name",
                "thresholds"
            ],
            "_multi_label_head": [
                "n_classes",
                "label_name",
                "weight_column_name",
                "enable_centered_bias",
                "head_name",
                "thresholds"
            ],
            "_check_labels": [
                "labels",
                "label_name"
            ],
            "_weighted_loss": [
                "loss",
                "weight"
            ],
            "_weight_tensor": [
                "features",
                "weight_column_name"
            ],
            "_loss": [
                "loss_unweighted",
                "weight",
                "name"
            ],
            "_check_logits_input_not_supported": [
                "logits",
                "logits_input"
            ],
            "_check_mode_valid": [
                "mode"
            ],
            "_centered_bias": [
                "logits_dimension",
                "weight_collection"
            ],
            "_centered_bias_step": [
                "logits_dimension",
                "weight_collection",
                "labels",
                "train_loss_fn"
            ],
            "_head_prefixed": [
                "head_name",
                "val"
            ],
            "_mean_squared_loss": [
                "logits",
                "labels"
            ],
            "_log_loss_with_two_classes": [
                "logits",
                "labels"
            ],
            "_softmax_cross_entropy_loss": [
                "logits",
                "labels"
            ],
            "_sigmoid_cross_entropy_loss": [
                "logits",
                "labels"
            ],
            "_float_weights_or_none": [
                "weights"
            ],
            "_weighted_average_loss_metric_spec": [
                "loss_fn",
                "predictoin_key",
                "label_key",
                "weight_key"
            ],
            "_labels_streaming_mean": [
                "unused_predictions",
                "labels",
                "weights"
            ],
            "_predictions_streaming_mean": [
                "predictions",
                "unused_labels",
                "weights"
            ],
            "_streaming_auc": [
                "predictions",
                "labels",
                "weights"
            ],
            "_accuracy_at_threshold": [
                "threshold"
            ],
            "_streaming_at_threshold": [
                "streaming_metrics_fn",
                "threshold"
            ],
            "_Head": {
                "logits_dimension": [
                    "self"
                ],
                "head_ops": [
                    "self",
                    "features",
                    "labels",
                    "mode",
                    "train_op_fn",
                    "logits",
                    "logits_input"
                ]
            },
            "_RegressionHead": {
                "__init__": [
                    "self",
                    "train_loss_fn",
                    "eval_loss_fn",
                    "label_name",
                    "weight_column_name",
                    "label_dimension",
                    "enable_centered_bias",
                    "head_name"
                ],
                "logits_dimension": [
                    "self"
                ],
                "head_ops": [
                    "self",
                    "features",
                    "labels",
                    "mode",
                    "train_op_fn",
                    "logits",
                    "logits_input"
                ],
                "_training_loss": [
                    "self",
                    "features",
                    "labels",
                    "logits",
                    "name"
                ],
                "_train_op": [
                    "self",
                    "features",
                    "labels",
                    "train_op_fn",
                    "logits"
                ],
                "_eval_metric_ops": [
                    "self",
                    "features",
                    "labels",
                    "logits"
                ],
                "_predictions": [
                    "self",
                    "logits"
                ],
                "_logits_to_predictions": [
                    "self",
                    "logits"
                ],
                "_signature_fn": [
                    "self"
                ],
                "_default_metrics": [
                    "self"
                ]
            },
            "_MultiClassHead": {
                "__init__": [
                    "self",
                    "train_loss_fn",
                    "eval_loss_fn",
                    "n_classes",
                    "label_name",
                    "weight_column_name",
                    "enable_centered_bias",
                    "head_name",
                    "thresholds"
                ],
                "logits_dimension": [
                    "self"
                ],
                "head_ops": [
                    "self",
                    "features",
                    "labels",
                    "mode",
                    "train_op_fn",
                    "logits",
                    "logits_input"
                ],
                "_training_loss": [
                    "self",
                    "features",
                    "labels",
                    "logits",
                    "name"
                ],
                "_train_op": [
                    "self",
                    "features",
                    "labels",
                    "train_op_fn",
                    "logits"
                ],
                "_eval_metric_ops": [
                    "self",
                    "features",
                    "labels",
                    "logits"
                ],
                "_predictions": [
                    "self",
                    "logits"
                ],
                "_logits_to_predictions": [
                    "self",
                    "logits"
                ],
                "_signature_fn": [
                    "self"
                ],
                "_default_metrics": [
                    "self"
                ]
            },
            "_BinarySvmHead": {
                "__init__": [
                    "self",
                    "label_name",
                    "weight_column_name",
                    "enable_centered_bias",
                    "head_name",
                    "thresholds"
                ],
                "_logits_to_predictions": [
                    "self",
                    "logits"
                ],
                "_default_metrics": [
                    "self"
                ]
            },
            "_MultiLabelHead": {
                "__init__": [
                    "self",
                    "n_classes",
                    "label_name",
                    "weight_column_name",
                    "enable_centered_bias",
                    "head_name",
                    "thresholds"
                ],
                "_logits_to_predictions": [
                    "self",
                    "logits"
                ]
            }
        },
        "tensorflow.contrib.learn.python.learn.estimators.tensor_signature": {
            "tensors_compatible": [
                "tensors",
                "signatures"
            ],
            "create_signatures": [
                "tensors"
            ],
            "create_placeholders_from_signatures": [
                "signatures"
            ],
            "create_example_parser_from_signatures": [
                "signatures",
                "examples_batch",
                "single_feature_name"
            ],
            "TensorSignature": {
                "__new__": [
                    "cls",
                    "tensor"
                ],
                "is_compatible_with": [
                    "self",
                    "other"
                ],
                "get_placeholder": [
                    "self"
                ],
                "get_feature_spec": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.learn.python.learn.estimators.composable_model_test": {
            "_iris_input_fn": [],
            "_noop_training_fn": [
                "unused_loss"
            ],
            "_BaseEstimatorForTest": {
                "__init__": [
                    "self",
                    "head",
                    "feature_columns"
                ],
                "_get_train_ops": [
                    "self",
                    "features",
                    "labels"
                ],
                "_get_eval_ops": [
                    "self",
                    "features",
                    "labels",
                    "metrics"
                ],
                "_get_predict_ops": [
                    "self",
                    "features"
                ]
            },
            "LinearEstimator": {
                "__init__": [
                    "self",
                    "head",
                    "feature_columns"
                ]
            },
            "JointLinearEstimator": {
                "__init__": [
                    "self",
                    "head",
                    "feature_columns"
                ]
            },
            "DNNEstimator": {
                "__init__": [
                    "self",
                    "head",
                    "feature_columns",
                    "hidden_units"
                ]
            },
            "ComposableModelTest": {
                "testLinearModel": [
                    "self"
                ],
                "testJointLinearModel": [
                    "self"
                ],
                "testDNNModel": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.learn.python.learn.estimators.stability_test": {
            "_get_input_fn": [
                "x",
                "y",
                "batch_size"
            ],
            "_NullOptimizer": {
                "__init__": [
                    "self"
                ],
                "_apply_dense": [
                    "self",
                    "grad",
                    "var"
                ],
                "_apply_sparse": [
                    "self",
                    "grad",
                    "var"
                ],
                "_prepare": [
                    "self"
                ]
            },
            "StabilityTest": {
                "testRandomStability": [
                    "self"
                ],
                "testLinearRegression": [
                    "self"
                ],
                "testDNNRegression": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.learn.python.learn.estimators.estimators_test": {
            "FeatureEngineeringFunctionTest": {
                "testFeatureEngineeringFn": [
                    "self"
                ],
                "testNoneFeatureEngineeringFn": [
                    "self"
                ]
            },
            "CustomOptimizer": {
                "testIrisMomentum": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.learn.python.learn.estimators.linear_test": {
            "_prepare_iris_data_for_logistic_regression": [],
            "_iris_input_fn": [],
            "boston_input_fn": [],
            "LinearClassifierTest": {
                "testEstimatorContract": [
                    "self"
                ],
                "testTrain": [
                    "self"
                ],
                "testJointTrain": [
                    "self"
                ],
                "testMultiClass_MatrixData": [
                    "self"
                ],
                "testMultiClass_MatrixData_Labels1D": [
                    "self"
                ],
                "testMultiClass_NpMatrixData": [
                    "self"
                ],
                "testLogisticRegression_MatrixData": [
                    "self"
                ],
                "testLogisticRegression_MatrixData_Labels1D": [
                    "self"
                ],
                "testLogisticRegression_NpMatrixData": [
                    "self"
                ],
                "testWeightAndBiasNames": [
                    "self"
                ],
                "testCustomOptimizerByObject": [
                    "self"
                ],
                "testCustomOptimizerByString": [
                    "self"
                ],
                "testCustomOptimizerByFunction": [
                    "self"
                ],
                "testCustomMetrics": [
                    "self"
                ],
                "testLogisticFractionalLabels": [
                    "self"
                ],
                "testTrainWithPartitionedVariables": [
                    "self"
                ],
                "testTrainSaveLoad": [
                    "self"
                ],
                "testWeightColumn": [
                    "self"
                ],
                "testWeightColumnLoss": [
                    "self"
                ],
                "testExport": [
                    "self"
                ],
                "testDisableCenteredBias": [
                    "self"
                ],
                "testEnableCenteredBias": [
                    "self"
                ],
                "testTrainOptimizerWithL1Reg": [
                    "self"
                ],
                "testTrainWithMissingFeature": [
                    "self"
                ],
                "testSdcaOptimizerRealValuedFeatures": [
                    "self"
                ],
                "testSdcaOptimizerRealValuedFeatureWithHigherDimension": [
                    "self"
                ],
                "testSdcaOptimizerBucketizedFeatures": [
                    "self"
                ],
                "testSdcaOptimizerSparseFeatures": [
                    "self"
                ],
                "testSdcaOptimizerWeightedSparseFeatures": [
                    "self"
                ],
                "testSdcaOptimizerCrossedFeatures": [
                    "self"
                ],
                "testSdcaOptimizerMixedFeatures": [
                    "self"
                ],
                "testEval": [
                    "self"
                ]
            },
            "LinearRegressorTest": {
                "testEstimatorContract": [
                    "self"
                ],
                "testRegression": [
                    "self"
                ],
                "testRegression_MatrixData": [
                    "self"
                ],
                "testRegression_TensorData": [
                    "self"
                ],
                "testLoss": [
                    "self"
                ],
                "testLossWithWeights": [
                    "self"
                ],
                "testTrainWithWeights": [
                    "self"
                ],
                "testPredict_AsIterableFalse": [
                    "self"
                ],
                "testPredict_AsIterable": [
                    "self"
                ],
                "testCustomMetrics": [
                    "self"
                ],
                "testTrainSaveLoad": [
                    "self"
                ],
                "testTrainWithPartitionedVariables": [
                    "self"
                ],
                "testDisableCenteredBias": [
                    "self"
                ],
                "testRecoverWeights": [
                    "self"
                ],
                "testSdcaOptimizerRealValuedLinearFeatures": [
                    "self"
                ],
                "testSdcaOptimizerMixedFeaturesArbitraryWeights": [
                    "self"
                ],
                "testSdcaOptimizerSparseFeaturesWithL1Reg": [
                    "self"
                ],
                "testSdcaOptimizerBiasOnly": [
                    "self"
                ],
                "testSdcaOptimizerBiasAndOtherColumns": [
                    "self"
                ],
                "testSdcaOptimizerBiasAndOtherColumnsFabricatedCentered": [
                    "self"
                ]
            },
            "FeatureColumnTest": {
                "testTrain": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.learn.python.learn.estimators.logistic_regressor": {
            "_labels_streaming_mean": [
                "unused_predictions",
                "labels"
            ],
            "_predictions_streaming_mean": [
                "predictions",
                "unused_labels"
            ],
            "_make_streaming_with_threshold": [
                "streaming_metrics_fn",
                "threshold"
            ],
            "LogisticRegressor": {
                "__init__": [
                    "self",
                    "model_fn",
                    "thresholds",
                    "model_dir",
                    "config",
                    "feature_engineering_fn"
                ],
                "get_default_metrics": [
                    "cls",
                    "thresholds"
                ],
                "evaluate": [
                    "self",
                    "x",
                    "y",
                    "input_fn",
                    "feed_fn",
                    "batch_size",
                    "steps",
                    "metrics",
                    "name"
                ]
            }
        },
        "tensorflow.contrib.learn.python.learn.estimators.nonlinear_test": {
            "NonLinearTest": {
                "setUp": [
                    "self"
                ],
                "testIrisDNN": [
                    "self"
                ],
                "testBostonDNN": [
                    "self"
                ],
                "testDNNDropout0": [
                    "self"
                ],
                "testDNNDropout0_1": [
                    "self"
                ],
                "testDNNDropout0_9": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.learn.python.learn.estimators.metric_key": {
            "MetricKey": {}
        },
        "tensorflow.contrib.learn.python.learn.estimators.head_test": {
            "_noop_train_op": [
                "unused_loss"
            ],
            "RegressionModelHeadTest": {
                "testRegression": [
                    "self"
                ],
                "testRegressionWithWeights": [
                    "self"
                ],
                "testErrorInSparseTensorLabels": [
                    "self"
                ]
            },
            "MultiClassModelHeadTest": {
                "testBinaryClassification": [
                    "self"
                ],
                "testErrorInSparseTensorLabels": [
                    "self"
                ],
                "testBinaryClassificationWithWeights": [
                    "self"
                ],
                "testMultiClass": [
                    "self"
                ],
                "testMultiClassWithWeight": [
                    "self"
                ],
                "testMultiClassWithInvalidNClass": [
                    "self"
                ]
            },
            "BinarySvmModelHeadTest": {
                "testBinarySVMDefaultWeights": [
                    "self"
                ],
                "testBinarySVMWithWeights": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.learn.python.learn.estimators.run_config_test": {
            "RunConfigTest": {
                "test_defaults_with_no_tf_config": [
                    "self"
                ],
                "test_values_from_tf_config": [
                    "self"
                ],
                "test_explicitly_specified_values": [
                    "self"
                ],
                "test_single_node_in_cluster_spec_produces_empty_master": [
                    "self"
                ],
                "test_no_task_type_produces_empty_master": [
                    "self"
                ],
                "test_invalid_job_name_raises": [
                    "self"
                ],
                "test_illegal_task_index_raises": [
                    "self"
                ],
                "test_is_chief_from_cloud_tf_config": [
                    "self"
                ],
                "test_is_chief_from_noncloud_tf_config": [
                    "self"
                ],
                "test_default_is_chief_from_tf_config_without_job_name": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.learn.python.learn.estimators.dnn_test": {
            "boston_input_fn": [],
            "DNNClassifierTest": {
                "_assertInRange": [
                    "self",
                    "expected_min",
                    "expected_max",
                    "actual"
                ],
                "testEstimatorContract": [
                    "self"
                ],
                "testLogisticRegression_MatrixData": [
                    "self"
                ],
                "testLogisticRegression_MatrixData_Labels1D": [
                    "self"
                ],
                "testLogisticRegression_NpMatrixData": [
                    "self"
                ],
                "testLogisticRegression_TensorData": [
                    "self"
                ],
                "testLogisticRegression_FloatLabel": [
                    "self"
                ],
                "testMultiClass_MatrixData": [
                    "self"
                ],
                "testMultiClass_MatrixData_Labels1D": [
                    "self"
                ],
                "testMultiClass_NpMatrixData": [
                    "self"
                ],
                "testLoss": [
                    "self"
                ],
                "testLossWithWeights": [
                    "self"
                ],
                "testTrainWithWeights": [
                    "self"
                ],
                "testPredict_AsIterableFalse": [
                    "self"
                ],
                "testPredict_AsIterable": [
                    "self"
                ],
                "testCustomMetrics": [
                    "self"
                ],
                "testTrainSaveLoad": [
                    "self"
                ],
                "testTrainWithPartitionedVariables": [
                    "self"
                ],
                "testExport": [
                    "self"
                ],
                "testEnableCenteredBias": [
                    "self"
                ],
                "testDisableCenteredBias": [
                    "self"
                ]
            },
            "DNNRegressorTest": {
                "testEstimatorContract": [
                    "self"
                ],
                "testRegression_MatrixData": [
                    "self"
                ],
                "testRegression_MatrixData_Labels1D": [
                    "self"
                ],
                "testRegression_NpMatrixData": [
                    "self"
                ],
                "testRegression_TensorData": [
                    "self"
                ],
                "testLoss": [
                    "self"
                ],
                "testLossWithWeights": [
                    "self"
                ],
                "testTrainWithWeights": [
                    "self"
                ],
                "testPredict_AsIterableFalse": [
                    "self"
                ],
                "testPredict_AsIterable": [
                    "self"
                ],
                "testCustomMetrics": [
                    "self"
                ],
                "testTrainSaveLoad": [
                    "self"
                ],
                "testTrainWithPartitionedVariables": [
                    "self"
                ],
                "testEnableCenteredBias": [
                    "self"
                ],
                "testDisableCenteredBias": [
                    "self"
                ]
            },
            "FeatureColumnTest": {
                "testTrain": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.learn.python.learn.estimators.classifier_test": {
            "iris_input_fn": [
                "num_epochs"
            ],
            "logistic_model_fn": [
                "features",
                "labels",
                "unused_mode"
            ],
            "logistic_model_params_fn": [
                "features",
                "labels",
                "unused_mode",
                "params"
            ],
            "ClassifierTest": {
                "testIrisAll": [
                    "self"
                ],
                "testIrisAllWithParams": [
                    "self"
                ],
                "testIrisInputFn": [
                    "self"
                ],
                "_runIrisAll": [
                    "self",
                    "est"
                ],
                "_get_default_signature": [
                    "self",
                    "export_meta_filename"
                ],
                "_testExportMonitorRegressionSignature": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.learn.python.learn.estimators.model_fn": {
            "ModeKeys": {},
            "ModelFnOps": {
                "__new__": [
                    "cls",
                    "mode",
                    "predictions",
                    "loss",
                    "train_op",
                    "eval_metric_ops",
                    "signature_fn"
                ]
            }
        },
        "tensorflow.contrib.learn.python.learn.estimators": {},
        "tensorflow.contrib.learn.python.learn.estimators.logistic_regressor_test": {
            "_iris_data_input_fn": [],
            "_logistic_regression_model_fn": [
                "features",
                "labels"
            ],
            "LogisticRegressorTest": {
                "test_fit_and_evaluate_metrics": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.learn.python.learn.estimators.regression_test": {
            "RegressionTest": {
                "testLinearRegression": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.learn.python.learn.estimators.tensor_signature_test": {
            "TensorSignatureTest": {
                "testTensorPlaceholderNone": [
                    "self"
                ],
                "testTensorSignatureNone": [
                    "self"
                ],
                "testTensorSignatureCompatible": [
                    "self"
                ],
                "testSparseTensorCompatible": [
                    "self"
                ],
                "testTensorSignaturePlaceholders": [
                    "self"
                ],
                "testSparseTensorSignaturePlaceholders": [
                    "self"
                ],
                "testTensorSignatureExampleParserSingle": [
                    "self"
                ],
                "testTensorSignatureExampleParserDict": [
                    "self"
                ],
                "testUnknownShape": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.learn.python.learn.estimators.estimator_test": {
            "boston_input_fn": [
                "num_epochs"
            ],
            "iris_input_fn": [],
            "iris_input_fn_labels_dict": [],
            "boston_eval_fn": [],
            "linear_model_params_fn": [
                "features",
                "labels",
                "mode",
                "params"
            ],
            "linear_model_fn": [
                "features",
                "labels",
                "mode"
            ],
            "linear_model_fn_with_model_fn_ops": [
                "features",
                "labels",
                "mode"
            ],
            "logistic_model_no_mode_fn": [
                "features",
                "labels"
            ],
            "CheckCallsMonitor": {
                "__init__": [
                    "self",
                    "expect_calls"
                ],
                "begin": [
                    "self",
                    "max_steps"
                ],
                "step_begin": [
                    "self",
                    "step"
                ],
                "step_end": [
                    "self",
                    "step",
                    "outputs"
                ],
                "end": [
                    "self"
                ]
            },
            "EstimatorTest": {
                "testInvalidModelFn_no_train_op": [
                    "self"
                ],
                "testInvalidModelFn_no_loss": [
                    "self"
                ],
                "testInvalidModelFn_no_prediction": [
                    "self"
                ],
                "testCustomConfig": [
                    "self"
                ],
                "testCheckInputs": [
                    "self"
                ],
                "testBadInput": [
                    "self"
                ],
                "testUntrained": [
                    "self"
                ],
                "testContinueTraining": [
                    "self"
                ],
                "testEstimatorParams": [
                    "self"
                ],
                "testBostonAll": [
                    "self"
                ],
                "testIrisAll": [
                    "self"
                ],
                "testIrisInputFn": [
                    "self"
                ],
                "testIrisInputFnLabelsDict": [
                    "self"
                ],
                "testIrisIterator": [
                    "self"
                ],
                "testIrisIteratorArray": [
                    "self"
                ],
                "testIrisIteratorPlainInt": [
                    "self"
                ],
                "testIrisTruncatedIterator": [
                    "self"
                ],
                "testTrainInputFn": [
                    "self"
                ],
                "testTrainStepsIsIncremental": [
                    "self"
                ],
                "testTrainMaxStepsIsNotIncremental": [
                    "self"
                ],
                "testPredict": [
                    "self"
                ],
                "testPredictInputFn": [
                    "self"
                ],
                "testWithModelFnOps": [
                    "self"
                ],
                "testWrongInput": [
                    "self"
                ],
                "testMonitors": [
                    "self"
                ],
                "testSummaryWriting": [
                    "self"
                ],
                "testLossInGraphCollection": [
                    "self"
                ],
                "test_export_returns_exported_dirname": [
                    "self"
                ]
            },
            "InferRealValuedColumnsTest": {
                "testInvalidArgs": [
                    "self"
                ],
                "_assert_single_feature_column": [
                    "self",
                    "expected_shape",
                    "expected_dtype",
                    "feature_columns"
                ],
                "testInt32Input": [
                    "self"
                ],
                "testInt32InputFn": [
                    "self"
                ],
                "testInt64Input": [
                    "self"
                ],
                "testInt64InputFn": [
                    "self"
                ],
                "testFloat32Input": [
                    "self"
                ],
                "testFloat32InputFn": [
                    "self"
                ],
                "testFloat64Input": [
                    "self"
                ],
                "testFloat64InputFn": [
                    "self"
                ],
                "testBoolInput": [
                    "self"
                ],
                "testBoolInputFn": [
                    "self"
                ],
                "testStringInput": [
                    "self"
                ],
                "testStringInputFn": [
                    "self"
                ],
                "testBostonInputFn": [
                    "self"
                ],
                "testIrisInputFn": [
                    "self"
                ]
            },
            "ReplicaDeviceSetterTest": {
                "testVariablesAreOnPs": [
                    "self"
                ],
                "testVariablesAreLocal": [
                    "self"
                ],
                "testMutableHashTableIsOnPs": [
                    "self"
                ],
                "testMutableHashTableIsLocal": [
                    "self"
                ],
                "testTaskIsSetOnWorkerWhenJobNameIsSet": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.learn.python.learn.estimators.dnn_linear_combined": {
            "_as_iterable": [
                "preds",
                "output"
            ],
            "_get_feature_dict": [
                "features"
            ],
            "_get_optimizer": [
                "optimizer"
            ],
            "_linear_learning_rate": [
                "num_linear_feature_columns"
            ],
            "_add_hidden_layer_summary": [
                "value",
                "tag"
            ],
            "_dnn_linear_combined_model_fn": [
                "features",
                "labels",
                "mode",
                "params"
            ],
            "_DNNLinearCombinedBaseEstimator": {
                "__init__": [
                    "self",
                    "head",
                    "model_dir",
                    "linear_feature_columns",
                    "linear_optimizer",
                    "_joint_linear_weights",
                    "dnn_feature_columns",
                    "dnn_optimizer",
                    "dnn_hidden_units",
                    "dnn_activation_fn",
                    "dnn_dropout",
                    "gradient_clip_norm",
                    "config",
                    "feature_engineering_fn",
                    "default_prediction_key",
                    "enable_centered_bias"
                ],
                "linear_weights_": [
                    "self"
                ],
                "linear_bias_": [
                    "self"
                ],
                "dnn_weights_": [
                    "self"
                ],
                "dnn_bias_": [
                    "self"
                ],
                "_create_signature_fn": [
                    "self"
                ],
                "_get_feature_dict": [
                    "self",
                    "features"
                ],
                "_get_train_ops": [
                    "self",
                    "features",
                    "labels"
                ],
                "_get_eval_ops": [
                    "self",
                    "features",
                    "labels",
                    "metrics"
                ],
                "_get_predict_ops": [
                    "self",
                    "features"
                ],
                "_get_feature_ops_from_example": [
                    "self",
                    "examples_batch"
                ],
                "_get_linear_feature_columns": [
                    "self"
                ],
                "_get_dnn_feature_columns": [
                    "self"
                ],
                "_dnn_logits": [
                    "self",
                    "features",
                    "is_training"
                ],
                "_linear_logits": [
                    "self",
                    "features",
                    "is_training"
                ],
                "_logits": [
                    "self",
                    "features",
                    "is_training"
                ]
            },
            "DNNLinearCombinedClassifier": {
                "__init__": [
                    "self",
                    "model_dir",
                    "n_classes",
                    "weight_column_name",
                    "linear_feature_columns",
                    "linear_optimizer",
                    "_joint_linear_weights",
                    "dnn_feature_columns",
                    "dnn_optimizer",
                    "dnn_hidden_units",
                    "dnn_activation_fn",
                    "dnn_dropout",
                    "gradient_clip_norm",
                    "enable_centered_bias",
                    "config",
                    "feature_engineering_fn"
                ],
                "fit": [
                    "self",
                    "x",
                    "y",
                    "input_fn",
                    "steps",
                    "batch_size",
                    "monitors",
                    "max_steps"
                ],
                "evaluate": [
                    "self",
                    "x",
                    "y",
                    "input_fn",
                    "feed_fn",
                    "batch_size",
                    "steps",
                    "metrics",
                    "name"
                ],
                "predict": [
                    "self",
                    "x",
                    "input_fn",
                    "batch_size",
                    "as_iterable"
                ],
                "predict_proba": [
                    "self",
                    "x",
                    "input_fn",
                    "batch_size",
                    "as_iterable"
                ],
                "_get_predict_ops": [
                    "self",
                    "features"
                ],
                "get_variable_names": [
                    "self"
                ],
                "get_variable_value": [
                    "self",
                    "name"
                ],
                "export": [
                    "self",
                    "export_dir",
                    "input_fn",
                    "input_feature_key",
                    "use_deprecated_input_fn",
                    "signature_fn",
                    "default_batch_size",
                    "exports_to_keep"
                ],
                "model_dir": [
                    "self"
                ],
                "dnn_weights_": [
                    "self"
                ],
                "linear_weights_": [
                    "self"
                ],
                "dnn_bias_": [
                    "self"
                ],
                "linear_bias_": [
                    "self"
                ],
                "config": [
                    "self"
                ]
            },
            "DNNLinearCombinedRegressor": {
                "__init__": [
                    "self",
                    "model_dir",
                    "weight_column_name",
                    "linear_feature_columns",
                    "linear_optimizer",
                    "_joint_linear_weights",
                    "dnn_feature_columns",
                    "dnn_optimizer",
                    "dnn_hidden_units",
                    "dnn_activation_fn",
                    "dnn_dropout",
                    "gradient_clip_norm",
                    "enable_centered_bias",
                    "label_dimension",
                    "config",
                    "feature_engineering_fn"
                ],
                "predict": [
                    "self",
                    "x",
                    "input_fn",
                    "batch_size",
                    "as_iterable"
                ],
                "export": [
                    "self",
                    "export_dir",
                    "input_fn",
                    "input_feature_key",
                    "use_deprecated_input_fn",
                    "signature_fn",
                    "default_batch_size",
                    "exports_to_keep"
                ]
            }
        },
        "tensorflow.contrib.learn.python.learn.estimators.linear": {
            "_get_optimizer": [
                "spec"
            ],
            "_as_iterable": [
                "preds",
                "output"
            ],
            "_add_bias_column": [
                "feature_columns",
                "columns_to_tensors",
                "bias_variable",
                "labels",
                "columns_to_variables"
            ],
            "_linear_model_fn": [
                "features",
                "labels",
                "mode",
                "params"
            ],
            "sdca_model_fn": [
                "features",
                "labels",
                "mode",
                "params"
            ],
            "_get_default_optimizer": [
                "feature_columns"
            ],
            "_SdcaUpdateWeightsHook": {
                "__init__": [
                    "self"
                ],
                "set_parameters": [
                    "self",
                    "sdca_model",
                    "train_op"
                ],
                "begin": [
                    "self"
                ],
                "before_run": [
                    "self",
                    "run_context"
                ]
            },
            "LinearClassifier": {
                "__init__": [
                    "self",
                    "feature_columns",
                    "model_dir",
                    "n_classes",
                    "weight_column_name",
                    "optimizer",
                    "gradient_clip_norm",
                    "enable_centered_bias",
                    "_joint_weight",
                    "config",
                    "feature_engineering_fn"
                ],
                "get_estimator": [
                    "self"
                ],
                "fit": [
                    "self",
                    "x",
                    "y",
                    "input_fn",
                    "steps",
                    "batch_size",
                    "monitors",
                    "max_steps"
                ],
                "evaluate": [
                    "self",
                    "x",
                    "y",
                    "input_fn",
                    "feed_fn",
                    "batch_size",
                    "steps",
                    "metrics",
                    "name"
                ],
                "predict": [
                    "self",
                    "x",
                    "input_fn",
                    "batch_size",
                    "as_iterable"
                ],
                "predict_proba": [
                    "self",
                    "x",
                    "input_fn",
                    "batch_size",
                    "outputs",
                    "as_iterable"
                ],
                "get_variable_names": [
                    "self"
                ],
                "get_variable_value": [
                    "self",
                    "name"
                ],
                "export": [
                    "self",
                    "export_dir",
                    "input_fn",
                    "input_feature_key",
                    "use_deprecated_input_fn",
                    "signature_fn",
                    "default_batch_size",
                    "exports_to_keep"
                ],
                "weights_": [
                    "self"
                ],
                "bias_": [
                    "self"
                ],
                "config": [
                    "self"
                ],
                "model_dir": [
                    "self"
                ]
            },
            "LinearRegressor": {
                "__init__": [
                    "self",
                    "feature_columns",
                    "model_dir",
                    "weight_column_name",
                    "optimizer",
                    "gradient_clip_norm",
                    "enable_centered_bias",
                    "label_dimension",
                    "_joint_weights",
                    "config",
                    "feature_engineering_fn"
                ],
                "fit": [
                    "self",
                    "x",
                    "y",
                    "input_fn",
                    "steps",
                    "batch_size",
                    "monitors",
                    "max_steps"
                ],
                "evaluate": [
                    "self",
                    "x",
                    "y",
                    "input_fn",
                    "feed_fn",
                    "batch_size",
                    "steps",
                    "metrics",
                    "name"
                ],
                "predict": [
                    "self",
                    "x",
                    "input_fn",
                    "batch_size",
                    "as_iterable"
                ],
                "get_variable_names": [
                    "self"
                ],
                "get_variable_value": [
                    "self",
                    "name"
                ],
                "export": [
                    "self",
                    "export_dir",
                    "input_fn",
                    "input_feature_key",
                    "use_deprecated_input_fn",
                    "signature_fn",
                    "default_batch_size",
                    "exports_to_keep"
                ],
                "weights_": [
                    "self"
                ],
                "bias_": [
                    "self"
                ],
                "config": [
                    "self"
                ],
                "model_dir": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.learn.python.learn.learn_io.pandas_io_test": {
            "PandasIoTest": {
                "testPandasInputFn": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.learn.python.learn.learn_io.pandas_io": {
            "extract_pandas_data": [
                "data"
            ],
            "extract_pandas_matrix": [
                "data"
            ],
            "extract_pandas_labels": [
                "labels"
            ],
            "pandas_input_fn": [
                "x",
                "y",
                "batch_size",
                "num_epochs",
                "shuffle",
                "queue_capacity",
                "num_threads",
                "target_column",
                "index_column"
            ]
        },
        "tensorflow.contrib.learn.python.learn.learn_io.graph_io_test": {
            "GraphIOTest": {
                "_mock_glob": [
                    "self",
                    "pattern"
                ],
                "setUp": [
                    "self"
                ],
                "tearDown": [
                    "self"
                ],
                "test_dequeue_batch_value_errors": [
                    "self"
                ],
                "test_batch_record_features": [
                    "self"
                ],
                "test_one_epoch": [
                    "self"
                ],
                "test_batch_randomized": [
                    "self"
                ],
                "_create_temp_file": [
                    "self",
                    "lines"
                ],
                "_create_sorted_temp_files": [
                    "self",
                    "lines_list"
                ],
                "test_read_text_lines": [
                    "self"
                ],
                "test_read_keyed_batch_features_mutual_exclusive_args": [
                    "self"
                ],
                "test_queue_parsed_features_mutual_exclusive_args": [
                    "self"
                ],
                "test_read_text_lines_large": [
                    "self"
                ],
                "test_read_text_lines_multifile": [
                    "self"
                ],
                "test_read_text_lines_multifile_with_shared_queue": [
                    "self"
                ],
                "_get_qr": [
                    "self",
                    "name"
                ],
                "_run_queue": [
                    "self",
                    "name",
                    "session"
                ],
                "test_multiple_workers_with_shared_queue": [
                    "self"
                ],
                "test_batch_text_lines": [
                    "self"
                ],
                "test_keyed_read_text_lines": [
                    "self"
                ],
                "test_keyed_parse_json": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.learn.python.learn.learn_io.data_feeder_test": {
            "DataFeederTest": {
                "_assert_raises": [
                    "self",
                    "input_data"
                ],
                "test_input_uint32": [
                    "self"
                ],
                "test_input_uint64": [
                    "self"
                ],
                "_assert_dtype": [
                    "self",
                    "expected_np_dtype",
                    "expected_tf_dtype",
                    "input_data"
                ],
                "test_input_int8": [
                    "self"
                ],
                "test_input_int16": [
                    "self"
                ],
                "test_input_int32": [
                    "self"
                ],
                "test_input_int64": [
                    "self"
                ],
                "test_input_uint8": [
                    "self"
                ],
                "test_input_uint16": [
                    "self"
                ],
                "test_input_float16": [
                    "self"
                ],
                "test_input_float32": [
                    "self"
                ],
                "test_input_float64": [
                    "self"
                ],
                "test_input_bool": [
                    "self"
                ],
                "test_input_string": [
                    "self"
                ],
                "test_unsupervised": [
                    "self"
                ],
                "test_data_feeder_regression": [
                    "self"
                ],
                "test_epoch": [
                    "self"
                ],
                "test_data_feeder_multioutput_regression": [
                    "self"
                ],
                "test_data_feeder_multioutput_classification": [
                    "self"
                ],
                "test_streaming_data_feeder": [
                    "self"
                ],
                "test_dask_data_feeder": [
                    "self"
                ],
                "test_hdf5_data_feeder": [
                    "self"
                ]
            },
            "SetupPredictDataFeederTest": {
                "test_iterable_data": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.learn.python.learn.learn_io.dask_io": {
            "_add_to_index": [
                "df",
                "start"
            ],
            "_get_divisions": [
                "df"
            ],
            "_construct_dask_df_with_divisions": [
                "df"
            ],
            "extract_dask_data": [
                "data"
            ],
            "extract_dask_labels": [
                "labels"
            ]
        },
        "tensorflow.contrib.learn.python.learn.learn_io.io_test": {
            "IOTest": {
                "test_pandas_dataframe": [
                    "self"
                ],
                "test_pandas_series": [
                    "self"
                ],
                "test_string_data_formats": [
                    "self"
                ],
                "test_dask_io": [
                    "self"
                ],
                "test_dask_iris_classification": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.learn.python.learn.learn_io": {},
        "tensorflow.contrib.learn.python.learn.learn_io.data_feeder": {
            "_get_in_out_shape": [
                "x_shape",
                "y_shape",
                "n_classes",
                "batch_size"
            ],
            "_data_type_filter": [
                "x",
                "y"
            ],
            "_is_iterable": [
                "x"
            ],
            "setup_train_data_feeder": [
                "x",
                "y",
                "n_classes",
                "batch_size",
                "shuffle",
                "epochs"
            ],
            "_batch_data": [
                "x",
                "batch_size"
            ],
            "setup_predict_data_feeder": [
                "x",
                "batch_size"
            ],
            "setup_processor_data_feeder": [
                "x"
            ],
            "check_array": [
                "array",
                "dtype"
            ],
            "_access": [
                "data",
                "iloc"
            ],
            "_check_dtype": [
                "dtype"
            ],
            "DataFeeder": {
                "__init__": [
                    "self",
                    "x",
                    "y",
                    "n_classes",
                    "batch_size",
                    "shuffle",
                    "random_state",
                    "epochs"
                ],
                "x": [
                    "self"
                ],
                "y": [
                    "self"
                ],
                "shuffle": [
                    "self"
                ],
                "input_dtype": [
                    "self"
                ],
                "output_dtype": [
                    "self"
                ],
                "batch_size": [
                    "self"
                ],
                "make_epoch_variable": [
                    "self"
                ],
                "input_builder": [
                    "self"
                ],
                "set_placeholders": [
                    "self",
                    "input_placeholder",
                    "output_placeholder"
                ],
                "get_feed_params": [
                    "self"
                ],
                "get_feed_dict_fn": [
                    "self"
                ]
            },
            "StreamingDataFeeder": {
                "__init__": [
                    "self",
                    "x",
                    "y",
                    "n_classes",
                    "batch_size"
                ],
                "get_feed_params": [
                    "self"
                ],
                "get_feed_dict_fn": [
                    "self"
                ]
            },
            "DaskDataFeeder": {
                "__init__": [
                    "self",
                    "x",
                    "y",
                    "n_classes",
                    "batch_size",
                    "shuffle",
                    "random_state",
                    "epochs"
                ],
                "get_feed_params": [
                    "self"
                ],
                "get_feed_dict_fn": [
                    "self",
                    "input_placeholder",
                    "output_placeholder"
                ]
            }
        },
        "tensorflow.contrib.learn.python.learn.learn_io.graph_io": {
            "_check_enqueue_params": [
                "num_queue_runners",
                "num_enqueue_threads"
            ],
            "read_batch_examples": [
                "file_pattern",
                "batch_size",
                "reader",
                "randomize_input",
                "num_epochs",
                "queue_capacity",
                "num_threads",
                "read_batch_size",
                "parse_fn",
                "name"
            ],
            "read_keyed_batch_examples": [
                "file_pattern",
                "batch_size",
                "reader",
                "randomize_input",
                "num_epochs",
                "queue_capacity",
                "num_threads",
                "read_batch_size",
                "parse_fn",
                "name"
            ],
            "_read_keyed_batch_examples_shared_queue": [
                "file_pattern",
                "batch_size",
                "reader",
                "randomize_input",
                "num_epochs",
                "queue_capacity",
                "num_threads",
                "read_batch_size",
                "parse_fn",
                "name"
            ],
            "_get_shared_file_name_queue": [
                "file_names",
                "shuffle",
                "num_epochs",
                "name"
            ],
            "_get_file_names": [
                "file_pattern",
                "randomize_input"
            ],
            "_get_examples": [
                "file_name_queue",
                "reader",
                "num_threads",
                "read_batch_size",
                "parse_fn"
            ],
            "_read_keyed_batch_examples_helper": [
                "file_pattern",
                "batch_size",
                "reader",
                "randomize_input",
                "num_epochs",
                "queue_capacity",
                "num_threads",
                "read_batch_size",
                "parse_fn",
                "setup_shared_queue",
                "name"
            ],
            "read_keyed_batch_features": [
                "file_pattern",
                "batch_size",
                "features",
                "reader",
                "randomize_input",
                "num_epochs",
                "queue_capacity",
                "reader_num_threads",
                "feature_queue_capacity",
                "num_queue_runners",
                "num_enqueue_threads",
                "parse_fn",
                "name"
            ],
            "_read_keyed_batch_features_shared_queue": [
                "file_pattern",
                "batch_size",
                "features",
                "reader",
                "randomize_input",
                "num_epochs",
                "queue_capacity",
                "reader_num_threads",
                "feature_queue_capacity",
                "num_queue_runners",
                "parse_fn",
                "name"
            ],
            "queue_parsed_features": [
                "parsed_features",
                "keys",
                "feature_queue_capacity",
                "num_queue_runners",
                "num_enqueue_threads",
                "name"
            ],
            "read_batch_features": [
                "file_pattern",
                "batch_size",
                "features",
                "reader",
                "randomize_input",
                "num_epochs",
                "queue_capacity",
                "feature_queue_capacity",
                "reader_num_threads",
                "parse_fn",
                "name"
            ],
            "read_batch_record_features": [
                "file_pattern",
                "batch_size",
                "features",
                "randomize_input",
                "num_epochs",
                "queue_capacity",
                "reader_num_threads",
                "name"
            ]
        },
        "tensorflow.contrib.learn.python.learn.tests": {},
        "tensorflow.contrib.learn.python.learn.tests.dataframe.estimator_utils_test": {
            "setup_test_df": [],
            "setup_test_df_3layer": [],
            "EstimatorUtilsTest": {
                "test_to_feature_columns_and_input_fn": [
                    "self"
                ],
                "test_to_feature_columns_and_input_fn_no_labels": [
                    "self"
                ],
                "test_to_estimator_not_disjoint": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.learn.python.learn.tests.dataframe.example_parser_test": {
            "ExampleParserTestCase": {
                "setUp": [
                    "self"
                ],
                "testParseWithTupleDefinition": [
                    "self"
                ],
                "testParseWithDictDefinition": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.learn.python.learn.tests.dataframe.mocks": {
            "MockTensor": {
                "__init__": [
                    "self",
                    "name",
                    "dtype"
                ],
                "name": [
                    "self"
                ],
                "dtype": [
                    "self"
                ],
                "get_shape": [
                    "self"
                ],
                "__repr__": [
                    "self"
                ],
                "__eq__": [
                    "self",
                    "other"
                ],
                "__ne__": [
                    "self",
                    "other"
                ]
            },
            "MockSparseTensor": {
                "__init__": [
                    "self",
                    "name",
                    "dtype"
                ],
                "name": [
                    "self"
                ],
                "dtype": [
                    "self"
                ],
                "get_shape": [
                    "self"
                ],
                "__repr__": [
                    "self"
                ],
                "__eq__": [
                    "self",
                    "other"
                ],
                "__ne__": [
                    "self",
                    "other"
                ]
            },
            "MockSeries": {
                "__init__": [
                    "self",
                    "cachekey",
                    "mock_tensor"
                ],
                "build": [
                    "self",
                    "cache"
                ],
                "__repr__": [
                    "self"
                ]
            },
            "MockTransform": {
                "__init__": [
                    "self",
                    "param_one",
                    "param_two"
                ],
                "name": [
                    "self"
                ],
                "param_one": [
                    "self"
                ],
                "param_two": [
                    "self"
                ],
                "input_valency": [
                    "self"
                ],
                "__eq__": [
                    "self",
                    "other"
                ],
                "__ne__": [
                    "self",
                    "other"
                ]
            },
            "MockZeroOutputTransform": {
                "__init__": [
                    "self",
                    "param_one",
                    "param_two"
                ],
                "_output_names": [
                    "self"
                ],
                "_apply_transform": [
                    "self",
                    "input_tensors"
                ]
            },
            "MockOneOutputTransform": {
                "__init__": [
                    "self",
                    "param_one",
                    "param_two"
                ],
                "_output_names": [
                    "self"
                ],
                "_apply_transform": [
                    "self",
                    "input_tensors"
                ]
            },
            "MockTwoOutputTransform": {
                "param_three": [
                    "self"
                ],
                "__init__": [
                    "self",
                    "param_one",
                    "param_two",
                    "param_three"
                ],
                "_output_names": [
                    "self"
                ],
                "_apply_transform": [
                    "self",
                    "input_tensors"
                ]
            },
            "Mock2x2Transform": {
                "__init__": [
                    "self",
                    "param_one",
                    "param_two",
                    "param_three"
                ],
                "_output_names": [
                    "self"
                ],
                "_apply_transform": [
                    "self",
                    "input_tensors"
                ],
                "input_valency": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.learn.python.learn.tests.dataframe.feeding_functions_test": {
            "vals_to_list": [
                "a"
            ],
            "_FeedingFunctionsTestCase": {
                "testArrayFeedFnBatchOne": [
                    "self"
                ],
                "testArrayFeedFnBatchFive": [
                    "self"
                ],
                "testArrayFeedFnBatchOneHundred": [
                    "self"
                ],
                "testPandasFeedFnBatchOne": [
                    "self"
                ],
                "testPandasFeedFnBatchFive": [
                    "self"
                ],
                "testPandasFeedFnBatchOneHundred": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.learn.python.learn.tests.dataframe.csv_parser_test": {
            "CSVParserTestCase": {
                "testParse": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.learn.python.learn.tests.dataframe.binary_transform_test": {
            "BinaryTransformTestCase": {
                "add_test_case": [
                    "cls",
                    "fn_name",
                    "op"
                ]
            }
        },
        "tensorflow.contrib.learn.python.learn.tests.dataframe.boolean_mask_test": {
            "BooleanMaskTestCase": {
                "testDense": [
                    "self"
                ],
                "testSparse": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.learn.python.learn.tests.dataframe.series_test": {
            "TransformedSeriesTest": {
                "test_repr": [
                    "self"
                ],
                "test_build_no_output": [
                    "self"
                ],
                "test_build_single_output": [
                    "self"
                ],
                "test_build_multiple_output": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.learn.python.learn.tests.dataframe.reader_source_test": {
            "ReaderSourceTestCase": {
                "setUp": [
                    "self"
                ],
                "testNoShuffle": [
                    "self"
                ],
                "testYesShuffle": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.learn.python.learn.tests.dataframe.in_memory_source_test": {
            "get_rows": [
                "array",
                "row_indices"
            ],
            "NumpySourceTestCase": {
                "testNumpySource": [
                    "self"
                ]
            },
            "PandasSourceTestCase": {
                "testPandasFeeding": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.learn.python.learn.tests.dataframe.feeding_queue_runner_test": {
            "get_rows": [
                "array",
                "row_indices"
            ],
            "FeedingQueueRunnerTestCase": {
                "testArrayFeeding": [
                    "self"
                ],
                "testArrayFeedingMultiThread": [
                    "self"
                ],
                "testPandasFeeding": [
                    "self"
                ],
                "testPandasFeedingMultiThread": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.learn.python.learn.tests.dataframe": {},
        "tensorflow.contrib.learn.python.learn.tests.dataframe.tensorflow_dataframe_test": {
            "_assert_df_equals_dict": [
                "expected_df",
                "actual_dict"
            ],
            "_make_test_csv": [],
            "_make_test_csv_sparse": [],
            "_make_test_tfrecord": [],
            "TensorFlowDataFrameTestCase": {
                "_assert_pandas_equals_tensorflow": [
                    "self",
                    "pandas_df",
                    "tensorflow_df",
                    "num_batches",
                    "batch_size"
                ],
                "testInitFromPandas": [
                    "self"
                ],
                "testBatch": [
                    "self"
                ],
                "testFromNumpy": [
                    "self"
                ],
                "testFromCSV": [
                    "self"
                ],
                "testFromCSVLimitEpoch": [
                    "self"
                ],
                "testFromCSVWithFeatureSpec": [
                    "self"
                ],
                "testFromExamples": [
                    "self"
                ],
                "testSplitString": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.learn.python.learn.tests.dataframe.transform_test": {
            "TransformTest": {
                "test_make_list_of_column": [
                    "self"
                ],
                "test_cache": [
                    "self"
                ],
                "test_parameters": [
                    "self"
                ],
                "test_parameters_inherited_combined": [
                    "self"
                ],
                "test_return_type": [
                    "self"
                ],
                "test_call": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.learn.python.learn.tests.dataframe.dataframe_test": {
            "setup_test_df": [],
            "DataFrameTest": {
                "test_create": [
                    "self"
                ],
                "test_select_columns": [
                    "self"
                ],
                "test_exclude_columns": [
                    "self"
                ],
                "test_get_item": [
                    "self"
                ],
                "test_del_item_column": [
                    "self"
                ],
                "test_set_item_column": [
                    "self"
                ],
                "test_set_item_column_multi": [
                    "self"
                ],
                "test_set_item_pandas": [
                    "self"
                ],
                "test_set_item_numpy": [
                    "self"
                ],
                "test_build": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.learn.python.learn.tests.dataframe.sparsify_densify_test": {
            "_test_sparsify_densify": [
                "self",
                "x",
                "default_value"
            ],
            "SparsifyDensifyTestCase": {
                "testSparsifyDensifyIntNan": [
                    "self"
                ],
                "testSparsifyDensifyIntZero": [
                    "self"
                ],
                "testSparsifyDensifyFloatNan": [
                    "self"
                ],
                "testSparsifyDensifyFloatZero": [
                    "self"
                ],
                "testSparsifyDensifyStringEmpty": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.learn.python.learn.tests.dataframe.arithmetic_transform_test": {
            "SumTestCase": {
                "testSum": [
                    "self"
                ]
            },
            "DifferenceTestCase": {
                "testDifference": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.learn.python.learn.tests.dataframe.batch_test": {
            "BatchTestCase": {
                "testBatch": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.learn.python.learn.tests.dataframe.unary_transform_test": {
            "UnaryTestCase": {
                "add_test_case": [
                    "cls",
                    "name",
                    "op",
                    "np_dtype"
                ]
            }
        },
        "tensorflow.contrib.learn.python.learn.utils.export_test": {
            "_training_input_fn": [],
            "ExportTest": {
                "_get_default_signature": [
                    "self",
                    "export_meta_filename"
                ],
                "_assert_export": [
                    "self",
                    "export_monitor",
                    "export_dir",
                    "expected_signature"
                ],
                "testExportMonitor_EstimatorProvidesSignature": [
                    "self"
                ],
                "testExportMonitor": [
                    "self"
                ],
                "testExportMonitorInputFeatureKeyMissing": [
                    "self"
                ],
                "testExportMonitorInputFeatureKeyNoneNoFeatures": [
                    "self"
                ],
                "testExportMonitorInputFeatureKeyNone": [
                    "self"
                ],
                "testExportMonitorInputFeatureKeyNoFeatures": [
                    "self"
                ],
                "testExportMonitorInputFeature": [
                    "self"
                ],
                "testExportMonitorRegressionSignature": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.learn.python.learn.utils.export": {
            "_get_first_op_from_collection": [
                "collection_name"
            ],
            "_get_saver": [],
            "_export_graph": [
                "graph",
                "saver",
                "checkpoint_path",
                "export_dir",
                "default_graph_signature",
                "named_graph_signatures",
                "exports_to_keep"
            ],
            "generic_signature_fn": [
                "examples",
                "unused_features",
                "predictions"
            ],
            "classification_signature_fn": [
                "examples",
                "unused_features",
                "predictions"
            ],
            "classification_signature_fn_with_prob": [
                "examples",
                "unused_features",
                "predictions"
            ],
            "regression_signature_fn": [
                "examples",
                "unused_features",
                "predictions"
            ],
            "logistic_regression_signature_fn": [
                "examples",
                "unused_features",
                "predictions"
            ],
            "_default_input_fn": [
                "estimator",
                "examples"
            ],
            "export_estimator": [
                "estimator",
                "export_dir",
                "signature_fn",
                "input_fn",
                "default_batch_size",
                "exports_to_keep"
            ],
            "_export_estimator": [
                "estimator",
                "export_dir",
                "signature_fn",
                "input_fn",
                "default_batch_size",
                "exports_to_keep",
                "input_feature_key",
                "use_deprecated_input_fn",
                "prediction_key"
            ]
        },
        "tensorflow.contrib.learn.python.learn.utils": {},
        "tensorflow.contrib.learn.python.learn.utils.inspect_checkpoint": {
            "print_tensors_in_checkpoint_file": [
                "file_name",
                "tensor_name"
            ],
            "main": [
                "unused_argv"
            ]
        },
        "tensorflow.contrib.ffmpeg.decode_audio_op_test": {
            "DecodeAudioOpTest": {
                "_loadFileAndTest": [
                    "self",
                    "filename",
                    "file_format",
                    "duration_sec",
                    "samples_per_second",
                    "channel_count"
                ],
                "testMonoMp3": [
                    "self"
                ],
                "testMonoMp4Mp3Codec": [
                    "self"
                ],
                "testMonoMp4AacCodec": [
                    "self"
                ],
                "testStereoMp3": [
                    "self"
                ],
                "testStereoMp4Mp3Codec": [
                    "self"
                ],
                "testStereoMp4AacCodec": [
                    "self"
                ],
                "testMonoWav": [
                    "self"
                ],
                "testOgg": [
                    "self"
                ],
                "testInvalidFile": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.ffmpeg.encode_audio_op_test": {
            "EncodeAudioOpTest": {
                "_compareWavFiles": [
                    "self",
                    "original",
                    "encoded"
                ],
                "testRoundTrip": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.ffmpeg.ffmpeg_ops": {
            "decode_audio": [
                "contents",
                "file_format",
                "samples_per_second",
                "channel_count"
            ],
            "encode_audio": [
                "audio",
                "file_format",
                "samples_per_second"
            ],
            "_load_library": [
                "name",
                "op_list"
            ]
        },
        "tensorflow.contrib.ffmpeg": {},
        "tensorflow.contrib.ffmpeg.default": {},
        "tensorflow.contrib.ffmpeg.testdata": {},
        "tensorflow.contrib.opt": {},
        "tensorflow.contrib.opt.python": {},
        "tensorflow.contrib.opt.python.training.external_optimizer_test": {
            "MockOptimizerInterface": {
                "_minimize": [
                    "self",
                    "initial_val",
                    "loss_grad_func",
                    "step_callback",
                    "optimizer_kwargs"
                ]
            },
            "TestCase": {
                "assertAllClose": [
                    "self",
                    "array1",
                    "array2"
                ]
            },
            "ExternalOptimizerInterfaceTest": {
                "test_optimize": [
                    "self"
                ],
                "test_callbacks": [
                    "self"
                ]
            },
            "ScipyOptimizerInterfaceTest": {
                "test_unconstrained": [
                    "self"
                ],
                "test_nonlinear_programming": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.opt.python.training.variable_clipping_optimizer_test": {
            "VariableClippingOptimizerTest": {
                "_setupCluster": [
                    "self"
                ],
                "_maybeWithDevice": [
                    "self",
                    "device"
                ],
                "_setupDense": [
                    "self",
                    "is_distributed",
                    "dtype"
                ],
                "_assertDenseCorrect": [
                    "self",
                    "var0",
                    "var1",
                    "update_op"
                ],
                "_setupSparse": [
                    "self",
                    "is_distributed",
                    "dtype"
                ],
                "_assertSparseCorrect": [
                    "self",
                    "var0",
                    "var1",
                    "update_op"
                ],
                "testDenseLocal": [
                    "self"
                ],
                "testDenseDistributed": [
                    "self"
                ],
                "testSparseLocal": [
                    "self"
                ],
                "testSparseDistributed": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.opt.python.training.external_optimizer": {
            "_accumulate": [
                "list_"
            ],
            "_get_shape_tuple": [
                "tensor"
            ],
            "_prod": [
                "array"
            ],
            "_compute_gradients": [
                "tensor",
                "var_list"
            ],
            "ExternalOptimizerInterface": {
                "__init__": [
                    "self",
                    "loss",
                    "var_list",
                    "equalities",
                    "inequalities"
                ],
                "minimize": [
                    "self",
                    "session",
                    "feed_dict",
                    "fetches",
                    "step_callback",
                    "loss_callback"
                ],
                "_minimize": [
                    "self",
                    "initial_val",
                    "loss_grad_func",
                    "equality_funcs",
                    "equality_grad_funcs",
                    "inequality_funcs",
                    "inequality_grad_funcs",
                    "step_callback",
                    "optimizer_kwargs"
                ],
                "_pack": [
                    "cls",
                    "tensors"
                ],
                "_make_eval_func": [
                    "self",
                    "tensors",
                    "session",
                    "feed_dict",
                    "fetches",
                    "callback"
                ],
                "_make_eval_funcs": [
                    "self",
                    "tensors",
                    "session",
                    "feed_dict",
                    "fetches",
                    "callback"
                ]
            },
            "ScipyOptimizerInterface": {
                "_minimize": [
                    "self",
                    "initial_val",
                    "loss_grad_func",
                    "equality_funcs",
                    "equality_grad_funcs",
                    "inequality_funcs",
                    "inequality_grad_funcs",
                    "step_callback",
                    "optimizer_kwargs"
                ]
            }
        },
        "tensorflow.contrib.opt.python.training": {},
        "tensorflow.contrib.opt.python.training.variable_clipping_optimizer": {
            "VariableClippingOptimizer": {
                "__init__": [
                    "self",
                    "opt",
                    "vars_to_clip_dims",
                    "max_norm",
                    "use_locking",
                    "colocate_clip_ops_with_vars",
                    "name"
                ],
                "compute_gradients": [
                    "self"
                ],
                "get_slot": [
                    "self"
                ],
                "get_slot_names": [
                    "self"
                ],
                "apply_gradients": [
                    "self",
                    "grads_and_vars",
                    "global_step",
                    "name"
                ],
                "_clip_dense": [
                    "self",
                    "var"
                ],
                "_clip_sparse": [
                    "self",
                    "grad",
                    "var"
                ],
                "_maybe_colocate_with": [
                    "self",
                    "var"
                ]
            }
        },
        "tensorflow.contrib.opt.python.training.moving_average_optimizer_test": {
            "MovingAverageOptimizerTest": {
                "testRun": [
                    "self"
                ],
                "testFailWhenSaverCreatedBeforeInitialized": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.opt.python.training.moving_average_optimizer": {
            "MovingAverageOptimizer": {
                "__init__": [
                    "self",
                    "opt",
                    "average_decay",
                    "num_updates",
                    "sequential_update"
                ],
                "apply_gradients": [
                    "self",
                    "grads_and_vars",
                    "global_step",
                    "name"
                ],
                "swapping_saver": [
                    "self",
                    "var_list",
                    "name"
                ]
            }
        },
        "tensorflow.contrib.quantization": {},
        "tensorflow.contrib.quantization.python.nn_ops": {},
        "tensorflow.contrib.quantization.python": {},
        "tensorflow.contrib.quantization.python.array_ops": {},
        "tensorflow.contrib.quantization.python.math_ops": {},
        "tensorflow.contrib.linear_optimizer": {},
        "tensorflow.contrib.linear_optimizer.kernels": {},
        "tensorflow.contrib.linear_optimizer.kernels.g3doc": {},
        "tensorflow.contrib.linear_optimizer.python.sdca_optimizer": {
            "SDCAOptimizer": {
                "__init__": [
                    "self",
                    "example_id_column",
                    "num_loss_partitions",
                    "num_table_shards",
                    "symmetric_l1_regularization",
                    "symmetric_l2_regularization"
                ],
                "get_name": [
                    "self"
                ],
                "get_train_step": [
                    "self",
                    "columns_to_variables",
                    "weight_column_name",
                    "loss_type",
                    "features",
                    "targets",
                    "global_step"
                ]
            }
        },
        "tensorflow.contrib.linear_optimizer.python": {},
        "tensorflow.contrib.linear_optimizer.python.ops.sdca_ops": {
            "_ShardedMutableDenseHashTable": {
                "__init__": [
                    "self",
                    "key_dtype",
                    "value_dtype",
                    "default_value",
                    "empty_key",
                    "num_shards",
                    "name"
                ],
                "_num_shards": [
                    "self"
                ],
                "table_shards": [
                    "self"
                ],
                "size": [
                    "self",
                    "name"
                ],
                "_shard_indices": [
                    "self",
                    "keys"
                ],
                "_check_keys": [
                    "self",
                    "keys"
                ],
                "lookup": [
                    "self",
                    "keys",
                    "name"
                ],
                "insert": [
                    "self",
                    "keys",
                    "values",
                    "name"
                ],
                "export_sharded": [
                    "self",
                    "name"
                ]
            },
            "SparseFeatureColumn": {
                "__init__": [
                    "self",
                    "example_indices",
                    "feature_indices",
                    "feature_values"
                ],
                "example_indices": [
                    "self"
                ],
                "feature_indices": [
                    "self"
                ],
                "feature_values": [
                    "self"
                ]
            },
            "SdcaModel": {
                "__init__": [
                    "self",
                    "examples",
                    "variables",
                    "options"
                ],
                "_symmetric_l1_regularization": [
                    "self"
                ],
                "_symmetric_l2_regularization": [
                    "self"
                ],
                "_num_loss_partitions": [
                    "self"
                ],
                "_num_table_shards": [
                    "self"
                ],
                "_create_slots": [
                    "self"
                ],
                "_assertSpecified": [
                    "self",
                    "items",
                    "check_in"
                ],
                "_assertList": [
                    "self",
                    "items",
                    "check_in"
                ],
                "_l1_loss": [
                    "self"
                ],
                "_l2_loss": [
                    "self",
                    "l2"
                ],
                "_convert_n_to_tensor": [
                    "self",
                    "input_list",
                    "as_ref"
                ],
                "_linear_predictions": [
                    "self",
                    "examples"
                ],
                "predictions": [
                    "self",
                    "examples"
                ],
                "minimize": [
                    "self",
                    "global_step",
                    "name"
                ],
                "update_weights": [
                    "self",
                    "train_op"
                ],
                "approximate_duality_gap": [
                    "self"
                ],
                "unregularized_loss": [
                    "self",
                    "examples"
                ],
                "regularized_loss": [
                    "self",
                    "examples"
                ]
            }
        },
        "tensorflow.contrib.linear_optimizer.python.ops": {},
        "tensorflow.contrib.linear_optimizer.python.kernel_tests.sdca_ops_test": {
            "make_example_proto": [
                "feature_dict",
                "target",
                "value"
            ],
            "make_example_dict": [
                "example_protos",
                "example_weights"
            ],
            "make_variable_dict": [
                "max_age",
                "max_gender"
            ],
            "make_dense_examples_and_variables_dicts": [
                "dense_features_values",
                "weights",
                "labels"
            ],
            "get_binary_predictions_for_logistic": [
                "predictions",
                "cutoff"
            ],
            "get_binary_predictions_for_hinge": [
                "predictions"
            ],
            "SdcaModelTest": {
                "_single_threaded_test_session": [
                    "self"
                ]
            },
            "SdcaWithLogisticLossTest": {
                "testSimple": [
                    "self"
                ],
                "testDistributedSimple": [
                    "self"
                ],
                "testSimpleNoL2": [
                    "self"
                ],
                "testSomeUnweightedExamples": [
                    "self"
                ],
                "testFractionalExampleLabel": [
                    "self"
                ],
                "testImbalanced": [
                    "self"
                ],
                "testImbalancedWithExampleWeights": [
                    "self"
                ],
                "testInstancesOfOneClassOnly": [
                    "self"
                ],
                "testOutOfRangeSparseFeatures": [
                    "self"
                ],
                "testOutOfRangeDenseFeatures": [
                    "self"
                ]
            },
            "SdcaWithLinearLossTest": {
                "testSimple": [
                    "self"
                ],
                "testL2Regularization": [
                    "self"
                ],
                "testL1Regularization": [
                    "self"
                ],
                "testFeatureValues": [
                    "self"
                ],
                "testDenseFeaturesWithDefaultWeights": [
                    "self"
                ],
                "testDenseFeaturesWithArbitraryWeights": [
                    "self"
                ]
            },
            "SdcaWithHingeLossTest": {
                "testSimple": [
                    "self"
                ],
                "testDenseFeaturesPerfectlySeparable": [
                    "self"
                ],
                "testDenseFeaturesSeparableWithinMargins": [
                    "self"
                ],
                "testDenseFeaturesWeightedExamples": [
                    "self"
                ]
            },
            "SdcaWithSmoothHingeLossTest": {
                "testSimple": [
                    "self"
                ]
            },
            "SparseFeatureColumnTest": {
                "testBasic": [
                    "self"
                ]
            },
            "SdcaFprintTest": {
                "testFprint": [
                    "self"
                ]
            },
            "ShardedMutableDenseHashTableTest": {
                "testShardedMutableHashTable": [
                    "self"
                ],
                "testShardedMutableHashTableVectors": [
                    "self"
                ],
                "testExportSharded": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.linear_optimizer.python.kernel_tests": {},
        "tensorflow.contrib.integrate": {},
        "tensorflow.contrib.integrate.python": {},
        "tensorflow.contrib.integrate.python.ops.odes_test": {
            "OdeIntTest": {
                "setUp": [
                    "self"
                ],
                "test_odeint_exp": [
                    "self"
                ],
                "test_odeint_complex": [
                    "self"
                ],
                "test_odeint_riccati": [
                    "self"
                ],
                "test_odeint_2d_linear": [
                    "self"
                ],
                "test_odeint_higher_rank": [
                    "self"
                ],
                "test_odeint_all_dtypes": [
                    "self"
                ],
                "test_odeint_required_dtypes": [
                    "self"
                ],
                "test_odeint_runtime_errors": [
                    "self"
                ],
                "test_odeint_different_times": [
                    "self"
                ],
                "test_odeint_5th_order_accuracy": [
                    "self"
                ]
            },
            "StepSizeTest": {
                "test_error_ratio_one": [
                    "self"
                ],
                "test_ifactor": [
                    "self"
                ],
                "test_dfactor": [
                    "self"
                ]
            },
            "InterpolationTest": {
                "test_5th_order_polynomial": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.integrate.python.ops": {},
        "tensorflow.contrib.integrate.python.ops.odes": {
            "_possibly_nonzero": [
                "x"
            ],
            "_scaled_dot_product": [
                "scale",
                "xs",
                "ys",
                "name"
            ],
            "_dot_product": [
                "xs",
                "ys",
                "name"
            ],
            "_runge_kutta_step": [
                "func",
                "y0",
                "f0",
                "t0",
                "dt",
                "tableau",
                "name"
            ],
            "_interp_fit": [
                "y0",
                "y1",
                "y_mid",
                "f0",
                "f1",
                "dt"
            ],
            "_interp_fit_rk": [
                "y0",
                "y1",
                "k",
                "dt",
                "tableau"
            ],
            "_interp_evaluate": [
                "coefficients",
                "t0",
                "t1",
                "t"
            ],
            "_optimal_step_size": [
                "last_step",
                "error_ratio",
                "safety",
                "ifactor",
                "dfactor",
                "order",
                "name"
            ],
            "_abs_square": [
                "x"
            ],
            "_ta_append": [
                "tensor_array",
                "value"
            ],
            "_dopri5": [
                "func",
                "y0",
                "t",
                "rtol",
                "atol",
                "full_output",
                "first_step",
                "safety",
                "ifactor",
                "dfactor",
                "max_num_steps",
                "name"
            ],
            "odeint": [
                "func",
                "y0",
                "t",
                "rtol",
                "atol",
                "method",
                "options",
                "full_output",
                "name"
            ],
            "_RungeKuttaState": {},
            "_History": {}
        },
        "tensorflow.contrib.cudnn_rnn": {},
        "tensorflow.contrib.cudnn_rnn.kernels": {},
        "tensorflow.contrib.cudnn_rnn.python": {},
        "tensorflow.contrib.cudnn_rnn.python.ops": {},
        "tensorflow.contrib.cudnn_rnn.python.ops.cudnn_rnn_ops": {
            "_cudnn_rnn_backward": [
                "op"
            ],
            "_CudnnRNN": {
                "__init__": [
                    "self",
                    "rnn_mode",
                    "num_layers",
                    "num_units",
                    "input_size",
                    "input_mode",
                    "direction",
                    "dropout",
                    "seed",
                    "seed2"
                ],
                "params_size": [
                    "self"
                ],
                "__call__": [
                    "self",
                    "input_data",
                    "input_h",
                    "input_c",
                    "params",
                    "is_training"
                ]
            },
            "CudnnLSTM": {
                "__init__": [
                    "self",
                    "num_layers",
                    "num_units",
                    "input_size",
                    "input_mode",
                    "direction",
                    "dropout",
                    "seed",
                    "seed2"
                ],
                "__call__": [
                    "self",
                    "input_data",
                    "input_h",
                    "input_c",
                    "params",
                    "is_training"
                ]
            },
            "_CudnnRNNNoInputC": {
                "__init__": [
                    "self",
                    "num_layers",
                    "num_units",
                    "input_size",
                    "input_mode",
                    "direction",
                    "dropout",
                    "seed",
                    "seed2"
                ],
                "__call__": [
                    "self",
                    "input_data",
                    "input_h",
                    "params",
                    "is_training"
                ]
            },
            "CudnnGRU": {},
            "CudnnRNNTanh": {},
            "CudnnRNNRelu": {}
        },
        "tensorflow.contrib.cudnn_rnn.python.kernel_tests.cudnn_rnn_ops_test": {
            "CudnnRNNTest": {
                "_CreateModel": [
                    "self",
                    "rnn_mode",
                    "num_layers",
                    "num_units",
                    "input_size"
                ],
                "_MinLSTMParamSize": [
                    "self",
                    "num_layers",
                    "num_units",
                    "input_size",
                    "input_mode",
                    "direction"
                ],
                "_testOneLSTMParamsSize": [
                    "self",
                    "num_layers",
                    "num_units",
                    "input_size"
                ],
                "testLSTMParamsSize": [
                    "self"
                ],
                "_testOneSimpleInference": [
                    "self",
                    "rnn_mode",
                    "num_layers",
                    "num_units",
                    "input_size",
                    "batch_size",
                    "seq_length",
                    "dir_count",
                    "expected",
                    "tolerance"
                ],
                "testSimpleInference": [
                    "self"
                ],
                "_testOneSimpleTraining": [
                    "self",
                    "rnn_mode",
                    "num_layers",
                    "num_units",
                    "input_size",
                    "batch_size",
                    "seq_length",
                    "dir_count",
                    "tolerance"
                ],
                "testSimpleTraining": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.cudnn_rnn.python.kernel_tests.cudnn_rnn_ops_benchmark": {
            "CudnnRNNBenchmark": {
                "_GetTestConfig": [
                    "self"
                ],
                "_GetConfigDesc": [
                    "self",
                    "config"
                ],
                "_BenchmarkOp": [
                    "self",
                    "op",
                    "desc"
                ],
                "benchmarkCudnnLSTMTraining": [
                    "self"
                ],
                "benchmarkTfRNNLSTMTraining": [
                    "self"
                ],
                "benchmarkTfRNNLSTMBlockCellTraining": [
                    "self"
                ]
            }
        },
        "tensorflow.contrib.cudnn_rnn.python.kernel_tests": {},
        "tensorflow.contrib.cudnn_rnn.ops.gen_cudnn_rnn_ops": {
            "cudnn_rnn": [
                "input",
                "input_h",
                "input_c",
                "params",
                "dropout",
                "rnn_mode",
                "input_mode",
                "direction",
                "seed",
                "seed2",
                "is_training",
                "name"
            ],
            "cudnn_rnn_backprop": [
                "input",
                "input_h",
                "input_c",
                "params",
                "output",
                "output_h",
                "output_c",
                "output_backprop",
                "output_h_backprop",
                "output_c_backprop",
                "reserve_space",
                "rnn_mode",
                "input_mode",
                "direction",
                "name"
            ],
            "cudnn_rnn_params_from_canonical": [
                "num_layers",
                "num_units",
                "input_size",
                "params",
                "canonical_weights",
                "canonical_biases",
                "N",
                "rnn_mode",
                "input_mode",
                "direction",
                "name"
            ],
            "cudnn_rnn_params_size": [
                "num_layers",
                "num_units",
                "input_size",
                "T",
                "S",
                "rnn_mode",
                "input_mode",
                "direction",
                "name"
            ],
            "cudnn_rnn_params_to_canonical": [
                "num_layers",
                "num_units",
                "input_size",
                "params",
                "N",
                "rnn_mode",
                "input_mode",
                "direction",
                "name"
            ],
            "_InitOpDefLibrary": []
        },
        "tensorflow.contrib.cudnn_rnn.ops": {},
        "tensorflow.python.pywrap_tensorflow": {
            "_swig_setattr_nondynamic": [
                "self",
                "class_type",
                "name",
                "value",
                "static"
            ],
            "_swig_setattr": [
                "self",
                "class_type",
                "name",
                "value"
            ],
            "_swig_getattr": [
                "self",
                "class_type",
                "name"
            ],
            "_swig_repr": [
                "self"
            ],
            "IsGoogleCudaEnabled": [],
            "CudaSupportsHalfMatMulAndConv": [],
            "CheckpointReader_GetTensor": [
                "reader",
                "name",
                "out_status"
            ],
            "NewCheckpointReader": [
                "filepattern"
            ],
            "NewStatSummarizer": [
                "graph_def_str"
            ],
            "DeleteStatSummarizer": [
                "ss"
            ],
            "InitializePyTrampoline": [
                "trampoline"
            ],
            "PyRecordReader_New": [
                "filename",
                "start_offset",
                "compression_type_string",
                "out_status"
            ],
            "PyRecordWriter_New": [
                "filename",
                "compression_type_string",
                "out_status"
            ],
            "TF_NewStatus": [],
            "TF_DeleteStatus": [
                "arg1"
            ],
            "TF_GetCode": [
                "s"
            ],
            "TF_Message": [
                "s"
            ],
            "TF_NewBufferFromString": [
                "proto"
            ],
            "TF_NewBuffer": [],
            "TF_DeleteBuffer": [
                "arg1"
            ],
            "TF_GetBuffer": [
                "buffer"
            ],
            "_TF_NewSessionOptions": [],
            "_TF_SetTarget": [
                "options",
                "target"
            ],
            "_TF_SetConfig": [
                "options",
                "proto",
                "status"
            ],
            "TF_DeleteSessionOptions": [
                "arg1"
            ],
            "TF_NewDeprecatedSession": [
                "arg1",
                "status"
            ],
            "TF_CloseDeprecatedSession": [
                "arg1",
                "status"
            ],
            "TF_DeleteDeprecatedSession": [
                "arg1",
                "status"
            ],
            "TF_ExtendGraph": [
                "arg1",
                "proto",
                "arg3"
            ],
            "TF_LoadLibrary": [
                "library_filename",
                "status"
            ],
            "TF_GetOpList": [
                "lib_handle"
            ],
            "TF_NewSessionOptions": [
                "target",
                "config"
            ],
            "TF_Reset": [
                "target",
                "containers",
                "config"
            ],
            "TF_Run": [
                "session",
                "run_options",
                "feed_dict",
                "output_names",
                "target_nodes",
                "out_status",
                "run_outputs"
            ],
            "TF_PRunSetup": [
                "session",
                "input_names",
                "output_names",
                "target_nodes",
                "out_status"
            ],
            "TF_PRun": [
                "session",
                "handle",
                "feed_dict",
                "output_names",
                "out_status"
            ],
            "TF_Reset_wrapper": [
                "opt",
                "containers",
                "out_status"
            ],
            "EqualGraphDefWrapper": [
                "actual",
                "expected"
            ],
            "ListDevices": [
                "out_status"
            ],
            "list_devices": [],
            "PickUnusedPortOrDie": [],
            "DoQuantizeTrainingOnGraphDefHelper": [
                "input_graph",
                "num_bits",
                "out_status"
            ],
            "do_quantize_training_on_graphdef": [
                "input_graph",
                "num_bits"
            ],
            "FileExists": [
                "filename",
                "out_status"
            ],
            "DeleteFile": [
                "filename",
                "out_status"
            ],
            "ReadFileToString": [
                "filename",
                "out_status"
            ],
            "WriteStringToFile": [
                "filename",
                "file_content",
                "out_status"
            ],
            "GetChildren": [
                "dir",
                "out_status"
            ],
            "GetMatchingFiles": [
                "filename",
                "out_status"
            ],
            "CreateDir": [
                "dirname",
                "out_status"
            ],
            "RecursivelyCreateDir": [
                "dirname",
                "out_status"
            ],
            "CopyFile": [
                "oldpath",
                "newpath",
                "overwrite",
                "out_status"
            ],
            "RenameFile": [
                "oldname",
                "newname",
                "overwrite",
                "out_status"
            ],
            "DeleteRecursively": [
                "dirname",
                "out_status"
            ],
            "IsDirectory": [
                "dirname",
                "out_status"
            ],
            "Stat": [
                "filename",
                "stats",
                "out_status"
            ],
            "CreateBufferedInputStream": [
                "filename",
                "buffer_size",
                "out_status"
            ],
            "CreateWritableFile": [
                "filename",
                "mode",
                "out_status"
            ],
            "AppendToFile": [
                "file_content",
                "file",
                "out_status"
            ],
            "ReadFromStream": [
                "stream",
                "bytes",
                "out_status"
            ],
            "Status_OK": [],
            "__lshift__": [
                "os",
                "x"
            ],
            "Set_TF_Status_from_Status": [
                "tf_status",
                "status"
            ],
            "IsAbsolutePath": [
                "path"
            ],
            "Dirname": [
                "path"
            ],
            "Basename": [
                "path"
            ],
            "Extension": [
                "path"
            ],
            "CleanPath": [
                "path"
            ],
            "ParseURI": [
                "uri",
                "scheme",
                "host",
                "path"
            ],
            "CreateURI": [
                "scheme",
                "host",
                "path"
            ],
            "PyServer_New": [
                "server_def",
                "out_status"
            ],
            "PyServer_Start": [
                "in_server",
                "out_status"
            ],
            "PyServer_Stop": [
                "in_server",
                "out_status"
            ],
            "PyServer_Join": [
                "in_server",
                "out_status"
            ],
            "GetPythonWrappers": [
                "op_wrapper_buf"
            ],
            "RunCppShapeInference": [
                "serialized_node_def",
                "input_serialized_shapes",
                "input_constant_tensor_values",
                "input_constant_tensor_as_shape_values",
                "out_status"
            ],
            "TryFindKernelClass": [
                "serialized_node_def"
            ],
            "CheckpointReader": {
                "__init__": [
                    "self",
                    "filepattern",
                    "out_status"
                ],
                "_HasTensor": [
                    "self",
                    "name"
                ],
                "debug_string": [
                    "self"
                ],
                "get_variable_to_shape_map": [
                    "self"
                ],
                "has_tensor": [
                    "self",
                    "tensor_str"
                ],
                "get_tensor": [
                    "self",
                    "tensor_str"
                ]
            },
            "StatSummarizer": {
                "ProcessStepStats": [
                    "self",
                    "step_stats"
                ],
                "GetOutputString": [
                    "self"
                ],
                "PrintStepStats": [
                    "self"
                ],
                "ProcessStepStatsStr": [
                    "self",
                    "step_stats_str"
                ],
                "__init__": [
                    "self"
                ]
            },
            "PyRecordReader": {
                "__init__": [
                    "self"
                ],
                "GetNext": [
                    "self"
                ],
                "record": [
                    "self"
                ],
                "offset": [
                    "self"
                ],
                "Close": [
                    "self"
                ]
            },
            "PyRecordWriter": {
                "__init__": [
                    "self"
                ],
                "WriteRecord": [
                    "self",
                    "record"
                ],
                "Close": [
                    "self"
                ]
            },
            "EventsWriter": {
                "__init__": [
                    "self",
                    "file_prefix"
                ],
                "FileName": [
                    "self"
                ],
                "_WriteSerializedEvent": [
                    "self",
                    "event_str"
                ],
                "Flush": [
                    "self"
                ],
                "Close": [
                    "self"
                ],
                "WriteEvent": [
                    "self",
                    "event"
                ]
            },
            "TF_Buffer": {
                "__init__": [
                    "self"
                ]
            },
            "Status": {
                "__init__": [
                    "self"
                ],
                "ok": [
                    "self"
                ],
                "code": [
                    "self"
                ],
                "error_message": [
                    "self"
                ],
                "__eq__": [
                    "self",
                    "x"
                ],
                "__ne__": [
                    "self",
                    "x"
                ],
                "Update": [
                    "self",
                    "new_status"
                ],
                "ToString": [
                    "self"
                ]
            },
            "WritableFile": {
                "__init__": [
                    "self"
                ],
                "Close": [
                    "self"
                ],
                "Flush": [
                    "self"
                ]
            },
            "BufferedInputStream": {
                "__init__": [
                    "self"
                ],
                "Tell": [
                    "self"
                ],
                "Seek": [
                    "self",
                    "position"
                ],
                "ReadLineAsString": [
                    "self"
                ]
            },
            "FileStatistics": {
                "__init__": [
                    "self"
                ]
            },
            "ServerInterface": {
                "__init__": [
                    "self"
                ],
                "target": [
                    "self"
                ]
            }
        },
        "tensorflow.python": {},
        "tensorflow.python.debug.debug_data_test": {
            "ParseNodeOrTensorNameTest": {
                "testParseNodeName": [
                    "self"
                ],
                "testParseTensorName": [
                    "self"
                ]
            },
            "NodeNameChecksTest": {
                "testIsCopyNode": [
                    "self"
                ],
                "testIsDebugNode": [
                    "self"
                ]
            },
            "ParseDebugNodeNameTest": {
                "testParseDebugNodeName_valid": [
                    "self"
                ],
                "testParseDebugNodeName_invalidPrefix": [
                    "self"
                ],
                "testParseDebugNodeName_missingDebugOpIndex": [
                    "self"
                ],
                "testParseDebugNodeName_invalidWatchedTensorName": [
                    "self"
                ]
            },
            "HasNanOrInfTest": {
                "setUp": [
                    "self"
                ],
                "testNaN": [
                    "self"
                ],
                "testInf": [
                    "self"
                ],
                "testNanAndInf": [
                    "self"
                ],
                "testNoNanOrInf": [
                    "self"
                ],
                "testEmpty": [
                    "self"
                ],
                "testNone": [
                    "self"
                ]
            },
            "DebugTensorDatumTest": {
                "testDebugDatum": [
                    "self"
                ]
            },
            "DebugDumpDirTest": {
                "setUp": [
                    "self"
                ],
                "tearDown": [
                    "self"
                ],
                "testDebugDumpDir_nonexistentDumpRoot": [
                    "self"
                ],
                "testDebugDumpDir_invalidFileNamingPattern": [
                    "self"
                ],
                "testDebugDumpDir_emptyDumpDir": [
                    "self"
                ]
            }
        },
        "tensorflow.python.debug.session_debug_file_test": {
            "SessionDebugTest": {
                "_debug_urls": [
                    "self",
                    "run_number"
                ],
                "_debug_dump_dir": [
                    "self",
                    "run_number"
                ]
            }
        },
        "tensorflow.python.debug.session_debug_testlib": {
            "SessionDebugTestBase": {
                "setUpClass": [
                    "cls"
                ],
                "tearDownClass": [
                    "cls"
                ],
                "setUp": [
                    "self"
                ],
                "tearDown": [
                    "self"
                ],
                "_debug_urls": [
                    "self",
                    "run_number"
                ],
                "_debug_dump_dir": [
                    "self",
                    "run_number"
                ],
                "testDumpToFileOverlappingParentDir": [
                    "self"
                ],
                "testDifferentWatchesOnDifferentRuns": [
                    "self"
                ],
                "testDumpStringTensorsToFileSystem": [
                    "self"
                ],
                "testDumpUninitializedVariable": [
                    "self"
                ],
                "testDumpToFileWhileLoop": [
                    "self"
                ],
                "testFindNodesWithBadTensorValues": [
                    "self"
                ],
                "testDumpGraphStructureLookup": [
                    "self"
                ],
                "testDumpCausalityCheck": [
                    "self"
                ],
                "testWatchingOutputSlotWithoutOutgoingEdge": [
                    "self"
                ],
                "testWatchingVariableUpdateOps": [
                    "self"
                ],
                "testWatchingUnconnectedOutputTensor": [
                    "self"
                ],
                "testRunWithError": [
                    "self"
                ]
            }
        },
        "tensorflow.python.debug.debug_data": {
            "load_tensor_from_event_file": [
                "event_file_path"
            ],
            "parse_node_or_tensor_name": [
                "name"
            ],
            "_get_tensor_name": [
                "node_name",
                "output_slot"
            ],
            "_get_tensor_watch_key": [
                "node_name",
                "output_slot",
                "debug_op"
            ],
            "_is_copy_node": [
                "node_name"
            ],
            "_is_debug_node": [
                "node_name"
            ],
            "_parse_debug_node_name": [
                "node_name"
            ],
            "has_inf_or_nan": [
                "datum",
                "tensor"
            ],
            "DebugTensorDatum": {
                "__init__": [
                    "self",
                    "dump_root",
                    "debug_dump_rel_path"
                ],
                "__str__": [
                    "self"
                ],
                "__repr__": [
                    "self"
                ],
                "get_tensor": [
                    "self"
                ],
                "timestamp": [
                    "self"
                ],
                "debug_op": [
                    "self"
                ],
                "node_name": [
                    "self"
                ],
                "output_slot": [
                    "self"
                ],
                "tensor_name": [
                    "self"
                ],
                "watch_key": [
                    "self"
                ],
                "file_path": [
                    "self"
                ]
            },
            "DebugDumpDir": {
                "__init__": [
                    "self",
                    "dump_root",
                    "partition_graphs",
                    "validate"
                ],
                "dumped_tensor_data": [
                    "self"
                ],
                "t0": [
                    "self"
                ],
                "size": [
                    "self"
                ],
                "_load_partition_graphs": [
                    "self",
                    "partition_graphs"
                ],
                "_validate_dump_with_graphs": [
                    "self"
                ],
                "loaded_partition_graphs": [
                    "self"
                ],
                "partition_graphs": [
                    "self"
                ],
                "nodes": [
                    "self"
                ],
                "node_attributes": [
                    "self",
                    "node_name"
                ],
                "node_inputs": [
                    "self",
                    "node_name",
                    "is_control"
                ],
                "transitive_inputs": [
                    "self",
                    "node_name",
                    "include_control"
                ],
                "node_recipients": [
                    "self",
                    "node_name",
                    "is_control"
                ],
                "devices": [
                    "self"
                ],
                "node_exists": [
                    "self",
                    "node_name"
                ],
                "node_device": [
                    "self",
                    "node_name"
                ],
                "node_op_type": [
                    "self",
                    "node_name"
                ],
                "debug_watch_keys": [
                    "self",
                    "node_name"
                ],
                "watch_key_to_data": [
                    "self",
                    "debug_watch_key"
                ],
                "find": [
                    "self",
                    "predicate",
                    "first_n"
                ],
                "get_tensor_file_paths": [
                    "self",
                    "node_name",
                    "output_slot",
                    "debug_op"
                ],
                "get_tensors": [
                    "self",
                    "node_name",
                    "output_slot",
                    "debug_op"
                ],
                "get_rel_timestamps": [
                    "self",
                    "node_name",
                    "output_slot",
                    "debug_op"
                ]
            }
        },
        "tensorflow.python.debug.stepper_test": {
            "StepperTest": {
                "setUp": [
                    "self"
                ],
                "tearDown": [
                    "self"
                ],
                "testAttemptToContToFetchNotInTransitiveClosure": [
                    "self"
                ],
                "testUsingNamesNotUsingIntermediateTensors": [
                    "self"
                ],
                "testUsingNodesNotUsingIntermediateTensors": [
                    "self"
                ],
                "testIsFeedable": [
                    "self"
                ],
                "testOverrideValue": [
                    "self"
                ],
                "testOverrideValueTwice": [
                    "self"
                ],
                "testRemoveOverrideValue": [
                    "self"
                ],
                "testOverrideAndContToSameTensor": [
                    "self"
                ],
                "testFinalizeWithPreviousOverrides": [
                    "self"
                ],
                "testRemoveNonexistentOverrideValue": [
                    "self"
                ],
                "testAttemptToOverrideInvalidTensor": [
                    "self"
                ],
                "testInvalidOverrideArgumentType": [
                    "self"
                ]
            },
            "StepperTestWithPlaceHolders": {
                "setUp": [
                    "self"
                ],
                "tearDown": [
                    "self"
                ],
                "testContWithPlaceholders": [
                    "self"
                ],
                "testAttemptToContToPlaceholder": [
                    "self"
                ]
            },
            "StepperBackwardRunTest": {
                "setUp": [
                    "self"
                ],
                "tearDown": [
                    "self"
                ],
                "testContToUpdateA": [
                    "self"
                ],
                "testContToUpdateB": [
                    "self"
                ],
                "testContAfterUpdateWithoutRestoringVariableValue": [
                    "self"
                ],
                "testUpdateTwiceRestoreVariable": [
                    "self"
                ],
                "testSelectiveHandleUsageDependingOnTransitiveCleanliness": [
                    "self"
                ],
                "testFinalize": [
                    "self"
                ],
                "testOverrideThenContToUpdate": [
                    "self"
                ]
            }
        },
        "tensorflow.python.debug.debug_utils": {
            "add_debug_tensor_watch": [
                "run_options",
                "node_name",
                "output_slot",
                "debug_ops",
                "debug_urls"
            ],
            "watch_graph": [
                "run_options",
                "graph",
                "debug_ops",
                "debug_urls",
                "node_name_regex_whitelist",
                "op_type_regex_whitelist"
            ],
            "watch_graph_with_blacklists": [
                "run_options",
                "graph",
                "debug_ops",
                "debug_urls",
                "node_name_regex_blacklist",
                "op_type_regex_blacklist"
            ]
        },
        "tensorflow.python.debug.debug_utils_test": {
            "DebugUtilsTest": {
                "setUpClass": [
                    "cls"
                ],
                "setUp": [
                    "self"
                ],
                "_verify_watches": [
                    "self",
                    "watch_opts",
                    "expected_output_slot",
                    "expected_debug_ops",
                    "expected_debug_urls"
                ],
                "testAddDebugTensorWatches_defaultDebugOp": [
                    "self"
                ],
                "testAddDebugTensorWatches_explicitDebugOp": [
                    "self"
                ],
                "testAddDebugTensorWatches_multipleDebugOps": [
                    "self"
                ],
                "testAddDebugTensorWatches_multipleURLs": [
                    "self"
                ],
                "testWatchGraph_allNodes": [
                    "self"
                ],
                "testWatchGraph_nodeNameWhitelist": [
                    "self"
                ],
                "testWatchGraph_opTypeWhitelist": [
                    "self"
                ],
                "testWatchGraph_nodeNameAndOpTypeWhitelists": [
                    "self"
                ],
                "testWatchGraph_nodeNameBlacklist": [
                    "self"
                ],
                "testWatchGraph_opTypeBlacklist": [
                    "self"
                ],
                "testWatchGraph_nodeNameAndOpTypeBlacklists": [
                    "self"
                ]
            }
        },
        "tensorflow.python.debug": {},
        "tensorflow.python.debug.stepper": {
            "NodeStepper": {
                "__init__": [
                    "self",
                    "sess",
                    "fetch",
                    "feed_dict"
                ],
                "_dfs_visit": [
                    "self",
                    "graph",
                    "elem"
                ],
                "sorted_transitive_closure": [
                    "self"
                ],
                "is_feedable": [
                    "self",
                    "name"
                ],
                "override_tensor": [
                    "self",
                    "tensor_name",
                    "overriding_val"
                ],
                "remove_override": [
                    "self",
                    "tensor_name"
                ],
                "last_feed_types": [
                    "self"
                ],
                "cont": [
                    "self",
                    "target",
                    "use_tensor_handles",
                    "use_overrides",
                    "restore_variable_values"
                ],
                "_invalidate_transitively_outgoing_cache": [
                    "self",
                    "source_element"
                ],
                "finalize": [
                    "self"
                ],
                "handle_names": [
                    "self"
                ],
                "dirty_variables": [
                    "self"
                ],
                "get_tensor_value": [
                    "self",
                    "tensor_name"
                ],
                "get_fetch_result": [
                    "self"
                ],
                "override_names": [
                    "self"
                ],
                "_get_node": [
                    "self",
                    "element"
                ]
            }
        },
        "tensorflow.python.debug.wrappers.framework_test": {
            "TestDebugWrapperSession": {
                "__init__": [
                    "self",
                    "sess",
                    "dump_root",
                    "observer"
                ],
                "on_session_init": [
                    "self",
                    "request"
                ],
                "on_run_start": [
                    "self",
                    "request"
                ],
                "on_run_end": [
                    "self",
                    "request"
                ]
            },
            "TestDebugWrapperSessionBadAction": {
                "__init__": [
                    "self",
                    "sess",
                    "bad_init_action",
                    "bad_run_start_action",
                    "bad_debug_urls"
                ],
                "on_session_init": [
                    "self",
                    "request"
                ],
                "on_run_start": [
                    "self",
                    "request"
                ],
                "on_run_end": [
                    "self",
                    "request"
                ]
            },
            "DebugWrapperSessionTest": {
                "setUp": [
                    "self"
                ],
                "tearDown": [
                    "self"
                ],
                "testSessionInit": [
                    "self"
                ],
                "testInteractiveSessionInit": [
                    "self"
                ],
                "testSessionRun": [
                    "self"
                ],
                "testSessionInitInvalidSessionType": [
                    "self"
                ],
                "testSessionInitBadActionValue": [
                    "self"
                ],
                "testRunStartBadActionValue": [
                    "self"
                ],
                "testRunStartBadURLs": [
                    "self"
                ],
                "testErrorDuringRun": [
                    "self"
                ]
            }
        },
        "tensorflow.python.debug.wrappers.hooks": {
            "LocalCLIDebugHook": {
                "__init__": [
                    "self"
                ],
                "begin": [
                    "self"
                ],
                "before_run": [
                    "self",
                    "run_context"
                ],
                "after_run": [
                    "self",
                    "run_context",
                    "run_values"
                ],
                "_decorate_options_for_debug": [
                    "self",
                    "options",
                    "graph"
                ]
            }
        },
        "tensorflow.python.debug.wrappers.framework": {
            "_check_type": [
                "obj",
                "expected_type"
            ],
            "OnSessionInitRequest": {
                "__init__": [
                    "self",
                    "sess"
                ]
            },
            "OnSessionInitAction": {},
            "OnSessionInitResponse": {
                "__init__": [
                    "self",
                    "action"
                ]
            },
            "OnRunStartRequest": {
                "__init__": [
                    "self",
                    "fetches",
                    "feed_dict",
                    "run_options",
                    "run_metadata",
                    "run_call_count"
                ]
            },
            "OnRunStartAction": {},
            "OnRunStartResponse": {
                "__init__": [
                    "self",
                    "action",
                    "debug_urls"
                ]
            },
            "OnRunEndRequest": {
                "__init__": [
                    "self",
                    "performed_action",
                    "run_metadata",
                    "client_graph_def",
                    "tf_error"
                ]
            },
            "OnRunEndResponse": {
                "__init__": [
                    "self"
                ]
            },
            "BaseDebugWrapperSession": {
                "__init__": [
                    "self",
                    "sess"
                ],
                "graph": [
                    "self"
                ],
                "sess_str": [
                    "self"
                ],
                "session": [
                    "self"
                ],
                "run": [
                    "self",
                    "fetches",
                    "feed_dict",
                    "options",
                    "run_metadata"
                ],
                "partial_run_setup": [
                    "self",
                    "fetches",
                    "feeds"
                ],
                "partial_run": [
                    "self",
                    "handle",
                    "fetches",
                    "feed_dict"
                ],
                "_decorate_run_options": [
                    "self",
                    "run_options",
                    "debug_urls"
                ],
                "on_session_init": [
                    "self",
                    "request"
                ],
                "on_run_start": [
                    "self",
                    "request"
                ],
                "on_run_end": [
                    "self",
                    "request"
                ]
            }
        },
        "tensorflow.python.debug.wrappers.local_cli_wrapper": {
            "LocalCLIDebugWrapperSession": {
                "__init__": [
                    "self",
                    "sess",
                    "dump_root",
                    "log_usage"
                ],
                "add_tensor_filter": [
                    "self",
                    "filter_name",
                    "tensor_filter"
                ],
                "on_session_init": [
                    "self",
                    "request"
                ],
                "on_run_start": [
                    "self",
                    "request"
                ],
                "on_run_end": [
                    "self",
                    "request"
                ],
                "_on_run_start_run_handler": [
                    "self",
                    "args",
                    "screen_info"
                ],
                "_on_run_start_step_handler": [
                    "self",
                    "args",
                    "screen_info"
                ],
                "_run_end_run_command_handler": [
                    "self",
                    "args",
                    "screen_info"
                ],
                "_get_run_debug_urls": [
                    "self"
                ],
                "_update_run_calls_state": [
                    "self",
                    "run_call_count",
                    "fetches",
                    "feed_dict"
                ]
            }
        },
        "tensorflow.python.debug.wrappers.local_cli_wrapper_test": {
            "LocalCLIDebugWrapperSessionTest": {
                "setUp": [
                    "self"
                ],
                "tearDown": [
                    "self"
                ],
                "testConstructWrapper": [
                    "self"
                ],
                "testConstructWrapperWithExistingEmptyDumpRoot": [
                    "self"
                ],
                "testConstructWrapperWithExistingNonEmptyDumpRoot": [
                    "self"
                ],
                "testConstructWrapperWithExistingFileDumpRoot": [
                    "self"
                ]
            }
        },
        "tensorflow.python.debug.wrappers": {},
        "tensorflow.python.debug.cli.analyzer_cli": {
            "DebugAnalyzer": {
                "__init__": [
                    "self",
                    "debug_dump"
                ],
                "_error": [
                    "self",
                    "msg"
                ],
                "add_tensor_filter": [
                    "self",
                    "filter_name",
                    "filter_callable"
                ],
                "get_tensor_filter": [
                    "self",
                    "filter_name"
                ],
                "get_help": [
                    "self",
                    "handler_name"
                ],
                "list_tensors": [
                    "self",
                    "args",
                    "screen_info"
                ],
                "node_info": [
                    "self",
                    "args",
                    "screen_info"
                ],
                "list_inputs": [
                    "self",
                    "args",
                    "screen_info"
                ],
                "print_tensor": [
                    "self",
                    "args",
                    "screen_info"
                ],
                "_parse_ranges_highlight": [
                    "self",
                    "ranges_string"
                ],
                "_format_tensor": [
                    "self",
                    "tensor",
                    "watch_key",
                    "np_printoptions",
                    "print_all",
                    "tensor_slicing",
                    "highlight_options"
                ],
                "list_outputs": [
                    "self",
                    "args",
                    "screen_info"
                ],
                "_list_inputs_or_outputs": [
                    "self",
                    "recursive",
                    "node_name",
                    "depth",
                    "control",
                    "op_type",
                    "do_outputs"
                ],
                "_dfs_from_node": [
                    "self",
                    "lines",
                    "node_name",
                    "tracker",
                    "max_depth",
                    "depth",
                    "unfinished",
                    "include_control",
                    "show_op_type"
                ],
                "_format_neighbors": [
                    "self",
                    "neighbor_type",
                    "non_ctrls",
                    "ctrls"
                ],
                "_list_node_attributes": [
                    "self",
                    "node_name"
                ],
                "_list_node_dumps": [
                    "self",
                    "node_name"
                ]
            }
        },
        "tensorflow.python.debug.cli.command_parser": {
            "parse_command": [
                "command"
            ],
            "parse_tensor_name_with_slicing": [
                "in_str"
            ],
            "validate_slicing_string": [
                "slicing_string"
            ],
            "parse_indices": [
                "indices_string"
            ],
            "parse_ranges": [
                "range_string"
            ]
        },
        "tensorflow.python.debug.cli.command_parser_test": {
            "ParseCommandTest": {
                "testParseNoBracketsOrQuotes": [
                    "self"
                ],
                "testParseLeadingTrailingWhitespaces": [
                    "self"
                ],
                "testParseCommandsWithBrackets": [
                    "self"
                ],
                "testParseCommandWithTwoArgsContainingBrackets": [
                    "self"
                ],
                "testParseCommandWithUnmatchedBracket": [
                    "self"
                ],
                "testParseCommandsWithQuotes": [
                    "self"
                ],
                "testParseCommandWithTwoArgsContainingQuotes": [
                    "self"
                ]
            },
            "ParseTensorNameTest": {
                "testParseTensorNameWithoutSlicing": [
                    "self"
                ],
                "testParseTensorNameWithSlicing": [
                    "self"
                ]
            },
            "ValidateSlicingStringTest": {
                "testValidateValidSlicingStrings": [
                    "self"
                ],
                "testValidateInvalidSlicingStrings": [
                    "self"
                ]
            },
            "ParseIndicesTest": {
                "testParseValidIndicesStringsWithBrackets": [
                    "self"
                ],
                "testParseValidIndicesStringsWithoutBrackets": [
                    "self"
                ],
                "testParseInvalidIndicesStringsWithoutBrackets": [
                    "self"
                ]
            },
            "ParseRangesTest": {
                "testParseEmptyRangeString": [
                    "self"
                ],
                "testParseSingleRange": [
                    "self"
                ],
                "testParseSingleListOfRanges": [
                    "self"
                ],
                "testParseInvalidRangeString": [
                    "self"
                ]
            }
        },
        "tensorflow.python.debug.cli.debugger_cli_common": {
            "regex_find": [
                "orig_screen_output",
                "regex",
                "font_attr"
            ],
            "wrap_rich_text_lines": [
                "inp",
                "cols"
            ],
            "CommandLineExit": {
                "__init__": [
                    "self",
                    "exit_token"
                ],
                "exit_token": [
                    "self"
                ]
            },
            "RichTextLines": {
                "__init__": [
                    "self",
                    "lines",
                    "font_attr_segs",
                    "annotations"
                ],
                "lines": [
                    "self"
                ],
                "font_attr_segs": [
                    "self"
                ],
                "annotations": [
                    "self"
                ],
                "num_lines": [
                    "self"
                ],
                "slice": [
                    "self",
                    "begin",
                    "end"
                ],
                "extend": [
                    "self",
                    "other"
                ]
            },
            "CommandHandlerRegistry": {
                "__init__": [
                    "self"
                ],
                "register_command_handler": [
                    "self",
                    "prefix",
                    "handler",
                    "help_info",
                    "prefix_aliases"
                ],
                "dispatch_command": [
                    "self",
                    "prefix",
                    "argv",
                    "screen_info"
                ],
                "is_registered": [
                    "self",
                    "prefix"
                ],
                "get_help": [
                    "self",
                    "cmd_prefix"
                ],
                "set_help_intro": [
                    "self",
                    "help_intro"
                ],
                "_help_handler": [
                    "self",
                    "args",
                    "screen_info"
                ],
                "_resolve_prefix": [
                    "self",
                    "token"
                ],
                "_get_help_for_command_prefix": [
                    "self",
                    "cmd_prefix"
                ]
            },
            "TabCompletionRegistry": {
                "__init__": [
                    "self"
                ],
                "register_tab_comp_context": [
                    "self",
                    "context_words",
                    "comp_items"
                ],
                "deregister_context": [
                    "self",
                    "context_words"
                ],
                "extend_comp_items": [
                    "self",
                    "context_word",
                    "new_comp_items"
                ],
                "remove_comp_items": [
                    "self",
                    "context_word",
                    "comp_items"
                ],
                "get_completions": [
                    "self",
                    "context_word",
                    "prefix"
                ],
                "_common_prefix": [
                    "self",
                    "m"
                ]
            },
            "CommandHistory": {
                "__init__": [
                    "self",
                    "limit"
                ],
                "add_command": [
                    "self",
                    "command"
                ],
                "most_recent_n": [
                    "self",
                    "n"
                ],
                "lookup_prefix": [
                    "self",
                    "prefix",
                    "n"
                ]
            }
        },
        "tensorflow.python.debug.cli.curses_ui": {
            "CursesUI": {
                "__init__": [
                    "self"
                ],
                "_init_layout": [
                    "self"
                ],
                "_screen_init": [
                    "self"
                ],
                "_screen_launch": [
                    "self"
                ],
                "_screen_create_command_window": [
                    "self"
                ],
                "_screen_refresh": [
                    "self"
                ],
                "_screen_terminate": [
                    "self"
                ],
                "run_ui": [
                    "self",
                    "init_command",
                    "title",
                    "title_color"
                ],
                "register_command_handler": [
                    "self",
                    "prefix",
                    "handler",
                    "help_info",
                    "prefix_aliases"
                ],
                "register_tab_comp_context": [
                    "self"
                ],
                "set_help_intro": [
                    "self",
                    "help_intro"
                ],
                "get_help": [
                    "self"
                ],
                "_screen_create_command_textbox": [
                    "self",
                    "existing_command"
                ],
                "_ui_loop": [
                    "self"
                ],
                "_get_user_command": [
                    "self"
                ],
                "_screen_get_user_command": [
                    "self"
                ],
                "_strip_terminator": [
                    "self",
                    "command"
                ],
                "_screen_refresh_size": [
                    "self"
                ],
                "_dispatch_command": [
                    "self",
                    "command"
                ],
                "_parse_command": [
                    "self",
                    "command"
                ],
                "_screen_gather_textbox_str": [
                    "self"
                ],
                "_on_textbox_keypress": [
                    "self",
                    "x"
                ],
                "_title": [
                    "self",
                    "title",
                    "title_color"
                ],
                "_auto_key_in": [
                    "self",
                    "command"
                ],
                "_screen_draw_text_line": [
                    "self",
                    "row",
                    "line",
                    "attr",
                    "color"
                ],
                "_screen_new_output_pad": [
                    "self",
                    "rows",
                    "cols"
                ],
                "_screen_display_output": [
                    "self",
                    "output"
                ],
                "_display_output": [
                    "self",
                    "output",
                    "is_refresh",
                    "highlight_regex"
                ],
                "_display_lines": [
                    "self",
                    "output",
                    "min_num_rows"
                ],
                "_screen_add_line_to_output_pad": [
                    "self",
                    "pad",
                    "row",
                    "txt",
                    "color_segments"
                ],
                "_screen_scroll_output_pad": [
                    "self",
                    "pad",
                    "viewport_top",
                    "viewport_left",
                    "screen_location_top",
                    "screen_location_left",
                    "screen_location_bottom",
                    "screen_location_right"
                ],
                "_scroll_output": [
                    "self",
                    "direction",
                    "line_index"
                ],
                "_format_indices": [
                    "self",
                    "indices"
                ],
                "_show_array_indices": [
                    "self"
                ],
                "_show_array_index_at_line": [
                    "self",
                    "line_index"
                ],
                "_tab_complete": [
                    "self",
                    "command_str"
                ],
                "_display_candidates": [
                    "self",
                    "candidates"
                ],
                "_toast": [
                    "self",
                    "message",
                    "color",
                    "line_index"
                ],
                "_error_toast": [
                    "self",
                    "message"
                ],
                "_interrupt_handler": [
                    "self",
                    "signal_num",
                    "frame"
                ]
            }
        },
        "tensorflow.python.debug.cli.tensor_format_test": {
            "RichTextLinesTest": {
                "setUp": [
                    "self"
                ],
                "_checkTensorMetadata": [
                    "self",
                    "tensor",
                    "annotations"
                ],
                "_checkBeginIndices": [
                    "self",
                    "expected_indices",
                    "annot"
                ],
                "_checkOmittedIndices": [
                    "self",
                    "expected_indices",
                    "annot"
                ],
                "testFormatZeroDimensionTensor": [
                    "self"
                ],
                "testFormatTensor1DNoEllipsis": [
                    "self"
                ],
                "testFormatTensor2DNoEllipsisNoRowBreak": [
                    "self"
                ],
                "testFormatTensorSuppressingTensorName": [
                    "self"
                ],
                "testFormatTensorWithMetadata": [
                    "self"
                ],
                "testFormatTensor2DNoEllipsisWithRowBreak": [
                    "self"
                ],
                "testFormatTensor3DNoEllipsis": [
                    "self"
                ],
                "testFormatTensor3DNoEllipsisWithArgwhereHighlightWithMatches": [
                    "self"
                ],
                "testFormatTensor3DNoEllipsisWithArgwhereHighlightWithNoMatches": [
                    "self"
                ],
                "testFormatTensorWithEllipses": [
                    "self"
                ],
                "testFormatNone": [
                    "self"
                ],
                "testLocateTensorElement1DNoEllipsis": [
                    "self"
                ],
                "testLocateTensorElement1DNoEllipsisBatchMode": [
                    "self"
                ],
                "testBatchModeWithErrors": [
                    "self"
                ],
                "testLocateTensorElement1DTinyAndNanValues": [
                    "self"
                ],
                "testLocateTensorElement2DNoEllipsis": [
                    "self"
                ],
                "testLocateTensorElement3DWithEllipses": [
                    "self"
                ],
                "testLocateTensorElement3DWithEllipsesBatchMode": [
                    "self"
                ],
                "testLocateTensorElementAnnotationsUnavailable": [
                    "self"
                ]
            }
        },
        "tensorflow.python.debug.cli.analyzer_cli_test": {
            "parse_op_and_node": [
                "line"
            ],
            "assert_listed_tensors": [
                "tst",
                "out",
                "expected_tensor_names",
                "node_name_regex",
                "op_type_regex",
                "tensor_filter_name"
            ],
            "assert_node_attribute_lines": [
                "tst",
                "out",
                "node_name",
                "op_type",
                "device",
                "input_op_type_node_name_pairs",
                "ctrl_input_op_type_node_name_pairs",
                "recipient_op_type_node_name_pairs",
                "ctrl_recipient_op_type_node_name_pairs",
                "attr_key_val_pairs",
                "num_dumped_tensors"
            ],
            "check_syntax_error_output": [
                "tst",
                "out",
                "command_prefix"
            ],
            "check_error_output": [
                "tst",
                "out",
                "command_prefix",
                "args"
            ],
            "AnalyzerCLISimpleMulAddTest": {
                "setUpClass": [
                    "cls"
                ],
                "tearDownClass": [
                    "cls"
                ],
                "testListTensors": [
                    "self"
                ],
                "testListTensorsFilterByNodeNameRegex": [
                    "self"
                ],
                "testListTensorFilterByOpTypeRegex": [
                    "self"
                ],
                "testListTensorFilterByNodeNameRegexAndOpTypeRegex": [
                    "self"
                ],
                "testListTensorsFilterNanOrInf": [
                    "self"
                ],
                "testListTensorNonexistentFilter": [
                    "self"
                ],
                "testListTensorsInvalidOptions": [
                    "self"
                ],
                "testNodeInfoByNodeName": [
                    "self"
                ],
                "testNodeInfoShowAttributes": [
                    "self"
                ],
                "testNodeInfoShowDumps": [
                    "self"
                ],
                "testNodeInfoByTensorName": [
                    "self"
                ],
                "testNodeInfoNonexistentNodeName": [
                    "self"
                ],
                "testPrintTensor": [
                    "self"
                ],
                "testPrintTensorHighlightingRanges": [
                    "self"
                ],
                "testPrintTensorWithSlicing": [
                    "self"
                ],
                "testPrintTensorInvalidSlicingString": [
                    "self"
                ],
                "testPrintTensorValidExplicitNumber": [
                    "self"
                ],
                "testPrintTensorInvalidExplicitNumber": [
                    "self"
                ],
                "testPrintTensorMissingOutputSlot": [
                    "self"
                ],
                "testPrintTensorNonexistentNodeName": [
                    "self"
                ],
                "testAddGetTensorFilterLambda": [
                    "self"
                ],
                "testAddGetTensorFilterNestedFunction": [
                    "self"
                ],
                "testAddTensorFilterEmptyName": [
                    "self"
                ],
                "testAddTensorFilterNonStrName": [
                    "self"
                ],
                "testAddGetTensorFilterNonCallable": [
                    "self"
                ],
                "testGetNonexistentTensorFilter": [
                    "self"
                ]
            },
            "AnalyzerCLIPrintLargeTensorTest": {
                "setUpClass": [
                    "cls"
                ],
                "tearDownClass": [
                    "cls"
                ],
                "testPrintLargeTensorWithoutAllOption": [
                    "self"
                ],
                "testPrintLargeTensorWithAllOption": [
                    "self"
                ]
            },
            "AnalyzerCLIControlDepTest": {
                "setUpClass": [
                    "cls"
                ],
                "tearDownClass": [
                    "cls"
                ],
                "testNodeInfoWithControlDependencies": [
                    "self"
                ],
                "testListInputsNonRecursiveNoControl": [
                    "self"
                ],
                "testListInputsNonRecursiveNoControlUsingTensorName": [
                    "self"
                ],
                "testListInputsNonRecursiveWithControls": [
                    "self"
                ],
                "testListInputsRecursiveWithControls": [
                    "self"
                ],
                "testListInputsRecursiveWithControlsWithDepthLimit": [
                    "self"
                ],
                "testListInputsNodeWithoutInputs": [
                    "self"
                ],
                "testListInputsNonexistentNode": [
                    "self"
                ],
                "testListRecipientsRecursiveWithControlsWithDepthLimit": [
                    "self"
                ]
            },
            "AnalyzerCLIWhileLoopTest": {
                "setUpClass": [
                    "cls"
                ],
                "tearDownClass": [
                    "cls"
                ],
                "testMultipleDumpsPrintTensorNoNumber": [
                    "self"
                ],
                "testMultipleDumpsPrintTensorWithNumber": [
                    "self"
                ],
                "testMultipleDumpsPrintTensorInvalidNumber": [
                    "self"
                ]
            }
        },
        "tensorflow.python.debug.cli.debugger_cli_common_test": {
            "CommandLineExitTest": {
                "testConstructionWithoutToken": [
                    "self"
                ],
                "testConstructionWithToken": [
                    "self"
                ]
            },
            "RichTextLinesTest": {
                "testRichTextLinesConstructorComplete": [
                    "self"
                ],
                "testRichTextLinesConstructorWithInvalidType": [
                    "self"
                ],
                "testRichTextLinesConstructorWithString": [
                    "self"
                ],
                "testRichTextLinesConstructorIncomplete": [
                    "self"
                ],
                "testModifyRichTextLinesObject": [
                    "self"
                ],
                "testMergeRichTextLines": [
                    "self"
                ],
                "testMergeRichTextLinesEmptyOther": [
                    "self"
                ],
                "testMergeRichTextLinesEmptySelf": [
                    "self"
                ]
            },
            "CommandHandlerRegistryTest": {
                "setUp": [
                    "self"
                ],
                "_noop_handler": [
                    "self",
                    "argv",
                    "screen_info"
                ],
                "_handler_raising_exception": [
                    "self",
                    "argv",
                    "screen_info"
                ],
                "_handler_returning_wrong_type": [
                    "self",
                    "argv",
                    "screen_info"
                ],
                "_echo_screen_cols": [
                    "self",
                    "argv",
                    "screen_info"
                ],
                "_exiting_handler": [
                    "self",
                    "argv",
                    "screen_info"
                ],
                "testRegisterEmptyCommandPrefix": [
                    "self"
                ],
                "testRegisterAndInvokeHandler": [
                    "self"
                ],
                "testExitingHandler": [
                    "self"
                ],
                "testInvokeHandlerWithScreenInfo": [
                    "self"
                ],
                "testRegisterAndInvokeHandlerWithAliases": [
                    "self"
                ],
                "testHandlerWithWrongReturnType": [
                    "self"
                ],
                "testRegisterDuplicateHandlers": [
                    "self"
                ],
                "testRegisterDuplicateAliases": [
                    "self"
                ],
                "testDispatchHandlerRaisingException": [
                    "self"
                ],
                "testRegisterNonCallableHandler": [
                    "self"
                ],
                "testRegisterHandlerWithInvalidHelpInfoType": [
                    "self"
                ],
                "testGetHelpFull": [
                    "self"
                ],
                "testGetHelpSingleCommand": [
                    "self"
                ],
                "testHelpCommandWithoutIntro": [
                    "self"
                ],
                "testHelpCommandWithIntro": [
                    "self"
                ]
            },
            "RegexFindTest": {
                "setUp": [
                    "self"
                ],
                "testRegexFindWithoutExistingFontAttrSegs": [
                    "self"
                ],
                "testRegexFindWithExistingFontAttrSegs": [
                    "self"
                ],
                "testRegexFindWithNoMatches": [
                    "self"
                ],
                "testInvalidRegex": [
                    "self"
                ]
            },
            "WrapScreenOutputTest": {
                "setUp": [
                    "self"
                ],
                "testNoActualWrapping": [
                    "self"
                ],
                "testWrappingWithAttrCutoff": [
                    "self"
                ],
                "testWrappingWithMultipleAttrCutoff": [
                    "self"
                ],
                "testWrappingInvalidArguments": [
                    "self"
                ],
                "testWrappingEmptyInput": [
                    "self"
                ]
            },
            "SliceRichTextLinesText": {
                "setUp": [
                    "self"
                ],
                "testSliceBeginning": [
                    "self"
                ],
                "testSliceEnd": [
                    "self"
                ],
                "testAttemptSliceWithNegativeIndex": [
                    "self"
                ]
            },
            "TabCompletionRegistryTest": {
                "setUp": [
                    "self"
                ],
                "testTabCompletion": [
                    "self"
                ],
                "testExtendCompletionItems": [
                    "self"
                ],
                "testExtendCompletionItemsNonexistentContext": [
                    "self"
                ],
                "testRemoveCompletionItems": [
                    "self"
                ],
                "testRemoveCompletionItemsNonexistentContext": [
                    "self"
                ],
                "testDeregisterContext": [
                    "self"
                ],
                "testDeregisterNonexistentContext": [
                    "self"
                ]
            },
            "CommandHistoryTest": {
                "setUp": [
                    "self"
                ],
                "testLookUpMostRecent": [
                    "self"
                ],
                "testLookUpPrefix": [
                    "self"
                ],
                "testAddNonStrCommand": [
                    "self"
                ]
            }
        },
        "tensorflow.python.debug.cli": {},
        "tensorflow.python.debug.cli.tensor_format": {
            "format_tensor": [
                "tensor",
                "tensor_name",
                "include_metadata",
                "np_printoptions",
                "highlight_options"
            ],
            "_annotate_ndarray_lines": [
                "array_lines",
                "tensor",
                "np_printoptions",
                "offset"
            ],
            "locate_tensor_element": [
                "formatted",
                "indices"
            ],
            "_validate_indices_list": [
                "indices_list",
                "formatted"
            ],
            "_locate_elements_in_line": [
                "line",
                "indices_list",
                "ref_indices"
            ],
            "HighlightOptions": {
                "__init__": [
                    "self",
                    "criterion",
                    "description",
                    "font_attr"
                ]
            }
        },
        "tensorflow.python.debug.cli.curses_ui_test": {
            "string_to_codes": [
                "cmd"
            ],
            "codes_to_string": [
                "cmd_code"
            ],
            "MockCursesUI": {
                "__init__": [
                    "self",
                    "height",
                    "width",
                    "command_sequence"
                ],
                "_screen_init": [
                    "self"
                ],
                "_screen_refresh_size": [
                    "self"
                ],
                "_screen_launch": [
                    "self"
                ],
                "_screen_terminate": [
                    "self"
                ],
                "_screen_refresh": [
                    "self"
                ],
                "_screen_create_command_window": [
                    "self"
                ],
                "_screen_create_command_textbox": [
                    "self",
                    "existing_command"
                ],
                "_screen_new_output_pad": [
                    "self",
                    "rows",
                    "cols"
                ],
                "_screen_add_line_to_output_pad": [
                    "self",
                    "pad",
                    "row",
                    "txt",
                    "color_segments"
                ],
                "_screen_draw_text_line": [
                    "self",
                    "row",
                    "line",
                    "attr",
                    "color"
                ],
                "_screen_scroll_output_pad": [
                    "self",
                    "pad",
                    "viewport_top",
                    "viewport_left",
                    "screen_location_top",
                    "screen_location_left",
                    "screen_location_bottom",
                    "screen_location_right"
                ],
                "_screen_get_user_command": [
                    "self"
                ],
                "_screen_gather_textbox_str": [
                    "self"
                ],
                "_scroll_output": [
                    "self",
                    "direction",
                    "line_index"
                ],
                "_display_candidates": [
                    "self",
                    "candidates"
                ],
                "_toast": [
                    "self",
                    "message",
                    "color",
                    "line_index"
                ]
            },
            "CursesTest": {
                "_babble": [
                    "self",
                    "args",
                    "screen_info"
                ],
                "_print_ones": [
                    "self",
                    "args",
                    "screen_info"
                ],
                "testInitialization": [
                    "self"
                ],
                "testRunUIExitImmediately": [
                    "self"
                ],
                "testRunUIEmptyCommand": [
                    "self"
                ],
                "testRunUIInvalidCommandPrefix": [
                    "self"
                ],
                "testRunUIInvalidCommandSyntax": [
                    "self"
                ],
                "testRunUIScrollTallOutputPageDownUp": [
                    "self"
                ],
                "testCutOffTooManyOutputLines": [
                    "self"
                ],
                "testRunUIScrollTallOutputEndHome": [
                    "self"
                ],
                "testRunUIWithInitCmd": [
                    "self"
                ],
                "testCompileHelpWithoutHelpIntro": [
                    "self"
                ],
                "testCompileHelpWithHelpIntro": [
                    "self"
                ],
                "testCommandHistoryNavBackwardOnce": [
                    "self"
                ],
                "testCommandHistoryNavBackwardTwice": [
                    "self"
                ],
                "testCommandHistoryNavBackwardOverLimit": [
                    "self"
                ],
                "testCommandHistoryNavBackwardThenForward": [
                    "self"
                ],
                "testCommandHistoryPrefixNavBackwardOnce": [
                    "self"
                ],
                "testTerminalResize": [
                    "self"
                ],
                "testTabCompletionWithCommonPrefix": [
                    "self"
                ],
                "testTabCompletionEmptyTriggerWithoutCommonPrefix": [
                    "self"
                ],
                "testTabCompletionNonemptyTriggerSingleCandidate": [
                    "self"
                ],
                "testTabCompletionNoMatch": [
                    "self"
                ],
                "testTabCompletionOneWordContext": [
                    "self"
                ],
                "testTabCompletionTwice": [
                    "self"
                ],
                "testRegexSearch": [
                    "self"
                ],
                "testRegexSearchContinuation": [
                    "self"
                ],
                "testRegexSearchUnderLineWrapping": [
                    "self"
                ],
                "testRegexSearchNoMatchContinuation": [
                    "self"
                ],
                "testRegexSearchContinuationWithoutSearch": [
                    "self"
                ],
                "testRegexSearchWithInvalidRegex": [
                    "self"
                ],
                "testRegexSearchFromCommandHistory": [
                    "self"
                ],
                "testDisplayTensorWithIndices": [
                    "self"
                ],
                "testScrollTensorByValidIndices": [
                    "self"
                ],
                "testScrollTensorByInvalidIndices": [
                    "self"
                ]
            }
        },
        "tensorflow.python.debug.examples.debug_tflearn_iris": {
            "maybe_download_data": [],
            "main": [
                "_"
            ]
        },
        "tensorflow.python.debug.examples.debug_mnist": {
            "main": [
                "_"
            ]
        },
        "tensorflow.python.debug.examples": {},
        "tensorflow.python.debug.examples.debug_fibonacci": {
            "main": [
                "_"
            ]
        },
        "tensorflow.python.debug.examples.debug_errors": {
            "main": [
                "_"
            ]
        },
        "tensorflow.python.platform.app": {
            "run": [
                "main",
                "argv"
            ]
        },
        "tensorflow.python.platform.flags": {
            "_define_helper": [
                "flag_name",
                "default_value",
                "docstring",
                "flagtype"
            ],
            "DEFINE_string": [
                "flag_name",
                "default_value",
                "docstring"
            ],
            "DEFINE_integer": [
                "flag_name",
                "default_value",
                "docstring"
            ],
            "DEFINE_boolean": [
                "flag_name",
                "default_value",
                "docstring"
            ],
            "DEFINE_float": [
                "flag_name",
                "default_value",
                "docstring"
            ],
            "_FlagValues": {
                "__init__": [
                    "self"
                ],
                "_parse_flags": [
                    "self",
                    "args"
                ],
                "__getattr__": [
                    "self",
                    "name"
                ],
                "__setattr__": [
                    "self",
                    "name",
                    "value"
                ]
            }
        },
        "tensorflow.python.platform.tf_logging": {
            "TaskLevelStatusMessage": [
                "msg"
            ],
            "flush": [],
            "vlog": [
                "level",
                "msg"
            ],
            "_GetNextLogCountPerToken": [
                "token"
            ],
            "log_every_n": [
                "level",
                "msg",
                "n"
            ],
            "log_first_n": [
                "level",
                "msg",
                "n"
            ],
            "log_if": [
                "level",
                "msg",
                "condition"
            ],
            "_GetFileAndLine": [],
            "google2_log_prefix": [
                "level",
                "timestamp",
                "file_and_line"
            ],
            "get_verbosity": [],
            "set_verbosity": [
                "verbosity"
            ],
            "_get_thread_id": []
        },
        "tensorflow.python.platform.resource_loader_test": {
            "DefaultResourceLoaderTest": {
                "test_exception": [
                    "self"
                ]
            }
        },
        "tensorflow.python.platform.app_test": {
            "main": [
                "argv"
            ]
        },
        "tensorflow.python.platform.resource_loader": {
            "load_resource": [
                "path"
            ],
            "get_data_files_path": [],
            "get_path_to_datafile": [
                "path"
            ],
            "readahead_file_path": [
                "path",
                "unused_readahead"
            ]
        },
        "tensorflow.python.platform.gfile": {
            "GFile": {
                "__init__": [
                    "self",
                    "name",
                    "mode"
                ]
            },
            "FastGFile": {
                "__init__": [
                    "self",
                    "name",
                    "mode"
                ]
            }
        },
        "tensorflow.python.platform.logging_test": {
            "EventLoaderTest": {
                "test_log": [
                    "self"
                ]
            }
        },
        "tensorflow.python.platform.parameterized": {},
        "tensorflow.python.platform.flags_test": {
            "main": [
                "_"
            ],
            "FlagsTest": {
                "testString": [
                    "self"
                ],
                "testBool": [
                    "self"
                ],
                "testBoolCommandLines": [
                    "self"
                ],
                "testInt": [
                    "self"
                ],
                "testFloat": [
                    "self"
                ]
            }
        },
        "tensorflow.python.platform.googletest": {
            "g_main": [],
            "main": [],
            "GetTempDir": [],
            "test_src_dir_path": [
                "relative_path"
            ],
            "StatefulSessionAvailable": [],
            "StubOutForTesting": {
                "__init__": [
                    "self"
                ],
                "__del__": [
                    "self"
                ],
                "__enter__": [
                    "self"
                ],
                "__exit__": [
                    "self",
                    "unused_exc_type",
                    "unused_exc_value",
                    "unused_tb"
                ],
                "CleanUp": [
                    "self"
                ],
                "SmartSet": [
                    "self",
                    "obj",
                    "attr_name",
                    "new_attr"
                ],
                "SmartUnsetAll": [
                    "self"
                ],
                "Set": [
                    "self",
                    "parent",
                    "child_name",
                    "new_child"
                ],
                "UnsetAll": [
                    "self"
                ]
            }
        },
        "tensorflow.python.platform.sysconfig": {
            "get_include": [],
            "get_lib": []
        },
        "tensorflow.python.platform": {},
        "tensorflow.python.platform.test": {
            "main": [],
            "get_temp_dir": [],
            "test_src_dir_path": [
                "relative_path"
            ],
            "is_built_with_cuda": [],
            "is_gpu_available": []
        },
        "tensorflow.python.platform.benchmark": {
            "_global_report_benchmark": [
                "name",
                "iters",
                "cpu_time",
                "wall_time",
                "throughput",
                "extras"
            ],
            "_run_benchmarks": [
                "regex"
            ],
            "benchmarks_main": [
                "true_main"
            ],
            "_BenchmarkRegistrar": {
                "__new__": [
                    "mcs",
                    "clsname",
                    "base",
                    "attrs"
                ]
            },
            "Benchmark": {
                "is_abstract": [
                    "cls"
                ],
                "_get_name": [
                    "self",
                    "overwrite_name"
                ],
                "report_benchmark": [
                    "self",
                    "iters",
                    "cpu_time",
                    "wall_time",
                    "throughput",
                    "extras",
                    "name"
                ]
            },
            "TensorFlowBenchmark": {
                "is_abstract": [
                    "cls"
                ],
                "run_op_benchmark": [
                    "self",
                    "sess",
                    "op_or_tensor",
                    "feed_dict",
                    "burn_iters",
                    "min_iters",
                    "store_trace",
                    "name",
                    "extras",
                    "mbs"
                ]
            }
        },
        "tensorflow.python.platform.control_imports": {},
        "tensorflow.python.platform.status_bar": {
            "SetupStatusBarInsideGoogle": [
                "unused_link_text",
                "unused_port"
            ]
        },
        "tensorflow.python.platform.default": {},
        "tensorflow.python.platform.summary": {},
        "tensorflow.python.tools.freeze_graph": {
            "freeze_graph": [
                "input_graph",
                "input_saver",
                "input_binary",
                "input_checkpoint",
                "output_node_names",
                "restore_op_name",
                "filename_tensor_name",
                "output_graph",
                "clear_devices",
                "initializer_nodes"
            ],
            "main": [
                "unused_args"
            ]
        },
        "tensorflow.python.tools.strip_unused_test": {
            "StripUnusedTest": {
                "testStripUnused": [
                    "self"
                ]
            }
        },
        "tensorflow.python.tools.freeze_graph_test": {
            "FreezeGraphTest": {
                "_testFreezeGraph": [
                    "self",
                    "saver_write_version"
                ],
                "testFreezeGraphV1": [
                    "self"
                ],
                "testFreezeGraphV2": [
                    "self"
                ]
            }
        },
        "tensorflow.python.tools.print_selective_registration_header": {
            "get_ops_and_kernels": [
                "proto_fileformat",
                "proto_files",
                "default_ops_str"
            ],
            "get_header": [
                "ops_and_kernels",
                "include_all_ops_and_kernels"
            ],
            "main": [
                "unused_argv"
            ]
        },
        "tensorflow.python.tools.print_selective_registration_header_test": {
            "PrintOpFilegroupTest": {
                "WriteGraphFiles": [
                    "self",
                    "graphs"
                ],
                "testGetOps": [
                    "self"
                ],
                "testAll": [
                    "self"
                ]
            }
        },
        "tensorflow.python.tools.optimize_for_inference_lib": {
            "optimize_for_inference": [
                "input_graph_def",
                "input_node_names",
                "output_node_names",
                "placeholder_type_enum"
            ],
            "ensure_graph_is_valid": [
                "graph_def"
            ],
            "node_name_from_input": [
                "node_name"
            ],
            "node_from_map": [
                "node_map",
                "name"
            ],
            "values_from_const": [
                "node_def"
            ],
            "fold_batch_norms": [
                "input_graph_def"
            ],
            "fuse_resize_and_conv": [
                "input_graph_def",
                "output_node_names"
            ]
        },
        "tensorflow.python.tools.optimize_for_inference_test": {
            "OptimizeForInferenceTest": {
                "create_node_def": [
                    "self",
                    "op",
                    "name",
                    "inputs"
                ],
                "create_constant_node_def": [
                    "self",
                    "name",
                    "value",
                    "dtype",
                    "shape"
                ],
                "set_attr_dtype": [
                    "self",
                    "node",
                    "key",
                    "value"
                ],
                "set_attr_tensor": [
                    "self",
                    "node",
                    "key",
                    "value",
                    "dtype",
                    "shape"
                ],
                "testOptimizeForInference": [
                    "self"
                ],
                "testFoldBatchNorms": [
                    "self"
                ],
                "testFuseResizePadAndConv": [
                    "self"
                ],
                "testFuseResizeAndConv": [
                    "self"
                ],
                "testFusePadAndConv": [
                    "self"
                ]
            }
        },
        "tensorflow.python.tools.strip_unused_lib": {
            "strip_unused": [
                "input_graph_def",
                "input_node_names",
                "output_node_names",
                "placeholder_type_enum"
            ],
            "strip_unused_from_files": [
                "input_graph",
                "input_binary",
                "output_graph",
                "output_binary",
                "input_node_names",
                "output_node_names",
                "placeholder_type_enum"
            ]
        },
        "tensorflow.python.tools": {},
        "tensorflow.python.tools.strip_unused": {
            "main": [
                "unused_args"
            ]
        },
        "tensorflow.python.tools.inspect_checkpoint": {
            "print_tensors_in_checkpoint_file": [
                "file_name",
                "tensor_name"
            ],
            "main": [
                "unused_argv"
            ]
        },
        "tensorflow.python.tools.optimize_for_inference": {
            "main": [
                "unused_args"
            ]
        },
        "tensorflow.python.ops.clip_ops": {
            "clip_by_value": [
                "t",
                "clip_value_min",
                "clip_value_max",
                "name"
            ],
            "clip_by_norm": [
                "t",
                "clip_norm",
                "axes",
                "name"
            ],
            "global_norm": [
                "t_list",
                "name"
            ],
            "clip_by_global_norm": [
                "t_list",
                "clip_norm",
                "use_norm",
                "name"
            ],
            "clip_by_average_norm": [
                "t",
                "clip_norm",
                "name"
            ]
        },
        "tensorflow.python.ops.rnn_cell": {
            "_state_size_with_prefix": [
                "state_size",
                "prefix"
            ],
            "_get_concat_variable": [
                "name",
                "shape",
                "dtype",
                "num_shards"
            ],
            "_get_sharded_variable": [
                "name",
                "shape",
                "dtype",
                "num_shards"
            ],
            "_linear": [
                "args",
                "output_size",
                "bias",
                "bias_start",
                "scope"
            ],
            "RNNCell": {
                "__call__": [
                    "self",
                    "inputs",
                    "state",
                    "scope"
                ],
                "state_size": [
                    "self"
                ],
                "output_size": [
                    "self"
                ],
                "zero_state": [
                    "self",
                    "batch_size",
                    "dtype"
                ]
            },
            "BasicRNNCell": {
                "__init__": [
                    "self",
                    "num_units",
                    "input_size",
                    "activation"
                ],
                "state_size": [
                    "self"
                ],
                "output_size": [
                    "self"
                ],
                "__call__": [
                    "self",
                    "inputs",
                    "state",
                    "scope"
                ]
            },
            "GRUCell": {
                "__init__": [
                    "self",
                    "num_units",
                    "input_size",
                    "activation"
                ],
                "state_size": [
                    "self"
                ],
                "output_size": [
                    "self"
                ],
                "__call__": [
                    "self",
                    "inputs",
                    "state",
                    "scope"
                ]
            },
            "LSTMStateTuple": {
                "dtype": [
                    "self"
                ]
            },
            "BasicLSTMCell": {
                "__init__": [
                    "self",
                    "num_units",
                    "forget_bias",
                    "input_size",
                    "state_is_tuple",
                    "activation"
                ],
                "state_size": [
                    "self"
                ],
                "output_size": [
                    "self"
                ],
                "__call__": [
                    "self",
                    "inputs",
                    "state",
                    "scope"
                ]
            },
            "LSTMCell": {
                "__init__": [
                    "self",
                    "num_units",
                    "input_size",
                    "use_peepholes",
                    "cell_clip",
                    "initializer",
                    "num_proj",
                    "proj_clip",
                    "num_unit_shards",
                    "num_proj_shards",
                    "forget_bias",
                    "state_is_tuple",
                    "activation"
                ],
                "state_size": [
                    "self"
                ],
                "output_size": [
                    "self"
                ],
                "__call__": [
                    "self",
                    "inputs",
                    "state",
                    "scope"
                ]
            },
            "OutputProjectionWrapper": {
                "__init__": [
                    "self",
                    "cell",
                    "output_size"
                ],
                "state_size": [
                    "self"
                ],
                "output_size": [
                    "self"
                ],
                "__call__": [
                    "self",
                    "inputs",
                    "state",
                    "scope"
                ]
            },
            "InputProjectionWrapper": {
                "__init__": [
                    "self",
                    "cell",
                    "num_proj",
                    "input_size"
                ],
                "state_size": [
                    "self"
                ],
                "output_size": [
                    "self"
                ],
                "__call__": [
                    "self",
                    "inputs",
                    "state",
                    "scope"
                ]
            },
            "DropoutWrapper": {
                "__init__": [
                    "self",
                    "cell",
                    "input_keep_prob",
                    "output_keep_prob",
                    "seed"
                ],
                "state_size": [
                    "self"
                ],
                "output_size": [
                    "self"
                ],
                "__call__": [
                    "self",
                    "inputs",
                    "state",
                    "scope"
                ]
            },
            "EmbeddingWrapper": {
                "__init__": [
                    "self",
                    "cell",
                    "embedding_classes",
                    "embedding_size",
                    "initializer"
                ],
                "state_size": [
                    "self"
                ],
                "output_size": [
                    "self"
                ],
                "__call__": [
                    "self",
                    "inputs",
                    "state",
                    "scope"
                ]
            },
            "MultiRNNCell": {
                "__init__": [
                    "self",
                    "cells",
                    "state_is_tuple"
                ],
                "state_size": [
                    "self"
                ],
                "output_size": [
                    "self"
                ],
                "__call__": [
                    "self",
                    "inputs",
                    "state",
                    "scope"
                ]
            },
            "_SlimRNNCell": {
                "__init__": [
                    "self",
                    "cell_fn"
                ],
                "state_size": [
                    "self"
                ],
                "output_size": [
                    "self"
                ],
                "__call__": [
                    "self",
                    "inputs",
                    "state",
                    "scope"
                ]
            }
        },
        "tensorflow.python.ops.data_flow_grad": {
            "_DynamicPartitionGrads": [
                "op"
            ],
            "_DynamicStitchGrads": [
                "op",
                "grad"
            ]
        },
        "tensorflow.python.ops.io_ops": {
            "_save": [
                "filename",
                "tensor_names",
                "tensors",
                "tensor_slices",
                "name"
            ],
            "_restore_slice": [
                "file_pattern",
                "tensor_name",
                "shape_and_slice",
                "tensor_type",
                "name",
                "preferred_shard"
            ],
            "ReaderBase": {
                "__init__": [
                    "self",
                    "reader_ref",
                    "supports_serialize"
                ],
                "reader_ref": [
                    "self"
                ],
                "read": [
                    "self",
                    "queue",
                    "name"
                ],
                "read_up_to": [
                    "self",
                    "queue",
                    "num_records",
                    "name"
                ],
                "num_records_produced": [
                    "self",
                    "name"
                ],
                "num_work_units_completed": [
                    "self",
                    "name"
                ],
                "serialize_state": [
                    "self",
                    "name"
                ],
                "restore_state": [
                    "self",
                    "state",
                    "name"
                ],
                "supports_serialize": [
                    "self"
                ],
                "reset": [
                    "self",
                    "name"
                ]
            },
            "WholeFileReader": {
                "__init__": [
                    "self",
                    "name"
                ]
            },
            "TextLineReader": {
                "__init__": [
                    "self",
                    "skip_header_lines",
                    "name"
                ]
            },
            "FixedLengthRecordReader": {
                "__init__": [
                    "self",
                    "record_bytes",
                    "header_bytes",
                    "footer_bytes",
                    "name"
                ]
            },
            "TFRecordReader": {
                "__init__": [
                    "self",
                    "name",
                    "options"
                ]
            },
            "IdentityReader": {
                "__init__": [
                    "self",
                    "name"
                ]
            }
        },
        "tensorflow.python.ops.session_ops": {
            "get_session_handle": [
                "data",
                "name"
            ],
            "get_session_tensor": [
                "handle",
                "dtype",
                "name"
            ],
            "delete_session_tensor": [
                "handle",
                "name"
            ],
            "_register_handle_feeder": [
                "graph",
                "feeder",
                "dtype"
            ],
            "_get_handle_feeder": [
                "graph",
                "feeder"
            ],
            "_get_handle_reader": [
                "graph",
                "handle",
                "dtype"
            ],
            "_get_handle_mover": [
                "graph",
                "feeder",
                "handle"
            ],
            "_get_handle_deleter": [
                "graph",
                "handle"
            ],
            "TensorHandle": {
                "__init__": [
                    "self",
                    "handle",
                    "dtype",
                    "session"
                ],
                "__del__": [
                    "self"
                ],
                "__str__": [
                    "self"
                ],
                "handle": [
                    "self"
                ],
                "eval": [
                    "self"
                ],
                "delete": [
                    "self"
                ],
                "get_raw_handle": [
                    "self"
                ],
                "_get_device_name": [
                    "handle"
                ],
                "_get_reader_key": [
                    "handle"
                ],
                "_get_deleter_key": [
                    "handle"
                ],
                "_get_mover_key": [
                    "feeder",
                    "handle"
                ]
            }
        },
        "tensorflow.python.ops.nn_ops": {
            "_non_atrous_convolution": [
                "input",
                "filter",
                "padding",
                "data_format",
                "strides",
                "name"
            ],
            "with_space_to_batch": [
                "input",
                "dilation_rate",
                "padding",
                "op",
                "filter_shape",
                "spatial_dims"
            ],
            "_get_strides_and_dilation_rate": [
                "num_spatial_dims",
                "strides",
                "dilation_rate"
            ],
            "convolution": [
                "input",
                "filter",
                "padding",
                "strides",
                "dilation_rate",
                "name",
                "data_format"
            ],
            "pool": [
                "input",
                "window_shape",
                "pooling_type",
                "padding",
                "dilation_rate",
                "strides",
                "name",
                "data_format"
            ],
            "atrous_conv2d": [
                "value",
                "filters",
                "rate",
                "padding",
                "name"
            ],
            "conv2d_transpose": [
                "value",
                "filter",
                "output_shape",
                "strides",
                "padding",
                "data_format",
                "name"
            ],
            "conv3d_transpose": [
                "value",
                "filter",
                "output_shape",
                "strides",
                "padding",
                "name"
            ],
            "bias_add": [
                "value",
                "bias",
                "data_format",
                "name"
            ],
            "bias_add_v1": [
                "value",
                "bias",
                "name"
            ],
            "crelu": [
                "features",
                "name"
            ],
            "relu6": [
                "features",
                "name"
            ],
            "_flatten_outer_dims": [
                "logits"
            ],
            "_softmax": [
                "logits",
                "compute_op",
                "dim",
                "name"
            ],
            "softmax": [
                "logits",
                "dim",
                "name"
            ],
            "log_softmax": [
                "logits",
                "dim",
                "name"
            ],
            "softmax_cross_entropy_with_logits": [
                "logits",
                "labels",
                "dim",
                "name"
            ],
            "sparse_softmax_cross_entropy_with_logits": [
                "logits",
                "labels",
                "name"
            ],
            "avg_pool": [
                "value",
                "ksize",
                "strides",
                "padding",
                "data_format",
                "name"
            ],
            "max_pool": [
                "value",
                "ksize",
                "strides",
                "padding",
                "data_format",
                "name"
            ],
            "_calc_conv_flops": [
                "graph",
                "node"
            ],
            "_calc_depthwise_conv_flops": [
                "graph",
                "node"
            ],
            "_calc_bias_add_flops": [
                "graph",
                "node"
            ],
            "xw_plus_b": [
                "x",
                "weights",
                "biases",
                "name"
            ],
            "xw_plus_b_v1": [
                "x",
                "weights",
                "biases",
                "name"
            ],
            "dropout": [
                "x",
                "keep_prob",
                "noise_shape",
                "seed",
                "name"
            ],
            "top_k": [
                "input",
                "k",
                "sorted",
                "name"
            ],
            "conv1d": [
                "value",
                "filters",
                "stride",
                "padding",
                "use_cudnn_on_gpu",
                "data_format",
                "name"
            ],
            "_calc_dilation2d_flops": [
                "graph",
                "node"
            ],
            "erosion2d": [
                "value",
                "kernel",
                "strides",
                "rates",
                "padding",
                "name"
            ]
        },
        "tensorflow.python.ops.nn_batchnorm_test": {
            "BatchNormalizationTest": {
                "_npBatchNorm": [
                    "self",
                    "x",
                    "m",
                    "v",
                    "beta",
                    "gamma",
                    "epsilon",
                    "scale_after_normalization",
                    "shift_after_normalization"
                ],
                "_opsBatchNorm": [
                    "self",
                    "x",
                    "m",
                    "v",
                    "beta",
                    "gamma",
                    "epsilon",
                    "scale_after_normalization",
                    "shift_after_normalization"
                ],
                "_tfBatchNormV1": [
                    "self",
                    "x",
                    "m",
                    "v",
                    "beta",
                    "gamma",
                    "epsilon",
                    "scale_after_normalization"
                ],
                "_tfBatchNormV1BW": [
                    "self",
                    "x",
                    "m",
                    "v",
                    "beta",
                    "gamma",
                    "epsilon",
                    "scale_after_normalization"
                ],
                "_tfBatchNormV2": [
                    "self",
                    "x",
                    "m",
                    "v",
                    "beta",
                    "gamma",
                    "epsilon",
                    "scale_after_normalization",
                    "shift_after_normalization"
                ],
                "testBatchNorm": [
                    "self"
                ],
                "_testBatchNormGradient": [
                    "self",
                    "param_index",
                    "tag",
                    "scale_after_normalization",
                    "shift_after_normalization",
                    "version",
                    "err_tolerance"
                ],
                "_testBatchNormGradientInAllNeedConfigs": [
                    "self",
                    "param_index",
                    "tag",
                    "err_tolerance"
                ],
                "testBatchNormInputGradient": [
                    "self"
                ],
                "testBatchNormMeanGradient": [
                    "self"
                ],
                "testBatchNormVarianceGradient": [
                    "self"
                ],
                "testBatchNormBetaGradient": [
                    "self"
                ],
                "testBatchNormGammaGradient": [
                    "self"
                ],
                "testBatchNormGradImpl": [
                    "self"
                ],
                "testBatchNormKeepDims": [
                    "self"
                ],
                "_testBatchNormArbitraryShapes": [
                    "self",
                    "x_shape",
                    "param_shape",
                    "atol"
                ],
                "testBatchNormArbitraryShapes": [
                    "self"
                ]
            },
            "SufficientStatisticsTest": {
                "_npSuffStats": [
                    "self",
                    "x",
                    "axes",
                    "shift",
                    "keep_dims"
                ],
                "_opSuffStats": [
                    "self",
                    "x",
                    "axes",
                    "shift",
                    "keep_dims"
                ],
                "_testSuffStats": [
                    "self",
                    "x_shape",
                    "axes",
                    "shift",
                    "keep_dims",
                    "has_shape"
                ],
                "testSuffStats": [
                    "self"
                ]
            },
            "NormalizeMomentsTest": {
                "_npNormalizeMoments": [
                    "self",
                    "counts",
                    "mean_ss",
                    "variance_ss",
                    "shift"
                ],
                "_opNormalizeMoments": [
                    "self",
                    "counts",
                    "mean_ss",
                    "variance_ss",
                    "shift"
                ],
                "_testNormalizeMoments": [
                    "self",
                    "shape",
                    "shift"
                ],
                "testNormalizeMoments": [
                    "self"
                ]
            },
            "MomentsTest": {
                "_unweighted_moments": [
                    "self",
                    "x",
                    "axes",
                    "keep_dims",
                    "extra_out_grads"
                ],
                "RunMomentTestWithDynamicShape": [
                    "self",
                    "shape",
                    "axes",
                    "keep_dims",
                    "dtype"
                ],
                "RunMomentTest": [
                    "self",
                    "shape",
                    "axes",
                    "keep_dims",
                    "dtype"
                ],
                "testBasic": [
                    "self"
                ],
                "testGlobalNormalization": [
                    "self"
                ],
                "testAxes": [
                    "self"
                ],
                "_testGlobalGradient": [
                    "self",
                    "from_y"
                ],
                "testMeanGlobalGradient": [
                    "self"
                ],
                "testVarGlobalGradient": [
                    "self"
                ]
            },
            "WeightedMomentsTest": {
                "_unweighted_moments": [
                    "self",
                    "x",
                    "axes",
                    "keep_dims",
                    "extra_out_grads"
                ],
                "RunMomentTest": [
                    "self",
                    "shape",
                    "axes",
                    "keep_dims",
                    "dtype",
                    "dynshapes"
                ],
                "RunMomentTestWithDynamicShape": [
                    "self",
                    "shape",
                    "axes",
                    "keep_dims",
                    "dtype"
                ],
                "RunWeightedMomentTest": [
                    "self",
                    "shape",
                    "weights_shape",
                    "axes",
                    "keep_dims",
                    "dtype",
                    "dynshapes"
                ]
            }
        },
        "tensorflow.python.ops.gen_linalg_ops": {
            "_batch_cholesky": [
                "input",
                "name"
            ],
            "_batch_cholesky_grad": [
                "l",
                "grad",
                "name"
            ],
            "_batch_matrix_determinant": [
                "input",
                "name"
            ],
            "_batch_matrix_inverse": [
                "input",
                "adjoint",
                "name"
            ],
            "_batch_matrix_solve": [
                "matrix",
                "rhs",
                "adjoint",
                "name"
            ],
            "_batch_matrix_solve_ls": [
                "matrix",
                "rhs",
                "l2_regularizer",
                "fast",
                "name"
            ],
            "_batch_matrix_triangular_solve": [
                "matrix",
                "rhs",
                "lower",
                "adjoint",
                "name"
            ],
            "_batch_self_adjoint_eig": [
                "input",
                "name"
            ],
            "_batch_self_adjoint_eig_v2": [
                "input",
                "compute_v",
                "name"
            ],
            "_batch_svd": [
                "input",
                "compute_uv",
                "full_matrices",
                "name"
            ],
            "cholesky": [
                "input",
                "name"
            ],
            "cholesky_grad": [
                "l",
                "grad",
                "name"
            ],
            "matrix_determinant": [
                "input",
                "name"
            ],
            "matrix_inverse": [
                "input",
                "adjoint",
                "name"
            ],
            "matrix_solve": [
                "matrix",
                "rhs",
                "adjoint",
                "name"
            ],
            "_matrix_solve_ls": [
                "matrix",
                "rhs",
                "l2_regularizer",
                "fast",
                "name"
            ],
            "matrix_triangular_solve": [
                "matrix",
                "rhs",
                "lower",
                "adjoint",
                "name"
            ],
            "_self_adjoint_eig": [
                "input",
                "name"
            ],
            "_self_adjoint_eig_v2": [
                "input",
                "compute_v",
                "name"
            ],
            "_svd": [
                "input",
                "compute_uv",
                "full_matrices",
                "name"
            ],
            "_InitOpDefLibrary": []
        },
        "tensorflow.python.ops.special_math_ops": {
            "lbeta": [
                "x",
                "name"
            ],
            "einsum": [
                "equation"
            ],
            "_einsum_reduction": [
                "t0",
                "t0_axis_labels",
                "t1",
                "t1_axis_labels",
                "axes_to_sum"
            ],
            "_transpose_if_necessary": [
                "tensor",
                "perm"
            ],
            "_reshape_if_necessary": [
                "tensor",
                "new_shape"
            ],
            "_total_size": [
                "shape_values"
            ],
            "_exponential_space_einsum": [
                "equation"
            ]
        },
        "tensorflow.python.ops.image_ops": {},
        "tensorflow.python.ops.numerics": {
            "verify_tensor_all_finite": [
                "t",
                "msg",
                "name"
            ],
            "add_check_numerics_ops": []
        },
        "tensorflow.python.ops.gen_control_flow_ops": {
            "abort": [
                "error_msg",
                "name"
            ],
            "control_trigger": [
                "name"
            ],
            "enter": [
                "data",
                "frame_name",
                "is_constant",
                "parallel_iterations",
                "name"
            ],
            "_exit": [
                "data",
                "name"
            ],
            "loop_cond": [
                "input",
                "name"
            ],
            "_merge": [
                "inputs",
                "name"
            ],
            "next_iteration": [
                "data",
                "name"
            ],
            "no_op": [
                "name"
            ],
            "ref_enter": [
                "data",
                "frame_name",
                "is_constant",
                "parallel_iterations",
                "name"
            ],
            "_ref_exit": [
                "data",
                "name"
            ],
            "_ref_merge": [
                "inputs",
                "name"
            ],
            "ref_next_iteration": [
                "data",
                "name"
            ],
            "ref_select": [
                "index",
                "inputs",
                "name"
            ],
            "ref_switch": [
                "data",
                "pred",
                "name"
            ],
            "_switch": [
                "data",
                "pred",
                "name"
            ],
            "_InitOpDefLibrary": []
        },
        "tensorflow.python.ops.tensor_array_ops": {
            "TensorArray": {
                "__init__": [
                    "self",
                    "dtype",
                    "size",
                    "dynamic_size",
                    "clear_after_read",
                    "tensor_array_name",
                    "handle",
                    "flow",
                    "infer_shape",
                    "name"
                ],
                "flow": [
                    "self"
                ],
                "dtype": [
                    "self"
                ],
                "handle": [
                    "self"
                ],
                "grad": [
                    "self",
                    "source",
                    "flow",
                    "name"
                ],
                "read": [
                    "self",
                    "index",
                    "name"
                ],
                "write": [
                    "self",
                    "index",
                    "value",
                    "name"
                ],
                "pack": [
                    "self",
                    "name"
                ],
                "gather": [
                    "self",
                    "indices",
                    "name"
                ],
                "concat": [
                    "self",
                    "name"
                ],
                "unpack": [
                    "self",
                    "value",
                    "name"
                ],
                "scatter": [
                    "self",
                    "indices",
                    "value",
                    "name"
                ],
                "split": [
                    "self",
                    "value",
                    "lengths",
                    "name"
                ],
                "size": [
                    "self",
                    "name"
                ],
                "close": [
                    "self",
                    "name"
                ]
            }
        },
        "tensorflow.python.ops.gradients_test": {
            "_OpsBetween": [
                "graph",
                "to_ops",
                "from_ops"
            ],
            "GradientsTest": {
                "_OpNames": [
                    "self",
                    "op_list"
                ],
                "_assertOpListEqual": [
                    "self",
                    "ops1",
                    "ops2"
                ],
                "testOpsBetweenSimple": [
                    "self"
                ],
                "testOpsBetweenUnreachable": [
                    "self"
                ],
                "testOpsBetweenCut": [
                    "self"
                ],
                "testOpsBetweenCycle": [
                    "self"
                ],
                "testGradients": [
                    "self"
                ],
                "testUnusedOutput": [
                    "self"
                ],
                "testColocateGradients": [
                    "self"
                ],
                "testColocateGradientsWithAggregation": [
                    "self"
                ],
                "testColocateGradientsWithAggregationInMultipleDevices": [
                    "self"
                ],
                "testBoundaryStop": [
                    "self"
                ],
                "testBoundaryContinue": [
                    "self"
                ],
                "testAggregationMethodAccumulateN": [
                    "self"
                ],
                "testAggregationMethodAddN": [
                    "self"
                ],
                "testAggregationMethodTree": [
                    "self"
                ],
                "testNoGradientForStringOutputs": [
                    "self"
                ],
                "testSingletonIndexedSlices": [
                    "self"
                ]
            },
            "FunctionGradientsTest": {
                "XSquarePlusB": [
                    "cls",
                    "x",
                    "b"
                ],
                "XSquarePlusBGradient": [
                    "cls",
                    "x",
                    "b",
                    "g"
                ],
                "_PythonGradient": [
                    "cls",
                    "op",
                    "grad"
                ],
                "_GetFunc": [
                    "cls"
                ],
                "_GetFuncGradients": [
                    "self",
                    "f",
                    "x_value",
                    "b_value"
                ],
                "testFunctionGradientsBasic": [
                    "self"
                ],
                "testFunctionGradientsComposition": [
                    "self"
                ],
                "testFunctionGradientsWithGradFunc": [
                    "self"
                ],
                "testFunctionGradientWithRegistration": [
                    "self"
                ],
                "testFunctionGradientWithGradFuncAndRegistration": [
                    "self"
                ]
            },
            "StopGradientTest": {
                "testStopGradient": [
                    "self"
                ]
            },
            "HessianVectorProductTest": {
                "testHessianVectorProduct": [
                    "self"
                ]
            },
            "HessianTest": {
                "testHessian1D": [
                    "self"
                ],
                "testHessian1D_multi": [
                    "self"
                ],
                "testHessianInvalidDimension": [
                    "self"
                ]
            },
            "IndexedSlicesToTensorTest": {
                "testIndexedSlicesToTensor": [
                    "self"
                ],
                "testIndexedSlicesToTensorList": [
                    "self"
                ],
                "testInt64Indices": [
                    "self"
                ],
                "testWarnings": [
                    "self"
                ]
            }
        },
        "tensorflow.python.ops.gen_random_ops": {
            "multinomial": [
                "logits",
                "num_samples",
                "seed",
                "seed2",
                "name"
            ],
            "_parameterized_truncated_normal": [
                "shape",
                "means",
                "stdevs",
                "minvals",
                "maxvals",
                "seed",
                "seed2",
                "name"
            ],
            "_random_gamma": [
                "shape",
                "alpha",
                "seed",
                "seed2",
                "name"
            ],
            "_random_shuffle": [
                "value",
                "seed",
                "seed2",
                "name"
            ],
            "_random_standard_normal": [
                "shape",
                "dtype",
                "seed",
                "seed2",
                "name"
            ],
            "_random_uniform": [
                "shape",
                "dtype",
                "seed",
                "seed2",
                "name"
            ],
            "_random_uniform_int": [
                "shape",
                "minval",
                "maxval",
                "seed",
                "seed2",
                "name"
            ],
            "_truncated_normal": [
                "shape",
                "dtype",
                "seed",
                "seed2",
                "name"
            ],
            "_InitOpDefLibrary": []
        },
        "tensorflow.python.ops.partitioned_variables": {
            "variable_axis_size_partitioner": [
                "max_shard_bytes",
                "axis",
                "bytes_per_string_element",
                "max_shards"
            ],
            "min_max_variable_partitioner": [
                "max_partitions",
                "axis",
                "min_slice_size",
                "bytes_per_string_element"
            ],
            "fixed_size_partitioner": [
                "num_shards",
                "axis"
            ],
            "create_partitioned_variables": [
                "shape",
                "slicing",
                "initializer",
                "dtype",
                "trainable",
                "collections",
                "name",
                "reuse"
            ]
        },
        "tensorflow.python.ops.gen_resource_variable_ops": {
            "assign_add_variable_op": [
                "resource",
                "value",
                "name"
            ],
            "assign_variable_op": [
                "resource",
                "value",
                "name"
            ],
            "create_variable_op": [
                "resource",
                "value",
                "name"
            ],
            "read_variable_op": [
                "resource",
                "dtype",
                "name"
            ],
            "resource_gather": [
                "resource",
                "indices",
                "dtype",
                "validate_indices",
                "name"
            ],
            "resource_scatter_add": [
                "resource",
                "indices",
                "updates",
                "name"
            ],
            "var_handle_op": [
                "dtype",
                "shape",
                "container",
                "shared_name",
                "name"
            ],
            "var_is_initialized_op": [
                "resource",
                "name"
            ],
            "_InitOpDefLibrary": []
        },
        "tensorflow.python.ops.split_benchmark": {
            "build_graph": [
                "device",
                "input_shape",
                "output_sizes",
                "axis"
            ],
            "SplitBenchmark": {
                "_run_graph": [
                    "self",
                    "device",
                    "output_shape",
                    "variable",
                    "num_outputs",
                    "axis"
                ],
                "benchmark_split": [
                    "self"
                ]
            }
        },
        "tensorflow.python.ops.candidate_sampling_ops": {
            "uniform_candidate_sampler": [
                "true_classes",
                "num_true",
                "num_sampled",
                "unique",
                "range_max",
                "seed",
                "name"
            ],
            "log_uniform_candidate_sampler": [
                "true_classes",
                "num_true",
                "num_sampled",
                "unique",
                "range_max",
                "seed",
                "name"
            ],
            "learned_unigram_candidate_sampler": [
                "true_classes",
                "num_true",
                "num_sampled",
                "unique",
                "range_max",
                "seed",
                "name"
            ],
            "fixed_unigram_candidate_sampler": [
                "true_classes",
                "num_true",
                "num_sampled",
                "unique",
                "range_max",
                "vocab_file",
                "distortion",
                "num_reserved_ids",
                "num_shards",
                "shard",
                "unigrams",
                "seed",
                "name"
            ],
            "all_candidate_sampler": [
                "true_classes",
                "num_true",
                "num_sampled",
                "unique",
                "seed",
                "name"
            ],
            "compute_accidental_hits": [
                "true_classes",
                "sampled_candidates",
                "num_true",
                "seed",
                "name"
            ]
        },
        "tensorflow.python.ops.state_grad": {},
        "tensorflow.python.ops.resources": {
            "register_resource": [
                "handle",
                "create_op",
                "is_initialized_op",
                "is_shared"
            ],
            "shared_resources": [],
            "local_resources": [],
            "report_uninitialized_resources": [
                "resource_list",
                "name"
            ],
            "initialize_resources": [
                "resource_list",
                "name"
            ]
        },
        "tensorflow.python.ops.resource_variable_ops": {
            "_register_variable_read": [
                "read",
                "collections",
                "trainable"
            ],
            "_dense_var_to_tensor": [
                "var",
                "dtype",
                "name",
                "as_ref"
            ],
            "ResourceVariable": {
                "__init__": [
                    "self",
                    "initial_value",
                    "name",
                    "trainable",
                    "collections",
                    "dtype",
                    "shape"
                ],
                "dtype": [
                    "self"
                ],
                "create": [
                    "self"
                ],
                "handle": [
                    "self"
                ],
                "value": [
                    "self"
                ],
                "op": [
                    "self"
                ],
                "eval": [
                    "self",
                    "session"
                ],
                "read_value": [
                    "self",
                    "collections",
                    "trainable"
                ],
                "sparse_read": [
                    "self",
                    "indices",
                    "collections",
                    "trainable",
                    "name"
                ]
            }
        },
        "tensorflow.python.ops.gen_string_ops": {
            "as_string": [
                "input",
                "precision",
                "scientific",
                "shortest",
                "width",
                "fill",
                "name"
            ],
            "decode_base64": [
                "input",
                "name"
            ],
            "encode_base64": [
                "input",
                "pad",
                "name"
            ],
            "reduce_join": [
                "inputs",
                "reduction_indices",
                "keep_dims",
                "separator",
                "name"
            ],
            "string_join": [
                "inputs",
                "separator",
                "name"
            ],
            "_string_split": [
                "input",
                "delimiter",
                "name"
            ],
            "string_to_hash_bucket": [
                "string_tensor",
                "num_buckets",
                "name"
            ],
            "string_to_hash_bucket_fast": [
                "input",
                "num_buckets",
                "name"
            ],
            "string_to_hash_bucket_strong": [
                "input",
                "num_buckets",
                "key",
                "name"
            ],
            "substr": [
                "input",
                "pos",
                "len",
                "name"
            ],
            "_InitOpDefLibrary": []
        },
        "tensorflow.python.ops.gradient_checker_test": {
            "_bad_grad": [
                "unused_op",
                "grad"
            ],
            "_nan_grad": [
                "unused_op",
                "grad"
            ],
            "GradientCheckerTest": {
                "testAddSimple": [
                    "self"
                ],
                "testAddSimpleGPU": [
                    "self"
                ],
                "testAddCustomized": [
                    "self"
                ],
                "testGather": [
                    "self"
                ],
                "testNestedGather": [
                    "self"
                ],
                "testComplexMul": [
                    "self"
                ],
                "testComplexConj": [
                    "self"
                ],
                "testEmptySucceeds": [
                    "self"
                ],
                "testEmptyFails": [
                    "self"
                ],
                "testNaNGradFails": [
                    "self"
                ]
            },
            "MiniMNISTTest": {
                "_BuildAndTestMiniMNIST": [
                    "self",
                    "param_index",
                    "tag"
                ],
                "testInputGradient": [
                    "self"
                ],
                "testHiddenWeightGradient": [
                    "self"
                ],
                "testHiddenBiasGradient": [
                    "self"
                ],
                "testSoftmaxWeightGradient": [
                    "self"
                ],
                "testSoftmaxBiasGradient": [
                    "self"
                ]
            }
        },
        "tensorflow.python.ops.nn_fused_batchnorm_test": {
            "BatchNormalizationTest": {
                "_inference_ref": [
                    "self",
                    "x",
                    "scale",
                    "offset",
                    "mean",
                    "var",
                    "epsilon",
                    "data_format"
                ],
                "_test_inference": [
                    "self",
                    "x_shape",
                    "scale_shape",
                    "use_gpu",
                    "data_format"
                ],
                "_training_ref": [
                    "self",
                    "x",
                    "scale",
                    "offset",
                    "epsilon",
                    "data_format"
                ],
                "_test_training": [
                    "self",
                    "x_shape",
                    "scale_shape",
                    "use_gpu",
                    "data_format"
                ],
                "_test_gradient": [
                    "self",
                    "x_shape",
                    "scale_shape",
                    "use_gpu",
                    "data_format"
                ],
                "testInference": [
                    "self"
                ],
                "testTraining": [
                    "self"
                ],
                "testBatchNormGrad": [
                    "self"
                ]
            }
        },
        "tensorflow.python.ops.image_ops_impl": {
            "_assert": [
                "cond",
                "ex_type",
                "msg"
            ],
            "_is_tensor": [
                "x"
            ],
            "_ImageDimensions": [
                "image"
            ],
            "_Check3DImage": [
                "image",
                "require_static"
            ],
            "_CheckAtLeast3DImage": [
                "image"
            ],
            "random_flip_up_down": [
                "image",
                "seed"
            ],
            "random_flip_left_right": [
                "image",
                "seed"
            ],
            "flip_left_right": [
                "image"
            ],
            "flip_up_down": [
                "image"
            ],
            "rot90": [
                "image",
                "k",
                "name"
            ],
            "transpose_image": [
                "image"
            ],
            "central_crop": [
                "image",
                "central_fraction"
            ],
            "pad_to_bounding_box": [
                "image",
                "offset_height",
                "offset_width",
                "target_height",
                "target_width"
            ],
            "crop_to_bounding_box": [
                "image",
                "offset_height",
                "offset_width",
                "target_height",
                "target_width"
            ],
            "resize_image_with_crop_or_pad": [
                "image",
                "target_height",
                "target_width"
            ],
            "resize_images": [
                "images",
                "size",
                "method",
                "align_corners"
            ],
            "per_image_standardization": [
                "image"
            ],
            "random_brightness": [
                "image",
                "max_delta",
                "seed"
            ],
            "random_contrast": [
                "image",
                "lower",
                "upper",
                "seed"
            ],
            "adjust_brightness": [
                "image",
                "delta"
            ],
            "adjust_contrast": [
                "images",
                "contrast_factor"
            ],
            "adjust_gamma": [
                "image",
                "gamma",
                "gain"
            ],
            "convert_image_dtype": [
                "image",
                "dtype",
                "saturate",
                "name"
            ],
            "rgb_to_grayscale": [
                "images",
                "name"
            ],
            "grayscale_to_rgb": [
                "images",
                "name"
            ],
            "random_hue": [
                "image",
                "max_delta",
                "seed"
            ],
            "adjust_hue": [
                "image",
                "delta",
                "name"
            ],
            "random_saturation": [
                "image",
                "lower",
                "upper",
                "seed"
            ],
            "adjust_saturation": [
                "image",
                "saturation_factor",
                "name"
            ],
            "ResizeMethod": {}
        },
        "tensorflow.python.ops.logging_ops": {
            "Print": [
                "input_",
                "data",
                "message",
                "first_n",
                "summarize",
                "name"
            ],
            "_PrintGrad": [
                "op"
            ],
            "_Collect": [
                "val",
                "collections",
                "default_collections"
            ],
            "histogram_summary": [
                "tag",
                "values",
                "collections",
                "name"
            ],
            "image_summary": [
                "tag",
                "tensor",
                "max_images",
                "collections",
                "name"
            ],
            "audio_summary": [
                "tag",
                "tensor",
                "sample_rate",
                "max_outputs",
                "collections",
                "name"
            ],
            "merge_summary": [
                "inputs",
                "collections",
                "name"
            ],
            "merge_all_summaries": [
                "key"
            ],
            "get_summary_op": [],
            "scalar_summary": [
                "tags",
                "values",
                "collections",
                "name"
            ]
        },
        "tensorflow.python.ops.linalg_grad": {
            "_MatrixInverseGrad": [
                "op",
                "grad"
            ],
            "_MatrixDeterminantGrad": [
                "op",
                "grad"
            ],
            "_CholeskyGrad": [
                "op",
                "grad"
            ],
            "_MatrixSolveGrad": [
                "op",
                "grad"
            ],
            "_MatrixSolveLsGrad": [
                "op",
                "grad"
            ],
            "_MatrixTriangularSolveGrad": [
                "op",
                "grad"
            ],
            "_SelfAdjointEigV2Grad": [
                "op",
                "grad_e",
                "grad_v"
            ]
        },
        "tensorflow.python.ops.gen_sdca_ops": {
            "_sdca_fprint": [
                "input",
                "name"
            ],
            "_sdca_optimizer": [
                "sparse_example_indices",
                "sparse_feature_indices",
                "sparse_feature_values",
                "dense_features",
                "example_weights",
                "example_labels",
                "sparse_indices",
                "sparse_weights",
                "dense_weights",
                "example_state_data",
                "loss_type",
                "l1",
                "l2",
                "num_loss_partitions",
                "num_inner_iterations",
                "adaptative",
                "name"
            ],
            "_sdca_shrink_l1": [
                "weights",
                "l1",
                "l2",
                "name"
            ],
            "_InitOpDefLibrary": []
        },
        "tensorflow.python.ops.random_ops": {
            "_ShapeTensor": [
                "shape"
            ],
            "random_normal": [
                "shape",
                "mean",
                "stddev",
                "dtype",
                "seed",
                "name"
            ],
            "parameterized_truncated_normal": [
                "shape",
                "means",
                "stddevs",
                "minvals",
                "maxvals",
                "dtype",
                "seed",
                "name"
            ],
            "truncated_normal": [
                "shape",
                "mean",
                "stddev",
                "dtype",
                "seed",
                "name"
            ],
            "random_uniform": [
                "shape",
                "minval",
                "maxval",
                "dtype",
                "seed",
                "name"
            ],
            "random_shuffle": [
                "value",
                "seed",
                "name"
            ],
            "random_crop": [
                "value",
                "size",
                "seed",
                "name"
            ],
            "multinomial": [
                "logits",
                "num_samples",
                "seed",
                "name"
            ],
            "random_gamma": [
                "shape",
                "alpha",
                "beta",
                "dtype",
                "seed",
                "name"
            ]
        },
        "tensorflow.python.ops.nn_grad": {
            "_Conv2DBackpropInputGrad": [
                "op",
                "grad"
            ],
            "_Conv2DBackpropFilterGrad": [
                "op",
                "grad"
            ],
            "_Conv3DGrad": [
                "op",
                "grad"
            ],
            "_Conv3DBackpropInputGrad": [
                "op",
                "grad"
            ],
            "_Conv3DBackpropFilterGrad": [
                "op",
                "grad"
            ],
            "_AvgPool3DGrad": [
                "op",
                "grad"
            ],
            "_MaxPool3DGrad": [
                "op",
                "grad"
            ],
            "_SoftmaxGrad": [
                "op",
                "grad_softmax"
            ],
            "_LogSoftmaxGrad": [
                "op",
                "grad"
            ],
            "_BiasAddGrad": [
                "op",
                "received_grad"
            ],
            "_BiasAddGradGrad": [
                "op",
                "received_grad"
            ],
            "_BiasAddGradV1": [
                "unused_bias_op",
                "received_grad"
            ],
            "_ReluGrad": [
                "op",
                "grad"
            ],
            "_EluGradGrad": [
                "op",
                "grad"
            ],
            "_Relu6Grad": [
                "op",
                "grad"
            ],
            "_EluGrad": [
                "op",
                "grad"
            ],
            "_SoftplusGrad": [
                "op",
                "grad"
            ],
            "_SoftsignGrad": [
                "op",
                "grad"
            ],
            "_ReluGradGrad": [
                "op",
                "grad"
            ],
            "_BroadcastMul": [
                "vec",
                "mat"
            ],
            "_SoftmaxCrossEntropyWithLogitsGrad": [
                "op",
                "grad_0",
                "_"
            ],
            "_SparseSoftmaxCrossEntropyWithLogitsGrad": [
                "op",
                "grad_0",
                "_"
            ],
            "_Conv2DGrad": [
                "op",
                "grad"
            ],
            "_DepthwiseConv2dNativeGrad": [
                "op",
                "grad"
            ],
            "_Dilation2DGrad": [
                "op",
                "grad"
            ],
            "_LRNGrad": [
                "op",
                "grad"
            ],
            "_AvgPoolGrad": [
                "op",
                "grad"
            ],
            "_MaxPoolGrad": [
                "op",
                "grad"
            ],
            "_FractionalMaxPoolGrad": [
                "op",
                "grad_0",
                "unused_grad_1",
                "unused_grad_2"
            ],
            "_FractionalAvgPoolGrad": [
                "op",
                "grad_0",
                "unused_grad_1",
                "unused_grad_2"
            ],
            "_BatchNormWithGlobalNormalizationGrad": [
                "op",
                "grad"
            ],
            "_FusedBatchNormGrad": [
                "op"
            ],
            "_L2LossGrad": [
                "op",
                "grad"
            ],
            "_TopKGrad": [
                "op",
                "grad",
                "_"
            ]
        },
        "tensorflow.python.ops.linalg_ops": {
            "cholesky_solve": [
                "chol",
                "rhs",
                "name"
            ],
            "eye": [
                "num_rows",
                "num_columns",
                "batch_shape",
                "dtype",
                "name"
            ],
            "matrix_solve_ls": [
                "matrix",
                "rhs",
                "l2_regularizer",
                "fast",
                "name"
            ],
            "self_adjoint_eig": [
                "tensor",
                "name"
            ],
            "self_adjoint_eigvals": [
                "tensor",
                "name"
            ],
            "svd": [
                "tensor",
                "full_matrices",
                "compute_uv",
                "name"
            ]
        },
        "tensorflow.python.ops.histogram_ops": {
            "histogram_fixed_width": [
                "values",
                "value_range",
                "nbins",
                "dtype",
                "name"
            ]
        },
        "tensorflow.python.ops.image_grad": {
            "_ResizeNearestNeighborGrad": [
                "op",
                "grad"
            ],
            "_ResizeBilinearGrad": [
                "op",
                "grad"
            ],
            "_CropAndResizeGrad": [
                "op",
                "grad"
            ]
        },
        "tensorflow.python.ops.control_flow_grad": {
            "_SwitchGrad": [
                "op"
            ],
            "_MergeGrad": [
                "op",
                "grad",
                "_"
            ],
            "_RefMergeGrad": [
                "op",
                "grad",
                "_"
            ],
            "_ExitGrad": [
                "op",
                "grad"
            ],
            "_NextIterationGrad": [
                "_",
                "grad"
            ],
            "_RefNextIterationGrad": [
                "_",
                "grad"
            ],
            "_EnterGrad": [
                "op",
                "grad"
            ],
            "_RefEnterGrad": [
                "op",
                "grad"
            ],
            "_LoopCondGrad": [
                "_"
            ]
        },
        "tensorflow.python.ops.script_ops": {
            "py_func": [
                "func",
                "inp",
                "Tout",
                "stateful",
                "name"
            ],
            "FuncRegistry": {
                "__init__": [
                    "self"
                ],
                "insert": [
                    "self",
                    "func"
                ],
                "remove": [
                    "self",
                    "token"
                ],
                "_convert": [
                    "value"
                ],
                "__call__": [
                    "self",
                    "token",
                    "args"
                ],
                "size": [
                    "self"
                ],
                "_next_unique_token": [
                    "self"
                ]
            },
            "CleanupFunc": {
                "__init__": [
                    "self",
                    "token"
                ],
                "__del__": [
                    "self"
                ]
            }
        },
        "tensorflow.python.ops.array_grad": {
            "_PackGrad": [
                "op",
                "grad"
            ],
            "_UnpackGrad": [
                "op"
            ],
            "_ConcatGrad": [
                "op",
                "grad"
            ],
            "_SliceGrad": [
                "op",
                "grad"
            ],
            "_StridedSliceGrad": [
                "op",
                "grad"
            ],
            "_StridedSliceGradGrad": [
                "op",
                "grad"
            ],
            "_SplitGrad": [
                "op"
            ],
            "_SplitVGrad": [
                "op"
            ],
            "_DiagGrad": [
                "_",
                "grad"
            ],
            "_DiagPartGrad": [
                "_",
                "grad"
            ],
            "_MatrixDiagGrad": [
                "_",
                "grad"
            ],
            "_MatrixDiagPartGrad": [
                "op",
                "grad"
            ],
            "_MatrixSetDiagGrad": [
                "op",
                "grad"
            ],
            "_MatrixBandPartGrad": [
                "op",
                "grad"
            ],
            "_FillGrad": [
                "_",
                "grad"
            ],
            "_GatherGrad": [
                "op",
                "grad"
            ],
            "_GatherNdGrad": [
                "op",
                "grad"
            ],
            "_CheckNumericsGrad": [
                "_",
                "grad"
            ],
            "_IdGrad": [
                "_",
                "grad"
            ],
            "_RefIdGrad": [
                "_",
                "grad"
            ],
            "_ReshapeGrad": [
                "op",
                "grad"
            ],
            "_ReshapeToInput": [
                "op",
                "grad"
            ],
            "_ExpandDimsGrad": [
                "op",
                "grad"
            ],
            "_SqueezeGrad": [
                "op",
                "grad"
            ],
            "_TransposeGrad": [
                "op",
                "grad"
            ],
            "_TileGrad": [
                "op",
                "grad"
            ],
            "_PadGrad": [
                "op",
                "grad"
            ],
            "_ReverseSequenceGrad": [
                "op",
                "grad"
            ],
            "_ReverseGrad": [
                "op",
                "grad"
            ],
            "_ReverseV2Grad": [
                "op",
                "grad"
            ],
            "_SpaceToBatchGrad": [
                "op",
                "grad"
            ],
            "_SpaceToBatchNDGrad": [
                "op",
                "grad"
            ],
            "_BatchToSpaceGrad": [
                "op",
                "grad"
            ],
            "_BatchToSpaceNDGrad": [
                "op",
                "grad"
            ],
            "_SpaceToDepthGrad": [
                "op",
                "grad"
            ],
            "_DepthToSpaceGrad": [
                "op",
                "grad"
            ],
            "_MirrorPadGrad": [
                "op",
                "grad"
            ],
            "_MirrorPadGradGrad": [
                "op",
                "grad"
            ],
            "_QuantizeAndDequantizeGrad": [
                "_",
                "grad"
            ],
            "_ExtractImagePatchesGrad": [
                "op",
                "grad"
            ],
            "_ScatterNdGrad": [
                "op",
                "grad"
            ]
        },
        "tensorflow.python.ops.parsing_ops": {
            "_features_to_raw_params": [
                "features",
                "types"
            ],
            "parse_example": [
                "serialized",
                "features",
                "name",
                "example_names"
            ],
            "_parse_example_raw": [
                "serialized",
                "names",
                "sparse_keys",
                "sparse_types",
                "dense_keys",
                "dense_types",
                "dense_defaults",
                "dense_shapes",
                "name"
            ],
            "parse_single_example": [
                "serialized",
                "features",
                "name",
                "example_names"
            ],
            "_parse_single_example_raw": [
                "serialized",
                "names",
                "sparse_keys",
                "sparse_types",
                "dense_keys",
                "dense_types",
                "dense_defaults",
                "dense_shapes",
                "name"
            ],
            "parse_single_sequence_example": [
                "serialized",
                "context_features",
                "sequence_features",
                "example_name",
                "name"
            ],
            "_parse_single_sequence_example_raw": [
                "serialized",
                "context_sparse_keys",
                "context_sparse_types",
                "context_dense_keys",
                "context_dense_types",
                "context_dense_defaults",
                "context_dense_shapes",
                "feature_list_sparse_keys",
                "feature_list_sparse_types",
                "feature_list_dense_keys",
                "feature_list_dense_types",
                "feature_list_dense_shapes",
                "feature_list_dense_defaults",
                "debug_name",
                "name"
            ],
            "VarLenFeature": {},
            "FixedLenFeature": {},
            "FixedLenSequenceFeature": {}
        },
        "tensorflow.python.ops.gen_parsing_ops": {
            "decode_csv": [
                "records",
                "record_defaults",
                "field_delim",
                "name"
            ],
            "decode_json_example": [
                "json_examples",
                "name"
            ],
            "decode_raw": [
                "bytes",
                "out_type",
                "little_endian",
                "name"
            ],
            "_parse_example": [
                "serialized",
                "names",
                "sparse_keys",
                "dense_keys",
                "dense_defaults",
                "sparse_types",
                "dense_shapes",
                "name"
            ],
            "_parse_single_sequence_example": [
                "serialized",
                "feature_list_dense_missing_assumed_empty",
                "context_sparse_keys",
                "context_dense_keys",
                "feature_list_sparse_keys",
                "feature_list_dense_keys",
                "context_dense_defaults",
                "debug_name",
                "context_sparse_types",
                "feature_list_dense_types",
                "context_dense_shapes",
                "feature_list_sparse_types",
                "feature_list_dense_shapes",
                "name"
            ],
            "parse_tensor": [
                "serialized",
                "out_type",
                "name"
            ],
            "string_to_number": [
                "string_tensor",
                "out_type",
                "name"
            ],
            "_InitOpDefLibrary": []
        },
        "tensorflow.python.ops.sdca_ops": {},
        "tensorflow.python.ops.gen_data_flow_ops": {
            "accumulator_apply_gradient": [
                "handle",
                "local_step",
                "gradient",
                "name"
            ],
            "accumulator_num_accumulated": [
                "handle",
                "name"
            ],
            "accumulator_set_global_step": [
                "handle",
                "new_global_step",
                "name"
            ],
            "accumulator_take_gradient": [
                "handle",
                "num_required",
                "dtype",
                "name"
            ],
            "_barrier": [
                "component_types",
                "shapes",
                "capacity",
                "container",
                "shared_name",
                "name"
            ],
            "_barrier_close": [
                "handle",
                "cancel_pending_enqueues",
                "name"
            ],
            "_barrier_incomplete_size": [
                "handle",
                "name"
            ],
            "_barrier_insert_many": [
                "handle",
                "keys",
                "values",
                "component_index",
                "name"
            ],
            "_barrier_ready_size": [
                "handle",
                "name"
            ],
            "_barrier_take_many": [
                "handle",
                "num_elements",
                "component_types",
                "allow_small_batch",
                "wait_for_incomplete",
                "timeout_ms",
                "name"
            ],
            "conditional_accumulator": [
                "dtype",
                "shape",
                "container",
                "shared_name",
                "name"
            ],
            "_delete_session_tensor": [
                "handle",
                "name"
            ],
            "dynamic_partition": [
                "data",
                "partitions",
                "num_partitions",
                "name"
            ],
            "dynamic_stitch": [
                "indices",
                "data",
                "name"
            ],
            "_fifo_queue": [
                "component_types",
                "shapes",
                "capacity",
                "container",
                "shared_name",
                "name"
            ],
            "_get_session_handle": [
                "value",
                "name"
            ],
            "_get_session_tensor": [
                "handle",
                "dtype",
                "name"
            ],
            "_hash_table": [
                "key_dtype",
                "value_dtype",
                "container",
                "shared_name",
                "use_node_name_sharing",
                "name"
            ],
            "_initialize_table": [
                "table_handle",
                "keys",
                "values",
                "name"
            ],
            "_initialize_table_from_text_file": [
                "table_handle",
                "filename",
                "key_index",
                "value_index",
                "vocab_size",
                "delimiter",
                "name"
            ],
            "_lookup_table_export": [
                "table_handle",
                "Tkeys",
                "Tvalues",
                "name"
            ],
            "_lookup_table_find": [
                "table_handle",
                "keys",
                "default_value",
                "name"
            ],
            "_lookup_table_import": [
                "table_handle",
                "keys",
                "values",
                "name"
            ],
            "_lookup_table_insert": [
                "table_handle",
                "keys",
                "values",
                "name"
            ],
            "_lookup_table_size": [
                "table_handle",
                "name"
            ],
            "_mutable_dense_hash_table": [
                "empty_key",
                "value_dtype",
                "container",
                "shared_name",
                "use_node_name_sharing",
                "value_shape",
                "initial_num_buckets",
                "max_load_factor",
                "name"
            ],
            "_mutable_hash_table": [
                "key_dtype",
                "value_dtype",
                "container",
                "shared_name",
                "use_node_name_sharing",
                "name"
            ],
            "_mutable_hash_table_of_tensors": [
                "key_dtype",
                "value_dtype",
                "container",
                "shared_name",
                "use_node_name_sharing",
                "value_shape",
                "name"
            ],
            "_padding_fifo_queue": [
                "component_types",
                "shapes",
                "capacity",
                "container",
                "shared_name",
                "name"
            ],
            "_priority_queue": [
                "shapes",
                "component_types",
                "capacity",
                "container",
                "shared_name",
                "name"
            ],
            "_queue_close": [
                "handle",
                "cancel_pending_enqueues",
                "name"
            ],
            "_queue_dequeue": [
                "handle",
                "component_types",
                "timeout_ms",
                "name"
            ],
            "_queue_dequeue_many": [
                "handle",
                "n",
                "component_types",
                "timeout_ms",
                "name"
            ],
            "_queue_dequeue_up_to": [
                "handle",
                "n",
                "component_types",
                "timeout_ms",
                "name"
            ],
            "_queue_enqueue": [
                "handle",
                "components",
                "timeout_ms",
                "name"
            ],
            "_queue_enqueue_many": [
                "handle",
                "components",
                "timeout_ms",
                "name"
            ],
            "_queue_size": [
                "handle",
                "name"
            ],
            "_random_shuffle_queue": [
                "component_types",
                "shapes",
                "capacity",
                "min_after_dequeue",
                "seed",
                "seed2",
                "container",
                "shared_name",
                "name"
            ],
            "sparse_accumulator_apply_gradient": [
                "handle",
                "local_step",
                "gradient_indices",
                "gradient_values",
                "gradient_shape",
                "has_known_shape",
                "name"
            ],
            "sparse_accumulator_take_gradient": [
                "handle",
                "num_required",
                "dtype",
                "name"
            ],
            "sparse_conditional_accumulator": [
                "dtype",
                "shape",
                "container",
                "shared_name",
                "name"
            ],
            "_stack": [
                "elem_type",
                "stack_name",
                "name"
            ],
            "_stack_close": [
                "handle",
                "name"
            ],
            "_stack_pop": [
                "handle",
                "elem_type",
                "name"
            ],
            "_stack_push": [
                "handle",
                "elem",
                "swap_memory",
                "name"
            ],
            "_tensor_array": [
                "size",
                "dtype",
                "dynamic_size",
                "clear_after_read",
                "tensor_array_name",
                "name"
            ],
            "_tensor_array_close": [
                "handle",
                "name"
            ],
            "_tensor_array_close_v2": [
                "handle",
                "name"
            ],
            "_tensor_array_concat": [
                "handle",
                "flow_in",
                "dtype",
                "element_shape_except0",
                "name"
            ],
            "_tensor_array_concat_v2": [
                "handle",
                "flow_in",
                "dtype",
                "element_shape_except0",
                "name"
            ],
            "_tensor_array_gather": [
                "handle",
                "indices",
                "flow_in",
                "dtype",
                "element_shape",
                "name"
            ],
            "_tensor_array_gather_v2": [
                "handle",
                "indices",
                "flow_in",
                "dtype",
                "element_shape",
                "name"
            ],
            "_tensor_array_grad": [
                "handle",
                "flow_in",
                "source",
                "name"
            ],
            "_tensor_array_grad_v2": [
                "handle",
                "flow_in",
                "source",
                "name"
            ],
            "_tensor_array_pack": [
                "handle",
                "flow_in",
                "dtype",
                "element_shape",
                "name"
            ],
            "_tensor_array_read": [
                "handle",
                "index",
                "flow_in",
                "dtype",
                "name"
            ],
            "_tensor_array_read_v2": [
                "handle",
                "index",
                "flow_in",
                "dtype",
                "name"
            ],
            "_tensor_array_scatter": [
                "handle",
                "indices",
                "value",
                "flow_in",
                "name"
            ],
            "_tensor_array_scatter_v2": [
                "handle",
                "indices",
                "value",
                "flow_in",
                "name"
            ],
            "_tensor_array_size": [
                "handle",
                "flow_in",
                "name"
            ],
            "_tensor_array_size_v2": [
                "handle",
                "flow_in",
                "name"
            ],
            "_tensor_array_split": [
                "handle",
                "value",
                "lengths",
                "flow_in",
                "name"
            ],
            "_tensor_array_split_v2": [
                "handle",
                "value",
                "lengths",
                "flow_in",
                "name"
            ],
            "_tensor_array_unpack": [
                "handle",
                "value",
                "flow_in",
                "name"
            ],
            "_tensor_array_v2": [
                "size",
                "dtype",
                "dynamic_size",
                "clear_after_read",
                "tensor_array_name",
                "name"
            ],
            "_tensor_array_write": [
                "handle",
                "index",
                "value",
                "flow_in",
                "name"
            ],
            "_tensor_array_write_v2": [
                "handle",
                "index",
                "value",
                "flow_in",
                "name"
            ],
            "_InitOpDefLibrary": []
        },
        "tensorflow.python.ops.quantized_conv_ops_test": {
            "Conv2DTest": {
                "__init__": [
                    "self",
                    "method_name"
                ],
                "_VerifyValues": [
                    "self",
                    "tensor_in_sizes",
                    "filter_in_sizes",
                    "stride",
                    "padding",
                    "expected"
                ],
                "_assertQuantizedArrayEquals": [
                    "self",
                    "iarray1",
                    "iarray2"
                ],
                "_QuantizedOutputToFloat": [
                    "self",
                    "quantized",
                    "quantized_min",
                    "quantized_max"
                ],
                "testConv2D1x1Filter": [
                    "self"
                ],
                "testConv2D2x2Filter": [
                    "self"
                ],
                "testConv2D1x2Filter": [
                    "self"
                ],
                "testConv2D2x2FilterStride2": [
                    "self"
                ],
                "testConv2D2x2FilterStride2Same": [
                    "self"
                ]
            }
        },
        "tensorflow.python.ops.sparse_ops": {
            "_convert_to_sparse_tensor": [
                "sp_input"
            ],
            "_convert_to_sparse_tensors": [
                "sp_inputs"
            ],
            "sparse_concat": [
                "concat_dim",
                "sp_inputs",
                "name",
                "expand_nonconcat_dim"
            ],
            "sparse_add": [
                "a",
                "b",
                "thresh"
            ],
            "sparse_dense_cwise_add": [
                "sp_t",
                "dense_t"
            ],
            "sparse_reorder": [
                "sp_input",
                "name"
            ],
            "sparse_reshape": [
                "sp_input",
                "shape",
                "name"
            ],
            "sparse_split": [
                "split_dim",
                "num_split",
                "sp_input",
                "name"
            ],
            "sparse_to_dense": [
                "sparse_indices",
                "output_shape",
                "sparse_values",
                "default_value",
                "validate_indices",
                "name"
            ],
            "sparse_reduce_sum": [
                "sp_input",
                "axis",
                "keep_dims",
                "reduction_axes"
            ],
            "sparse_reduce_sum_sparse": [
                "sp_input",
                "axis",
                "keep_dims",
                "reduction_axes"
            ],
            "sparse_tensor_to_dense": [
                "sp_input",
                "default_value",
                "validate_indices",
                "name"
            ],
            "sparse_to_indicator": [
                "sp_input",
                "vocab_size",
                "name"
            ],
            "sparse_merge": [
                "sp_ids",
                "sp_values",
                "vocab_size",
                "name",
                "already_sorted"
            ],
            "sparse_retain": [
                "sp_input",
                "to_retain"
            ],
            "sparse_reset_shape": [
                "sp_input",
                "new_shape"
            ],
            "sparse_fill_empty_rows": [
                "sp_input",
                "default_value",
                "name"
            ],
            "serialize_sparse": [
                "sp_input",
                "name"
            ],
            "serialize_many_sparse": [
                "sp_input",
                "name"
            ],
            "deserialize_many_sparse": [
                "serialized_sparse",
                "dtype",
                "rank",
                "name"
            ],
            "sparse_tensor_dense_matmul": [
                "sp_a",
                "b",
                "adjoint_a",
                "adjoint_b",
                "name"
            ],
            "sparse_softmax": [
                "sp_input",
                "name"
            ],
            "sparse_maximum": [
                "sp_a",
                "sp_b",
                "name"
            ],
            "sparse_minimum": [
                "sp_a",
                "sp_b",
                "name"
            ],
            "sparse_transpose": [
                "sp_input",
                "perm",
                "name"
            ],
            "_add_sparse_to_tensors_map": [
                "sp_input",
                "container",
                "shared_name",
                "name"
            ],
            "_add_many_sparse_to_tensors_map": [
                "sp_input",
                "container",
                "shared_name",
                "name"
            ],
            "_take_many_sparse_from_tensors_map": [
                "sparse_map_op",
                "sparse_handles",
                "rank",
                "name"
            ]
        },
        "tensorflow.python.ops.gen_ctc_ops": {
            "_ctc_beam_search_decoder": [
                "inputs",
                "sequence_length",
                "beam_width",
                "top_paths",
                "merge_repeated",
                "name"
            ],
            "_ctc_greedy_decoder": [
                "inputs",
                "sequence_length",
                "merge_repeated",
                "name"
            ],
            "_ctc_loss": [
                "inputs",
                "labels_indices",
                "labels_values",
                "sequence_length",
                "preprocess_collapse_repeated",
                "ctc_merge_repeated",
                "name"
            ],
            "_InitOpDefLibrary": []
        },
        "tensorflow.python.ops.dequantize_op_test": {
            "DequantizeOpTest": {
                "__init__": [
                    "self",
                    "method_name"
                ],
                "_testDequantizeOp": [
                    "self",
                    "inputs",
                    "min_range",
                    "max_range",
                    "dtype"
                ],
                "testBasicQuint8": [
                    "self"
                ],
                "testBasicQint8": [
                    "self"
                ]
            }
        },
        "tensorflow.python.ops.seq2seq": {
            "_extract_argmax_and_embed": [
                "embedding",
                "output_projection",
                "update_embedding"
            ],
            "rnn_decoder": [
                "decoder_inputs",
                "initial_state",
                "cell",
                "loop_function",
                "scope"
            ],
            "basic_rnn_seq2seq": [
                "encoder_inputs",
                "decoder_inputs",
                "cell",
                "dtype",
                "scope"
            ],
            "tied_rnn_seq2seq": [
                "encoder_inputs",
                "decoder_inputs",
                "cell",
                "loop_function",
                "dtype",
                "scope"
            ],
            "embedding_rnn_decoder": [
                "decoder_inputs",
                "initial_state",
                "cell",
                "num_symbols",
                "embedding_size",
                "output_projection",
                "feed_previous",
                "update_embedding_for_previous",
                "scope"
            ],
            "embedding_rnn_seq2seq": [
                "encoder_inputs",
                "decoder_inputs",
                "cell",
                "num_encoder_symbols",
                "num_decoder_symbols",
                "embedding_size",
                "output_projection",
                "feed_previous",
                "dtype",
                "scope"
            ],
            "embedding_tied_rnn_seq2seq": [
                "encoder_inputs",
                "decoder_inputs",
                "cell",
                "num_symbols",
                "embedding_size",
                "num_decoder_symbols",
                "output_projection",
                "feed_previous",
                "dtype",
                "scope"
            ],
            "attention_decoder": [
                "decoder_inputs",
                "initial_state",
                "attention_states",
                "cell",
                "output_size",
                "num_heads",
                "loop_function",
                "dtype",
                "scope",
                "initial_state_attention"
            ],
            "embedding_attention_decoder": [
                "decoder_inputs",
                "initial_state",
                "attention_states",
                "cell",
                "num_symbols",
                "embedding_size",
                "num_heads",
                "output_size",
                "output_projection",
                "feed_previous",
                "update_embedding_for_previous",
                "dtype",
                "scope",
                "initial_state_attention"
            ],
            "embedding_attention_seq2seq": [
                "encoder_inputs",
                "decoder_inputs",
                "cell",
                "num_encoder_symbols",
                "num_decoder_symbols",
                "embedding_size",
                "num_heads",
                "output_projection",
                "feed_previous",
                "dtype",
                "scope",
                "initial_state_attention"
            ],
            "one2many_rnn_seq2seq": [
                "encoder_inputs",
                "decoder_inputs_dict",
                "cell",
                "num_encoder_symbols",
                "num_decoder_symbols_dict",
                "embedding_size",
                "feed_previous",
                "dtype",
                "scope"
            ],
            "sequence_loss_by_example": [
                "logits",
                "targets",
                "weights",
                "average_across_timesteps",
                "softmax_loss_function",
                "name"
            ],
            "sequence_loss": [
                "logits",
                "targets",
                "weights",
                "average_across_timesteps",
                "average_across_batch",
                "softmax_loss_function",
                "name"
            ],
            "model_with_buckets": [
                "encoder_inputs",
                "decoder_inputs",
                "targets",
                "weights",
                "buckets",
                "seq2seq",
                "softmax_loss_function",
                "per_example_loss",
                "name"
            ]
        },
        "tensorflow.python.ops.image_grad_test": {
            "ResizeNearestNeighborOpTest": {
                "testShapeIsCorrectAfterOp": [
                    "self"
                ],
                "testGradFromResizeToLargerInBothDims": [
                    "self"
                ],
                "testGradFromResizeToSmallerInBothDims": [
                    "self"
                ],
                "testCompareGpuVsCpu": [
                    "self"
                ]
            },
            "ResizeBilinearOpTest": {
                "testShapeIsCorrectAfterOp": [
                    "self"
                ],
                "testGradFromResizeToLargerInBothDims": [
                    "self"
                ],
                "testGradFromResizeToSmallerInBothDims": [
                    "self"
                ],
                "testGradOnUnsupportedType": [
                    "self"
                ],
                "testCompareGpuVsCpu": [
                    "self"
                ]
            },
            "CropAndResizeOpTest": {
                "testShapeIsCorrectAfterOp": [
                    "self"
                ],
                "_randomUniformAvoidAnchors": [
                    "self",
                    "low",
                    "high",
                    "anchors",
                    "radius",
                    "num_samples"
                ],
                "testGradRandomBoxes": [
                    "self"
                ]
            }
        },
        "tensorflow.python.ops.standard_ops": {},
        "tensorflow.python.ops.tensor_array_grad": {
            "_GetGradSource": [
                "op_or_tensor"
            ],
            "_TensorArrayReadGrad": [
                "op",
                "grad"
            ],
            "_TensorArrayWriteGrad": [
                "op",
                "flow"
            ],
            "_TensorArrayGatherGrad": [
                "op",
                "grad"
            ],
            "_TensorArrayScatterGrad": [
                "op",
                "flow"
            ],
            "_TensorArrayConcatGrad": [
                "op",
                "grad",
                "unused_lengths_grad"
            ],
            "_TensorArraySplitGrad": [
                "op",
                "flow"
            ]
        },
        "tensorflow.python.ops.gradients_impl": {
            "_IndexedSlicesToTensor": [
                "value",
                "dtype",
                "name",
                "as_ref"
            ],
            "_MarkReachedOps": [
                "from_ops",
                "reached_ops"
            ],
            "_GatherInputs": [
                "to_ops",
                "reached_ops"
            ],
            "_PendingCount": [
                "graph",
                "to_ops",
                "from_ops",
                "colocate_gradients_with_ops"
            ],
            "_AsList": [
                "x"
            ],
            "_DefaultGradYs": [
                "grad_ys",
                "ys",
                "colocate_gradients_with_ops"
            ],
            "_IsTrainable": [
                "tensor"
            ],
            "_VerifyGeneratedGradients": [
                "grads",
                "op"
            ],
            "_StopOps": [
                "from_ops",
                "pending_count"
            ],
            "_maybe_colocate_with": [
                "op",
                "colocate_gradients_with_ops"
            ],
            "_SymGrad": [
                "op",
                "out_grads"
            ],
            "gradients": [
                "ys",
                "xs",
                "grad_ys",
                "name",
                "colocate_gradients_with_ops",
                "gate_gradients",
                "aggregation_method"
            ],
            "_HasAnyNotNoneGrads": [
                "grads",
                "op"
            ],
            "_UpdatePendingAndEnqueueReady": [
                "grads",
                "op",
                "queue",
                "pending_count",
                "loop_state"
            ],
            "_SetGrad": [
                "grads",
                "t",
                "grad"
            ],
            "_GetGrad": [
                "grads",
                "t"
            ],
            "_GetGrads": [
                "grads",
                "op"
            ],
            "_HandleNestedIndexedSlices": [
                "grad"
            ],
            "_AccumulatorShape": [
                "inputs"
            ],
            "_LogOpGradients": [
                "op",
                "out_grads",
                "in_grads"
            ],
            "_MultiDeviceAddN": [
                "tensor_list"
            ],
            "_AggregatedGrads": [
                "grads",
                "op",
                "loop_state",
                "aggregation_method"
            ],
            "_hessian_vector_product": [
                "ys",
                "xs",
                "v"
            ],
            "hessians": [
                "ys",
                "xs",
                "name",
                "colocate_gradients_with_ops",
                "gate_gradients",
                "aggregation_method"
            ],
            "AggregationMethod": {}
        },
        "tensorflow.python.ops.math_grad_test": {
            "SquaredDifferenceOpTest": {
                "_testGrad": [
                    "self",
                    "left_shape",
                    "right_shape"
                ],
                "testGrad": [
                    "self"
                ]
            },
            "AbsOpTest": {
                "_biasedRandN": [
                    "self",
                    "shape",
                    "bias",
                    "sigma"
                ],
                "_testGrad": [
                    "self",
                    "shape",
                    "dtype",
                    "max_error",
                    "bias",
                    "sigma"
                ],
                "testComplexAbs": [
                    "self"
                ]
            },
            "MinOrMaxGradientTest": {
                "testMinGradient": [
                    "self"
                ],
                "testMaxGradient": [
                    "self"
                ]
            },
            "SegmentMinOrMaxGradientTest": {
                "testSegmentMinGradient": [
                    "self"
                ],
                "testSegmentMaxGradient": [
                    "self"
                ],
                "testSegmentMinGradientWithTies": [
                    "self"
                ],
                "testSegmentMaxGradientWithTies": [
                    "self"
                ]
            }
        },
        "tensorflow.python.ops.gen_state_ops": {
            "assign": [
                "ref",
                "value",
                "validate_shape",
                "use_locking",
                "name"
            ],
            "assign_add": [
                "ref",
                "value",
                "use_locking",
                "name"
            ],
            "assign_sub": [
                "ref",
                "value",
                "use_locking",
                "name"
            ],
            "count_up_to": [
                "ref",
                "limit",
                "name"
            ],
            "_destroy_temporary_variable": [
                "ref",
                "var_name",
                "name"
            ],
            "is_variable_initialized": [
                "ref",
                "name"
            ],
            "scatter_add": [
                "ref",
                "indices",
                "updates",
                "use_locking",
                "name"
            ],
            "scatter_div": [
                "ref",
                "indices",
                "updates",
                "use_locking",
                "name"
            ],
            "scatter_mul": [
                "ref",
                "indices",
                "updates",
                "use_locking",
                "name"
            ],
            "scatter_nd_add": [
                "ref",
                "indices",
                "updates",
                "use_locking",
                "name"
            ],
            "scatter_nd_sub": [
                "ref",
                "indices",
                "updates",
                "use_locking",
                "name"
            ],
            "scatter_nd_update": [
                "ref",
                "indices",
                "updates",
                "use_locking",
                "name"
            ],
            "scatter_sub": [
                "ref",
                "indices",
                "updates",
                "use_locking",
                "name"
            ],
            "scatter_update": [
                "ref",
                "indices",
                "updates",
                "use_locking",
                "name"
            ],
            "_temporary_variable": [
                "shape",
                "dtype",
                "var_name",
                "name"
            ],
            "_variable": [
                "shape",
                "dtype",
                "container",
                "shared_name",
                "name"
            ],
            "_InitOpDefLibrary": []
        },
        "tensorflow.python.ops.gen_io_ops": {
            "_fixed_length_record_reader": [
                "record_bytes",
                "header_bytes",
                "footer_bytes",
                "container",
                "shared_name",
                "name"
            ],
            "_identity_reader": [
                "container",
                "shared_name",
                "name"
            ],
            "matching_files": [
                "pattern",
                "name"
            ],
            "merge_v2_checkpoints": [
                "checkpoint_prefixes",
                "destination_prefix",
                "delete_old_dirs",
                "name"
            ],
            "read_file": [
                "filename",
                "name"
            ],
            "_reader_num_records_produced": [
                "reader_handle",
                "name"
            ],
            "_reader_num_work_units_completed": [
                "reader_handle",
                "name"
            ],
            "_reader_read": [
                "reader_handle",
                "queue_handle",
                "name"
            ],
            "_reader_read_up_to": [
                "reader_handle",
                "queue_handle",
                "num_records",
                "name"
            ],
            "_reader_reset": [
                "reader_handle",
                "name"
            ],
            "_reader_restore_state": [
                "reader_handle",
                "state",
                "name"
            ],
            "_reader_serialize_state": [
                "reader_handle",
                "name"
            ],
            "_restore": [
                "file_pattern",
                "tensor_name",
                "dt",
                "preferred_shard",
                "name"
            ],
            "_restore_slice": [
                "file_pattern",
                "tensor_name",
                "shape_and_slice",
                "dt",
                "preferred_shard",
                "name"
            ],
            "restore_v2": [
                "prefix",
                "tensor_names",
                "shape_and_slices",
                "dtypes",
                "name"
            ],
            "_save": [
                "filename",
                "tensor_names",
                "data",
                "name"
            ],
            "_save_slices": [
                "filename",
                "tensor_names",
                "shapes_and_slices",
                "data",
                "name"
            ],
            "save_v2": [
                "prefix",
                "tensor_names",
                "shape_and_slices",
                "tensors",
                "name"
            ],
            "_sharded_filename": [
                "basename",
                "shard",
                "num_shards",
                "name"
            ],
            "_sharded_filespec": [
                "basename",
                "num_shards",
                "name"
            ],
            "_tf_record_reader": [
                "container",
                "shared_name",
                "compression_type",
                "name"
            ],
            "_text_line_reader": [
                "skip_header_lines",
                "container",
                "shared_name",
                "name"
            ],
            "_whole_file_reader": [
                "container",
                "shared_name",
                "name"
            ],
            "write_file": [
                "filename",
                "contents",
                "name"
            ],
            "_InitOpDefLibrary": []
        },
        "tensorflow.python.ops.gradients": {},
        "tensorflow.python.ops.gen_user_ops": {
            "_fact": [
                "name"
            ],
            "_InitOpDefLibrary": []
        },
        "tensorflow.python.ops.math_grad": {
            "_safe_shape_div": [
                "x",
                "y"
            ],
            "_SumGrad": [
                "op",
                "grad"
            ],
            "_MinOrMaxGrad": [
                "op",
                "grad"
            ],
            "_MaxGrad": [
                "op",
                "grad"
            ],
            "_MinGrad": [
                "op",
                "grad"
            ],
            "_MeanGrad": [
                "op",
                "grad"
            ],
            "_ProdGrad": [
                "op",
                "grad"
            ],
            "_SegmentSumGrad": [
                "op",
                "grad"
            ],
            "_SegmentMeanGrad": [
                "op",
                "grad"
            ],
            "_SparseSegmentSumGrad": [
                "op",
                "grad"
            ],
            "_SparseSegmentMeanGrad": [
                "op",
                "grad"
            ],
            "_SparseSegmentSqrtNGrad": [
                "op",
                "grad"
            ],
            "_SegmentMinOrMaxGrad": [
                "op",
                "grad"
            ],
            "_SegmentMinGrad": [
                "op",
                "grad"
            ],
            "_SegmentMaxGrad": [
                "op",
                "grad"
            ],
            "_UnsortedSegmentSumGrad": [
                "op",
                "grad"
            ],
            "_AbsGrad": [
                "op",
                "grad"
            ],
            "_NegGrad": [
                "_",
                "grad"
            ],
            "_InvGrad": [
                "op",
                "grad"
            ],
            "_ReciprocalGrad": [
                "op",
                "grad"
            ],
            "_InvGradGrad": [
                "op",
                "grad"
            ],
            "_ReciprocalGradGrad": [
                "op",
                "grad"
            ],
            "_SquareGrad": [
                "op",
                "grad"
            ],
            "_SqrtGrad": [
                "op",
                "grad"
            ],
            "_SqrtGradGrad": [
                "op",
                "grad"
            ],
            "_RsqrtGrad": [
                "op",
                "grad"
            ],
            "_RsqrtGradGrad": [
                "op",
                "grad"
            ],
            "_ExpGrad": [
                "op",
                "grad"
            ],
            "_LogGrad": [
                "op",
                "grad"
            ],
            "_Log1pGrad": [
                "op",
                "grad"
            ],
            "_TanhGrad": [
                "op",
                "grad"
            ],
            "_TanhGradGrad": [
                "op",
                "grad"
            ],
            "_ErfGrad": [
                "op",
                "grad"
            ],
            "_ErfcGrad": [
                "op",
                "grad"
            ],
            "_LgammaGrad": [
                "op",
                "grad"
            ],
            "_DigammaGrad": [
                "op",
                "grad"
            ],
            "_IgammaGrad": [
                "op",
                "grad"
            ],
            "_IgammacGrad": [
                "op",
                "grad"
            ],
            "_ZetaGrad": [
                "op",
                "grad"
            ],
            "_PolygammaGrad": [
                "op",
                "grad"
            ],
            "_SigmoidGrad": [
                "op",
                "grad"
            ],
            "_SigmoidGradGrad": [
                "op",
                "grad"
            ],
            "_SignGrad": [
                "op",
                "_"
            ],
            "_SinGrad": [
                "op",
                "grad"
            ],
            "_CosGrad": [
                "op",
                "grad"
            ],
            "_TanGrad": [
                "op",
                "grad"
            ],
            "_AsinGrad": [
                "op",
                "grad"
            ],
            "_AcosGrad": [
                "op",
                "grad"
            ],
            "_AtanGrad": [
                "op",
                "grad"
            ],
            "_AddNGrad": [
                "op",
                "grad"
            ],
            "_AddGrad": [
                "op",
                "grad"
            ],
            "_SubGrad": [
                "op",
                "grad"
            ],
            "_MulGrad": [
                "op",
                "grad"
            ],
            "_DivGrad": [
                "op",
                "grad"
            ],
            "_PowGrad": [
                "op",
                "grad"
            ],
            "_MaximumMinimumGrad": [
                "op",
                "grad",
                "selector_op"
            ],
            "_MaximumGrad": [
                "op",
                "grad"
            ],
            "_MinimumGrad": [
                "op",
                "grad"
            ],
            "_SquaredDifferenceGrad": [
                "op",
                "grad"
            ],
            "_SelectGrad": [
                "op",
                "grad"
            ],
            "_MatMulGrad": [
                "op",
                "grad"
            ],
            "_SparseMatMulGrad": [
                "op",
                "grad"
            ],
            "_FloorGrad": [
                "_",
                "unused_grad"
            ],
            "_RintGrad": [
                "_",
                "unused_grad"
            ],
            "_BatchMatMul": [
                "op",
                "grad"
            ],
            "_ComplexGrad": [
                "op",
                "grad"
            ],
            "_RealGrad": [
                "_",
                "grad"
            ],
            "_ImagGrad": [
                "_",
                "grad"
            ],
            "_ConjGrad": [
                "_",
                "grad"
            ],
            "_ComplexAbsGrad": [
                "op",
                "grad"
            ],
            "_CastGrad": [
                "op",
                "grad"
            ],
            "_FFTSizeForGrad": [
                "grad",
                "rank"
            ],
            "_FFTGrad": [
                "_",
                "grad"
            ],
            "_IFFTGrad": [
                "_",
                "grad"
            ],
            "_FFT2DGrad": [
                "_",
                "grad"
            ],
            "_IFFT2DGrad": [
                "_",
                "grad"
            ],
            "_FFT3DGrad": [
                "_",
                "grad"
            ],
            "_IFFT3DGrad": [
                "_",
                "grad"
            ],
            "_CrossGrad": [
                "op",
                "grad"
            ],
            "_CumsumGrad": [
                "op",
                "grad"
            ],
            "_CumprodGrad": [
                "op",
                "grad"
            ]
        },
        "tensorflow.python.ops.summary_ops": {
            "_Collect": [
                "val",
                "collections",
                "default_collections"
            ],
            "tensor_summary": [
                "name",
                "tensor",
                "summary_description",
                "collections"
            ]
        },
        "tensorflow.python.ops.variable_scope": {
            "no_regularizer": [
                "_"
            ],
            "get_variable_scope": [],
            "_get_default_variable_store": [],
            "get_variable": [
                "name",
                "shape",
                "dtype",
                "initializer",
                "regularizer",
                "trainable",
                "collections",
                "caching_device",
                "partitioner",
                "validate_shape",
                "custom_getter"
            ],
            "get_local_variable": [],
            "_get_partitioned_variable": [
                "name",
                "shape",
                "dtype",
                "initializer",
                "regularizer",
                "trainable",
                "collections",
                "caching_device",
                "partitioner",
                "validate_shape"
            ],
            "_pure_variable_scope": [
                "name_or_scope",
                "reuse",
                "initializer",
                "regularizer",
                "caching_device",
                "partitioner",
                "custom_getter",
                "old_name_scope",
                "dtype"
            ],
            "_get_unique_variable_scope": [
                "prefix"
            ],
            "variable_scope": [
                "name_or_scope",
                "default_name",
                "values",
                "initializer",
                "regularizer",
                "caching_device",
                "partitioner",
                "custom_getter",
                "reuse",
                "dtype"
            ],
            "variable_op_scope": [
                "values",
                "name_or_scope",
                "default_name",
                "initializer",
                "regularizer",
                "caching_device",
                "partitioner",
                "custom_getter",
                "reuse",
                "dtype"
            ],
            "_compute_slice_dim_and_shape": [
                "full_shape",
                "slicing"
            ],
            "_PartitionInfo": {
                "__init__": [
                    "self",
                    "full_shape",
                    "var_offset"
                ],
                "full_shape": [
                    "self"
                ],
                "var_offset": [
                    "self"
                ],
                "single_offset": [
                    "self",
                    "shape"
                ],
                "single_slice_dim": [
                    "self",
                    "shape"
                ]
            },
            "_VariableStore": {
                "__init__": [
                    "self"
                ],
                "open_variable_scope": [
                    "self",
                    "scope_name"
                ],
                "close_variable_subscopes": [
                    "self",
                    "scope_name"
                ],
                "variable_scope_count": [
                    "self",
                    "scope_name"
                ],
                "get_variable": [
                    "self",
                    "name",
                    "shape",
                    "dtype",
                    "initializer",
                    "regularizer",
                    "reuse",
                    "trainable",
                    "collections",
                    "caching_device",
                    "partitioner",
                    "validate_shape",
                    "custom_getter"
                ],
                "_get_partitioned_variable": [
                    "self",
                    "name",
                    "partitioner",
                    "shape",
                    "dtype",
                    "initializer",
                    "regularizer",
                    "reuse",
                    "trainable",
                    "collections",
                    "caching_device",
                    "validate_shape"
                ],
                "_get_single_variable": [
                    "self",
                    "name",
                    "shape",
                    "dtype",
                    "initializer",
                    "regularizer",
                    "partition_info",
                    "reuse",
                    "trainable",
                    "collections",
                    "caching_device",
                    "validate_shape"
                ]
            },
            "VariableScope": {
                "__init__": [
                    "self",
                    "reuse",
                    "name",
                    "initializer",
                    "regularizer",
                    "caching_device",
                    "partitioner",
                    "custom_getter",
                    "name_scope",
                    "dtype"
                ],
                "name": [
                    "self"
                ],
                "original_name_scope": [
                    "self"
                ],
                "reuse": [
                    "self"
                ],
                "initializer": [
                    "self"
                ],
                "dtype": [
                    "self"
                ],
                "regularizer": [
                    "self"
                ],
                "caching_device": [
                    "self"
                ],
                "partitioner": [
                    "self"
                ],
                "custom_getter": [
                    "self"
                ],
                "reuse_variables": [
                    "self"
                ],
                "set_initializer": [
                    "self",
                    "initializer"
                ],
                "set_dtype": [
                    "self",
                    "dtype"
                ],
                "set_regularizer": [
                    "self",
                    "regularizer"
                ],
                "set_caching_device": [
                    "self",
                    "caching_device"
                ],
                "set_partitioner": [
                    "self",
                    "partitioner"
                ],
                "set_custom_getter": [
                    "self",
                    "custom_getter"
                ],
                "get_variable": [
                    "self",
                    "var_store",
                    "name",
                    "shape",
                    "dtype",
                    "initializer",
                    "regularizer",
                    "trainable",
                    "collections",
                    "caching_device",
                    "partitioner",
                    "validate_shape",
                    "custom_getter"
                ],
                "_get_partitioned_variable": [
                    "self",
                    "var_store",
                    "name",
                    "shape",
                    "dtype",
                    "initializer",
                    "regularizer",
                    "trainable",
                    "collections",
                    "caching_device",
                    "partitioner",
                    "validate_shape"
                ]
            }
        },
        "tensorflow.python.ops.concat_benchmark": {
            "build_graph": [
                "device",
                "input_shape",
                "variable",
                "num_inputs",
                "axis",
                "grad"
            ],
            "ConcatBenchmark": {
                "_run_graph": [
                    "self",
                    "device",
                    "input_shape",
                    "variable",
                    "num_inputs",
                    "axis",
                    "grad",
                    "num_iters"
                ],
                "benchmark_concat": [
                    "self"
                ]
            }
        },
        "tensorflow.python.ops.ctc_ops": {
            "ctc_loss": [
                "inputs",
                "labels",
                "sequence_length",
                "preprocess_collapse_repeated",
                "ctc_merge_repeated",
                "time_major"
            ],
            "_CTCLossGrad": [
                "op",
                "grad_loss",
                "_"
            ],
            "ctc_greedy_decoder": [
                "inputs",
                "sequence_length",
                "merge_repeated"
            ],
            "ctc_beam_search_decoder": [
                "inputs",
                "sequence_length",
                "beam_width",
                "top_paths",
                "merge_repeated"
            ]
        },
        "tensorflow.python.ops.gen_nn_ops": {
            "_avg_pool": [
                "value",
                "ksize",
                "strides",
                "padding",
                "data_format",
                "name"
            ],
            "avg_pool3d": [
                "input",
                "ksize",
                "strides",
                "padding",
                "name"
            ],
            "avg_pool3d_grad": [
                "orig_input_shape",
                "grad",
                "ksize",
                "strides",
                "padding",
                "name"
            ],
            "_avg_pool_grad": [
                "orig_input_shape",
                "grad",
                "ksize",
                "strides",
                "padding",
                "data_format",
                "name"
            ],
            "_batch_norm_with_global_normalization": [
                "t",
                "m",
                "v",
                "beta",
                "gamma",
                "variance_epsilon",
                "scale_after_normalization",
                "name"
            ],
            "_batch_norm_with_global_normalization_grad": [
                "t",
                "m",
                "v",
                "gamma",
                "backprop",
                "variance_epsilon",
                "scale_after_normalization",
                "name"
            ],
            "_bias_add": [
                "value",
                "bias",
                "data_format",
                "name"
            ],
            "bias_add_grad": [
                "out_backprop",
                "data_format",
                "name"
            ],
            "_bias_add_v1": [
                "value",
                "bias",
                "name"
            ],
            "conv2d": [
                "input",
                "filter",
                "strides",
                "padding",
                "use_cudnn_on_gpu",
                "data_format",
                "name"
            ],
            "conv2d_backprop_filter": [
                "input",
                "filter_sizes",
                "out_backprop",
                "strides",
                "padding",
                "use_cudnn_on_gpu",
                "data_format",
                "name"
            ],
            "conv2d_backprop_input": [
                "input_sizes",
                "filter",
                "out_backprop",
                "strides",
                "padding",
                "use_cudnn_on_gpu",
                "data_format",
                "name"
            ],
            "conv3d": [
                "input",
                "filter",
                "strides",
                "padding",
                "name"
            ],
            "conv3d_backprop_filter": [
                "input",
                "filter",
                "out_backprop",
                "strides",
                "padding",
                "name"
            ],
            "conv3d_backprop_filter_v2": [
                "input",
                "filter_sizes",
                "out_backprop",
                "strides",
                "padding",
                "name"
            ],
            "conv3d_backprop_input": [
                "input",
                "filter",
                "out_backprop",
                "strides",
                "padding",
                "name"
            ],
            "conv3d_backprop_input_v2": [
                "input_sizes",
                "filter",
                "out_backprop",
                "strides",
                "padding",
                "name"
            ],
            "depthwise_conv2d_native": [
                "input",
                "filter",
                "strides",
                "padding",
                "name"
            ],
            "depthwise_conv2d_native_backprop_filter": [
                "input",
                "filter_sizes",
                "out_backprop",
                "strides",
                "padding",
                "name"
            ],
            "depthwise_conv2d_native_backprop_input": [
                "input_sizes",
                "filter",
                "out_backprop",
                "strides",
                "padding",
                "name"
            ],
            "dilation2d": [
                "input",
                "filter",
                "strides",
                "rates",
                "padding",
                "name"
            ],
            "dilation2d_backprop_filter": [
                "input",
                "filter",
                "out_backprop",
                "strides",
                "rates",
                "padding",
                "name"
            ],
            "dilation2d_backprop_input": [
                "input",
                "filter",
                "out_backprop",
                "strides",
                "rates",
                "padding",
                "name"
            ],
            "elu": [
                "features",
                "name"
            ],
            "_elu_grad": [
                "gradients",
                "outputs",
                "name"
            ],
            "fractional_avg_pool": [
                "value",
                "pooling_ratio",
                "pseudo_random",
                "overlapping",
                "deterministic",
                "seed",
                "seed2",
                "name"
            ],
            "_fractional_avg_pool_grad": [
                "orig_input_tensor_shape",
                "out_backprop",
                "row_pooling_sequence",
                "col_pooling_sequence",
                "overlapping",
                "name"
            ],
            "fractional_max_pool": [
                "value",
                "pooling_ratio",
                "pseudo_random",
                "overlapping",
                "deterministic",
                "seed",
                "seed2",
                "name"
            ],
            "_fractional_max_pool_grad": [
                "orig_input",
                "orig_output",
                "out_backprop",
                "row_pooling_sequence",
                "col_pooling_sequence",
                "overlapping",
                "name"
            ],
            "fused_batch_norm": [
                "x",
                "scale",
                "offset",
                "mean",
                "variance",
                "epsilon",
                "data_format",
                "is_training",
                "name"
            ],
            "fused_batch_norm_grad": [
                "y_backprop",
                "x",
                "scale",
                "reserve_space_1",
                "reserve_space_2",
                "epsilon",
                "data_format",
                "is_training",
                "name"
            ],
            "fused_pad_conv2d": [
                "input",
                "paddings",
                "filter",
                "mode",
                "strides",
                "padding",
                "name"
            ],
            "fused_resize_and_pad_conv2d": [
                "input",
                "size",
                "paddings",
                "filter",
                "mode",
                "strides",
                "padding",
                "resize_align_corners",
                "name"
            ],
            "in_top_k": [
                "predictions",
                "targets",
                "k",
                "name"
            ],
            "l2_loss": [
                "t",
                "name"
            ],
            "lrn": [
                "input",
                "depth_radius",
                "bias",
                "alpha",
                "beta",
                "name"
            ],
            "_lrn_grad": [
                "input_grads",
                "input_image",
                "output_image",
                "depth_radius",
                "bias",
                "alpha",
                "beta",
                "name"
            ],
            "_log_softmax": [
                "logits",
                "name"
            ],
            "_max_pool": [
                "input",
                "ksize",
                "strides",
                "padding",
                "data_format",
                "name"
            ],
            "max_pool3d": [
                "input",
                "ksize",
                "strides",
                "padding",
                "name"
            ],
            "max_pool3d_grad": [
                "orig_input",
                "orig_output",
                "grad",
                "ksize",
                "strides",
                "padding",
                "name"
            ],
            "_max_pool_grad": [
                "orig_input",
                "orig_output",
                "grad",
                "ksize",
                "strides",
                "padding",
                "data_format",
                "name"
            ],
            "_max_pool_grad_with_argmax": [
                "input",
                "grad",
                "argmax",
                "ksize",
                "strides",
                "padding",
                "name"
            ],
            "max_pool_with_argmax": [
                "input",
                "ksize",
                "strides",
                "padding",
                "Targmax",
                "name"
            ],
            "quantized_avg_pool": [
                "input",
                "min_input",
                "max_input",
                "ksize",
                "strides",
                "padding",
                "name"
            ],
            "quantized_batch_norm_with_global_normalization": [
                "t",
                "t_min",
                "t_max",
                "m",
                "m_min",
                "m_max",
                "v",
                "v_min",
                "v_max",
                "beta",
                "beta_min",
                "beta_max",
                "gamma",
                "gamma_min",
                "gamma_max",
                "out_type",
                "variance_epsilon",
                "scale_after_normalization",
                "name"
            ],
            "quantized_bias_add": [
                "input",
                "bias",
                "min_input",
                "max_input",
                "min_bias",
                "max_bias",
                "out_type",
                "name"
            ],
            "quantized_conv2d": [
                "input",
                "filter",
                "min_input",
                "max_input",
                "min_filter",
                "max_filter",
                "strides",
                "padding",
                "out_type",
                "name"
            ],
            "quantized_max_pool": [
                "input",
                "min_input",
                "max_input",
                "ksize",
                "strides",
                "padding",
                "name"
            ],
            "quantized_relu": [
                "features",
                "min_features",
                "max_features",
                "out_type",
                "name"
            ],
            "quantized_relu6": [
                "features",
                "min_features",
                "max_features",
                "out_type",
                "name"
            ],
            "quantized_relu_x": [
                "features",
                "max_value",
                "min_features",
                "max_features",
                "out_type",
                "name"
            ],
            "relu": [
                "features",
                "name"
            ],
            "_relu6": [
                "features",
                "name"
            ],
            "_relu6_grad": [
                "gradients",
                "features",
                "name"
            ],
            "_relu_grad": [
                "gradients",
                "features",
                "name"
            ],
            "_softmax": [
                "logits",
                "name"
            ],
            "_softmax_cross_entropy_with_logits": [
                "features",
                "labels",
                "name"
            ],
            "softplus": [
                "features",
                "name"
            ],
            "_softplus_grad": [
                "gradients",
                "features",
                "name"
            ],
            "softsign": [
                "features",
                "name"
            ],
            "_softsign_grad": [
                "gradients",
                "features",
                "name"
            ],
            "_sparse_softmax_cross_entropy_with_logits": [
                "features",
                "labels",
                "name"
            ],
            "_top_k": [
                "input",
                "k",
                "sorted",
                "name"
            ],
            "_top_kv2": [
                "input",
                "k",
                "sorted",
                "name"
            ],
            "_InitOpDefLibrary": []
        },
        "tensorflow.python.ops.nn_xent_test": {
            "SigmoidCrossEntropyWithLogitsTest": {
                "_SigmoidCrossEntropyWithLogits": [
                    "self",
                    "logits",
                    "targets"
                ],
                "_Inputs": [
                    "self",
                    "x",
                    "y",
                    "dtype",
                    "sizes"
                ],
                "testConstructionNamed": [
                    "self"
                ],
                "testLogisticOutput": [
                    "self"
                ],
                "testLogisticOutputMultiDim": [
                    "self"
                ],
                "testGradient": [
                    "self"
                ],
                "testGradientAtZero": [
                    "self"
                ],
                "testShapeError": [
                    "self"
                ]
            },
            "WeightedCrossEntropyTest": {
                "_WeightedCrossEntropy": [
                    "self",
                    "logits",
                    "targets",
                    "pos_coeff"
                ],
                "_Inputs": [
                    "self",
                    "x",
                    "y",
                    "q",
                    "dtype",
                    "sizes"
                ],
                "testConstructionNamed": [
                    "self"
                ],
                "testOutput": [
                    "self"
                ],
                "testOutputMultiDim": [
                    "self"
                ],
                "testGradient": [
                    "self"
                ],
                "testShapeError": [
                    "self"
                ]
            }
        },
        "tensorflow.python.ops.gen_math_ops": {
            "_abs": [
                "x",
                "name"
            ],
            "acos": [
                "x",
                "name"
            ],
            "add": [
                "x",
                "y",
                "name"
            ],
            "_add_n": [
                "inputs",
                "name"
            ],
            "_all": [
                "input",
                "reduction_indices",
                "keep_dims",
                "name"
            ],
            "_any": [
                "input",
                "reduction_indices",
                "keep_dims",
                "name"
            ],
            "arg_max": [
                "input",
                "dimension",
                "name"
            ],
            "arg_min": [
                "input",
                "dimension",
                "name"
            ],
            "asin": [
                "x",
                "name"
            ],
            "atan": [
                "x",
                "name"
            ],
            "_batch_fft": [
                "input",
                "name"
            ],
            "_batch_fft2d": [
                "input",
                "name"
            ],
            "_batch_fft3d": [
                "input",
                "name"
            ],
            "_batch_ifft": [
                "input",
                "name"
            ],
            "_batch_ifft2d": [
                "input",
                "name"
            ],
            "_batch_ifft3d": [
                "input",
                "name"
            ],
            "_batch_mat_mul": [
                "x",
                "y",
                "adj_x",
                "adj_y",
                "name"
            ],
            "betainc": [
                "a",
                "b",
                "x",
                "name"
            ],
            "cast": [
                "x",
                "DstT",
                "name"
            ],
            "ceil": [
                "x",
                "name"
            ],
            "_complex": [
                "real",
                "imag",
                "Tout",
                "name"
            ],
            "complex_abs": [
                "x",
                "Tout",
                "name"
            ],
            "_conj": [
                "input",
                "name"
            ],
            "cos": [
                "x",
                "name"
            ],
            "cross": [
                "a",
                "b",
                "name"
            ],
            "cumprod": [
                "x",
                "axis",
                "exclusive",
                "reverse",
                "name"
            ],
            "cumsum": [
                "x",
                "axis",
                "exclusive",
                "reverse",
                "name"
            ],
            "digamma": [
                "x",
                "name"
            ],
            "div": [
                "x",
                "y",
                "name"
            ],
            "equal": [
                "x",
                "y",
                "name"
            ],
            "erf": [
                "x",
                "name"
            ],
            "erfc": [
                "x",
                "name"
            ],
            "exp": [
                "x",
                "name"
            ],
            "fft": [
                "input",
                "name"
            ],
            "fft2d": [
                "input",
                "name"
            ],
            "fft3d": [
                "input",
                "name"
            ],
            "floor": [
                "x",
                "name"
            ],
            "floor_div": [
                "x",
                "y",
                "name"
            ],
            "floor_mod": [
                "x",
                "y",
                "name"
            ],
            "greater": [
                "x",
                "y",
                "name"
            ],
            "greater_equal": [
                "x",
                "y",
                "name"
            ],
            "ifft": [
                "input",
                "name"
            ],
            "ifft2d": [
                "input",
                "name"
            ],
            "ifft3d": [
                "input",
                "name"
            ],
            "igamma": [
                "a",
                "x",
                "name"
            ],
            "igammac": [
                "a",
                "x",
                "name"
            ],
            "imag": [
                "input",
                "Tout",
                "name"
            ],
            "inv": [
                "x",
                "name"
            ],
            "_inv_grad": [
                "x",
                "y",
                "name"
            ],
            "is_finite": [
                "x",
                "name"
            ],
            "is_inf": [
                "x",
                "name"
            ],
            "is_nan": [
                "x",
                "name"
            ],
            "less": [
                "x",
                "y",
                "name"
            ],
            "less_equal": [
                "x",
                "y",
                "name"
            ],
            "lgamma": [
                "x",
                "name"
            ],
            "lin_space": [
                "start",
                "stop",
                "num",
                "name"
            ],
            "log": [
                "x",
                "name"
            ],
            "log1p": [
                "x",
                "name"
            ],
            "logical_and": [
                "x",
                "y",
                "name"
            ],
            "logical_not": [
                "x",
                "name"
            ],
            "logical_or": [
                "x",
                "y",
                "name"
            ],
            "_mat_mul": [
                "a",
                "b",
                "transpose_a",
                "transpose_b",
                "name"
            ],
            "_max": [
                "input",
                "reduction_indices",
                "keep_dims",
                "name"
            ],
            "maximum": [
                "x",
                "y",
                "name"
            ],
            "_mean": [
                "input",
                "reduction_indices",
                "keep_dims",
                "name"
            ],
            "_min": [
                "input",
                "reduction_indices",
                "keep_dims",
                "name"
            ],
            "minimum": [
                "x",
                "y",
                "name"
            ],
            "mod": [
                "x",
                "y",
                "name"
            ],
            "mul": [
                "x",
                "y",
                "name"
            ],
            "neg": [
                "x",
                "name"
            ],
            "not_equal": [
                "x",
                "y",
                "name"
            ],
            "polygamma": [
                "a",
                "x",
                "name"
            ],
            "_pow": [
                "x",
                "y",
                "name"
            ],
            "_prod": [
                "input",
                "reduction_indices",
                "keep_dims",
                "name"
            ],
            "quantize_down_and_shrink_range": [
                "input",
                "input_min",
                "input_max",
                "out_type",
                "name"
            ],
            "quantized_mat_mul": [
                "a",
                "b",
                "min_a",
                "max_a",
                "min_b",
                "max_b",
                "Toutput",
                "transpose_a",
                "transpose_b",
                "name"
            ],
            "_range": [
                "start",
                "limit",
                "delta",
                "name"
            ],
            "real": [
                "input",
                "Tout",
                "name"
            ],
            "real_div": [
                "x",
                "y",
                "name"
            ],
            "reciprocal": [
                "x",
                "name"
            ],
            "_reciprocal_grad": [
                "x",
                "y",
                "name"
            ],
            "requantization_range": [
                "input",
                "input_min",
                "input_max",
                "name"
            ],
            "requantize": [
                "input",
                "input_min",
                "input_max",
                "requested_output_min",
                "requested_output_max",
                "out_type",
                "name"
            ],
            "rint": [
                "x",
                "name"
            ],
            "round": [
                "x",
                "name"
            ],
            "rsqrt": [
                "x",
                "name"
            ],
            "_rsqrt_grad": [
                "x",
                "y",
                "name"
            ],
            "segment_max": [
                "data",
                "segment_ids",
                "name"
            ],
            "segment_mean": [
                "data",
                "segment_ids",
                "name"
            ],
            "segment_min": [
                "data",
                "segment_ids",
                "name"
            ],
            "segment_prod": [
                "data",
                "segment_ids",
                "name"
            ],
            "segment_sum": [
                "data",
                "segment_ids",
                "name"
            ],
            "select": [
                "condition",
                "t",
                "e",
                "name"
            ],
            "_sigmoid": [
                "x",
                "name"
            ],
            "_sigmoid_grad": [
                "x",
                "y",
                "name"
            ],
            "sign": [
                "x",
                "name"
            ],
            "sin": [
                "x",
                "name"
            ],
            "_sparse_mat_mul": [
                "a",
                "b",
                "transpose_a",
                "transpose_b",
                "a_is_sparse",
                "b_is_sparse",
                "name"
            ],
            "sparse_segment_mean": [
                "data",
                "indices",
                "segment_ids",
                "name"
            ],
            "sparse_segment_mean_grad": [
                "grad",
                "indices",
                "segment_ids",
                "output_dim0",
                "name"
            ],
            "sparse_segment_sqrt_n": [
                "data",
                "indices",
                "segment_ids",
                "name"
            ],
            "sparse_segment_sqrt_n_grad": [
                "grad",
                "indices",
                "segment_ids",
                "output_dim0",
                "name"
            ],
            "sparse_segment_sum": [
                "data",
                "indices",
                "segment_ids",
                "name"
            ],
            "sqrt": [
                "x",
                "name"
            ],
            "_sqrt_grad": [
                "x",
                "y",
                "name"
            ],
            "square": [
                "x",
                "name"
            ],
            "squared_difference": [
                "x",
                "y",
                "name"
            ],
            "sub": [
                "x",
                "y",
                "name"
            ],
            "_sum": [
                "input",
                "reduction_indices",
                "keep_dims",
                "name"
            ],
            "tan": [
                "x",
                "name"
            ],
            "_tanh": [
                "x",
                "name"
            ],
            "_tanh_grad": [
                "x",
                "y",
                "name"
            ],
            "truncate_div": [
                "x",
                "y",
                "name"
            ],
            "truncate_mod": [
                "x",
                "y",
                "name"
            ],
            "unsorted_segment_sum": [
                "data",
                "segment_ids",
                "num_segments",
                "name"
            ],
            "zeta": [
                "x",
                "q",
                "name"
            ],
            "_InitOpDefLibrary": []
        },
        "tensorflow.python.ops.embedding_ops": {
            "embedding_lookup": [
                "params",
                "ids",
                "partition_strategy",
                "name",
                "validate_indices",
                "max_norm"
            ],
            "embedding_lookup_sparse": [
                "params",
                "sp_ids",
                "sp_weights",
                "partition_strategy",
                "name",
                "combiner",
                "max_norm"
            ]
        },
        "tensorflow.python.ops": {},
        "tensorflow.python.ops.nn_test": {
            "ZeroFractionTest": {
                "_ZeroFraction": [
                    "self",
                    "x"
                ],
                "testZeroFraction": [
                    "self"
                ],
                "testZeroFractionEmpty": [
                    "self"
                ]
            },
            "SoftmaxTest": {
                "_softmax": [
                    "self",
                    "x"
                ],
                "testSoftmax": [
                    "self"
                ],
                "testGradient": [
                    "self"
                ]
            },
            "LogPoissonLossTest": {
                "_log_poisson_loss": [
                    "self",
                    "x",
                    "z",
                    "compute_full_loss"
                ],
                "testLogPoissonLoss": [
                    "self"
                ],
                "testGradient": [
                    "self"
                ]
            },
            "LogSoftmaxTest": {
                "_log_softmax": [
                    "self",
                    "x"
                ],
                "testLogSoftmax": [
                    "self"
                ],
                "testGradient": [
                    "self"
                ]
            },
            "L2LossTest": {
                "testL2Loss": [
                    "self"
                ],
                "testGradient": [
                    "self"
                ]
            },
            "L2NormalizeTest": {
                "_l2Normalize": [
                    "self",
                    "x",
                    "dim"
                ],
                "testL2Normalize": [
                    "self"
                ],
                "testL2NormalizeDimArray": [
                    "self"
                ],
                "testL2NormalizeGradient": [
                    "self"
                ]
            },
            "DropoutTest": {
                "testDropout": [
                    "self"
                ],
                "testShapedDropout": [
                    "self"
                ],
                "testShapedDropoutCorrelation": [
                    "self"
                ],
                "testDropoutPlaceholderKeepProb": [
                    "self"
                ],
                "testShapedDropoutUnknownShape": [
                    "self"
                ],
                "testInvalidKeepProb": [
                    "self"
                ],
                "testShapedDropoutShapeError": [
                    "self"
                ],
                "testNoDropoutFast": [
                    "self"
                ]
            },
            "ComputeSampledLogitsTest": {
                "setUp": [
                    "self"
                ],
                "_GenerateTestInputs": [
                    "self"
                ],
                "_ComputeSampledLogitsNP": [
                    "self",
                    "true_w",
                    "true_b",
                    "sampled_w",
                    "sampled_b",
                    "hidden_acts",
                    "num_true",
                    "true_expected",
                    "sampled_expected"
                ],
                "_ComputeSampledLogitsTF": [
                    "self",
                    "weights",
                    "biases",
                    "hidden_acts",
                    "labels",
                    "num_sampled",
                    "num_classes",
                    "num_true",
                    "sampled_vals",
                    "subtract_log_q",
                    "remove_accidental_hits",
                    "name"
                ],
                "testComputeSampledLogitsShapes": [
                    "self"
                ],
                "testComputeSampledLogitsValues": [
                    "self"
                ],
                "testNCELoss": [
                    "self"
                ],
                "testSampledSoftmaxLoss": [
                    "self"
                ]
            },
            "CReluTest": {
                "test": [
                    "self"
                ]
            }
        },
        "tensorflow.python.ops.math_ops_test": {
            "ReduceTest": {
                "testReduceAllDims": [
                    "self"
                ],
                "testReduceExplicitAxes": [
                    "self"
                ],
                "testReduceInvalidAxis": [
                    "self"
                ]
            },
            "LogSumExpTest": {
                "testReduceLogSumExp": [
                    "self"
                ],
                "testReductionIndices": [
                    "self"
                ],
                "testReductionIndices2": [
                    "self"
                ],
                "testKeepDims": [
                    "self"
                ],
                "testOverflow": [
                    "self"
                ],
                "testUnderflow": [
                    "self"
                ]
            },
            "RoundTest": {
                "testRounding": [
                    "self"
                ]
            },
            "ModTest": {
                "testFloat": [
                    "self"
                ],
                "testFixed": [
                    "self"
                ]
            },
            "SquaredDifferenceTest": {
                "testSquaredDifference": [
                    "self"
                ]
            },
            "ScalarMulTest": {
                "testAcceptsRefs": [
                    "self"
                ],
                "testAcceptsConstant": [
                    "self"
                ],
                "testAcceptsTensor": [
                    "self"
                ],
                "testAcceptsIndexedSlices": [
                    "self"
                ]
            },
            "AccumulateNTest": {
                "testFloat": [
                    "self"
                ],
                "testInt": [
                    "self"
                ]
            },
            "DivAndModTest": {
                "intTestData": [
                    "self"
                ],
                "floatTestData": [
                    "self"
                ],
                "testFloorModInt": [
                    "self"
                ],
                "testFloorModFloat": [
                    "self"
                ],
                "testTruncateModInt": [
                    "self"
                ],
                "testTruncateModFloat": [
                    "self"
                ],
                "testDivideInt": [
                    "self"
                ],
                "testRealDiv": [
                    "self"
                ],
                "testConsistent": [
                    "self"
                ]
            }
        },
        "tensorflow.python.ops.image_ops_test": {
            "_SimpleColorRamp": [],
            "RGBToHSVTest": {
                "testBatch": [
                    "self"
                ],
                "testRGBToHSVRoundTrip": [
                    "self"
                ]
            },
            "GrayscaleToRGBTest": {
                "_RGBToGrayscale": [
                    "self",
                    "images"
                ],
                "_TestRGBToGrayscale": [
                    "self",
                    "x_np"
                ],
                "testBasicRGBToGrayscale": [
                    "self"
                ],
                "testBasicGrayscaleToRGB": [
                    "self"
                ],
                "testShapeInference": [
                    "self"
                ]
            },
            "AdjustGamma": {
                "test_adjust_gamma_one": [
                    "self"
                ],
                "test_adjust_gamma_zero": [
                    "self"
                ],
                "test_adjust_gamma_less_one": [
                    "self"
                ],
                "test_adjust_gamma_greater_one": [
                    "self"
                ]
            },
            "AdjustHueTest": {
                "testAdjustNegativeHue": [
                    "self"
                ],
                "testAdjustPositiveHue": [
                    "self"
                ],
                "_adjustHueNp": [
                    "self",
                    "x_np",
                    "delta_h"
                ],
                "_adjustHueTf": [
                    "self",
                    "x_np",
                    "delta_h"
                ],
                "testAdjustRandomHue": [
                    "self"
                ],
                "testInvalidShapes": [
                    "self"
                ]
            },
            "AdjustHueBenchmark": {
                "_benchmarkAdjustHue": [
                    "self",
                    "device",
                    "cpu_count"
                ],
                "benchmarkAdjustHueCpu1": [
                    "self"
                ],
                "benchmarkAdjustHueCpuAll": [
                    "self"
                ],
                "benchmarkAdjustHueGpu": [
                    "self"
                ]
            },
            "AdjustSaturationTest": {
                "testHalfSaturation": [
                    "self"
                ],
                "testTwiceSaturation": [
                    "self"
                ]
            },
            "FlipTransposeRotateTest": {
                "testIdempotentLeftRight": [
                    "self"
                ],
                "testLeftRight": [
                    "self"
                ],
                "testIdempotentUpDown": [
                    "self"
                ],
                "testUpDown": [
                    "self"
                ],
                "testIdempotentTranspose": [
                    "self"
                ],
                "testTranspose": [
                    "self"
                ],
                "testPartialShapes": [
                    "self"
                ],
                "testRot90GroupOrder": [
                    "self"
                ],
                "testRot90NumpyEquivalence": [
                    "self"
                ]
            },
            "RandomFlipTest": {
                "testRandomLeftRight": [
                    "self"
                ],
                "testRandomUpDown": [
                    "self"
                ]
            },
            "AdjustContrastTest": {
                "_testContrast": [
                    "self",
                    "x_np",
                    "y_np",
                    "contrast_factor"
                ],
                "testDoubleContrastUint8": [
                    "self"
                ],
                "testDoubleContrastFloat": [
                    "self"
                ],
                "testHalfContrastUint8": [
                    "self"
                ],
                "testBatchDoubleContrast": [
                    "self"
                ],
                "_adjustContrastNp": [
                    "self",
                    "x_np",
                    "contrast_factor"
                ],
                "_adjustContrastTf": [
                    "self",
                    "x_np",
                    "contrast_factor"
                ],
                "testRandomContrast": [
                    "self"
                ]
            },
            "AdjustBrightnessTest": {
                "_testBrightness": [
                    "self",
                    "x_np",
                    "y_np",
                    "delta"
                ],
                "testPositiveDeltaUint8": [
                    "self"
                ],
                "testPositiveDeltaFloat": [
                    "self"
                ],
                "testNegativeDelta": [
                    "self"
                ]
            },
            "PerImageWhiteningTest": {
                "_NumpyPerImageWhitening": [
                    "self",
                    "x"
                ],
                "testBasic": [
                    "self"
                ],
                "testUniformImage": [
                    "self"
                ]
            },
            "CropToBoundingBoxTest": {
                "_CropToBoundingBox": [
                    "self",
                    "x",
                    "offset_height",
                    "offset_width",
                    "target_height",
                    "target_width",
                    "use_tensor_inputs"
                ],
                "_assertReturns": [
                    "self",
                    "x",
                    "x_shape",
                    "offset_height",
                    "offset_width",
                    "y",
                    "y_shape",
                    "use_tensor_inputs_options"
                ],
                "_assertRaises": [
                    "self",
                    "x",
                    "x_shape",
                    "offset_height",
                    "offset_width",
                    "target_height",
                    "target_width",
                    "err_msg",
                    "use_tensor_inputs_options"
                ],
                "_assertShapeInference": [
                    "self",
                    "pre_shape",
                    "height",
                    "width",
                    "post_shape"
                ],
                "testNoOp": [
                    "self"
                ],
                "testCrop": [
                    "self"
                ],
                "testShapeInference": [
                    "self"
                ],
                "testNon3DInput": [
                    "self"
                ],
                "testZeroLengthInput": [
                    "self"
                ],
                "testBadParams": [
                    "self"
                ]
            },
            "CentralCropTest": {
                "_assertShapeInference": [
                    "self",
                    "pre_shape",
                    "fraction",
                    "post_shape"
                ],
                "testNoOp": [
                    "self"
                ],
                "testCropping": [
                    "self"
                ],
                "testShapeInference": [
                    "self"
                ],
                "testError": [
                    "self"
                ]
            },
            "PadToBoundingBoxTest": {
                "_PadToBoundingBox": [
                    "self",
                    "x",
                    "offset_height",
                    "offset_width",
                    "target_height",
                    "target_width",
                    "use_tensor_inputs"
                ],
                "_assertReturns": [
                    "self",
                    "x",
                    "x_shape",
                    "offset_height",
                    "offset_width",
                    "y",
                    "y_shape",
                    "use_tensor_inputs_options"
                ],
                "_assertRaises": [
                    "self",
                    "x",
                    "x_shape",
                    "offset_height",
                    "offset_width",
                    "target_height",
                    "target_width",
                    "err_msg",
                    "use_tensor_inputs_options"
                ],
                "_assertShapeInference": [
                    "self",
                    "pre_shape",
                    "height",
                    "width",
                    "post_shape"
                ],
                "testNoOp": [
                    "self"
                ],
                "testPadding": [
                    "self"
                ],
                "testShapeInference": [
                    "self"
                ],
                "testNon3DInput": [
                    "self"
                ],
                "testZeroLengthInput": [
                    "self"
                ],
                "testBadParams": [
                    "self"
                ]
            },
            "SelectDistortedCropBoxTest": {
                "_testSampleDistortedBoundingBox": [
                    "self",
                    "image",
                    "bounding_box",
                    "min_object_covered",
                    "aspect_ratio_range",
                    "area_range"
                ],
                "testWholeImageBoundingBox": [
                    "self"
                ],
                "testWithBoundingBox": [
                    "self"
                ],
                "testSampleDistortedBoundingBoxShape": [
                    "self"
                ]
            },
            "ResizeImagesTest": {
                "_assertShapeInference": [
                    "self",
                    "pre_shape",
                    "size",
                    "post_shape"
                ],
                "shouldRunOnGPU": [
                    "self",
                    "opt",
                    "nptype"
                ],
                "testNoOp": [
                    "self"
                ],
                "testTensorArguments": [
                    "self"
                ],
                "testSumTensor": [
                    "self"
                ],
                "testResizeDown": [
                    "self"
                ],
                "testResizeUp": [
                    "self"
                ],
                "testResizeUpBicubic": [
                    "self"
                ],
                "testResizeDownArea": [
                    "self"
                ],
                "testCompareNearestNeighbor": [
                    "self"
                ],
                "testCompareBilinear": [
                    "self"
                ],
                "testShapeInference": [
                    "self"
                ]
            },
            "ResizeImageWithCropOrPadTest": {
                "_ResizeImageWithCropOrPad": [
                    "self",
                    "x",
                    "target_height",
                    "target_width",
                    "use_tensor_inputs"
                ],
                "_assertReturns": [
                    "self",
                    "x",
                    "x_shape",
                    "y",
                    "y_shape",
                    "use_tensor_inputs_options"
                ],
                "_assertRaises": [
                    "self",
                    "x",
                    "x_shape",
                    "target_height",
                    "target_width",
                    "err_msg",
                    "use_tensor_inputs_options"
                ],
                "_assertShapeInference": [
                    "self",
                    "pre_shape",
                    "height",
                    "width",
                    "post_shape"
                ],
                "testNoOp": [
                    "self"
                ],
                "testPad": [
                    "self"
                ],
                "testCrop": [
                    "self"
                ],
                "testCropAndPad": [
                    "self"
                ],
                "testShapeInference": [
                    "self"
                ],
                "testNon3DInput": [
                    "self"
                ],
                "testZeroLengthInput": [
                    "self"
                ],
                "testBadParams": [
                    "self"
                ]
            },
            "JpegTest": {
                "averageError": [
                    "self",
                    "image0",
                    "image1"
                ],
                "testExisting": [
                    "self"
                ],
                "testCmyk": [
                    "self"
                ],
                "testSynthetic": [
                    "self"
                ],
                "testShape": [
                    "self"
                ]
            },
            "PngTest": {
                "testExisting": [
                    "self"
                ],
                "testSynthetic": [
                    "self"
                ],
                "testSyntheticUint16": [
                    "self"
                ],
                "testSyntheticTwoChannel": [
                    "self"
                ],
                "testSyntheticTwoChannelUint16": [
                    "self"
                ],
                "testShape": [
                    "self"
                ]
            },
            "GifTest": {
                "testValid": [
                    "self"
                ],
                "testInValid": [
                    "self"
                ],
                "testShape": [
                    "self"
                ]
            },
            "ConvertImageTest": {
                "_convert": [
                    "self",
                    "original",
                    "original_dtype",
                    "output_dtype",
                    "expected"
                ],
                "testNoConvert": [
                    "self"
                ],
                "testConvertBetweenInteger": [
                    "self"
                ],
                "testConvertBetweenFloat": [
                    "self"
                ],
                "testConvertBetweenIntegerAndFloat": [
                    "self"
                ],
                "testConvertBetweenInt16AndInt8": [
                    "self"
                ]
            }
        },
        "tensorflow.python.ops.control_flow_ops_test": {
            "GroupTestCase": {
                "_StripNode": [
                    "self",
                    "nd"
                ],
                "_StripGraph": [
                    "self",
                    "gd"
                ],
                "testGroup_NoDevices": [
                    "self"
                ],
                "testGroup_OneDevice": [
                    "self"
                ],
                "testGroup_MultiDevice": [
                    "self"
                ]
            },
            "ShapeTestCase": {
                "testShape": [
                    "self"
                ]
            },
            "SwitchTestCase": {
                "testIndexedSlicesWithDenseShape": [
                    "self"
                ],
                "testIndexedSlicesGradient": [
                    "self"
                ],
                "testIndexedSlicesGradientInCondInWhileLoop": [
                    "self"
                ],
                "testIndexedSlicesWithShapeGradientInWhileLoop": [
                    "self"
                ],
                "testIndexedSlicesWithDynamicShapeGradientInWhileLoop": [
                    "self"
                ]
            },
            "ContextTest": {
                "testCondContext": [
                    "self"
                ],
                "testWhileContext": [
                    "self"
                ]
            }
        },
        "tensorflow.python.ops.init_ops": {
            "_assert_float_dtype": [
                "dtype"
            ],
            "zeros_initializer": [
                "shape",
                "dtype",
                "partition_info"
            ],
            "ones_initializer": [
                "dtype",
                "partition_info"
            ],
            "constant_initializer": [
                "value",
                "dtype"
            ],
            "random_uniform_initializer": [
                "minval",
                "maxval",
                "seed",
                "dtype"
            ],
            "random_normal_initializer": [
                "mean",
                "stddev",
                "seed",
                "dtype"
            ],
            "truncated_normal_initializer": [
                "mean",
                "stddev",
                "seed",
                "dtype"
            ],
            "uniform_unit_scaling_initializer": [
                "factor",
                "seed",
                "dtype"
            ],
            "_random_walk": [
                "shape",
                "nonlinearity",
                "dtype",
                "seed",
                "name"
            ],
            "orthogonal_initializer": [
                "gain",
                "dtype",
                "seed"
            ],
            "_RandomWalkInitializer": {
                "__init__": [
                    "self",
                    "nonlinearity",
                    "seed"
                ],
                "__call__": [
                    "self",
                    "shape",
                    "dtype",
                    "partition_info"
                ]
            }
        },
        "tensorflow.python.ops.array_ops": {
            "expand_dims": [
                "input",
                "axis",
                "name",
                "dim"
            ],
            "listdiff": [
                "x",
                "y",
                "out_idx",
                "name"
            ],
            "setdiff1d": [
                "x",
                "y",
                "index_dtype",
                "name"
            ],
            "shape": [
                "input",
                "name",
                "out_type"
            ],
            "shape_internal": [
                "input",
                "name",
                "optimize",
                "out_type"
            ],
            "size": [
                "input",
                "name",
                "out_type"
            ],
            "size_internal": [
                "input",
                "name",
                "optimize",
                "out_type"
            ],
            "rank": [
                "input",
                "name"
            ],
            "rank_internal": [
                "input",
                "name",
                "optimize"
            ],
            "_SliceHelper": [
                "tensor",
                "slice_spec",
                "var"
            ],
            "slice": [
                "input_",
                "begin",
                "size",
                "name"
            ],
            "strided_slice": [
                "input_",
                "begin",
                "end",
                "strides",
                "begin_mask",
                "end_mask",
                "ellipsis_mask",
                "new_axis_mask",
                "shrink_axis_mask",
                "var",
                "name"
            ],
            "_SliceHelperVar": [
                "var",
                "slice_spec"
            ],
            "stack": [
                "values",
                "axis",
                "name"
            ],
            "pack": [
                "values",
                "axis",
                "name"
            ],
            "_autopacking_helper": [
                "list_or_tuple",
                "dtype",
                "name"
            ],
            "_get_dtype_from_nested_lists": [
                "list_or_tuple"
            ],
            "_autopacking_conversion_function": [
                "v",
                "dtype",
                "name",
                "as_ref"
            ],
            "unstack": [
                "value",
                "num",
                "axis",
                "name"
            ],
            "unpack": [
                "value",
                "num",
                "axis",
                "name"
            ],
            "concat": [
                "concat_dim",
                "values",
                "name"
            ],
            "boolean_mask": [
                "tensor",
                "mask",
                "name"
            ],
            "sparse_mask": [
                "a",
                "mask_indices",
                "name"
            ],
            "split": [
                "split_dim",
                "num_split",
                "value",
                "name"
            ],
            "split_v": [
                "value",
                "size_splits",
                "split_dim",
                "num",
                "name"
            ],
            "transpose": [
                "a",
                "perm",
                "name"
            ],
            "matrix_transpose": [
                "a",
                "name"
            ],
            "zeros": [
                "shape",
                "dtype",
                "name"
            ],
            "zeros_like": [
                "tensor",
                "dtype",
                "name",
                "optimize"
            ],
            "ones_like": [
                "tensor",
                "dtype",
                "name",
                "optimize"
            ],
            "ones": [
                "shape",
                "dtype",
                "name"
            ],
            "placeholder": [
                "dtype",
                "shape",
                "name"
            ],
            "_normalize_sparse_shape": [
                "shape",
                "name"
            ],
            "sparse_placeholder": [
                "dtype",
                "shape",
                "name"
            ],
            "pad": [
                "tensor",
                "paddings",
                "mode",
                "name"
            ],
            "meshgrid": [],
            "_compute_size_of_strided_dim": [
                "shrink",
                "spec",
                "size"
            ],
            "_TileGradShape": [
                "op"
            ],
            "edit_distance": [
                "hypothesis",
                "truth",
                "normalize",
                "name"
            ],
            "_FakeQuantWithMinMaxArgsGradient": [
                "op",
                "grad"
            ],
            "_FakeQuantWithMinMaxVarsGradient": [
                "op",
                "grad"
            ],
            "_FakeQuantWithMinMaxVarsPerChannelGradient": [
                "op",
                "grad"
            ],
            "required_space_to_batch_paddings": [
                "input_shape",
                "block_shape",
                "base_paddings",
                "name"
            ],
            "space_to_batch": [
                "input",
                "paddings",
                "block_size",
                "name"
            ],
            "batch_to_space": [
                "input",
                "crops",
                "block_size",
                "name"
            ],
            "one_hot": [
                "indices",
                "depth",
                "on_value",
                "off_value",
                "axis",
                "dtype",
                "name"
            ],
            "sequence_mask": [
                "lengths",
                "maxlen",
                "dtype",
                "name"
            ],
            "squeeze": [
                "input",
                "axis",
                "name",
                "squeeze_dims"
            ],
            "where": [
                "condition",
                "x",
                "y",
                "name"
            ]
        },
        "tensorflow.python.ops.sparse_grad": {
            "_SparseReorderGrad": [
                "op",
                "unused_output_indices_grad",
                "output_values_grad"
            ],
            "_SparseAddGrad": [
                "op"
            ],
            "_SparseTensorDenseAddGrad": [
                "op",
                "out_grad"
            ],
            "_SparseReduceSumGrad": [
                "op",
                "out_grad"
            ],
            "_SparseTensorDenseMatMulGrad": [
                "op",
                "grad"
            ],
            "_SparseDenseCwiseAddGrad": [
                "unused_op",
                "unused_grad"
            ],
            "_SparseDenseCwiseMulOrDivGrad": [
                "op",
                "grad",
                "is_mul"
            ],
            "_SparseDenseCwiseMulGrad": [
                "op",
                "grad"
            ],
            "_SparseDenseCwiseDivGrad": [
                "op",
                "grad"
            ],
            "_SparseSoftmaxGrad": [
                "op",
                "grad"
            ],
            "_SparseSparseMaximumGrad": [
                "unused_op",
                "unused_grad"
            ],
            "_SparseSparseMinimumGrad": [
                "unused_op",
                "unused_grad"
            ]
        },
        "tensorflow.python.ops.accumulate_n_benchmark": {
            "AccumulateNBenchmark": {
                "_AccumulateNTemplate": [
                    "self",
                    "inputs",
                    "init",
                    "shape",
                    "validate_shape"
                ],
                "_AccumulateNInitializedWithFirst": [
                    "self",
                    "inputs"
                ],
                "_AccumulateNInitializedWithMerge": [
                    "self",
                    "inputs"
                ],
                "_AccumulateNInitializedWithShape": [
                    "self",
                    "inputs"
                ],
                "_GenerateUnorderedInputs": [
                    "self",
                    "size",
                    "n"
                ],
                "_GenerateReplicatedInputs": [
                    "self",
                    "size",
                    "n"
                ],
                "_GenerateOrderedInputs": [
                    "self",
                    "size",
                    "n"
                ],
                "_GenerateReversedInputs": [
                    "self",
                    "size",
                    "n"
                ],
                "_SetupAndRunBenchmark": [
                    "self",
                    "graph",
                    "inputs",
                    "repeats",
                    "format_args"
                ],
                "_RunBenchmark": [
                    "self",
                    "tag",
                    "input_fn",
                    "sizes",
                    "ninputs",
                    "repeats"
                ],
                "benchmarkAccumulateN": [
                    "self"
                ]
            }
        },
        "tensorflow.python.ops.math_ops": {
            "argmax": [
                "input",
                "axis",
                "name",
                "dimension"
            ],
            "argmin": [
                "input",
                "axis",
                "name",
                "dimension"
            ],
            "abs": [
                "x",
                "name"
            ],
            "divide": [
                "x",
                "y",
                "name"
            ],
            "neg": [
                "x",
                "name"
            ],
            "sign": [
                "x",
                "name"
            ],
            "square": [
                "x",
                "name"
            ],
            "sqrt": [
                "x",
                "name"
            ],
            "erf": [
                "x",
                "name"
            ],
            "complex_abs": [
                "x",
                "name"
            ],
            "scalar_mul": [
                "scalar",
                "x"
            ],
            "pow": [
                "x",
                "y",
                "name"
            ],
            "complex": [
                "real",
                "imag",
                "name"
            ],
            "real": [
                "input",
                "name"
            ],
            "imag": [
                "input",
                "name"
            ],
            "round": [
                "x",
                "name"
            ],
            "cast": [
                "x",
                "dtype",
                "name"
            ],
            "saturate_cast": [
                "value",
                "dtype",
                "name"
            ],
            "to_float": [
                "x",
                "name"
            ],
            "to_double": [
                "x",
                "name"
            ],
            "to_int32": [
                "x",
                "name"
            ],
            "to_int64": [
                "x",
                "name"
            ],
            "to_bfloat16": [
                "x",
                "name"
            ],
            "_OverrideBinaryOperatorHelper": [
                "func",
                "op_name",
                "clazz_object"
            ],
            "_sparse_dense_truediv": [
                "sp_indices",
                "sp_values",
                "sp_shape",
                "y",
                "name"
            ],
            "truediv": [
                "x",
                "y",
                "name"
            ],
            "floordiv": [
                "x",
                "y",
                "name"
            ],
            "_mul_dispatch": [
                "x",
                "y",
                "name"
            ],
            "logical_xor": [
                "x",
                "y",
                "name"
            ],
            "range": [
                "start",
                "limit",
                "delta",
                "dtype",
                "name"
            ],
            "_ReductionDims": [
                "x",
                "axis",
                "reduction_indices"
            ],
            "reduce_sum": [
                "input_tensor",
                "axis",
                "keep_dims",
                "name",
                "reduction_indices"
            ],
            "count_nonzero": [
                "input_tensor",
                "axis",
                "keep_dims",
                "dtype",
                "name",
                "reduction_indices"
            ],
            "reduce_mean": [
                "input_tensor",
                "axis",
                "keep_dims",
                "name",
                "reduction_indices"
            ],
            "reduce_prod": [
                "input_tensor",
                "axis",
                "keep_dims",
                "name",
                "reduction_indices"
            ],
            "reduce_min": [
                "input_tensor",
                "axis",
                "keep_dims",
                "name",
                "reduction_indices"
            ],
            "reduce_max": [
                "input_tensor",
                "axis",
                "keep_dims",
                "name",
                "reduction_indices"
            ],
            "reduce_all": [
                "input_tensor",
                "axis",
                "keep_dims",
                "name",
                "reduction_indices"
            ],
            "reduce_any": [
                "input_tensor",
                "axis",
                "keep_dims",
                "name",
                "reduction_indices"
            ],
            "reduce_logsumexp": [
                "input_tensor",
                "axis",
                "keep_dims",
                "name",
                "reduction_indices"
            ],
            "trace": [
                "x",
                "name"
            ],
            "matmul": [
                "a",
                "b",
                "transpose_a",
                "transpose_b",
                "adjoint_a",
                "adjoint_b",
                "a_is_sparse",
                "b_is_sparse",
                "name"
            ],
            "_calc_mat_mul_flops": [
                "graph",
                "node"
            ],
            "_as_indexed_slices": [
                "x",
                "optimize"
            ],
            "_as_indexed_slices_list": [
                "inputs",
                "optimize"
            ],
            "add_n": [
                "inputs",
                "name"
            ],
            "accumulate_n": [
                "inputs",
                "shape",
                "tensor_dtype",
                "name"
            ],
            "sigmoid": [
                "x",
                "name"
            ],
            "tanh": [
                "x",
                "name"
            ],
            "cumsum": [
                "x",
                "axis",
                "exclusive",
                "reverse",
                "name"
            ],
            "cumprod": [
                "x",
                "axis",
                "exclusive",
                "reverse",
                "name"
            ],
            "conj": [
                "x",
                "name"
            ],
            "_BroadcastShape": [
                "op"
            ],
            "reduced_shape": [
                "input_shape",
                "axes"
            ]
        },
        "tensorflow.python.ops.gen_candidate_sampling_ops": {
            "_all_candidate_sampler": [
                "true_classes",
                "num_true",
                "num_sampled",
                "unique",
                "seed",
                "seed2",
                "name"
            ],
            "_compute_accidental_hits": [
                "true_classes",
                "sampled_candidates",
                "num_true",
                "seed",
                "seed2",
                "name"
            ],
            "_fixed_unigram_candidate_sampler": [
                "true_classes",
                "num_true",
                "num_sampled",
                "unique",
                "range_max",
                "vocab_file",
                "distortion",
                "num_reserved_ids",
                "num_shards",
                "shard",
                "unigrams",
                "seed",
                "seed2",
                "name"
            ],
            "_learned_unigram_candidate_sampler": [
                "true_classes",
                "num_true",
                "num_sampled",
                "unique",
                "range_max",
                "seed",
                "seed2",
                "name"
            ],
            "_log_uniform_candidate_sampler": [
                "true_classes",
                "num_true",
                "num_sampled",
                "unique",
                "range_max",
                "seed",
                "seed2",
                "name"
            ],
            "_thread_unsafe_unigram_candidate_sampler": [
                "true_classes",
                "num_true",
                "num_sampled",
                "unique",
                "range_max",
                "seed",
                "seed2",
                "name"
            ],
            "_uniform_candidate_sampler": [
                "true_classes",
                "num_true",
                "num_sampled",
                "unique",
                "range_max",
                "seed",
                "seed2",
                "name"
            ],
            "_InitOpDefLibrary": []
        },
        "tensorflow.python.ops.gen_script_ops": {
            "_py_func": [
                "input",
                "token",
                "Tout",
                "name"
            ],
            "_py_func_stateless": [
                "input",
                "token",
                "Tout",
                "name"
            ],
            "_InitOpDefLibrary": []
        },
        "tensorflow.python.ops.variables": {
            "global_variables": [],
            "all_variables": [],
            "_all_saveable_objects": [],
            "local_variables": [],
            "model_variables": [],
            "trainable_variables": [],
            "moving_average_variables": [],
            "variables_initializer": [
                "var_list",
                "name"
            ],
            "initialize_variables": [
                "var_list",
                "name"
            ],
            "global_variables_initializer": [],
            "initialize_all_variables": [],
            "local_variables_initializer": [],
            "initialize_local_variables": [],
            "is_variable_initialized": [
                "variable"
            ],
            "assert_variables_initialized": [
                "var_list"
            ],
            "report_uninitialized_variables": [
                "var_list",
                "name"
            ],
            "Variable": {
                "__init__": [
                    "self",
                    "initial_value",
                    "trainable",
                    "collections",
                    "validate_shape",
                    "caching_device",
                    "name",
                    "variable_def",
                    "dtype",
                    "expected_shape",
                    "import_scope"
                ],
                "__str__": [
                    "self"
                ],
                "_init_from_args": [
                    "self",
                    "initial_value",
                    "trainable",
                    "collections",
                    "validate_shape",
                    "caching_device",
                    "name",
                    "dtype",
                    "expected_shape"
                ],
                "_init_from_proto": [
                    "self",
                    "variable_def",
                    "import_scope"
                ],
                "_as_graph_element": [
                    "self"
                ],
                "_AsTensor": [
                    "self"
                ],
                "__iter__": [
                    "self"
                ],
                "value": [
                    "self"
                ],
                "read_value": [
                    "self"
                ],
                "_ref": [
                    "self"
                ],
                "set_shape": [
                    "self",
                    "shape"
                ],
                "eval": [
                    "self",
                    "session"
                ],
                "initialized_value": [
                    "self"
                ],
                "initial_value": [
                    "self"
                ],
                "assign": [
                    "self",
                    "value",
                    "use_locking"
                ],
                "assign_add": [
                    "self",
                    "delta",
                    "use_locking"
                ],
                "assign_sub": [
                    "self",
                    "delta",
                    "use_locking"
                ],
                "scatter_sub": [
                    "self",
                    "sparse_delta",
                    "use_locking"
                ],
                "count_up_to": [
                    "self",
                    "limit"
                ],
                "_TensorConversionFunction": [
                    "v",
                    "dtype",
                    "name",
                    "as_ref"
                ],
                "_OverloadAllOperators": [],
                "_OverloadOperator": [
                    "operator"
                ],
                "name": [
                    "self"
                ],
                "initializer": [
                    "self"
                ],
                "device": [
                    "self"
                ],
                "dtype": [
                    "self"
                ],
                "op": [
                    "self"
                ],
                "graph": [
                    "self"
                ],
                "get_shape": [
                    "self"
                ],
                "to_proto": [
                    "self",
                    "export_scope"
                ],
                "from_proto": [
                    "variable_def",
                    "import_scope"
                ],
                "_set_save_slice_info": [
                    "self",
                    "save_slice_info"
                ],
                "_get_save_slice_info": [
                    "self"
                ]
            },
            "PartitionedVariable": {
                "__init__": [
                    "self",
                    "name",
                    "shape",
                    "dtype",
                    "variable_list",
                    "partitions"
                ],
                "__iter__": [
                    "self"
                ],
                "__len__": [
                    "self"
                ],
                "_partition_axes": [
                    "self"
                ],
                "_concat": [
                    "self"
                ],
                "as_tensor": [
                    "self"
                ],
                "_TensorConversionFunction": [
                    "v",
                    "dtype",
                    "name",
                    "as_ref"
                ],
                "name": [
                    "self"
                ],
                "dtype": [
                    "self"
                ],
                "get_shape": [
                    "self"
                ],
                "_get_variable_list": [
                    "self"
                ],
                "_get_partitions": [
                    "self"
                ],
                "assign": [
                    "self",
                    "value",
                    "use_locking"
                ]
            }
        },
        "tensorflow.python.ops.gen_array_ops": {
            "batch_matrix_band_part": [
                "input",
                "num_lower",
                "num_upper",
                "name"
            ],
            "batch_matrix_diag": [
                "diagonal",
                "name"
            ],
            "batch_matrix_diag_part": [
                "input",
                "name"
            ],
            "batch_matrix_set_diag": [
                "input",
                "diagonal",
                "name"
            ],
            "_batch_to_space": [
                "input",
                "crops",
                "block_size",
                "name"
            ],
            "batch_to_space_nd": [
                "input",
                "block_shape",
                "crops",
                "name"
            ],
            "bitcast": [
                "input",
                "type",
                "name"
            ],
            "_broadcast_gradient_args": [
                "s0",
                "s1",
                "name"
            ],
            "check_numerics": [
                "tensor",
                "message",
                "name"
            ],
            "_concat": [
                "concat_dim",
                "values",
                "name"
            ],
            "_concat_offset": [
                "concat_dim",
                "shape",
                "name"
            ],
            "_concat_v2": [
                "values",
                "axis",
                "name"
            ],
            "_const": [
                "value",
                "dtype",
                "name"
            ],
            "copy": [
                "input",
                "tensor_name",
                "name"
            ],
            "copy_host": [
                "input",
                "tensor_name",
                "name"
            ],
            "debug_identity": [
                "input",
                "tensor_name",
                "debug_urls",
                "name"
            ],
            "debug_nan_count": [
                "input",
                "tensor_name",
                "debug_urls",
                "name"
            ],
            "depth_to_space": [
                "input",
                "block_size",
                "name"
            ],
            "dequantize": [
                "input",
                "min_range",
                "max_range",
                "mode",
                "name"
            ],
            "diag": [
                "diagonal",
                "name"
            ],
            "diag_part": [
                "input",
                "name"
            ],
            "_edit_distance": [
                "hypothesis_indices",
                "hypothesis_values",
                "hypothesis_shape",
                "truth_indices",
                "truth_values",
                "truth_shape",
                "normalize",
                "name"
            ],
            "_expand_dims": [
                "input",
                "dim",
                "name"
            ],
            "extract_image_patches": [
                "images",
                "ksizes",
                "strides",
                "rates",
                "padding",
                "name"
            ],
            "fake_quant_with_min_max_args": [
                "inputs",
                "min",
                "max",
                "name"
            ],
            "fake_quant_with_min_max_args_gradient": [
                "gradients",
                "inputs",
                "min",
                "max",
                "name"
            ],
            "fake_quant_with_min_max_vars": [
                "inputs",
                "min",
                "max",
                "name"
            ],
            "fake_quant_with_min_max_vars_gradient": [
                "gradients",
                "inputs",
                "min",
                "max",
                "name"
            ],
            "fake_quant_with_min_max_vars_per_channel": [
                "inputs",
                "min",
                "max",
                "name"
            ],
            "fake_quant_with_min_max_vars_per_channel_gradient": [
                "gradients",
                "inputs",
                "min",
                "max",
                "name"
            ],
            "fill": [
                "dims",
                "value",
                "name"
            ],
            "gather": [
                "params",
                "indices",
                "validate_indices",
                "name"
            ],
            "gather_nd": [
                "params",
                "indices",
                "name"
            ],
            "identity": [
                "input",
                "name"
            ],
            "immutable_const": [
                "dtype",
                "shape",
                "memory_region_name",
                "name"
            ],
            "invert_permutation": [
                "x",
                "name"
            ],
            "_list_diff": [
                "x",
                "y",
                "out_idx",
                "name"
            ],
            "matrix_band_part": [
                "input",
                "num_lower",
                "num_upper",
                "name"
            ],
            "matrix_diag": [
                "diagonal",
                "name"
            ],
            "matrix_diag_part": [
                "input",
                "name"
            ],
            "matrix_set_diag": [
                "input",
                "diagonal",
                "name"
            ],
            "_mirror_pad": [
                "input",
                "paddings",
                "mode",
                "name"
            ],
            "_mirror_pad_grad": [
                "input",
                "paddings",
                "mode",
                "name"
            ],
            "_one_hot": [
                "indices",
                "depth",
                "on_value",
                "off_value",
                "axis",
                "name"
            ],
            "_pack": [
                "values",
                "axis",
                "name"
            ],
            "_pad": [
                "input",
                "paddings",
                "name"
            ],
            "_placeholder": [
                "dtype",
                "shape",
                "name"
            ],
            "placeholder_v2": [
                "dtype",
                "shape",
                "name"
            ],
            "placeholder_with_default": [
                "input",
                "shape",
                "name"
            ],
            "quantize_and_dequantize": [
                "input",
                "signed_input",
                "num_bits",
                "range_given",
                "input_min",
                "input_max",
                "name"
            ],
            "quantize_v2": [
                "input",
                "min_range",
                "max_range",
                "T",
                "mode",
                "name"
            ],
            "quantized_concat": [
                "concat_dim",
                "values",
                "input_mins",
                "input_maxes",
                "name"
            ],
            "quantized_reshape": [
                "tensor",
                "shape",
                "input_min",
                "input_max",
                "name"
            ],
            "rank": [
                "input",
                "name"
            ],
            "_ref_identity": [
                "input",
                "name"
            ],
            "reshape": [
                "tensor",
                "shape",
                "name"
            ],
            "reverse": [
                "tensor",
                "dims",
                "name"
            ],
            "reverse_sequence": [
                "input",
                "seq_lengths",
                "seq_dim",
                "batch_dim",
                "name"
            ],
            "reverse_v2": [
                "tensor",
                "axis",
                "name"
            ],
            "scatter_nd": [
                "indices",
                "updates",
                "shape",
                "name"
            ],
            "shape": [
                "input",
                "out_type",
                "name"
            ],
            "shape_n": [
                "input",
                "out_type",
                "name"
            ],
            "size": [
                "input",
                "out_type",
                "name"
            ],
            "_slice": [
                "input",
                "begin",
                "size",
                "name"
            ],
            "_space_to_batch": [
                "input",
                "paddings",
                "block_size",
                "name"
            ],
            "space_to_batch_nd": [
                "input",
                "block_shape",
                "paddings",
                "name"
            ],
            "space_to_depth": [
                "input",
                "block_size",
                "name"
            ],
            "_split": [
                "split_dim",
                "value",
                "num_split",
                "name"
            ],
            "_split_v": [
                "value",
                "size_splits",
                "split_dim",
                "num_split",
                "name"
            ],
            "_squeeze": [
                "input",
                "squeeze_dims",
                "name"
            ],
            "stop_gradient": [
                "input",
                "name"
            ],
            "strided_slice": [
                "input",
                "begin",
                "end",
                "strides",
                "begin_mask",
                "end_mask",
                "ellipsis_mask",
                "new_axis_mask",
                "shrink_axis_mask",
                "name"
            ],
            "strided_slice_assign": [
                "ref",
                "begin",
                "end",
                "strides",
                "value",
                "begin_mask",
                "end_mask",
                "ellipsis_mask",
                "new_axis_mask",
                "shrink_axis_mask",
                "name"
            ],
            "strided_slice_grad": [
                "shape",
                "begin",
                "end",
                "strides",
                "dy",
                "begin_mask",
                "end_mask",
                "ellipsis_mask",
                "new_axis_mask",
                "shrink_axis_mask",
                "name"
            ],
            "tile": [
                "input",
                "multiples",
                "name"
            ],
            "_tile_grad": [
                "input",
                "multiples",
                "name"
            ],
            "transpose": [
                "x",
                "perm",
                "name"
            ],
            "unique": [
                "x",
                "out_idx",
                "name"
            ],
            "unique_with_counts": [
                "x",
                "out_idx",
                "name"
            ],
            "_unpack": [
                "value",
                "num",
                "axis",
                "name"
            ],
            "where": [
                "input",
                "name"
            ],
            "_zeros_like": [
                "x",
                "name"
            ],
            "_InitOpDefLibrary": []
        },
        "tensorflow.python.ops.control_flow_ops": {
            "Assert": [
                "condition",
                "data",
                "summarize",
                "name"
            ],
            "_Identity": [
                "data",
                "name"
            ],
            "_NextIteration": [
                "data",
                "name"
            ],
            "_Enter": [
                "data",
                "frame_name",
                "is_constant",
                "parallel_iterations",
                "use_ref",
                "use_input_shape",
                "name"
            ],
            "exit": [
                "data",
                "name"
            ],
            "switch": [
                "data",
                "pred",
                "dtype",
                "name"
            ],
            "_SwitchRefOrTensor": [
                "data",
                "pred",
                "name"
            ],
            "merge": [
                "inputs",
                "name"
            ],
            "_convert_tensorarrays_to_flows": [
                "tensors_or_tensor_arrays"
            ],
            "_make_tensor_array": [
                "ta",
                "t_or_flow"
            ],
            "_convert_flows_to_tensorarrays": [
                "tensors_or_tensorarrays",
                "tensors_or_flows"
            ],
            "_IsLoopConstantEnter": [
                "op"
            ],
            "_GetLoopConstantEnter": [
                "value"
            ],
            "_GetOutputContext": [
                "op"
            ],
            "_ShapeLessThanOrEqual": [
                "shape1",
                "shape2"
            ],
            "_SetShapeInvariants": [
                "input_vars",
                "enter_vars",
                "shapes"
            ],
            "_EnforceShapeInvariant": [
                "merge_var",
                "next_var"
            ],
            "_AddNextAndBackEdge": [
                "m",
                "v"
            ],
            "_GetWhileContext": [
                "op"
            ],
            "MaybeCreateControlFlowState": [
                "between_op_list",
                "between_ops",
                "colocate_gradients_with_ops"
            ],
            "IsSwitch": [
                "op"
            ],
            "IsLoopExit": [
                "op"
            ],
            "IsLoopSwitch": [
                "op"
            ],
            "ZerosLikeOutsideLoop": [
                "op",
                "index"
            ],
            "cond": [
                "pred",
                "fn1",
                "fn2",
                "name"
            ],
            "while_loop": [
                "cond",
                "body",
                "loop_vars",
                "shape_invariants",
                "parallel_iterations",
                "back_prop",
                "swap_memory",
                "name"
            ],
            "_AsTensorList": [
                "x",
                "p"
            ],
            "_CheckResults": [
                "a",
                "b"
            ],
            "with_dependencies": [
                "dependencies",
                "output_tensor",
                "name"
            ],
            "_GroupControlDeps": [
                "dev",
                "deps",
                "name"
            ],
            "group": [],
            "tuple": [
                "tensors",
                "name",
                "control_inputs"
            ],
            "case": [
                "pred_fn_pairs",
                "default",
                "exclusive",
                "name"
            ],
            "GradLoopState": {
                "__init__": [
                    "self",
                    "forward_ctxt",
                    "outer_grad_state"
                ],
                "outer_grad_state": [
                    "self"
                ],
                "forward_context": [
                    "self"
                ],
                "forward_index": [
                    "self"
                ],
                "forward_sync": [
                    "self"
                ],
                "grad_context": [
                    "self"
                ],
                "grad_index": [
                    "self"
                ],
                "grad_sync": [
                    "self"
                ],
                "history_map": [
                    "self"
                ],
                "switch_map": [
                    "self"
                ],
                "unused_exits": [
                    "self"
                ],
                "deferred_exits": [
                    "self"
                ],
                "pending_exits_count": [
                    "self",
                    "cnt"
                ],
                "AddForwardAccumulator": [
                    "self",
                    "value",
                    "dead_branch"
                ],
                "AddBackPropAccumulatedValue": [
                    "self",
                    "history_value",
                    "value",
                    "dead_branch"
                ],
                "GetRealValue": [
                    "self",
                    "value"
                ]
            },
            "ControlFlowState": {
                "__init__": [
                    "self"
                ],
                "GetGradState": [
                    "self",
                    "op",
                    "before"
                ],
                "ProcessUnusedLoopExits": [
                    "self",
                    "pending_count",
                    "to_ops_set"
                ],
                "EnterGradWhileContext": [
                    "self",
                    "op",
                    "before"
                ],
                "ExitGradWhileContext": [
                    "self",
                    "op",
                    "before"
                ],
                "AddWhileContext": [
                    "self",
                    "op",
                    "between_op_list",
                    "between_ops"
                ],
                "ZerosLikeForExit": [
                    "self",
                    "val"
                ],
                "ZerosLike": [
                    "self",
                    "op",
                    "index"
                ],
                "PostProcessing": [
                    "self"
                ]
            },
            "ControlFlowContext": {
                "__init__": [
                    "self",
                    "values_def",
                    "import_scope"
                ],
                "_init_values_from_proto": [
                    "self",
                    "values_def",
                    "import_scope"
                ],
                "outer_context": [
                    "self"
                ],
                "grad_state": [
                    "self"
                ],
                "back_prop": [
                    "self"
                ],
                "_to_proto": [
                    "self",
                    "export_scope"
                ],
                "_from_proto": [
                    "values_def",
                    "import_scope"
                ],
                "AddName": [
                    "self",
                    "name"
                ],
                "Enter": [
                    "self"
                ],
                "Exit": [
                    "self"
                ],
                "ExitResult": [
                    "self",
                    "result"
                ],
                "GetWhileContext": [
                    "self"
                ],
                "_IsInOuterContext": [
                    "self",
                    "op"
                ],
                "_MaybeAddToWhileContext": [
                    "self",
                    "op"
                ],
                "_MaybeRemoveExternalControlEdges": [
                    "self",
                    "op"
                ]
            },
            "CondContext": {
                "__init__": [
                    "self",
                    "pred",
                    "pivot",
                    "branch",
                    "name",
                    "context_def",
                    "import_scope"
                ],
                "_init_from_proto": [
                    "self",
                    "context_def",
                    "import_scope"
                ],
                "name": [
                    "self"
                ],
                "pred": [
                    "self"
                ],
                "pivot": [
                    "self"
                ],
                "branch": [
                    "self"
                ],
                "grad_state": [
                    "self"
                ],
                "back_prop": [
                    "self"
                ],
                "GetControlPivot": [
                    "self"
                ],
                "to_proto": [
                    "self",
                    "export_scope"
                ],
                "from_proto": [
                    "context_def",
                    "import_scope"
                ],
                "AddValue": [
                    "self",
                    "val"
                ],
                "AddOp": [
                    "self",
                    "op"
                ],
                "_AddOpInternal": [
                    "self",
                    "op"
                ],
                "_ProcessOutputTensor": [
                    "self",
                    "val"
                ],
                "BuildCondBranch": [
                    "self",
                    "fn"
                ]
            },
            "WhileContext": {
                "__init__": [
                    "self",
                    "parallel_iterations",
                    "back_prop",
                    "swap_memory",
                    "name",
                    "grad_state",
                    "context_def",
                    "import_scope"
                ],
                "_init_from_args": [
                    "self",
                    "parallel_iterations",
                    "back_prop",
                    "swap_memory",
                    "name"
                ],
                "_init_from_proto": [
                    "self",
                    "context_def",
                    "import_scope"
                ],
                "name": [
                    "self"
                ],
                "parallel_iterations": [
                    "self"
                ],
                "back_prop": [
                    "self"
                ],
                "swap_memory": [
                    "self"
                ],
                "pivot": [
                    "self"
                ],
                "loop_exits": [
                    "self"
                ],
                "grad_state": [
                    "self"
                ],
                "to_proto": [
                    "self",
                    "export_scope"
                ],
                "from_proto": [
                    "context_def",
                    "import_scope"
                ],
                "GetWhileContext": [
                    "self"
                ],
                "GetControlPivot": [
                    "self"
                ],
                "AddValue": [
                    "self",
                    "val"
                ],
                "AddOp": [
                    "self",
                    "op"
                ],
                "_AddOpInternal": [
                    "self",
                    "op"
                ],
                "_MaybeAddControlDependency": [
                    "self",
                    "op"
                ],
                "AddForwardLoopCounter": [
                    "self",
                    "outer_grad_state"
                ],
                "AddBackPropLoopCounter": [
                    "self",
                    "count",
                    "outer_grad_state"
                ],
                "AddBackPropAccumulator": [
                    "self",
                    "op",
                    "grad"
                ],
                "AddBackPropIndexedSlicesAccumulator": [
                    "self",
                    "op",
                    "grad"
                ],
                "_InitializeValues": [
                    "self",
                    "values"
                ],
                "_BuildLoop": [
                    "self",
                    "pred",
                    "body",
                    "original_loop_vars",
                    "loop_vars",
                    "shape_invariants"
                ],
                "BuildLoop": [
                    "self",
                    "pred",
                    "body",
                    "loop_vars",
                    "shape_invariants"
                ],
                "_FixControlInputsAndContext": [
                    "self",
                    "enters"
                ]
            }
        },
        "tensorflow.python.ops.template": {
            "make_template": [
                "name_",
                "func_",
                "create_scope_now_",
                "unique_name_"
            ],
            "_skip_common_stack_elements": [
                "stacktrace",
                "base_case"
            ],
            "Template": {
                "__init__": [
                    "self",
                    "name",
                    "func",
                    "create_scope_now",
                    "unique_name"
                ],
                "_call_func": [
                    "self",
                    "args",
                    "kwargs",
                    "check_for_new_variables"
                ],
                "__call__": [
                    "self"
                ],
                "var_scope": [
                    "self"
                ]
            }
        },
        "tensorflow.python.ops.check_ops": {
            "assert_proper_iterable": [
                "values"
            ],
            "assert_negative": [
                "x",
                "data",
                "summarize",
                "message",
                "name"
            ],
            "assert_positive": [
                "x",
                "data",
                "summarize",
                "message",
                "name"
            ],
            "assert_non_negative": [
                "x",
                "data",
                "summarize",
                "message",
                "name"
            ],
            "assert_non_positive": [
                "x",
                "data",
                "summarize",
                "message",
                "name"
            ],
            "assert_equal": [
                "x",
                "y",
                "data",
                "summarize",
                "message",
                "name"
            ],
            "assert_less": [
                "x",
                "y",
                "data",
                "summarize",
                "message",
                "name"
            ],
            "assert_less_equal": [
                "x",
                "y",
                "data",
                "summarize",
                "message",
                "name"
            ],
            "assert_greater": [
                "x",
                "y",
                "data",
                "summarize",
                "message",
                "name"
            ],
            "assert_greater_equal": [
                "x",
                "y",
                "data",
                "summarize",
                "message",
                "name"
            ],
            "_assert_rank_condition": [
                "x",
                "rank",
                "static_condition",
                "dynamic_condition",
                "data",
                "summarize"
            ],
            "assert_rank": [
                "x",
                "rank",
                "data",
                "summarize",
                "message",
                "name"
            ],
            "assert_rank_at_least": [
                "x",
                "rank",
                "data",
                "summarize",
                "message",
                "name"
            ],
            "assert_integer": [
                "x",
                "message",
                "name"
            ],
            "assert_type": [
                "tensor",
                "tf_type",
                "message",
                "name"
            ],
            "_get_diff_for_monotonic_comparison": [
                "x"
            ],
            "is_numeric_tensor": [
                "tensor"
            ],
            "is_non_decreasing": [
                "x",
                "name"
            ],
            "is_strictly_increasing": [
                "x",
                "name"
            ]
        },
        "tensorflow.python.ops.state_ops": {
            "variable_op": [
                "shape",
                "dtype",
                "name",
                "set_shape",
                "container",
                "shared_name"
            ],
            "init_variable": [
                "v",
                "init",
                "name"
            ]
        },
        "tensorflow.python.ops.gen_logging_ops": {
            "_assert": [
                "condition",
                "data",
                "summarize",
                "name"
            ],
            "_audio_summary": [
                "tag",
                "tensor",
                "sample_rate",
                "max_outputs",
                "name"
            ],
            "_audio_summary_v2": [
                "tag",
                "tensor",
                "sample_rate",
                "max_outputs",
                "name"
            ],
            "_histogram_summary": [
                "tag",
                "values",
                "name"
            ],
            "_image_summary": [
                "tag",
                "tensor",
                "max_images",
                "bad_color",
                "name"
            ],
            "_merge_summary": [
                "inputs",
                "name"
            ],
            "_print": [
                "input",
                "data",
                "message",
                "first_n",
                "summarize",
                "name"
            ],
            "_scalar_summary": [
                "tags",
                "values",
                "name"
            ],
            "_tensor_summary": [
                "tensor",
                "description",
                "labels",
                "display_name",
                "name"
            ],
            "_InitOpDefLibrary": []
        },
        "tensorflow.python.ops.gradient_checker": {
            "_product": [
                "t"
            ],
            "_extra_feeds": [
                "extra_feed_dict",
                "new_feeds"
            ],
            "_compute_theoretical_jacobian": [
                "x",
                "x_shape",
                "x_data",
                "dy",
                "dy_shape",
                "dx",
                "extra_feed_dict"
            ],
            "_compute_numeric_jacobian": [
                "x",
                "x_shape",
                "x_data",
                "y",
                "y_shape",
                "delta",
                "extra_feed_dict"
            ],
            "_compute_dx_and_dy": [
                "x",
                "y",
                "y_shape"
            ],
            "_compute_gradient": [
                "x",
                "x_shape",
                "dx",
                "y",
                "y_shape",
                "dy",
                "x_init_value",
                "delta",
                "extra_feed_dict"
            ],
            "_compute_gradient_list": [
                "x",
                "x_shape",
                "y",
                "y_shape",
                "x_init_value",
                "delta",
                "init_targets",
                "extra_feed_dict"
            ],
            "compute_gradient": [
                "x",
                "x_shape",
                "y",
                "y_shape",
                "x_init_value",
                "delta",
                "init_targets",
                "extra_feed_dict"
            ],
            "compute_gradient_error": [
                "x",
                "x_shape",
                "y",
                "y_shape",
                "x_init_value",
                "delta",
                "init_targets",
                "extra_feed_dict"
            ]
        },
        "tensorflow.python.ops.rnn": {
            "_infer_state_dtype": [
                "explicit_dtype",
                "state"
            ],
            "rnn": [
                "cell",
                "inputs",
                "initial_state",
                "dtype",
                "sequence_length",
                "scope"
            ],
            "state_saving_rnn": [
                "cell",
                "inputs",
                "state_saver",
                "state_name",
                "sequence_length",
                "scope"
            ],
            "_rnn_step": [
                "time",
                "sequence_length",
                "min_sequence_length",
                "max_sequence_length",
                "zero_output",
                "state",
                "call_cell",
                "state_size",
                "skip_conditionals"
            ],
            "_reverse_seq": [
                "input_seq",
                "lengths"
            ],
            "bidirectional_rnn": [
                "cell_fw",
                "cell_bw",
                "inputs",
                "initial_state_fw",
                "initial_state_bw",
                "dtype",
                "sequence_length",
                "scope"
            ],
            "bidirectional_dynamic_rnn": [
                "cell_fw",
                "cell_bw",
                "inputs",
                "sequence_length",
                "initial_state_fw",
                "initial_state_bw",
                "dtype",
                "parallel_iterations",
                "swap_memory",
                "time_major",
                "scope"
            ],
            "dynamic_rnn": [
                "cell",
                "inputs",
                "sequence_length",
                "initial_state",
                "dtype",
                "parallel_iterations",
                "swap_memory",
                "time_major",
                "scope"
            ],
            "_dynamic_rnn_loop": [
                "cell",
                "inputs",
                "initial_state",
                "parallel_iterations",
                "swap_memory",
                "sequence_length",
                "dtype"
            ],
            "raw_rnn": [
                "cell",
                "loop_fn",
                "parallel_iterations",
                "swap_memory",
                "scope"
            ]
        },
        "tensorflow.python.ops.gen_functional_ops": {
            "_symbolic_gradient": [
                "input",
                "Tout",
                "f",
                "name"
            ],
            "_InitOpDefLibrary": []
        },
        "tensorflow.python.ops.string_ops": {
            "string_split": [
                "source",
                "delimiter"
            ]
        },
        "tensorflow.python.ops.batch_norm_benchmark": {
            "batch_norm_op": [
                "tensor",
                "mean",
                "variance",
                "beta",
                "gamma",
                "scale"
            ],
            "batch_norm_py": [
                "tensor",
                "mean",
                "variance",
                "beta",
                "gamma",
                "scale"
            ],
            "batch_norm_slow": [
                "tensor",
                "mean",
                "variance",
                "beta",
                "gamma",
                "scale"
            ],
            "build_graph": [
                "device",
                "input_shape",
                "axes",
                "num_layers",
                "mode",
                "scale",
                "train"
            ],
            "print_difference": [
                "mode",
                "t1",
                "t2"
            ],
            "BatchNormBenchmark": {
                "_run_graph": [
                    "self",
                    "device",
                    "input_shape",
                    "axes",
                    "num_layers",
                    "mode",
                    "scale",
                    "train",
                    "num_iters"
                ],
                "benchmark_batch_norm": [
                    "self"
                ]
            }
        },
        "tensorflow.python.ops.histogram_ops_test": {
            "HistogramFixedWidthTest": {
                "setUp": [
                    "self"
                ],
                "test_empty_input_gives_all_zero_counts": [
                    "self"
                ],
                "test_one_update_on_constant_input": [
                    "self"
                ],
                "test_one_update_on_constant_2d_input": [
                    "self"
                ],
                "test_two_updates_on_constant_input": [
                    "self"
                ],
                "test_two_updates_on_scalar_input": [
                    "self"
                ],
                "test_multiple_random_accumulating_updates_results_in_right_dist": [
                    "self"
                ]
            }
        },
        "tensorflow.python.ops.functional_ops": {
            "foldl": [
                "fn",
                "elems",
                "initializer",
                "parallel_iterations",
                "back_prop",
                "swap_memory",
                "name"
            ],
            "foldr": [
                "fn",
                "elems",
                "initializer",
                "parallel_iterations",
                "back_prop",
                "swap_memory",
                "name"
            ],
            "map_fn": [
                "fn",
                "elems",
                "dtype",
                "parallel_iterations",
                "back_prop",
                "swap_memory",
                "infer_shape",
                "name"
            ],
            "scan": [
                "fn",
                "elems",
                "initializer",
                "parallel_iterations",
                "back_prop",
                "swap_memory",
                "infer_shape",
                "name"
            ]
        },
        "tensorflow.python.ops.data_flow_ops": {
            "_as_type_list": [
                "dtypes"
            ],
            "_as_shape_list": [
                "shapes",
                "dtypes",
                "unknown_dim_allowed",
                "unknown_rank_allowed"
            ],
            "_as_name_list": [
                "names",
                "dtypes"
            ],
            "_shape_common": [
                "s1",
                "s2"
            ],
            "initialize_all_tables": [
                "name"
            ],
            "QueueBase": {
                "__init__": [
                    "self",
                    "dtypes",
                    "shapes",
                    "names",
                    "queue_ref"
                ],
                "from_list": [
                    "index",
                    "queues"
                ],
                "queue_ref": [
                    "self"
                ],
                "name": [
                    "self"
                ],
                "dtypes": [
                    "self"
                ],
                "shapes": [
                    "self"
                ],
                "names": [
                    "self"
                ],
                "_check_enqueue_dtypes": [
                    "self",
                    "vals"
                ],
                "_scope_vals": [
                    "self",
                    "vals"
                ],
                "enqueue": [
                    "self",
                    "vals",
                    "name"
                ],
                "enqueue_many": [
                    "self",
                    "vals",
                    "name"
                ],
                "_dequeue_return_value": [
                    "self",
                    "tensors"
                ],
                "dequeue": [
                    "self",
                    "name"
                ],
                "dequeue_many": [
                    "self",
                    "n",
                    "name"
                ],
                "dequeue_up_to": [
                    "self",
                    "n",
                    "name"
                ],
                "close": [
                    "self",
                    "cancel_pending_enqueues",
                    "name"
                ],
                "size": [
                    "self",
                    "name"
                ]
            },
            "RandomShuffleQueue": {
                "__init__": [
                    "self",
                    "capacity",
                    "min_after_dequeue",
                    "dtypes",
                    "shapes",
                    "names",
                    "seed",
                    "shared_name",
                    "name"
                ]
            },
            "FIFOQueue": {
                "__init__": [
                    "self",
                    "capacity",
                    "dtypes",
                    "shapes",
                    "names",
                    "shared_name",
                    "name"
                ]
            },
            "PaddingFIFOQueue": {
                "__init__": [
                    "self",
                    "capacity",
                    "dtypes",
                    "shapes",
                    "names",
                    "shared_name",
                    "name"
                ]
            },
            "PriorityQueue": {
                "__init__": [
                    "self",
                    "capacity",
                    "types",
                    "shapes",
                    "names",
                    "shared_name",
                    "name"
                ]
            },
            "Barrier": {
                "__init__": [
                    "self",
                    "types",
                    "shapes",
                    "shared_name",
                    "name"
                ],
                "barrier_ref": [
                    "self"
                ],
                "name": [
                    "self"
                ],
                "insert_many": [
                    "self",
                    "component_index",
                    "keys",
                    "values",
                    "name"
                ],
                "take_many": [
                    "self",
                    "num_elements",
                    "allow_small_batch",
                    "timeout",
                    "name"
                ],
                "close": [
                    "self",
                    "cancel_pending_enqueues",
                    "name"
                ],
                "ready_size": [
                    "self",
                    "name"
                ],
                "incomplete_size": [
                    "self",
                    "name"
                ]
            },
            "ConditionalAccumulatorBase": {
                "__init__": [
                    "self",
                    "dtype",
                    "shape",
                    "accumulator_ref"
                ],
                "accumulator_ref": [
                    "self"
                ],
                "name": [
                    "self"
                ],
                "dtype": [
                    "self"
                ],
                "num_accumulated": [
                    "self",
                    "name"
                ],
                "set_global_step": [
                    "self",
                    "new_global_step",
                    "name"
                ]
            },
            "ConditionalAccumulator": {
                "__init__": [
                    "self",
                    "dtype",
                    "shape",
                    "shared_name",
                    "name"
                ],
                "apply_grad": [
                    "self",
                    "grad",
                    "local_step",
                    "name"
                ],
                "take_grad": [
                    "self",
                    "num_required",
                    "name"
                ]
            },
            "SparseConditionalAccumulator": {
                "__init__": [
                    "self",
                    "dtype",
                    "shape",
                    "shared_name",
                    "name"
                ],
                "apply_indexed_slices_grad": [
                    "self",
                    "grad",
                    "local_step",
                    "name"
                ],
                "apply_grad": [
                    "self",
                    "grad_indices",
                    "grad_values",
                    "grad_shape",
                    "local_step",
                    "name"
                ],
                "take_grad": [
                    "self",
                    "num_required",
                    "name"
                ],
                "take_indexed_slices_grad": [
                    "self",
                    "num_required",
                    "name"
                ]
            }
        },
        "tensorflow.python.ops.gen_image_ops": {
            "adjust_contrast": [
                "images",
                "contrast_factor",
                "min_value",
                "max_value",
                "name"
            ],
            "_adjust_contrastv2": [
                "images",
                "contrast_factor",
                "name"
            ],
            "adjust_hue": [
                "images",
                "delta",
                "name"
            ],
            "crop_and_resize": [
                "image",
                "boxes",
                "box_ind",
                "crop_size",
                "method",
                "extrapolation_value",
                "name"
            ],
            "crop_and_resize_grad_boxes": [
                "grads",
                "image",
                "boxes",
                "box_ind",
                "method",
                "name"
            ],
            "crop_and_resize_grad_image": [
                "grads",
                "boxes",
                "box_ind",
                "image_size",
                "T",
                "method",
                "name"
            ],
            "decode_gif": [
                "contents",
                "name"
            ],
            "decode_jpeg": [
                "contents",
                "channels",
                "ratio",
                "fancy_upscaling",
                "try_recover_truncated",
                "acceptable_fraction",
                "name"
            ],
            "decode_png": [
                "contents",
                "channels",
                "dtype",
                "name"
            ],
            "draw_bounding_boxes": [
                "images",
                "boxes",
                "name"
            ],
            "encode_jpeg": [
                "image",
                "format",
                "quality",
                "progressive",
                "optimize_size",
                "chroma_downsampling",
                "density_unit",
                "x_density",
                "y_density",
                "xmp_metadata",
                "name"
            ],
            "encode_png": [
                "image",
                "compression",
                "name"
            ],
            "extract_glimpse": [
                "input",
                "size",
                "offsets",
                "centered",
                "normalized",
                "uniform_noise",
                "name"
            ],
            "hsv_to_rgb": [
                "images",
                "name"
            ],
            "non_max_suppression": [
                "boxes",
                "scores",
                "max_output_size",
                "iou_threshold",
                "name"
            ],
            "rgb_to_hsv": [
                "images",
                "name"
            ],
            "_random_crop": [
                "image",
                "size",
                "seed",
                "seed2",
                "name"
            ],
            "resize_area": [
                "images",
                "size",
                "align_corners",
                "name"
            ],
            "resize_bicubic": [
                "images",
                "size",
                "align_corners",
                "name"
            ],
            "resize_bilinear": [
                "images",
                "size",
                "align_corners",
                "name"
            ],
            "_resize_bilinear_grad": [
                "grads",
                "original_image",
                "align_corners",
                "name"
            ],
            "resize_nearest_neighbor": [
                "images",
                "size",
                "align_corners",
                "name"
            ],
            "_resize_nearest_neighbor_grad": [
                "grads",
                "size",
                "align_corners",
                "name"
            ],
            "sample_distorted_bounding_box": [
                "image_size",
                "bounding_boxes",
                "seed",
                "seed2",
                "min_object_covered",
                "aspect_ratio_range",
                "area_range",
                "max_attempts",
                "use_image_if_no_bounding_boxes",
                "name"
            ],
            "_InitOpDefLibrary": []
        },
        "tensorflow.python.ops.special_math_ops_test": {
            "LBetaTest": {
                "test_one_dimensional_arg": [
                    "self"
                ],
                "test_one_dimensional_arg_dynamic_alloc": [
                    "self"
                ],
                "test_two_dimensional_arg": [
                    "self"
                ],
                "test_two_dimensional_arg_dynamic_alloc": [
                    "self"
                ],
                "test_two_dimensional_proper_shape": [
                    "self"
                ],
                "test_complicated_shape": [
                    "self"
                ],
                "test_length_1_last_dimension_results_in_one": [
                    "self"
                ],
                "test_empty_rank2_or_greater_input_gives_empty_output": [
                    "self"
                ],
                "test_empty_rank2_or_greater_input_gives_empty_output_dynamic_alloc": [
                    "self"
                ],
                "test_empty_rank1_input_raises_value_error": [
                    "self"
                ],
                "test_empty_rank1_dynamic_alloc_input_raises_op_error": [
                    "self"
                ]
            },
            "LBetaTestGpu": {},
            "EinsumTest": {
                "test_simple": [
                    "self"
                ],
                "test_long": [
                    "self"
                ],
                "test_invalid": [
                    "self"
                ],
                "test_dim_mismatch": [
                    "self"
                ],
                "run_test": [
                    "self",
                    "axes"
                ],
                "test_input_is_placeholder": [
                    "self"
                ]
            }
        },
        "tensorflow.python.ops.nn": {
            "log_poisson_loss": [
                "log_input",
                "targets",
                "compute_full_loss",
                "name"
            ],
            "sigmoid_cross_entropy_with_logits": [
                "logits",
                "targets",
                "name"
            ],
            "weighted_cross_entropy_with_logits": [
                "logits",
                "targets",
                "pos_weight",
                "name"
            ],
            "relu_layer": [
                "x",
                "weights",
                "biases",
                "name"
            ],
            "l2_normalize": [
                "x",
                "dim",
                "epsilon",
                "name"
            ],
            "zero_fraction": [
                "value",
                "name"
            ],
            "depthwise_conv2d": [
                "input",
                "filter",
                "strides",
                "padding",
                "name"
            ],
            "separable_conv2d": [
                "input",
                "depthwise_filter",
                "pointwise_filter",
                "strides",
                "padding",
                "name"
            ],
            "sufficient_statistics": [
                "x",
                "axes",
                "shift",
                "keep_dims",
                "name"
            ],
            "normalize_moments": [
                "counts",
                "mean_ss",
                "variance_ss",
                "shift",
                "name"
            ],
            "moments": [
                "x",
                "axes",
                "shift",
                "name",
                "keep_dims"
            ],
            "weighted_moments": [
                "x",
                "axes",
                "frequency_weights",
                "name",
                "keep_dims"
            ],
            "batch_normalization": [
                "x",
                "mean",
                "variance",
                "offset",
                "scale",
                "variance_epsilon",
                "name"
            ],
            "fused_batch_norm": [
                "x",
                "scale",
                "offset",
                "mean",
                "variance",
                "epsilon",
                "data_format",
                "is_training",
                "name"
            ],
            "batch_norm_with_global_normalization": [
                "t",
                "m",
                "v",
                "beta",
                "gamma",
                "variance_epsilon",
                "scale_after_normalization",
                "name"
            ],
            "_sum_rows": [
                "x"
            ],
            "_compute_sampled_logits": [
                "weights",
                "biases",
                "inputs",
                "labels",
                "num_sampled",
                "num_classes",
                "num_true",
                "sampled_values",
                "subtract_log_q",
                "remove_accidental_hits",
                "partition_strategy",
                "name"
            ],
            "nce_loss": [
                "weights",
                "biases",
                "inputs",
                "labels",
                "num_sampled",
                "num_classes",
                "num_true",
                "sampled_values",
                "remove_accidental_hits",
                "partition_strategy",
                "name"
            ],
            "sampled_softmax_loss": [
                "weights",
                "biases",
                "inputs",
                "labels",
                "num_sampled",
                "num_classes",
                "num_true",
                "sampled_values",
                "remove_accidental_hits",
                "partition_strategy",
                "name"
            ]
        },
        "tensorflow.python.ops.gen_sparse_ops": {
            "_add_many_sparse_to_tensors_map": [
                "sparse_indices",
                "sparse_values",
                "sparse_shape",
                "container",
                "shared_name",
                "name"
            ],
            "_add_sparse_to_tensors_map": [
                "sparse_indices",
                "sparse_values",
                "sparse_shape",
                "container",
                "shared_name",
                "name"
            ],
            "_deserialize_many_sparse": [
                "serialized_sparse",
                "dtype",
                "name"
            ],
            "_serialize_many_sparse": [
                "sparse_indices",
                "sparse_values",
                "sparse_shape",
                "name"
            ],
            "_serialize_sparse": [
                "sparse_indices",
                "sparse_values",
                "sparse_shape",
                "name"
            ],
            "_sparse_add": [
                "a_indices",
                "a_values",
                "a_shape",
                "b_indices",
                "b_values",
                "b_shape",
                "thresh",
                "name"
            ],
            "_sparse_add_grad": [
                "backprop_val_grad",
                "a_indices",
                "b_indices",
                "sum_indices",
                "name"
            ],
            "_sparse_concat": [
                "indices",
                "values",
                "shapes",
                "concat_dim",
                "name"
            ],
            "sparse_dense_cwise_add": [
                "sp_indices",
                "sp_values",
                "sp_shape",
                "dense",
                "name"
            ],
            "sparse_dense_cwise_div": [
                "sp_indices",
                "sp_values",
                "sp_shape",
                "dense",
                "name"
            ],
            "sparse_dense_cwise_mul": [
                "sp_indices",
                "sp_values",
                "sp_shape",
                "dense",
                "name"
            ],
            "sparse_reduce_sum": [
                "input_indices",
                "input_values",
                "input_shape",
                "reduction_axes",
                "keep_dims",
                "name"
            ],
            "sparse_reduce_sum_sparse": [
                "input_indices",
                "input_values",
                "input_shape",
                "reduction_axes",
                "keep_dims",
                "name"
            ],
            "_sparse_reorder": [
                "input_indices",
                "input_values",
                "input_shape",
                "name"
            ],
            "_sparse_reshape": [
                "input_indices",
                "input_shape",
                "new_shape",
                "name"
            ],
            "sparse_softmax": [
                "sp_indices",
                "sp_values",
                "sp_shape",
                "name"
            ],
            "sparse_sparse_maximum": [
                "a_indices",
                "a_values",
                "a_shape",
                "b_indices",
                "b_values",
                "b_shape",
                "name"
            ],
            "sparse_sparse_minimum": [
                "a_indices",
                "a_values",
                "a_shape",
                "b_indices",
                "b_values",
                "b_shape",
                "name"
            ],
            "_sparse_split": [
                "split_dim",
                "indices",
                "values",
                "shape",
                "num_split",
                "name"
            ],
            "_sparse_tensor_dense_add": [
                "a_indices",
                "a_values",
                "a_shape",
                "b",
                "name"
            ],
            "_sparse_tensor_dense_mat_mul": [
                "a_indices",
                "a_values",
                "a_shape",
                "b",
                "adjoint_a",
                "adjoint_b",
                "name"
            ],
            "_sparse_to_dense": [
                "sparse_indices",
                "output_shape",
                "sparse_values",
                "default_value",
                "validate_indices",
                "name"
            ],
            "_take_many_sparse_from_tensors_map": [
                "sparse_handles",
                "dtype",
                "container",
                "shared_name",
                "name"
            ],
            "_InitOpDefLibrary": []
        },
        "tensorflow.python.training.queue_runner": {},
        "tensorflow.python.training.saver_large_variable_test": {
            "SaverLargeVariableTest": {
                "testLargeVariable": [
                    "self"
                ]
            }
        },
        "tensorflow.python.training.supervisor_test": {
            "_summary_iterator": [
                "test_dir"
            ],
            "_test_dir": [
                "test_name"
            ],
            "SupervisorTest": {
                "_wait_for_glob": [
                    "self",
                    "pattern",
                    "timeout_secs",
                    "for_checkpoint"
                ],
                "testBasics": [
                    "self"
                ],
                "testManagedSession": [
                    "self"
                ],
                "testManagedSessionUserError": [
                    "self"
                ],
                "testManagedSessionIgnoreOutOfRangeError": [
                    "self"
                ],
                "testManagedSessionDoNotKeepSummaryWriter": [
                    "self"
                ],
                "testManagedSessionKeepSummaryWriter": [
                    "self"
                ],
                "_csv_data": [
                    "self",
                    "logdir"
                ],
                "testManagedEndOfInputOneQueue": [
                    "self"
                ],
                "testManagedEndOfInputTwoQueues": [
                    "self"
                ],
                "testManagedMainErrorTwoQueues": [
                    "self"
                ],
                "testSessionConfig": [
                    "self"
                ],
                "testChiefCanWriteEvents": [
                    "self"
                ],
                "testNonChiefCannotWriteEvents": [
                    "self"
                ],
                "testNoLogdirButWantSummary": [
                    "self"
                ],
                "testLogdirButExplicitlyNoSummaryWriter": [
                    "self"
                ],
                "testNoLogdirButExplicitSummaryWriter": [
                    "self"
                ],
                "testNoLogdirSucceeds": [
                    "self"
                ],
                "testUseSessionManager": [
                    "self"
                ],
                "testInitOp": [
                    "self"
                ],
                "testInitFn": [
                    "self"
                ],
                "testInitOpWithFeedDict": [
                    "self"
                ],
                "testReadyForLocalInitOp": [
                    "self"
                ],
                "testReadyForLocalInitOpRestoreFromCheckpoint": [
                    "self"
                ],
                "testLocalInitOp": [
                    "self"
                ],
                "testLocalInitOpForNonChief": [
                    "self"
                ],
                "testInitOpFails": [
                    "self"
                ],
                "testInitOpFailsForTransientVariable": [
                    "self"
                ],
                "testSetupFail": [
                    "self"
                ],
                "testDefaultGlobalStep": [
                    "self"
                ],
                "testRestoreFromMetaGraph": [
                    "self"
                ],
                "testStandardServicesWithoutGlobalStep": [
                    "self"
                ],
                "testStandardServicesWithGlobalStep": [
                    "self"
                ],
                "testNoQueueRunners": [
                    "self"
                ],
                "testPrepareSessionAfterStopForChief": [
                    "self"
                ],
                "testPrepareSessionAfterStopForNonChief": [
                    "self"
                ]
            }
        },
        "tensorflow.python.training.device_setter_test": {
            "DeviceSetterTest": {
                "testPS2TasksWithClusterSpecClass": [
                    "self"
                ],
                "testPS2TasksWithClusterSpecDict": [
                    "self"
                ],
                "testPS2TasksWithClusterDef": [
                    "self"
                ],
                "testPS2TasksWithDevice": [
                    "self"
                ],
                "testPS2TasksWithCPUConstraint": [
                    "self"
                ]
            }
        },
        "tensorflow.python.training.training": {},
        "tensorflow.python.training.input_test": {
            "MatchFilenamesOnceTest": {
                "test": [
                    "self"
                ]
            },
            "LimitEpochsTest": {
                "testNoLimit": [
                    "self"
                ],
                "testLimit": [
                    "self"
                ]
            },
            "InputProducerTest": {
                "testNoShuffle": [
                    "self"
                ],
                "testNoShapeInference": [
                    "self"
                ],
                "testShapeError": [
                    "self"
                ]
            },
            "StringInputProducerTest": {
                "testNoShuffle": [
                    "self"
                ],
                "testShuffle": [
                    "self"
                ],
                "testNullStringPython": [
                    "self"
                ],
                "testNullString": [
                    "self"
                ],
                "testSharedName": [
                    "self"
                ],
                "testConstructionRace": [
                    "self"
                ]
            },
            "RangeInputProducerTest": {
                "testNoShuffle": [
                    "self"
                ],
                "testShuffle": [
                    "self"
                ],
                "testSharedName": [
                    "self"
                ]
            },
            "SliceInputProducerTest": {
                "testNoShuffle": [
                    "self"
                ],
                "testShuffle": [
                    "self"
                ],
                "testSharedName": [
                    "self"
                ]
            },
            "DictHelperTest": {
                "testListInputs": [
                    "self"
                ],
                "testDictInputs": [
                    "self"
                ]
            },
            "BatchTest": {
                "_testOneThreadHelper": [
                    "self",
                    "use_dict"
                ],
                "testOneThread": [
                    "self"
                ],
                "testOneThreadDict": [
                    "self"
                ],
                "testOneThreadDynamicPad": [
                    "self"
                ],
                "testOneThreadEnqueueMany": [
                    "self"
                ],
                "testManyThreads": [
                    "self"
                ],
                "testOneThreadSmallerBatch": [
                    "self"
                ],
                "testManyThreadsSmallerBatch": [
                    "self"
                ],
                "testSharedName": [
                    "self"
                ],
                "testCannotInferRankError": [
                    "self"
                ],
                "testBatchedSparseTensorInferredShape": [
                    "self"
                ],
                "testBatchedSparseTensorInferredShapeEnqueueMany": [
                    "self"
                ],
                "testBatchedSparseTensorInferredShapeUnknownRank": [
                    "self"
                ],
                "testBatchedSparseTensorInferredShapeUnknownRankEnqueueMany": [
                    "self"
                ],
                "testSingleElementDict": [
                    "self"
                ]
            },
            "BatchJoinTest": {
                "_testTwoThreadsHelper": [
                    "self",
                    "use_dict"
                ],
                "testTwoThreads": [
                    "self"
                ],
                "testTwoThreadsDict": [
                    "self"
                ],
                "testMismatchedDictKeys": [
                    "self"
                ],
                "testTwoThreadsDynamicPad": [
                    "self"
                ],
                "testTwoThreadsSmallerBatch": [
                    "self"
                ],
                "testTwoThreadsDynamicPadSmallerBatch": [
                    "self"
                ],
                "testSharedName": [
                    "self"
                ],
                "testCannotInferRankError": [
                    "self"
                ],
                "testSingleElementDict": [
                    "self"
                ]
            },
            "ShuffleBatchTest": {
                "_testOneThreadHelper": [
                    "self",
                    "use_dict"
                ],
                "testOneThread": [
                    "self"
                ],
                "testOneThreadDict": [
                    "self"
                ],
                "testOneThreadSmallerBatch": [
                    "self"
                ],
                "testManyThreads": [
                    "self"
                ],
                "testManyThreadsSmallerBatch": [
                    "self"
                ],
                "testSharedName": [
                    "self"
                ]
            },
            "ShuffleBatchJoinTest": {
                "_testTwoThreadsHelper": [
                    "self",
                    "use_dict"
                ],
                "testTwoThreads": [
                    "self"
                ],
                "testTwoThreadsDict": [
                    "self"
                ],
                "testTwoThreadsSmallerBatch": [
                    "self"
                ],
                "testMismatchedDictKeys": [
                    "self"
                ],
                "testSharedName": [
                    "self"
                ]
            }
        },
        "tensorflow.python.training.adadelta_test": {
            "AdadeltaOptimizerTest": {
                "testBasic": [
                    "self"
                ]
            }
        },
        "tensorflow.python.training.supervisor": {
            "Supervisor": {
                "__init__": [
                    "self",
                    "graph",
                    "ready_op",
                    "ready_for_local_init_op",
                    "is_chief",
                    "init_op",
                    "init_feed_dict",
                    "local_init_op",
                    "logdir",
                    "summary_op",
                    "saver",
                    "global_step",
                    "save_summaries_secs",
                    "save_model_secs",
                    "recovery_wait_secs",
                    "stop_grace_secs",
                    "checkpoint_basename",
                    "session_manager",
                    "summary_writer",
                    "init_fn"
                ],
                "_init_session_manager": [
                    "self",
                    "session_manager"
                ],
                "_get_first_op_from_collection": [
                    "self",
                    "key"
                ],
                "_init_ready_op": [
                    "self",
                    "ready_op",
                    "ready_for_local_init_op"
                ],
                "_init_init_op": [
                    "self",
                    "init_op",
                    "init_feed_dict"
                ],
                "_init_local_init_op": [
                    "self",
                    "local_init_op"
                ],
                "_init_saver": [
                    "self",
                    "saver"
                ],
                "_init_summary_op": [
                    "self",
                    "summary_op"
                ],
                "_init_global_step": [
                    "self",
                    "global_step"
                ],
                "is_chief": [
                    "self"
                ],
                "session_manager": [
                    "self"
                ],
                "coord": [
                    "self"
                ],
                "init_op": [
                    "self"
                ],
                "init_feed_dict": [
                    "self"
                ],
                "ready_op": [
                    "self"
                ],
                "ready_for_local_init_op": [
                    "self"
                ],
                "summary_writer": [
                    "self"
                ],
                "summary_op": [
                    "self"
                ],
                "save_summaries_secs": [
                    "self"
                ],
                "global_step": [
                    "self"
                ],
                "saver": [
                    "self"
                ],
                "save_model_secs": [
                    "self"
                ],
                "save_path": [
                    "self"
                ],
                "_write_graph": [
                    "self"
                ],
                "start_standard_services": [
                    "self",
                    "sess"
                ],
                "prepare_or_wait_for_session": [
                    "self",
                    "master",
                    "config",
                    "wait_for_checkpoint",
                    "max_wait_secs",
                    "start_standard_services"
                ],
                "start_queue_runners": [
                    "self",
                    "sess",
                    "queue_runners"
                ],
                "loop": [
                    "self",
                    "timer_interval_secs",
                    "target",
                    "args",
                    "kwargs"
                ],
                "stop": [
                    "self",
                    "threads",
                    "close_summary_writer"
                ],
                "request_stop": [
                    "self",
                    "ex"
                ],
                "should_stop": [
                    "self"
                ],
                "stop_on_exception": [
                    "self"
                ],
                "wait_for_stop": [
                    "self"
                ],
                "summary_computed": [
                    "self",
                    "sess",
                    "summary",
                    "global_step"
                ],
                "_default_global_step_tensor": [
                    "self"
                ],
                "_verify_setup": [
                    "self"
                ],
                "managed_session": [
                    "self",
                    "master",
                    "config",
                    "start_standard_services",
                    "close_summary_writer"
                ]
            },
            "SVSummaryThread": {
                "__init__": [
                    "self",
                    "sv",
                    "sess"
                ],
                "run_loop": [
                    "self"
                ]
            },
            "SVStepCounterThread": {
                "__init__": [
                    "self",
                    "sv",
                    "sess"
                ],
                "start_loop": [
                    "self"
                ],
                "run_loop": [
                    "self"
                ]
            },
            "SVTimerCheckpointThread": {
                "__init__": [
                    "self",
                    "sv",
                    "sess"
                ],
                "run_loop": [
                    "self"
                ]
            }
        },
        "tensorflow.python.training.ftrl": {
            "FtrlOptimizer": {
                "__init__": [
                    "self",
                    "learning_rate",
                    "learning_rate_power",
                    "initial_accumulator_value",
                    "l1_regularization_strength",
                    "l2_regularization_strength",
                    "use_locking",
                    "name"
                ],
                "_create_slots": [
                    "self",
                    "var_list"
                ],
                "_prepare": [
                    "self"
                ],
                "_apply_dense": [
                    "self",
                    "grad",
                    "var"
                ],
                "_apply_sparse": [
                    "self",
                    "grad",
                    "var"
                ]
            }
        },
        "tensorflow.python.training.adam_test": {
            "adam_update_numpy": [
                "param",
                "g_t",
                "t",
                "m",
                "v",
                "alpha",
                "beta1",
                "beta2",
                "epsilon"
            ],
            "AdamOptimizerTest": {
                "testSparse": [
                    "self"
                ],
                "testBasic": [
                    "self"
                ],
                "testTensorLearningRate": [
                    "self"
                ],
                "testSharing": [
                    "self"
                ],
                "testTwoSessions": [
                    "self"
                ]
            }
        },
        "tensorflow.python.training.ftrl_test": {
            "FtrlOptimizerTest": {
                "testFtrlwithoutRegularization": [
                    "self"
                ],
                "testFtrlwithoutRegularization2": [
                    "self"
                ],
                "testFtrlWithL1": [
                    "self"
                ],
                "testFtrlWithL1_L2": [
                    "self"
                ],
                "applyOptimizer": [
                    "self",
                    "opt",
                    "dtype",
                    "steps",
                    "is_sparse"
                ],
                "testEquivAdagradwithoutRegularization": [
                    "self"
                ],
                "testEquivSparseAdagradwithoutRegularization": [
                    "self"
                ],
                "testEquivSparseGradientDescentwithoutRegularization": [
                    "self"
                ],
                "testEquivGradientDescentwithoutRegularization": [
                    "self"
                ]
            }
        },
        "tensorflow.python.training.coordinator": {
            "Coordinator": {
                "__init__": [
                    "self",
                    "clean_stop_exception_types"
                ],
                "_filter_exception": [
                    "self",
                    "ex"
                ],
                "request_stop": [
                    "self",
                    "ex"
                ],
                "clear_stop": [
                    "self"
                ],
                "should_stop": [
                    "self"
                ],
                "stop_on_exception": [
                    "self"
                ],
                "wait_for_stop": [
                    "self",
                    "timeout"
                ],
                "register_thread": [
                    "self",
                    "thread"
                ],
                "join": [
                    "self",
                    "threads",
                    "stop_grace_period_secs"
                ],
                "joined": [
                    "self"
                ],
                "raise_requested_exception": [
                    "self"
                ]
            },
            "LooperThread": {
                "__init__": [
                    "self",
                    "coord",
                    "timer_interval_secs",
                    "target",
                    "args",
                    "kwargs"
                ],
                "loop": [
                    "coord",
                    "timer_interval_secs",
                    "target",
                    "args",
                    "kwargs"
                ],
                "run": [
                    "self"
                ],
                "start_loop": [
                    "self"
                ],
                "stop_loop": [
                    "self"
                ],
                "run_loop": [
                    "self"
                ]
            }
        },
        "tensorflow.python.training.optimizer_test": {
            "OptimizerTest": {
                "testBasic": [
                    "self"
                ],
                "testAggregationMethod": [
                    "self"
                ],
                "testPrecomputedGradient": [
                    "self"
                ],
                "testNoVariables": [
                    "self"
                ],
                "testNoGradients": [
                    "self"
                ],
                "testGradientsAsVariables": [
                    "self"
                ],
                "testTrainOp": [
                    "self"
                ]
            }
        },
        "tensorflow.python.training.sync_replicas_optimizer": {
            "SyncReplicasOptimizerV2": {
                "__init__": [
                    "self",
                    "opt",
                    "replicas_to_aggregate",
                    "total_num_replicas",
                    "variable_averages",
                    "variables_to_average",
                    "use_locking",
                    "name"
                ],
                "compute_gradients": [
                    "self"
                ],
                "apply_gradients": [
                    "self",
                    "grads_and_vars",
                    "global_step",
                    "name"
                ],
                "get_chief_queue_runner": [
                    "self"
                ],
                "get_slot": [
                    "self"
                ],
                "get_slot_names": [
                    "self"
                ],
                "get_init_tokens_op": [
                    "self",
                    "num_tokens"
                ]
            },
            "SyncReplicasOptimizer": {
                "__init__": [
                    "self",
                    "opt",
                    "replicas_to_aggregate",
                    "variable_averages",
                    "variables_to_average",
                    "replica_id",
                    "total_num_replicas",
                    "use_locking",
                    "name"
                ],
                "compute_gradients": [
                    "self"
                ],
                "_aggregate_sparse_grad": [
                    "self",
                    "grad",
                    "var",
                    "train_ops"
                ],
                "apply_gradients": [
                    "self",
                    "grads_and_vars",
                    "global_step",
                    "name"
                ],
                "get_chief_queue_runner": [
                    "self"
                ],
                "get_slot": [
                    "self"
                ],
                "get_slot_names": [
                    "self"
                ],
                "get_clean_up_op": [
                    "self"
                ],
                "get_init_tokens_op": [
                    "self",
                    "num_tokens"
                ]
            }
        },
        "tensorflow.python.training.adam": {
            "AdamOptimizer": {
                "__init__": [
                    "self",
                    "learning_rate",
                    "beta1",
                    "beta2",
                    "epsilon",
                    "use_locking",
                    "name"
                ],
                "_get_beta_accumulators": [
                    "self"
                ],
                "_create_slots": [
                    "self",
                    "var_list"
                ],
                "_prepare": [
                    "self"
                ],
                "_apply_dense": [
                    "self",
                    "grad",
                    "var"
                ],
                "_apply_sparse": [
                    "self",
                    "grad",
                    "var"
                ],
                "_finish": [
                    "self",
                    "update_ops",
                    "name_scope"
                ]
            }
        },
        "tensorflow.python.training.basic_session_run_hooks_test": {
            "SecondOrStepTimerTest": {
                "test_raise_in_both_secs_and_steps": [
                    "self"
                ],
                "test_raise_in_none_secs_and_steps": [
                    "self"
                ],
                "test_every_secs": [
                    "self"
                ],
                "test_every_steps": [
                    "self"
                ],
                "test_update_last_triggered_step": [
                    "self"
                ]
            },
            "StopAtStepTest": {
                "test_raise_in_both_last_step_and_num_steps": [
                    "self"
                ],
                "test_stop_based_on_last_step": [
                    "self"
                ],
                "test_stop_based_on_num_step": [
                    "self"
                ]
            },
            "LoggingTensorHookTest": {
                "setUp": [
                    "self"
                ],
                "tearDown": [
                    "self"
                ],
                "test_illegal_args": [
                    "self"
                ],
                "test_print_every_n_steps": [
                    "self"
                ],
                "test_print_every_n_secs": [
                    "self"
                ]
            },
            "CheckpointSaverHookTest": {
                "setUp": [
                    "self"
                ],
                "tearDown": [
                    "self"
                ],
                "test_raise_when_saver_and_scaffold_both_missing": [
                    "self"
                ],
                "test_raise_when_saver_and_scaffold_both_present": [
                    "self"
                ],
                "test_raise_in_both_secs_and_steps": [
                    "self"
                ],
                "test_raise_in_none_secs_and_steps": [
                    "self"
                ],
                "test_save_secs_saves_in_first_step": [
                    "self"
                ],
                "test_save_secs_saves_periodically": [
                    "self"
                ],
                "test_save_steps_saves_in_first_step": [
                    "self"
                ],
                "test_save_steps_saves_periodically": [
                    "self"
                ],
                "test_save_saves_at_end": [
                    "self"
                ]
            },
            "StepCounterHookTest": {
                "setUp": [
                    "self"
                ],
                "tearDown": [
                    "self"
                ],
                "test_step_counter_every_n_steps": [
                    "self"
                ],
                "test_step_counter_every_n_secs": [
                    "self"
                ]
            },
            "SummarySaverHookTest": {
                "setUp": [
                    "self"
                ],
                "test_raise_when_scaffold_and_summary_op_both_missing": [
                    "self"
                ],
                "test_raise_when_scaffold_and_summary_op_both_present": [
                    "self"
                ],
                "test_raise_in_both_secs_and_steps": [
                    "self"
                ],
                "test_raise_in_none_secs_and_steps": [
                    "self"
                ],
                "test_save_steps": [
                    "self"
                ],
                "test_save_secs_saving_once_every_step": [
                    "self"
                ],
                "test_save_secs_saving_once_every_three_steps": [
                    "self"
                ]
            }
        },
        "tensorflow.python.training.proximal_adagrad": {
            "ProximalAdagradOptimizer": {
                "__init__": [
                    "self",
                    "learning_rate",
                    "initial_accumulator_value",
                    "l1_regularization_strength",
                    "l2_regularization_strength",
                    "use_locking",
                    "name"
                ],
                "_create_slots": [
                    "self",
                    "var_list"
                ],
                "_prepare": [
                    "self"
                ],
                "_apply_dense": [
                    "self",
                    "grad",
                    "var"
                ],
                "_apply_sparse": [
                    "self",
                    "grad",
                    "var"
                ]
            }
        },
        "tensorflow.python.training.adagrad_da": {
            "AdagradDAOptimizer": {
                "__init__": [
                    "self",
                    "learning_rate",
                    "global_step",
                    "initial_gradient_squared_accumulator_value",
                    "l1_regularization_strength",
                    "l2_regularization_strength",
                    "use_locking",
                    "name"
                ],
                "_create_slots": [
                    "self",
                    "var_list"
                ],
                "_prepare": [
                    "self"
                ],
                "_apply_dense": [
                    "self",
                    "grad",
                    "var"
                ],
                "_apply_sparse": [
                    "self",
                    "grad",
                    "var"
                ]
            }
        },
        "tensorflow.python.training.training_ops_test": {
            "TrainingOpsTest": {
                "_toType": [
                    "self",
                    "dtype"
                ],
                "_testTypes": [
                    "self",
                    "x",
                    "alpha",
                    "delta",
                    "use_gpu"
                ],
                "testApplyGradientDescent": [
                    "self"
                ],
                "_testTypesForAdagrad": [
                    "self",
                    "x",
                    "y",
                    "lr",
                    "grad",
                    "use_gpu"
                ],
                "_testTypesForFtrl": [
                    "self",
                    "x",
                    "y",
                    "z",
                    "lr",
                    "grad",
                    "use_gpu",
                    "l1",
                    "l2",
                    "lr_power"
                ],
                "testApplyAdagrad": [
                    "self"
                ],
                "testApplyFtrl": [
                    "self"
                ],
                "_testTypesForSparseAdagrad": [
                    "self",
                    "x",
                    "y",
                    "lr",
                    "grad",
                    "indices"
                ],
                "_testTypesForSparseFtrl": [
                    "self",
                    "x",
                    "y",
                    "z",
                    "lr",
                    "grad",
                    "indices",
                    "l1",
                    "l2",
                    "lr_power"
                ],
                "testSparseApplyAdagrad": [
                    "self"
                ],
                "testSparseApplyAdagradDim1": [
                    "self"
                ],
                "testSparseApplyFtrlDim1": [
                    "self"
                ],
                "testApplyAdam": [
                    "self"
                ],
                "_testTypesForAdam": [
                    "self",
                    "var",
                    "m",
                    "v",
                    "grad",
                    "use_gpu"
                ],
                "_adamUpdateNumpy": [
                    "self",
                    "param",
                    "g_t",
                    "t",
                    "m",
                    "v",
                    "alpha",
                    "beta1",
                    "beta2",
                    "epsilon"
                ]
            }
        },
        "tensorflow.python.training.session_run_hook": {
            "SessionRunHook": {
                "begin": [
                    "self"
                ],
                "before_run": [
                    "self",
                    "run_context"
                ],
                "after_run": [
                    "self",
                    "run_context",
                    "run_values"
                ],
                "end": [
                    "self",
                    "session"
                ]
            },
            "SessionRunArgs": {
                "__new__": [
                    "cls",
                    "fetches",
                    "feed_dict",
                    "options"
                ]
            },
            "SessionRunContext": {
                "__init__": [
                    "self",
                    "original_args",
                    "session"
                ],
                "original_args": [
                    "self"
                ],
                "session": [
                    "self"
                ],
                "stop_requested": [
                    "self"
                ],
                "request_stop": [
                    "self"
                ]
            },
            "SessionRunValues": {}
        },
        "tensorflow.python.training.queue_runner_impl": {
            "add_queue_runner": [
                "qr",
                "collection"
            ],
            "start_queue_runners": [
                "sess",
                "coord",
                "daemon",
                "start",
                "collection"
            ],
            "QueueRunner": {
                "__init__": [
                    "self",
                    "queue",
                    "enqueue_ops",
                    "close_op",
                    "cancel_op",
                    "queue_closed_exception_types",
                    "queue_runner_def",
                    "import_scope"
                ],
                "_init_from_args": [
                    "self",
                    "queue",
                    "enqueue_ops",
                    "close_op",
                    "cancel_op",
                    "queue_closed_exception_types"
                ],
                "_init_from_proto": [
                    "self",
                    "queue_runner_def",
                    "import_scope"
                ],
                "queue": [
                    "self"
                ],
                "enqueue_ops": [
                    "self"
                ],
                "close_op": [
                    "self"
                ],
                "cancel_op": [
                    "self"
                ],
                "queue_closed_exception_types": [
                    "self"
                ],
                "exceptions_raised": [
                    "self"
                ],
                "name": [
                    "self"
                ],
                "_run": [
                    "self",
                    "sess",
                    "enqueue_op",
                    "coord"
                ],
                "_close_on_stop": [
                    "self",
                    "sess",
                    "cancel_op",
                    "coord"
                ],
                "create_threads": [
                    "self",
                    "sess",
                    "coord",
                    "daemon",
                    "start"
                ],
                "to_proto": [
                    "self",
                    "export_scope"
                ],
                "from_proto": [
                    "queue_runner_def",
                    "import_scope"
                ]
            }
        },
        "tensorflow.python.training.summary_io": {},
        "tensorflow.python.training.gradient_descent_test": {
            "GradientDescentOptimizerTest": {
                "testBasic": [
                    "self"
                ],
                "testBasicResourceVariable": [
                    "self"
                ],
                "testMinimizeResourceVariable": [
                    "self"
                ],
                "testMinimizeSparseResourceVariable": [
                    "self"
                ],
                "testTensorLearningRate": [
                    "self"
                ],
                "testGradWrtRef": [
                    "self"
                ],
                "testWithGlobalStep": [
                    "self"
                ],
                "testSparseBasic": [
                    "self"
                ]
            }
        },
        "tensorflow.python.training.proximal_gradient_descent_test": {
            "ProximalGradientDescentOptimizerTest": {
                "testProximalGradientDescentwithoutRegularization": [
                    "self"
                ],
                "testProximalGradientDescentwithoutRegularization2": [
                    "self"
                ],
                "testProximalGradientDescentWithL1_L2": [
                    "self"
                ],
                "applyOptimizer": [
                    "self",
                    "opt",
                    "steps",
                    "is_sparse"
                ],
                "testEquivSparseGradientDescentwithoutRegularization": [
                    "self"
                ],
                "testEquivGradientDescentwithoutRegularization": [
                    "self"
                ]
            }
        },
        "tensorflow.python.training.gen_training_ops": {
            "apply_adadelta": [
                "var",
                "accum",
                "accum_update",
                "lr",
                "rho",
                "epsilon",
                "grad",
                "use_locking",
                "name"
            ],
            "apply_adagrad": [
                "var",
                "accum",
                "lr",
                "grad",
                "use_locking",
                "name"
            ],
            "apply_adagrad_da": [
                "var",
                "gradient_accumulator",
                "gradient_squared_accumulator",
                "grad",
                "lr",
                "l1",
                "l2",
                "global_step",
                "use_locking",
                "name"
            ],
            "apply_adam": [
                "var",
                "m",
                "v",
                "beta1_power",
                "beta2_power",
                "lr",
                "beta1",
                "beta2",
                "epsilon",
                "grad",
                "use_locking",
                "name"
            ],
            "apply_centered_rms_prop": [
                "var",
                "mg",
                "ms",
                "mom",
                "lr",
                "rho",
                "momentum",
                "epsilon",
                "grad",
                "use_locking",
                "name"
            ],
            "apply_ftrl": [
                "var",
                "accum",
                "linear",
                "grad",
                "lr",
                "l1",
                "l2",
                "lr_power",
                "use_locking",
                "name"
            ],
            "apply_gradient_descent": [
                "var",
                "alpha",
                "delta",
                "use_locking",
                "name"
            ],
            "apply_momentum": [
                "var",
                "accum",
                "lr",
                "grad",
                "momentum",
                "use_locking",
                "use_nesterov",
                "name"
            ],
            "apply_proximal_adagrad": [
                "var",
                "accum",
                "lr",
                "l1",
                "l2",
                "grad",
                "use_locking",
                "name"
            ],
            "apply_proximal_gradient_descent": [
                "var",
                "alpha",
                "l1",
                "l2",
                "delta",
                "use_locking",
                "name"
            ],
            "apply_rms_prop": [
                "var",
                "ms",
                "mom",
                "lr",
                "rho",
                "momentum",
                "epsilon",
                "grad",
                "use_locking",
                "name"
            ],
            "sparse_apply_adadelta": [
                "var",
                "accum",
                "accum_update",
                "lr",
                "rho",
                "epsilon",
                "grad",
                "indices",
                "use_locking",
                "name"
            ],
            "sparse_apply_adagrad": [
                "var",
                "accum",
                "lr",
                "grad",
                "indices",
                "use_locking",
                "name"
            ],
            "sparse_apply_adagrad_da": [
                "var",
                "gradient_accumulator",
                "gradient_squared_accumulator",
                "grad",
                "indices",
                "lr",
                "l1",
                "l2",
                "global_step",
                "use_locking",
                "name"
            ],
            "sparse_apply_centered_rms_prop": [
                "var",
                "mg",
                "ms",
                "mom",
                "lr",
                "rho",
                "momentum",
                "epsilon",
                "grad",
                "indices",
                "use_locking",
                "name"
            ],
            "sparse_apply_ftrl": [
                "var",
                "accum",
                "linear",
                "grad",
                "indices",
                "lr",
                "l1",
                "l2",
                "lr_power",
                "use_locking",
                "name"
            ],
            "sparse_apply_momentum": [
                "var",
                "accum",
                "lr",
                "grad",
                "indices",
                "momentum",
                "use_locking",
                "use_nesterov",
                "name"
            ],
            "sparse_apply_proximal_adagrad": [
                "var",
                "accum",
                "lr",
                "l1",
                "l2",
                "grad",
                "indices",
                "use_locking",
                "name"
            ],
            "sparse_apply_proximal_gradient_descent": [
                "var",
                "alpha",
                "l1",
                "l2",
                "grad",
                "indices",
                "use_locking",
                "name"
            ],
            "sparse_apply_rms_prop": [
                "var",
                "ms",
                "mom",
                "lr",
                "rho",
                "momentum",
                "epsilon",
                "grad",
                "indices",
                "use_locking",
                "name"
            ],
            "_InitOpDefLibrary": []
        },
        "tensorflow.python.training.adagrad": {
            "AdagradOptimizer": {
                "__init__": [
                    "self",
                    "learning_rate",
                    "initial_accumulator_value",
                    "use_locking",
                    "name"
                ],
                "_create_slots": [
                    "self",
                    "var_list"
                ],
                "_prepare": [
                    "self"
                ],
                "_apply_dense": [
                    "self",
                    "grad",
                    "var"
                ],
                "_apply_sparse": [
                    "self",
                    "grad",
                    "var"
                ]
            }
        },
        "tensorflow.python.training.server_lib_test": {
            "GrpcServerTest": {
                "testRunStep": [
                    "self"
                ],
                "testMultipleSessions": [
                    "self"
                ],
                "testSameVariablesNoClear": [
                    "self"
                ],
                "testSameVariablesClear": [
                    "self"
                ],
                "testSameVariablesClearContainer": [
                    "self"
                ],
                "testMultipleContainers": [
                    "self"
                ],
                "testResetFails": [
                    "self"
                ],
                "testLargeConstant": [
                    "self"
                ],
                "testLargeFetch": [
                    "self"
                ],
                "testLargeFeed": [
                    "self"
                ],
                "testCloseCancelsBlockingOperation": [
                    "self"
                ],
                "testInteractiveSession": [
                    "self"
                ],
                "testSetConfiguration": [
                    "self"
                ],
                "testInvalidHostname": [
                    "self"
                ],
                "testSparseJob": [
                    "self"
                ]
            },
            "ServerDefTest": {
                "testLocalServer": [
                    "self"
                ],
                "testTwoProcesses": [
                    "self"
                ],
                "testTwoJobs": [
                    "self"
                ],
                "testDenseAndSparseJobs": [
                    "self"
                ]
            },
            "ClusterSpecTest": {
                "testProtoDictDefEquivalences": [
                    "self"
                ],
                "testClusterSpecAccessors": [
                    "self"
                ],
                "testEmptyClusterSpecIsFalse": [
                    "self"
                ],
                "testNonEmptyClusterSpecIsTrue": [
                    "self"
                ],
                "testEq": [
                    "self"
                ],
                "testNe": [
                    "self"
                ]
            }
        },
        "tensorflow.python.training.tensorboard_logging_test": {
            "EventLoggingTest": {
                "setUp": [
                    "self"
                ],
                "tearDown": [
                    "self"
                ],
                "assertLoggedMessagesAre": [
                    "self",
                    "expected_messages"
                ],
                "testBasic": [
                    "self"
                ],
                "testVerbosity": [
                    "self"
                ],
                "testBadVerbosity": [
                    "self"
                ],
                "testNoSummaryWriter": [
                    "self"
                ],
                "testSummaryWriterFailsAfterClear": [
                    "self"
                ]
            }
        },
        "tensorflow.python.training.coordinator_test": {
            "StopOnEvent": [
                "coord",
                "wait_for_stop",
                "set_when_stopped"
            ],
            "RaiseInN": [
                "coord",
                "n_secs",
                "ex",
                "report_exception"
            ],
            "RaiseInNUsingContextHandler": [
                "coord",
                "n_secs",
                "ex"
            ],
            "SleepABit": [
                "n_secs",
                "coord"
            ],
            "WaitForThreadsToRegister": [
                "coord",
                "num_threads"
            ],
            "_StopAt0": [
                "coord",
                "n"
            ],
            "CoordinatorTest": {
                "testStopAPI": [
                    "self"
                ],
                "testStopAsync": [
                    "self"
                ],
                "testJoin": [
                    "self"
                ],
                "testJoinAllRegistered": [
                    "self"
                ],
                "testJoinSomeRegistered": [
                    "self"
                ],
                "testJoinGraceExpires": [
                    "self"
                ],
                "testJoinRaiseReportExcInfo": [
                    "self"
                ],
                "testJoinRaiseReportException": [
                    "self"
                ],
                "testJoinIgnoresOutOfRange": [
                    "self"
                ],
                "testJoinIgnoresMyExceptionType": [
                    "self"
                ],
                "testJoinRaiseReportExceptionUsingHandler": [
                    "self"
                ],
                "testClearStopClearsExceptionToo": [
                    "self"
                ],
                "testRequestStopRaisesIfJoined": [
                    "self"
                ],
                "testRequestStopRaisesIfJoined_ExcInfo": [
                    "self"
                ]
            },
            "LooperTest": {
                "testTargetArgs": [
                    "self"
                ],
                "testTargetKwargs": [
                    "self"
                ],
                "testTargetMixedArgs": [
                    "self"
                ]
            }
        },
        "tensorflow.python.training.training_util": {
            "global_step": [
                "sess",
                "global_step_tensor"
            ],
            "get_global_step": [
                "graph"
            ],
            "assert_global_step": [
                "global_step_tensor"
            ],
            "write_graph": [
                "graph_or_graph_def",
                "logdir",
                "name",
                "as_text"
            ]
        },
        "tensorflow.python.training.adagrad_test": {
            "AdagradOptimizerTest": {
                "doTestBasic": [
                    "self",
                    "use_locking"
                ],
                "testBasic": [
                    "self"
                ],
                "testBasicLocked": [
                    "self"
                ],
                "testTensorLearningRate": [
                    "self"
                ],
                "testSparseBasic": [
                    "self"
                ],
                "testSparseStability": [
                    "self"
                ],
                "testSharing": [
                    "self"
                ]
            }
        },
        "tensorflow.python.training.training_ops": {},
        "tensorflow.python.training.input": {
            "match_filenames_once": [
                "pattern",
                "name"
            ],
            "limit_epochs": [
                "tensor",
                "num_epochs",
                "name"
            ],
            "input_producer": [
                "input_tensor",
                "element_shape",
                "num_epochs",
                "shuffle",
                "seed",
                "capacity",
                "shared_name",
                "summary_name",
                "name",
                "cancel_op"
            ],
            "string_input_producer": [
                "string_tensor",
                "num_epochs",
                "shuffle",
                "seed",
                "capacity",
                "shared_name",
                "name",
                "cancel_op"
            ],
            "range_input_producer": [
                "limit",
                "num_epochs",
                "shuffle",
                "seed",
                "capacity",
                "shared_name",
                "name"
            ],
            "slice_input_producer": [
                "tensor_list",
                "num_epochs",
                "shuffle",
                "seed",
                "capacity",
                "shared_name",
                "name"
            ],
            "_flatten": [
                "tensor_list_list"
            ],
            "_as_tensor_list": [
                "tensors"
            ],
            "_as_tensor_list_list": [
                "tensors_list"
            ],
            "_as_original_type": [
                "original_tensors",
                "tensor_list"
            ],
            "_store_sparse_tensors": [
                "tensor_list",
                "enqueue_many",
                "shared_map_ops"
            ],
            "_store_sparse_tensors_join": [
                "tensor_list_list",
                "enqueue_many"
            ],
            "_restore_sparse_tensors": [
                "stored_list",
                "sparse_info_list"
            ],
            "_validate": [
                "tensor_list"
            ],
            "_validate_join": [
                "tensor_list_list"
            ],
            "_dtypes": [
                "tensor_list_list"
            ],
            "_merge_shapes": [
                "shape_list",
                "enqueue_many"
            ],
            "_shapes": [
                "tensor_list_list",
                "shapes",
                "enqueue_many"
            ],
            "_enqueue_join": [
                "queue",
                "tensor_list_list",
                "enqueue_many"
            ],
            "_enqueue": [
                "queue",
                "tensor_list",
                "threads",
                "enqueue_many"
            ],
            "_which_queue": [
                "dynamic_pad"
            ],
            "batch": [
                "tensors",
                "batch_size",
                "num_threads",
                "capacity",
                "enqueue_many",
                "shapes",
                "dynamic_pad",
                "allow_smaller_final_batch",
                "shared_name",
                "name"
            ],
            "batch_join": [
                "tensors_list",
                "batch_size",
                "capacity",
                "enqueue_many",
                "shapes",
                "dynamic_pad",
                "allow_smaller_final_batch",
                "shared_name",
                "name"
            ],
            "shuffle_batch": [
                "tensors",
                "batch_size",
                "capacity",
                "min_after_dequeue",
                "num_threads",
                "seed",
                "enqueue_many",
                "shapes",
                "allow_smaller_final_batch",
                "shared_name",
                "name"
            ],
            "shuffle_batch_join": [
                "tensors_list",
                "batch_size",
                "capacity",
                "min_after_dequeue",
                "seed",
                "enqueue_many",
                "shapes",
                "allow_smaller_final_batch",
                "shared_name",
                "name"
            ],
            "_SparseMetaData": {
                "__init__": [
                    "self",
                    "sparse",
                    "map_op",
                    "rank"
                ],
                "__eq__": [
                    "self",
                    "other"
                ],
                "__ne__": [
                    "self",
                    "other"
                ],
                "__str__": [
                    "self"
                ],
                "merge_with": [
                    "self",
                    "other"
                ],
                "map_op": [
                    "self"
                ],
                "sparse": [
                    "self"
                ],
                "rank": [
                    "self"
                ]
            }
        },
        "tensorflow.python.training.basic_loops": {
            "basic_train_loop": [
                "supervisor",
                "train_step_fn",
                "args",
                "kwargs",
                "master"
            ]
        },
        "tensorflow.python.training.queue_runner_test": {
            "QueueRunnerTest": {
                "testBasic": [
                    "self"
                ],
                "testTwoOps": [
                    "self"
                ],
                "testExceptionsCaptured": [
                    "self"
                ],
                "testRealDequeueEnqueue": [
                    "self"
                ],
                "testRespectCoordShouldStop": [
                    "self"
                ],
                "testRequestStopOnException": [
                    "self"
                ],
                "testGracePeriod": [
                    "self"
                ],
                "testMultipleSessions": [
                    "self"
                ],
                "testIgnoreMultiStarts": [
                    "self"
                ],
                "testThreads": [
                    "self"
                ],
                "testName": [
                    "self"
                ],
                "testStartQueueRunners": [
                    "self"
                ],
                "testStartQueueRunnersNonDefaultGraph": [
                    "self"
                ],
                "testQueueRunnerSerializationRoundTrip": [
                    "self"
                ]
            }
        },
        "tensorflow.python.training.sync_replicas_optimizer_test": {
            "create_local_cluster": [
                "num_workers",
                "num_ps",
                "protocol"
            ],
            "get_workers": [
                "num_workers",
                "replicas_to_aggregate",
                "workers"
            ],
            "SyncReplicasOptimizerV2Test": {
                "_run": [
                    "self",
                    "train_op",
                    "sess"
                ],
                "test2Workers": [
                    "self"
                ],
                "test3Workers1Backup": [
                    "self"
                ]
            }
        },
        "tensorflow.python.training.momentum_test": {
            "MomentumOptimizerTest": {
                "_update_nesterov_momentum_numpy": [
                    "self",
                    "var",
                    "accum",
                    "g",
                    "lr",
                    "momentum"
                ],
                "testBasic": [
                    "self"
                ],
                "testNesterovMomentum": [
                    "self"
                ],
                "testSparseNesterovMomentum": [
                    "self"
                ],
                "testTensorLearningRateAndMomentum": [
                    "self"
                ],
                "_dbParamsMom01": [
                    "self"
                ],
                "testLikeDistBeliefMom01": [
                    "self"
                ],
                "testSparse": [
                    "self"
                ],
                "testSharing": [
                    "self"
                ]
            }
        },
        "tensorflow.python.training.session_manager": {
            "SessionManager": {
                "__init__": [
                    "self",
                    "local_init_op",
                    "ready_op",
                    "ready_for_local_init_op",
                    "graph",
                    "recovery_wait_secs"
                ],
                "_restore_checkpoint": [
                    "self",
                    "master",
                    "saver",
                    "checkpoint_dir",
                    "wait_for_checkpoint",
                    "max_wait_secs",
                    "config"
                ],
                "prepare_session": [
                    "self",
                    "master",
                    "init_op",
                    "saver",
                    "checkpoint_dir",
                    "wait_for_checkpoint",
                    "max_wait_secs",
                    "config",
                    "init_feed_dict",
                    "init_fn"
                ],
                "recover_session": [
                    "self",
                    "master",
                    "saver",
                    "checkpoint_dir",
                    "wait_for_checkpoint",
                    "max_wait_secs",
                    "config"
                ],
                "wait_for_session": [
                    "self",
                    "master",
                    "config",
                    "max_wait_secs"
                ],
                "_safe_close": [
                    "self",
                    "sess"
                ],
                "_ready": [
                    "self",
                    "op",
                    "sess",
                    "msg"
                ],
                "_model_ready": [
                    "self",
                    "sess"
                ],
                "_model_ready_for_local_init": [
                    "self",
                    "sess"
                ],
                "_try_run_local_init_op": [
                    "self",
                    "sess"
                ]
            },
            "_CountDownTimer": {
                "__init__": [
                    "self",
                    "duration_secs"
                ],
                "secs_remaining": [
                    "self"
                ]
            }
        },
        "tensorflow.python.training.slot_creator": {
            "_create_slot_var": [
                "primary",
                "val",
                "scope"
            ],
            "create_slot": [
                "primary",
                "val",
                "name",
                "colocate_with_primary"
            ],
            "create_zeros_slot": [
                "primary",
                "name",
                "dtype",
                "colocate_with_primary"
            ]
        },
        "tensorflow.python.training.saver": {
            "_GetCheckpointFilename": [
                "save_dir",
                "latest_filename"
            ],
            "generate_checkpoint_state_proto": [
                "save_dir",
                "model_checkpoint_path",
                "all_model_checkpoint_paths"
            ],
            "update_checkpoint_state": [
                "save_dir",
                "model_checkpoint_path",
                "all_model_checkpoint_paths",
                "latest_filename"
            ],
            "get_checkpoint_state": [
                "checkpoint_dir",
                "latest_filename"
            ],
            "_prefix_to_checkpoint_path": [
                "prefix",
                "format_version"
            ],
            "latest_checkpoint": [
                "checkpoint_dir",
                "latest_filename"
            ],
            "import_meta_graph": [
                "meta_graph_or_file",
                "clear_devices",
                "import_scope"
            ],
            "export_meta_graph": [
                "filename",
                "meta_info_def",
                "graph_def",
                "saver_def",
                "collection_list",
                "as_text",
                "graph",
                "export_scope",
                "clear_devices"
            ],
            "checkpoint_exists": [
                "checkpoint_prefix"
            ],
            "get_checkpoint_mtimes": [
                "checkpoint_prefixes"
            ],
            "BaseSaverBuilder": {
                "__init__": [
                    "self",
                    "write_version"
                ],
                "save_op": [
                    "self",
                    "filename_tensor",
                    "saveables"
                ],
                "restore_op": [
                    "self",
                    "filename_tensor",
                    "saveable",
                    "preferred_shard"
                ],
                "sharded_filename": [
                    "self",
                    "filename_tensor",
                    "shard",
                    "num_shards"
                ],
                "_AddSaveOps": [
                    "self",
                    "filename_tensor",
                    "saveables"
                ],
                "_AddShardedSaveOpsForV2": [
                    "self",
                    "checkpoint_prefix",
                    "per_device"
                ],
                "_AddShardedSaveOps": [
                    "self",
                    "filename_tensor",
                    "per_device"
                ],
                "_AddRestoreOps": [
                    "self",
                    "filename_tensor",
                    "saveables",
                    "restore_sequentially",
                    "reshape",
                    "preferred_shard",
                    "name"
                ],
                "_AddShardedRestoreOps": [
                    "self",
                    "filename_tensor",
                    "per_device",
                    "restore_sequentially",
                    "reshape"
                ],
                "_IsVariable": [
                    "v"
                ],
                "_GroupByDevices": [
                    "self",
                    "saveables"
                ],
                "OpListToDict": [
                    "op_list"
                ],
                "_ValidateAndSliceInputs": [
                    "self",
                    "names_to_saveables"
                ],
                "_AddSaveable": [
                    "self",
                    "saveables",
                    "seen_ops",
                    "saveable"
                ],
                "build": [
                    "self",
                    "names_to_saveables",
                    "reshape",
                    "sharded",
                    "max_to_keep",
                    "keep_checkpoint_every_n_hours",
                    "name",
                    "restore_sequentially",
                    "filename"
                ]
            },
            "Saver": {
                "__init__": [
                    "self",
                    "var_list",
                    "reshape",
                    "sharded",
                    "max_to_keep",
                    "keep_checkpoint_every_n_hours",
                    "name",
                    "restore_sequentially",
                    "saver_def",
                    "builder",
                    "defer_build",
                    "allow_empty",
                    "write_version",
                    "pad_step_number"
                ],
                "build": [
                    "self"
                ],
                "_check_saver_def": [
                    "self"
                ],
                "_CheckpointFilename": [
                    "self",
                    "p"
                ],
                "_MetaGraphFilename": [
                    "self",
                    "checkpoint_filename",
                    "meta_graph_suffix"
                ],
                "_MaybeDeleteOldCheckpoints": [
                    "self",
                    "latest_save_path",
                    "meta_graph_suffix"
                ],
                "_delete_file_if_exists": [
                    "self",
                    "filespec"
                ],
                "as_saver_def": [
                    "self"
                ],
                "to_proto": [
                    "self",
                    "export_scope"
                ],
                "from_proto": [
                    "saver_def",
                    "import_scope"
                ],
                "last_checkpoints": [
                    "self"
                ],
                "set_last_checkpoints": [
                    "self",
                    "last_checkpoints"
                ],
                "set_last_checkpoints_with_time": [
                    "self",
                    "last_checkpoints_with_time"
                ],
                "recover_last_checkpoints": [
                    "self",
                    "checkpoint_paths"
                ],
                "save": [
                    "self",
                    "sess",
                    "save_path",
                    "global_step",
                    "latest_filename",
                    "meta_graph_suffix",
                    "write_meta_graph",
                    "write_state"
                ],
                "export_meta_graph": [
                    "self",
                    "filename",
                    "collection_list",
                    "as_text",
                    "export_scope",
                    "clear_devices"
                ],
                "restore": [
                    "self",
                    "sess",
                    "save_path"
                ],
                "_add_collection_def": [
                    "meta_graph_def",
                    "key",
                    "export_scope"
                ]
            }
        },
        "tensorflow.python.training.basic_loops_test": {
            "_test_dir": [
                "test_name"
            ],
            "BasicTrainLoopTest": {
                "testBasicTrainLoop": [
                    "self"
                ],
                "testBasicTrainLoopExceptionAborts": [
                    "self"
                ],
                "testBasicTrainLoopRetryOnAborted": [
                    "self"
                ]
            }
        },
        "tensorflow.python.training.localhost_cluster_performance_test": {
            "create_local_cluster": [
                "num_workers",
                "num_ps",
                "protocol"
            ],
            "CreateLocalClusterTest": {
                "testCreateLocalCluster": [
                    "self"
                ]
            },
            "CreateLocalClusterBenchmark": {
                "benchmarkCreateLocalCluster": [
                    "self"
                ]
            },
            "PartitionedVariablesBenchmark": {
                "benchmark_create_1000_partitions_with_100_parameter_servers": [
                    "self"
                ]
            }
        },
        "tensorflow.python.training.session_manager_test": {
            "SessionManagerTest": {
                "testPrepareSessionSucceeds": [
                    "self"
                ],
                "testPrepareSessionSucceedsWithInitFeedDict": [
                    "self"
                ],
                "testPrepareSessionSucceedsWithInitFn": [
                    "self"
                ],
                "testPrepareSessionFails": [
                    "self"
                ],
                "testRecoverSession": [
                    "self"
                ],
                "testWaitForSessionReturnsNoneAfterTimeout": [
                    "self"
                ],
                "testInitWithNoneLocalInitOpError": [
                    "self"
                ],
                "testRecoverSessionWithReadyForLocalInitOp": [
                    "self"
                ],
                "testRecoverSessionWithReadyForLocalInitOpFailsToReadyLocal": [
                    "self"
                ],
                "testRecoverSessionNoChkptStillRunsLocalInitOp": [
                    "self"
                ],
                "testRecoverSessionFailsStillRunsLocalInitOp": [
                    "self"
                ],
                "testWaitForSessionLocalInit": [
                    "self"
                ],
                "testWaitForSessionWithReadyForLocalInitOpFailsToReadyLocal": [
                    "self"
                ],
                "testWaitForSessionInsufficientReadyForLocalInitCheck": [
                    "self"
                ],
                "testPrepareSessionWithReadyForLocalInitOp": [
                    "self"
                ],
                "testPrepareSessionDidNotInitLocalVariable": [
                    "self"
                ],
                "testPrepareSessionWithReadyNotReadyForLocal": [
                    "self"
                ],
                "testPrepareSessionWithInsufficientReadyForLocalInitCheck": [
                    "self"
                ]
            },
            "ObsoleteSessionManagerTest": {
                "testPrepareSessionSucceeds": [
                    "self"
                ],
                "testPrepareSessionSucceedsWithInitFeedDict": [
                    "self"
                ],
                "testPrepareSessionSucceedsWithInitFn": [
                    "self"
                ],
                "testPrepareSessionFails": [
                    "self"
                ],
                "testRecoverSession": [
                    "self"
                ],
                "testWaitForSessionReturnsNoneAfterTimeout": [
                    "self"
                ]
            }
        },
        "tensorflow.python.training": {},
        "tensorflow.python.training.monitored_session": {
            "MonitoredTrainingSession": [
                "master",
                "is_chief",
                "checkpoint_dir",
                "scaffold",
                "hooks",
                "chief_only_hooks",
                "save_checkpoint_secs",
                "save_summaries_steps",
                "config"
            ],
            "Scaffold": {
                "__init__": [
                    "self",
                    "init_op",
                    "init_feed_dict",
                    "init_fn",
                    "ready_op",
                    "local_init_op",
                    "summary_op",
                    "saver"
                ],
                "finalize": [
                    "self"
                ],
                "init_fn": [
                    "self"
                ],
                "init_op": [
                    "self"
                ],
                "ready_op": [
                    "self"
                ],
                "local_init_op": [
                    "self"
                ],
                "summary_op": [
                    "self"
                ],
                "saver": [
                    "self"
                ],
                "init_feed_dict": [
                    "self"
                ],
                "get_or_default": [
                    "arg_name",
                    "collection_key",
                    "default_constructor"
                ],
                "_default_local_init_op": []
            },
            "SessionCreator": {
                "create_session": [
                    "self"
                ]
            },
            "ChiefSessionCreator": {
                "__init__": [
                    "self",
                    "scaffold",
                    "master",
                    "config",
                    "checkpoint_dir"
                ],
                "_get_session_manager": [
                    "self"
                ],
                "create_session": [
                    "self"
                ]
            },
            "WorkerSessionCreator": {
                "__init__": [
                    "self",
                    "scaffold",
                    "master",
                    "config"
                ],
                "_get_session_manager": [
                    "self"
                ],
                "create_session": [
                    "self"
                ]
            },
            "MonitoredSession": {
                "__init__": [
                    "self",
                    "session_creator",
                    "hooks"
                ],
                "graph": [
                    "self"
                ],
                "run": [
                    "self",
                    "fetches",
                    "feed_dict",
                    "options",
                    "run_metadata"
                ],
                "should_stop": [
                    "self"
                ],
                "close": [
                    "self"
                ],
                "__enter__": [
                    "self"
                ],
                "__exit__": [
                    "self",
                    "exception_type",
                    "exception_value",
                    "traceback"
                ],
                "_close_internal": [
                    "self",
                    "exception_type"
                ],
                "_is_closed": [
                    "self"
                ]
            },
            "_WrappedSession": {
                "__init__": [
                    "self",
                    "sess"
                ],
                "graph": [
                    "self"
                ],
                "sess_str": [
                    "self"
                ],
                "should_stop": [
                    "self"
                ],
                "_check_stop": [
                    "self"
                ],
                "close": [
                    "self"
                ],
                "run": [
                    "self"
                ]
            },
            "_RecoverableSession": {
                "__init__": [
                    "self",
                    "sess_creator"
                ],
                "run": [
                    "self",
                    "fetches",
                    "feed_dict",
                    "options",
                    "run_metadata"
                ]
            },
            "_CoordinatedSession": {
                "__init__": [
                    "self",
                    "sess",
                    "coord"
                ],
                "_check_stop": [
                    "self"
                ],
                "close": [
                    "self"
                ]
            },
            "_HookedSession": {
                "__init__": [
                    "self",
                    "sess",
                    "hooks"
                ],
                "_check_stop": [
                    "self"
                ],
                "run": [
                    "self",
                    "fetches",
                    "feed_dict",
                    "options",
                    "run_metadata"
                ],
                "_call_hook_before_run": [
                    "self",
                    "run_context",
                    "fetch_dict",
                    "user_feed_dict",
                    "options"
                ],
                "_raise_if_feeds_intersects": [
                    "self",
                    "feeds1",
                    "feeds2",
                    "message"
                ],
                "_merge_run_options": [
                    "self",
                    "options",
                    "incoming_options"
                ]
            }
        },
        "tensorflow.python.training.momentum": {
            "MomentumOptimizer": {
                "__init__": [
                    "self",
                    "learning_rate",
                    "momentum",
                    "use_locking",
                    "name",
                    "use_nesterov"
                ],
                "_create_slots": [
                    "self",
                    "var_list"
                ],
                "_prepare": [
                    "self"
                ],
                "_apply_dense": [
                    "self",
                    "grad",
                    "var"
                ],
                "_apply_sparse": [
                    "self",
                    "grad",
                    "var"
                ]
            }
        },
        "tensorflow.python.training.rmsprop": {
            "RMSPropOptimizer": {
                "__init__": [
                    "self",
                    "learning_rate",
                    "decay",
                    "momentum",
                    "epsilon",
                    "use_locking",
                    "centered",
                    "name"
                ],
                "_create_slots": [
                    "self",
                    "var_list"
                ],
                "_prepare": [
                    "self"
                ],
                "_apply_dense": [
                    "self",
                    "grad",
                    "var"
                ],
                "_apply_sparse": [
                    "self",
                    "grad",
                    "var"
                ]
            }
        },
        "tensorflow.python.training.proximal_adagrad_test": {
            "ProximalAdagradOptimizerTest": {
                "testProximalAdagradwithoutRegularization": [
                    "self"
                ],
                "testProximalAdagradwithoutRegularization2": [
                    "self"
                ],
                "testProximalAdagradWithL1": [
                    "self"
                ],
                "testProximalAdagradWithL1_L2": [
                    "self"
                ],
                "applyOptimizer": [
                    "self",
                    "opt",
                    "steps",
                    "is_sparse"
                ],
                "testEquivAdagradwithoutRegularization": [
                    "self"
                ],
                "testEquivSparseAdagradwithoutRegularization": [
                    "self"
                ]
            }
        },
        "tensorflow.python.training.basic_session_run_hooks": {
            "_as_graph_element": [
                "obj"
            ],
            "_SecondOrStepTimer": {
                "__init__": [
                    "self",
                    "every_secs",
                    "every_steps"
                ],
                "should_trigger_for_step": [
                    "self",
                    "step"
                ],
                "update_last_triggered_step": [
                    "self",
                    "step"
                ],
                "last_triggered_step": [
                    "self"
                ]
            },
            "LoggingTensorHook": {
                "__init__": [
                    "self",
                    "tensors",
                    "every_n_iter",
                    "every_n_secs"
                ],
                "begin": [
                    "self"
                ],
                "before_run": [
                    "self",
                    "run_context"
                ],
                "after_run": [
                    "self",
                    "run_context",
                    "run_values"
                ]
            },
            "StopAtStepHook": {
                "__init__": [
                    "self",
                    "num_steps",
                    "last_step"
                ],
                "begin": [
                    "self"
                ],
                "before_run": [
                    "self",
                    "run_context"
                ],
                "after_run": [
                    "self",
                    "run_context",
                    "run_values"
                ]
            },
            "CheckpointSaverHook": {
                "__init__": [
                    "self",
                    "checkpoint_dir",
                    "save_secs",
                    "save_steps",
                    "saver",
                    "checkpoint_basename",
                    "scaffold"
                ],
                "begin": [
                    "self"
                ],
                "before_run": [
                    "self",
                    "run_context"
                ],
                "after_run": [
                    "self",
                    "run_context",
                    "run_values"
                ],
                "end": [
                    "self",
                    "session"
                ],
                "_save": [
                    "self",
                    "step",
                    "session"
                ]
            },
            "StepCounterHook": {
                "__init__": [
                    "self",
                    "every_n_steps",
                    "every_n_secs",
                    "output_dir",
                    "summary_writer"
                ],
                "begin": [
                    "self"
                ],
                "before_run": [
                    "self",
                    "run_context"
                ],
                "after_run": [
                    "self",
                    "run_context",
                    "run_values"
                ]
            },
            "NanLossDuringTrainingError": {
                "__str__": [
                    "self"
                ]
            },
            "NanTensorHook": {
                "__init__": [
                    "self",
                    "loss_tensor",
                    "fail_on_nan_loss"
                ],
                "before_run": [
                    "self",
                    "run_context"
                ],
                "after_run": [
                    "self",
                    "run_context",
                    "run_values"
                ]
            },
            "SummarySaverHook": {
                "__init__": [
                    "self",
                    "save_steps",
                    "save_secs",
                    "output_dir",
                    "summary_writer",
                    "scaffold",
                    "summary_op"
                ],
                "begin": [
                    "self"
                ],
                "before_run": [
                    "self",
                    "run_context"
                ],
                "after_run": [
                    "self",
                    "run_context",
                    "run_values"
                ],
                "end": [
                    "self",
                    "session"
                ]
            }
        },
        "tensorflow.python.training.adadelta": {
            "AdadeltaOptimizer": {
                "__init__": [
                    "self",
                    "learning_rate",
                    "rho",
                    "epsilon",
                    "use_locking",
                    "name"
                ],
                "_create_slots": [
                    "self",
                    "var_list"
                ],
                "_prepare": [
                    "self"
                ],
                "_apply_dense": [
                    "self",
                    "grad",
                    "var"
                ],
                "_apply_sparse": [
                    "self",
                    "grad",
                    "var"
                ]
            }
        },
        "tensorflow.python.training.tensorboard_logging": {
            "get_verbosity": [],
            "set_verbosity": [
                "verbosity"
            ],
            "_check_verbosity": [
                "verbosity"
            ],
            "set_summary_writer": [
                "summary_writer"
            ],
            "_clear_summary_writer": [],
            "log": [
                "level",
                "message"
            ],
            "debug": [
                "message"
            ],
            "info": [
                "message"
            ],
            "warn": [
                "message"
            ],
            "error": [
                "message"
            ],
            "fatal": [
                "message"
            ]
        },
        "tensorflow.python.training.gradient_descent": {
            "GradientDescentOptimizer": {
                "__init__": [
                    "self",
                    "learning_rate",
                    "use_locking",
                    "name"
                ],
                "_apply_dense": [
                    "self",
                    "grad",
                    "var"
                ],
                "_resource_apply_dense": [
                    "self",
                    "grad",
                    "handle"
                ],
                "_resource_apply_sparse": [
                    "self",
                    "grad",
                    "handle",
                    "indices"
                ],
                "_apply_sparse": [
                    "self",
                    "grad",
                    "var"
                ],
                "_prepare": [
                    "self"
                ]
            }
        },
        "tensorflow.python.training.device_setter": {
            "replica_device_setter": [
                "ps_tasks",
                "ps_device",
                "worker_device",
                "merge_devices",
                "cluster",
                "ps_ops",
                "ps_strategy"
            ],
            "_RoundRobinStrategy": {
                "__init__": [
                    "self",
                    "num_tasks"
                ],
                "__call__": [
                    "self",
                    "unused_op"
                ]
            },
            "_ReplicaDeviceChooser": {
                "__init__": [
                    "self",
                    "ps_tasks",
                    "ps_device",
                    "worker_device",
                    "merge_devices",
                    "ps_ops",
                    "ps_strategy"
                ],
                "device_function": [
                    "self",
                    "op"
                ]
            }
        },
        "tensorflow.python.training.saver_test": {
            "_TestDir": [
                "test_name"
            ],
            "CheckpointedOp": {
                "__init__": [
                    "self",
                    "name"
                ],
                "name": [
                    "self"
                ],
                "saveable": [
                    "self"
                ],
                "insert": [
                    "self",
                    "keys",
                    "values"
                ],
                "keys": [
                    "self"
                ],
                "values": [
                    "self"
                ],
                "_export": [
                    "self"
                ]
            },
            "SaverTest": {
                "testBasics": [
                    "self"
                ],
                "testInvalidPath": [
                    "self"
                ],
                "testInt64": [
                    "self"
                ],
                "testSomeErrors": [
                    "self"
                ],
                "testSameName": [
                    "self"
                ],
                "testBasicsWithListOfVariables": [
                    "self"
                ],
                "_SaveAndLoad": [
                    "self",
                    "var_name",
                    "var_value",
                    "other_value",
                    "save_path"
                ],
                "testCacheRereadsFile": [
                    "self"
                ],
                "testAllowEmpty": [
                    "self"
                ],
                "testGPU": [
                    "self"
                ],
                "testVariables": [
                    "self"
                ],
                "testVarListShouldBeEmptyInDeferredBuild": [
                    "self"
                ],
                "testBuildShouldBeCalledBeforeSaveInCaseOfDeferBuild": [
                    "self"
                ],
                "testDeferredBuild": [
                    "self"
                ],
                "testReshape": [
                    "self"
                ],
                "testSaveWithGlobalStep": [
                    "self",
                    "pad_step_number"
                ],
                "testSaveWithGlobalStepWithPadding": [
                    "self"
                ],
                "testSaveToNonexistingPath": [
                    "self"
                ]
            },
            "SaveRestoreShardedTest": {
                "testBasics": [
                    "self"
                ],
                "testSaverDef": [
                    "self"
                ],
                "testPartitionedVariables": [
                    "self"
                ]
            },
            "MaxToKeepTest": {
                "testNonSharded": [
                    "self"
                ],
                "testSharded": [
                    "self"
                ],
                "testNoMaxToKeep": [
                    "self"
                ],
                "testNoMetaGraph": [
                    "self"
                ]
            },
            "KeepCheckpointEveryNHoursTest": {
                "testNonSharded": [
                    "self"
                ]
            },
            "SaveRestoreWithVariableNameMap": {
                "testNonReshape": [
                    "self"
                ]
            },
            "LatestCheckpointWithRelativePaths": {
                "tempWorkingDir": [
                    "temppath"
                ],
                "tempDir": [],
                "testNameCollision": [
                    "self"
                ],
                "testRelativePath": [
                    "self"
                ]
            },
            "CheckpointStateTest": {
                "testAbsPath": [
                    "self"
                ],
                "testRelPath": [
                    "self"
                ],
                "testAllModelCheckpointPaths": [
                    "self"
                ],
                "testUpdateCheckpointState": [
                    "self"
                ],
                "testCheckPointStateFailsWhenIncomplete": [
                    "self"
                ],
                "testCheckPointCompletesRelativePaths": [
                    "self"
                ]
            },
            "MetaGraphTest": {
                "testAddCollectionDef": [
                    "self"
                ],
                "testAddCollectionDefFails": [
                    "self"
                ],
                "_testMultiSaverCollectionSave": [
                    "self"
                ],
                "_testMultiSaverCollectionRestore": [
                    "self"
                ],
                "testMultiSaverCollection": [
                    "self"
                ],
                "testBinaryAndTextFormat": [
                    "self"
                ],
                "testSliceVariable": [
                    "self"
                ],
                "_testGraphExtensionSave": [
                    "self"
                ],
                "_testGraphExtensionRestore": [
                    "self"
                ],
                "_testRestoreFromTrainGraphWithControlContext": [
                    "self"
                ],
                "testGraphExtension": [
                    "self"
                ],
                "testStrippedOpListDef": [
                    "self"
                ],
                "testImportIntoNamescope": [
                    "self"
                ],
                "testClearDevicesOnImport": [
                    "self"
                ],
                "testClearDevicesOnExport": [
                    "self"
                ]
            },
            "CheckpointReaderTest": {
                "testDebugString": [
                    "self"
                ],
                "testNonexistentPath": [
                    "self"
                ]
            },
            "CheckpointReaderForV2Test": {},
            "WriteGraphTest": {
                "testWriteGraph": [
                    "self"
                ],
                "testRecursiveCreate": [
                    "self"
                ]
            },
            "SaverUtilsTest": {
                "setUp": [
                    "self"
                ],
                "tearDown": [
                    "self"
                ],
                "testCheckpointExists": [
                    "self"
                ],
                "testGetCheckpointMtimes": [
                    "self"
                ]
            },
            "ScopedGraphTest": {
                "_testScopedSave": [
                    "self",
                    "test_dir",
                    "exported_filename",
                    "ckpt_filename"
                ],
                "_testScopedRestore": [
                    "self",
                    "test_dir",
                    "exported_filename",
                    "new_exported_filename",
                    "ckpt_filename"
                ],
                "testScopedSaveAndRestore": [
                    "self"
                ],
                "testCopyScopedGraph": [
                    "self"
                ],
                "testExportGraphDefWithScope": [
                    "self"
                ]
            }
        },
        "tensorflow.python.training.optimizer": {
            "_get_processor": [
                "v"
            ],
            "_OptimizableVariable": {
                "target": [
                    "self"
                ],
                "update_op": [
                    "self",
                    "optimizer",
                    "g"
                ]
            },
            "_RefVariableProcessor": {
                "__init__": [
                    "self",
                    "v"
                ],
                "target": [
                    "self"
                ],
                "update_op": [
                    "self",
                    "optimizer",
                    "g"
                ]
            },
            "_DenseResourceVariableProcessor": {
                "__init__": [
                    "self",
                    "v"
                ],
                "target": [
                    "self"
                ],
                "update_op": [
                    "self",
                    "optimizer",
                    "g"
                ]
            },
            "_SparseResourceVariableProcessor": {
                "__init__": [
                    "self",
                    "v"
                ],
                "target": [
                    "self"
                ],
                "update_op": [
                    "self",
                    "optimizer",
                    "g"
                ]
            },
            "Optimizer": {
                "__init__": [
                    "self",
                    "use_locking",
                    "name"
                ],
                "get_name": [
                    "self"
                ],
                "minimize": [
                    "self",
                    "loss",
                    "global_step",
                    "var_list",
                    "gate_gradients",
                    "aggregation_method",
                    "colocate_gradients_with_ops",
                    "name",
                    "grad_loss"
                ],
                "compute_gradients": [
                    "self",
                    "loss",
                    "var_list",
                    "gate_gradients",
                    "aggregation_method",
                    "colocate_gradients_with_ops",
                    "grad_loss"
                ],
                "apply_gradients": [
                    "self",
                    "grads_and_vars",
                    "global_step",
                    "name"
                ],
                "get_slot": [
                    "self",
                    "var",
                    "name"
                ],
                "get_slot_names": [
                    "self"
                ],
                "_assert_valid_dtypes": [
                    "self",
                    "tensors"
                ],
                "_valid_dtypes": [
                    "self"
                ],
                "_create_slots": [
                    "self",
                    "var_list"
                ],
                "_prepare": [
                    "self"
                ],
                "_apply_dense": [
                    "self",
                    "grad",
                    "var"
                ],
                "_resource_apply_dense": [
                    "self",
                    "grad",
                    "handle"
                ],
                "_apply_sparse": [
                    "self",
                    "grad",
                    "var"
                ],
                "_finish": [
                    "self",
                    "update_ops",
                    "name_scope"
                ],
                "_slot_dict": [
                    "self",
                    "slot_name"
                ],
                "_get_or_make_slot": [
                    "self",
                    "var",
                    "val",
                    "slot_name",
                    "op_name"
                ],
                "_zeros_slot": [
                    "self",
                    "var",
                    "slot_name",
                    "op_name"
                ]
            }
        },
        "tensorflow.python.training.saver_large_partitioned_variable_test": {
            "SaverLargePartitionedVariableTest": {
                "testLargePartitionedVariables": [
                    "self"
                ]
            }
        },
        "tensorflow.python.training.checkpoint_state_pb2": {},
        "tensorflow.python.training.moving_averages": {
            "assign_moving_average": [
                "variable",
                "value",
                "decay",
                "zero_debias",
                "name"
            ],
            "weighted_moving_average": [
                "value",
                "decay",
                "weight",
                "truediv",
                "collections",
                "name"
            ],
            "_zero_debias": [
                "unbiased_var",
                "value",
                "decay"
            ],
            "ExponentialMovingAverage": {
                "__init__": [
                    "self",
                    "decay",
                    "num_updates",
                    "name"
                ],
                "apply": [
                    "self",
                    "var_list"
                ],
                "average": [
                    "self",
                    "var"
                ],
                "average_name": [
                    "self",
                    "var"
                ],
                "variables_to_restore": [
                    "self",
                    "moving_avg_variables"
                ]
            }
        },
        "tensorflow.python.training.slot_creator_test": {
            "SlotCreatorTest": {
                "testCreateSlotFromVariable": [
                    "self"
                ],
                "testCreateSlotFromTensor": [
                    "self"
                ],
                "testCreateZerosSlotFromVariable": [
                    "self"
                ],
                "testCreateZerosSlotFromTensor": [
                    "self"
                ],
                "testCreateSlotFromVariableRespectsScope": [
                    "self"
                ]
            }
        },
        "tensorflow.python.training.proximal_gradient_descent": {
            "ProximalGradientDescentOptimizer": {
                "__init__": [
                    "self",
                    "learning_rate",
                    "l1_regularization_strength",
                    "l2_regularization_strength",
                    "use_locking",
                    "name"
                ],
                "_apply_dense": [
                    "self",
                    "grad",
                    "var"
                ],
                "_apply_sparse": [
                    "self",
                    "grad",
                    "var"
                ],
                "_prepare": [
                    "self"
                ]
            }
        },
        "tensorflow.python.training.learning_rate_decay": {
            "exponential_decay": [
                "learning_rate",
                "global_step",
                "decay_steps",
                "decay_rate",
                "staircase",
                "name"
            ],
            "piecewise_constant": [
                "x",
                "boundaries",
                "values",
                "name"
            ],
            "polynomial_decay": [
                "learning_rate",
                "global_step",
                "decay_steps",
                "end_learning_rate",
                "power",
                "cycle",
                "name"
            ],
            "natural_exp_decay": [
                "learning_rate",
                "global_step",
                "decay_steps",
                "decay_rate",
                "staircase",
                "name"
            ],
            "inverse_time_decay": [
                "learning_rate",
                "global_step",
                "decay_steps",
                "decay_rate",
                "staircase",
                "name"
            ]
        },
        "tensorflow.python.training.monitored_session_test": {
            "_test_dir": [
                "temp_dir",
                "test_name"
            ],
            "busy_wait_for_coord_stop": [
                "coord"
            ],
            "ScaffoldTest": {
                "test_nothing_created_before_finalize": [
                    "self"
                ],
                "test_defaults_empty_graph": [
                    "self"
                ],
                "test_defaults_no_variables": [
                    "self"
                ],
                "test_caches_values": [
                    "self"
                ],
                "test_raise_error_if_more_than_one_cached_item": [
                    "self"
                ],
                "test_uses_passed_values": [
                    "self"
                ],
                "test_graph_is_finalized": [
                    "self"
                ]
            },
            "FakeHook": {
                "__init__": [
                    "self"
                ],
                "begin": [
                    "self"
                ],
                "before_run": [
                    "self",
                    "run_context"
                ],
                "after_run": [
                    "self",
                    "run_context",
                    "run_values"
                ],
                "end": [
                    "self",
                    "session"
                ]
            },
            "MonitoredTrainingSessionTest": {
                "test_saving_restoring_checkpoint": [
                    "self"
                ],
                "test_summaries": [
                    "self"
                ],
                "test_custom_saving": [
                    "self"
                ]
            },
            "StopAtNSession": {
                "__init__": [
                    "self",
                    "sess",
                    "n"
                ],
                "_check_stop": [
                    "self"
                ]
            },
            "WrappedSessionTest": {
                "test_properties": [
                    "self"
                ],
                "test_should_stop_on_close": [
                    "self"
                ],
                "test_should_stop_uses_check_stop": [
                    "self"
                ],
                "test_should_stop_delegates_to_wrapped_session": [
                    "self"
                ],
                "test_close_twice": [
                    "self"
                ],
                "test_run": [
                    "self"
                ]
            },
            "CoordinatedSessionTest": {
                "test_properties": [
                    "self"
                ],
                "test_run": [
                    "self"
                ],
                "test_should_stop_on_close": [
                    "self"
                ],
                "test_should_stop_on_coord_stop": [
                    "self"
                ],
                "test_dont_request_stop_on_exception_in_main_thread": [
                    "self"
                ],
                "test_stop_threads_on_close_after_exception": [
                    "self"
                ],
                "test_stop_threads_on_close": [
                    "self"
                ]
            },
            "AbortAtNSession": {
                "__init__": [
                    "self",
                    "sess",
                    "n"
                ],
                "close": [
                    "self"
                ],
                "run": [
                    "self"
                ]
            },
            "RecoverableSessionTest": {
                "test_properties": [
                    "self"
                ],
                "test_run": [
                    "self"
                ],
                "test_recovery": [
                    "self"
                ]
            },
            "FakeSession": {
                "__init__": [
                    "self",
                    "sess"
                ],
                "run": [
                    "self",
                    "fetches"
                ]
            },
            "HookedSessionTest": {
                "testRunPassesAllArguments": [
                    "self"
                ],
                "testCallsHooksBeginEnd": [
                    "self"
                ],
                "testShouldStop": [
                    "self"
                ],
                "testFetchesHookRequests": [
                    "self"
                ],
                "testOnlyHooksHaveFeeds": [
                    "self"
                ],
                "testBothHooksAndUserHaveFeeds": [
                    "self"
                ],
                "testHooksFeedConflicts": [
                    "self"
                ],
                "testHooksAndUserFeedConflicts": [
                    "self"
                ]
            },
            "RaiseOnceAtCountN": {
                "__init__": [
                    "self",
                    "n",
                    "ex"
                ],
                "before_run": [
                    "self",
                    "run_context"
                ]
            },
            "RunOptionsMetadataHook": {
                "__init__": [
                    "self",
                    "trace_level",
                    "timeout_in_ms",
                    "output_partition_graphs",
                    "debug_tensor_watch"
                ],
                "before_run": [
                    "self",
                    "run_context"
                ],
                "after_run": [
                    "self",
                    "run_context",
                    "run_values"
                ]
            },
            "MonitoredSessionTest": {
                "test_defaults": [
                    "self"
                ],
                "test_last_step": [
                    "self"
                ],
                "test_num_steps": [
                    "self"
                ],
                "test_recovery": [
                    "self"
                ],
                "test_retry_on_aborted_error": [
                    "self"
                ],
                "test_recover_and_retry_on_aborted_error": [
                    "self"
                ],
                "test_exit_cleanly_on_out_of_range_exception": [
                    "self"
                ],
                "test_exit_cleanly_on_stop_iteration_exception": [
                    "self"
                ],
                "test_regular_exception_pass_through_run": [
                    "self"
                ],
                "test_regular_exception_reported_to_coord_pass_through_run": [
                    "self"
                ],
                "test_regular_exception_reported_to_coord_pass_through_return": [
                    "self"
                ],
                "test_stop_cleanly_when_no_exception_in_with_body": [
                    "self"
                ],
                "test_raises_regular_exceptions_in_with_body": [
                    "self"
                ],
                "test_graph": [
                    "self"
                ],
                "test_graph_finalized_during_run_unfinalized_after_exit": [
                    "self"
                ],
                "test_keep_finalized_graph_as_finalized": [
                    "self"
                ],
                "test_merge_run_options_from_hooks": [
                    "self"
                ],
                "test_merge_caller_and_hook_run_options": [
                    "self"
                ]
            }
        },
        "tensorflow.python.training.rmsprop_test": {
            "RMSPropOptimizerTest": {
                "_rmsprop_update_numpy": [
                    "self",
                    "var",
                    "g",
                    "mg",
                    "rms",
                    "mom",
                    "lr",
                    "decay",
                    "momentum",
                    "epsilon",
                    "centered"
                ],
                "_sparse_rmsprop_update_numpy": [
                    "self",
                    "var",
                    "gindexs",
                    "gvalues",
                    "mg",
                    "rms",
                    "mom",
                    "lr",
                    "decay",
                    "momentum",
                    "epsilon",
                    "centered"
                ],
                "testDense": [
                    "self"
                ],
                "testSparse": [
                    "self"
                ],
                "testWithoutMomentum": [
                    "self"
                ],
                "testWithMomentum": [
                    "self"
                ]
            }
        },
        "tensorflow.python.training.server_lib": {
            "_make_server_def": [
                "server_or_cluster_def",
                "job_name",
                "task_index",
                "protocol",
                "config"
            ],
            "Server": {
                "__init__": [
                    "self",
                    "server_or_cluster_def",
                    "job_name",
                    "task_index",
                    "protocol",
                    "config",
                    "start"
                ],
                "start": [
                    "self"
                ],
                "join": [
                    "self"
                ],
                "server_def": [
                    "self"
                ],
                "target": [
                    "self"
                ],
                "create_local_server": [
                    "config",
                    "start"
                ]
            },
            "ClusterSpec": {
                "__init__": [
                    "self",
                    "cluster"
                ],
                "__nonzero__": [
                    "self"
                ],
                "__eq__": [
                    "self",
                    "other"
                ],
                "__ne__": [
                    "self",
                    "other"
                ],
                "as_dict": [
                    "self"
                ],
                "as_cluster_def": [
                    "self"
                ],
                "jobs": [
                    "self"
                ],
                "num_tasks": [
                    "self",
                    "job_name"
                ],
                "task_indices": [
                    "self",
                    "job_name"
                ],
                "task_address": [
                    "self",
                    "job_name",
                    "task_index"
                ],
                "job_tasks": [
                    "self",
                    "job_name"
                ],
                "_make_cluster_def": [
                    "self"
                ]
            }
        },
        "tensorflow.python.training.adagrad_da_test": {
            "AdagradDAOptimizerTest": {
                "testAdagradDAwithoutRegularizationBasic1": [
                    "self"
                ],
                "testAdagradDAwithoutRegularizationBasic2": [
                    "self"
                ],
                "testAdagradDAWithL1": [
                    "self"
                ],
                "testAdagradDAWithL1_L2": [
                    "self"
                ]
            }
        },
        "tensorflow.python.training.learning_rate_decay_test": {
            "LRDecayTest": {
                "testContinuous": [
                    "self"
                ],
                "testStaircase": [
                    "self"
                ],
                "testVariables": [
                    "self"
                ],
                "testPiecewiseConstant": [
                    "self"
                ],
                "testPiecewiseConstantEdgeCases": [
                    "self"
                ]
            },
            "LinearDecayTest": {
                "testHalfWay": [
                    "self"
                ],
                "testEnd": [
                    "self"
                ],
                "testHalfWayWithEnd": [
                    "self"
                ],
                "testBeyondEnd": [
                    "self"
                ],
                "testBeyondEndWithCycle": [
                    "self"
                ]
            },
            "SqrtDecayTest": {
                "testHalfWay": [
                    "self"
                ],
                "testEnd": [
                    "self"
                ],
                "testHalfWayWithEnd": [
                    "self"
                ],
                "testBeyondEnd": [
                    "self"
                ],
                "testBeyondEndWithCycle": [
                    "self"
                ]
            },
            "ExponentialDecayTest": {
                "testDecay": [
                    "self"
                ],
                "testStaircase": [
                    "self"
                ]
            },
            "InverseDecayTest": {
                "testDecay": [
                    "self"
                ],
                "testStaircase": [
                    "self"
                ]
            }
        },
        "tensorflow.python.training.moving_averages_test": {
            "_Repeat": [
                "value",
                "dim"
            ],
            "MovingAveragesTest": {
                "testAssignMovingAverageWithoutZeroDebias": [
                    "self"
                ],
                "testAssignMovingAverage": [
                    "self"
                ],
                "testWeightedMovingAverage": [
                    "self"
                ]
            },
            "ExponentialMovingAverageTest": {
                "_CheckDecay": [
                    "self",
                    "ema",
                    "actual_decay",
                    "dim"
                ],
                "testAverageVariablesNoNumUpdates_Scalar": [
                    "self"
                ],
                "testAverageVariablesNoNumUpdates_Vector": [
                    "self"
                ],
                "testAverageVariablesNumUpdates_Scalar": [
                    "self"
                ],
                "testAverageVariablesNumUpdates_Vector": [
                    "self"
                ],
                "testAverageVariablesWithControlDeps": [
                    "self"
                ],
                "testAverageVariablesNames": [
                    "self"
                ],
                "testAverageVariablesNamesRespectScope": [
                    "self"
                ],
                "testSubsetAverageVariablesNames": [
                    "self"
                ],
                "testAverageVariablesDeviceAssignment": [
                    "self"
                ]
            }
        },
        "tensorflow.python.client.device_lib": {
            "list_local_devices": []
        },
        "tensorflow.python.client.timeline": {
            "AllocationMaximum": {},
            "StepStatsAnalysis": {},
            "_ChromeTraceFormatter": {
                "__init__": [
                    "self",
                    "show_memory"
                ],
                "_create_event": [
                    "self",
                    "ph",
                    "category",
                    "name",
                    "pid",
                    "tid",
                    "timestamp"
                ],
                "emit_pid": [
                    "self",
                    "name",
                    "pid"
                ],
                "emit_tid": [
                    "self",
                    "name",
                    "pid",
                    "tid"
                ],
                "emit_region": [
                    "self",
                    "timestamp",
                    "duration",
                    "pid",
                    "tid",
                    "category",
                    "name",
                    "args"
                ],
                "emit_obj_create": [
                    "self",
                    "category",
                    "name",
                    "timestamp",
                    "pid",
                    "tid",
                    "object_id"
                ],
                "emit_obj_delete": [
                    "self",
                    "category",
                    "name",
                    "timestamp",
                    "pid",
                    "tid",
                    "object_id"
                ],
                "emit_obj_snapshot": [
                    "self",
                    "category",
                    "name",
                    "timestamp",
                    "pid",
                    "tid",
                    "object_id",
                    "snapshot"
                ],
                "emit_flow_start": [
                    "self",
                    "name",
                    "timestamp",
                    "pid",
                    "tid",
                    "flow_id"
                ],
                "emit_flow_end": [
                    "self",
                    "name",
                    "timestamp",
                    "pid",
                    "tid",
                    "flow_id"
                ],
                "emit_counter": [
                    "self",
                    "category",
                    "name",
                    "pid",
                    "timestamp",
                    "counter",
                    "value"
                ],
                "emit_counters": [
                    "self",
                    "category",
                    "name",
                    "pid",
                    "timestamp",
                    "counters"
                ],
                "format_to_string": [
                    "self",
                    "pretty"
                ]
            },
            "_TensorTracker": {
                "__init__": [
                    "self",
                    "name",
                    "object_id",
                    "timestamp",
                    "pid",
                    "allocator",
                    "num_bytes"
                ],
                "name": [
                    "self"
                ],
                "pid": [
                    "self"
                ],
                "create_time": [
                    "self"
                ],
                "object_id": [
                    "self"
                ],
                "num_bytes": [
                    "self"
                ],
                "allocator": [
                    "self"
                ],
                "last_unref": [
                    "self"
                ],
                "add_ref": [
                    "self",
                    "timestamp"
                ],
                "add_unref": [
                    "self",
                    "timestamp"
                ]
            },
            "Timeline": {
                "__init__": [
                    "self",
                    "step_stats",
                    "graph"
                ],
                "_alloc_pid": [
                    "self"
                ],
                "_alloc_flow_id": [
                    "self"
                ],
                "_parse_op_label": [
                    "self",
                    "label"
                ],
                "_assign_lanes": [
                    "self"
                ],
                "_emit_op": [
                    "self",
                    "nodestats",
                    "pid",
                    "is_gputrace"
                ],
                "_emit_tensor_snapshot": [
                    "self",
                    "tensor",
                    "timestamp",
                    "pid",
                    "tid",
                    "value"
                ],
                "_produce_tensor": [
                    "self",
                    "name",
                    "timestamp",
                    "tensors_pid",
                    "allocator",
                    "num_bytes"
                ],
                "_is_gputrace_device": [
                    "self",
                    "device_name"
                ],
                "_allocate_pids": [
                    "self"
                ],
                "_analyze_tensors": [
                    "self",
                    "show_memory"
                ],
                "_show_compute": [
                    "self",
                    "show_dataflow"
                ],
                "_show_memory_counters": [
                    "self"
                ],
                "analyze_step_stats": [
                    "self",
                    "show_dataflow",
                    "show_memory"
                ],
                "generate_chrome_trace_format": [
                    "self",
                    "show_dataflow",
                    "show_memory"
                ]
            }
        },
        "tensorflow.python.client.notebook": {
            "main": [
                "unused_argv"
            ]
        },
        "tensorflow.python.client.client_lib": {},
        "tensorflow.python.client.quantize_training_test": {
            "PywrapQuantizeTrainingTest": {
                "testQuantizeTraining": [
                    "self"
                ]
            }
        },
        "tensorflow.python.client.device_lib_test": {
            "DeviceLibTest": {
                "testListLocalDevices": [
                    "self"
                ]
            }
        },
        "tensorflow.python.client": {},
        "tensorflow.python.client.session": {
            "_get_indexed_slices_value_from_fetches": [
                "fetched_vals"
            ],
            "_get_feeds_for_indexed_slices": [
                "feed",
                "feed_val"
            ],
            "register_session_run_conversion_functions": [
                "tensor_type",
                "fetch_function",
                "feed_function",
                "feed_function_for_partial_run"
            ],
            "_uniquify_fetches": [
                "fetch_mappers"
            ],
            "SessionInterface": {
                "graph": [
                    "self"
                ],
                "sess_str": [
                    "self"
                ],
                "run": [
                    "self",
                    "fetches",
                    "feed_dict",
                    "options",
                    "run_metadata"
                ],
                "partial_run_setup": [
                    "self",
                    "fetches",
                    "feeds"
                ],
                "partial_run": [
                    "self",
                    "handle",
                    "fetches",
                    "feed_dict"
                ]
            },
            "_FetchMapper": {
                "unique_fetches": [
                    "self"
                ],
                "build_results": [
                    "self",
                    "values"
                ],
                "for_fetch": [
                    "fetch"
                ]
            },
            "_ElementFetchMapper": {
                "__init__": [
                    "self",
                    "fetches",
                    "contraction_fn"
                ],
                "unique_fetches": [
                    "self"
                ],
                "build_results": [
                    "self",
                    "values"
                ]
            },
            "_ListFetchMapper": {
                "__init__": [
                    "self",
                    "fetches"
                ],
                "unique_fetches": [
                    "self"
                ],
                "build_results": [
                    "self",
                    "values"
                ]
            },
            "_DictFetchMapper": {
                "__init__": [
                    "self",
                    "fetches"
                ],
                "unique_fetches": [
                    "self"
                ],
                "build_results": [
                    "self",
                    "values"
                ]
            },
            "_FetchHandler": {
                "__init__": [
                    "self",
                    "graph",
                    "fetches",
                    "feeds"
                ],
                "_assert_fetchable": [
                    "self",
                    "graph",
                    "op"
                ],
                "fetches": [
                    "self"
                ],
                "targets": [
                    "self"
                ],
                "build_results": [
                    "self",
                    "session",
                    "tensor_values"
                ]
            },
            "BaseSession": {
                "__init__": [
                    "self",
                    "target",
                    "graph",
                    "config"
                ],
                "close": [
                    "self"
                ],
                "__del__": [
                    "self"
                ],
                "graph": [
                    "self"
                ],
                "graph_def": [
                    "self"
                ],
                "sess_str": [
                    "self"
                ],
                "as_default": [
                    "self"
                ],
                "run": [
                    "self",
                    "fetches",
                    "feed_dict",
                    "options",
                    "run_metadata"
                ],
                "partial_run": [
                    "self",
                    "handle",
                    "fetches",
                    "feed_dict"
                ],
                "partial_run_setup": [
                    "self",
                    "fetches",
                    "feeds"
                ],
                "_run": [
                    "self",
                    "handle",
                    "fetches",
                    "feed_dict",
                    "options",
                    "run_metadata"
                ],
                "_do_run": [
                    "self",
                    "handle",
                    "target_list",
                    "fetch_list",
                    "feed_dict",
                    "options",
                    "run_metadata"
                ],
                "_do_call": [
                    "self",
                    "fn"
                ],
                "_extend_graph": [
                    "self"
                ],
                "_register_dead_handle": [
                    "self",
                    "handle"
                ],
                "_update_with_movers": [
                    "self",
                    "feed_dict",
                    "feed_map"
                ]
            },
            "Session": {
                "__init__": [
                    "self",
                    "target",
                    "graph",
                    "config"
                ],
                "__enter__": [
                    "self"
                ],
                "__exit__": [
                    "self",
                    "exec_type",
                    "exec_value",
                    "exec_tb"
                ],
                "reset": [
                    "target",
                    "containers",
                    "config"
                ]
            },
            "InteractiveSession": {
                "__init__": [
                    "self",
                    "target",
                    "graph",
                    "config"
                ],
                "close": [
                    "self"
                ]
            }
        },
        "tensorflow.python.client.session_test": {
            "SessionTest": {
                "testUseExistingGraph": [
                    "self"
                ],
                "testUseDefaultGraph": [
                    "self"
                ],
                "testCreate": [
                    "self"
                ],
                "testManyCPUs": [
                    "self"
                ],
                "testPerSessionThreads": [
                    "self"
                ],
                "testSessionInterOpThreadPool": [
                    "self"
                ],
                "testErrorsReported": [
                    "self"
                ],
                "testErrorPayload": [
                    "self"
                ],
                "testErrorCodeWithNoNodeDef": [
                    "self"
                ],
                "testOpConstructionErrorPayload": [
                    "self"
                ],
                "testErrorBasedOn": [
                    "self"
                ],
                "testFetchNone": [
                    "self"
                ],
                "testFetchSingleton": [
                    "self"
                ],
                "testFetchSingletonByName": [
                    "self"
                ],
                "testFetchList": [
                    "self"
                ],
                "testFetchTuple": [
                    "self"
                ],
                "testFetchNamedTuple": [
                    "self"
                ],
                "testFetchDict": [
                    "self"
                ],
                "testFetchNestingEmptyOneLevel": [
                    "self"
                ],
                "testFetchNestingOneLevel": [
                    "self"
                ],
                "testFetchTensorObject": [
                    "self"
                ],
                "testFetchScalar": [
                    "self"
                ],
                "testFetchOperationObject": [
                    "self"
                ],
                "testFetchSparseTensor": [
                    "self"
                ],
                "testFeedSparseTensor": [
                    "self"
                ],
                "testFeedSparsePlaceholder": [
                    "self"
                ],
                "testFeedSparsePlaceholderPartialShape": [
                    "self"
                ],
                "testFeedSparsePlaceholderConstantShape": [
                    "self"
                ],
                "testFetchIndexedSlices": [
                    "self"
                ],
                "testFeedIndexedSlices": [
                    "self"
                ],
                "testFetchIndexedSlicesWithoutDenseShape": [
                    "self"
                ],
                "testFeedIndexedSlicesWithoutDenseShape": [
                    "self"
                ],
                "testExtendWithStatelessOperations": [
                    "self"
                ],
                "testExtendWithStatefulOperations": [
                    "self"
                ],
                "testExtendWithGroupBy": [
                    "self"
                ],
                "testTensorGetMethod": [
                    "self"
                ],
                "testOperationRunMethod": [
                    "self"
                ],
                "testDefaultGraph": [
                    "self"
                ],
                "_testDefaultGraphInThread": [
                    "self",
                    "constructed_event",
                    "continue_event",
                    "i"
                ],
                "testDefaultGraphWithThreads": [
                    "self"
                ],
                "testParallelRun": [
                    "self"
                ],
                "testRunFeedDict": [
                    "self"
                ],
                "testGraphDef": [
                    "self"
                ],
                "testUseAfterClose": [
                    "self"
                ],
                "testUseAfterCloseConcurrent": [
                    "self"
                ],
                "testUseEmptyGraph": [
                    "self"
                ],
                "testNotEntered": [
                    "self"
                ],
                "testInteractive": [
                    "self"
                ],
                "testInteractivePlacePrunedGraph": [
                    "self"
                ],
                "testDefaultSessionPlacePrunedGraph": [
                    "self"
                ],
                "testSharedGraph": [
                    "self"
                ],
                "testDuplicatedInputs": [
                    "self"
                ],
                "testFeedAndFetch": [
                    "self"
                ],
                "testFeedError": [
                    "self"
                ],
                "testFeedPrecisionLossError": [
                    "self"
                ],
                "testStringFetch": [
                    "self"
                ],
                "testStringFeed": [
                    "self"
                ],
                "testStringFeedWithNullCharacters": [
                    "self"
                ],
                "testStringFeedWithUnicode": [
                    "self"
                ],
                "testInvalidTargetFails": [
                    "self"
                ],
                "testFetchByNameDifferentStringTypes": [
                    "self"
                ],
                "testIncorrectGraph": [
                    "self"
                ],
                "testPartialRun": [
                    "self"
                ],
                "testPartialRunIncomplete": [
                    "self"
                ],
                "testConcurrentPartialRun": [
                    "self"
                ],
                "testManyPartialRun": [
                    "self"
                ],
                "testRunAndPartialRun": [
                    "self"
                ],
                "testFeedDictKeyException": [
                    "self"
                ],
                "testPerStepTrace": [
                    "self"
                ],
                "testRunOptionsRunMetadata": [
                    "self"
                ],
                "testFeedShapeCompatibility": [
                    "self"
                ],
                "testInferShapesFalse": [
                    "self"
                ],
                "testInferShapesTrue": [
                    "self"
                ],
                "testBuildCostModel": [
                    "self"
                ],
                "testNonInteractiveSessionNesting": [
                    "self"
                ],
                "testInteractiveSessionNesting": [
                    "self"
                ],
                "testAsDefault": [
                    "self"
                ],
                "testReentry": [
                    "self"
                ],
                "testInvalidArgument": [
                    "self"
                ],
                "testTimeoutWithShortOperations": [
                    "self"
                ],
                "testRegisterFetchAndFeedConversionFunctions": [
                    "self"
                ]
            }
        },
        "tensorflow.python.client.events_writer_test": {
            "PywrapeventsWriterTest": {
                "testWriteEvents": [
                    "self"
                ],
                "testWriteEventInvalidType": [
                    "self"
                ]
            }
        },
        "tensorflow.python.client.timeline_test": {
            "TimelineTest": {
                "_validateTrace": [
                    "self",
                    "chrome_trace_format"
                ],
                "testSimpleTimeline": [
                    "self"
                ],
                "testTimelineCpu": [
                    "self"
                ],
                "testTimelineGpu": [
                    "self"
                ],
                "testAnalysisAndAllocations": [
                    "self"
                ],
                "testManyCPUs": [
                    "self"
                ]
            }
        },
        "tensorflow.python.kernel_tests.template_test": {
            "var_scoped_function": [],
            "internally_var_scoped_function": [
                "scope_name"
            ],
            "function_with_create": [
                "trainable"
            ],
            "TemplateTest": {
                "test_end_to_end": [
                    "self"
                ],
                "test_skip_stack_frames": [
                    "self"
                ],
                "test_template_with_name": [
                    "self"
                ],
                "test_unique_name_raise_error": [
                    "self"
                ],
                "test_unique_name_and_reuse": [
                    "self"
                ],
                "test_template_in_scope": [
                    "self"
                ],
                "test_template_with_internal_reuse": [
                    "self"
                ],
                "test_template_without_name": [
                    "self"
                ],
                "test_make_template": [
                    "self"
                ],
                "test_enforces_no_extra_trainable_variables": [
                    "self"
                ],
                "test_permits_extra_non_trainable_variables": [
                    "self"
                ],
                "test_internal_variable_reuse": [
                    "self"
                ],
                "test_nested_templates": [
                    "self"
                ],
                "test_immediate_scope_creation": [
                    "self"
                ],
                "test_scope_access": [
                    "self"
                ]
            }
        },
        "tensorflow.python.kernel_tests.atrous_conv2d_test": {
            "AtrousConv2DTest": {
                "_upsample_filters": [
                    "self",
                    "filters",
                    "rate"
                ],
                "testAtrousConv2DForward": [
                    "self"
                ],
                "testAtrousSequence": [
                    "self"
                ],
                "testGradient": [
                    "self"
                ]
            }
        },
        "tensorflow.python.kernel_tests.functional_ops_test": {
            "simple_scoped_fn": [
                "a",
                "x"
            ],
            "FunctionalOpsTest": {
                "testFoldl_Simple": [
                    "self"
                ],
                "testFoldl_Scoped": [
                    "self"
                ],
                "testFoldr_Simple": [
                    "self"
                ],
                "testFoldr_Scoped": [
                    "self"
                ],
                "testFold_Grad": [
                    "self"
                ],
                "testMap_Simple": [
                    "self"
                ],
                "testMapSparseTensor": [
                    "self"
                ],
                "testMap_Scoped": [
                    "self"
                ],
                "testMap_Grad": [
                    "self"
                ],
                "testMap_SimpleNotTensor": [
                    "self"
                ],
                "testMap_SingleInputMultiOutput": [
                    "self"
                ],
                "testMap_MultiOutputMismatchedDtype": [
                    "self"
                ],
                "testMap_MultiInputSingleOutput": [
                    "self"
                ],
                "testMap_MultiInputSameStructureOutput": [
                    "self"
                ],
                "testScan_Simple": [
                    "self"
                ],
                "testScan_SingleInputMultiOutput": [
                    "self"
                ],
                "testScan_MultiInputSingleOutput": [
                    "self"
                ],
                "testScan_MultiInputSameTypeOutput": [
                    "self"
                ],
                "testScan_MultiOutputMismatchedInitializer": [
                    "self"
                ],
                "testScan_Scoped": [
                    "self"
                ],
                "testScanFoldl_Nested": [
                    "self"
                ],
                "testScan_Control": [
                    "self"
                ],
                "testScan_Grad": [
                    "self"
                ],
                "testFoldShape": [
                    "self"
                ],
                "testMapShape": [
                    "self"
                ],
                "testMapUnknownShape": [
                    "self"
                ],
                "testMapEmptyScalar": [
                    "self"
                ],
                "testMapEmptyTensor": [
                    "self"
                ],
                "testScanShape": [
                    "self"
                ],
                "testScanEmptyTensor": [
                    "self"
                ],
                "testScanUnknownShape": [
                    "self"
                ],
                "testScanVaryingShape": [
                    "self"
                ]
            }
        },
        "tensorflow.python.kernel_tests.fractional_max_pool_op_test": {
            "FractionalMaxPoolTest": {
                "_MaxPoolAlongRows": [
                    "self",
                    "input_matrix",
                    "row_seq",
                    "overlapping"
                ],
                "_MaxPoolAlongCols": [
                    "self",
                    "input_matrix",
                    "col_seq",
                    "overlapping"
                ],
                "_GetExpectedFractionalMaxPoolResult": [
                    "self",
                    "input_tensor",
                    "row_seq",
                    "col_seq",
                    "overlapping"
                ],
                "_ValidateFractionalMaxPoolResult": [
                    "self",
                    "input_tensor",
                    "pooling_ratio",
                    "pseudo_random",
                    "overlapping"
                ],
                "_testVisually": [
                    "self"
                ],
                "testAllInputOptions": [
                    "self"
                ],
                "testIntegerTensorInput": [
                    "self"
                ],
                "testDifferentTensorShapes": [
                    "self"
                ],
                "testLargePoolingRatio": [
                    "self"
                ],
                "testDivisiblePoolingRatio": [
                    "self"
                ]
            },
            "FractionalMaxPoolGradTest": {
                "_GenerateUniqueRandomInputTensor": [
                    "self",
                    "shape"
                ],
                "testDirectNotUseOverlapping": [
                    "self"
                ],
                "testDirectUseOverlapping": [
                    "self"
                ],
                "testAllInputOptionsThroughGradientError": [
                    "self"
                ],
                "testDifferentTensorShapesThroughGradientError": [
                    "self"
                ],
                "testLargePoolingRatioThroughGradientError": [
                    "self"
                ],
                "testWhenRepeatedMaxValueInPoolingRegion": [
                    "self"
                ]
            }
        },
        "tensorflow.python.kernel_tests.decode_csv_op_test": {
            "DecodeCSVOpTest": {
                "_test": [
                    "self",
                    "args",
                    "expected_out",
                    "expected_err_re"
                ],
                "testSimple": [
                    "self"
                ],
                "testScalar": [
                    "self"
                ],
                "test2D": [
                    "self"
                ],
                "testInt64": [
                    "self"
                ],
                "testComplexString": [
                    "self"
                ],
                "testMultiRecords": [
                    "self"
                ],
                "testWithDefaults": [
                    "self"
                ],
                "testWithTabDelim": [
                    "self"
                ],
                "testWithoutDefaultsError": [
                    "self"
                ],
                "testWrongFieldIntError": [
                    "self"
                ],
                "testOutOfRangeError": [
                    "self"
                ],
                "testWrongFieldFloatError": [
                    "self"
                ],
                "testWrongFieldStringError": [
                    "self"
                ],
                "testWrongDefaults": [
                    "self"
                ],
                "testShortQuotedString": [
                    "self"
                ]
            }
        },
        "tensorflow.python.kernel_tests.barrier_ops_test": {
            "BarrierTest": {
                "testConstructorWithShapes": [
                    "self"
                ],
                "testInsertMany": [
                    "self"
                ],
                "testInsertManyEmptyTensor": [
                    "self"
                ],
                "testInsertManyEmptyTensorUnknown": [
                    "self"
                ],
                "testTakeMany": [
                    "self"
                ],
                "testTakeManySmallBatch": [
                    "self"
                ],
                "testUseBarrierWithShape": [
                    "self"
                ],
                "testParallelInsertMany": [
                    "self"
                ],
                "testParallelTakeMany": [
                    "self"
                ],
                "testBlockingTakeMany": [
                    "self"
                ],
                "testParallelInsertManyTakeMany": [
                    "self"
                ],
                "testClose": [
                    "self"
                ],
                "testCancel": [
                    "self"
                ],
                "_testClosedEmptyBarrierTakeManyAllowSmallBatchRaises": [
                    "self",
                    "cancel"
                ],
                "testClosedEmptyBarrierTakeManyAllowSmallBatchRaises": [
                    "self"
                ],
                "_testParallelInsertManyTakeManyCloseHalfwayThrough": [
                    "self",
                    "cancel"
                ],
                "testParallelInsertManyTakeManyCloseHalfwayThrough": [
                    "self"
                ],
                "testParallelInsertManyTakeManyCancelHalfwayThrough": [
                    "self"
                ],
                "_testParallelPartialInsertManyTakeManyCloseHalfwayThrough": [
                    "self",
                    "cancel"
                ],
                "testParallelPartialInsertManyTakeManyCloseHalfwayThrough": [
                    "self"
                ],
                "testParallelPartialInsertManyTakeManyCancelHalfwayThrough": [
                    "self"
                ],
                "testIncompatibleSharedBarrierErrors": [
                    "self"
                ]
            }
        },
        "tensorflow.python.kernel_tests.save_restore_ops_test": {
            "ShardedFileOpsTest": {
                "testShardedFileName": [
                    "self"
                ]
            }
        },
        "tensorflow.python.kernel_tests.self_adjoint_eig_op_test": {
            "SortEigenDecomposition": [
                "e",
                "v"
            ],
            "_GetSelfAdjointEigTest": [
                "dtype_",
                "shape_"
            ],
            "_GetSelfAdjointEigGradTest": [
                "dtype_",
                "shape_"
            ],
            "SelfAdjointEigTest": {
                "testWrongDimensions": [
                    "self"
                ]
            },
            "SelfAdjointEigGradTest": {}
        },
        "tensorflow.python.kernel_tests.reshape_op_test": {
            "ReshapeTest": {
                "_testReshape": [
                    "self",
                    "x",
                    "y",
                    "use_gpu"
                ],
                "_testBothReshape": [
                    "self",
                    "x",
                    "y"
                ],
                "testFloatBasic": [
                    "self"
                ],
                "testDoubleBasic": [
                    "self"
                ],
                "testInt32Basic": [
                    "self"
                ],
                "testComplex64Basic": [
                    "self"
                ],
                "testComplex128Basic": [
                    "self"
                ],
                "testFloatReshapeThreeDimensions": [
                    "self"
                ],
                "testFloatUnspecifiedDimOnly": [
                    "self"
                ],
                "testFloatUnspecifiedDimBegin": [
                    "self"
                ],
                "testFloatUnspecifiedDimEnd": [
                    "self"
                ],
                "testFloatReshapeGradThreeDimensions": [
                    "self"
                ],
                "testFloatEmpty": [
                    "self"
                ],
                "testErrors": [
                    "self"
                ],
                "testPartialShapes": [
                    "self"
                ]
            }
        },
        "tensorflow.python.kernel_tests.where_op_test": {
            "WhereOpTest": {
                "_testWhere": [
                    "self",
                    "x",
                    "truth",
                    "expected_err_re"
                ],
                "testWrongNumbers": [
                    "self"
                ],
                "testBasicMat": [
                    "self"
                ],
                "testBasic3Tensor": [
                    "self"
                ],
                "testThreeArgument": [
                    "self"
                ]
            }
        },
        "tensorflow.python.kernel_tests.session_ops_test": {
            "SessionOpsTest": {
                "testHandleBasic": [
                    "self"
                ],
                "testHandleEval": [
                    "self"
                ],
                "testHandleAndValue": [
                    "self"
                ],
                "testHandleCond": [
                    "self"
                ],
                "testHandleForLoop": [
                    "self"
                ],
                "testHandleWhileLoop": [
                    "self"
                ],
                "testHandleMover": [
                    "self"
                ],
                "testHandleDelete": [
                    "self"
                ],
                "testHandleDeleteRaw": [
                    "self"
                ],
                "testMultiDevices": [
                    "self"
                ],
                "testHandleGC": [
                    "self"
                ],
                "testHandlePlacement": [
                    "self"
                ]
            }
        },
        "tensorflow.python.kernel_tests.xent_op_test": {
            "XentTest": {
                "_npXent": [
                    "self",
                    "features",
                    "labels",
                    "dim"
                ],
                "_testXent": [
                    "self",
                    "np_features",
                    "np_labels",
                    "use_gpu"
                ],
                "_testXentWrapper": [
                    "self",
                    "np_features",
                    "np_labels",
                    "dim",
                    "use_gpu"
                ],
                "_testAll": [
                    "self",
                    "features",
                    "labels"
                ],
                "_testSingleClass": [
                    "self",
                    "use_gpu"
                ],
                "testSingleClass": [
                    "self"
                ],
                "testRankTooLarge": [
                    "self"
                ],
                "testNpXent": [
                    "self"
                ],
                "testShapeMismatch": [
                    "self"
                ],
                "testNotMatrix": [
                    "self"
                ],
                "testHalf": [
                    "self"
                ],
                "testFloat": [
                    "self"
                ],
                "testDouble": [
                    "self"
                ],
                "testGradient": [
                    "self"
                ],
                "testWrapper": [
                    "self"
                ]
            }
        },
        "tensorflow.python.kernel_tests.matrix_solve_op_test": {
            "MatrixSolveOpTest": {
                "_verifySolve": [
                    "self",
                    "x",
                    "y",
                    "batch_dims"
                ],
                "testSolve": [
                    "self"
                ],
                "testSolveBatch": [
                    "self"
                ],
                "testNonSquareMatrix": [
                    "self"
                ],
                "testWrongDimensions": [
                    "self"
                ],
                "testNotInvertible": [
                    "self"
                ],
                "testEmpty": [
                    "self"
                ]
            }
        },
        "tensorflow.python.kernel_tests.lrn_op_test": {
            "LRNOpTest": {
                "_LRN": [
                    "self",
                    "input_image",
                    "lrn_depth_radius",
                    "bias",
                    "alpha",
                    "beta"
                ],
                "_RunAndVerify": [
                    "self",
                    "dtype"
                ],
                "testCompute": [
                    "self"
                ],
                "testGradientsZeroInput": [
                    "self"
                ],
                "_RunAndVerifyGradients": [
                    "self",
                    "dtype"
                ],
                "testGradients": [
                    "self"
                ]
            }
        },
        "tensorflow.python.kernel_tests.pool_test": {
            "pool_direct_single_axis": [
                "input",
                "axis",
                "window_size",
                "pooling_type",
                "padding",
                "dilation_rate",
                "stride"
            ],
            "pool_direct": [
                "input",
                "window_shape",
                "pooling_type",
                "padding",
                "dilation_rate",
                "strides",
                "data_format"
            ],
            "PoolingTest": {
                "_test": [
                    "self",
                    "input_shape"
                ],
                "testPoolSimple": [
                    "self"
                ],
                "testPool1D": [
                    "self"
                ],
                "testPool2D": [
                    "self"
                ],
                "testPool3D": [
                    "self"
                ],
                "testPoolNC": [
                    "self"
                ],
                "_test_gradient": [
                    "self",
                    "input_shape"
                ],
                "testGradient1D": [
                    "self"
                ],
                "testGradient2D": [
                    "self"
                ],
                "testGradient3D": [
                    "self"
                ]
            }
        },
        "tensorflow.python.kernel_tests.extract_image_patches_grad_test": {
            "ExtractImagePatchesGradTest": {
                "testGradient": [
                    "self"
                ]
            }
        },
        "tensorflow.python.kernel_tests.matrix_band_part_op_test": {
            "_GetMatrixBandPartTest": [
                "dtype_",
                "batch_shape_",
                "shape_"
            ],
            "_GetMatrixBandPartGradTest": [
                "dtype_",
                "batch_shape_",
                "shape_"
            ],
            "MatrixBandPartTest": {},
            "MatrixBandPartGradTest": {}
        },
        "tensorflow.python.kernel_tests.sparse_matmul_op_test": {
            "RandMatrix": [
                "rows",
                "cols",
                "tr",
                "round_bfloat"
            ],
            "SparseMatMulTest": {
                "_testCpuMatmul": [
                    "self",
                    "x",
                    "y",
                    "tr_a",
                    "tr_b",
                    "sp_a",
                    "sp_b",
                    "x_dtype",
                    "y_dtype"
                ],
                "testBasic": [
                    "self"
                ],
                "testZeroDim": [
                    "self"
                ],
                "testEmpty": [
                    "self"
                ],
                "testLarge": [
                    "self"
                ],
                "testRandom": [
                    "self"
                ]
            },
            "MatMulGradientTest": {
                "_testGradients": [
                    "self",
                    "tr_a",
                    "tr_b",
                    "sp_a",
                    "sp_b",
                    "a_dtype",
                    "b_dtype",
                    "name"
                ],
                "testGradientInput": [
                    "self"
                ]
            }
        },
        "tensorflow.python.kernel_tests.bitcast_op_test": {
            "BitcastTest": {
                "_testBitcast": [
                    "self",
                    "x",
                    "datatype",
                    "shape"
                ],
                "testSmaller": [
                    "self"
                ],
                "testLarger": [
                    "self"
                ],
                "testSameDtype": [
                    "self"
                ],
                "testSameSize": [
                    "self"
                ],
                "testErrors": [
                    "self"
                ],
                "testEmpty": [
                    "self"
                ],
                "testUnknown": [
                    "self"
                ]
            }
        },
        "tensorflow.python.kernel_tests.decode_png_op_test": {
            "DecodePngOpTest": {
                "test16bit": [
                    "self"
                ]
            }
        },
        "tensorflow.python.kernel_tests.random_ops_test": {
            "RandomNormalTest": {
                "_Sampler": [
                    "self",
                    "num",
                    "mu",
                    "sigma",
                    "dtype",
                    "use_gpu",
                    "seed"
                ],
                "testDistinct": [
                    "self"
                ],
                "testCPUGPUMatch": [
                    "self"
                ],
                "testSeed": [
                    "self"
                ],
                "testNoCSE": [
                    "self"
                ]
            },
            "TruncatedNormalTest": {
                "_Sampler": [
                    "self",
                    "num",
                    "mu",
                    "sigma",
                    "dtype",
                    "use_gpu",
                    "seed"
                ],
                "testDistinct": [
                    "self"
                ],
                "testCPUGPUMatch": [
                    "self"
                ],
                "testSeed": [
                    "self"
                ],
                "testStdDev": [
                    "self"
                ],
                "testNoCSE": [
                    "self"
                ]
            },
            "RandomUniformTest": {
                "_Sampler": [
                    "self",
                    "num",
                    "minv",
                    "maxv",
                    "dtype",
                    "use_gpu",
                    "seed"
                ],
                "testRange": [
                    "self"
                ],
                "testDistinct": [
                    "self"
                ],
                "testUniformInts": [
                    "self"
                ],
                "testCPUGPUMatch": [
                    "self"
                ],
                "testSeed": [
                    "self"
                ],
                "testNoCSE": [
                    "self"
                ]
            },
            "RandomShapeTest": {
                "testTruncatedNormal": [
                    "self"
                ],
                "testRandomNormal": [
                    "self"
                ],
                "testRandomUniform": [
                    "self"
                ]
            }
        },
        "tensorflow.python.kernel_tests.cross_grad_test": {
            "CrossOpTest": {
                "testGradientRandomValues": [
                    "self"
                ]
            }
        },
        "tensorflow.python.kernel_tests.depthtospace_op_test": {
            "DepthToSpaceTest": {
                "_testOne": [
                    "self",
                    "inputs",
                    "block_size",
                    "outputs"
                ],
                "testBasic": [
                    "self"
                ],
                "testBlockSize2": [
                    "self"
                ],
                "testBlockSize2Batch10": [
                    "self"
                ],
                "testNonSquare": [
                    "self"
                ],
                "testBlockSize4FlatInput": [
                    "self"
                ],
                "testDepthInterleaved": [
                    "self"
                ],
                "testDepthInterleavedDepth3": [
                    "self"
                ],
                "testDepthInterleavedLarger": [
                    "self"
                ],
                "testBlockSizeTooLarge": [
                    "self"
                ],
                "testBlockSize0": [
                    "self"
                ],
                "testBlockSizeOne": [
                    "self"
                ],
                "testBlockSizeLargerThanInput": [
                    "self"
                ],
                "testBlockSizeNotDivisibleDepth": [
                    "self"
                ],
                "testUnknownShape": [
                    "self"
                ]
            },
            "DepthToSpaceGradientTest": {
                "_checkGrad": [
                    "self",
                    "x",
                    "block_size"
                ],
                "_compare": [
                    "self",
                    "b",
                    "h",
                    "w",
                    "d",
                    "block_size"
                ],
                "testSmall": [
                    "self"
                ],
                "testSmall2": [
                    "self"
                ]
            }
        },
        "tensorflow.python.kernel_tests.svd_op_test": {
            "_GetSvdOpTest": [
                "dtype_",
                "shape_"
            ],
            "SvdOpTest": {
                "testWrongDimensions": [
                    "self"
                ]
            }
        },
        "tensorflow.python.kernel_tests.dynamic_stitch_op_test": {
            "DynamicStitchTest": {
                "testScalar": [
                    "self"
                ],
                "testSimpleOneDimensional": [
                    "self"
                ],
                "testOneListOneDimensional": [
                    "self"
                ],
                "testSimpleTwoDimensional": [
                    "self"
                ],
                "testHigherRank": [
                    "self"
                ],
                "testErrorIndicesMultiDimensional": [
                    "self"
                ],
                "testErrorDataNumDimsMismatch": [
                    "self"
                ],
                "testErrorDataDimSizeMismatch": [
                    "self"
                ],
                "testErrorDataAndIndicesSizeMismatch": [
                    "self"
                ]
            }
        },
        "tensorflow.python.kernel_tests.division_past_test": {
            "DivisionTestCase": {
                "testDivision": [
                    "self"
                ]
            }
        },
        "tensorflow.python.kernel_tests.rnn_cell_test": {
            "basic_rnn_cell": [
                "inputs",
                "state",
                "num_units",
                "scope"
            ],
            "RNNCellTest": {
                "testLinear": [
                    "self"
                ],
                "testBasicRNNCell": [
                    "self"
                ],
                "testGRUCell": [
                    "self"
                ],
                "testBasicLSTMCell": [
                    "self"
                ],
                "testBasicLSTMCellStateTupleType": [
                    "self"
                ],
                "testBasicLSTMCellWithStateTuple": [
                    "self"
                ],
                "testLSTMCell": [
                    "self"
                ],
                "testOutputProjectionWrapper": [
                    "self"
                ],
                "testInputProjectionWrapper": [
                    "self"
                ],
                "testDropoutWrapper": [
                    "self"
                ],
                "testEmbeddingWrapper": [
                    "self"
                ],
                "testEmbeddingWrapperWithDynamicRnn": [
                    "self"
                ],
                "testMultiRNNCell": [
                    "self"
                ],
                "testMultiRNNCellWithStateTuple": [
                    "self"
                ]
            },
            "SlimRNNCellTest": {
                "testBasicRNNCell": [
                    "self"
                ],
                "testBasicRNNCellMatch": [
                    "self"
                ]
            }
        },
        "tensorflow.python.kernel_tests.sparse_tensor_dense_matmul_grad_test": {
            "SparseTensorDenseMatMulGradientTest": {
                "_sparsify": [
                    "self",
                    "x"
                ],
                "_randomTensor": [
                    "self",
                    "size",
                    "np_dtype",
                    "adjoint",
                    "sparse"
                ],
                "_testGradients": [
                    "self",
                    "adjoint_a",
                    "adjoint_b",
                    "name",
                    "np_dtype"
                ],
                "_testGradientsType": [
                    "self",
                    "np_dtype"
                ],
                "testGradients": [
                    "self"
                ]
            }
        },
        "tensorflow.python.kernel_tests.matmul_op_test": {
            "MatMulTest": {
                "assertAllCloseAccordingToType": [
                    "self",
                    "a",
                    "b",
                    "rtol",
                    "atol"
                ],
                "_testCpuMatmul": [
                    "self",
                    "x",
                    "y",
                    "transpose_x",
                    "transpose_y"
                ],
                "_testGpuMatmul": [
                    "self",
                    "x",
                    "y",
                    "transpose_x",
                    "transpose_y"
                ],
                "_randMatrix": [
                    "self",
                    "rows",
                    "cols",
                    "dtype"
                ],
                "testFloatBasic": [
                    "self"
                ],
                "testDoubleBasic": [
                    "self"
                ],
                "testHalfBasic": [
                    "self"
                ],
                "testInt32Basic": [
                    "self"
                ],
                "testComplex64Basic": [
                    "self"
                ],
                "testComplex128Basic": [
                    "self"
                ],
                "_vectorTest": [
                    "self",
                    "dtype",
                    "gpu"
                ],
                "testFloatVector": [
                    "self"
                ],
                "testDoubleVector": [
                    "self"
                ],
                "testHalfVector": [
                    "self"
                ],
                "testInt32Vector": [
                    "self"
                ],
                "testComplex64Vector": [
                    "self"
                ],
                "testComplex128Vector": [
                    "self"
                ],
                "testFloatRandom": [
                    "self"
                ],
                "testDoubleRandom": [
                    "self"
                ],
                "testHalfRandom": [
                    "self"
                ],
                "testInt32Random": [
                    "self"
                ],
                "testComplex64Random": [
                    "self"
                ],
                "testComplex128Random": [
                    "self"
                ],
                "testFloatRandomTransposeBoth": [
                    "self"
                ],
                "testDoubleRandomTransposeBoth": [
                    "self"
                ],
                "testHalfRandomTransposeBoth": [
                    "self"
                ],
                "testMatMul_OutEmpty_A": [
                    "self"
                ],
                "testMatMul_OutEmpty_B": [
                    "self"
                ],
                "testMatMul_Inputs_Empty": [
                    "self"
                ],
                "testShapeErrors": [
                    "self"
                ],
                "testShapeInference": [
                    "self"
                ]
            },
            "MatMulGradientTest": {
                "testGradientInput0": [
                    "self"
                ],
                "testGradientInput1": [
                    "self"
                ],
                "_VerifyInput0": [
                    "self",
                    "transpose_a",
                    "transpose_b"
                ],
                "testGradientInput0WithTranspose": [
                    "self"
                ],
                "_VerifyInput1": [
                    "self",
                    "transpose_a",
                    "transpose_b"
                ],
                "testGradientInput1WithTranspose": [
                    "self"
                ]
            },
            "MatMulStatsTest": {
                "testSimpleStatistics": [
                    "self"
                ],
                "testTransposedStatistics": [
                    "self"
                ]
            }
        },
        "tensorflow.python.kernel_tests.scatter_nd_ops_test": {
            "_AsType": [
                "v",
                "vtype"
            ],
            "_FlatInnerDims": [
                "tensor",
                "ndims"
            ],
            "_FlatOuterDims": [
                "tensor",
                "ndims"
            ],
            "_NumpyScatterNd": [
                "ref",
                "indices",
                "updates",
                "op"
            ],
            "_NumpyUpdate": [
                "ref",
                "indices",
                "updates"
            ],
            "_NumpyAdd": [
                "ref",
                "indices",
                "updates"
            ],
            "_NumpySub": [
                "ref",
                "indices",
                "updates"
            ],
            "_NumpyMul": [
                "ref",
                "indices",
                "updates"
            ],
            "_NumpyDiv": [
                "ref",
                "indices",
                "updates"
            ],
            "ScatterNdTest": {
                "_VariableRankTest": [
                    "self",
                    "np_scatter",
                    "tf_scatter",
                    "vtype",
                    "itype",
                    "use_gpu",
                    "repeat_indices"
                ],
                "_VariableRankTests": [
                    "self",
                    "np_scatter",
                    "tf_scatter"
                ],
                "testVariableRankUpdate": [
                    "self"
                ],
                "testVariableRankAdd": [
                    "self"
                ],
                "testVariableRankSub": [
                    "self"
                ],
                "_ScatterRepeatIndicesTest": [
                    "self",
                    "np_scatter",
                    "tf_scatter"
                ],
                "testScatterRepeatIndices": [
                    "self"
                ],
                "testScatterOutOfRangeCpu": [
                    "self"
                ],
                "testRank3ValidShape": [
                    "self"
                ],
                "testUndefinedIndicesShape": [
                    "self"
                ],
                "testUndefinedUpdatesShape": [
                    "self"
                ],
                "testUndefinedOutputShape": [
                    "self"
                ],
                "testEmptyOutputShape1": [
                    "self"
                ],
                "testEmptyOutputShape2": [
                    "self"
                ],
                "testEmptyOutputShape3": [
                    "self"
                ],
                "testRank3InvalidShape1": [
                    "self"
                ],
                "testRank3InvalidShape2": [
                    "self"
                ],
                "testGradientsRank2ElementUpdate": [
                    "self"
                ],
                "testGradientsRank2SliceUpdate": [
                    "self"
                ],
                "testGradientsRank3SliceUpdate": [
                    "self"
                ],
                "testConcurrentUpdates": [
                    "self"
                ],
                "_disabledTestScatterOutOfRangeGpu": [
                    "self"
                ],
                "testScatterNdRepatedIndicesAdd": [
                    "self"
                ]
            }
        },
        "tensorflow.python.kernel_tests.morphological_ops_test": {
            "DilationTest": {
                "_VerifyValues": [
                    "self",
                    "image",
                    "kernel",
                    "strides",
                    "rates",
                    "padding",
                    "out",
                    "use_gpu"
                ],
                "_testDilationValidPadding": [
                    "self",
                    "use_gpu"
                ],
                "_testDilationSamePadding": [
                    "self",
                    "use_gpu"
                ],
                "_testDilationSamePaddingDepth": [
                    "self",
                    "use_gpu"
                ],
                "_testDilationSamePaddingBatch": [
                    "self",
                    "use_gpu"
                ],
                "_testDilationValidPaddingNonSquareWindow": [
                    "self",
                    "use_gpu"
                ],
                "_testDilationSamePaddingRate": [
                    "self",
                    "use_gpu"
                ],
                "_testDilationValidPaddingUnevenStride": [
                    "self",
                    "use_gpu"
                ],
                "testDilation": [
                    "self"
                ],
                "_ConstructAndTestGradient": [
                    "self",
                    "image_shape",
                    "kernel_shape",
                    "strides",
                    "rates",
                    "padding",
                    "use_gpu"
                ],
                "_testDilationGradValidPadding_1x1x1": [
                    "self",
                    "use_gpu"
                ],
                "_testDilationGradSamePadding_1x1x1": [
                    "self",
                    "use_gpu"
                ],
                "_testDilationGradSamePadding_1x1x2": [
                    "self",
                    "use_gpu"
                ],
                "_testDilationGradValidPadding_2x2x1": [
                    "self",
                    "use_gpu"
                ],
                "_testDilationGradSamePadding_2x2x1": [
                    "self",
                    "use_gpu"
                ],
                "_testDilationGradSamePaddingBatch_2x2x1": [
                    "self",
                    "use_gpu"
                ],
                "_testDilationGradSamePadding_2x2x4": [
                    "self",
                    "use_gpu"
                ],
                "testDilationGrad": [
                    "self"
                ]
            },
            "ErosionTest": {
                "_VerifyValues": [
                    "self",
                    "image",
                    "kernel",
                    "strides",
                    "rates",
                    "padding",
                    "out",
                    "use_gpu"
                ],
                "_testErosionValidPadding": [
                    "self",
                    "use_gpu"
                ],
                "_testErosionSamePadding": [
                    "self",
                    "use_gpu"
                ],
                "_testErosionSamePaddingDepth": [
                    "self",
                    "use_gpu"
                ],
                "_testErosionSamePaddingBatch": [
                    "self",
                    "use_gpu"
                ],
                "_testErosionValidPaddingNonSquareWindow": [
                    "self",
                    "use_gpu"
                ],
                "_testErosionSamePaddingRate": [
                    "self",
                    "use_gpu"
                ],
                "_testErosionValidPaddingUnevenStride": [
                    "self",
                    "use_gpu"
                ],
                "testErosion": [
                    "self"
                ],
                "_ConstructAndTestGradient": [
                    "self",
                    "image_shape",
                    "kernel_shape",
                    "strides",
                    "rates",
                    "padding",
                    "use_gpu"
                ],
                "_testErosionGradValidPadding_1x1x1": [
                    "self",
                    "use_gpu"
                ],
                "_testErosionGradSamePadding_1x1x1": [
                    "self",
                    "use_gpu"
                ],
                "_testErosionGradSamePadding_1x1x2": [
                    "self",
                    "use_gpu"
                ],
                "_testErosionGradValidPadding_2x2x1": [
                    "self",
                    "use_gpu"
                ],
                "_testErosionGradSamePadding_2x2x1": [
                    "self",
                    "use_gpu"
                ],
                "_testErosionGradSamePaddingBatch_2x2x1": [
                    "self",
                    "use_gpu"
                ],
                "_testErosionGradSamePadding_2x2x4": [
                    "self",
                    "use_gpu"
                ],
                "testErosionGrad": [
                    "self"
                ]
            }
        },
        "tensorflow.python.kernel_tests.conditional_accumulator_test": {
            "ConditionalAccumulatorTest": {
                "testConstructor": [
                    "self"
                ],
                "testConstructorWithShape": [
                    "self"
                ],
                "testAccumulatorSizeEmpty": [
                    "self"
                ],
                "testAccumulatorSetGlobalStep": [
                    "self"
                ],
                "testAccumulatorApplyGradFloat32": [
                    "self"
                ],
                "testDtypes": [
                    "self"
                ],
                "testAccumulatorMultipleAccumulators": [
                    "self"
                ],
                "testAccumulatorApplyAndTakeGradWithShape": [
                    "self"
                ],
                "testAccumulatorApplyGradWithWrongShape": [
                    "self"
                ],
                "testAccumulatorDynamicShape": [
                    "self"
                ],
                "testAccumulatorWrongDynamicShape": [
                    "self"
                ],
                "testAccumulatorSizeAfterApplyGrad": [
                    "self"
                ],
                "testAccumulatorSizeAfterApplyGradAndTakeGrad": [
                    "self"
                ],
                "testAccumulatorTakeGrad": [
                    "self"
                ],
                "testAccumulatorInvalidTakeGrad": [
                    "self"
                ],
                "testAccumulatorRepeatedTakeGrad": [
                    "self"
                ],
                "testAccumulatorIncrementGlobalStep": [
                    "self"
                ],
                "testAccumulatorSetGlobalStepPreventsAccumulation": [
                    "self"
                ],
                "testParallelApplyGrad": [
                    "self"
                ],
                "testParallelTakeGrad": [
                    "self"
                ],
                "testAccumulatorApplyAndBlockingTake": [
                    "self"
                ],
                "_blocking_takeg": [
                    "self",
                    "sess",
                    "takeg_op"
                ],
                "testAccumulatorCancel": [
                    "self"
                ]
            }
        },
        "tensorflow.python.kernel_tests.embedding_ops_test": {
            "_AsLong": [
                "array"
            ],
            "_PName": [
                "param_id"
            ],
            "_EmbeddingParams": [
                "num_shards",
                "vocab_size",
                "dtype",
                "shape",
                "use_shapeless_placeholder"
            ],
            "_EmbeddingParamsAsPartitionedVariable": [
                "num_shards",
                "vocab_size",
                "dtype",
                "shape"
            ],
            "_EmbeddingResult": [
                "params",
                "id_vals",
                "num_shards",
                "vocab_size",
                "partition_strategy",
                "weight_vals"
            ],
            "ScatterAddSubTest": {
                "_TestCase": [
                    "self",
                    "shape",
                    "indices",
                    "scatter_op"
                ],
                "testNoRepetitions": [
                    "self"
                ],
                "testWithRepetitions": [
                    "self"
                ],
                "testRandom": [
                    "self"
                ],
                "testSubRandom": [
                    "self"
                ],
                "testWrongShape": [
                    "self"
                ]
            },
            "EmbeddingLookupTest": {
                "testSimpleSharded": [
                    "self"
                ],
                "testMaxNorm": [
                    "self"
                ],
                "testMaxNormNontrivial": [
                    "self"
                ],
                "testSimpleShardedPartitionedVariable": [
                    "self"
                ],
                "testShardedModPartitioningInt32Ids": [
                    "self"
                ],
                "testShardedModPartitioningInt64Ids": [
                    "self"
                ],
                "testShardedDivPartitioningInt32Ids": [
                    "self"
                ],
                "testShardedDivPartitioningInt32IdsPartitionedVariable": [
                    "self"
                ],
                "testShardedDivPartitioningInt64Ids": [
                    "self"
                ],
                "testShardedDivPartitioningUnknownParamShape": [
                    "self"
                ],
                "testGradientsEmbeddingLookup": [
                    "self"
                ],
                "testGradientsEmbeddingLookupWithComputedParams": [
                    "self"
                ],
                "testConstructionNonSharded": [
                    "self"
                ],
                "testConstructionSharded": [
                    "self"
                ],
                "testHigherRank": [
                    "self"
                ]
            },
            "EmbeddingLookupSparseTest": {
                "_RandomIdsAndWeights": [
                    "self",
                    "batch_size",
                    "vocab_size"
                ],
                "_GroupByBatchEntry": [
                    "self",
                    "vals",
                    "vals_per_batch_entry"
                ],
                "testEmbeddingLookupSparse": [
                    "self"
                ],
                "testGradientsEmbeddingLookupSparse": [
                    "self"
                ],
                "testIncompatibleShapes": [
                    "self"
                ]
            },
            "DynamicStitchOpTest": {
                "testCint32Cpu": [
                    "self"
                ],
                "testCint32Gpu": [
                    "self"
                ],
                "testInt32Cpu": [
                    "self"
                ],
                "testInt32Gpu": [
                    "self"
                ],
                "testSumGradArgs": [
                    "self"
                ],
                "testStitchOrder": [
                    "self"
                ]
            }
        },
        "tensorflow.python.kernel_tests.depthwise_conv_op_test": {
            "ConfigsToTest": [],
            "CheckGradConfigsToTest": [],
            "DepthwiseConv2DTest": {
                "_VerifyValues": [
                    "self",
                    "tensor_in_sizes",
                    "filter_in_sizes",
                    "stride",
                    "padding",
                    "use_gpu"
                ],
                "testDepthwiseConv2D": [
                    "self"
                ],
                "_VerifyHandValues": [
                    "self",
                    "tensor_in_sizes",
                    "filter_in_sizes",
                    "stride",
                    "padding",
                    "expected",
                    "use_gpu"
                ],
                "testConv2D2x2Filter": [
                    "self"
                ],
                "_ConstructAndTestGradient": [
                    "self",
                    "input_shape",
                    "filter_shape",
                    "output_shape",
                    "stride",
                    "padding",
                    "data_type",
                    "test_input",
                    "use_gpu"
                ],
                "testDepthwiseConv2DInputGrad": [
                    "self"
                ],
                "testDepthwiseConv2DFilterGrad": [
                    "self"
                ],
                "_CompareBackpropInputFloat": [
                    "self",
                    "input_sizes",
                    "filter_sizes",
                    "output_sizes",
                    "stride",
                    "padding"
                ],
                "_CompareBackpropInputDouble": [
                    "self",
                    "input_sizes",
                    "filter_sizes",
                    "output_sizes",
                    "stride",
                    "padding"
                ],
                "testDepthwiseConv2DInputGradCompare": [
                    "self"
                ],
                "_CompareBackpropFilterFloat": [
                    "self",
                    "input_sizes",
                    "filter_sizes",
                    "output_sizes",
                    "stride",
                    "padding"
                ],
                "_CompareBackpropFilterDouble": [
                    "self",
                    "input_sizes",
                    "filter_sizes",
                    "output_sizes",
                    "stride",
                    "padding"
                ],
                "testDepthwiseConv2DFilterGradCompare": [
                    "self"
                ]
            }
        },
        "tensorflow.python.kernel_tests.stack_ops_test": {
            "StackOpTest": {
                "_testStackPushPop": [
                    "self",
                    "use_gpu"
                ],
                "testStackPushPop": [
                    "self"
                ],
                "_testStackPushPopSwap": [
                    "self",
                    "use_gpu"
                ],
                "testStackPushPopSwap": [
                    "self"
                ],
                "_testStackWhileSwap": [
                    "self",
                    "use_gpu"
                ],
                "testStackWhileSwap": [
                    "self"
                ],
                "_testMultiStack": [
                    "self",
                    "use_gpu"
                ],
                "testMultiStack": [
                    "self"
                ],
                "_testSameNameStacks": [
                    "self",
                    "use_gpu"
                ],
                "testSameNameStacks": [
                    "self"
                ],
                "_testCloseStack": [
                    "self",
                    "use_gpu"
                ],
                "testCloseStack": [
                    "self"
                ],
                "_testPushCloseStack": [
                    "self",
                    "use_gpu"
                ],
                "testPushCloseStack": [
                    "self"
                ]
            }
        },
        "tensorflow.python.kernel_tests.matrix_solve_ls_op_test": {
            "BatchMatMul": [
                "a",
                "b"
            ],
            "BatchRegularizedLeastSquares": [
                "matrices",
                "rhss",
                "l2_regularization"
            ],
            "MatrixSolveLsOpTest": {
                "_verifySolve": [
                    "self",
                    "x",
                    "y"
                ],
                "_verifySolveBatch": [
                    "self",
                    "x",
                    "y"
                ],
                "_verifyRegularized": [
                    "self",
                    "x",
                    "y",
                    "l2_regularizer"
                ],
                "testSquare": [
                    "self"
                ],
                "testOverdetermined": [
                    "self"
                ],
                "testUnderdetermined": [
                    "self"
                ],
                "testWrongDimensions": [
                    "self"
                ],
                "testEmpty": [
                    "self"
                ],
                "testBatchResultSize": [
                    "self"
                ]
            }
        },
        "tensorflow.python.kernel_tests.scatter_ops_test": {
            "_AsType": [
                "v",
                "vtype"
            ],
            "_NumpyAdd": [
                "ref",
                "indices",
                "updates"
            ],
            "_NumpySub": [
                "ref",
                "indices",
                "updates"
            ],
            "_NumpyMul": [
                "ref",
                "indices",
                "updates"
            ],
            "_NumpyDiv": [
                "ref",
                "indices",
                "updates"
            ],
            "_NumpyUpdate": [
                "ref",
                "indices",
                "updates"
            ],
            "ScatterTest": {
                "_VariableRankTest": [
                    "self",
                    "tf_scatter",
                    "vtype",
                    "itype",
                    "repeat_indices"
                ],
                "_VariableRankTests": [
                    "self",
                    "tf_scatter",
                    "repeat_indices"
                ],
                "testVariableRankUpdate": [
                    "self"
                ],
                "testVariableRankAdd": [
                    "self"
                ],
                "testVariableRankSub": [
                    "self"
                ],
                "testVariableRankMul": [
                    "self"
                ],
                "testVariableRankDiv": [
                    "self"
                ],
                "testRepeatIndicesAdd": [
                    "self"
                ],
                "testRepeatIndicesSub": [
                    "self"
                ],
                "testRepeatIndicesMul": [
                    "self"
                ],
                "testRepeatIndicesDiv": [
                    "self"
                ],
                "testBooleanScatterUpdate": [
                    "self"
                ],
                "testScatterOutOfRangeCpu": [
                    "self"
                ],
                "_disabledTestScatterOutOfRangeGpu": [
                    "self"
                ]
            }
        },
        "tensorflow.python.kernel_tests.as_string_op_test": {
            "AsStringOpTest": {
                "testFloat": [
                    "self"
                ],
                "testInt": [
                    "self"
                ],
                "testLargeInt": [
                    "self"
                ],
                "testBool": [
                    "self"
                ],
                "testComplex": [
                    "self"
                ]
            }
        },
        "tensorflow.python.kernel_tests.argmax_op_test": {
            "ArgMaxTest": {
                "_testArg": [
                    "self",
                    "method",
                    "x",
                    "dimension",
                    "expected_values",
                    "use_gpu",
                    "expected_err_re"
                ],
                "_testBothArg": [
                    "self",
                    "method",
                    "x",
                    "dimension",
                    "expected_values",
                    "expected_err_re"
                ],
                "_testBasic": [
                    "self",
                    "dtype"
                ],
                "_testDim": [
                    "self",
                    "dtype"
                ],
                "testFloat": [
                    "self"
                ],
                "testDouble": [
                    "self"
                ],
                "testInt32": [
                    "self"
                ],
                "testInt64": [
                    "self"
                ],
                "testEmpty": [
                    "self"
                ]
            }
        },
        "tensorflow.python.kernel_tests.dynamic_partition_op_test": {
            "DynamicPartitionTest": {
                "testSimpleOneDimensional": [
                    "self"
                ],
                "testSimpleTwoDimensional": [
                    "self"
                ],
                "testHigherRank": [
                    "self"
                ],
                "testErrorIndexOutOfRange": [
                    "self"
                ],
                "testScalarIndexOutOfRange": [
                    "self"
                ],
                "testHigherRankIndexOutOfRange": [
                    "self"
                ],
                "testErrorWrongDimsIndices": [
                    "self"
                ]
            }
        },
        "tensorflow.python.kernel_tests.trace_op_test": {
            "TraceTest": {
                "setUp": [
                    "self"
                ],
                "compare": [
                    "self",
                    "x"
                ],
                "testTrace": [
                    "self"
                ]
            }
        },
        "tensorflow.python.kernel_tests.sparse_concat_op_test": {
            "SparseConcatTest": {
                "_SparseTensor_UnknownShape": [
                    "self",
                    "ind_shape",
                    "val_shape",
                    "shape_shape"
                ],
                "_SparseTensorValue_3x3": [
                    "self"
                ],
                "_SparseTensor_3x3": [
                    "self"
                ],
                "_SparseTensorValue_3x5": [
                    "self"
                ],
                "_SparseTensor_3x5": [
                    "self"
                ],
                "_SparseTensor_3x2": [
                    "self"
                ],
                "_SparseTensor_2x3": [
                    "self"
                ],
                "_SparseTensor_2x3x4": [
                    "self"
                ],
                "_SparseTensor_String3x3": [
                    "self"
                ],
                "_SparseTensor_String3x5": [
                    "self"
                ],
                "testConcat1": [
                    "self"
                ],
                "testConcat2": [
                    "self"
                ],
                "testConcatDim0": [
                    "self"
                ],
                "testConcat3": [
                    "self"
                ],
                "testConcatNonNumeric": [
                    "self"
                ],
                "testMismatchedRank": [
                    "self"
                ],
                "testMismatchedRankExpandNonconcatDim": [
                    "self"
                ],
                "testMismatchedShapes": [
                    "self"
                ],
                "testMismatchedShapesExpandNonconcatDim": [
                    "self"
                ],
                "testShapeInferenceUnknownShapes": [
                    "self"
                ]
            }
        },
        "tensorflow.python.kernel_tests.reduction_ops_test": {
            "ReducedShapeTest": {
                "_check": [
                    "self",
                    "shape",
                    "axes",
                    "result"
                ],
                "testSimple": [
                    "self"
                ],
                "testZeros": [
                    "self"
                ],
                "testNegAxes": [
                    "self"
                ]
            },
            "SumReductionTest": {
                "_compare": [
                    "self",
                    "x",
                    "reduction_axes",
                    "keep_dims",
                    "use_gpu",
                    "feed_dict"
                ],
                "_compareAll": [
                    "self",
                    "x",
                    "reduction_axes",
                    "feed_dict"
                ],
                "testInfinity": [
                    "self"
                ],
                "testFloatReduce1D": [
                    "self"
                ],
                "testFloatReduce2D": [
                    "self"
                ],
                "testFloatReduce3D": [
                    "self"
                ],
                "testFloatReduce4D": [
                    "self"
                ],
                "testFloatReduce5D": [
                    "self"
                ],
                "testDoubleReduce1D": [
                    "self"
                ],
                "testInt32Reduce1D": [
                    "self"
                ],
                "testComplex64Reduce1D": [
                    "self"
                ],
                "testComplex128Reduce1D": [
                    "self"
                ],
                "testInvalidIndex": [
                    "self"
                ],
                "testPartialShapes": [
                    "self"
                ],
                "_compareGradient": [
                    "self",
                    "shape",
                    "sum_shape",
                    "reduction_axes"
                ],
                "testGradient": [
                    "self"
                ],
                "testGradient2": [
                    "self"
                ],
                "testGradient3": [
                    "self"
                ],
                "testGradient4": [
                    "self"
                ],
                "testGradient5": [
                    "self"
                ],
                "testHighRank": [
                    "self"
                ],
                "testExpand": [
                    "self"
                ],
                "testEmptyGradients": [
                    "self"
                ],
                "testDegenerate": [
                    "self"
                ]
            },
            "MeanReductionTest": {
                "_compare": [
                    "self",
                    "x",
                    "reduction_axes",
                    "keep_dims",
                    "use_gpu"
                ],
                "_compareAll": [
                    "self",
                    "x",
                    "reduction_axes"
                ],
                "testFloatReduce3D": [
                    "self"
                ],
                "testInfinity": [
                    "self"
                ],
                "testDoubleReduce3D": [
                    "self"
                ],
                "testGradient": [
                    "self"
                ],
                "testEmptyGradients": [
                    "self"
                ],
                "testDegenerate": [
                    "self"
                ]
            },
            "ProdReductionTest": {
                "_compare": [
                    "self",
                    "x",
                    "reduction_axes",
                    "keep_dims"
                ],
                "_compareAll": [
                    "self",
                    "x",
                    "reduction_axes"
                ],
                "testInfinity": [
                    "self"
                ],
                "testFloatReduce3D": [
                    "self"
                ],
                "_compareGradient": [
                    "self",
                    "x"
                ],
                "testGradientWithZeros": [
                    "self"
                ],
                "testEmptyGradients": [
                    "self"
                ],
                "testDegenerate": [
                    "self"
                ]
            },
            "MinReductionTest": {
                "_compare": [
                    "self",
                    "x",
                    "reduction_axes",
                    "keep_dims",
                    "use_gpu"
                ],
                "_compareAll": [
                    "self",
                    "x",
                    "reduction_axes"
                ],
                "testInfinity": [
                    "self"
                ],
                "testFloatReduce3D": [
                    "self"
                ],
                "testDoubleReduce3D": [
                    "self"
                ],
                "testGradient": [
                    "self"
                ],
                "testGradient2": [
                    "self"
                ],
                "testGradient3": [
                    "self"
                ],
                "testGradient4": [
                    "self"
                ],
                "testEmptyGradients": [
                    "self"
                ]
            },
            "MaxReductionTest": {
                "_compare": [
                    "self",
                    "x",
                    "reduction_axes",
                    "keep_dims",
                    "use_gpu"
                ],
                "_compareAll": [
                    "self",
                    "x",
                    "reduction_axes"
                ],
                "testInfinity": [
                    "self"
                ],
                "testFloatReduce3D": [
                    "self"
                ],
                "testDoubleReduce3D": [
                    "self"
                ],
                "testGradient": [
                    "self"
                ],
                "testGradient2": [
                    "self"
                ],
                "testGradient3": [
                    "self"
                ],
                "testGradient4": [
                    "self"
                ],
                "testEmptyGradients": [
                    "self"
                ]
            },
            "AllReductionTest": {
                "_compare": [
                    "self",
                    "x",
                    "reduction_axes",
                    "keep_dims",
                    "use_gpu"
                ],
                "_compareAll": [
                    "self",
                    "x",
                    "reduction_axes"
                ],
                "testAll3D": [
                    "self"
                ],
                "testEmpty": [
                    "self"
                ]
            },
            "AnyReductionTest": {
                "_compare": [
                    "self",
                    "x",
                    "reduction_axes",
                    "keep_dims",
                    "use_gpu"
                ],
                "_compareAll": [
                    "self",
                    "x",
                    "reduction_axes"
                ],
                "testAll3D": [
                    "self"
                ],
                "testEmpty": [
                    "self"
                ]
            },
            "CountNonzeroReductionTest": {
                "_compare": [
                    "self",
                    "x",
                    "reduction_axes",
                    "keep_dims",
                    "use_gpu",
                    "feed_dict"
                ],
                "_compareAll": [
                    "self",
                    "x",
                    "reduction_axes",
                    "feed_dict"
                ],
                "testBoolReduce1D": [
                    "self"
                ],
                "testFloatReduce1D": [
                    "self"
                ],
                "testFloatReduce4D": [
                    "self"
                ],
                "testExpand": [
                    "self"
                ],
                "testDegenerate": [
                    "self"
                ]
            }
        },
        "tensorflow.python.kernel_tests.array_ops_test": {
            "BatchMatrixTransposeTest": {
                "testNonBatchMatrix": [
                    "self"
                ],
                "testBatchMatrix": [
                    "self"
                ],
                "testNonBatchMatrixDynamicallyDefined": [
                    "self"
                ],
                "testBatchMatrixDynamicallyDefined": [
                    "self"
                ],
                "testTensorWithStaticRankLessThanTwoRaisesBecauseNotAMatrix": [
                    "self"
                ]
            },
            "BooleanMaskTest": {
                "CheckVersusNumpy": [
                    "self",
                    "ndims_mask",
                    "arr_shape",
                    "make_mask"
                ],
                "testOneDimensionalMask": [
                    "self"
                ],
                "testMultiDimensionalMask": [
                    "self"
                ],
                "testEmptyOutput": [
                    "self"
                ],
                "testWorksWithDimensionsEqualToNoneDuringGraphBuild": [
                    "self"
                ],
                "testMaskDimensionsSetToNoneRaises": [
                    "self"
                ],
                "testMaskHasMoreDimsThanTensorRaises": [
                    "self"
                ],
                "testMaskIsScalarRaises": [
                    "self"
                ],
                "testMaskShapeDifferentThanFirstPartOfTensorShapeRaises": [
                    "self"
                ]
            },
            "OperatorShapeTest": {
                "testExpandScalar": [
                    "self"
                ],
                "testSqueezeScalar": [
                    "self"
                ],
                "testSqueezeMatrix": [
                    "self"
                ],
                "testSqueezeScalarDim": [
                    "self"
                ]
            },
            "ReverseTest": {
                "testReverse0DimAuto": [
                    "self"
                ],
                "_reverse1DimAuto": [
                    "self",
                    "np_dtype"
                ],
                "testReverse1DimAuto": [
                    "self"
                ],
                "testUnknownDims": [
                    "self"
                ]
            },
            "ReverseV2Test": {
                "testReverse0DimAuto": [
                    "self"
                ],
                "_reverse1DimAuto": [
                    "self",
                    "np_dtype"
                ],
                "_reverse2DimAuto": [
                    "self",
                    "np_dtype"
                ],
                "testInvalid": [
                    "self"
                ],
                "testReverse1DimAuto": [
                    "self"
                ],
                "testReverse2DimAuto": [
                    "self"
                ],
                "testUnknownDims": [
                    "self"
                ]
            },
            "MeshgridTest": {
                "_compareDiff": [
                    "self",
                    "x",
                    "y",
                    "use_gpu"
                ],
                "_compareDiffType": [
                    "self",
                    "n",
                    "np_dtype",
                    "use_gpu"
                ],
                "testCompare": [
                    "self"
                ]
            },
            "StridedSliceChecker": {
                "__init__": [
                    "self",
                    "test",
                    "x",
                    "tensor_type",
                    "check_type_infer"
                ],
                "__getitem__": [
                    "self",
                    "spec"
                ]
            },
            "StridedSliceTest": {
                "test_basic_slice": [
                    "self"
                ],
                "testDegenerateSlices": [
                    "self"
                ],
                "testEllipsis": [
                    "self"
                ],
                "testShrink": [
                    "self"
                ],
                "testTensorIndexing": [
                    "self"
                ],
                "testExpand": [
                    "self"
                ],
                "testExpandVariable": [
                    "self"
                ],
                "testOptimizedCases": [
                    "self"
                ]
            },
            "StridedSliceShapeChecker": {
                "__init__": [
                    "self",
                    "x"
                ],
                "__getitem__": [
                    "self",
                    "spec"
                ]
            },
            "StridedSliceShapeTest": {
                "testUnknown": [
                    "self"
                ],
                "tensorShapeEqual": [
                    "self",
                    "x",
                    "y"
                ],
                "testTensorShapeUncertain": [
                    "self"
                ],
                "testTensorValuedIndexShape": [
                    "self"
                ]
            },
            "GradSliceChecker": {
                "__init__": [
                    "self",
                    "test",
                    "sess",
                    "var",
                    "varnp"
                ],
                "__getitem__": [
                    "self",
                    "spec"
                ]
            },
            "StridedSliceGradTest": {
                "testGradient": [
                    "self"
                ],
                "testGradientZero": [
                    "self"
                ]
            },
            "StridedSliceGradTypeTest": {
                "testHostVsDevice": [
                    "self"
                ],
                "testInt64Shape": [
                    "self"
                ],
                "testMixedIndexTypes": [
                    "self"
                ]
            },
            "BenchmarkSlice": {
                "__init__": [
                    "self",
                    "tensor"
                ],
                "__getitem__": [
                    "self",
                    "x"
                ]
            },
            "StridedSliceBenchmark": {
                "run_and_time": [
                    "self",
                    "slice_op"
                ],
                "make_variable": [
                    "self"
                ],
                "benchmark_strided_slice_skip": [
                    "self"
                ],
                "benchmark_strided_slice_easy": [
                    "self"
                ],
                "benchmark_slice_easy": [
                    "self"
                ]
            },
            "StridedSliceAssignChecker": {
                "__init__": [
                    "self",
                    "test",
                    "x",
                    "tensor_type"
                ],
                "__setitem__": [
                    "self",
                    "index",
                    "value"
                ]
            },
            "SliceAssignTest": {
                "testInvalidSlice": [
                    "self"
                ],
                "testSliceAssign": [
                    "self"
                ],
                "testUninitialized": [
                    "self"
                ]
            },
            "ShapeSizeRankTest": {
                "testDenseShape": [
                    "self"
                ],
                "testSparseShape": [
                    "self"
                ]
            },
            "SequenceMaskTest": {
                "testExceptions": [
                    "self"
                ],
                "testNormal": [
                    "self"
                ]
            }
        },
        "tensorflow.python.kernel_tests.string_split_op_test": {
            "StringSplitOpTest": {
                "testStringSplit": [
                    "self"
                ],
                "testStringSplitEmptyDelimiter": [
                    "self"
                ],
                "testStringSplitEmptyToken": [
                    "self"
                ],
                "testStringSplitWithDelimiter": [
                    "self"
                ],
                "testStringSplitWithDelimiterTensor": [
                    "self"
                ]
            }
        },
        "tensorflow.python.kernel_tests.pad_op_test": {
            "PadOpTest": {
                "_npPad": [
                    "self",
                    "inp",
                    "paddings",
                    "mode"
                ],
                "testNpPad": [
                    "self"
                ],
                "_testPad": [
                    "self",
                    "np_inputs",
                    "paddings",
                    "mode"
                ],
                "_testGradient": [
                    "self",
                    "x",
                    "a",
                    "mode"
                ],
                "_testAll": [
                    "self",
                    "np_inputs",
                    "paddings"
                ],
                "testInputDims": [
                    "self"
                ],
                "testPaddingsDim": [
                    "self"
                ],
                "testPaddingsDim2": [
                    "self"
                ],
                "testPaddingsDim3": [
                    "self"
                ],
                "testPaddingsDim4": [
                    "self"
                ],
                "testPaddingsNonNegative": [
                    "self"
                ],
                "testPaddingsNonNegative2": [
                    "self"
                ],
                "testPaddingsMaximum": [
                    "self"
                ],
                "testInvalid": [
                    "self"
                ],
                "testIntTypes": [
                    "self"
                ],
                "testFloatTypes": [
                    "self"
                ],
                "testComplexTypes": [
                    "self"
                ],
                "testShapeFunctionEdgeCases": [
                    "self"
                ],
                "testScalars": [
                    "self"
                ]
            }
        },
        "tensorflow.python.kernel_tests.conv2d_transpose_test": {
            "Conv2DTransposeTest": {
                "testConv2DTransposeSingleStride": [
                    "self"
                ],
                "testConv2DTransposeSame": [
                    "self"
                ],
                "testConv2DTransposeValid": [
                    "self"
                ],
                "testGradient": [
                    "self"
                ],
                "testConv2DTransposeSingleStrideNCHW": [
                    "self"
                ],
                "testConv2DTransposeSameNCHW": [
                    "self"
                ],
                "testConv2DTransposeValidNCHW": [
                    "self"
                ]
            }
        },
        "tensorflow.python.kernel_tests.basic_gpu_test": {
            "GPUBinaryOpsTest": {
                "_compareGPU": [
                    "self",
                    "x",
                    "y",
                    "np_func",
                    "tf_func"
                ],
                "testFloatBasic": [
                    "self"
                ]
            }
        },
        "tensorflow.python.kernel_tests.cast_op_test": {
            "CastOpTest": {
                "_toDataType": [
                    "self",
                    "dtype"
                ],
                "_cast": [
                    "self",
                    "x",
                    "dtype",
                    "use_gpu"
                ],
                "_test": [
                    "self",
                    "x",
                    "dtype",
                    "use_gpu"
                ],
                "_testTypes": [
                    "self",
                    "x",
                    "use_gpu"
                ],
                "_testAll": [
                    "self",
                    "x"
                ],
                "testBasic": [
                    "self"
                ],
                "testSmallValues": [
                    "self"
                ],
                "testBfloat16": [
                    "self"
                ],
                "testRandom": [
                    "self"
                ],
                "_compare": [
                    "self",
                    "x",
                    "dst_dtype",
                    "expected",
                    "use_gpu"
                ],
                "testIntToFloatBoundary": [
                    "self"
                ],
                "testInfNan": [
                    "self"
                ],
                "_OpError": [
                    "self",
                    "x",
                    "dtype",
                    "err"
                ],
                "testNotImplemented": [
                    "self"
                ],
                "testCastToTypeOfVariable": [
                    "self"
                ],
                "testGradients": [
                    "self"
                ]
            },
            "SparseTensorCastTest": {
                "testCast": [
                    "self"
                ]
            },
            "SaturateCastTest": {
                "testSaturate": [
                    "self"
                ]
            }
        },
        "tensorflow.python.kernel_tests.padding_fifo_queue_test": {
            "PaddingFIFOQueueTest": {
                "testConstructor": [
                    "self"
                ],
                "testMultiQueueConstructor": [
                    "self"
                ],
                "testConstructorWithShapes": [
                    "self"
                ],
                "testEnqueue": [
                    "self"
                ],
                "testEnqueueWithShape": [
                    "self"
                ],
                "testEnqueueManyWithShape": [
                    "self"
                ],
                "testParallelEnqueue": [
                    "self"
                ],
                "testParallelDequeue": [
                    "self"
                ],
                "testDequeue": [
                    "self"
                ],
                "testEnqueueAndBlockingDequeue": [
                    "self"
                ],
                "testMultiEnqueueAndDequeue": [
                    "self"
                ],
                "testQueueSizeEmpty": [
                    "self"
                ],
                "testQueueSizeAfterEnqueueAndDequeue": [
                    "self"
                ],
                "testEnqueueMany": [
                    "self"
                ],
                "testEmptyEnqueueMany": [
                    "self"
                ],
                "testEmptyDequeueMany": [
                    "self"
                ],
                "testEmptyDequeueManyWithDynamicShape": [
                    "self"
                ],
                "testEmptyDequeueUpToWithDynamicShape": [
                    "self"
                ],
                "testConstructPaddingFIFOQueueWithNoShape": [
                    "self"
                ],
                "testMultiEnqueueMany": [
                    "self"
                ],
                "testMultiEnqueueManyWithPartiallyKnownShapes": [
                    "self"
                ],
                "testDequeueMany": [
                    "self"
                ],
                "testDequeueUpToNoBlocking": [
                    "self"
                ],
                "testMultiDequeueMany": [
                    "self"
                ],
                "testMultiDequeueManyWithPartiallyKnownShapes": [
                    "self"
                ],
                "testMultiDequeueManyWithPartiallyKnownShapesAndVariableSizeInput": [
                    "self"
                ],
                "testMultiDequeueUpToPartiallyKnownShapesAndVariableInputNoBlocking": [
                    "self"
                ],
                "testHighDimension": [
                    "self"
                ],
                "testPartiallyKnownHighDimension": [
                    "self"
                ],
                "testEnqueueWrongShape": [
                    "self"
                ],
                "testBatchSizeMismatch": [
                    "self"
                ],
                "testEnqueueManyEmptyTypeConversion": [
                    "self"
                ],
                "testEnqueueWrongType": [
                    "self"
                ],
                "testEnqueueWrongPartiallyKnownShapeAtRuntime": [
                    "self"
                ],
                "testEnqueueDequeueManyWrongPartiallyKnownShape": [
                    "self"
                ],
                "testParallelEnqueueMany": [
                    "self"
                ],
                "testParallelDequeueMany": [
                    "self"
                ],
                "testParallelDequeueUpTo": [
                    "self"
                ],
                "testParallelEnqueueAndDequeue": [
                    "self"
                ],
                "testMixtureOfEnqueueAndEnqueueMany": [
                    "self"
                ],
                "testMixtureOfDequeueAndDequeueMany": [
                    "self"
                ],
                "testBlockingDequeueMany": [
                    "self"
                ],
                "testBlockingDequeueUpTo": [
                    "self"
                ],
                "testDequeueManyWithTensorParameter": [
                    "self"
                ],
                "testDequeueFromClosedQueue": [
                    "self"
                ],
                "testBlockingDequeueFromClosedQueue": [
                    "self"
                ],
                "testDequeueUpToFromClosedQueueReturnsRemainder": [
                    "self"
                ],
                "testBlockingDequeueFromClosedEmptyQueue": [
                    "self"
                ],
                "testBlockingDequeueManyFromClosedQueue": [
                    "self"
                ],
                "testBlockingDequeueManyButNotAllFromClosedQueue": [
                    "self"
                ],
                "testEnqueueManyLargerThanCapacityWithConcurrentDequeueMany": [
                    "self"
                ],
                "testClosedBlockingDequeueManyRestoresPartialBatch": [
                    "self"
                ],
                "testBlockingDequeueManyFromClosedEmptyQueue": [
                    "self"
                ],
                "testBlockingDequeueUpToFromClosedEmptyQueue": [
                    "self"
                ],
                "testEnqueueToClosedQueue": [
                    "self"
                ],
                "testEnqueueManyToClosedQueue": [
                    "self"
                ],
                "testBlockingEnqueueToFullQueue": [
                    "self"
                ],
                "testBlockingEnqueueManyToFullQueue": [
                    "self"
                ],
                "testBlockingEnqueueBeforeClose": [
                    "self"
                ],
                "testBlockingEnqueueManyBeforeClose": [
                    "self"
                ],
                "testDoesNotLoseValue": [
                    "self"
                ],
                "testSharedQueueSameSession": [
                    "self"
                ],
                "testIncompatibleSharedQueueErrors": [
                    "self"
                ],
                "testSelectQueue": [
                    "self"
                ],
                "testSelectQueueOutOfRange": [
                    "self"
                ],
                "_blockingDequeue": [
                    "self",
                    "sess",
                    "dequeue_op"
                ],
                "_blockingDequeueMany": [
                    "self",
                    "sess",
                    "dequeue_many_op"
                ],
                "_blockingEnqueue": [
                    "self",
                    "sess",
                    "enqueue_op"
                ],
                "_blockingEnqueueMany": [
                    "self",
                    "sess",
                    "enqueue_many_op"
                ],
                "testResetOfBlockingOperation": [
                    "self"
                ],
                "testBigEnqueueMany": [
                    "self"
                ],
                "testBigDequeueMany": [
                    "self"
                ],
                "testDtypes": [
                    "self"
                ],
                "testUnknownRank": [
                    "self"
                ]
            },
            "QueueFromListTest": {
                "testQueueFromListShapes": [
                    "self"
                ],
                "testQueueFromListShapesMultipleComponents": [
                    "self"
                ]
            }
        },
        "tensorflow.python.kernel_tests.concat_op_test": {
            "ConcatOpTest": {
                "testHStack": [
                    "self"
                ],
                "testVStack": [
                    "self"
                ],
                "testInt32GPU": [
                    "self"
                ],
                "testRefType": [
                    "self"
                ],
                "_testRandom": [
                    "self",
                    "dtype",
                    "use_gpu"
                ],
                "testRandom": [
                    "self"
                ],
                "testInvalidConcatDimTypeAndShape": [
                    "self"
                ],
                "_testGradientsSimple": [
                    "self",
                    "use_gpu"
                ],
                "testGradientsSimpleAll": [
                    "self"
                ],
                "_testGradientsFirstDim": [
                    "self",
                    "use_gpu"
                ],
                "testGradientsFirstDimAll": [
                    "self"
                ],
                "_testGradientsLastDim": [
                    "self",
                    "use_gpu"
                ],
                "testGradientsLastDimAll": [
                    "self"
                ],
                "_RunAndVerifyGradientsRandom": [
                    "self",
                    "use_gpu"
                ],
                "testGradientsRandom": [
                    "self"
                ],
                "testShapeError": [
                    "self"
                ],
                "testShapeWithUnknownConcatDim": [
                    "self"
                ],
                "testZeroSize": [
                    "self"
                ],
                "testTensorConcatDim0Grad": [
                    "self"
                ],
                "testTensorConcatDim1Grad": [
                    "self"
                ],
                "testIndexedSlicesConcatDim0Grad": [
                    "self"
                ],
                "testIndexedSlicesConcatDim1Grad": [
                    "self"
                ],
                "testIndexedSlicesConcatDim2Grad": [
                    "self"
                ],
                "testConcatTuple": [
                    "self"
                ],
                "testConcatNoScalars": [
                    "self"
                ],
                "testConcatLargeNumberOfTensors": [
                    "self"
                ],
                "testConcatNegativeAxis": [
                    "self"
                ],
                "testConcatV2Empty": [
                    "self"
                ],
                "testConcatV2InvalidAxis": [
                    "self"
                ],
                "testConcatV2NegativeAxis": [
                    "self"
                ]
            },
            "ConcatOffsetTest": {
                "testBasic": [
                    "self"
                ],
                "testNotVector": [
                    "self"
                ],
                "testConcatDimOutOfRange": [
                    "self"
                ],
                "testDimMismatch": [
                    "self"
                ],
                "testSizeMismatch": [
                    "self"
                ]
            }
        },
        "tensorflow.python.kernel_tests.sparse_xent_op_test": {
            "_sparse_vs_dense_xent_benchmark_dense": [
                "labels",
                "logits"
            ],
            "_sparse_vs_dense_xent_benchmark_sparse": [
                "labels",
                "logits"
            ],
            "sparse_vs_dense_xent_benchmark": [
                "batch_size",
                "num_entries",
                "use_gpu"
            ],
            "main": [
                "_"
            ],
            "SparseXentTest": {
                "_npXent": [
                    "self",
                    "features",
                    "labels"
                ],
                "_testXent": [
                    "self",
                    "np_features",
                    "np_labels"
                ],
                "testSingleClass": [
                    "self"
                ],
                "testInvalidLabel": [
                    "self"
                ],
                "testNpXent": [
                    "self"
                ],
                "testShapeMismatch": [
                    "self"
                ],
                "testScalar": [
                    "self"
                ],
                "testLabelsPlaceholderScalar": [
                    "self"
                ],
                "testVector": [
                    "self"
                ],
                "testFloat": [
                    "self"
                ],
                "testDouble": [
                    "self"
                ],
                "testHalf": [
                    "self"
                ],
                "testEmpty": [
                    "self"
                ],
                "testGradient": [
                    "self"
                ],
                "_testHighDim": [
                    "self",
                    "features",
                    "labels"
                ],
                "testHighDim": [
                    "self"
                ],
                "testHighDim2": [
                    "self"
                ],
                "testScalarHandling": [
                    "self"
                ]
            }
        },
        "tensorflow.python.kernel_tests.topk_op_test": {
            "TopKTest": {
                "_validateTopK": [
                    "self",
                    "inputs",
                    "k",
                    "expected_values",
                    "expected_indices",
                    "sorted"
                ],
                "testTop1": [
                    "self"
                ],
                "testTop2": [
                    "self"
                ],
                "testTopAll": [
                    "self"
                ],
                "testTop3Unsorted": [
                    "self"
                ],
                "testTop3Vector": [
                    "self"
                ],
                "testTensorK": [
                    "self"
                ],
                "testKNegative": [
                    "self"
                ],
                "testKTooLarge": [
                    "self"
                ],
                "testTopKGradients": [
                    "self"
                ]
            }
        },
        "tensorflow.python.kernel_tests.decode_raw_op_test": {
            "DecodeRawOpTest": {
                "testToUint8": [
                    "self"
                ],
                "testToInt16": [
                    "self"
                ],
                "testToFloat16": [
                    "self"
                ]
            }
        },
        "tensorflow.python.kernel_tests.ctc_decoder_ops_test": {
            "grouper": [
                "iterable",
                "n",
                "fillvalue"
            ],
            "flatten": [
                "list_of_lists"
            ],
            "CTCGreedyDecoderTest": {
                "_testCTCDecoder": [
                    "self",
                    "decoder",
                    "inputs",
                    "seq_lens",
                    "log_prob_truth",
                    "decode_truth",
                    "expected_err_re"
                ],
                "testCTCGreedyDecoder": [
                    "self"
                ],
                "testCTCDecoderBeamSearch": [
                    "self"
                ]
            }
        },
        "tensorflow.python.kernel_tests.conv_ops_3d_test": {
            "Conv3DTest": {
                "_VerifyValues": [
                    "self",
                    "tensor_in_sizes",
                    "filter_in_sizes",
                    "stride",
                    "padding",
                    "expected"
                ],
                "testConv3D1x1x1Filter": [
                    "self"
                ],
                "testConv3D2x2x2Filter": [
                    "self"
                ],
                "testConv3DStrides": [
                    "self"
                ],
                "testConv3D2x2x2FilterStride2": [
                    "self"
                ],
                "testConv3DStride3": [
                    "self"
                ],
                "testConv3D2x2x2FilterStride2Same": [
                    "self"
                ],
                "testKernelSmallerThanStride": [
                    "self"
                ],
                "ConstructAndTestGradient": [
                    "self",
                    "batch",
                    "input_planes",
                    "input_rows",
                    "input_cols",
                    "filter_planes",
                    "filter_rows",
                    "filter_cols",
                    "in_depth",
                    "out_depth",
                    "stride",
                    "padding",
                    "test_input"
                ],
                "testInputGradientValidPaddingStrideOne": [
                    "self"
                ],
                "testFilterGradientValidPaddingStrideOne": [
                    "self"
                ],
                "testInputGradientValidPaddingStrideTwo": [
                    "self"
                ],
                "testFilterGradientValidPaddingStrideTwo": [
                    "self"
                ],
                "testInputGradientValidPaddingStrideThree": [
                    "self"
                ],
                "testFilterGradientValidPaddingStrideThree": [
                    "self"
                ],
                "testInputGradientSamePaddingStrideOne": [
                    "self"
                ],
                "testFilterGradientSamePaddingStrideOne": [
                    "self"
                ],
                "testInputGradientSamePaddingStrideTwo": [
                    "self"
                ],
                "testFilterGradientSamePaddingStrideTwo": [
                    "self"
                ],
                "testInputGradientSamePaddingStrideThree": [
                    "self"
                ],
                "testFilterGradientSamePaddingStrideThree": [
                    "self"
                ],
                "testInputGradientSamePaddingDifferentStrides": [
                    "self"
                ],
                "disabledtestFilterGradientSamePaddingDifferentStrides": [
                    "self"
                ]
            }
        },
        "tensorflow.python.kernel_tests.sparse_to_dense_op_py_test": {
            "_SparseToDense": [
                "sparse_indices",
                "output_size",
                "sparse_values",
                "default_value",
                "validate_indices"
            ],
            "SparseToDenseTest": {
                "testInt": [
                    "self"
                ],
                "testFloat": [
                    "self"
                ],
                "testString": [
                    "self"
                ],
                "testSetValue": [
                    "self"
                ],
                "testSetSingleValue": [
                    "self"
                ],
                "test2d": [
                    "self"
                ],
                "testZeroDefault": [
                    "self"
                ],
                "test3d": [
                    "self"
                ],
                "testBadShape": [
                    "self"
                ],
                "testBadValue": [
                    "self"
                ],
                "testBadNumValues": [
                    "self"
                ],
                "testBadDefault": [
                    "self"
                ],
                "testOutOfBoundsIndicesWithWithoutValidation": [
                    "self"
                ],
                "testRepeatingIndicesWithWithoutValidation": [
                    "self"
                ],
                "testUnsortedIndicesWithWithoutValidation": [
                    "self"
                ],
                "testShapeInferenceKnownShape": [
                    "self"
                ],
                "testShapeInferenceUnknownShape": [
                    "self"
                ]
            }
        },
        "tensorflow.python.kernel_tests.sparse_tensor_dense_matmul_op_test": {
            "_maybe_complex": [
                "x"
            ],
            "_sparse_tensor_dense_vs_dense_matmul_benchmark_dense": [
                "x",
                "y",
                "adjoint_a",
                "adjoint_b"
            ],
            "_sparse_tensor_dense_vs_dense_matmul_benchmark_sparse": [
                "x_ind",
                "x_val",
                "x_shape",
                "y",
                "adjoint_a",
                "adjoint_b"
            ],
            "sparse_tensor_dense_vs_dense_matmul_benchmark": [
                "thresh",
                "m",
                "k",
                "n",
                "adjoint_a",
                "adjoint_b",
                "use_gpu",
                "skip_dense"
            ],
            "main": [
                "_"
            ],
            "SparseTensorDenseMatMulTest": {
                "_testMatmul": [
                    "self",
                    "x",
                    "y",
                    "adjoint_a",
                    "adjoint_b"
                ],
                "_testBasic": [
                    "self",
                    "np_dtype"
                ],
                "testBasic": [
                    "self"
                ],
                "testShapeInference": [
                    "self"
                ],
                "_testLarge": [
                    "self",
                    "np_dtype"
                ],
                "testLarge": [
                    "self"
                ],
                "testFloatRandom": [
                    "self"
                ]
            }
        },
        "tensorflow.python.kernel_tests.listdiff_op_test": {
            "ListDiffTest": {
                "_testListDiff": [
                    "self",
                    "x",
                    "y",
                    "out",
                    "idx"
                ],
                "testBasic1": [
                    "self"
                ],
                "testBasic2": [
                    "self"
                ],
                "testBasic3": [
                    "self"
                ],
                "testDuplicates": [
                    "self"
                ],
                "testRandom": [
                    "self"
                ],
                "testFullyOverlapping": [
                    "self"
                ],
                "testNonOverlapping": [
                    "self"
                ],
                "testEmptyX": [
                    "self"
                ],
                "testEmptyY": [
                    "self"
                ],
                "testEmptyXY": [
                    "self"
                ]
            }
        },
        "tensorflow.python.kernel_tests.relu_op_test": {
            "ReluTest": {
                "_npRelu": [
                    "self",
                    "np_features"
                ],
                "testNpRelu": [
                    "self"
                ],
                "_testRelu": [
                    "self",
                    "np_features",
                    "use_gpu"
                ],
                "testNumbers": [
                    "self"
                ],
                "testGradientFloat32": [
                    "self"
                ],
                "testGradientFloat64": [
                    "self"
                ],
                "testGradGradFloat32": [
                    "self"
                ],
                "testGradGradFloat64": [
                    "self"
                ],
                "testGradientScalar": [
                    "self"
                ]
            },
            "Relu6Test": {
                "_npRelu6": [
                    "self",
                    "np_features"
                ],
                "testNpRelu6": [
                    "self"
                ],
                "_testRelu6": [
                    "self",
                    "np_features",
                    "use_gpu"
                ],
                "testNumbers": [
                    "self"
                ],
                "testGradientFloat32": [
                    "self"
                ],
                "testGradientFloat64": [
                    "self"
                ]
            },
            "EluTest": {
                "_npElu": [
                    "self",
                    "np_features"
                ],
                "testNpElu": [
                    "self"
                ],
                "_testElu": [
                    "self",
                    "np_features",
                    "use_gpu"
                ],
                "testNumbers": [
                    "self"
                ],
                "testGradientFloat32": [
                    "self"
                ],
                "testGradientFloat64": [
                    "self"
                ],
                "testGradGradFloat32": [
                    "self"
                ],
                "testGradGradFloat64": [
                    "self"
                ]
            }
        },
        "tensorflow.python.kernel_tests.split_op_test": {
            "SplitVOpTest": {
                "_RunAndVerify": [
                    "self",
                    "use_gpu",
                    "large_num_splits"
                ],
                "_RunAndVerifyScalar": [
                    "self",
                    "use_gpu",
                    "large_num_splits"
                ],
                "testRandom": [
                    "self"
                ],
                "_testSpecialCases": [
                    "self",
                    "use_gpu"
                ],
                "_testHugeNumberOfTensors": [
                    "self",
                    "use_gpu"
                ],
                "testSpecialCases": [
                    "self"
                ],
                "_testGradientsSimple": [
                    "self",
                    "use_gpu"
                ],
                "testGradientsAll": [
                    "self"
                ]
            },
            "SplitOpTest": {
                "_compare": [
                    "self",
                    "x",
                    "dim",
                    "num",
                    "use_gpu"
                ],
                "_testSplitRows": [
                    "self",
                    "use_gpu"
                ],
                "testSplitRowsAll": [
                    "self"
                ],
                "_testSplitCols": [
                    "self",
                    "use_gpu"
                ],
                "testSplitColsAll": [
                    "self"
                ],
                "_testEmpty": [
                    "self",
                    "x",
                    "dim",
                    "num",
                    "expected_shape"
                ],
                "testEmpty": [
                    "self"
                ],
                "testIdentity": [
                    "self"
                ],
                "testSplitDim0": [
                    "self"
                ],
                "_RunAndVerify": [
                    "self",
                    "use_gpu",
                    "large_num_splits"
                ],
                "testRandom": [
                    "self"
                ],
                "_testGradientsSimple": [
                    "self",
                    "use_gpu"
                ],
                "testGradientsAll": [
                    "self"
                ],
                "testShapeFunctionEdgeCases": [
                    "self"
                ]
            }
        },
        "tensorflow.python.kernel_tests.random_gamma_test": {
            "RandomGammaTest": {
                "setUp": [
                    "self"
                ],
                "_Sampler": [
                    "self",
                    "num",
                    "alpha",
                    "beta",
                    "dtype",
                    "use_gpu",
                    "seed"
                ],
                "testMomentsFloat32": [
                    "self"
                ],
                "testMomentsFloat64": [
                    "self"
                ],
                "_testMoments": [
                    "self",
                    "dt"
                ],
                "_testZeroDensity": [
                    "self",
                    "alpha"
                ],
                "testNonZeroSmallShape": [
                    "self"
                ],
                "testNonZeroSmallishShape": [
                    "self"
                ],
                "testDistinct": [
                    "self"
                ],
                "testCPUGPUMatch": [
                    "self"
                ],
                "testSeed": [
                    "self"
                ],
                "testNoCSE": [
                    "self"
                ],
                "testShape": [
                    "self"
                ]
            }
        },
        "tensorflow.python.kernel_tests.conv1d_test": {
            "Conv1DTest": {
                "testBasic": [
                    "self"
                ]
            }
        },
        "tensorflow.python.kernel_tests.betainc_op_test": {
            "BetaincTest": {
                "_testBetaInc": [
                    "self",
                    "dtype"
                ],
                "testBetaIncFloat": [
                    "self"
                ],
                "testBetaIncDouble": [
                    "self"
                ]
            },
            "BetaincTestGPU": {}
        },
        "tensorflow.python.kernel_tests.fifo_queue_test": {
            "FIFOQueueTest": {
                "testConstructor": [
                    "self"
                ],
                "testMultiQueueConstructor": [
                    "self"
                ],
                "testConstructorWithShapes": [
                    "self"
                ],
                "testEnqueue": [
                    "self"
                ],
                "testEnqueueHalf": [
                    "self"
                ],
                "testEnqueueWithShape": [
                    "self"
                ],
                "testEnqueueManyWithShape": [
                    "self"
                ],
                "testEnqueueDictWithoutNames": [
                    "self"
                ],
                "testParallelEnqueue": [
                    "self"
                ],
                "testParallelDequeue": [
                    "self"
                ],
                "testDequeue": [
                    "self"
                ],
                "testDequeueHalf": [
                    "self"
                ],
                "testEnqueueAndBlockingDequeue": [
                    "self"
                ],
                "testMultiEnqueueAndDequeue": [
                    "self"
                ],
                "testQueueSizeEmpty": [
                    "self"
                ],
                "testQueueSizeAfterEnqueueAndDequeue": [
                    "self"
                ],
                "testEnqueueMany": [
                    "self"
                ],
                "testEmptyEnqueueMany": [
                    "self"
                ],
                "testEmptyDequeueMany": [
                    "self"
                ],
                "testEmptyDequeueUpTo": [
                    "self"
                ],
                "testEmptyDequeueManyWithNoShape": [
                    "self"
                ],
                "testMultiEnqueueMany": [
                    "self"
                ],
                "testDequeueMany": [
                    "self"
                ],
                "testDequeueUpToNoBlocking": [
                    "self"
                ],
                "testMultiDequeueMany": [
                    "self"
                ],
                "testMultiDequeueUpToNoBlocking": [
                    "self"
                ],
                "testHighDimension": [
                    "self"
                ],
                "testEnqueueWrongShape": [
                    "self"
                ],
                "testBatchSizeMismatch": [
                    "self"
                ],
                "testEnqueueManyEmptyTypeConversion": [
                    "self"
                ],
                "testEnqueueWrongType": [
                    "self"
                ],
                "testEnqueueWrongShapeAtRuntime": [
                    "self"
                ],
                "testEnqueueDequeueManyWrongShape": [
                    "self"
                ],
                "testParallelEnqueueMany": [
                    "self"
                ],
                "testParallelDequeueMany": [
                    "self"
                ],
                "testParallelDequeueUpTo": [
                    "self"
                ],
                "testParallelEnqueueAndDequeue": [
                    "self"
                ],
                "testMixtureOfEnqueueAndEnqueueMany": [
                    "self"
                ],
                "testMixtureOfDequeueAndDequeueMany": [
                    "self"
                ],
                "testBlockingDequeueMany": [
                    "self"
                ],
                "testBlockingDequeueUpTo": [
                    "self"
                ],
                "testDequeueManyWithTensorParameter": [
                    "self"
                ],
                "testDequeueFromClosedQueue": [
                    "self"
                ],
                "testBlockingDequeueFromClosedQueue": [
                    "self"
                ],
                "testBlockingDequeueFromClosedEmptyQueue": [
                    "self"
                ],
                "testBlockingDequeueManyFromClosedQueue": [
                    "self"
                ],
                "testBlockingDequeueManyButNotAllFromClosedQueue": [
                    "self"
                ],
                "testDequeueUpToFromClosedQueueReturnsRemainder": [
                    "self"
                ],
                "testEnqueueManyLargerThanCapacityWithConcurrentDequeueMany": [
                    "self"
                ],
                "testClosedBlockingDequeueManyRestoresPartialBatch": [
                    "self"
                ],
                "testBlockingDequeueManyFromClosedEmptyQueue": [
                    "self"
                ],
                "testBlockingDequeueUpToFromClosedEmptyQueue": [
                    "self"
                ],
                "testEnqueueToClosedQueue": [
                    "self"
                ],
                "testEnqueueManyToClosedQueue": [
                    "self"
                ],
                "testBlockingEnqueueToFullQueue": [
                    "self"
                ],
                "testBlockingEnqueueManyToFullQueue": [
                    "self"
                ],
                "testBlockingEnqueueBeforeClose": [
                    "self"
                ],
                "testBlockingEnqueueManyBeforeClose": [
                    "self"
                ],
                "testDoesNotLoseValue": [
                    "self"
                ],
                "testSharedQueueSameSession": [
                    "self"
                ],
                "testIncompatibleSharedQueueErrors": [
                    "self"
                ],
                "testSelectQueue": [
                    "self"
                ],
                "testSelectQueueOutOfRange": [
                    "self"
                ],
                "_blockingDequeue": [
                    "self",
                    "sess",
                    "dequeue_op"
                ],
                "_blockingDequeueMany": [
                    "self",
                    "sess",
                    "dequeue_many_op"
                ],
                "_blockingEnqueue": [
                    "self",
                    "sess",
                    "enqueue_op"
                ],
                "_blockingEnqueueMany": [
                    "self",
                    "sess",
                    "enqueue_many_op"
                ],
                "testResetOfBlockingOperation": [
                    "self"
                ],
                "testBigEnqueueMany": [
                    "self"
                ],
                "testBigDequeueMany": [
                    "self"
                ],
                "testDtypes": [
                    "self"
                ],
                "testDeviceColocation": [
                    "self"
                ]
            },
            "FIFOQueueDictTest": {
                "testConstructor": [
                    "self"
                ],
                "testConstructorWithShapes": [
                    "self"
                ],
                "testEnqueueDequeueOneComponent": [
                    "self"
                ],
                "testEnqueueDequeueMultipleComponent": [
                    "self"
                ]
            },
            "FIFOQueueWithTimeoutTest": {
                "testDequeueWithTimeout": [
                    "self"
                ],
                "testReusableAfterTimeout": [
                    "self"
                ]
            },
            "QueueContainerTest": {
                "testContainer": [
                    "self"
                ]
            },
            "FIFOQueueBenchmark": {
                "_build_graph": [
                    "self"
                ],
                "_run": [
                    "self",
                    "num_iters"
                ]
            }
        },
        "tensorflow.python.kernel_tests.sparse_reorder_op_test": {
            "SparseReorderTest": {
                "_SparseTensorPlaceholder": [
                    "self"
                ],
                "_SparseTensorValue_5x6": [
                    "self",
                    "permutation"
                ],
                "testAlreadyInOrder": [
                    "self"
                ],
                "testFeedAlreadyInOrder": [
                    "self"
                ],
                "testOutOfOrder": [
                    "self"
                ],
                "testFeedOutOfOrder": [
                    "self"
                ],
                "testGradients": [
                    "self"
                ]
            }
        },
        "tensorflow.python.kernel_tests.sparse_add_op_test": {
            "_sparsify": [
                "x",
                "thresh",
                "index_dtype"
            ],
            "_s2d_add_vs_sparse_add": [
                "sparsity",
                "n",
                "m",
                "num_iters"
            ],
            "SparseAddTest": {
                "_randomTensor": [
                    "self",
                    "size",
                    "np_dtype",
                    "sparse"
                ],
                "_SparseTensorValue_3x3": [
                    "self",
                    "negate"
                ],
                "_SparseTensor_3x3": [
                    "self",
                    "negate"
                ],
                "_SparseTensor_3x3_v2": [
                    "self"
                ],
                "testAddSelf": [
                    "self"
                ],
                "testAddSelfAndNegation": [
                    "self"
                ],
                "testSmallValuesShouldVanish": [
                    "self"
                ],
                "testGradients": [
                    "self"
                ],
                "testAddSparseDense": [
                    "self"
                ],
                "testSparseTensorDenseAddGradients": [
                    "self"
                ]
            },
            "SparseAddBenchmark": {
                "benchmarkSparseAddDense": [
                    "self"
                ]
            }
        },
        "tensorflow.python.kernel_tests.pooling_ops_test": {
            "NHWCToNCHW": [
                "input_tensor"
            ],
            "NCHWToNHWC": [
                "input_tensor"
            ],
            "GetTestConfigs": [],
            "GetShrunkInceptionMaxPoolShapes": [
                "shrink"
            ],
            "GetMaxPoolFwdTest": [
                "input_size",
                "filter_size",
                "strides",
                "padding"
            ],
            "GetMaxPoolGradTest": [
                "input_size",
                "filter_size",
                "output_size",
                "strides",
                "padding"
            ],
            "PoolingTest": {
                "_VerifyOneType": [
                    "self",
                    "pool_func",
                    "input_sizes",
                    "ksize",
                    "strides",
                    "padding",
                    "data_format",
                    "data_type",
                    "expected",
                    "use_gpu"
                ],
                "_VerifyOneTest": [
                    "self",
                    "pool_func",
                    "input_sizes",
                    "ksize",
                    "strides",
                    "padding",
                    "data_format",
                    "expected",
                    "use_gpu"
                ],
                "_VerifyValues": [
                    "self",
                    "pool_func",
                    "input_sizes",
                    "ksize",
                    "strides",
                    "padding",
                    "expected",
                    "use_gpu"
                ],
                "_testAvgPoolValidPadding": [
                    "self",
                    "use_gpu"
                ],
                "_testAvgPoolSamePadding": [
                    "self",
                    "use_gpu"
                ],
                "_testAvgPoolSamePaddingNonSquareWindow": [
                    "self",
                    "use_gpu"
                ],
                "_testAvgPoolSamePaddingNonSquareWindowMultiBatch": [
                    "self",
                    "use_gpu"
                ],
                "_testAvgPoolValidPaddingUnevenStride": [
                    "self",
                    "use_gpu"
                ],
                "_testAvgPoolSamePadding4": [
                    "self",
                    "use_gpu"
                ],
                "_testAvgPoolSamePaddingPacket4": [
                    "self",
                    "use_gpu"
                ],
                "_testAvgPoolSamePaddingPacket8": [
                    "self",
                    "use_gpu"
                ],
                "testAvgPooling": [
                    "self"
                ],
                "_testMaxPoolValidPadding": [
                    "self",
                    "use_gpu"
                ],
                "_testMaxPoolSamePadding": [
                    "self",
                    "use_gpu"
                ],
                "_testMaxPoolSamePaddingNonSquareWindow": [
                    "self",
                    "use_gpu"
                ],
                "_testMaxPoolValidPaddingUnevenStride": [
                    "self",
                    "use_gpu"
                ],
                "_testMaxPoolSamePaddingPacket4": [
                    "self",
                    "use_gpu"
                ],
                "_testMaxPoolSamePaddingPacket8": [
                    "self",
                    "use_gpu"
                ],
                "testMaxPooling": [
                    "self"
                ],
                "testDepthwiseMaxPool1x1DepthWindow1": [
                    "self"
                ],
                "testDepthwiseMaxPool2x2DepthWindow3": [
                    "self"
                ],
                "testKernelSmallerThanStrideValid": [
                    "self"
                ],
                "testKernelSmallerThanStrideSame": [
                    "self"
                ],
                "_testDepthwiseMaxPoolInvalidConfig": [
                    "self",
                    "in_size",
                    "ksize",
                    "strides",
                    "error_msg",
                    "use_gpu"
                ],
                "testDepthwiseMaxPoolInvalidConfigs": [
                    "self"
                ],
                "_CompareMaxPoolingFwd": [
                    "self",
                    "input_shape",
                    "ksize",
                    "strides",
                    "padding"
                ],
                "_CompareMaxPoolingBk": [
                    "self",
                    "input_shape",
                    "output_shape",
                    "ksize",
                    "strides",
                    "padding"
                ],
                "testMaxPoolingWithArgmax": [
                    "self"
                ],
                "testMaxPoolingGradWithArgmax": [
                    "self"
                ],
                "_ConstructAndTestGradient": [
                    "self",
                    "pool_func",
                    "input_sizes",
                    "output_sizes",
                    "window_rows",
                    "window_cols",
                    "row_stride",
                    "col_stride",
                    "padding",
                    "data_format",
                    "use_gpu",
                    "x_init_value"
                ],
                "_testMaxPoolGradValidPadding1_1": [
                    "self",
                    "data_format",
                    "use_gpu"
                ],
                "_testMaxPoolGradValidPadding2_1_6": [
                    "self",
                    "data_format",
                    "use_gpu"
                ],
                "_testMaxPoolGradValidPadding2_1_7": [
                    "self",
                    "data_format",
                    "use_gpu"
                ],
                "_testMaxPoolGradValidPadding2_2": [
                    "self",
                    "data_format",
                    "use_gpu"
                ],
                "_testMaxPoolGradSamePadding1_1": [
                    "self",
                    "data_format",
                    "use_gpu"
                ],
                "_testMaxPoolGradSamePadding2_1": [
                    "self",
                    "data_format",
                    "use_gpu"
                ],
                "_testMaxPoolGradSamePadding2_2": [
                    "self",
                    "data_format",
                    "use_gpu"
                ],
                "_testMaxPoolGradSamePadding3_1": [
                    "self",
                    "data_format",
                    "use_gpu"
                ],
                "testMaxPoolGrad": [
                    "self"
                ],
                "_MaxPoolGrad": [
                    "self",
                    "orig_input",
                    "orig_output",
                    "grad",
                    "window_rows",
                    "window_cols",
                    "row_stride",
                    "col_stride",
                    "padding"
                ],
                "_testMaxPoolGradDirect": [
                    "self",
                    "input_data",
                    "output_backprop",
                    "expected_input_backprop",
                    "input_sizes",
                    "output_sizes",
                    "window_rows",
                    "window_cols",
                    "row_stride",
                    "col_stride",
                    "padding",
                    "use_gpu"
                ],
                "_testMaxPoolGradDirect1_1": [
                    "self"
                ],
                "_testMaxPoolGradDirect1_2": [
                    "self"
                ],
                "_testMaxPoolGradDirect1_3": [
                    "self"
                ],
                "_testMaxPoolGradDirectWithNans2_1": [
                    "self"
                ],
                "_testMaxPoolGradDirectWithNans2_2": [
                    "self"
                ],
                "testMaxPoolGradDirect": [
                    "self"
                ],
                "testAvgPoolGrad": [
                    "self"
                ],
                "_testAvgPoolGradValidPadding1_1": [
                    "self",
                    "data_format",
                    "use_gpu"
                ],
                "_testAvgPoolGradValidPadding2_1": [
                    "self",
                    "data_format",
                    "use_gpu"
                ],
                "_testAvgPoolGradValidPadding2_2": [
                    "self",
                    "data_format",
                    "use_gpu"
                ],
                "_testAvgPoolGradSamePadding1_1": [
                    "self",
                    "data_format",
                    "use_gpu"
                ],
                "_testAvgPoolGradSamePadding2_1": [
                    "self",
                    "data_format",
                    "use_gpu"
                ],
                "_testAvgPoolGradSamePadding2_2": [
                    "self",
                    "data_format",
                    "use_gpu"
                ],
                "_testAvgPoolGradSamePadding3_1": [
                    "self",
                    "data_format",
                    "use_gpu"
                ],
                "testShapeFunctionEdgeCases": [
                    "self"
                ],
                "testOpEdgeCases": [
                    "self"
                ]
            }
        },
        "tensorflow.python.kernel_tests.summary_ops_test": {
            "SummaryOpsTest": {
                "_AsSummary": [
                    "self",
                    "s"
                ],
                "testScalarSummary": [
                    "self"
                ],
                "testScalarSummaryDefaultName": [
                    "self"
                ],
                "testMergeSummary": [
                    "self"
                ],
                "testMergeAllSummaries": [
                    "self"
                ],
                "testHistogramSummaryTypes": [
                    "self"
                ]
            }
        },
        "tensorflow.python.kernel_tests.sparsemask_op_test": {
            "SparseMaskTest": {
                "testBasic": [
                    "self"
                ]
            }
        },
        "tensorflow.python.kernel_tests.pack_op_test": {
            "np_split_squeeze": [
                "array",
                "axis"
            ],
            "PackOpTest": {
                "testSimple": [
                    "self"
                ],
                "testConst": [
                    "self"
                ],
                "testGradientsAxis0": [
                    "self"
                ],
                "testGradientsAxis1": [
                    "self"
                ],
                "testZeroSize": [
                    "self"
                ],
                "testAxis0Default": [
                    "self"
                ],
                "testAgainstNumpy": [
                    "self"
                ],
                "testDimOutOfRange": [
                    "self"
                ],
                "testDimOutOfNegativeRange": [
                    "self"
                ]
            },
            "AutomaticPackingTest": {
                "testSimple": [
                    "self"
                ],
                "testWithNDArray": [
                    "self"
                ],
                "testVariable": [
                    "self"
                ],
                "testDtype": [
                    "self"
                ],
                "testPlaceholder": [
                    "self"
                ],
                "testShapeErrors": [
                    "self"
                ]
            }
        },
        "tensorflow.python.kernel_tests.batchtospace_op_test": {
            "PythonOpImpl": {
                "batch_to_space": []
            },
            "CppOpImpl": {
                "batch_to_space": []
            },
            "BatchToSpaceDepthToSpace": {
                "testDepthToSpaceTranspose": [
                    "self"
                ]
            },
            "BatchToSpaceDepthToSpaceCpp": {},
            "BatchToSpaceErrorHandlingTest": {
                "testInputWrongDimMissingBatch": [
                    "self"
                ],
                "testBlockSize0": [
                    "self"
                ],
                "testBlockSizeOne": [
                    "self"
                ],
                "testBlockSizeLarger": [
                    "self"
                ],
                "testBlockSizeSquaredNotDivisibleBatch": [
                    "self"
                ],
                "testUnknownShape": [
                    "self"
                ]
            },
            "BatchToSpaceErrorHandlingCppTest": {},
            "BatchToSpaceNDErrorHandlingTest": {
                "_testStaticShape": [
                    "self",
                    "input_shape",
                    "block_shape",
                    "paddings",
                    "error"
                ],
                "_testDynamicShape": [
                    "self",
                    "input_shape",
                    "block_shape",
                    "paddings"
                ],
                "_testShape": [
                    "self",
                    "input_shape",
                    "block_shape",
                    "paddings",
                    "error"
                ],
                "testInputWrongDimMissingBatch": [
                    "self"
                ],
                "testBlockSize0": [
                    "self"
                ],
                "testBlockSizeNegative": [
                    "self"
                ],
                "testNegativePadding": [
                    "self"
                ],
                "testCropTooLarge": [
                    "self"
                ],
                "testBlockSizeSquaredNotDivisibleBatch": [
                    "self"
                ],
                "testUnknownShape": [
                    "self"
                ]
            },
            "BatchToSpaceGradientTest": {
                "_checkGrad": [
                    "self",
                    "x",
                    "crops",
                    "block_size"
                ],
                "_compare": [
                    "self",
                    "b",
                    "h",
                    "w",
                    "d",
                    "block_size",
                    "crop_beg",
                    "crop_end"
                ],
                "testSmall": [
                    "self"
                ],
                "testSmall2": [
                    "self"
                ],
                "testSmallCrop1x1": [
                    "self"
                ]
            },
            "BatchToSpaceGradientCppTest": {},
            "BatchToSpaceNDGradientTest": {
                "_checkGrad": [
                    "self",
                    "x",
                    "block_shape",
                    "crops"
                ],
                "_compare": [
                    "self",
                    "input_shape",
                    "block_shape",
                    "crops"
                ],
                "testSmall": [
                    "self"
                ],
                "testSmall2": [
                    "self"
                ],
                "testSmallCrop1x1": [
                    "self"
                ]
            }
        },
        "tensorflow.python.kernel_tests.bias_op_test": {
            "GetTestConfigs": [],
            "BiasAddTest": {
                "_npBias": [
                    "self",
                    "inputs",
                    "bias"
                ],
                "testNpBias": [
                    "self"
                ],
                "_testBias": [
                    "self",
                    "np_inputs",
                    "np_bias",
                    "use_gpu"
                ],
                "_AtLeast3d": [
                    "self",
                    "np_value"
                ],
                "_NHWCToNCHW": [
                    "self",
                    "np_value"
                ],
                "_NCHWToNHWC": [
                    "self",
                    "np_value"
                ],
                "_testBiasNCHW": [
                    "self",
                    "np_inputs",
                    "np_bias",
                    "use_gpu"
                ],
                "_testAll": [
                    "self",
                    "np_inputs",
                    "np_bias"
                ],
                "testInputDims": [
                    "self"
                ],
                "testBiasVec": [
                    "self"
                ],
                "testBiasInputsMatch": [
                    "self"
                ],
                "testIntTypes": [
                    "self"
                ],
                "testFloatTypes": [
                    "self"
                ],
                "_testGradient": [
                    "self",
                    "np_input",
                    "bias",
                    "dtype",
                    "data_format",
                    "use_gpu"
                ],
                "testGradientTensor": [
                    "self"
                ],
                "testGradientTensor4D": [
                    "self"
                ],
                "testEmpty": [
                    "self"
                ],
                "testEmptyGradient": [
                    "self"
                ]
            }
        },
        "tensorflow.python.kernel_tests.base64_ops_test": {
            "Base64OpsTest": {
                "setUp": [
                    "self"
                ],
                "_RemovePad": [
                    "self",
                    "msg",
                    "base64_msg"
                ],
                "_RunTest": [
                    "self",
                    "msg",
                    "pad"
                ],
                "testWithPythonBase64": [
                    "self"
                ],
                "testShape": [
                    "self"
                ],
                "testInvalidInput": [
                    "self"
                ]
            }
        },
        "tensorflow.python.kernel_tests.check_ops_test": {
            "AssertProperIterableTest": {
                "test_single_tensor_raises": [
                    "self"
                ],
                "test_single_sparse_tensor_raises": [
                    "self"
                ],
                "test_single_ndarray_raises": [
                    "self"
                ],
                "test_single_string_raises": [
                    "self"
                ],
                "test_non_iterable_object_raises": [
                    "self"
                ],
                "test_list_does_not_raise": [
                    "self"
                ],
                "test_generator_does_not_raise": [
                    "self"
                ]
            },
            "AssertEqualTest": {
                "test_doesnt_raise_when_equal": [
                    "self"
                ],
                "test_raises_when_greater": [
                    "self"
                ],
                "test_raises_when_less": [
                    "self"
                ],
                "test_doesnt_raise_when_equal_and_broadcastable_shapes": [
                    "self"
                ],
                "test_raises_when_equal_but_non_broadcastable_shapes": [
                    "self"
                ],
                "test_doesnt_raise_when_both_empty": [
                    "self"
                ]
            },
            "AssertLessTest": {
                "test_raises_when_equal": [
                    "self"
                ],
                "test_raises_when_greater": [
                    "self"
                ],
                "test_doesnt_raise_when_less": [
                    "self"
                ],
                "test_doesnt_raise_when_less_and_broadcastable_shapes": [
                    "self"
                ],
                "test_raises_when_less_but_non_broadcastable_shapes": [
                    "self"
                ],
                "test_doesnt_raise_when_both_empty": [
                    "self"
                ]
            },
            "AssertLessEqualTest": {
                "test_doesnt_raise_when_equal": [
                    "self"
                ],
                "test_raises_when_greater": [
                    "self"
                ],
                "test_doesnt_raise_when_less_equal": [
                    "self"
                ],
                "test_doesnt_raise_when_less_equal_and_broadcastable_shapes": [
                    "self"
                ],
                "test_raises_when_less_equal_but_non_broadcastable_shapes": [
                    "self"
                ],
                "test_doesnt_raise_when_both_empty": [
                    "self"
                ]
            },
            "AssertGreaterTest": {
                "test_raises_when_equal": [
                    "self"
                ],
                "test_raises_when_less": [
                    "self"
                ],
                "test_doesnt_raise_when_greater": [
                    "self"
                ],
                "test_doesnt_raise_when_greater_and_broadcastable_shapes": [
                    "self"
                ],
                "test_raises_when_greater_but_non_broadcastable_shapes": [
                    "self"
                ],
                "test_doesnt_raise_when_both_empty": [
                    "self"
                ]
            },
            "AssertGreaterEqualTest": {
                "test_doesnt_raise_when_equal": [
                    "self"
                ],
                "test_raises_when_less": [
                    "self"
                ],
                "test_doesnt_raise_when_greater_equal": [
                    "self"
                ],
                "test_doesnt_raise_when_greater_equal_and_broadcastable_shapes": [
                    "self"
                ],
                "test_raises_when_less_equal_but_non_broadcastable_shapes": [
                    "self"
                ],
                "test_doesnt_raise_when_both_empty": [
                    "self"
                ]
            },
            "AssertNegativeTest": {
                "test_doesnt_raise_when_negative": [
                    "self"
                ],
                "test_raises_when_positive": [
                    "self"
                ],
                "test_raises_when_zero": [
                    "self"
                ],
                "test_empty_tensor_doesnt_raise": [
                    "self"
                ]
            },
            "AssertPositiveTest": {
                "test_raises_when_negative": [
                    "self"
                ],
                "test_doesnt_raise_when_positive": [
                    "self"
                ],
                "test_raises_when_zero": [
                    "self"
                ],
                "test_empty_tensor_doesnt_raise": [
                    "self"
                ]
            },
            "AssertRankTest": {
                "test_rank_zero_tensor_raises_if_rank_too_small_static_rank": [
                    "self"
                ],
                "test_rank_zero_tensor_raises_if_rank_too_small_dynamic_rank": [
                    "self"
                ],
                "test_rank_zero_tensor_doesnt_raise_if_rank_just_right_static_rank": [
                    "self"
                ],
                "test_rank_zero_tensor_doesnt_raise_if_rank_just_right_dynamic_rank": [
                    "self"
                ],
                "test_rank_one_tensor_raises_if_rank_too_large_static_rank": [
                    "self"
                ],
                "test_rank_one_tensor_raises_if_rank_too_large_dynamic_rank": [
                    "self"
                ],
                "test_rank_one_tensor_doesnt_raise_if_rank_just_right_static_rank": [
                    "self"
                ],
                "test_rank_one_tensor_doesnt_raise_if_rank_just_right_dynamic_rank": [
                    "self"
                ],
                "test_rank_one_tensor_raises_if_rank_too_small_static_rank": [
                    "self"
                ],
                "test_rank_one_tensor_raises_if_rank_too_small_dynamic_rank": [
                    "self"
                ],
                "test_raises_if_rank_is_not_scalar_static": [
                    "self"
                ],
                "test_raises_if_rank_is_not_scalar_dynamic": [
                    "self"
                ],
                "test_raises_if_rank_is_not_integer_static": [
                    "self"
                ],
                "test_raises_if_rank_is_not_integer_dynamic": [
                    "self"
                ]
            },
            "AssertRankAtLeastTest": {
                "test_rank_zero_tensor_raises_if_rank_too_small_static_rank": [
                    "self"
                ],
                "test_rank_zero_tensor_raises_if_rank_too_small_dynamic_rank": [
                    "self"
                ],
                "test_rank_zero_tensor_doesnt_raise_if_rank_just_right_static_rank": [
                    "self"
                ],
                "test_rank_zero_tensor_doesnt_raise_if_rank_just_right_dynamic_rank": [
                    "self"
                ],
                "test_rank_one_ten_doesnt_raise_raise_if_rank_too_large_static_rank": [
                    "self"
                ],
                "test_rank_one_ten_doesnt_raise_if_rank_too_large_dynamic_rank": [
                    "self"
                ],
                "test_rank_one_tensor_doesnt_raise_if_rank_just_right_static_rank": [
                    "self"
                ],
                "test_rank_one_tensor_doesnt_raise_if_rank_just_right_dynamic_rank": [
                    "self"
                ],
                "test_rank_one_tensor_raises_if_rank_too_small_static_rank": [
                    "self"
                ],
                "test_rank_one_tensor_raises_if_rank_too_small_dynamic_rank": [
                    "self"
                ]
            },
            "AssertNonNegativeTest": {
                "test_raises_when_negative": [
                    "self"
                ],
                "test_doesnt_raise_when_zero_and_positive": [
                    "self"
                ],
                "test_empty_tensor_doesnt_raise": [
                    "self"
                ]
            },
            "AssertNonPositiveTest": {
                "test_doesnt_raise_when_zero_and_negative": [
                    "self"
                ],
                "test_raises_when_positive": [
                    "self"
                ],
                "test_empty_tensor_doesnt_raise": [
                    "self"
                ]
            },
            "AssertIntegerTest": {
                "test_doesnt_raise_when_integer": [
                    "self"
                ],
                "test_raises_when_float": [
                    "self"
                ]
            },
            "IsStrictlyIncreasingTest": {
                "test_constant_tensor_is_not_strictly_increasing": [
                    "self"
                ],
                "test_decreasing_tensor_is_not_strictly_increasing": [
                    "self"
                ],
                "test_2d_decreasing_tensor_is_not_strictly_increasing": [
                    "self"
                ],
                "test_increasing_tensor_is_increasing": [
                    "self"
                ],
                "test_increasing_rank_two_tensor": [
                    "self"
                ],
                "test_tensor_with_one_element_is_strictly_increasing": [
                    "self"
                ],
                "test_empty_tensor_is_strictly_increasing": [
                    "self"
                ]
            },
            "IsNonDecreasingTest": {
                "test_constant_tensor_is_non_decreasing": [
                    "self"
                ],
                "test_decreasing_tensor_is_not_non_decreasing": [
                    "self"
                ],
                "test_2d_decreasing_tensor_is_not_non_decreasing": [
                    "self"
                ],
                "test_increasing_rank_one_tensor_is_non_decreasing": [
                    "self"
                ],
                "test_increasing_rank_two_tensor": [
                    "self"
                ],
                "test_tensor_with_one_element_is_non_decreasing": [
                    "self"
                ],
                "test_empty_tensor_is_non_decreasing": [
                    "self"
                ]
            }
        },
        "tensorflow.python.kernel_tests.scalar_strict_test": {
            "ScalarStrictTest": {
                "check": [
                    "self",
                    "op",
                    "args",
                    "error",
                    "correct"
                ],
                "testConcat": [
                    "self"
                ],
                "testFill": [
                    "self"
                ],
                "testPad": [
                    "self"
                ],
                "testRandom": [
                    "self"
                ],
                "testReshape": [
                    "self"
                ],
                "testShardedFilename": [
                    "self"
                ],
                "testShardedFilespec": [
                    "self"
                ],
                "testUnsortedSegmentSum": [
                    "self"
                ],
                "testRange": [
                    "self"
                ],
                "testSlice": [
                    "self"
                ],
                "testSparseToDense": [
                    "self"
                ],
                "testImageSummary": [
                    "self"
                ],
                "testScalarSummary": [
                    "self"
                ],
                "testHistogramSummary": [
                    "self"
                ],
                "testTile": [
                    "self"
                ]
            }
        },
        "tensorflow.python.kernel_tests.slice_op_test": {
            "SliceTest": {
                "testEmpty": [
                    "self"
                ],
                "testInt32": [
                    "self"
                ],
                "testSelectAll": [
                    "self"
                ],
                "testSingleDimension": [
                    "self"
                ],
                "testScalarInput": [
                    "self"
                ],
                "testInvalidIndex": [
                    "self"
                ],
                "_testSliceMatrixDim0": [
                    "self",
                    "x",
                    "begin",
                    "size"
                ],
                "testSliceMatrixDim0": [
                    "self"
                ],
                "testSingleElementAll": [
                    "self"
                ],
                "testSimple": [
                    "self"
                ],
                "testComplex": [
                    "self"
                ],
                "testRandom": [
                    "self"
                ],
                "_testGradientSlice": [
                    "self",
                    "input_shape",
                    "slice_begin",
                    "slice_size"
                ],
                "_testGradientVariableSize": [
                    "self"
                ],
                "testGradientsAll": [
                    "self"
                ],
                "testNotIterable": [
                    "self"
                ],
                "testComputedShape": [
                    "self"
                ]
            }
        },
        "tensorflow.python.kernel_tests.resource_variable_ops_test": {
            "ResourceVariableOpsTest": {
                "testHandleDtypeShapeMatch": [
                    "self"
                ],
                "testDtypeSurvivesIdentity": [
                    "self"
                ],
                "testCreateRead": [
                    "self"
                ],
                "testManyAssigns": [
                    "self"
                ],
                "testAssignAdd": [
                    "self"
                ],
                "testScatterAdd": [
                    "self"
                ]
            }
        },
        "tensorflow.python.kernel_tests.dense_update_ops_no_tsan_test": {
            "AssignOpTest": {
                "testParallelUpdateWithoutLocking": [
                    "self"
                ],
                "testParallelAssignWithoutLocking": [
                    "self"
                ]
            }
        },
        "tensorflow.python.kernel_tests.summary_image_op_test": {
            "SummaryImageOpTest": {
                "_AsSummary": [
                    "self",
                    "s"
                ],
                "_CheckProto": [
                    "self",
                    "image_summ",
                    "shape"
                ],
                "testImageSummary": [
                    "self"
                ],
                "testImageSummaryUint8": [
                    "self"
                ]
            }
        },
        "tensorflow.python.kernel_tests.rnn_test": {
            "_static_vs_dynamic_rnn_benchmark_static": [
                "inputs_list_t",
                "sequence_length"
            ],
            "_static_vs_dynamic_rnn_benchmark_dynamic": [
                "inputs_t",
                "sequence_length"
            ],
            "graph_creation_static_vs_dynamic_rnn_benchmark": [
                "max_time"
            ],
            "_timer": [
                "sess",
                "ops"
            ],
            "static_vs_dynamic_rnn_benchmark": [
                "batch_size",
                "max_time",
                "num_units",
                "use_gpu"
            ],
            "_half_seq_len_vs_unroll_half_rnn_benchmark": [
                "inputs_list_t",
                "sequence_length"
            ],
            "half_seq_len_vs_unroll_half_rnn_benchmark": [
                "batch_size",
                "max_time",
                "num_units",
                "use_gpu"
            ],
            "_concat_state_vs_tuple_state_rnn_benchmark": [
                "inputs_list_t",
                "sequence_length",
                "state_is_tuple"
            ],
            "concat_state_vs_tuple_state_rnn_benchmark": [
                "batch_size",
                "max_time",
                "num_units",
                "use_gpu"
            ],
            "_dynamic_rnn_swap_memory_benchmark": [
                "inputs_t",
                "sequence_length",
                "swap_memory"
            ],
            "dynamic_rnn_swap_memory_benchmark": [
                "batch_size",
                "max_time",
                "num_units"
            ],
            "rnn_long_sequence_benchmark": [
                "batch_size",
                "seqlen",
                "num_units",
                "dynamic",
                "swap_memory"
            ],
            "Plus1RNNCell": {
                "output_size": [
                    "self"
                ],
                "state_size": [
                    "self"
                ],
                "__call__": [
                    "self",
                    "input_",
                    "state",
                    "scope"
                ]
            },
            "DummyMultiDimensionalLSTM": {
                "__init__": [
                    "self",
                    "dims"
                ],
                "output_size": [
                    "self"
                ],
                "state_size": [
                    "self"
                ],
                "__call__": [
                    "self",
                    "input_",
                    "state",
                    "scope"
                ]
            },
            "NestedRNNCell": {
                "output_size": [
                    "self"
                ],
                "state_size": [
                    "self"
                ],
                "__call__": [
                    "self",
                    "input_",
                    "state",
                    "scope"
                ]
            },
            "TestStateSaver": {
                "__init__": [
                    "self",
                    "batch_size",
                    "state_size"
                ],
                "state": [
                    "self",
                    "name"
                ],
                "save_state": [
                    "self",
                    "name",
                    "state"
                ]
            },
            "RNNTest": {
                "setUp": [
                    "self"
                ],
                "testInvalidSequenceLengthShape": [
                    "self"
                ],
                "testRNN": [
                    "self"
                ],
                "testDropout": [
                    "self"
                ],
                "_testDynamicCalculation": [
                    "self",
                    "use_gpu"
                ],
                "testDynamicCalculation": [
                    "self"
                ],
                "_testScope": [
                    "self",
                    "factory",
                    "prefix",
                    "use_outer_scope"
                ],
                "testScope": [
                    "self"
                ]
            },
            "GRUTest": {
                "setUp": [
                    "self"
                ],
                "_testDynamic": [
                    "self",
                    "use_gpu"
                ],
                "testDynamic": [
                    "self"
                ],
                "_testScope": [
                    "self",
                    "factory",
                    "prefix",
                    "use_outer_scope"
                ],
                "testDynamicScope": [
                    "self"
                ]
            },
            "LSTMTest": {
                "setUp": [
                    "self"
                ],
                "_testNoProjNoSharding": [
                    "self",
                    "use_gpu"
                ],
                "_testCellClipping": [
                    "self",
                    "use_gpu"
                ],
                "_testNoProjNoShardingSimpleStateSaver": [
                    "self",
                    "use_gpu"
                ],
                "testNoProjNoShardingTupleStateSaver": [
                    "self"
                ],
                "testNoProjNoShardingNestedTupleStateSaver": [
                    "self"
                ],
                "_testProjNoSharding": [
                    "self",
                    "use_gpu"
                ],
                "testStateTupleWithProjAndSequenceLength": [
                    "self"
                ],
                "_testProjSharding": [
                    "self",
                    "use_gpu"
                ],
                "_testTooManyShards": [
                    "self",
                    "use_gpu"
                ],
                "_testDoubleInput": [
                    "self",
                    "use_gpu"
                ],
                "_testShardNoShardEquivalentOutput": [
                    "self",
                    "use_gpu"
                ],
                "_testDoubleInputWithDropoutAndDynamicCalculation": [
                    "self",
                    "use_gpu"
                ],
                "testSharingWeightsWithReuse": [
                    "self"
                ],
                "testSharingWeightsWithDifferentNamescope": [
                    "self"
                ],
                "testDynamicRNNAllowsUnknownTimeDimension": [
                    "self"
                ],
                "testDynamicRNNWithTupleStates": [
                    "self"
                ],
                "testDynamicRNNWithNestedTupleStates": [
                    "self"
                ],
                "_testDynamicEquivalentToStaticRNN": [
                    "self",
                    "use_gpu",
                    "use_sequence_length"
                ],
                "testNoProjNoShardingSimpleStateSaver": [
                    "self"
                ],
                "testNoProjNoSharding": [
                    "self"
                ],
                "testCellClipping": [
                    "self"
                ],
                "testProjNoSharding": [
                    "self"
                ],
                "testProjSharding": [
                    "self"
                ],
                "testTooManyShards": [
                    "self"
                ],
                "testShardNoShardEquivalentOutput": [
                    "self"
                ],
                "testDoubleInput": [
                    "self"
                ],
                "testDoubleInputWithDropoutAndDynamicCalculation": [
                    "self"
                ],
                "testDynamicEquivalentToStaticRNN": [
                    "self"
                ]
            },
            "BidirectionalRNNTest": {
                "setUp": [
                    "self"
                ],
                "_createBidirectionalRNN": [
                    "self",
                    "use_gpu",
                    "use_shape",
                    "use_sequence_length",
                    "scope"
                ],
                "_testBidirectionalRNN": [
                    "self",
                    "use_gpu",
                    "use_shape"
                ],
                "_testBidirectionalRNNWithoutSequenceLength": [
                    "self",
                    "use_gpu",
                    "use_shape"
                ],
                "testBidirectionalRNN": [
                    "self"
                ],
                "testBidirectionalRNNWithoutSequenceLength": [
                    "self"
                ],
                "_createBidirectionalDynamicRNN": [
                    "self",
                    "use_gpu",
                    "use_shape",
                    "use_state_tuple",
                    "use_time_major",
                    "scope"
                ],
                "_testBidirectionalDynamicRNN": [
                    "self",
                    "use_gpu",
                    "use_shape",
                    "use_state_tuple",
                    "use_time_major"
                ],
                "testBidirectionalDynamicRNN": [
                    "self"
                ],
                "_testScope": [
                    "self",
                    "factory",
                    "prefix",
                    "use_outer_scope"
                ],
                "testBidirectionalRNNScope": [
                    "self"
                ],
                "testBidirectionalDynamicRNNScope": [
                    "self"
                ]
            },
            "MultiDimensionalLSTMTest": {
                "setUp": [
                    "self"
                ],
                "testMultiDimensionalLSTMAllRNNContainers": [
                    "self"
                ]
            },
            "NestedLSTMTest": {
                "setUp": [
                    "self"
                ],
                "testNestedIOLSTMAllRNNContainers": [
                    "self"
                ]
            },
            "RawRNNTest": {
                "setUp": [
                    "self"
                ],
                "_testRawRNN": [
                    "self",
                    "max_time"
                ],
                "testRawRNNZeroLength": [
                    "self"
                ],
                "testRawRNN": [
                    "self"
                ],
                "testLoopState": [
                    "self"
                ],
                "testLoopStateWithTensorArray": [
                    "self"
                ],
                "testEmitDifferentStructureThanCellOutput": [
                    "self"
                ],
                "_testScope": [
                    "self",
                    "factory",
                    "prefix",
                    "use_outer_scope"
                ],
                "testRawRNNScope": [
                    "self"
                ]
            },
            "StateSaverRNNTest": {
                "setUp": [
                    "self"
                ],
                "_testScope": [
                    "self",
                    "factory",
                    "prefix",
                    "use_outer_scope"
                ],
                "testStateSaverRNNScope": [
                    "self"
                ]
            },
            "BenchmarkRNN": {
                "benchmarkGraphCreationStaticVsDynamicLSTM": [
                    "self"
                ],
                "benchmarkStaticUnrollVsDynamicFlowLSTM": [
                    "self"
                ],
                "benchmarkDynamicLSTMNoMemorySwapVsMemorySwap": [
                    "self"
                ],
                "benchmarkStaticUnrollHalfSequenceLengthVsHalfUnroll": [
                    "self"
                ],
                "benchmarkStaticUnrollStateConcatVsStateTuple": [
                    "self"
                ]
            }
        },
        "tensorflow.python.kernel_tests.scan_ops_test": {
            "numpy_reverse": [
                "x",
                "axis"
            ],
            "handle_options": [
                "func",
                "x",
                "axis",
                "exclusive",
                "reverse"
            ],
            "CumsumTest": {
                "_compare": [
                    "self",
                    "x",
                    "axis",
                    "exclusive",
                    "reverse"
                ],
                "_compareAll": [
                    "self",
                    "x",
                    "axis"
                ],
                "testEmpty": [
                    "self"
                ],
                "test1D": [
                    "self"
                ],
                "test2D": [
                    "self"
                ],
                "test3D": [
                    "self"
                ],
                "test6D": [
                    "self"
                ],
                "testInvalidAxis": [
                    "self"
                ],
                "_compareGradient": [
                    "self",
                    "shape",
                    "axis",
                    "exclusive",
                    "reverse"
                ],
                "testGradient": [
                    "self"
                ],
                "testGradientReverse": [
                    "self"
                ],
                "testGradientExclusive": [
                    "self"
                ],
                "testGradientExclusiveReverse": [
                    "self"
                ],
                "testGradient2D": [
                    "self"
                ]
            },
            "CumprodTest": {
                "_compare": [
                    "self",
                    "x",
                    "axis",
                    "exclusive",
                    "reverse"
                ],
                "_compareAll": [
                    "self",
                    "x",
                    "axis"
                ],
                "testEmpty": [
                    "self"
                ],
                "test1D": [
                    "self"
                ],
                "test2D": [
                    "self"
                ],
                "test3D": [
                    "self"
                ],
                "test6D": [
                    "self"
                ],
                "testInvalidAxis": [
                    "self"
                ],
                "_compareGradient": [
                    "self",
                    "shape",
                    "axis",
                    "exclusive",
                    "reverse"
                ],
                "testGradient": [
                    "self"
                ],
                "testGradientReverse": [
                    "self"
                ],
                "testGradientExclusive": [
                    "self"
                ],
                "testGradientExclusiveReverse": [
                    "self"
                ],
                "testGradient2D": [
                    "self"
                ]
            }
        },
        "tensorflow.python.kernel_tests.random_crop_test": {
            "RandomCropTest": {
                "testNoOp": [
                    "self"
                ],
                "testContains": [
                    "self"
                ],
                "testRandomization": [
                    "self"
                ]
            }
        },
        "tensorflow.python.kernel_tests.seq2seq_test": {
            "Seq2SeqTest": {
                "testRNNDecoder": [
                    "self"
                ],
                "testBasicRNNSeq2Seq": [
                    "self"
                ],
                "testTiedRNNSeq2Seq": [
                    "self"
                ],
                "testEmbeddingRNNDecoder": [
                    "self"
                ],
                "testEmbeddingRNNSeq2Seq": [
                    "self"
                ],
                "testEmbeddingTiedRNNSeq2Seq": [
                    "self"
                ],
                "testAttentionDecoder1": [
                    "self"
                ],
                "testAttentionDecoder2": [
                    "self"
                ],
                "testDynamicAttentionDecoder1": [
                    "self"
                ],
                "testDynamicAttentionDecoder2": [
                    "self"
                ],
                "testAttentionDecoderStateIsTuple": [
                    "self"
                ],
                "testEmbeddingAttentionDecoder": [
                    "self"
                ],
                "testEmbeddingAttentionSeq2Seq": [
                    "self"
                ],
                "testOne2ManyRNNSeq2Seq": [
                    "self"
                ],
                "testSequenceLoss": [
                    "self"
                ],
                "testSequenceLossByExample": [
                    "self"
                ],
                "testModelWithBucketsScopeAndLoss": [
                    "self"
                ],
                "testModelWithBuckets": [
                    "self"
                ],
                "testModelWithBooleanFeedPrevious": [
                    "self"
                ]
            }
        },
        "tensorflow.python.kernel_tests.edit_distance_op_test": {
            "ConstantOf": [
                "x"
            ],
            "EditDistanceTest": {
                "_testEditDistanceST": [
                    "self",
                    "hypothesis_st",
                    "truth_st",
                    "normalize",
                    "expected_output",
                    "expected_shape",
                    "expected_err_re"
                ],
                "_testEditDistance": [
                    "self",
                    "hypothesis",
                    "truth",
                    "normalize",
                    "expected_output",
                    "expected_err_re"
                ],
                "testEditDistanceNormalized": [
                    "self"
                ],
                "testEditDistanceUnnormalized": [
                    "self"
                ],
                "testEditDistanceProperDistance": [
                    "self"
                ],
                "testEditDistance3D": [
                    "self"
                ],
                "testEditDistanceZeroLengthHypothesis": [
                    "self"
                ],
                "testEditDistanceZeroLengthTruth": [
                    "self"
                ],
                "testEditDistanceZeroLengthHypothesisAndTruth": [
                    "self"
                ]
            }
        },
        "tensorflow.python.kernel_tests.softsign_op_test": {
            "SoftsignTest": {
                "_npSoftsign": [
                    "self",
                    "np_features"
                ],
                "_testSoftsign": [
                    "self",
                    "np_features",
                    "use_gpu"
                ],
                "testNumbers": [
                    "self"
                ],
                "testGradient": [
                    "self"
                ]
            }
        },
        "tensorflow.python.kernel_tests.draw_bounding_box_op_test": {
            "DrawBoundingBoxOpTest": {
                "_fillBorder": [
                    "self",
                    "image",
                    "color"
                ],
                "_testDrawBoundingBoxColorCycling": [
                    "self",
                    "img"
                ],
                "testDrawBoundingBoxRGBColorCycling": [
                    "self"
                ],
                "testDrawBoundingBoxRGBAColorCycling": [
                    "self"
                ],
                "testDrawBoundingBoxGRY": [
                    "self"
                ]
            }
        },
        "tensorflow.python.kernel_tests.division_future_test": {
            "DivisionTestCase": {
                "testDivision": [
                    "self"
                ]
            }
        },
        "tensorflow.python.kernel_tests.tensor_array_ops_test": {
            "TensorArrayCPUTest": {
                "testTensorArrayWriteRead": [
                    "self"
                ],
                "_testTensorArrayWritePack": [
                    "self",
                    "tf_dtype"
                ],
                "_testTensorArrayWritePackMaybeLegacy": [
                    "self"
                ],
                "testTensorArrayWritePack": [
                    "self"
                ],
                "_testTensorArrayWriteConcat": [
                    "self",
                    "tf_dtype"
                ],
                "testTensorArrayWriteConcat": [
                    "self"
                ],
                "_testTensorArrayPackNotAllValuesAvailableFails": [
                    "self"
                ],
                "testTensorArrayPackNotAllValuesAvailableFails": [
                    "self"
                ],
                "_testTensorArrayUnpackRead": [
                    "self",
                    "tf_dtype"
                ],
                "_testTensorArrayUnpackReadMaybeLegacy": [
                    "self"
                ],
                "testTensorArrayUnpackRead": [
                    "self"
                ],
                "_testTensorArraySplitRead": [
                    "self",
                    "tf_dtype"
                ],
                "testTensorArraySplitRead": [
                    "self"
                ],
                "testTensorGradArrayWriteRead": [
                    "self"
                ],
                "testTensorGradArrayDynamicWriteRead": [
                    "self"
                ],
                "testTensorGradAccessTwiceReceiveSameObject": [
                    "self"
                ],
                "testTensorArrayWriteWrongIndexOrDataTypeFails": [
                    "self"
                ],
                "testTensorArrayReadWrongIndexOrDataTypeFails": [
                    "self"
                ],
                "testTensorArrayWriteMultipleFails": [
                    "self"
                ],
                "testTensorArrayConcatIncompatibleShapesFails": [
                    "self"
                ],
                "testTensorArraySplitIncompatibleShapesFails": [
                    "self"
                ],
                "_testTensorArrayWriteGradientAddMultipleAdds": [
                    "self",
                    "dtype"
                ],
                "testTensorArrayWriteGradientAddMultipleAdds": [
                    "self"
                ],
                "testMultiTensorArray": [
                    "self"
                ],
                "testDuplicateTensorArrayHasDifferentName": [
                    "self"
                ],
                "_testTensorArrayGradientWriteReadType": [
                    "self",
                    "dtype"
                ],
                "testTensorArrayGradientWriteRead": [
                    "self"
                ],
                "_testTensorArrayGradientWritePackConcatAndRead": [
                    "self"
                ],
                "testTensorArrayGradientWritePackConcatAndRead": [
                    "self"
                ],
                "testTensorArrayReadTwice": [
                    "self"
                ],
                "_testTensorArrayGradientUnpackRead": [
                    "self"
                ],
                "testTensorArrayGradientUnpackRead": [
                    "self"
                ],
                "testTensorArrayGradientSplitConcat": [
                    "self"
                ],
                "_testTensorArrayGradientDynamicUnpackRead": [
                    "self"
                ],
                "testTensorArrayGradientDynamicUnpackRead": [
                    "self"
                ],
                "testCloseTensorArray": [
                    "self"
                ],
                "testSizeTensorArray": [
                    "self"
                ],
                "testWriteCloseTensorArray": [
                    "self"
                ],
                "_testWhileLoopWritePackGradients": [
                    "self",
                    "dynamic_size",
                    "dtype"
                ],
                "testWhileLoopWritePackGradients": [
                    "self"
                ],
                "testWhileLoopDynamicWritePackGradients": [
                    "self"
                ],
                "testSumOfTwoReadVariablesWithoutRepeatGrad": [
                    "self"
                ],
                "_grad_source_for_name": [
                    "self",
                    "name"
                ],
                "testGetGradSource_Invalid": [
                    "self"
                ],
                "testGetGradSource_NoEnclosingScope": [
                    "self"
                ],
                "testGetGradSource_EnclosingScope": [
                    "self"
                ],
                "testGetGradSource_NestedUsesInnermost": [
                    "self"
                ],
                "testWriteShape": [
                    "self"
                ],
                "_testUnpackShape": [
                    "self"
                ],
                "testUnpackShape": [
                    "self"
                ],
                "testSplitShape": [
                    "self"
                ],
                "testWriteUnknownShape": [
                    "self"
                ],
                "_testGradientWhenNotAllComponentsRead": [
                    "self"
                ],
                "testGradientWhenNotAllComponentsRead": [
                    "self"
                ],
                "_testTensorArrayUnpackDynamic": [
                    "self"
                ],
                "testTensorArrayUnpackDynamic": [
                    "self"
                ],
                "testTensorArraySplitDynamic": [
                    "self"
                ],
                "_testTensorArrayEvalEmpty": [
                    "self"
                ],
                "testTensorArrayEvalEmpty": [
                    "self"
                ],
                "_testTensorArrayEvalEmptyWithDefault": [
                    "self"
                ],
                "testTensorArrayEvalEmptyWithDefault": [
                    "self"
                ],
                "testTensorArrayScatterReadAndGradients": [
                    "self"
                ],
                "testTensorArrayWriteGatherAndGradients": [
                    "self"
                ]
            },
            "TensorArrayGPUTest": {}
        },
        "tensorflow.python.kernel_tests.atrous_convolution_test": {
            "upsample_filters": [
                "filters",
                "rate"
            ],
            "AtrousConvolutionTest": {
                "_test_atrous_convolution": [
                    "self",
                    "input_shape",
                    "filter_shape",
                    "dilation_rate"
                ],
                "testAtrousConvolution2D": [
                    "self"
                ],
                "testAtrousConvolution3D": [
                    "self"
                ],
                "testAtrousConvolution1D": [
                    "self"
                ],
                "testAtrousConvolutionNC": [
                    "self"
                ],
                "testAtrousSequence": [
                    "self"
                ],
                "_test_gradient": [
                    "self",
                    "x_shape",
                    "f_shape",
                    "dilation_rate",
                    "padding"
                ],
                "testGradient": [
                    "self"
                ]
            }
        },
        "tensorflow.python.kernel_tests.string_join_op_test": {
            "StringJoinOpTest": {
                "testStringJoin": [
                    "self"
                ]
            }
        },
        "tensorflow.python.kernel_tests.gather_nd_op_test": {
            "GatherNdTest": {
                "_testSimpleDtype": [
                    "self",
                    "dtype"
                ],
                "testSimpleDtype": [
                    "self"
                ],
                "testEmptyIndicesAndParamsOKButJustEmptyParamsFails": [
                    "self"
                ],
                "testIndexScalar": [
                    "self"
                ],
                "testParamsRankLargerThanIndexIndexScalarSlices": [
                    "self"
                ],
                "testParamsRankLargerThanIndexSlices": [
                    "self"
                ],
                "testHigherRankParamsLargerThanIndexSlices": [
                    "self"
                ],
                "testEmptyIndicesLastRankMeansCopyEntireTensor": [
                    "self"
                ],
                "testHigherRankParamsAndIndicesLargerThanIndexSlices": [
                    "self"
                ],
                "testHigherRankParams": [
                    "self"
                ],
                "testHigherRankParamsAndIndices": [
                    "self"
                ],
                "testUnknownIndices": [
                    "self"
                ],
                "testBadIndices": [
                    "self"
                ],
                "testBadIndicesWithSlices": [
                    "self"
                ],
                "testGradientsRank2Elements": [
                    "self"
                ],
                "testGradientsRank2Slices": [
                    "self"
                ],
                "testGradientsRank3Elements": [
                    "self"
                ],
                "testGradientsRank2SlicesWithEmptySpace": [
                    "self"
                ]
            },
            "GatherNdGpuTest": {},
            "GatherNdOpBenchmark": {
                "benchmark_gather_nd_op": [
                    "self"
                ]
            }
        },
        "tensorflow.python.kernel_tests.bcast_ops_test": {
            "BcastOpsTest": {
                "_GetGradientArgs": [
                    "self",
                    "xs",
                    "ys"
                ],
                "testBasic": [
                    "self"
                ],
                "testZeroDims": [
                    "self"
                ]
            }
        },
        "tensorflow.python.kernel_tests.gradient_correctness_test": {
            "GradientCorrectnessTest": {
                "testMultipleOutputChainedGradients": [
                    "self"
                ]
            }
        },
        "tensorflow.python.kernel_tests.summary_tensor_op_test": {
            "SummaryOpsTest": {
                "_SummarySingleValue": [
                    "self",
                    "s"
                ],
                "_AssertNumpyEq": [
                    "self",
                    "actual",
                    "expected"
                ],
                "testNodeNames": [
                    "self"
                ],
                "testScalarSummary": [
                    "self"
                ],
                "testStringSummary": [
                    "self"
                ],
                "testManyScalarSummary": [
                    "self"
                ],
                "testManyStringSummary": [
                    "self"
                ],
                "testManyBools": [
                    "self"
                ]
            }
        },
        "tensorflow.python.kernel_tests.denormal_test": {
            "DenormalTest": {
                "testPythonHasDenormals": [
                    "self"
                ],
                "_flushDenormalsTest": [
                    "self",
                    "use_gpu",
                    "dtypes"
                ],
                "testFlushDenormalsCPU": [
                    "self"
                ],
                "testFlushDenormalsGPU": [
                    "self"
                ]
            }
        },
        "tensorflow.python.kernel_tests.sparse_reshape_op_test": {
            "SparseReshapeTest": {
                "_SparseTensorPlaceholder": [
                    "self"
                ],
                "_SparseTensorValue_5x6": [
                    "self"
                ],
                "_SparseTensorValue_2x3x4": [
                    "self"
                ],
                "testSameShape": [
                    "self"
                ],
                "testFeedSameShape": [
                    "self"
                ],
                "testFeedSameShapeWithInferredDim": [
                    "self"
                ],
                "testFeedNewShapeSameRank": [
                    "self"
                ],
                "testFeedNewShapeSameRankWithInferredDim": [
                    "self"
                ],
                "testUpRank": [
                    "self"
                ],
                "testFeedUpRank": [
                    "self"
                ],
                "testFeedUpRankWithInferredDim": [
                    "self"
                ],
                "testFeedDownRank": [
                    "self"
                ],
                "testFeedDownRankWithInferredDim": [
                    "self"
                ],
                "testFeedMultipleInferredDims": [
                    "self"
                ],
                "testFeedMismatchedSizes": [
                    "self"
                ],
                "testFeedMismatchedSizesWithInferredDim": [
                    "self"
                ],
                "testFeedPartialShapes": [
                    "self"
                ],
                "testFeedDenseReshapeSemantics": [
                    "self"
                ]
            }
        },
        "tensorflow.python.kernel_tests.dense_update_ops_test": {
            "AssignOpTest": {
                "_initAssignFetch": [
                    "self",
                    "x",
                    "y",
                    "use_gpu"
                ],
                "_initAssignAddFetch": [
                    "self",
                    "x",
                    "y",
                    "use_gpu"
                ],
                "_initAssignSubFetch": [
                    "self",
                    "x",
                    "y",
                    "use_gpu"
                ],
                "_testTypes": [
                    "self",
                    "vals"
                ],
                "testBasic": [
                    "self"
                ],
                "testAssignNonStrictShapeChecking": [
                    "self"
                ],
                "testInitRequiredAssignAdd": [
                    "self"
                ],
                "testInitRequiredAssignSub": [
                    "self"
                ],
                "testParallelUpdateWithLocking": [
                    "self"
                ],
                "testParallelAssignWithLocking": [
                    "self"
                ]
            }
        },
        "tensorflow.python.kernel_tests.spacetobatch_op_test": {
            "space_to_batch_direct": [
                "input_array",
                "block_shape",
                "paddings"
            ],
            "PythonOpImpl": {
                "space_to_batch": [],
                "batch_to_space": []
            },
            "CppOpImpl": {
                "space_to_batch": [],
                "batch_to_space": []
            },
            "SpaceToBatchTest": {
                "_testPad": [
                    "self",
                    "inputs",
                    "paddings",
                    "block_size",
                    "outputs"
                ],
                "_testOne": [
                    "self",
                    "inputs",
                    "block_size",
                    "outputs"
                ],
                "testSmallInput2x2": [
                    "self"
                ],
                "testSmallInput2x2Pad1x0": [
                    "self"
                ],
                "testDepthInput2x2": [
                    "self"
                ],
                "testLargerInput2x2": [
                    "self"
                ],
                "testBatchInput2x2": [
                    "self"
                ],
                "testLargerInputBatch2x2": [
                    "self"
                ]
            },
            "SpaceToBatchCppTest": {},
            "SpaceToBatchNDTest": {
                "_testPad": [
                    "self",
                    "inputs",
                    "block_shape",
                    "paddings",
                    "outputs"
                ],
                "_testDirect": [
                    "self",
                    "input_shape",
                    "block_shape",
                    "paddings"
                ],
                "testZeroBlockDimsZeroRemainingDims": [
                    "self"
                ],
                "testZeroBlockDimsOneRemainingDim": [
                    "self"
                ],
                "testZeroBlockDimsTwoRemainingDims": [
                    "self"
                ],
                "testOneBlockDimZeroRemainingDims": [
                    "self"
                ],
                "testOneBlockDimOneRemainingDim": [
                    "self"
                ],
                "testDirect": [
                    "self"
                ]
            },
            "SpaceToBatchSpaceToDepth": {
                "testSpaceToDepthTranspose": [
                    "self"
                ]
            },
            "SpaceToBatchSpaceToDepthCpp": {},
            "SpaceToBatchErrorHandlingTest": {
                "testInputWrongDimMissingBatch": [
                    "self"
                ],
                "testBlockSize0": [
                    "self"
                ],
                "testBlockSizeOne": [
                    "self"
                ],
                "testBlockSizeLarger": [
                    "self"
                ],
                "testBlockSizeNotDivisibleWidth": [
                    "self"
                ],
                "testBlockSizeNotDivisibleHeight": [
                    "self"
                ],
                "testBlockSizeNotDivisibleBoth": [
                    "self"
                ],
                "testUnknownShape": [
                    "self"
                ]
            },
            "SpaceToBatchErrorHandlingCppTest": {},
            "SpaceToBatchNDErrorHandlingTest": {
                "_testStaticShape": [
                    "self",
                    "input_shape",
                    "block_shape",
                    "paddings",
                    "error"
                ],
                "_testDynamicShape": [
                    "self",
                    "input_shape",
                    "block_shape",
                    "paddings"
                ],
                "_testShape": [
                    "self",
                    "input_shape",
                    "block_shape",
                    "paddings",
                    "error"
                ],
                "testBlockSize0": [
                    "self"
                ],
                "testBlockSizeNegative": [
                    "self"
                ],
                "testNegativePadding": [
                    "self"
                ],
                "testBlockSizeNotDivisible": [
                    "self"
                ],
                "testBlockDimsMismatch": [
                    "self"
                ],
                "testUnknown": [
                    "self"
                ]
            },
            "SpaceToBatchGradientTest": {
                "_checkGrad": [
                    "self",
                    "x",
                    "paddings",
                    "block_size"
                ],
                "_compare": [
                    "self",
                    "b",
                    "h",
                    "w",
                    "d",
                    "block_size",
                    "pad_beg",
                    "pad_end"
                ],
                "testSmall": [
                    "self"
                ],
                "testSmall2": [
                    "self"
                ],
                "testSmallPad1x1": [
                    "self"
                ]
            },
            "SpaceToBatchGradientCppTest": {},
            "SpaceToBatchNDGradientTest": {
                "_checkGrad": [
                    "self",
                    "x",
                    "block_shape",
                    "paddings"
                ],
                "_compare": [
                    "self",
                    "input_shape",
                    "block_shape",
                    "paddings"
                ],
                "testSmall": [
                    "self"
                ],
                "testSmall2": [
                    "self"
                ],
                "testSmallPad1": [
                    "self"
                ],
                "testSmallPadThreeBlockDims": [
                    "self"
                ]
            },
            "RequiredSpaceToBatchPaddingsTest": {
                "_checkProperties": [
                    "self",
                    "input_shape",
                    "block_shape",
                    "base_paddings",
                    "paddings",
                    "crops"
                ],
                "_test": [
                    "self",
                    "input_shape",
                    "block_shape",
                    "base_paddings"
                ],
                "testSimple": [
                    "self"
                ]
            }
        },
        "tensorflow.python.kernel_tests.sparse_serialization_ops_test": {
            "SerializeSparseTest": {
                "_SparseTensorPlaceholder": [
                    "self",
                    "dtype"
                ],
                "_SparseTensorValue_5x6": [
                    "self",
                    "permutation"
                ],
                "_SparseTensorValue_3x4": [
                    "self",
                    "permutation"
                ],
                "_SparseTensorValue_1x1x1": [
                    "self"
                ],
                "testSerializeDeserializeMany": [
                    "self"
                ],
                "testFeedSerializeDeserializeMany": [
                    "self"
                ],
                "testSerializeManyDeserializeManyRoundTrip": [
                    "self"
                ],
                "testDeserializeFailsWrongType": [
                    "self"
                ],
                "testDeserializeFailsInconsistentRank": [
                    "self"
                ],
                "testDeserializeFailsInvalidProto": [
                    "self"
                ]
            }
        },
        "tensorflow.python.kernel_tests.extract_image_patches_op_test": {
            "ExtractImagePatches": {
                "_VerifyValues": [
                    "self",
                    "image",
                    "ksizes",
                    "strides",
                    "rates",
                    "padding",
                    "patches"
                ],
                "testKsize1x1Stride1x1Rate1x1": [
                    "self"
                ],
                "testKsize1x1Stride2x3Rate1x1": [
                    "self"
                ],
                "testKsize2x2Stride1x1Rate1x1Valid": [
                    "self"
                ],
                "testKsize2x2Stride1x1Rate1x1Same": [
                    "self"
                ]
            }
        },
        "tensorflow.python.kernel_tests.one_hot_op_test": {
            "OneHotTest": {
                "_testOneHot": [
                    "self",
                    "truth",
                    "use_gpu",
                    "expected_err_re",
                    "raises"
                ],
                "_testBothOneHot": [
                    "self",
                    "truth",
                    "expected_err_re",
                    "raises"
                ],
                "_testBasic": [
                    "self",
                    "dtype"
                ],
                "_testDefaultBasic": [
                    "self",
                    "dtype"
                ],
                "testFloatBasic": [
                    "self"
                ],
                "testDoubleBasic": [
                    "self"
                ],
                "testInt32Basic": [
                    "self"
                ],
                "testInt64Basic": [
                    "self"
                ],
                "testComplex64Basic": [
                    "self"
                ],
                "testComplex128Basic": [
                    "self"
                ],
                "_testBatch": [
                    "self",
                    "dtype"
                ],
                "_testDefaultValuesBatch": [
                    "self",
                    "dtype"
                ],
                "_testValueTypeBatch": [
                    "self",
                    "dtype"
                ],
                "_testEmpty": [
                    "self",
                    "dtype"
                ],
                "testHalfBatch": [
                    "self"
                ],
                "testFloatBatch": [
                    "self"
                ],
                "testDoubleBatch": [
                    "self"
                ],
                "testInt32Batch": [
                    "self"
                ],
                "testInt64Batch": [
                    "self"
                ],
                "testComplexBatch": [
                    "self"
                ],
                "testSimpleCases": [
                    "self"
                ],
                "testSingleValueGiven": [
                    "self"
                ],
                "testString": [
                    "self"
                ],
                "testIndicesTypes": [
                    "self"
                ],
                "testPrefixDimOverflow": [
                    "self"
                ],
                "testOnOffMismatchTypeError": [
                    "self"
                ],
                "testDtypeMismatchTypeError": [
                    "self"
                ]
            }
        },
        "tensorflow.python.kernel_tests.softplus_op_test": {
            "SoftplusTest": {
                "_npSoftplus": [
                    "self",
                    "np_features"
                ],
                "_testSoftplus": [
                    "self",
                    "np_features",
                    "use_gpu"
                ],
                "testNumbers": [
                    "self"
                ],
                "testGradient": [
                    "self"
                ]
            }
        },
        "tensorflow.python.kernel_tests.parameterized_truncated_normal_op_test": {
            "calculate_moments": [
                "samples",
                "max_moment"
            ],
            "z_test": [
                "real",
                "expected",
                "i",
                "num_samples"
            ],
            "parameterized_vs_naive": [
                "shape",
                "num_iters",
                "use_gpu"
            ],
            "TruncatedNormalMoments": {
                "__init__": [
                    "self",
                    "mean",
                    "stddev",
                    "minval",
                    "maxval"
                ],
                "__getitem__": [
                    "self",
                    "moment"
                ]
            },
            "ParameterizedTruncatedNormalTest": {
                "validateMoments": [
                    "self",
                    "shape",
                    "mean",
                    "stddev",
                    "minval",
                    "maxval",
                    "seed"
                ],
                "validateKolmogorovSmirnov": [
                    "self",
                    "shape",
                    "mean",
                    "stddev",
                    "minval",
                    "maxval",
                    "seed"
                ],
                "testDefaults": [
                    "self"
                ],
                "testShifted": [
                    "self"
                ],
                "testRightTail": [
                    "self"
                ],
                "testLeftTail": [
                    "self"
                ],
                "testLeftTailTwoSidedBounds": [
                    "self"
                ],
                "testTwoSidedLeftTailShifted": [
                    "self"
                ],
                "testRightTailShifted": [
                    "self"
                ],
                "testSmallStddev": [
                    "self"
                ]
            },
            "ParameterizedTruncatedNormalGpuTest": {},
            "TruncatedNormalBenchmark": {
                "benchmarkParameterizedOpVsNaiveOpCpu": [
                    "self"
                ],
                "benchmarkParameterizedOpVsNaiveOpGpu": [
                    "self"
                ],
                "_benchmarkParameterizedOpVsNaiveOp": [
                    "self",
                    "use_gpu"
                ]
            }
        },
        "tensorflow.python.kernel_tests.sparse_conditional_accumulator_test": {
            "_indexedslice": [
                "x",
                "noshape"
            ],
            "IndexedSlicesConditionalAccumulatorTest": {
                "_assertEqual_indexedslices": [
                    "self",
                    "expected_tensor",
                    "result"
                ],
                "_assertEqual_nparray": [
                    "self",
                    "expected_array",
                    "result",
                    "sess"
                ],
                "testConstructor": [
                    "self"
                ],
                "testConstructorWithShape": [
                    "self"
                ],
                "testAccumulatorSizeEmpty": [
                    "self"
                ],
                "testAccumulatorSetGlobalStep": [
                    "self"
                ],
                "testAccumulatorApplyGradFloat32": [
                    "self"
                ],
                "testDtypes": [
                    "self"
                ],
                "testAccumulatorMultipleAccumulators": [
                    "self"
                ],
                "testAccumulatorTakeGrad": [
                    "self"
                ],
                "testAccumulatorRepeatedTakeGrad": [
                    "self"
                ],
                "testParallelApplyGrad": [
                    "self"
                ],
                "testParallelTakeGrad": [
                    "self"
                ],
                "testAccumulatorApplyAndBlockingTake": [
                    "self"
                ],
                "_blocking_takeg": [
                    "self",
                    "sess",
                    "takeg_op"
                ],
                "testAccumulatorCancel": [
                    "self"
                ],
                "testNonVectorIndices": [
                    "self"
                ],
                "testZeroDimensionValues": [
                    "self"
                ],
                "testWrongNonEmptyInputValues": [
                    "self"
                ],
                "testDynamicNonVectorIndices": [
                    "self"
                ],
                "testDynamicWrongNonEmptyInputValues": [
                    "self"
                ],
                "testEmptyShapeApply": [
                    "self"
                ],
                "testValidateShape": [
                    "self"
                ],
                "testReturnShape": [
                    "self"
                ],
                "testApplyGradtInt32IndicesAndShape": [
                    "self"
                ]
            }
        },
        "tensorflow.python.kernel_tests.in_topk_op_test": {
            "InTopKTest": {
                "_validateInTopK": [
                    "self",
                    "predictions",
                    "target",
                    "k",
                    "expected"
                ],
                "testInTop1": [
                    "self"
                ],
                "testInTop2": [
                    "self"
                ],
                "testInTop2Tie": [
                    "self"
                ],
                "testInTop2_int64Target": [
                    "self"
                ],
                "testInTopNan": [
                    "self"
                ],
                "testBadTarget": [
                    "self"
                ]
            }
        },
        "tensorflow.python.kernel_tests.gather_op_test": {
            "GatherTest": {
                "testScalar1D": [
                    "self"
                ],
                "testScalar2D": [
                    "self"
                ],
                "testSimpleTwoD32": [
                    "self"
                ],
                "testHigherRank": [
                    "self"
                ],
                "testUnknownIndices": [
                    "self"
                ],
                "testBadIndices": [
                    "self"
                ],
                "testEmptySlices": [
                    "self"
                ]
            },
            "GatherGpuTest": {}
        },
        "tensorflow.python.kernel_tests.cwise_ops_test": {
            "_sparsify": [
                "x",
                "thresh",
                "index_dtype"
            ],
            "UnaryOpTest": {
                "_compareCpu": [
                    "self",
                    "x",
                    "np_func",
                    "tf_func"
                ],
                "_check": [
                    "self",
                    "result_tensor",
                    "result_np",
                    "input_sp_t",
                    "tol"
                ],
                "_compareSparseCpu": [
                    "self",
                    "x",
                    "np_func",
                    "tf_func",
                    "tol"
                ],
                "_compareGpu": [
                    "self",
                    "x",
                    "np_func",
                    "tf_func"
                ],
                "_compareSparseGpu": [
                    "self",
                    "x",
                    "np_func",
                    "tf_func",
                    "tol"
                ],
                "_compareBoth": [
                    "self",
                    "x",
                    "np_func",
                    "tf_func"
                ],
                "_compareBothSparse": [
                    "self",
                    "x",
                    "np_func",
                    "tf_func",
                    "tol"
                ],
                "_inv": [
                    "self",
                    "x"
                ],
                "_rsqrt": [
                    "self",
                    "x"
                ],
                "_sigmoid": [
                    "self",
                    "x"
                ],
                "_replace_domain_error_with_inf": [
                    "self",
                    "fn"
                ],
                "testFloatBasic": [
                    "self"
                ],
                "testFloatTanhEdge": [
                    "self"
                ],
                "testFloatEmpty": [
                    "self"
                ],
                "testDoubleBasic": [
                    "self"
                ],
                "testHalfBasic": [
                    "self"
                ],
                "testInt32Basic": [
                    "self"
                ],
                "testInt64Basic": [
                    "self"
                ],
                "testComplex64Basic": [
                    "self"
                ],
                "testComplex128Basic": [
                    "self"
                ],
                "testGradGrad": [
                    "self"
                ]
            },
            "BinaryOpTest": {
                "_compareCpu": [
                    "self",
                    "x",
                    "y",
                    "np_func",
                    "tf_func",
                    "also_compare_variables"
                ],
                "_compareGradientX": [
                    "self",
                    "x",
                    "y",
                    "np_func",
                    "tf_func",
                    "numeric_gradient_type"
                ],
                "_compareGradientY": [
                    "self",
                    "x",
                    "y",
                    "np_func",
                    "tf_func",
                    "numeric_gradient_type"
                ],
                "_compareGpu": [
                    "self",
                    "x",
                    "y",
                    "np_func",
                    "tf_func"
                ],
                "_compareBoth": [
                    "self",
                    "x",
                    "y",
                    "np_func",
                    "tf_func",
                    "also_compare_variables"
                ],
                "testFloatBasic": [
                    "self"
                ],
                "testFloatDifferentShapes": [
                    "self"
                ],
                "testFloatVariableOverload": [
                    "self"
                ],
                "testDoubleBasic": [
                    "self"
                ],
                "testInt8Basic": [
                    "self"
                ],
                "testInt16Basic": [
                    "self"
                ],
                "testUint16Basic": [
                    "self"
                ],
                "testInt32Basic": [
                    "self"
                ],
                "testInt64Basic": [
                    "self"
                ],
                "testComplex64Basic": [
                    "self"
                ],
                "testComplex128Basic": [
                    "self"
                ],
                "testStringComparison": [
                    "self"
                ],
                "testString": [
                    "self"
                ],
                "_compareBCast": [
                    "self",
                    "xs",
                    "ys",
                    "dtype",
                    "np_func",
                    "tf_func"
                ],
                "_testBCastByFunc": [
                    "self",
                    "funcs",
                    "xs",
                    "ys"
                ],
                "_testBCastA": [
                    "self",
                    "xs",
                    "ys"
                ],
                "_testBCastB": [
                    "self",
                    "xs",
                    "ys"
                ],
                "_testBCastC": [
                    "self",
                    "xs",
                    "ys"
                ],
                "_testBCastD": [
                    "self",
                    "xs",
                    "ys"
                ],
                "testBCast_0A": [
                    "self"
                ],
                "testBCast_0B": [
                    "self"
                ],
                "testBCast_0C": [
                    "self"
                ],
                "testBCast_0D": [
                    "self"
                ],
                "testBCast_1A": [
                    "self"
                ],
                "testBCast_1B": [
                    "self"
                ],
                "testBCast_1C": [
                    "self"
                ],
                "testBCast_1D": [
                    "self"
                ],
                "testBCast_2A": [
                    "self"
                ],
                "testBCast_2B": [
                    "self"
                ],
                "testBCast_2C": [
                    "self"
                ],
                "testBCast_2D": [
                    "self"
                ],
                "testBCast_3A": [
                    "self"
                ],
                "testBCast_3B": [
                    "self"
                ],
                "testBCast_3C": [
                    "self"
                ],
                "testBCast_3D": [
                    "self"
                ],
                "testBCast_4A": [
                    "self"
                ],
                "testBCast_4B": [
                    "self"
                ],
                "testBCast_4C": [
                    "self"
                ],
                "testBCast_4D": [
                    "self"
                ],
                "testBCast_5A": [
                    "self"
                ],
                "testBCast_5B": [
                    "self"
                ],
                "testBCast_5C": [
                    "self"
                ],
                "testBCast_5D": [
                    "self"
                ],
                "testBCast_6A": [
                    "self"
                ],
                "testBCast_6B": [
                    "self"
                ],
                "testBCast_6C": [
                    "self"
                ],
                "testBCast_6D": [
                    "self"
                ],
                "testBCast_7A": [
                    "self"
                ],
                "testBCast_7B": [
                    "self"
                ],
                "testBCast_7C": [
                    "self"
                ],
                "testBCast_7D": [
                    "self"
                ],
                "testBCast_8A": [
                    "self"
                ],
                "testBCast_8B": [
                    "self"
                ],
                "testBCast_8C": [
                    "self"
                ],
                "testBCast_8D": [
                    "self"
                ],
                "testBCast_9A": [
                    "self"
                ],
                "testBCast_9B": [
                    "self"
                ],
                "testBCast_9C": [
                    "self"
                ],
                "testBCast_9D": [
                    "self"
                ],
                "testBCast_10A": [
                    "self"
                ],
                "testBCast_10B": [
                    "self"
                ],
                "testBCast_10C": [
                    "self"
                ],
                "testBCast_10D": [
                    "self"
                ],
                "testBCast_11A": [
                    "self"
                ],
                "testBCast_11B": [
                    "self"
                ],
                "testBCast_11C": [
                    "self"
                ],
                "testBCast_11D": [
                    "self"
                ],
                "testBCast_12A": [
                    "self"
                ],
                "testBCast_12B": [
                    "self"
                ],
                "testBCast_12C": [
                    "self"
                ],
                "testBCast_12D": [
                    "self"
                ],
                "testBCast_13A": [
                    "self"
                ],
                "testBCast_13B": [
                    "self"
                ],
                "testBCast_13C": [
                    "self"
                ],
                "testBCast_13D": [
                    "self"
                ],
                "testBCast_14A": [
                    "self"
                ],
                "testBCast_14B": [
                    "self"
                ],
                "testBCast_14C": [
                    "self"
                ],
                "testBCast_14D": [
                    "self"
                ],
                "testBCast_15A": [
                    "self"
                ],
                "testBCast_15B": [
                    "self"
                ],
                "testBCast_15C": [
                    "self"
                ],
                "testBCast_15D": [
                    "self"
                ],
                "testMismatchedDimensions": [
                    "self"
                ],
                "testZeroPowGrad": [
                    "self"
                ],
                "testComplexPowGrad": [
                    "self"
                ]
            },
            "ComparisonOpTest": {
                "_compare": [
                    "self",
                    "func",
                    "x",
                    "y",
                    "dtype"
                ],
                "testScalarCompareScalar": [
                    "self"
                ],
                "_compareCpu": [
                    "self",
                    "x",
                    "y",
                    "np_func",
                    "tf_func"
                ],
                "_compareGpu": [
                    "self",
                    "x",
                    "y",
                    "np_func",
                    "tf_func"
                ],
                "_compareBoth": [
                    "self",
                    "x",
                    "y",
                    "np_func",
                    "tf_func"
                ],
                "testTensorCompareTensor": [
                    "self"
                ],
                "_compareBCast": [
                    "self",
                    "xs",
                    "ys",
                    "dtype",
                    "np_func",
                    "tf_func"
                ],
                "_testBCastByFunc": [
                    "self",
                    "np_func",
                    "tf_func"
                ],
                "testBCastLess": [
                    "self"
                ],
                "testBCastLessEqual": [
                    "self"
                ],
                "testBCastGreater": [
                    "self"
                ],
                "testBCastGreaterEqual": [
                    "self"
                ],
                "testBCastEqual": [
                    "self"
                ],
                "testBCastNotEqual": [
                    "self"
                ],
                "testShapeMismatch": [
                    "self"
                ]
            },
            "LogicalOpTest": {
                "_compareBinary": [
                    "self",
                    "x",
                    "y",
                    "np_func",
                    "tf_func",
                    "use_gpu"
                ],
                "_not": [
                    "self",
                    "x",
                    "use_gpu"
                ],
                "testScalar": [
                    "self"
                ],
                "testTensor": [
                    "self"
                ],
                "testBCast": [
                    "self"
                ],
                "testShapeMismatch": [
                    "self"
                ],
                "testUsingAsPythonValueFails": [
                    "self"
                ]
            },
            "SelectOpTest": {
                "_compare": [
                    "self",
                    "c",
                    "x",
                    "y",
                    "use_gpu"
                ],
                "_compareGradientX": [
                    "self",
                    "c",
                    "x",
                    "y",
                    "numeric_gradient_type"
                ],
                "_compareGradientY": [
                    "self",
                    "c",
                    "x",
                    "y",
                    "numeric_gradient_type"
                ],
                "testScalar": [
                    "self"
                ],
                "testBasic": [
                    "self"
                ],
                "testGradients": [
                    "self"
                ],
                "testShapeMismatch": [
                    "self"
                ],
                "testEmptyTensor": [
                    "self"
                ],
                "testNan": [
                    "self"
                ]
            },
            "BatchSelectOpTest": {
                "_compare": [
                    "self",
                    "c",
                    "x",
                    "y",
                    "use_gpu"
                ],
                "_compareGradientX": [
                    "self",
                    "c",
                    "x",
                    "y",
                    "numeric_gradient_type"
                ],
                "_compareGradientY": [
                    "self",
                    "c",
                    "x",
                    "y",
                    "numeric_gradient_type"
                ],
                "testBasic": [
                    "self"
                ],
                "testGradients": [
                    "self"
                ],
                "testShapeMismatch": [
                    "self"
                ]
            },
            "MinMaxOpTest": {
                "_compare": [
                    "self",
                    "x",
                    "y",
                    "use_gpu"
                ],
                "testBasic": [
                    "self"
                ],
                "testDifferentShapes": [
                    "self"
                ],
                "testScalar": [
                    "self"
                ],
                "_compareGradientX": [
                    "self",
                    "func",
                    "x",
                    "y"
                ],
                "_compareGradientY": [
                    "self",
                    "func",
                    "x",
                    "y"
                ],
                "testGradients": [
                    "self"
                ]
            },
            "MathOpsOverloadTest": {
                "_computeTensorAndLiteral": [
                    "self",
                    "x",
                    "y",
                    "dtype",
                    "func"
                ],
                "_computeLiteralAndTensor": [
                    "self",
                    "x",
                    "y",
                    "dtype",
                    "func"
                ],
                "_compareBinary": [
                    "self",
                    "x",
                    "y",
                    "dtype",
                    "np_func",
                    "tf_func"
                ],
                "_compareUnary": [
                    "self",
                    "x",
                    "dtype",
                    "np_func",
                    "tf_func"
                ],
                "testOverload": [
                    "self"
                ],
                "testOverloadComparisons": [
                    "self"
                ]
            },
            "IsFiniteInfNanTest": {
                "_compare": [
                    "self",
                    "x",
                    "use_gpu"
                ],
                "_testDtype": [
                    "self",
                    "dtype"
                ],
                "testHalf": [
                    "self"
                ],
                "testFloat": [
                    "self"
                ],
                "testDouble": [
                    "self"
                ],
                "testSqrt": [
                    "self"
                ]
            },
            "RoundingTest": {
                "_compare_values": [
                    "self",
                    "x",
                    "y"
                ],
                "_compare": [
                    "self",
                    "x"
                ],
                "_testDtype": [
                    "self",
                    "dtype"
                ],
                "testTypes": [
                    "self"
                ]
            },
            "ComplexMakeRealImagTest": {
                "_compareMake": [
                    "self",
                    "real",
                    "imag",
                    "use_gpu"
                ],
                "testMake": [
                    "self"
                ],
                "_compareRealImag": [
                    "self",
                    "cplx",
                    "use_gpu"
                ],
                "testRealImag64": [
                    "self"
                ],
                "testRealImag128": [
                    "self"
                ],
                "testRealReal": [
                    "self"
                ],
                "_compareConj": [
                    "self",
                    "cplx",
                    "use_gpu"
                ],
                "testConj64": [
                    "self"
                ],
                "testConj128": [
                    "self"
                ],
                "testConjReal": [
                    "self"
                ],
                "testConjString": [
                    "self"
                ],
                "_compareGradient": [
                    "self",
                    "x"
                ],
                "_compareBroadcastGradient": [
                    "self",
                    "x"
                ],
                "testGradient": [
                    "self"
                ],
                "_compareMulGradient": [
                    "self",
                    "data"
                ],
                "testMulGradient": [
                    "self"
                ]
            },
            "AccumulateTest": {
                "testSimple": [
                    "self"
                ],
                "testZeroArgs": [
                    "self"
                ]
            }
        },
        "tensorflow.python.kernel_tests.fractional_avg_pool_op_test": {
            "FractionalAvgTest": {
                "_AvgPoolAlongRows": [
                    "self",
                    "input_matrix",
                    "row_seq",
                    "overlapping"
                ],
                "_AvgPoolAlongCols": [
                    "self",
                    "input_matrix",
                    "col_seq",
                    "overlapping"
                ],
                "_GetExpectedFractionalAvgPoolResult": [
                    "self",
                    "input_tensor",
                    "row_seq",
                    "col_seq",
                    "overlapping"
                ],
                "_ValidateFractionalAvgPoolResult": [
                    "self",
                    "input_tensor",
                    "pooling_ratio",
                    "pseudo_random",
                    "overlapping"
                ],
                "_testVisually": [
                    "self"
                ],
                "testAllInputOptions": [
                    "self"
                ],
                "testIntegerTensorInput": [
                    "self"
                ],
                "testDifferentTensorShapes": [
                    "self"
                ],
                "testLargePoolingRatio": [
                    "self"
                ],
                "testDivisiblePoolingRatio": [
                    "self"
                ]
            },
            "FractionalAvgPoolGradTest": {
                "_GenerateRandomInputTensor": [
                    "self",
                    "shape"
                ],
                "testDirectNotUseOverlapping": [
                    "self"
                ],
                "testDirectUseOverlapping": [
                    "self"
                ],
                "testAllInputOptionsThroughGradientError": [
                    "self"
                ],
                "testDifferentTensorShapesThroughGradientError": [
                    "self"
                ],
                "testLargePoolingRatioThroughGradientError": [
                    "self"
                ]
            }
        },
        "tensorflow.python.kernel_tests.random_shuffle_queue_test": {
            "RandomShuffleQueueTest": {
                "setUp": [
                    "self"
                ],
                "tearDown": [
                    "self"
                ],
                "testEnqueue": [
                    "self"
                ],
                "testEnqueueWithShape": [
                    "self"
                ],
                "testEnqueueManyWithShape": [
                    "self"
                ],
                "testScalarShapes": [
                    "self"
                ],
                "testParallelEnqueue": [
                    "self"
                ],
                "testParallelDequeue": [
                    "self"
                ],
                "testDequeue": [
                    "self"
                ],
                "testEnqueueAndBlockingDequeue": [
                    "self"
                ],
                "testMultiEnqueueAndDequeue": [
                    "self"
                ],
                "testQueueSizeEmpty": [
                    "self"
                ],
                "testQueueSizeAfterEnqueueAndDequeue": [
                    "self"
                ],
                "testEnqueueMany": [
                    "self"
                ],
                "testEmptyEnqueueMany": [
                    "self"
                ],
                "testEmptyDequeueMany": [
                    "self"
                ],
                "testEmptyDequeueUpTo": [
                    "self"
                ],
                "testEmptyDequeueManyWithNoShape": [
                    "self"
                ],
                "testEmptyDequeueUpToWithNoShape": [
                    "self"
                ],
                "testMultiEnqueueMany": [
                    "self"
                ],
                "testDequeueMany": [
                    "self"
                ],
                "testDequeueUpToNoBlocking": [
                    "self"
                ],
                "testMultiDequeueMany": [
                    "self"
                ],
                "testMultiDequeueUpToNoBlocking": [
                    "self"
                ],
                "testHighDimension": [
                    "self"
                ],
                "testParallelEnqueueMany": [
                    "self"
                ],
                "testParallelDequeueMany": [
                    "self"
                ],
                "testParallelDequeueUpTo": [
                    "self"
                ],
                "testParallelDequeueUpToRandomPartition": [
                    "self"
                ],
                "testBlockingDequeueMany": [
                    "self"
                ],
                "testBlockingDequeueUpTo": [
                    "self"
                ],
                "testDequeueManyWithTensorParameter": [
                    "self"
                ],
                "testDequeueUpToWithTensorParameter": [
                    "self"
                ],
                "testDequeueFromClosedQueue": [
                    "self"
                ],
                "testBlockingDequeueFromClosedQueue": [
                    "self"
                ],
                "testBlockingDequeueFromClosedEmptyQueue": [
                    "self"
                ],
                "testBlockingDequeueManyFromClosedQueue": [
                    "self"
                ],
                "testBlockingDequeueUpToFromClosedQueueReturnsRemainder": [
                    "self"
                ],
                "testBlockingDequeueUpToSmallerThanMinAfterDequeue": [
                    "self"
                ],
                "testBlockingDequeueManyFromClosedQueueWithElementsRemaining": [
                    "self"
                ],
                "testBlockingDequeueManyFromClosedEmptyQueue": [
                    "self"
                ],
                "testBlockingDequeueUpToFromClosedEmptyQueue": [
                    "self"
                ],
                "testEnqueueToClosedQueue": [
                    "self"
                ],
                "testEnqueueManyToClosedQueue": [
                    "self"
                ],
                "testBlockingEnqueueToFullQueue": [
                    "self"
                ],
                "testBlockingEnqueueManyToFullQueue": [
                    "self"
                ],
                "testBlockingEnqueueToClosedQueue": [
                    "self"
                ],
                "testBlockingEnqueueManyToClosedQueue": [
                    "self"
                ],
                "testSharedQueueSameSession": [
                    "self"
                ],
                "testSharedQueueSameSessionGraphSeedNone": [
                    "self"
                ],
                "testIncompatibleSharedQueueErrors": [
                    "self"
                ],
                "testSelectQueue": [
                    "self"
                ],
                "testSelectQueueOutOfRange": [
                    "self"
                ],
                "_blockingDequeue": [
                    "self",
                    "sess",
                    "dequeue_op"
                ],
                "_blockingDequeueMany": [
                    "self",
                    "sess",
                    "dequeue_many_op"
                ],
                "_blockingDequeueUpTo": [
                    "self",
                    "sess",
                    "dequeue_up_to_op"
                ],
                "_blockingEnqueue": [
                    "self",
                    "sess",
                    "enqueue_op"
                ],
                "_blockingEnqueueMany": [
                    "self",
                    "sess",
                    "enqueue_many_op"
                ],
                "testResetOfBlockingOperation": [
                    "self"
                ],
                "testDequeueManyInDifferentOrders": [
                    "self"
                ],
                "testDequeueUpToInDifferentOrders": [
                    "self"
                ],
                "testDequeueInDifferentOrders": [
                    "self"
                ],
                "testBigEnqueueMany": [
                    "self"
                ],
                "testBigDequeueMany": [
                    "self"
                ]
            }
        },
        "tensorflow.python.kernel_tests.partitioned_variables_test": {
            "_IotaInitializer": [
                "shape",
                "dtype",
                "partition_info"
            ],
            "PartitionerCreatorsTest": {
                "testFixedSizePartitioner": [
                    "self"
                ],
                "_testVariableAxisSizePartitioner": [
                    "self",
                    "name",
                    "axis",
                    "max_shard_bytes",
                    "expected_axis_shards",
                    "expected_partitions",
                    "max_shards"
                ],
                "testVariableAxisSizePartitioner": [
                    "self"
                ],
                "_testMinMaxVariablePartitioner": [
                    "self",
                    "max_partitions",
                    "axis",
                    "min_slice_size",
                    "var_name",
                    "var_shape",
                    "expected_axis_shards",
                    "expected_partitions"
                ],
                "testMinMaxVariablePartitioner": [
                    "self"
                ]
            },
            "PartitionedVariablesTestCase": {
                "_TestSaveSpec": [
                    "self",
                    "slices",
                    "expected_specs"
                ],
                "testVecConstantInit": [
                    "self"
                ],
                "testConstantInit": [
                    "self"
                ],
                "testName": [
                    "self"
                ],
                "testRandomInitValue": [
                    "self"
                ],
                "testRandomInitUnevenPartitions": [
                    "self"
                ],
                "testDegenerate": [
                    "self"
                ],
                "testSliceSizeOne": [
                    "self"
                ],
                "testIotaInitializer": [
                    "self"
                ],
                "testRandomInitializer": [
                    "self"
                ],
                "testSomeErrors": [
                    "self"
                ],
                "testControlDepsNone": [
                    "self"
                ],
                "testConcat": [
                    "self"
                ]
            }
        },
        "tensorflow.python.kernel_tests.cholesky_op_test": {
            "CholeskyOpTest": {
                "_verifyCholeskyBase": [
                    "self",
                    "sess",
                    "x",
                    "chol",
                    "verification"
                ],
                "_verifyCholesky": [
                    "self",
                    "x"
                ],
                "testBasic": [
                    "self"
                ],
                "testBatch": [
                    "self"
                ],
                "testNonSquareMatrix": [
                    "self"
                ],
                "testWrongDimensions": [
                    "self"
                ],
                "testNotInvertible": [
                    "self"
                ],
                "testEmpty": [
                    "self"
                ]
            },
            "CholeskyGradTest": {
                "getShapes": [
                    "self",
                    "shapeList"
                ],
                "testSmallMatrices": [
                    "self"
                ],
                "testOneBlockMatrices": [
                    "self"
                ],
                "testTwoBlockMatrixFloat": [
                    "self"
                ],
                "testTwoBlockMatrixDouble": [
                    "self"
                ],
                "runFiniteDifferences": [
                    "self",
                    "shapes",
                    "dtypes",
                    "scalarTest"
                ]
            }
        },
        "tensorflow.python.kernel_tests.unpack_op_test": {
            "np_split_squeeze": [
                "array",
                "axis"
            ],
            "UnpackOpTest": {
                "testSimple": [
                    "self"
                ],
                "testGradientsAxis0": [
                    "self"
                ],
                "testGradientsAxis1": [
                    "self"
                ],
                "testInferNum": [
                    "self"
                ],
                "testCannotInferNumFromUnknownShape": [
                    "self"
                ],
                "testUnknownShapeOkWithNum": [
                    "self"
                ],
                "testCannotInferNumFromNoneShape": [
                    "self"
                ],
                "testAgainstNumpy": [
                    "self"
                ],
                "testAxis0Default": [
                    "self"
                ],
                "testAxisOutOfRange": [
                    "self"
                ],
                "testAxisOutOfNegativeRange": [
                    "self"
                ],
                "testZeroLengthDim": [
                    "self"
                ]
            }
        },
        "tensorflow.python.kernel_tests.init_ops_test": {
            "identicaltest": [
                "tc",
                "init1",
                "init2",
                "shape"
            ],
            "duplicated_initializer": [
                "tc",
                "init",
                "graph_seed",
                "shape"
            ],
            "_init_sampler": [
                "tc",
                "init",
                "num"
            ],
            "ConstantInitializersTest": {
                "testZerosInitializer": [
                    "self"
                ],
                "testOnesInitializer": [
                    "self"
                ],
                "testConstantZeroInitializer": [
                    "self"
                ],
                "testConstantOneInitializer": [
                    "self"
                ],
                "testConstantIntInitializer": [
                    "self"
                ],
                "_testNDimConstantInitializer": [
                    "self",
                    "name",
                    "value",
                    "shape",
                    "expected"
                ],
                "testNDimConstantInitializer": [
                    "self"
                ],
                "_testNDimConstantInitializerLessValues": [
                    "self",
                    "name",
                    "value",
                    "shape",
                    "expected"
                ],
                "testNDimConstantInitializerLessValues": [
                    "self"
                ],
                "_testNDimConstantInitializerMoreValues": [
                    "self",
                    "value",
                    "shape"
                ],
                "testNDimConstantInitializerMoreValues": [
                    "self"
                ]
            },
            "RandomNormalInitializationTest": {
                "testInitializerIdentical": [
                    "self"
                ],
                "testInitializerDifferent": [
                    "self"
                ],
                "testDuplicatedInitializer": [
                    "self"
                ],
                "testInvalidDataType": [
                    "self"
                ]
            },
            "TruncatedNormalInitializationTest": {
                "testInitializerIdentical": [
                    "self"
                ],
                "testInitializerDifferent": [
                    "self"
                ],
                "testDuplicatedInitializer": [
                    "self"
                ],
                "testInvalidDataType": [
                    "self"
                ]
            },
            "RandomUniformInitializationTest": {
                "testInitializerIdentical": [
                    "self"
                ],
                "testInitializerDifferent": [
                    "self"
                ],
                "testDuplicatedInitializer": [
                    "self"
                ]
            },
            "UniformUnitScalingInitializationTest": {
                "testInitializerIdentical": [
                    "self"
                ],
                "testInitializerDifferent": [
                    "self"
                ],
                "testZeroSize": [
                    "self"
                ],
                "testDuplicatedInitializer": [
                    "self"
                ],
                "testInvalidDataType": [
                    "self"
                ]
            },
            "RandomWalkShapeTest": {
                "testRandomWalk": [
                    "self"
                ]
            },
            "RangeTest": {
                "_Range": [
                    "self",
                    "start",
                    "limit",
                    "delta"
                ],
                "testBasic": [
                    "self"
                ],
                "testLimitOnly": [
                    "self"
                ],
                "testEmpty": [
                    "self"
                ],
                "testNonInteger": [
                    "self"
                ],
                "testNegativeDelta": [
                    "self"
                ],
                "testDType": [
                    "self"
                ]
            },
            "LinSpaceTest": {
                "_gpu_modes": [
                    "self"
                ],
                "_LinSpace": [
                    "self",
                    "start",
                    "stop",
                    "num"
                ],
                "testPositive": [
                    "self"
                ],
                "testNegative": [
                    "self"
                ],
                "testNegativeToPositive": [
                    "self"
                ],
                "testPoint": [
                    "self"
                ]
            },
            "DeviceTest": {
                "testNoDevice": [
                    "self"
                ],
                "testDevice": [
                    "self"
                ]
            },
            "OrthogonalInitializerTest": {
                "testInitializerIdentical": [
                    "self"
                ],
                "testInitializerDifferent": [
                    "self"
                ],
                "testDuplicatedInitializer": [
                    "self"
                ],
                "testInvalidDataType": [
                    "self"
                ],
                "testInvalidShape": [
                    "self"
                ],
                "testGain": [
                    "self"
                ],
                "testShapesValues": [
                    "self"
                ]
            }
        },
        "tensorflow.python.kernel_tests.softmax_op_test": {
            "SoftmaxTest": {
                "_npSoftmax": [
                    "self",
                    "features",
                    "dim",
                    "log"
                ],
                "_testSoftmax": [
                    "self",
                    "np_features",
                    "dim",
                    "log",
                    "use_gpu"
                ],
                "_testAll": [
                    "self",
                    "features"
                ],
                "testNpSoftmax": [
                    "self"
                ],
                "_testOverflow": [
                    "self",
                    "use_gpu"
                ],
                "testFloat": [
                    "self"
                ],
                "testHalf": [
                    "self"
                ],
                "testDouble": [
                    "self"
                ],
                "test1DTesnorAsInput": [
                    "self"
                ],
                "test3DTensorAsInput": [
                    "self"
                ],
                "testAlongFirstDimension": [
                    "self"
                ],
                "testAlongSecondDimension": [
                    "self"
                ],
                "testShapeInference": [
                    "self"
                ],
                "testEmptyInput": [
                    "self"
                ],
                "testDimTooLarge": [
                    "self"
                ],
                "testLargeDims": [
                    "self"
                ]
            }
        },
        "tensorflow.python.kernel_tests.py_func_test": {
            "PyOpTest": {
                "testBasic": [
                    "self"
                ],
                "testStrings": [
                    "self"
                ],
                "testStringPadding": [
                    "self"
                ],
                "testLarge": [
                    "self"
                ],
                "testNoInput": [
                    "self"
                ],
                "testCleanup": [
                    "self"
                ],
                "testBadNumpyReturnType": [
                    "self"
                ],
                "testBadReturnType": [
                    "self"
                ],
                "testStateful": [
                    "self"
                ],
                "testStateless": [
                    "self"
                ],
                "testGradientFunction": [
                    "self"
                ],
                "testCOrder": [
                    "self"
                ],
                "testParallel": [
                    "self"
                ],
                "testNoReturnValueStateful": [
                    "self"
                ],
                "testNoReturnValueStateless": [
                    "self"
                ]
            }
        },
        "tensorflow.python.kernel_tests.reduce_join_op_test": {
            "_input_array": [
                "num_dims"
            ],
            "_joined_array": [
                "num_dims",
                "reduce_dim"
            ],
            "UnicodeTestCase": {
                "assertAllEqualUnicode": [
                    "self",
                    "truth",
                    "actual"
                ]
            },
            "ReduceJoinTestHelperTest": {
                "testInputArray": [
                    "self"
                ],
                "testJoinedArray": [
                    "self"
                ]
            },
            "ReduceJoinTest": {
                "_testReduceJoin": [
                    "self",
                    "input_array",
                    "truth",
                    "truth_shape",
                    "reduction_indices",
                    "keep_dims",
                    "separator"
                ],
                "_testMultipleReduceJoin": [
                    "self",
                    "input_array",
                    "reduction_indices",
                    "separator"
                ],
                "testRankOne": [
                    "self"
                ],
                "testRankTwo": [
                    "self"
                ],
                "testRankFive": [
                    "self"
                ],
                "testNegative": [
                    "self"
                ],
                "testSingletonDimension": [
                    "self"
                ],
                "testSeparator": [
                    "self"
                ],
                "testUnknownShape": [
                    "self"
                ],
                "testUnknownIndices": [
                    "self"
                ],
                "testKeepDims": [
                    "self"
                ],
                "testMultiIndex": [
                    "self"
                ],
                "testInvalidReductionIndices": [
                    "self"
                ],
                "testZeroDims": [
                    "self"
                ],
                "testInvalidArgsUnknownShape": [
                    "self"
                ],
                "testInvalidArgsUnknownIndices": [
                    "self"
                ]
            }
        },
        "tensorflow.python.kernel_tests.variable_scope_test": {
            "axis0_into1_partitioner": [
                "shape"
            ],
            "axis0_into2_partitioner": [
                "shape"
            ],
            "axis0_into3_partitioner": [
                "shape"
            ],
            "VariableScopeTest": {
                "testGetVar": [
                    "self"
                ],
                "testNameExists": [
                    "self"
                ],
                "testNamelessStore": [
                    "self"
                ],
                "testVarScopeInitializer": [
                    "self"
                ],
                "testVarScopeDType": [
                    "self"
                ],
                "testInitFromNonTensorValue": [
                    "self"
                ],
                "testVarScopeCachingDevice": [
                    "self"
                ],
                "testVarScopeRegularizer": [
                    "self"
                ],
                "testInitializeFromValue": [
                    "self"
                ],
                "testControlDeps": [
                    "self"
                ],
                "testControlFlow": [
                    "self"
                ],
                "testGetVariableScope": [
                    "self"
                ],
                "testVarScope": [
                    "self"
                ],
                "testVarScopeNameScope": [
                    "self"
                ],
                "testVarScopeOriginalNameScope": [
                    "self"
                ],
                "testVarScopeObjectReuse": [
                    "self"
                ],
                "testVarOpScope": [
                    "self"
                ],
                "testVarOpScopeUniqueNamesInterleavedSubstringScopes": [
                    "self"
                ],
                "testVarOpScopeReuse": [
                    "self"
                ],
                "testVarScopeGetVar": [
                    "self"
                ],
                "testVarScopeOuterScope": [
                    "self"
                ],
                "testVarScopeNestedOuterScope": [
                    "self"
                ],
                "testVarOpScopeReuseParam": [
                    "self"
                ],
                "testVarOpScopeReuseError": [
                    "self"
                ],
                "testVarOpScopeOuterScope": [
                    "self"
                ],
                "testVarOpScopeNestedOuterScope": [
                    "self"
                ],
                "testGetLocalVar": [
                    "self"
                ],
                "testGetVarWithDevice": [
                    "self"
                ]
            },
            "VariableScopeWithPartitioningTest": {
                "testResultNameMatchesRequested": [
                    "self"
                ],
                "testBreaksIfPartitioningChanges": [
                    "self"
                ],
                "testReturnsExistingConcatenatedValueIfReuse": [
                    "self"
                ],
                "testAllowsReuseWithoutPartitioner": [
                    "self"
                ],
                "testPropagatePartitionerOnReopening": [
                    "self"
                ],
                "testPartitionConcatenatesAlongCorrectAxis": [
                    "self"
                ]
            },
            "VariableScopeWithCustomGetterTest": {
                "testNonCallableGetterFails": [
                    "self"
                ],
                "testNoSideEffectsWithIdentityCustomGetter": [
                    "self"
                ],
                "testGetterThatCreatesTwoVariablesAndSumsThem": [
                    "self"
                ]
            },
            "PartitionInfoTest": {
                "testConstructorChecks": [
                    "self"
                ],
                "testSingleOffset": [
                    "self"
                ],
                "testSingleSliceDim": [
                    "self"
                ]
            }
        },
        "tensorflow.python.kernel_tests.diag_op_test": {
            "MatrixDiagTest": {
                "testVector": [
                    "self"
                ],
                "testBatchVector": [
                    "self"
                ],
                "testInvalidShape": [
                    "self"
                ],
                "testInvalidShapeAtEval": [
                    "self"
                ],
                "testGrad": [
                    "self"
                ]
            },
            "MatrixDiagGpuTest": {},
            "MatrixSetDiagTest": {
                "testSquare": [
                    "self"
                ],
                "testRectangular": [
                    "self"
                ],
                "testSquareBatch": [
                    "self"
                ],
                "testRectangularBatch": [
                    "self"
                ],
                "testInvalidShape": [
                    "self"
                ],
                "testInvalidShapeAtEval": [
                    "self"
                ],
                "testGrad": [
                    "self"
                ],
                "testGradWithNoShapeInformation": [
                    "self"
                ]
            },
            "MatrixSetDiagGpuTest": {},
            "MatrixDiagPartTest": {
                "testSquare": [
                    "self"
                ],
                "testRectangular": [
                    "self"
                ],
                "testSquareBatch": [
                    "self"
                ],
                "testRectangularBatch": [
                    "self"
                ],
                "testInvalidShape": [
                    "self"
                ],
                "testInvalidShapeAtEval": [
                    "self"
                ],
                "testGrad": [
                    "self"
                ]
            },
            "MatrixDiagPartGpuTest": {},
            "DiagTest": {
                "diagOp": [
                    "self",
                    "diag",
                    "dtype",
                    "expected_ans",
                    "use_gpu"
                ],
                "testEmptyTensor": [
                    "self"
                ],
                "testRankOneIntTensor": [
                    "self"
                ],
                "testRankOneFloatTensor": [
                    "self"
                ],
                "testRankOneComplexTensor": [
                    "self"
                ],
                "testRankTwoIntTensor": [
                    "self"
                ],
                "testRankTwoFloatTensor": [
                    "self"
                ],
                "testRankTwoComplexTensor": [
                    "self"
                ],
                "testRankThreeFloatTensor": [
                    "self"
                ],
                "testRankThreeComplexTensor": [
                    "self"
                ]
            },
            "DiagPartOpTest": {
                "setUp": [
                    "self"
                ],
                "diagPartOp": [
                    "self",
                    "tensor",
                    "dtype",
                    "expected_ans",
                    "use_gpu"
                ],
                "testRankTwoFloatTensor": [
                    "self"
                ],
                "testRankFourFloatTensorUnknownShape": [
                    "self"
                ],
                "testRankFourFloatTensor": [
                    "self"
                ],
                "testRankSixFloatTensor": [
                    "self"
                ],
                "testOddRank": [
                    "self"
                ],
                "testUnevenDimensions": [
                    "self"
                ]
            },
            "DiagGradOpTest": {
                "testDiagGrad": [
                    "self"
                ]
            },
            "DiagGradPartOpTest": {
                "testDiagPartGrad": [
                    "self"
                ]
            }
        },
        "tensorflow.python.kernel_tests.determinant_op_test": {
            "DeterminantOpTest": {
                "_compareDeterminantBase": [
                    "self",
                    "matrix_x",
                    "tf_ans"
                ],
                "_compareDeterminant": [
                    "self",
                    "matrix_x"
                ],
                "testBasic": [
                    "self"
                ],
                "testBasicDouble": [
                    "self"
                ],
                "testOverflow": [
                    "self"
                ],
                "testNonSquareMatrix": [
                    "self"
                ],
                "testWrongDimensions": [
                    "self"
                ],
                "testEmpty": [
                    "self"
                ]
            }
        },
        "tensorflow.python.kernel_tests.logging_ops_test": {
            "LoggingOpsTest": {
                "testAssertDivideByZero": [
                    "self"
                ]
            },
            "PrintGradientTest": {
                "testPrintShape": [
                    "self"
                ],
                "testPrintGradient": [
                    "self"
                ]
            }
        },
        "tensorflow.python.kernel_tests.conv_ops_test": {
            "GetShrunkInceptionShapes": [
                "shrink"
            ],
            "NHWCToNCHW": [
                "input_tensor"
            ],
            "NCHWToNHWC": [
                "input_tensor"
            ],
            "GetTestConfigs": [],
            "GetInceptionFwdTest": [
                "input_size",
                "filter_size",
                "stride",
                "padding"
            ],
            "GetInceptionBackInputTest": [
                "input_size",
                "filter_size",
                "output_size",
                "stride",
                "padding"
            ],
            "GetInceptionBackFilterTest": [
                "input_size",
                "filter_size",
                "output_size",
                "strides",
                "padding"
            ],
            "Conv2DTest": {
                "_DtypesToTest": [
                    "self",
                    "use_gpu"
                ],
                "_SetupValuesForDevice": [
                    "self",
                    "tensor_in_sizes",
                    "filter_in_sizes",
                    "strides",
                    "padding",
                    "data_format",
                    "dtype",
                    "use_gpu"
                ],
                "_CompareFwdValues": [
                    "self",
                    "tensor_in_sizes",
                    "filter_in_sizes",
                    "conv_strides",
                    "padding"
                ],
                "_VerifyValues": [
                    "self",
                    "tensor_in_sizes",
                    "filter_in_sizes",
                    "strides",
                    "padding",
                    "expected"
                ],
                "testConv2D1x1Filter": [
                    "self"
                ],
                "testConv2DEmpty": [
                    "self"
                ],
                "testConv2D2x2Filter": [
                    "self"
                ],
                "testConv2D1x2Filter": [
                    "self"
                ],
                "testConv2D2x2FilterStride2": [
                    "self"
                ],
                "testConv2D2x2FilterStride2Same": [
                    "self"
                ],
                "testConv2D2x2FilterStride1x2": [
                    "self"
                ],
                "testConv2DKernelSmallerThanStrideValid": [
                    "self"
                ],
                "testConv2DKernelSmallerThanStrideSame": [
                    "self"
                ],
                "_RunAndVerifyBackpropInput": [
                    "self",
                    "input_sizes",
                    "filter_sizes",
                    "output_sizes",
                    "strides",
                    "padding",
                    "expected",
                    "data_format",
                    "use_gpu",
                    "err"
                ],
                "_CompareBackpropInput": [
                    "self",
                    "input_sizes",
                    "filter_sizes",
                    "output_sizes",
                    "conv_strides",
                    "padding"
                ],
                "testConv2D2x2Depth1ValidBackpropInput": [
                    "self"
                ],
                "testConv2D2x2Depth3ValidBackpropInput": [
                    "self"
                ],
                "testConv2D2x2Depth3ValidBackpropInputStride1x2": [
                    "self"
                ],
                "testConv2DStrideTwoFilterOneSameBackpropInput": [
                    "self"
                ],
                "_RunAndVerifyBackpropFilter": [
                    "self",
                    "input_sizes",
                    "filter_sizes",
                    "output_sizes",
                    "strides",
                    "padding",
                    "expected",
                    "data_format",
                    "use_gpu"
                ],
                "_CompareBackFilter": [
                    "self",
                    "input_sizes",
                    "filter_sizes",
                    "output_sizes",
                    "conv_strides",
                    "padding"
                ],
                "testConv2D2x2Depth1ValidBackpropFilter": [
                    "self"
                ],
                "testConv2D2x2Depth3ValidBackpropFilter": [
                    "self"
                ],
                "testConv2D2x2Depth3ValidBackpropFilterStride1x2": [
                    "self"
                ],
                "testConv2DStrideTwoFilterOneSameBackpropFilter": [
                    "self"
                ],
                "ConstructAndTestGradient": [
                    "self",
                    "batch",
                    "input_rows",
                    "input_cols",
                    "filter_rows",
                    "filter_cols",
                    "in_depth",
                    "out_depth",
                    "stride_rows",
                    "stride_cols",
                    "padding",
                    "test_input",
                    "data_format",
                    "use_gpu"
                ],
                "testInputGradientValidPaddingStrideOne": [
                    "self"
                ],
                "testFilterGradientValidPaddingStrideOne": [
                    "self"
                ],
                "testInputGradientValidPaddingStrideTwo": [
                    "self"
                ],
                "testFilterGradientValidPaddingStrideTwo": [
                    "self"
                ],
                "testInputGradientValidPaddingStrideThree": [
                    "self"
                ],
                "testFilterGradientValidPaddingStrideThree": [
                    "self"
                ],
                "testInputGradientSamePaddingStrideOne": [
                    "self"
                ],
                "testFilterGradientSamePaddingStrideOne": [
                    "self"
                ],
                "testInputGradientSamePaddingStrideTwo": [
                    "self"
                ],
                "testFilterGradientSamePaddingStrideTwo": [
                    "self"
                ],
                "testInputGradientSamePaddingStrideThree": [
                    "self"
                ],
                "testFilterGradientSamePaddingStrideThree": [
                    "self"
                ],
                "testFilterGradientSamePaddingStride2x1": [
                    "self"
                ],
                "testShapeFunctionEdgeCases": [
                    "self"
                ],
                "testOpEdgeCases": [
                    "self"
                ]
            },
            "DepthwiseConv2DTest": {
                "_VerifyValues": [
                    "self",
                    "tensor_in_sizes",
                    "filter_in_sizes",
                    "stride",
                    "padding",
                    "expected"
                ],
                "testConv2D2x2Filter": [
                    "self"
                ]
            },
            "SeparableConv2DTest": {
                "_InitValues": [
                    "self",
                    "sizes"
                ],
                "_VerifyValues": [
                    "self",
                    "tensor_in_sizes",
                    "depthwise_filter_in_sizes",
                    "pointwise_filter_in_sizes",
                    "stride",
                    "padding",
                    "expected"
                ],
                "testSeparableConv2D": [
                    "self"
                ],
                "testSeparableConv2DEqualInputOutputDepth": [
                    "self"
                ],
                "testSeparableConv2DIllegalCases": [
                    "self"
                ]
            },
            "DeepConv2DTest": {
                "_CompareFwdConv2D": [
                    "self",
                    "tensor_in_sizes",
                    "filter_in_sizes",
                    "conv_strides",
                    "padding"
                ],
                "_RunTestCases": [
                    "self",
                    "conv_strides",
                    "padding"
                ],
                "testConv2D3x3FilterStride1x1Valid": [
                    "self"
                ],
                "testConv2D3x3FilterStride1x1Same": [
                    "self"
                ]
            },
            "Conv2DBenchmark": {
                "benchmarkGPUConvStackFirst": [
                    "self"
                ]
            }
        },
        "tensorflow.python.kernel_tests.conv3d_backprop_filter_v2_grad_test": {
            "Conv3DBackpropFilterV2GradTest": {
                "testGradient": [
                    "self"
                ]
            }
        },
        "tensorflow.python.kernel_tests.variables_test": {
            "VariablesTestCase": {
                "testInitialization": [
                    "self"
                ],
                "testInitializationOrder": [
                    "self"
                ],
                "testIterable": [
                    "self"
                ],
                "testAssignments": [
                    "self"
                ],
                "_countUpToTest": [
                    "self",
                    "dtype"
                ],
                "testCountUpToInt32": [
                    "self"
                ],
                "testCountUpToInt64": [
                    "self"
                ],
                "testControlDepsNone": [
                    "self"
                ],
                "testControlFlow": [
                    "self"
                ],
                "testUseVariableAsTensor": [
                    "self"
                ],
                "testZeroSizeVarSameAsConst": [
                    "self"
                ],
                "testCachingDevice": [
                    "self"
                ],
                "testCollections": [
                    "self"
                ],
                "testOperators": [
                    "self"
                ],
                "testSession": [
                    "self"
                ],
                "testDevicePlacement": [
                    "self"
                ],
                "testColocation": [
                    "self"
                ],
                "testInitializerFunction": [
                    "self"
                ],
                "testInitializerFunctionDevicePlacement": [
                    "self"
                ]
            },
            "IsInitializedTest": {
                "testNoVars": [
                    "self"
                ],
                "testAssertVariablesInitialized": [
                    "self"
                ],
                "testVariableList": [
                    "self"
                ],
                "testZeroSizeVarInitialized": [
                    "self"
                ],
                "testTrainingWithZeroSizeVar": [
                    "self"
                ]
            },
            "ObsoleteIsInitializedTest": {
                "testNoVars": [
                    "self"
                ],
                "testVariables": [
                    "self"
                ],
                "testVariableList": [
                    "self"
                ]
            },
            "PartitionedVariableTest": {
                "testPartitionedVariable": [
                    "self"
                ],
                "testPartitionedVariableFailures": [
                    "self"
                ]
            },
            "VariableContainerTest": {
                "testContainer": [
                    "self"
                ]
            }
        },
        "tensorflow.python.kernel_tests.shape_ops_test": {
            "_sparsify": [
                "x",
                "thresh",
                "index_dtype"
            ],
            "ShapeOpsTest": {
                "_compareShape": [
                    "self",
                    "x",
                    "use_gpu"
                ],
                "_compareShapeSparse": [
                    "self",
                    "x_np",
                    "use_gpu"
                ],
                "_compareShapeN": [
                    "self",
                    "x",
                    "use_gpu"
                ],
                "_compareRank": [
                    "self",
                    "x",
                    "use_gpu"
                ],
                "_compareRankSparse": [
                    "self",
                    "x_np",
                    "use_gpu"
                ],
                "_compareSize": [
                    "self",
                    "x",
                    "use_gpu"
                ],
                "_compareSizeSparse": [
                    "self",
                    "x_np",
                    "use_gpu"
                ],
                "_testCpu": [
                    "self",
                    "x"
                ],
                "_testGpu": [
                    "self",
                    "x"
                ],
                "_testAll": [
                    "self",
                    "x"
                ],
                "testBasic": [
                    "self"
                ],
                "_test64BitOutput": [
                    "self"
                ],
                "_compareExpandDims": [
                    "self",
                    "x",
                    "dim",
                    "use_gpu"
                ],
                "_compareExpandDimsAll": [
                    "self",
                    "x",
                    "dim"
                ],
                "testExpandDims": [
                    "self"
                ],
                "testExpandDimsErrors": [
                    "self"
                ],
                "testExpandDimsGradient": [
                    "self"
                ],
                "testExpandDimsScalar": [
                    "self"
                ],
                "_compareSqueeze": [
                    "self",
                    "x",
                    "squeeze_dims",
                    "use_gpu"
                ],
                "_compareSqueezeAll": [
                    "self",
                    "x",
                    "squeeze_dims"
                ],
                "testSqueeze": [
                    "self"
                ],
                "testSqueezeSpecificDimension": [
                    "self"
                ],
                "testSqueezeAllOnes": [
                    "self"
                ],
                "testSqueezeOnlyOnes": [
                    "self"
                ],
                "testSqueezeErrors": [
                    "self"
                ],
                "testSqueezeGradient": [
                    "self"
                ],
                "testSqueezeGradientWithSqueezeDims": [
                    "self"
                ],
                "testSqueezeWithUnknownShape": [
                    "self"
                ]
            },
            "TileTest": {
                "testScalar": [
                    "self"
                ],
                "testSimple": [
                    "self"
                ],
                "testEmpty": [
                    "self"
                ],
                "testUnknownInputShape": [
                    "self"
                ],
                "testTypes": [
                    "self"
                ],
                "testInvalidDim": [
                    "self"
                ],
                "_RunAndVerifyResult": [
                    "self",
                    "use_gpu"
                ],
                "testRandom": [
                    "self"
                ],
                "testGradientSimpleReduction": [
                    "self"
                ],
                "testGradientStridedReduction": [
                    "self"
                ],
                "testGradientSimpleReductionOnGPU": [
                    "self"
                ],
                "testGradientStridedReductionOnGPU": [
                    "self"
                ],
                "_RunAndVerifyGradientResult": [
                    "self",
                    "input_shape",
                    "multiples"
                ],
                "testGradientRandomScalar": [
                    "self"
                ],
                "testGradientRandom": [
                    "self"
                ],
                "testGradientStridedReductionGC": [
                    "self"
                ],
                "testShapeFunctionEdgeCases": [
                    "self"
                ]
            }
        },
        "tensorflow.python.kernel_tests.constant_op_test": {
            "ConstantTest": {
                "_testCpu": [
                    "self",
                    "x"
                ],
                "_testGpu": [
                    "self",
                    "x"
                ],
                "_testAll": [
                    "self",
                    "x"
                ],
                "testFloat": [
                    "self"
                ],
                "testDouble": [
                    "self"
                ],
                "testInt32": [
                    "self"
                ],
                "testInt64": [
                    "self"
                ],
                "testComplex64": [
                    "self"
                ],
                "testComplex128": [
                    "self"
                ],
                "testString": [
                    "self"
                ],
                "testStringWithNulls": [
                    "self"
                ],
                "testExplicitShapeNumPy": [
                    "self"
                ],
                "testImplicitShapeNumPy": [
                    "self"
                ],
                "testExplicitShapeList": [
                    "self"
                ],
                "testImplicitShapeList": [
                    "self"
                ],
                "testExplicitShapeNumber": [
                    "self"
                ],
                "testImplicitShapeNumber": [
                    "self"
                ],
                "testShapeInconsistent": [
                    "self"
                ],
                "testShapeWrong": [
                    "self"
                ],
                "testTooLargeConstant": [
                    "self"
                ],
                "testTooLargeGraph": [
                    "self"
                ],
                "testSparseValuesRaiseErrors": [
                    "self"
                ]
            },
            "AsTensorTest": {
                "testAsTensorForTensorInput": [
                    "self"
                ],
                "testAsTensorForNonTensorInput": [
                    "self"
                ],
                "testAsTensorForShapeInput": [
                    "self"
                ],
                "testAsTensorForDimensionInput": [
                    "self"
                ]
            },
            "IdentityOpTest": {
                "testIdTensor": [
                    "self"
                ]
            },
            "ZerosTest": {
                "_Zeros": [
                    "self",
                    "shape"
                ],
                "testConst": [
                    "self"
                ],
                "testScalar": [
                    "self"
                ],
                "testDynamicSizes": [
                    "self"
                ],
                "testDtype": [
                    "self"
                ]
            },
            "ZerosLikeTest": {
                "_compareZeros": [
                    "self",
                    "dtype",
                    "use_gpu"
                ],
                "testZerosLikeCPU": [
                    "self"
                ],
                "testZerosLikeGPU": [
                    "self"
                ],
                "testZerosLikePartialShape": [
                    "self"
                ],
                "testZerosLikeDtype": [
                    "self"
                ]
            },
            "OnesTest": {
                "_Ones": [
                    "self",
                    "shape"
                ],
                "testConst": [
                    "self"
                ],
                "testScalar": [
                    "self"
                ],
                "testDynamicSizes": [
                    "self"
                ],
                "testAutoPack": [
                    "self"
                ],
                "testDtype": [
                    "self"
                ]
            },
            "OnesLikeTest": {
                "testOnesLike": [
                    "self"
                ],
                "testOnesLikePartialShape": [
                    "self"
                ]
            },
            "FillTest": {
                "_compare": [
                    "self",
                    "dims",
                    "val",
                    "np_ans",
                    "use_gpu"
                ],
                "_compareAll": [
                    "self",
                    "dims",
                    "val",
                    "np_ans"
                ],
                "testFillFloat": [
                    "self"
                ],
                "testFillDouble": [
                    "self"
                ],
                "testFillInt32": [
                    "self"
                ],
                "testFillInt64": [
                    "self"
                ],
                "testFillComplex64": [
                    "self"
                ],
                "testFillComplex128": [
                    "self"
                ],
                "testFillString": [
                    "self"
                ],
                "testFillNegative": [
                    "self"
                ],
                "testShapeFunctionEdgeCases": [
                    "self"
                ],
                "testGradient": [
                    "self"
                ]
            },
            "PlaceholderTest": {
                "testDtype": [
                    "self"
                ],
                "testShape": [
                    "self"
                ],
                "testPartialShape": [
                    "self"
                ],
                "testControlDependency": [
                    "self"
                ],
                "testBadShape": [
                    "self"
                ],
                "testTensorStr": [
                    "self"
                ]
            },
            "PlaceholderV2Test": {
                "testDtype": [
                    "self"
                ],
                "testShape": [
                    "self"
                ],
                "testUnknownShape": [
                    "self"
                ],
                "testScalarShape": [
                    "self"
                ],
                "testPartialShape": [
                    "self"
                ],
                "testControlDependency": [
                    "self"
                ],
                "testBadShape": [
                    "self"
                ],
                "testTensorStr": [
                    "self"
                ]
            },
            "PlaceholderWithDefaultTest": {
                "testFullShape": [
                    "self"
                ],
                "testPartialShape": [
                    "self"
                ],
                "testNoShape": [
                    "self"
                ]
            }
        },
        "tensorflow.python.kernel_tests.substr_op_test": {
            "SubstrOpTest": {
                "_testScalarString": [
                    "self",
                    "dtype"
                ],
                "_testVectorStrings": [
                    "self",
                    "dtype"
                ],
                "_testMatrixStrings": [
                    "self",
                    "dtype"
                ],
                "_testElementWisePosLen": [
                    "self",
                    "dtype"
                ],
                "_testBroadcast": [
                    "self",
                    "dtype"
                ],
                "_testBadBroadcast": [
                    "self",
                    "dtype"
                ],
                "_testOutOfRangeError": [
                    "self",
                    "dtype"
                ],
                "_testMismatchPosLenShapes": [
                    "self",
                    "dtype"
                ],
                "_testAll": [
                    "self",
                    "dtype"
                ],
                "testInt32": [
                    "self"
                ],
                "testInt64": [
                    "self"
                ],
                "testWrongDtype": [
                    "self"
                ]
            }
        },
        "tensorflow.python.kernel_tests": {},
        "tensorflow.python.kernel_tests.parsing_ops_test": {
            "flatten": [
                "list_of_lists"
            ],
            "flatten_values_tensors_or_sparse": [
                "tensors_list"
            ],
            "_compare_output_to_expected": [
                "tester",
                "dict_tensors",
                "expected_tensors",
                "flat_output"
            ],
            "ParseExampleTest": {
                "_test": [
                    "self",
                    "kwargs",
                    "expected_values",
                    "expected_err"
                ],
                "testEmptySerializedWithAllDefaults": [
                    "self"
                ],
                "testEmptySerializedWithoutDefaultsShouldFail": [
                    "self"
                ],
                "testDenseNotMatchingShapeShouldFail": [
                    "self"
                ],
                "testDenseDefaultNoShapeShouldFail": [
                    "self"
                ],
                "testSerializedContainingSparse": [
                    "self"
                ],
                "testSerializedContainingDense": [
                    "self"
                ],
                "testSerializedContainingDenseWithConcat": [
                    "self"
                ],
                "testSerializedContainingDenseScalar": [
                    "self"
                ],
                "testSerializedContainingDenseWithDefaults": [
                    "self"
                ],
                "testSerializedContainingSparseAndDenseWithNoDefault": [
                    "self"
                ]
            },
            "ParseSingleExampleTest": {
                "_test": [
                    "self",
                    "kwargs",
                    "expected_values",
                    "expected_err"
                ],
                "testSingleExampleWithSparseAndDense": [
                    "self"
                ]
            },
            "ParseSequenceExampleTest": {
                "testCreateSequenceExample": [
                    "self"
                ],
                "_test": [
                    "self",
                    "kwargs",
                    "expected_context_values",
                    "expected_feat_list_values",
                    "expected_err"
                ],
                "testSequenceExampleWithSparseAndDenseContext": [
                    "self"
                ],
                "testSequenceExampleWithMultipleSizeFeatureLists": [
                    "self"
                ],
                "testSequenceExampleWithoutDebugName": [
                    "self"
                ],
                "testSequenceExampleWithSparseAndDenseFeatureLists": [
                    "self"
                ],
                "testSequenceExampleListWithInconsistentDataFails": [
                    "self"
                ],
                "testSequenceExampleListWithWrongDataTypeFails": [
                    "self"
                ],
                "testSequenceExampleListWithWrongSparseDataTypeFails": [
                    "self"
                ],
                "testSequenceExampleListWithWrongShapeFails": [
                    "self"
                ],
                "testSequenceExampleWithMissingFeatureListFails": [
                    "self"
                ]
            },
            "DecodeJSONExampleTest": {
                "_testRoundTrip": [
                    "self",
                    "examples"
                ],
                "testEmptyTensor": [
                    "self"
                ],
                "testEmptyExamples": [
                    "self"
                ],
                "testDenseFeaturesScalar": [
                    "self"
                ],
                "testDenseFeaturesVector": [
                    "self"
                ],
                "testDenseFeaturesMatrix": [
                    "self"
                ],
                "testSparseFeatures": [
                    "self"
                ],
                "testSerializedContainingBytes": [
                    "self"
                ],
                "testInvalidSyntax": [
                    "self"
                ]
            },
            "ParseTensorOpTest": {
                "testToFloat32": [
                    "self"
                ],
                "testToUint8": [
                    "self"
                ],
                "testTypeMismatch": [
                    "self"
                ],
                "testInvalidInput": [
                    "self"
                ]
            }
        },
        "tensorflow.python.kernel_tests.batch_matmul_op_test": {
            "_GetBatchMatmulOpTest": [
                "dtype",
                "adjoint_a",
                "adjoint_b",
                "use_static_shape"
            ],
            "_GetBatchMatmulGradientTest": [
                "dtype",
                "adjoint_a",
                "adjoint_b"
            ],
            "BatchMatmulOpTest": {
                "_npBatchMatmul": [
                    "self",
                    "x",
                    "y",
                    "adjoint_a",
                    "adjoint_b"
                ],
                "testNpVersion": [
                    "self"
                ],
                "_compare": [
                    "self",
                    "x_in",
                    "y_in",
                    "adjoint_a",
                    "adjoint_b",
                    "static_shape"
                ],
                "_rand": [
                    "self",
                    "shape",
                    "dtype"
                ],
                "_testNonEmpty": [
                    "self",
                    "dtype",
                    "adjoint_a",
                    "adjoint_b",
                    "use_static_shape"
                ],
                "_testEmpty": [
                    "self",
                    "dtype",
                    "adjoint_a",
                    "adjoint_b",
                    "use_static_shape"
                ]
            },
            "BatchMatmulGradientTest": {
                "_checkGrad": [
                    "self",
                    "x_in",
                    "y_in",
                    "adjoint_a",
                    "adjoint_b"
                ],
                "_compare": [
                    "self",
                    "b",
                    "n",
                    "k",
                    "m",
                    "dtype",
                    "adjoint_a",
                    "adjoint_b"
                ]
            }
        },
        "tensorflow.python.kernel_tests.pooling_ops_3d_test": {
            "PoolingTest": {
                "_VerifyValues": [
                    "self",
                    "pool_func",
                    "input_sizes",
                    "window",
                    "strides",
                    "padding",
                    "expected"
                ],
                "testAvgPool3dValidPadding": [
                    "self"
                ],
                "testAvgPool3dSamePadding": [
                    "self"
                ],
                "testAvgPool3dSamePaddingDifferentStrides": [
                    "self"
                ],
                "testMaxPool3dValidPadding": [
                    "self"
                ],
                "testMaxPool3dSamePadding": [
                    "self"
                ],
                "testMaxPool3dSamePaddingDifferentStrides": [
                    "self"
                ],
                "testKernelSmallerThanStride": [
                    "self"
                ],
                "_ConstructAndTestGradient": [
                    "self",
                    "pool_func",
                    "input_sizes",
                    "output_sizes",
                    "window",
                    "strides",
                    "padding",
                    "x_init_value"
                ],
                "testMaxPoolGradValidPadding1_1_3d": [
                    "self"
                ],
                "testMaxPoolGradValidPadding2_1_6_3d": [
                    "self"
                ],
                "testMaxPoolGradValidPadding2_1_7_3d": [
                    "self"
                ],
                "testMaxPoolGradValidPadding2_2_3d": [
                    "self"
                ],
                "testMaxPoolGradSamePadding1_1_3d": [
                    "self"
                ],
                "testMaxPoolGradSamePadding2_1_3d": [
                    "self"
                ],
                "testMaxPoolGradSamePadding2_2_3d": [
                    "self"
                ],
                "testMaxPoolGradSamePadding3_1_3d": [
                    "self"
                ],
                "testAvgPoolGradValidPadding1_1_3d": [
                    "self"
                ],
                "testAvgPoolGradValidPadding2_1_3d": [
                    "self"
                ],
                "testAvgPoolGradValidPadding2_2_3d": [
                    "self"
                ],
                "testAvgPoolGradSamePadding1_1_3d": [
                    "self"
                ],
                "testAvgPoolGradSamePadding2_1_3d": [
                    "self"
                ],
                "testAvgPoolGradSamePadding2_2_3d": [
                    "self"
                ],
                "testAvgPoolGradSamePadding3_1_3d": [
                    "self"
                ]
            }
        },
        "tensorflow.python.kernel_tests.linalg_grad_test": {
            "_AddTest": [
                "test",
                "op_name",
                "testcase_name",
                "fn"
            ],
            "_GetMatrixUnaryFunctorGradientTest": [
                "functor_",
                "dtype_",
                "shape_"
            ],
            "_GetMatrixBinaryFunctorGradientTest": [
                "functor_",
                "dtype_",
                "shape_",
                "float32_tol_fudge"
            ],
            "ShapeTest": {
                "testBatchGradientUnknownSize": [
                    "self"
                ]
            },
            "MatrixUnaryFunctorGradientTest": {},
            "MatrixBinaryFunctorGradientTest": {}
        },
        "tensorflow.python.kernel_tests.clip_ops_test": {
            "ClipTest": {
                "testClipByValue": [
                    "self"
                ],
                "testClipByValueNonFinite": [
                    "self"
                ],
                "testClipByNormClipped": [
                    "self"
                ],
                "testClipByNormNotClipped": [
                    "self"
                ],
                "testClipByNormZero": [
                    "self"
                ],
                "testClipByNormClippedWithDim0": [
                    "self"
                ],
                "testClipByNormClippedWithDim1": [
                    "self"
                ],
                "testClipByNormNotClippedWithAxes": [
                    "self"
                ],
                "testClipByGlobalNormClipped": [
                    "self"
                ],
                "testClipByGlobalNormClippedTensor": [
                    "self"
                ],
                "testClipByGlobalNormSupportsNone": [
                    "self"
                ],
                "testClipByGlobalNormWithIndexedSlicesClipped": [
                    "self"
                ],
                "testClipByGlobalNormPreservesDenseShape": [
                    "self"
                ],
                "testClipByGlobalNormNotClipped": [
                    "self"
                ],
                "testClipByGlobalNormZero": [
                    "self"
                ],
                "testClipByAverageNormClipped": [
                    "self"
                ],
                "testClipByAverageNormClippedTensor": [
                    "self"
                ],
                "testClipByAverageNormNotClipped": [
                    "self"
                ],
                "testClipByAverageNormZero": [
                    "self"
                ]
            }
        },
        "tensorflow.python.kernel_tests.variable_ops_test": {
            "VariableOpTest": {
                "_initFetch": [
                    "self",
                    "x",
                    "tftype",
                    "use_gpu"
                ],
                "_testTypes": [
                    "self",
                    "vals"
                ],
                "testBasic": [
                    "self"
                ],
                "testset_shape": [
                    "self"
                ],
                "testAssign": [
                    "self"
                ],
                "testAssignNoValidateShape": [
                    "self"
                ],
                "testAssignNoVarShape": [
                    "self"
                ],
                "testAssignNoVarShapeNoValidateShape": [
                    "self"
                ],
                "_NewShapelessTensor": [
                    "self"
                ],
                "testAssignNoValueShape": [
                    "self"
                ],
                "testAssignNoValueShapeNoValidateShape": [
                    "self"
                ],
                "testAssignNoShape": [
                    "self"
                ],
                "testAssignNoShapeNoValidateShape": [
                    "self"
                ],
                "testAssignUpdate": [
                    "self"
                ],
                "testAssignUpdateNoVarShape": [
                    "self"
                ],
                "testAssignUpdateNoValueShape": [
                    "self"
                ],
                "testAssignUpdateNoShape": [
                    "self"
                ],
                "testTemporaryVariable": [
                    "self"
                ],
                "testDestroyNonexistentTemporaryVariable": [
                    "self"
                ],
                "testDuplicateTemporaryVariable": [
                    "self"
                ],
                "testDestroyTemporaryVariableTwice": [
                    "self"
                ],
                "testTemporaryVariableNoLeak": [
                    "self"
                ],
                "testTwoTemporaryVariablesNoLeaks": [
                    "self"
                ],
                "testAssignDependencyAcrossDevices": [
                    "self"
                ],
                "testIsVariableInitialized": [
                    "self"
                ]
            }
        },
        "tensorflow.python.kernel_tests.large_concat_op_test": {
            "LargeConcatOpTest": {
                "testConcatLargeTensors": [
                    "self"
                ]
            }
        },
        "tensorflow.python.kernel_tests.benchmark_test": {
            "SomeRandomBenchmark": {
                "_dontRunThisBenchmark": [
                    "self"
                ],
                "notBenchmarkMethod": [
                    "self"
                ],
                "benchmark1": [
                    "self"
                ],
                "benchmark2": [
                    "self"
                ]
            },
            "TestReportingBenchmark": {
                "benchmarkReport1": [
                    "self"
                ],
                "benchmarkReport2": [
                    "self"
                ],
                "benchmark_times_an_op": [
                    "self"
                ]
            },
            "BenchmarkTest": {
                "testGlobalBenchmarkRegistry": [
                    "self"
                ],
                "testRunSomeRandomBenchmark": [
                    "self"
                ],
                "testReportingBenchmark": [
                    "self"
                ]
            }
        },
        "tensorflow.python.kernel_tests.unique_op_test": {
            "UniqueTest": {
                "testInt32": [
                    "self"
                ],
                "testString": [
                    "self"
                ]
            },
            "UniqueWithCountsTest": {
                "testInt32": [
                    "self"
                ],
                "testString": [
                    "self"
                ]
            }
        },
        "tensorflow.python.kernel_tests.conv2d_backprop_filter_grad_test": {
            "Conv2DBackpropFilterGradTest": {
                "testGradient": [
                    "self"
                ]
            }
        },
        "tensorflow.python.kernel_tests.control_flow_ops_py_test": {
            "check_op_order": [
                "graph"
            ],
            "check_consumers": [
                "graph"
            ],
            "isum": [
                "s"
            ],
            "ControlFlowTest": {
                "testRefIdentity": [
                    "self"
                ],
                "testRefEnter": [
                    "self"
                ],
                "testRefSwitch": [
                    "self"
                ],
                "testEnterMulExit": [
                    "self"
                ],
                "testSwitchMergeIndexedSlices": [
                    "self"
                ],
                "testSwitchDeadBranch": [
                    "self"
                ],
                "testSwitchMergeLess": [
                    "self"
                ],
                "testSwitchMergeAddIdentity": [
                    "self"
                ],
                "testSwitchMergeAddMul": [
                    "self"
                ],
                "testLoop_false": [
                    "self"
                ],
                "testLoop_1": [
                    "self"
                ],
                "testLoop_2": [
                    "self"
                ],
                "testDifferentFrame": [
                    "self"
                ],
                "testCondBool": [
                    "self"
                ],
                "testCondIndexedSlices": [
                    "self"
                ],
                "testCondSparseTensor": [
                    "self"
                ],
                "testCondIndexedSlicesDifferentTypes": [
                    "self"
                ],
                "testCondColocation": [
                    "self"
                ],
                "_testCond_1": [
                    "self",
                    "use_gpu"
                ],
                "testCond_1": [
                    "self"
                ],
                "testCond_2": [
                    "self"
                ],
                "testCond_3": [
                    "self"
                ],
                "testCond_4": [
                    "self"
                ],
                "testCond_5": [
                    "self"
                ],
                "testCond_6": [
                    "self"
                ],
                "testCond_7": [
                    "self"
                ],
                "testCondRef": [
                    "self"
                ],
                "testUninitializedRefIdentity": [
                    "self"
                ],
                "testCondGrad_1": [
                    "self"
                ],
                "testCondGrad_2": [
                    "self"
                ],
                "testNestedCond_Simple": [
                    "self"
                ],
                "testCondGrad_Gather": [
                    "self"
                ],
                "testWhile_1": [
                    "self"
                ],
                "testWhileWithRefs_1": [
                    "self"
                ],
                "testWhile_2": [
                    "self"
                ],
                "testWhile_3": [
                    "self"
                ],
                "testWhile_4": [
                    "self"
                ],
                "testWhile_5": [
                    "self"
                ],
                "_testWhile_Gpu_1": [
                    "self",
                    "use_gpu"
                ],
                "testWhile_Gpu_1": [
                    "self"
                ],
                "_testWhile_Gpu_2": [
                    "self",
                    "use_gpu"
                ],
                "testWhile_Gpu_2": [
                    "self"
                ],
                "testWhileShape": [
                    "self"
                ],
                "testWhileWithNonTensorInput_Scalar": [
                    "self"
                ],
                "testWhileWithNonTensorInput_Vector": [
                    "self"
                ],
                "testWhileShapeInference": [
                    "self"
                ],
                "testWhileShapeInferenceSparseTensor": [
                    "self"
                ],
                "testWhileShapeInferenceIndexedSlices": [
                    "self"
                ],
                "_testNestedWhile_1": [
                    "self",
                    "use_gpu"
                ],
                "testNestedWhile_1": [
                    "self"
                ],
                "_testNestedWhile_2": [
                    "self",
                    "use_gpu"
                ],
                "testNestedWhile_2": [
                    "self"
                ],
                "testWhileWithControl_1": [
                    "self"
                ],
                "testWhileWithControl_2": [
                    "self"
                ],
                "testWhileWithControl_3": [
                    "self"
                ],
                "testWhileWithControl_4": [
                    "self"
                ],
                "testWhileCondWithControl": [
                    "self"
                ],
                "testWhileCondExitControl": [
                    "self"
                ],
                "testCondWhile_1": [
                    "self"
                ],
                "testCondWhile_2": [
                    "self"
                ],
                "_testCondWhile_3": [
                    "self",
                    "use_gpu"
                ],
                "testCondWhile_3": [
                    "self"
                ],
                "testWhileCond_1": [
                    "self"
                ],
                "testWhileCond_2": [
                    "self"
                ],
                "testWhileCond_3": [
                    "self"
                ],
                "testWhileUpdateVariable_1": [
                    "self"
                ],
                "testWhileUpdateVariable_2": [
                    "self"
                ],
                "testWhileUpdateVariable_3": [
                    "self"
                ],
                "testWhileUpdateVariable_4": [
                    "self"
                ],
                "testWhileUpdateVariable_5": [
                    "self"
                ],
                "testWhileUpdateVariable_6": [
                    "self"
                ],
                "testWhileQueue_1": [
                    "self"
                ],
                "testWhileStack_1": [
                    "self"
                ],
                "_testWhileGrad_ColocateGradients": [
                    "self",
                    "colocate"
                ],
                "testWhileGrad_ColocateGradients": [
                    "self"
                ],
                "testWhileGrad_Square": [
                    "self"
                ],
                "testWhileGrad_Shape": [
                    "self"
                ],
                "testWhileGrad_BaseShape": [
                    "self"
                ],
                "testWhileGrad_MultipleUses": [
                    "self"
                ],
                "testWhileGrad_LoopAdd": [
                    "self"
                ],
                "_testWhileGrad_Mul": [
                    "self",
                    "use_gpu",
                    "p_iters"
                ],
                "testWhileGrad_Mul": [
                    "self"
                ],
                "testWhileGrad_Variable": [
                    "self"
                ],
                "testWhile_NestedInput": [
                    "self"
                ],
                "testWhile_NestedBadArityFails": [
                    "self"
                ],
                "testWhileGrad_ys_xs": [
                    "self"
                ],
                "testWhileGrad_Dependency": [
                    "self"
                ],
                "testWhileGrad_NoGradient": [
                    "self"
                ],
                "testWhileGrad_NoDependency": [
                    "self"
                ],
                "testWhileGrad_Const": [
                    "self"
                ],
                "testWhileGrad_SerialTwoLoops": [
                    "self"
                ],
                "testWhileGrad_ParallelTwoLoops": [
                    "self"
                ],
                "testWhileGrad_OneOutputWithControlDependencyOnSecond": [
                    "self"
                ],
                "_testNestedWhileGrad_Simple": [
                    "self",
                    "use_gpu"
                ],
                "testNestedWhileGrad_Simple": [
                    "self"
                ],
                "testNestedWhileGrad_SerialInner": [
                    "self"
                ],
                "testNestedWhileGrad_ParallelInner": [
                    "self"
                ],
                "testNestedWhileGrad_ParallelIterations": [
                    "self"
                ],
                "_testWhileCondGrad_Simple": [
                    "self",
                    "use_gpu"
                ],
                "testWhileCondGrad_Simple": [
                    "self"
                ],
                "testWhileCondGrad_UnknownShape": [
                    "self"
                ],
                "testWhileGrad_Concat": [
                    "self"
                ],
                "testWhileWithRefsWithGradients_1": [
                    "self"
                ],
                "testWhileGrad_IndexedSlices": [
                    "self"
                ],
                "testWhileGrad_SparseTensor": [
                    "self"
                ],
                "testCallGradInLoop": [
                    "self"
                ],
                "testWhileAndTensorArray": [
                    "self"
                ],
                "testWhileGrad_StopGrad": [
                    "self"
                ],
                "testWhileGrad_StopGradInside": [
                    "self"
                ],
                "testWhileGrad_StopGradInsideNoShape": [
                    "self"
                ],
                "testWhileGradGradFail": [
                    "self"
                ],
                "testOneValueCond": [
                    "self"
                ],
                "testExampleCond": [
                    "self"
                ],
                "testCase": [
                    "self"
                ],
                "testCaseSideEffects": [
                    "self"
                ],
                "testOneOpCond": [
                    "self"
                ],
                "testWithOpsDependencies": [
                    "self"
                ],
                "testWithTensorDependencies": [
                    "self"
                ],
                "testWithIndexedSlicesDependencies": [
                    "self"
                ],
                "testDependenciesDevice": [
                    "self"
                ],
                "testGroup": [
                    "self"
                ],
                "testGroupEmpty": [
                    "self"
                ],
                "testMergeShapes": [
                    "self"
                ],
                "testRefSelect": [
                    "self"
                ],
                "testRunLoopTensor": [
                    "self"
                ],
                "testWhilePyFuncBasic": [
                    "self"
                ],
                "testWhileFuncBasic": [
                    "self"
                ]
            },
            "TupleTest": {
                "testTensors": [
                    "self"
                ],
                "testIndexedSlices": [
                    "self"
                ],
                "testAcceptTensorsAsControlInputs": [
                    "self"
                ]
            },
            "AssertTest": {
                "testGuardedAssertDoesNotCopyWhenTrue": [
                    "self"
                ]
            }
        },
        "tensorflow.python.kernel_tests.zero_division_test": {
            "ZeroDivisionTest": {
                "testZeros": [
                    "self"
                ]
            }
        },
        "tensorflow.python.kernel_tests.matrix_inverse_op_test": {
            "InverseOpTest": {
                "_verifyInverse": [
                    "self",
                    "x"
                ],
                "testNonsymmetric": [
                    "self"
                ],
                "testSymmetricPositiveDefinite": [
                    "self"
                ],
                "testNonSquareMatrix": [
                    "self"
                ],
                "testWrongDimensions": [
                    "self"
                ],
                "testNotInvertible": [
                    "self"
                ],
                "testEmpty": [
                    "self"
                ]
            }
        },
        "tensorflow.python.kernel_tests.reader_ops_test": {
            "IdentityReaderTest": {
                "_ExpectRead": [
                    "self",
                    "sess",
                    "key",
                    "value",
                    "expected"
                ],
                "testOneEpoch": [
                    "self"
                ],
                "testMultipleEpochs": [
                    "self"
                ],
                "testSerializeRestore": [
                    "self"
                ],
                "testReset": [
                    "self"
                ]
            },
            "WholeFileReaderTest": {
                "setUp": [
                    "self"
                ],
                "tearDown": [
                    "self"
                ],
                "_ExpectRead": [
                    "self",
                    "sess",
                    "key",
                    "value",
                    "index"
                ],
                "testOneEpoch": [
                    "self"
                ],
                "testInfiniteEpochs": [
                    "self"
                ]
            },
            "TextLineReaderTest": {
                "setUp": [
                    "self"
                ],
                "_LineText": [
                    "self",
                    "f",
                    "l"
                ],
                "_CreateFiles": [
                    "self",
                    "crlf"
                ],
                "_testOneEpoch": [
                    "self",
                    "files"
                ],
                "testOneEpochLF": [
                    "self"
                ],
                "testOneEpochCRLF": [
                    "self"
                ],
                "testSkipHeaderLines": [
                    "self"
                ]
            },
            "FixedLengthRecordReaderTest": {
                "setUp": [
                    "self"
                ],
                "_Record": [
                    "self",
                    "f",
                    "r"
                ],
                "_CreateFiles": [
                    "self"
                ],
                "testOneEpoch": [
                    "self"
                ]
            },
            "TFRecordReaderTest": {
                "setUp": [
                    "self"
                ],
                "_Record": [
                    "self",
                    "f",
                    "r"
                ],
                "_CreateFiles": [
                    "self"
                ],
                "testOneEpoch": [
                    "self"
                ],
                "testReadUpTo": [
                    "self"
                ],
                "testReadZlibFiles": [
                    "self"
                ],
                "testReadGzipFiles": [
                    "self"
                ]
            },
            "TFRecordWriterZlibTest": {
                "setUp": [
                    "self"
                ],
                "_Record": [
                    "self",
                    "f",
                    "r"
                ],
                "_CreateFiles": [
                    "self"
                ],
                "_WriteRecordsToFile": [
                    "self",
                    "records",
                    "name"
                ],
                "_ZlibCompressFile": [
                    "self",
                    "infile",
                    "name"
                ],
                "testOneEpoch": [
                    "self"
                ],
                "testZLibFlushRecord": [
                    "self"
                ],
                "testZlibReadWrite": [
                    "self"
                ],
                "testZlibReadWriteLarge": [
                    "self"
                ],
                "testGzipReadWrite": [
                    "self"
                ]
            },
            "TFRecordIteratorTest": {
                "setUp": [
                    "self"
                ],
                "_Record": [
                    "self",
                    "r"
                ],
                "_WriteCompressedRecordsToFile": [
                    "self",
                    "records",
                    "name",
                    "compression_type"
                ],
                "_ZlibDecompressFile": [
                    "self",
                    "infile",
                    "name",
                    "wbits"
                ],
                "testIterator": [
                    "self"
                ],
                "testWriteZlibRead": [
                    "self"
                ],
                "testWriteZlibReadLarge": [
                    "self"
                ],
                "testWriteGzipRead": [
                    "self"
                ]
            },
            "AsyncReaderTest": {
                "testNoDeadlockFromQueue": [
                    "self"
                ],
                "_RunSessionAndSave": [
                    "sess",
                    "args",
                    "output"
                ]
            }
        },
        "tensorflow.python.kernel_tests.sparse_ops_test": {
            "_sparsify": [
                "x",
                "thresh",
                "index_dtype"
            ],
            "SparseToIndicatorTest": {
                "_SparseTensor_5x6": [
                    "self",
                    "dtype"
                ],
                "_SparseTensor_2x3x4": [
                    "self",
                    "dtype"
                ],
                "testInt32": [
                    "self"
                ],
                "testInt64": [
                    "self"
                ],
                "testHigherRank": [
                    "self"
                ]
            },
            "SparseMergeTest": {
                "_SparseTensorValue_3x50": [
                    "self",
                    "indices_dtype",
                    "values_dtype"
                ],
                "_SparseTensor_3x50": [
                    "self",
                    "indices_dtype",
                    "values_dtype"
                ],
                "_AssertResultsSorted": [
                    "self",
                    "output",
                    "vocab_size"
                ],
                "_AssertResultsNotSorted": [
                    "self",
                    "output",
                    "vocab_size"
                ],
                "testInt32AndFloat32": [
                    "self"
                ],
                "testInt64AndFloat32": [
                    "self"
                ],
                "testInt64AndFloat64": [
                    "self"
                ],
                "testInt32AndFloat32NonCanonicalOrder": [
                    "self"
                ],
                "testInt64AndFloat32NonCanonicalOrder": [
                    "self"
                ],
                "testInt64AndFloat64NonCanonicalOrder": [
                    "self"
                ]
            },
            "SparseRetainTest": {
                "_SparseTensorValue_5x6": [
                    "self"
                ],
                "_SparseTensor_5x6": [
                    "self"
                ],
                "testBasic": [
                    "self"
                ],
                "testRetainNone": [
                    "self"
                ],
                "testMismatchedRetainShape": [
                    "self"
                ]
            },
            "SparseResetShapeTest": {
                "_SparseTensor_2x5x6": [
                    "self"
                ],
                "_SparseTensorValue_2x5x6": [
                    "self"
                ],
                "testBasic": [
                    "self"
                ],
                "testInputUnavailableInGraphConstructionOk": [
                    "self"
                ],
                "testFeedInputUnavailableInGraphConstructionOk": [
                    "self"
                ],
                "testTightBoundingBox": [
                    "self"
                ],
                "testInvalidRank": [
                    "self"
                ],
                "testInvalidRankNewShapeUnavailableInGraphConstruction": [
                    "self"
                ],
                "testInvalidDimensionSize": [
                    "self"
                ],
                "testInvalidDimensionSizeInputUnavailableInGraphConstruction": [
                    "self"
                ]
            },
            "SparseFillEmptyRowsTest": {
                "_SparseTensorValue_5x6": [
                    "self"
                ],
                "_SparseTensor_5x6": [
                    "self"
                ],
                "_SparseTensor_String5x6": [
                    "self"
                ],
                "_SparseTensor_2x6": [
                    "self"
                ],
                "testFillNumber": [
                    "self"
                ],
                "testFillString": [
                    "self"
                ],
                "testNoEmptyRows": [
                    "self"
                ]
            },
            "SparseReduceSumTest": {
                "_compare": [
                    "self",
                    "sp_t",
                    "reduction_axes",
                    "ndims",
                    "keep_dims"
                ],
                "_compare_all": [
                    "self",
                    "sp_t",
                    "reduction_axes",
                    "ndims"
                ],
                "testSimpleAndRandomInputs": [
                    "self"
                ],
                "testInvalidAxes": [
                    "self"
                ],
                "testGradient": [
                    "self"
                ]
            },
            "SparseMathOpsTest": {
                "_check": [
                    "self",
                    "result_tensor",
                    "result_np",
                    "input_sp_t"
                ],
                "testCwiseDivAndMul": [
                    "self"
                ],
                "testCwiseAdd": [
                    "self"
                ],
                "testGradients": [
                    "self"
                ]
            },
            "SparseSoftmaxTest": {
                "testEquivalentToDensified": [
                    "self"
                ],
                "testHigherRanks": [
                    "self"
                ],
                "testGradient": [
                    "self"
                ]
            },
            "SparseMinimumMaximumTest": {
                "_assertSparseTensorValueEqual": [
                    "self",
                    "a",
                    "b"
                ],
                "testBasic": [
                    "self"
                ],
                "testRandom": [
                    "self"
                ],
                "testMismatchedShapes": [
                    "self"
                ]
            },
            "SparseTransposeTest": {
                "testTranspose": [
                    "self"
                ]
            }
        },
        "tensorflow.python.kernel_tests.attention_ops_test": {
            "ExtractGlimpseTest": {
                "_VerifyValues": [
                    "self",
                    "tensor_in_sizes",
                    "glimpse_sizes",
                    "offsets",
                    "expected_rows",
                    "expected_cols"
                ],
                "testCenterGlimpse": [
                    "self"
                ],
                "testEmptyTensor": [
                    "self"
                ],
                "testLargeCenterGlimpse": [
                    "self"
                ],
                "testTooLargeCenterGlimpse": [
                    "self"
                ],
                "testGlimpseFullOverlap": [
                    "self"
                ],
                "testGlimpseFullOverlap2": [
                    "self"
                ],
                "testGlimpseBeforeLeftMargin": [
                    "self"
                ],
                "testGlimpseLowerRightCorner": [
                    "self"
                ],
                "testGlimpseNoOverlap": [
                    "self"
                ],
                "testGlimpseOnLeftMargin": [
                    "self"
                ],
                "testGlimpseUpperMargin": [
                    "self"
                ]
            }
        },
        "tensorflow.python.kernel_tests.string_to_number_op_test": {
            "StringToNumberOpTest": {
                "testToFloat": [
                    "self"
                ],
                "testToInt32": [
                    "self"
                ]
            }
        },
        "tensorflow.python.kernel_tests.matrix_triangular_solve_op_test": {
            "MatrixTriangularSolveOpTest": {
                "_verifySolveAllWays": [
                    "self",
                    "x",
                    "y",
                    "batch_dims"
                ],
                "_verifySolve": [
                    "self",
                    "x",
                    "y",
                    "lower",
                    "adjoint",
                    "batch_dims",
                    "use_gpu"
                ],
                "testSolve": [
                    "self"
                ],
                "testSolveBatch": [
                    "self"
                ],
                "testNonSquareMatrix": [
                    "self"
                ],
                "testWrongDimensions": [
                    "self"
                ],
                "testNotInvertible": [
                    "self"
                ],
                "testEmpty": [
                    "self"
                ]
            }
        },
        "tensorflow.python.kernel_tests.string_to_hash_bucket_op_test": {
            "StringToHashBucketOpTest": {
                "testStringToOneHashBucketFast": [
                    "self"
                ],
                "testStringToHashBucketsFast": [
                    "self"
                ],
                "testStringToOneHashBucketLegacyHash": [
                    "self"
                ],
                "testStringToHashBucketsLegacyHash": [
                    "self"
                ],
                "testStringToOneHashBucketStrongOneHashBucket": [
                    "self"
                ],
                "testStringToHashBucketsStrong": [
                    "self"
                ],
                "testStringToHashBucketsStrongInvalidKey": [
                    "self"
                ]
            }
        },
        "tensorflow.python.kernel_tests.candidate_sampler_ops_test": {
            "RangeSamplerOpsTest": {
                "testTrueCandidates": [
                    "self"
                ],
                "testSampledCandidates": [
                    "self"
                ],
                "testTrueLogExpectedCount": [
                    "self"
                ],
                "testSampledLogExpectedCount": [
                    "self"
                ],
                "testAccidentalHits": [
                    "self"
                ],
                "testSeed": [
                    "self"
                ]
            }
        },
        "tensorflow.python.kernel_tests.summary_audio_op_test": {
            "SummaryAudioOpTest": {
                "_AsSummary": [
                    "self",
                    "s"
                ],
                "_CheckProto": [
                    "self",
                    "audio_summ",
                    "sample_rate",
                    "num_channels",
                    "length_frames"
                ],
                "testAudioSummary": [
                    "self"
                ]
            }
        },
        "tensorflow.python.kernel_tests.transpose_op_test": {
            "TransposeTest": {
                "_np_transpose": [
                    "self",
                    "x",
                    "perm"
                ],
                "_compareCpu": [
                    "self",
                    "x",
                    "p"
                ],
                "_compareGpu": [
                    "self",
                    "x",
                    "p"
                ],
                "_compare": [
                    "self",
                    "x",
                    "use_gpu"
                ],
                "_compare_cpu_gpu": [
                    "self",
                    "x"
                ],
                "_testBoth": [
                    "self",
                    "x"
                ],
                "testRank1": [
                    "self"
                ],
                "test1D": [
                    "self"
                ],
                "testNop": [
                    "self"
                ],
                "testSimple": [
                    "self"
                ],
                "testHalf": [
                    "self"
                ],
                "testFloat": [
                    "self"
                ],
                "testDouble": [
                    "self"
                ],
                "testComplex64": [
                    "self"
                ],
                "testComplex128": [
                    "self"
                ],
                "testInt8": [
                    "self"
                ],
                "testInt16": [
                    "self"
                ],
                "testInt32": [
                    "self"
                ],
                "testInt64": [
                    "self"
                ],
                "testTranspose2DAuto": [
                    "self"
                ],
                "testTransposeShapes": [
                    "self"
                ],
                "testNullTensor": [
                    "self"
                ],
                "_testError": [
                    "self",
                    "x",
                    "p",
                    "err"
                ],
                "testError": [
                    "self"
                ]
            }
        },
        "tensorflow.python.kernel_tests.identity_op_py_test": {
            "IdentityOpTest": {
                "testInt32_6": [
                    "self"
                ],
                "testInt32_2_3": [
                    "self"
                ],
                "testString": [
                    "self"
                ],
                "testIdentityShape": [
                    "self"
                ],
                "testRefIdentityShape": [
                    "self"
                ]
            }
        },
        "tensorflow.python.kernel_tests.priority_queue_test": {
            "PriorityQueueTest": {
                "testRoundTripInsertReadOnceSorts": [
                    "self"
                ],
                "testRoundTripInsertMultiThreadedReadOnceSorts": [
                    "self"
                ],
                "testRoundTripFillsCapacityMultiThreadedEnqueueAndDequeue": [
                    "self"
                ],
                "testRoundTripInsertManyMultiThreadedReadManyMultithreadedSorts": [
                    "self"
                ],
                "testRoundTripInsertManyMultiThreadedReadOnceSorts": [
                    "self"
                ],
                "testRoundTripInsertOnceReadOnceSorts": [
                    "self"
                ],
                "testRoundTripInsertOnceReadManySorts": [
                    "self"
                ],
                "testRoundTripInsertOnceReadOnceLotsSorts": [
                    "self"
                ],
                "testInsertingNonInt64Fails": [
                    "self"
                ],
                "testInsertingNonScalarFails": [
                    "self"
                ]
            }
        },
        "tensorflow.python.kernel_tests.numerics_test": {
            "VerifyTensorAllFiniteTest": {
                "testVerifyTensorAllFiniteSucceeds": [
                    "self"
                ],
                "testVerifyTensorAllFiniteFails": [
                    "self"
                ]
            },
            "NumericsTest": {
                "testInf": [
                    "self"
                ],
                "testNaN": [
                    "self"
                ],
                "testBoth": [
                    "self"
                ],
                "testPassThrough": [
                    "self"
                ]
            }
        },
        "tensorflow.python.kernel_tests.multinomial_op_test": {
            "composed_sampler": [
                "logits",
                "num_samples"
            ],
            "native_op_vs_composed_ops": [
                "batch_size",
                "num_classes",
                "num_samples",
                "num_iters"
            ],
            "MultinomialTest": {
                "testSmallEntropy": [
                    "self"
                ],
                "testOneOpMultipleStepsIndependent": [
                    "self"
                ],
                "testTwoOpsIndependent": [
                    "self"
                ],
                "testTwoOpsSameSeedDrawSameSequences": [
                    "self"
                ],
                "testLargeLogits": [
                    "self"
                ],
                "testSamplingCorrectness": [
                    "self"
                ],
                "_make_ops": [
                    "self",
                    "num_samples",
                    "seed"
                ],
                "_normalize": [
                    "self",
                    "vec"
                ],
                "_do_sampling": [
                    "self",
                    "logits",
                    "num_samples",
                    "sampler"
                ],
                "_chi2": [
                    "self",
                    "expected",
                    "actual"
                ],
                "testEmpty": [
                    "self"
                ],
                "testEmptyClasses": [
                    "self"
                ],
                "testNegativeMinLogits": [
                    "self"
                ]
            },
            "MultinomialGpuTest": {},
            "MultinomialBenchmark": {
                "benchmarkNativeOpVsComposedOps": [
                    "self"
                ]
            }
        },
        "tensorflow.python.kernel_tests.conv3d_transpose_test": {
            "Conv3DTransposeTest": {
                "testConv3DTransposeSingleStride": [
                    "self"
                ],
                "testConv3DTransposeSame": [
                    "self"
                ],
                "testConv3DTransposeValid": [
                    "self"
                ],
                "testGradient": [
                    "self"
                ]
            }
        },
        "tensorflow.python.kernel_tests.spacetodepth_op_test": {
            "SpaceToDepthTest": {
                "_testOne": [
                    "self",
                    "inputs",
                    "block_size",
                    "outputs"
                ],
                "testBasic": [
                    "self"
                ],
                "testLargerInput2x2": [
                    "self"
                ],
                "testLargerInput4x4": [
                    "self"
                ],
                "testDepthInterleaved": [
                    "self"
                ],
                "testDepthInterleavedDepth3": [
                    "self"
                ],
                "testDepthInterleavedLarge": [
                    "self"
                ],
                "testBlockSize2Batch10": [
                    "self"
                ],
                "testNonSquare": [
                    "self"
                ],
                "testInputWrongDimMissingDepth": [
                    "self"
                ],
                "testInputWrongDimMissingBatch": [
                    "self"
                ],
                "testBlockSize0": [
                    "self"
                ],
                "testBlockSizeOne": [
                    "self"
                ],
                "testBlockSizeLarger": [
                    "self"
                ],
                "testBlockSizeNotDivisibleWidth": [
                    "self"
                ],
                "testBlockSizeNotDivisibleHeight": [
                    "self"
                ],
                "testBlockSizeNotDivisibleBoth": [
                    "self"
                ],
                "testUnknownShape": [
                    "self"
                ]
            },
            "SpaceToDepthGradientTest": {
                "_checkGrad": [
                    "self",
                    "x",
                    "block_size"
                ],
                "_compare": [
                    "self",
                    "b",
                    "h",
                    "w",
                    "d",
                    "block_size"
                ],
                "testSmall": [
                    "self"
                ],
                "testSmall2": [
                    "self"
                ]
            }
        },
        "tensorflow.python.kernel_tests.sparse_tensors_map_ops_test": {
            "SparseTensorsMapTest": {
                "_SparseTensorPlaceholder": [
                    "self",
                    "dtype"
                ],
                "_SparseTensorValue_5x6": [
                    "self",
                    "permutation"
                ],
                "_SparseTensorValue_3x4": [
                    "self",
                    "permutation"
                ],
                "_SparseTensorValue_1x1x1": [
                    "self"
                ],
                "testAddTakeMany": [
                    "self"
                ],
                "testFeedAddTakeMany": [
                    "self"
                ],
                "testAddManyTakeManyRoundTrip": [
                    "self"
                ],
                "testDeserializeFailsInconsistentRank": [
                    "self"
                ],
                "testTakeManyFailsWrongInputOp": [
                    "self"
                ]
            },
            "BenchmarkSparseTensorsMapVsSerialization": {
                "benchmarkVeryLarge2DFloatSparseTensor": [
                    "self"
                ]
            }
        },
        "tensorflow.python.kernel_tests.linalg_ops_test": {
            "_random_pd_matrix": [
                "n",
                "rng"
            ],
            "CholeskySolveTest": {
                "setUp": [
                    "self"
                ],
                "test_works_with_five_different_random_pos_def_matrices": [
                    "self"
                ]
            },
            "CholeskySolveGpuTest": {},
            "EyeTest": {
                "test_non_batch_2x2": [
                    "self"
                ],
                "test_non_batch_2x3": [
                    "self"
                ],
                "test_1x3_batch_4x4": [
                    "self"
                ],
                "test_1x3_batch_4x4_dynamic": [
                    "self"
                ],
                "test_1x3_batch_5x4": [
                    "self"
                ],
                "test_1x3_batch_5x4_dynamic": [
                    "self"
                ],
                "test_non_batch_0x0": [
                    "self"
                ],
                "test_non_batch_2x0": [
                    "self"
                ],
                "test_non_batch_0x2": [
                    "self"
                ],
                "test_1x3_batch_0x0": [
                    "self"
                ],
                "test_1x3_batch_2x0": [
                    "self"
                ],
                "test_1x3_batch_0x2": [
                    "self"
                ]
            }
        },
        "tensorflow.python.kernel_tests.reverse_sequence_op_test": {
            "ReverseSequenceTest": {
                "_testReverseSequence": [
                    "self",
                    "x",
                    "batch_dim",
                    "seq_dim",
                    "seq_lengths",
                    "truth",
                    "use_gpu",
                    "expected_err_re"
                ],
                "_testBothReverseSequence": [
                    "self",
                    "x",
                    "batch_dim",
                    "seq_dim",
                    "seq_lengths",
                    "truth",
                    "expected_err_re"
                ],
                "_testBasic": [
                    "self",
                    "dtype",
                    "len_dtype"
                ],
                "testSeqLengthInt32": [
                    "self"
                ],
                "testFloatBasic": [
                    "self"
                ],
                "testDoubleBasic": [
                    "self"
                ],
                "testInt32Basic": [
                    "self"
                ],
                "testInt64Basic": [
                    "self"
                ],
                "testComplex64Basic": [
                    "self"
                ],
                "testComplex128Basic": [
                    "self"
                ],
                "testFloatReverseSequenceGrad": [
                    "self"
                ],
                "testShapeFunctionEdgeCases": [
                    "self"
                ]
            }
        },
        "tensorflow.python.kernel_tests.segment_reduction_ops_test": {
            "SegmentReductionHelper": {
                "_input": [
                    "self",
                    "input_shape",
                    "dtype"
                ],
                "_segmentReduce": [
                    "self",
                    "indices",
                    "x",
                    "op1",
                    "op2",
                    "num_out_rows"
                ],
                "_assertAllClose": [
                    "self",
                    "indices",
                    "np_x",
                    "tf_x"
                ],
                "_mean_cum_op": [
                    "self",
                    "x",
                    "y"
                ],
                "_mean_reduce_op": [
                    "self",
                    "x"
                ]
            },
            "SegmentReductionOpTest": {
                "testValues": [
                    "self"
                ],
                "testSegmentIdsShape": [
                    "self"
                ],
                "testSegmentIdsSize": [
                    "self"
                ],
                "testSegmentIdsValid": [
                    "self"
                ],
                "testSegmentIdsInvalid1": [
                    "self"
                ],
                "testSegmentIdsInvalid2": [
                    "self"
                ],
                "testSegmentIdsInvalid3": [
                    "self"
                ],
                "testSegmentIdsInvalid4": [
                    "self"
                ],
                "testSegmentIdsInvalid5": [
                    "self"
                ],
                "testSegmentIdsInvalid6": [
                    "self"
                ],
                "testSegmentIdsInvalid7": [
                    "self"
                ],
                "testGradient": [
                    "self"
                ]
            },
            "UnsortedSegmentSumTest": {
                "testValues": [
                    "self"
                ],
                "testGradient": [
                    "self"
                ],
                "testGradientMatchesSegmentSum": [
                    "self"
                ],
                "testBadIndices": [
                    "self"
                ],
                "testEmptySecondDimension": [
                    "self"
                ]
            },
            "UnsortedSegmentSumGpuTest": {},
            "SparseSegmentReductionHelper": {
                "_sparse_input": [
                    "self",
                    "input_shape",
                    "num_indices",
                    "dtype"
                ],
                "_sparseSegmentReduce": [
                    "self",
                    "x",
                    "indices",
                    "segment_indices",
                    "op1",
                    "op2"
                ]
            },
            "SparseSegmentReductionOpTest": {
                "setUp": [
                    "self"
                ],
                "testValues": [
                    "self"
                ],
                "testValid": [
                    "self"
                ],
                "testIndicesInvalid1": [
                    "self"
                ],
                "testIndicesInvalid2": [
                    "self"
                ],
                "testSegmentsInvalid1": [
                    "self"
                ],
                "testSegmentsInvalid2": [
                    "self"
                ],
                "testSegmentsInvalid3": [
                    "self"
                ],
                "testSegmentsInvalid4": [
                    "self"
                ],
                "testSegmentsInvalid5": [
                    "self"
                ],
                "testSegmentsInvalid6": [
                    "self"
                ],
                "testSegmentsInvalid7": [
                    "self"
                ],
                "testGradient": [
                    "self"
                ],
                "testGradientValid": [
                    "self"
                ],
                "testGradientIndicesInvalid1": [
                    "self"
                ],
                "testGradientIndicesInvalid2": [
                    "self"
                ],
                "testGradientSegmentsInvalid1": [
                    "self"
                ],
                "testGradientSegmentsInvalid2": [
                    "self"
                ],
                "testGradientSegmentsInvalid3": [
                    "self"
                ],
                "testGradientSegmentsInvalid4": [
                    "self"
                ]
            }
        },
        "tensorflow.python.kernel_tests.fft_ops_test": {
            "FFTOpsTest": {
                "_Compare": [
                    "self",
                    "x",
                    "rank"
                ],
                "_checkGrad": [
                    "self",
                    "func",
                    "x",
                    "y",
                    "use_gpu"
                ],
                "_npFFT": [
                    "self",
                    "x",
                    "rank"
                ],
                "_npIFFT": [
                    "self",
                    "x",
                    "rank"
                ],
                "_tfFFT": [
                    "self",
                    "x",
                    "rank",
                    "use_gpu"
                ],
                "_tfIFFT": [
                    "self",
                    "x",
                    "rank",
                    "use_gpu"
                ],
                "_tfFFTForRank": [
                    "self",
                    "rank"
                ],
                "_tfIFFTForRank": [
                    "self",
                    "rank"
                ],
                "testEmpty": [
                    "self"
                ],
                "testBasic": [
                    "self"
                ],
                "testRandom": [
                    "self"
                ],
                "testError": [
                    "self"
                ],
                "testGrad_Simple": [
                    "self"
                ],
                "testGrad_Random": [
                    "self"
                ]
            }
        },
        "tensorflow.python.kernel_tests.ctc_loss_op_test": {
            "SimpleSparseTensorFrom": [
                "x"
            ],
            "CTCLossTest": {
                "_testCTCLoss": [
                    "self",
                    "inputs",
                    "seq_lens",
                    "labels",
                    "loss_truth",
                    "grad_truth",
                    "expected_err_re"
                ],
                "testBasic": [
                    "self"
                ],
                "test_time_major": [
                    "self"
                ]
            }
        },
        "tensorflow.python.kernel_tests.sparse_split_op_test": {
            "SparseSplitOpTest": {
                "_SparseTensor_4x6": [
                    "self"
                ],
                "_SparseTensor_5x7": [
                    "self"
                ],
                "_SparseTensorValue_3x4x2": [
                    "self"
                ],
                "_SparseTensor_3x4x2": [
                    "self"
                ],
                "testSplitMatrixRows": [
                    "self"
                ],
                "testSplitMatrixUnevenCols": [
                    "self"
                ],
                "testSplitMatrixUnevenRows": [
                    "self"
                ],
                "testSplitAllRows": [
                    "self"
                ],
                "testSplitColumns": [
                    "self"
                ],
                "testSplitAllColumns": [
                    "self"
                ],
                "testSliceConcat": [
                    "self"
                ]
            }
        },
        "tensorflow.python.user_ops.user_ops": {
            "my_fact": []
        },
        "tensorflow.python.user_ops": {},
        "tensorflow.python.util.example_parser_configuration": {
            "extract_example_parser_configuration": [
                "parse_example_op",
                "sess"
            ]
        },
        "tensorflow.python.util.all_util": {
            "make_all": [
                "module_name",
                "doc_string_modules"
            ],
            "reveal_undocumented": [
                "symbol_name",
                "target_module"
            ],
            "remove_undocumented": [
                "module_name",
                "allowed_exception_list",
                "doc_string_modules"
            ]
        },
        "tensorflow.python.util.net_lib": {
            "pick_unused_port_or_die": []
        },
        "tensorflow.python.util.future_api": {},
        "tensorflow.python.util.nest": {
            "_sequence_like": [
                "instance",
                "args"
            ],
            "_yield_flat_nest": [
                "nest"
            ],
            "is_sequence": [
                "seq"
            ],
            "flatten": [
                "nest"
            ],
            "_recursive_assert_same_structure": [
                "nest1",
                "nest2"
            ],
            "assert_same_structure": [
                "nest1",
                "nest2"
            ],
            "flatten_dict_items": [
                "dictionary"
            ],
            "_packed_nest_with_indices": [
                "structure",
                "flat",
                "index"
            ],
            "pack_sequence_as": [
                "structure",
                "flat_sequence"
            ]
        },
        "tensorflow.python.util.net_lib_test": {
            "TestLibTest": {
                "testPickUnusedPortOrDie": [
                    "self"
                ]
            }
        },
        "tensorflow.python.util.deprecation": {
            "_add_deprecated_function_notice_to_docstring": [
                "doc",
                "date",
                "instructions"
            ],
            "_add_deprecated_arg_notice_to_docstring": [
                "doc",
                "date",
                "instructions"
            ],
            "_validate_deprecation_args": [
                "date",
                "instructions"
            ],
            "_call_location": [
                "level"
            ],
            "deprecated": [
                "date",
                "instructions"
            ],
            "deprecated_args": [
                "date",
                "instructions"
            ],
            "deprecated_arg_values": [
                "date",
                "instructions"
            ]
        },
        "tensorflow.python.util.decorator_utils": {
            "get_qualified_name": [
                "function"
            ],
            "add_notice_to_docstring": [
                "doc",
                "instructions",
                "no_doc_str",
                "suffix_str",
                "notice"
            ],
            "validate_callable": [
                "func",
                "decorator_name"
            ]
        },
        "tensorflow.python.util.decorator_utils_test": {
            "_test_function": [
                "unused_arg"
            ],
            "GetQualifiedNameTest": {
                "test_method": [
                    "self"
                ],
                "test_function": [
                    "self"
                ]
            },
            "AddNoticeToDocstringTest": {
                "_check": [
                    "self",
                    "doc",
                    "expected"
                ],
                "test_regular": [
                    "self"
                ],
                "test_brief_only": [
                    "self"
                ],
                "test_no_docstring": [
                    "self"
                ],
                "test_no_empty_line": [
                    "self"
                ]
            },
            "ValidateCallableTest": {
                "test_function": [
                    "self"
                ],
                "test_method": [
                    "self"
                ],
                "test_callable": [
                    "self"
                ],
                "test_partial": [
                    "self"
                ],
                "test_fail_non_callable": [
                    "self"
                ]
            }
        },
        "tensorflow.python.util.deprecation_test": {
            "DeprecationTest": {
                "_assert_subset": [
                    "self",
                    "expected_subset",
                    "actual_set"
                ],
                "test_deprecated_illegal_args": [
                    "self"
                ],
                "test_static_fn_with_doc": [
                    "self",
                    "mock_warning"
                ],
                "test_static_fn_with_one_line_doc": [
                    "self",
                    "mock_warning"
                ],
                "test_static_fn_no_doc": [
                    "self",
                    "mock_warning"
                ],
                "test_instance_fn_with_doc": [
                    "self",
                    "mock_warning"
                ],
                "test_instance_fn_with_one_line_doc": [
                    "self",
                    "mock_warning"
                ],
                "test_instance_fn_no_doc": [
                    "self",
                    "mock_warning"
                ],
                "test_prop_wrong_order": [
                    "self"
                ],
                "test_prop_with_doc": [
                    "self",
                    "mock_warning"
                ],
                "test_prop_no_doc": [
                    "self",
                    "mock_warning"
                ]
            },
            "DeprecatedArgsTest": {
                "_assert_subset": [
                    "self",
                    "expected_subset",
                    "actual_set"
                ],
                "test_deprecated_illegal_args": [
                    "self"
                ],
                "test_deprecated_missing_args": [
                    "self"
                ],
                "test_static_fn_with_doc": [
                    "self",
                    "mock_warning"
                ],
                "test_static_fn_with_one_line_doc": [
                    "self",
                    "mock_warning"
                ],
                "test_static_fn_no_doc": [
                    "self",
                    "mock_warning"
                ],
                "test_varargs": [
                    "self",
                    "mock_warning"
                ],
                "test_kwargs": [
                    "self",
                    "mock_warning"
                ],
                "test_positional_and_named": [
                    "self",
                    "mock_warning"
                ]
            },
            "DeprecatedArgValuesTest": {
                "_assert_subset": [
                    "self",
                    "expected_subset",
                    "actual_set"
                ],
                "test_deprecated_illegal_args": [
                    "self"
                ],
                "test_static_fn_with_doc": [
                    "self",
                    "mock_warning"
                ],
                "test_static_fn_with_one_line_doc": [
                    "self",
                    "mock_warning"
                ],
                "test_static_fn_no_doc": [
                    "self",
                    "mock_warning"
                ]
            }
        },
        "tensorflow.python.util.nest_test": {
            "NestTest": {
                "testFlattenAndPack": [
                    "self"
                ],
                "testIsSequence": [
                    "self"
                ],
                "testFlattenDictItems": [
                    "self"
                ],
                "testAssertSameStructure": [
                    "self"
                ]
            }
        },
        "tensorflow.python.util.example_parser_configuration_test": {
            "ExampleParserConfigurationTest": {
                "testBasic": [
                    "self"
                ]
            }
        },
        "tensorflow.python.util.compat": {
            "as_bytes": [
                "bytes_or_text",
                "encoding"
            ],
            "as_text": [
                "bytes_or_text",
                "encoding"
            ],
            "as_str_any": [
                "value"
            ]
        },
        "tensorflow.python.util": {},
        "tensorflow.python.util.future_api_test": {
            "ExampleParserConfigurationTest": {
                "testBasic": [
                    "self"
                ]
            }
        },
        "tensorflow.python.util.protobuf.compare": {
            "assertProtoEqual": [
                "self",
                "a",
                "b",
                "check_initialized",
                "normalize_numbers",
                "msg"
            ],
            "NormalizeNumberFields": [
                "pb"
            ],
            "_IsMap": [
                "value"
            ],
            "_IsRepeatedContainer": [
                "value"
            ],
            "ProtoEq": [
                "a",
                "b"
            ],
            "ProtoAssertions": {
                "assertProtoEqual": [
                    "self"
                ]
            }
        },
        "tensorflow.python.util.protobuf.compare_test_pb2": {},
        "tensorflow.python.util.protobuf.compare_test": {
            "LargePbs": [],
            "ProtoEqTest": {
                "assertNotEquals": [
                    "self",
                    "a",
                    "b"
                ],
                "assertEquals": [
                    "self",
                    "a",
                    "b"
                ],
                "testPrimitives": [
                    "self"
                ],
                "testEmpty": [
                    "self"
                ],
                "testPrimitiveFields": [
                    "self"
                ],
                "testRepeatedPrimitives": [
                    "self"
                ],
                "testMessage": [
                    "self"
                ],
                "testNestedMessage": [
                    "self"
                ],
                "testTagOrder": [
                    "self"
                ]
            },
            "NormalizeNumbersTest": {
                "testNormalizesInts": [
                    "self"
                ],
                "testNormalizesRepeatedInts": [
                    "self"
                ],
                "testNormalizesFloats": [
                    "self"
                ],
                "testNormalizesRepeatedFloats": [
                    "self"
                ],
                "testNormalizesDoubles": [
                    "self"
                ],
                "testNormalizesMaps": [
                    "self"
                ]
            },
            "AssertTest": {
                "assertProtoEqual": [
                    "self",
                    "a",
                    "b"
                ],
                "assertAll": [
                    "self",
                    "a"
                ],
                "assertSameNotEqual": [
                    "self",
                    "a",
                    "b"
                ],
                "assertNone": [
                    "self",
                    "a",
                    "b",
                    "message"
                ],
                "testCheckInitialized": [
                    "self"
                ],
                "testAssertEqualWithStringArg": [
                    "self"
                ],
                "testNormalizesNumbers": [
                    "self"
                ],
                "testNormalizesFloat": [
                    "self"
                ],
                "testPrimitives": [
                    "self"
                ],
                "testRepeatedPrimitives": [
                    "self"
                ],
                "testMessage": [
                    "self"
                ],
                "testMsgPassdown": [
                    "self"
                ],
                "testRepeatedMessage": [
                    "self"
                ]
            },
            "MixinTests": {
                "testAssertEqualWithStringArg": [
                    "self"
                ]
            }
        },
        "tensorflow.python.util.protobuf": {},
        "tensorflow.python.lib": {},
        "tensorflow.python.lib.io.python_io": {},
        "tensorflow.python.lib.io.tf_record": {
            "tf_record_iterator": [
                "path",
                "options"
            ],
            "TFRecordCompressionType": {},
            "TFRecordOptions": {
                "__init__": [
                    "self",
                    "compression_type"
                ],
                "get_compression_type_string": [
                    "cls",
                    "options"
                ]
            },
            "TFRecordWriter": {
                "__init__": [
                    "self",
                    "path",
                    "options"
                ],
                "__enter__": [
                    "self"
                ],
                "__exit__": [
                    "self",
                    "unused_type",
                    "unused_value",
                    "unused_traceback"
                ],
                "write": [
                    "self",
                    "record"
                ],
                "close": [
                    "self"
                ]
            }
        },
        "tensorflow.python.lib.io": {},
        "tensorflow.python.lib.io.file_io_test": {
            "FileIoTest": {
                "setUp": [
                    "self"
                ],
                "tearDown": [
                    "self"
                ],
                "testFileDoesntExist": [
                    "self"
                ],
                "testWriteToString": [
                    "self"
                ],
                "testAtomicWriteStringToFile": [
                    "self"
                ],
                "testAppend": [
                    "self"
                ],
                "testMultipleFiles": [
                    "self"
                ],
                "testMultipleWrites": [
                    "self"
                ],
                "testFileWriteBadMode": [
                    "self"
                ],
                "testFileReadBadMode": [
                    "self"
                ],
                "testFileDelete": [
                    "self"
                ],
                "testFileDeleteFail": [
                    "self"
                ],
                "testGetMatchingFiles": [
                    "self"
                ],
                "testCreateRecursiveDir": [
                    "self"
                ],
                "testCopy": [
                    "self"
                ],
                "testCopyOverwrite": [
                    "self"
                ],
                "testCopyOverwriteFalse": [
                    "self"
                ],
                "testRename": [
                    "self"
                ],
                "testRenameOverwrite": [
                    "self"
                ],
                "testRenameOverwriteFalse": [
                    "self"
                ],
                "testDeleteRecursivelyFail": [
                    "self"
                ],
                "testIsDirectory": [
                    "self"
                ],
                "testListDirectory": [
                    "self"
                ],
                "testListDirectoryFailure": [
                    "self"
                ],
                "_setupWalkDirectories": [
                    "self",
                    "dir_path"
                ],
                "testWalkInOrder": [
                    "self"
                ],
                "testWalkPostOrder": [
                    "self"
                ],
                "testWalkFailure": [
                    "self"
                ],
                "testStat": [
                    "self"
                ],
                "testReadLine": [
                    "self"
                ],
                "testRead": [
                    "self"
                ],
                "testTell": [
                    "self"
                ],
                "testSeek": [
                    "self"
                ],
                "testReadingIterator": [
                    "self"
                ],
                "testReadlines": [
                    "self"
                ]
            }
        },
        "tensorflow.python.lib.io.file_io": {
            "file_exists": [
                "filename"
            ],
            "delete_file": [
                "filename"
            ],
            "read_file_to_string": [
                "filename"
            ],
            "write_string_to_file": [
                "filename",
                "file_content"
            ],
            "get_matching_files": [
                "filename"
            ],
            "create_dir": [
                "dirname"
            ],
            "recursive_create_dir": [
                "dirname"
            ],
            "copy": [
                "oldpath",
                "newpath",
                "overwrite"
            ],
            "rename": [
                "oldname",
                "newname",
                "overwrite"
            ],
            "atomic_write_string_to_file": [
                "filename",
                "contents"
            ],
            "delete_recursively": [
                "dirname"
            ],
            "is_directory": [
                "dirname"
            ],
            "list_directory": [
                "dirname"
            ],
            "walk": [
                "top",
                "in_order"
            ],
            "stat": [
                "filename"
            ],
            "FileIO": {
                "__init__": [
                    "self",
                    "name",
                    "mode"
                ],
                "name": [
                    "self"
                ],
                "mode": [
                    "self"
                ],
                "_preread_check": [
                    "self"
                ],
                "_prewrite_check": [
                    "self"
                ],
                "size": [
                    "self"
                ],
                "write": [
                    "self",
                    "file_content"
                ],
                "read": [
                    "self",
                    "n"
                ],
                "seek": [
                    "self",
                    "position"
                ],
                "readline": [
                    "self"
                ],
                "readlines": [
                    "self"
                ],
                "tell": [
                    "self"
                ],
                "__enter__": [
                    "self"
                ],
                "__exit__": [
                    "self",
                    "unused_type",
                    "unused_value",
                    "unused_traceback"
                ],
                "__iter__": [
                    "self"
                ],
                "next": [
                    "self"
                ],
                "__next__": [
                    "self"
                ],
                "flush": [
                    "self"
                ],
                "close": [
                    "self"
                ]
            }
        },
        "tensorflow.python.lib.core": {},
        "tensorflow.python.framework.sparse_tensor": {
            "SparseTensor": {
                "from_value": [
                    "cls",
                    "sparse_tensor_value"
                ],
                "__init__": [
                    "self",
                    "indices",
                    "values",
                    "shape"
                ],
                "get_shape": [
                    "self"
                ],
                "indices": [
                    "self"
                ],
                "values": [
                    "self"
                ],
                "op": [
                    "self"
                ],
                "dtype": [
                    "self"
                ],
                "shape": [
                    "self"
                ],
                "graph": [
                    "self"
                ],
                "__str__": [
                    "self"
                ],
                "eval": [
                    "self",
                    "feed_dict",
                    "session"
                ],
                "_override_operator": [
                    "operator",
                    "func"
                ]
            }
        },
        "tensorflow.python.framework.common_shapes": {
            "scalar_shape": [
                "unused_op"
            ],
            "unchanged_shape": [
                "op"
            ],
            "unchanged_shape_with_rank": [
                "rank"
            ],
            "unchanged_shape_with_rank_at_least": [
                "rank"
            ],
            "unchanged_shape_with_rank_at_most": [
                "rank"
            ],
            "matmul_shape": [
                "op"
            ],
            "get_conv_output_size": [
                "input_size",
                "filter_size",
                "strides",
                "padding_type"
            ],
            "get2d_conv_output_size": [
                "input_height",
                "input_width",
                "filter_height",
                "filter_width",
                "row_stride",
                "col_stride",
                "padding_type"
            ],
            "conv2d_shape": [
                "op"
            ],
            "depthwise_conv2d_native_shape": [
                "op"
            ],
            "separable_conv2d_shape": [
                "op"
            ],
            "avg_pool_shape": [
                "op"
            ],
            "max_pool_shape": [
                "op"
            ],
            "no_outputs": [
                "unused_op"
            ],
            "unknown_shape": [
                "op"
            ],
            "broadcast_shape": [
                "shape_x",
                "shape_y"
            ],
            "call_cpp_shape_fn": [
                "op",
                "input_tensors_needed",
                "input_tensors_as_shapes_needed",
                "debug_python_shape_fn",
                "require_shape_fn"
            ],
            "_call_cpp_shape_fn_impl": [
                "op",
                "input_tensors_needed",
                "input_tensors_as_shapes_needed",
                "debug_python_shape_fn",
                "require_shape_fn"
            ]
        },
        "tensorflow.python.framework.graph_util_impl": {
            "_is_variable_op": [
                "op"
            ],
            "set_cpu0": [
                "device_string"
            ],
            "must_run_on_cpu": [
                "node",
                "pin_variables_on_cpu"
            ],
            "_node_name": [
                "n"
            ],
            "extract_sub_graph": [
                "graph_def",
                "dest_nodes"
            ],
            "tensor_shape_from_node_def_name": [
                "graph",
                "input_name"
            ],
            "convert_variables_to_constants": [
                "sess",
                "input_graph_def",
                "output_node_names",
                "variable_names_whitelist"
            ],
            "remove_training_nodes": [
                "input_graph"
            ]
        },
        "tensorflow.python.framework.gen_docs_combined": {
            "module_names": [],
            "find_module": [
                "base_module",
                "name"
            ],
            "get_module_to_name": [
                "names"
            ],
            "all_libraries": [
                "module_to_name",
                "members",
                "documented"
            ],
            "main": [
                "unused_argv"
            ]
        },
        "tensorflow.python.framework.contrib_test": {
            "ContribTest": {
                "testContrib": [
                    "self"
                ],
                "testLayers": [
                    "self"
                ],
                "testLinearOptimizer": [
                    "self"
                ]
            }
        },
        "tensorflow.python.framework.ops": {
            "_override_helper": [
                "clazz_object",
                "operator",
                "func"
            ],
            "_convert_stack": [
                "stack"
            ],
            "_extract_stack": [],
            "_as_graph_element": [
                "obj"
            ],
            "is_dense_tensor_like": [
                "t"
            ],
            "register_dense_tensor_like_type": [
                "tensor_type"
            ],
            "_TensorTensorConversionFunction": [
                "t",
                "dtype",
                "name",
                "as_ref"
            ],
            "convert_to_tensor": [
                "value",
                "dtype",
                "name",
                "as_ref",
                "preferred_dtype"
            ],
            "convert_n_to_tensor": [
                "values",
                "dtype",
                "name",
                "as_ref",
                "preferred_dtype"
            ],
            "convert_to_tensor_or_indexed_slices": [
                "value",
                "dtype",
                "name",
                "as_ref"
            ],
            "convert_n_to_tensor_or_indexed_slices": [
                "values",
                "dtype",
                "name",
                "as_ref"
            ],
            "register_tensor_conversion_function": [
                "base_type",
                "conversion_func",
                "priority"
            ],
            "_device_string": [
                "dev_spec"
            ],
            "_NodeDef": [
                "op_type",
                "name",
                "device",
                "attrs"
            ],
            "NotDifferentiable": [
                "op_type"
            ],
            "get_gradient_function": [
                "op"
            ],
            "_set_call_cpp_shape_fn": [
                "call_cpp_shape_fn"
            ],
            "set_shapes_for_outputs": [
                "op"
            ],
            "get_stats_for_node_def": [
                "graph",
                "node",
                "statistic_type"
            ],
            "device": [
                "device_name_or_function"
            ],
            "container": [
                "container_name"
            ],
            "colocate_with": [
                "op",
                "ignore_existing"
            ],
            "control_dependencies": [
                "control_inputs"
            ],
            "default_session": [
                "session"
            ],
            "get_default_session": [],
            "_eval_using_default_session": [
                "tensors",
                "feed_dict",
                "graph",
                "session"
            ],
            "_run_using_default_session": [
                "operation",
                "feed_dict",
                "graph",
                "session"
            ],
            "reset_default_graph": [],
            "get_default_graph": [],
            "_assert_same_graph": [
                "original_item",
                "item"
            ],
            "_get_graph_from_inputs": [
                "op_input_list",
                "graph"
            ],
            "add_to_collection": [
                "name",
                "value"
            ],
            "add_to_collections": [
                "names",
                "value"
            ],
            "get_collection_ref": [
                "key"
            ],
            "get_collection": [
                "key",
                "scope"
            ],
            "get_all_collection_keys": [],
            "name_scope": [
                "name",
                "default_name",
                "values"
            ],
            "strip_name_scope": [
                "name",
                "export_scope"
            ],
            "prepend_name_scope": [
                "name",
                "import_scope"
            ],
            "op_scope": [
                "values",
                "name",
                "default_name"
            ],
            "register_proto_function": [
                "collection_name",
                "proto_type",
                "to_proto",
                "from_proto"
            ],
            "get_collection_proto_type": [
                "collection_name"
            ],
            "get_to_proto_function": [
                "collection_name"
            ],
            "get_from_proto_function": [
                "collection_name"
            ],
            "_operation_conversion_error": [
                "op",
                "dtype",
                "name",
                "as_ref"
            ],
            "_TensorLike": {},
            "Tensor": {
                "__init__": [
                    "self",
                    "op",
                    "value_index",
                    "dtype"
                ],
                "op": [
                    "self"
                ],
                "dtype": [
                    "self"
                ],
                "graph": [
                    "self"
                ],
                "name": [
                    "self"
                ],
                "device": [
                    "self"
                ],
                "_shape_as_list": [
                    "self"
                ],
                "get_shape": [
                    "self"
                ],
                "set_shape": [
                    "self",
                    "shape"
                ],
                "value_index": [
                    "self"
                ],
                "consumers": [
                    "self"
                ],
                "_add_consumer": [
                    "self",
                    "consumer"
                ],
                "_as_node_def_input": [
                    "self"
                ],
                "__str__": [
                    "self"
                ],
                "__repr__": [
                    "self"
                ],
                "__hash__": [
                    "self"
                ],
                "__eq__": [
                    "self",
                    "other"
                ],
                "_override_operator": [
                    "operator",
                    "func"
                ],
                "__iter__": [
                    "self"
                ],
                "__bool__": [
                    "self"
                ],
                "__nonzero__": [
                    "self"
                ],
                "eval": [
                    "self",
                    "feed_dict",
                    "session"
                ]
            },
            "IndexedSlices": {
                "__init__": [
                    "self",
                    "values",
                    "indices",
                    "dense_shape"
                ],
                "values": [
                    "self"
                ],
                "indices": [
                    "self"
                ],
                "dense_shape": [
                    "self"
                ],
                "name": [
                    "self"
                ],
                "device": [
                    "self"
                ],
                "op": [
                    "self"
                ],
                "dtype": [
                    "self"
                ],
                "graph": [
                    "self"
                ],
                "__str__": [
                    "self"
                ],
                "__neg__": [
                    "self"
                ]
            },
            "Operation": {
                "__init__": [
                    "self",
                    "node_def",
                    "g",
                    "inputs",
                    "output_types",
                    "control_inputs",
                    "input_types",
                    "original_op",
                    "op_def"
                ],
                "colocation_groups": [
                    "self"
                ],
                "values": [
                    "self"
                ],
                "_get_control_flow_context": [
                    "self"
                ],
                "_set_control_flow_context": [
                    "self",
                    "context"
                ],
                "name": [
                    "self"
                ],
                "_id": [
                    "self"
                ],
                "device": [
                    "self"
                ],
                "_set_device": [
                    "self",
                    "device"
                ],
                "_add_input": [
                    "self",
                    "tensor",
                    "dtype"
                ],
                "_update_input": [
                    "self",
                    "index",
                    "tensor",
                    "dtype"
                ],
                "_add_control_inputs": [
                    "self",
                    "ops"
                ],
                "_add_control_input": [
                    "self",
                    "op"
                ],
                "_recompute_node_def": [
                    "self"
                ],
                "__str__": [
                    "self"
                ],
                "outputs": [
                    "self"
                ],
                "inputs": [
                    "self"
                ],
                "_input_dtypes": [
                    "self"
                ],
                "control_inputs": [
                    "self"
                ],
                "type": [
                    "self"
                ],
                "graph": [
                    "self"
                ],
                "node_def": [
                    "self"
                ],
                "op_def": [
                    "self"
                ],
                "traceback": [
                    "self"
                ],
                "get_attr": [
                    "self",
                    "name"
                ],
                "run": [
                    "self",
                    "feed_dict",
                    "session"
                ]
            },
            "RegisterGradient": {
                "__init__": [
                    "self",
                    "op_type"
                ],
                "__call__": [
                    "self",
                    "f"
                ]
            },
            "RegisterShape": {
                "__init__": [
                    "self",
                    "op_type"
                ],
                "__call__": [
                    "self",
                    "f"
                ]
            },
            "OpStats": {
                "__init__": [
                    "self",
                    "statistic_type",
                    "value"
                ],
                "statistic_type": [
                    "self",
                    "statistic_type"
                ],
                "value": [
                    "self",
                    "value"
                ],
                "__iadd__": [
                    "self",
                    "other"
                ]
            },
            "RegisterStatistics": {
                "__init__": [
                    "self",
                    "op_type",
                    "statistic_type"
                ],
                "__call__": [
                    "self",
                    "f"
                ]
            },
            "Graph": {
                "__init__": [
                    "self"
                ],
                "_check_not_finalized": [
                    "self"
                ],
                "_add_op": [
                    "self",
                    "op"
                ],
                "version": [
                    "self"
                ],
                "graph_def_versions": [
                    "self"
                ],
                "seed": [
                    "self",
                    "seed"
                ],
                "finalized": [
                    "self"
                ],
                "finalize": [
                    "self"
                ],
                "_unsafe_unfinalize": [
                    "self"
                ],
                "_get_control_flow_context": [
                    "self"
                ],
                "_set_control_flow_context": [
                    "self",
                    "context"
                ],
                "_as_graph_def": [
                    "self",
                    "from_version",
                    "add_shapes"
                ],
                "as_graph_def": [
                    "self",
                    "from_version",
                    "add_shapes"
                ],
                "_is_function": [
                    "self",
                    "name"
                ],
                "_get_function": [
                    "self",
                    "name"
                ],
                "_add_function": [
                    "self",
                    "function"
                ],
                "building_function": [
                    "self"
                ],
                "create_op": [
                    "self",
                    "op_type",
                    "inputs",
                    "dtypes",
                    "input_types",
                    "name",
                    "attrs",
                    "op_def",
                    "compute_shapes",
                    "compute_device"
                ],
                "as_graph_element": [
                    "self",
                    "obj",
                    "allow_tensor",
                    "allow_operation"
                ],
                "_as_graph_element_locked": [
                    "self",
                    "obj",
                    "allow_tensor",
                    "allow_operation"
                ],
                "get_operations": [
                    "self"
                ],
                "get_operation_by_name": [
                    "self",
                    "name"
                ],
                "get_tensor_by_name": [
                    "self",
                    "name"
                ],
                "_next_id": [
                    "self"
                ],
                "_last_id": [
                    "self"
                ],
                "as_default": [
                    "self"
                ],
                "add_to_collection": [
                    "self",
                    "name",
                    "value"
                ],
                "add_to_collections": [
                    "self",
                    "names",
                    "value"
                ],
                "get_collection_ref": [
                    "self",
                    "name"
                ],
                "get_collection": [
                    "self",
                    "name",
                    "scope"
                ],
                "get_all_collection_keys": [
                    "self"
                ],
                "clear_collection": [
                    "self",
                    "name"
                ],
                "_original_op": [
                    "self",
                    "op"
                ],
                "name_scope": [
                    "self",
                    "name"
                ],
                "unique_name": [
                    "self",
                    "name",
                    "mark_as_used"
                ],
                "colocate_with": [
                    "self",
                    "op",
                    "ignore_existing"
                ],
                "device": [
                    "self",
                    "device_name_or_function"
                ],
                "_apply_device_functions": [
                    "self",
                    "op"
                ],
                "container": [
                    "self",
                    "container_name"
                ],
                "_push_control_dependencies_controller": [
                    "self",
                    "controller"
                ],
                "_pop_control_dependencies_controller": [
                    "self",
                    "controller"
                ],
                "_current_control_dependencies": [
                    "self"
                ],
                "_control_dependencies_for_inputs": [
                    "self",
                    "input_tensors"
                ],
                "_record_op_seen_by_control_dependencies": [
                    "self",
                    "op"
                ],
                "control_dependencies": [
                    "self",
                    "control_inputs"
                ],
                "_attr_scope": [
                    "self",
                    "attr_map"
                ],
                "_kernel_label_map": [
                    "self",
                    "op_to_kernel_label_map"
                ],
                "gradient_override_map": [
                    "self",
                    "op_type_map"
                ],
                "prevent_feeding": [
                    "self",
                    "tensor"
                ],
                "is_feedable": [
                    "self",
                    "tensor"
                ],
                "prevent_fetching": [
                    "self",
                    "op"
                ],
                "is_fetchable": [
                    "self",
                    "tensor_or_op"
                ]
            },
            "_DefaultStack": {
                "__init__": [
                    "self"
                ],
                "get_default": [
                    "self"
                ],
                "reset": [
                    "self"
                ],
                "enforce_nesting": [
                    "self",
                    "value"
                ],
                "get_controller": [
                    "self",
                    "default"
                ]
            },
            "_DefaultGraphStack": {
                "__init__": [
                    "self"
                ],
                "get_default": [
                    "self"
                ],
                "_GetGlobalDefaultGraph": [
                    "self"
                ],
                "reset": [
                    "self"
                ]
            },
            "GraphKeys": {
                "VARIABLES": [
                    "self"
                ]
            }
        },
        "tensorflow.python.framework.cpp_shape_inference_pb2": {},
        "tensorflow.python.framework.ops_test": {
            "_apply_op": [
                "g"
            ],
            "an_op": [
                "g"
            ],
            "copy_op": [
                "x"
            ],
            "_CopyGrad": [
                "op",
                "x_grad"
            ],
            "_CopyOverrideGrad": [
                "op",
                "x_grad"
            ],
            "_calc_a_forward_flops": [
                "unused_graph",
                "unused_node"
            ],
            "ResourceTest": {
                "testBuildGraph": [
                    "self"
                ],
                "testInitialize": [
                    "self"
                ]
            },
            "TensorTest": {
                "testShape": [
                    "self"
                ],
                "testIterable": [
                    "self"
                ]
            },
            "IndexedSlicesTest": {
                "testToTensor": [
                    "self"
                ],
                "testNegation": [
                    "self"
                ],
                "testScalarMul": [
                    "self"
                ]
            },
            "NodeDefConstructorTest": {
                "testNoArgs": [
                    "self"
                ],
                "testArgs": [
                    "self"
                ]
            },
            "OperationTest": {
                "testNoInputs": [
                    "self"
                ],
                "testNoOutputs": [
                    "self"
                ],
                "testInputsAndOutputs": [
                    "self"
                ],
                "testDeviceObject": [
                    "self"
                ],
                "testReferenceInput": [
                    "self"
                ],
                "testInvalidNames": [
                    "self"
                ],
                "testNoShapeFunction": [
                    "self"
                ],
                "testConvertToTensorNestedArray": [
                    "self"
                ],
                "testConvertToTensorNestedTuple": [
                    "self"
                ],
                "testConvertToTensorNestedTensors": [
                    "self"
                ],
                "testConvertToTensorNestedMix": [
                    "self"
                ],
                "testConvertToTensorPreferred": [
                    "self"
                ],
                "testConvertToInvalidTensorType": [
                    "self"
                ],
                "testNoConvert": [
                    "self"
                ]
            },
            "CreateOpTest": {
                "testNodeDefArgs": [
                    "self"
                ],
                "testReferenceInput": [
                    "self"
                ],
                "testFinalized": [
                    "self"
                ]
            },
            "ApplyOpTest": {
                "testNodeDefArgs": [
                    "self"
                ],
                "testReferenceInput": [
                    "self"
                ]
            },
            "NameStackTest": {
                "testBasics": [
                    "self"
                ],
                "testNameAndVariableScope": [
                    "self"
                ],
                "testOutOfOrderUniqueName": [
                    "self"
                ],
                "testInvalidNameRaisesError": [
                    "self"
                ]
            },
            "NameTest": {
                "testGenerateName": [
                    "self"
                ],
                "testNameScope": [
                    "self"
                ]
            },
            "DeviceTest": {
                "testNoDevice": [
                    "self"
                ],
                "testDevicePartialString": [
                    "self"
                ],
                "testDeviceFull": [
                    "self"
                ],
                "testNesting": [
                    "self"
                ],
                "testNestingString": [
                    "self"
                ],
                "testNestingOverrideGpuCpu": [
                    "self"
                ],
                "testNestingWithMergeDeviceFunction": [
                    "self"
                ],
                "testNestingWithDeviceStrings": [
                    "self"
                ],
                "testNestingWithDeviceStringWildcard": [
                    "self"
                ],
                "testNoneClearsDefault": [
                    "self"
                ],
                "testNoneIgnoresOuterDeviceFunction": [
                    "self"
                ],
                "_overwritingDeviceFunction": [
                    "self",
                    "unused_op"
                ],
                "testOverwritingBehavior": [
                    "self"
                ]
            },
            "ObjectWithName": {
                "__init__": [
                    "self",
                    "name"
                ],
                "name": [
                    "self"
                ]
            },
            "CollectionTest": {
                "test_add_to_collection": [
                    "self"
                ],
                "test_add_to_collections_uniquify": [
                    "self"
                ],
                "test_add_to_collections_from_list": [
                    "self"
                ],
                "test_add_to_collections_from_tuple": [
                    "self"
                ],
                "test_add_to_collections_from_generator": [
                    "self"
                ],
                "test_add_to_collections_from_set": [
                    "self"
                ],
                "test_add_to_collections_from_string": [
                    "self"
                ],
                "test_default_graph": [
                    "self"
                ]
            },
            "RegistrationTest": {
                "testRegisterGradients": [
                    "self"
                ],
                "testOverrideGradients": [
                    "self"
                ],
                "testNonExistentOverride": [
                    "self"
                ]
            },
            "ComparisonTest": {
                "testMembershipAllowed": [
                    "self"
                ]
            },
            "ControlDependenciesTest": {
                "testBasic": [
                    "self"
                ],
                "testBasicWithConversion": [
                    "self"
                ],
                "testNested": [
                    "self"
                ],
                "testClear": [
                    "self"
                ],
                "testComplex": [
                    "self"
                ],
                "testRepeatedDependency": [
                    "self"
                ],
                "testNoControlDependencyWithDataDependency": [
                    "self"
                ]
            },
            "OpScopeTest": {
                "testNoScopeName": [
                    "self"
                ],
                "testEmptyScopeName": [
                    "self"
                ],
                "testDefaultScopeName": [
                    "self"
                ],
                "_testGraphElements": [
                    "self",
                    "graph_elements"
                ],
                "testTensor": [
                    "self"
                ],
                "testSparseTensor": [
                    "self"
                ],
                "testVariable": [
                    "self"
                ]
            },
            "GraphTest": {
                "setUp": [
                    "self"
                ],
                "_AssertDefault": [
                    "self",
                    "expected"
                ],
                "testGraphContextManager": [
                    "self"
                ],
                "testDefaultGraph": [
                    "self"
                ],
                "testAsGraphElementConversions": [
                    "self"
                ]
            },
            "AttrScopeTest": {
                "_get_test_attrs": [
                    "self"
                ],
                "testNoLabel": [
                    "self"
                ],
                "testLabelMap": [
                    "self"
                ]
            },
            "KernelLabelTest": {
                "testNoLabel": [
                    "self"
                ],
                "testLabelMap": [
                    "self"
                ]
            },
            "AsGraphDefTest": {
                "testGraphDefVersion": [
                    "self"
                ],
                "testAddShapes": [
                    "self"
                ]
            },
            "StatisticsTest": {
                "testRegisteredNode": [
                    "self"
                ],
                "testUnregisteredNode": [
                    "self"
                ],
                "testAccumulateStatistics": [
                    "self"
                ]
            },
            "ColocationGroupTest": {
                "testBasic": [
                    "self"
                ],
                "testColocationDeviceInteraction": [
                    "self"
                ],
                "testLocationOverrides": [
                    "self"
                ],
                "testNestedColocateWith": [
                    "self"
                ],
                "testMultiColocationGroups": [
                    "self"
                ],
                "testColocationIgnoreStack": [
                    "self"
                ],
                "testColocateVariables": [
                    "self"
                ],
                "testInconsistentDeviceWithinColocate": [
                    "self"
                ]
            },
            "DeprecatedTest": {
                "testSuccess": [
                    "self"
                ],
                "_error": [
                    "self"
                ],
                "testGraphConstructionFail": [
                    "self"
                ],
                "testGraphExecutionFail": [
                    "self"
                ]
            },
            "DenseTensorLikeTypeTest": {
                "testSuccess": [
                    "self"
                ],
                "testBadClass": [
                    "self"
                ]
            },
            "NameScopeTest": {
                "testStripAndPrependScope": [
                    "self"
                ]
            }
        },
        "tensorflow.python.framework.function_test": {
            "_OptimizerOptions": [],
            "Linear": [
                "w",
                "b",
                "x"
            ],
            "Linear2": [
                "w1",
                "b1",
                "w2",
                "b2",
                "x"
            ],
            "FunctionTest": {
                "testDefineFunction2Args": [
                    "self"
                ],
                "testGradientFunc": [
                    "self"
                ],
                "testTanhSymGrad": [
                    "self"
                ],
                "testCustomGradient": [
                    "self"
                ],
                "testCustomGradientError": [
                    "self"
                ],
                "testSymGradShape": [
                    "self"
                ],
                "testSymGradAttr": [
                    "self"
                ],
                "testZNoDepOnY": [
                    "self"
                ],
                "testDefineFunctionNoArgs": [
                    "self"
                ],
                "testDefineFunctionNames": [
                    "self"
                ],
                "testNoOp": [
                    "self"
                ],
                "testAssertOp": [
                    "self"
                ],
                "testAssertWrapper": [
                    "self"
                ],
                "testVar": [
                    "self"
                ],
                "testDefineErrors": [
                    "self"
                ],
                "testCallErrors": [
                    "self"
                ],
                "testFunctionDecorator": [
                    "self"
                ],
                "testNestedFunction": [
                    "self"
                ],
                "testNestedDefinedFunction": [
                    "self"
                ],
                "testUnusedFunction": [
                    "self"
                ],
                "testReduction": [
                    "self"
                ],
                "testDeclareTypeMistake": [
                    "self"
                ],
                "testCapture": [
                    "self"
                ],
                "testCaptureControls": [
                    "self"
                ],
                "testStableName": [
                    "self"
                ]
            },
            "FunctionOverloadTest": {
                "testBasic": [
                    "self"
                ],
                "testGradient": [
                    "self"
                ],
                "testDocString": [
                    "self"
                ]
            },
            "UnrollLSTMTest": {
                "_Weights": [
                    "self"
                ],
                "_Input": [
                    "self"
                ],
                "LSTMCell": [
                    "cls",
                    "x",
                    "mprev",
                    "cprev",
                    "weights"
                ],
                "_BuildForward": [
                    "self",
                    "weights",
                    "inp",
                    "mode"
                ],
                "testUnrollLSTM": [
                    "self"
                ],
                "testUnrollLSTMGrad": [
                    "self"
                ]
            },
            "FunctionInlineControlTest": {
                "testFoo": [
                    "self"
                ]
            },
            "ModuleFunctionTest": {
                "testBasic": [
                    "self"
                ]
            },
            "VariableHoistingTest": {
                "_testSimpleModel": [
                    "self",
                    "use_forward_func"
                ],
                "testBasic": [
                    "self"
                ]
            }
        },
        "tensorflow.python.framework.device_test": {
            "DeviceTest": {
                "testEmpty": [
                    "self"
                ],
                "testConstructor": [
                    "self"
                ],
                "testto_string": [
                    "self"
                ],
                "testParse": [
                    "self"
                ],
                "testFromString": [
                    "self"
                ],
                "testMerge": [
                    "self"
                ],
                "testCanonicalName": [
                    "self"
                ],
                "testCheckValid": [
                    "self"
                ]
            }
        },
        "tensorflow.python.framework.subscribe_test": {
            "SubscribeTest": {
                "testSideEffect": [
                    "self"
                ],
                "testCaching": [
                    "self"
                ]
            }
        },
        "tensorflow.python.framework.errors_impl": {
            "exception_type_from_error_code": [
                "error_code"
            ],
            "error_code_from_exception_type": [
                "cls"
            ],
            "_make_specific_exception": [
                "node_def",
                "op",
                "message",
                "error_code"
            ],
            "raise_exception_on_not_ok_status": [],
            "OpError": {
                "__init__": [
                    "self",
                    "node_def",
                    "op",
                    "message",
                    "error_code"
                ],
                "message": [
                    "self"
                ],
                "op": [
                    "self"
                ],
                "error_code": [
                    "self"
                ],
                "node_def": [
                    "self"
                ],
                "__str__": [
                    "self"
                ]
            },
            "CancelledError": {
                "__init__": [
                    "self",
                    "node_def",
                    "op",
                    "message"
                ]
            },
            "UnknownError": {
                "__init__": [
                    "self",
                    "node_def",
                    "op",
                    "message",
                    "error_code"
                ]
            },
            "InvalidArgumentError": {
                "__init__": [
                    "self",
                    "node_def",
                    "op",
                    "message"
                ]
            },
            "DeadlineExceededError": {
                "__init__": [
                    "self",
                    "node_def",
                    "op",
                    "message"
                ]
            },
            "NotFoundError": {
                "__init__": [
                    "self",
                    "node_def",
                    "op",
                    "message"
                ]
            },
            "AlreadyExistsError": {
                "__init__": [
                    "self",
                    "node_def",
                    "op",
                    "message"
                ]
            },
            "PermissionDeniedError": {
                "__init__": [
                    "self",
                    "node_def",
                    "op",
                    "message"
                ]
            },
            "UnauthenticatedError": {
                "__init__": [
                    "self",
                    "node_def",
                    "op",
                    "message"
                ]
            },
            "ResourceExhaustedError": {
                "__init__": [
                    "self",
                    "node_def",
                    "op",
                    "message"
                ]
            },
            "FailedPreconditionError": {
                "__init__": [
                    "self",
                    "node_def",
                    "op",
                    "message"
                ]
            },
            "AbortedError": {
                "__init__": [
                    "self",
                    "node_def",
                    "op",
                    "message"
                ]
            },
            "OutOfRangeError": {
                "__init__": [
                    "self",
                    "node_def",
                    "op",
                    "message"
                ]
            },
            "UnimplementedError": {
                "__init__": [
                    "self",
                    "node_def",
                    "op",
                    "message"
                ]
            },
            "InternalError": {
                "__init__": [
                    "self",
                    "node_def",
                    "op",
                    "message"
                ]
            },
            "UnavailableError": {
                "__init__": [
                    "self",
                    "node_def",
                    "op",
                    "message"
                ]
            },
            "DataLossError": {
                "__init__": [
                    "self",
                    "node_def",
                    "op",
                    "message"
                ]
            }
        },
        "tensorflow.python.framework.proto_test": {
            "ProtoTest": {
                "_testLargeProto": [
                    "self"
                ]
            }
        },
        "tensorflow.python.framework.tensor_shape_test": {
            "DimensionTest": {
                "testDimension": [
                    "self"
                ],
                "testUnknownDimension": [
                    "self"
                ],
                "testKnownAndUnknownDimensions": [
                    "self"
                ],
                "testAsDimension": [
                    "self"
                ],
                "testEquality": [
                    "self"
                ],
                "testInequality": [
                    "self"
                ],
                "testRepr": [
                    "self"
                ],
                "testStr": [
                    "self"
                ]
            },
            "ShapeTest": {
                "testUnknownShape": [
                    "self"
                ],
                "testFullyDefinedShape": [
                    "self"
                ],
                "testPartiallyDefinedShape": [
                    "self"
                ],
                "testMergeFullShapes": [
                    "self"
                ],
                "testMergePartialShapes": [
                    "self"
                ],
                "testMergeFullAndUnknownShape": [
                    "self"
                ],
                "testSlice": [
                    "self"
                ],
                "testConcatenate": [
                    "self"
                ],
                "testHelpers": [
                    "self"
                ],
                "testTruedivFails": [
                    "self"
                ],
                "testConvertFromProto": [
                    "self"
                ],
                "testStr": [
                    "self"
                ],
                "testAsProto": [
                    "self"
                ],
                "testEquality": [
                    "self"
                ],
                "testAsList": [
                    "self"
                ]
            }
        },
        "tensorflow.python.framework.framework_lib": {},
        "tensorflow.python.framework.importer_test": {
            "_unknown_shape": [
                "op"
            ],
            "ImportGraphDefTest": {
                "_MakeGraphDef": [
                    "self",
                    "text",
                    "producer",
                    "min_consumer"
                ],
                "testBasic": [
                    "self"
                ],
                "testInputMap": [
                    "self"
                ],
                "testInputMapBytes": [
                    "self"
                ],
                "testInputMapUnicode": [
                    "self"
                ],
                "testImplicitZerothOutput": [
                    "self"
                ],
                "testInputMapImplicitZerothOutput": [
                    "self"
                ],
                "testWithControlDependency": [
                    "self"
                ],
                "testWithRefs": [
                    "self"
                ],
                "testCyclic": [
                    "self"
                ],
                "testTypeMismatchInGraphDef": [
                    "self"
                ],
                "testShapeWhitelist": [
                    "self"
                ],
                "testShapeWhitelistViolation": [
                    "self"
                ],
                "testInvalidSignatureTooManyInputsInGraphDef": [
                    "self"
                ],
                "testInvalidSignatureNotEnoughInputsInGraphDef": [
                    "self"
                ],
                "testMissingInputOpInGraphDef": [
                    "self"
                ],
                "testMissingInputOpInGraphDefButAppearsInInputMap": [
                    "self"
                ],
                "testMissingInputTensorInGraphDef": [
                    "self"
                ],
                "testMissingControlInputInGraphDef": [
                    "self"
                ],
                "testInvalidTensorNameOutputIndexInGraphDef": [
                    "self"
                ],
                "testInvalidTensorNameInGraphDef": [
                    "self"
                ],
                "testMissingReturnOperation": [
                    "self"
                ],
                "testMissingReturnTensor": [
                    "self"
                ],
                "testMissingInputMap": [
                    "self"
                ],
                "testInputMapTypeMismatch": [
                    "self"
                ],
                "testNoReturns": [
                    "self"
                ],
                "testOverrideNamePrefix": [
                    "self"
                ],
                "testNamePrefixColocationAttrs": [
                    "self"
                ],
                "testNamePrefixColocationAttrsMultipleImport": [
                    "self"
                ],
                "testNamePrefixColocationAttrsNotFound": [
                    "self"
                ],
                "testEmptyGraph": [
                    "self"
                ],
                "testInvalidInputForGraphDef": [
                    "self"
                ],
                "testInvalidInputForInputMap": [
                    "self"
                ],
                "testInvalidInputForReturnOperations": [
                    "self"
                ],
                "testWithExtensionAndAttr": [
                    "self"
                ],
                "testWithDevice": [
                    "self"
                ],
                "testWithDeviceFunctionDependingOnInputs": [
                    "self"
                ],
                "testGradient": [
                    "self"
                ],
                "testLargeGraph": [
                    "self"
                ],
                "testVersion": [
                    "self"
                ],
                "testVersionLow": [
                    "self"
                ],
                "testVersionHigh": [
                    "self"
                ],
                "testDefaultAttrsAdded": [
                    "self"
                ],
                "testDefaultAttrsRemoved": [
                    "self"
                ]
            }
        },
        "tensorflow.python.framework.device": {
            "check_valid": [
                "spec"
            ],
            "canonical_name": [
                "device"
            ],
            "merge_device": [
                "spec"
            ],
            "DeviceSpec": {
                "__init__": [
                    "self",
                    "job",
                    "replica",
                    "task",
                    "device_type",
                    "device_index"
                ],
                "_clear": [
                    "self"
                ],
                "job": [
                    "self",
                    "job"
                ],
                "replica": [
                    "self",
                    "replica"
                ],
                "task": [
                    "self",
                    "task"
                ],
                "parse_from_string": [
                    "self",
                    "spec"
                ],
                "merge_from": [
                    "self",
                    "dev"
                ],
                "to_string": [
                    "self"
                ],
                "from_string": [
                    "spec"
                ]
            }
        },
        "tensorflow.python.framework.function": {
            "_make_argname_from_tensor_name": [
                "name"
            ],
            "_tensor_to_argdef": [
                "t"
            ],
            "_get_node_def_attr": [
                "op"
            ],
            "_add_input_array": [
                "op",
                "start",
                "limit",
                "dtype",
                "func"
            ],
            "_add_output_array": [
                "op",
                "start",
                "limit",
                "dtype",
                "func"
            ],
            "_add_output_list": [
                "op",
                "start",
                "limit",
                "dtype_lst",
                "func"
            ],
            "_add_op_node": [
                "op",
                "func"
            ],
            "_graph_to_function_def": [
                "graph",
                "inputs",
                "outputs"
            ],
            "_parse_kwargs_as_attrs": [],
            "_call": [
                "sig"
            ],
            "_get_func_name": [
                "func"
            ],
            "get_extra_vars": [],
            "get_extra_inputs": [],
            "get_extra_args": [],
            "_type_list_to_str": [
                "types"
            ],
            "_FuncGraph": {
                "__init__": [
                    "self"
                ],
                "getvar": [
                    "self",
                    "name",
                    "shape",
                    "dtype",
                    "initializer",
                    "trainable",
                    "collections"
                ],
                "create_op": [
                    "self",
                    "op_type",
                    "inputs",
                    "data_types"
                ]
            },
            "_DefinedFunction": {
                "__init__": [
                    "self",
                    "func",
                    "argnames",
                    "input_types",
                    "func_name",
                    "grad_func",
                    "python_grad_func"
                ],
                "name": [
                    "self"
                ],
                "definition": [
                    "self"
                ],
                "set_grad_func": [
                    "self",
                    "grad_func"
                ],
                "grad_func_name": [
                    "self"
                ],
                "python_grad_func": [
                    "self"
                ],
                "declared_input_types": [
                    "self"
                ],
                "captured_inputs": [
                    "self"
                ],
                "_create_definition_if_needed": [
                    "self"
                ],
                "__hash__": [
                    "self"
                ],
                "add_to_graph": [
                    "self",
                    "g"
                ],
                "__call__": [
                    "self"
                ]
            },
            "_OverloadedFunction": {
                "__init__": [
                    "self",
                    "func",
                    "argnames",
                    "func_name",
                    "grad_func",
                    "python_grad_func"
                ],
                "instantiate": [
                    "self",
                    "input_types"
                ],
                "__call__": [
                    "self"
                ]
            },
            "Defun": {
                "__init__": [
                    "self"
                ],
                "__call__": [
                    "self",
                    "func"
                ]
            },
            "Declare": {
                "__init__": [
                    "self",
                    "func_name",
                    "input_types",
                    "output_types"
                ],
                "__call__": [
                    "self"
                ]
            }
        },
        "tensorflow.python.framework.op_def_library_test": {
            "_unknown_shape": [
                "op"
            ],
            "OpDefLibraryTest": {
                "setUp": [
                    "self"
                ],
                "tearDown": [
                    "self"
                ],
                "_add_op": [
                    "self",
                    "ascii"
                ],
                "Tensor": [
                    "self",
                    "t",
                    "name"
                ],
                "testNoRegisteredOpFails": [
                    "self"
                ],
                "testAddOpValidation": [
                    "self"
                ],
                "testSimple": [
                    "self"
                ],
                "testSimpleFailures": [
                    "self"
                ],
                "testReservedInput": [
                    "self"
                ],
                "testPolymorphic": [
                    "self"
                ],
                "testPolymorphicOut": [
                    "self"
                ],
                "testPolymorphicDefaultOut": [
                    "self"
                ],
                "testBinary": [
                    "self"
                ],
                "testRestrict": [
                    "self"
                ],
                "testTypeList": [
                    "self"
                ],
                "testTypeListTwice": [
                    "self"
                ],
                "testOutTypeList": [
                    "self"
                ],
                "testTypeListRestrict": [
                    "self"
                ],
                "testOutTypeListRestrict": [
                    "self"
                ],
                "testAttr": [
                    "self"
                ],
                "testAttrFloat": [
                    "self"
                ],
                "testAttrBool": [
                    "self"
                ],
                "testAttrBoolList": [
                    "self"
                ],
                "testAttrMin": [
                    "self"
                ],
                "testAttrListMin": [
                    "self"
                ],
                "testAttrEnum": [
                    "self"
                ],
                "testAttrEnumList": [
                    "self"
                ],
                "testAttrShape": [
                    "self"
                ],
                "testAttrShapeList": [
                    "self"
                ],
                "testAttrPartialShape": [
                    "self"
                ],
                "testAttrPartialShapeList": [
                    "self"
                ],
                "testAttrDefault": [
                    "self"
                ],
                "testAttrListDefault": [
                    "self"
                ],
                "testAttrEmptyListDefault": [
                    "self"
                ],
                "testReservedAttr": [
                    "self"
                ],
                "testDefaultAttrType": [
                    "self"
                ],
                "testDefaultListAttrType": [
                    "self"
                ],
                "testNIntsIn": [
                    "self"
                ],
                "testNPolymorphicIn": [
                    "self"
                ],
                "testNPolymorphicRestrictIn": [
                    "self"
                ],
                "testNInTwice": [
                    "self"
                ],
                "testNInPolymorphicTwice": [
                    "self"
                ],
                "testNInTwoTypeVariables": [
                    "self"
                ],
                "testInPolymorphicTwice": [
                    "self"
                ],
                "testNIntsOut": [
                    "self"
                ],
                "testNIntsOutDefault": [
                    "self"
                ],
                "testNPolymorphicOut": [
                    "self"
                ],
                "testNPolymorphicOutDefault": [
                    "self"
                ],
                "testNPolymorphicRestrictOut": [
                    "self"
                ],
                "testRef": [
                    "self"
                ],
                "testSpecifyDevice": [
                    "self"
                ],
                "testStructuredOutputSingleList": [
                    "self"
                ],
                "testStructuredOutputListAndSingle": [
                    "self"
                ],
                "testStructuredOutputMultipleLists": [
                    "self"
                ]
            },
            "OpDefLibraryGraphTest": {
                "setUp": [
                    "self"
                ],
                "_add_op": [
                    "self",
                    "ascii"
                ],
                "testNoGraph": [
                    "self"
                ],
                "testDefaultGraph": [
                    "self"
                ],
                "testDifferentGraphFails": [
                    "self"
                ]
            }
        },
        "tensorflow.python.framework.meta_graph": {
            "_node_def": [
                "from_node_def",
                "export_scope",
                "unbound_inputs",
                "clear_devices"
            ],
            "_read_file": [
                "filename"
            ],
            "ops_used_by_graph_def": [
                "graph_def"
            ],
            "stripped_op_list_for_graph": [
                "graph_def"
            ],
            "_get_kind_name": [
                "item"
            ],
            "_should_include_node": [
                "node_or_node_name",
                "export_scope"
            ],
            "add_collection_def": [
                "meta_graph_def",
                "key",
                "graph",
                "export_scope"
            ],
            "create_meta_graph_def": [
                "meta_info_def",
                "graph_def",
                "saver_def",
                "collection_list",
                "graph",
                "export_scope"
            ],
            "read_meta_graph_file": [
                "filename"
            ],
            "import_scoped_meta_graph": [
                "meta_graph_or_file",
                "clear_devices",
                "graph",
                "import_scope",
                "input_map",
                "unbound_inputs_col_name"
            ],
            "export_scoped_meta_graph": [
                "filename",
                "graph_def",
                "graph",
                "export_scope",
                "as_text",
                "unbound_inputs_col_name",
                "clear_devices"
            ],
            "copy_scoped_meta_graph": [
                "from_scope",
                "to_scope",
                "from_graph",
                "to_graph"
            ]
        },
        "tensorflow.python.framework.test_util": {
            "assert_ops_in_graph": [
                "expected_ops",
                "graph"
            ],
            "assert_equal_graph_def": [
                "actual",
                "expected"
            ],
            "IsGoogleCudaEnabled": [],
            "CudaSupportsHalfMatMulAndConv": [],
            "TensorFlowTestCase": {
                "__init__": [
                    "self",
                    "methodName"
                ],
                "setUp": [
                    "self"
                ],
                "tearDown": [
                    "self"
                ],
                "_ClearCachedSession": [
                    "self"
                ],
                "get_temp_dir": [
                    "self"
                ],
                "_AssertProtoEquals": [
                    "self",
                    "a",
                    "b"
                ],
                "assertProtoEquals": [
                    "self",
                    "expected_message_maybe_ascii",
                    "message"
                ],
                "assertProtoEqualsVersion": [
                    "self",
                    "expected",
                    "actual",
                    "producer",
                    "min_consumer"
                ],
                "assertStartsWith": [
                    "self",
                    "actual",
                    "expected_start",
                    "msg"
                ],
                "test_session": [
                    "self",
                    "graph",
                    "config",
                    "use_gpu",
                    "force_gpu"
                ],
                "checkedThread": [
                    "self",
                    "target",
                    "args",
                    "kwargs"
                ],
                "assertNear": [
                    "self",
                    "f1",
                    "f2",
                    "err",
                    "msg"
                ],
                "assertArrayNear": [
                    "self",
                    "farray1",
                    "farray2",
                    "err"
                ],
                "_NDArrayNear": [
                    "self",
                    "ndarray1",
                    "ndarray2",
                    "err"
                ],
                "assertNDArrayNear": [
                    "self",
                    "ndarray1",
                    "ndarray2",
                    "err"
                ],
                "_GetNdArray": [
                    "self",
                    "a"
                ],
                "assertAllClose": [
                    "self",
                    "a",
                    "b",
                    "rtol",
                    "atol"
                ],
                "assertAllCloseAccordingToType": [
                    "self",
                    "a",
                    "b",
                    "rtol",
                    "atol"
                ],
                "assertAllEqual": [
                    "self",
                    "a",
                    "b"
                ],
                "assertRaisesWithPredicateMatch": [
                    "self",
                    "exception_type",
                    "expected_err_re_or_predicate"
                ],
                "assertRaisesOpError": [
                    "self",
                    "expected_err_re_or_predicate"
                ],
                "assertShapeEqual": [
                    "self",
                    "np_array",
                    "tf_tensor"
                ],
                "assertDeviceEqual": [
                    "self",
                    "device1",
                    "device2"
                ]
            }
        },
        "tensorflow.python.framework.random_seed": {
            "_truncate_seed": [
                "seed"
            ],
            "get_seed": [
                "op_seed"
            ],
            "set_random_seed": [
                "seed"
            ]
        },
        "tensorflow.python.framework.test_util_test": {
            "TestUtilTest": {
                "test_assert_ops_in_graph": [
                    "self"
                ],
                "test_assert_equal_graph_def": [
                    "self"
                ],
                "testIsGoogleCudaEnabled": [
                    "self"
                ],
                "testAssertProtoEqualsStr": [
                    "self"
                ],
                "testNDArrayNear": [
                    "self"
                ],
                "testCheckedThreadSucceeds": [
                    "self"
                ],
                "testCheckedThreadFails": [
                    "self"
                ],
                "testCheckedThreadWithWrongAssertionFails": [
                    "self"
                ],
                "testMultipleThreadsWithOneFailure": [
                    "self"
                ],
                "_WeMustGoDeeper": [
                    "self",
                    "msg"
                ],
                "testAssertRaisesOpErrorDoesNotPassMessageDueToLeakedStack": [
                    "self"
                ],
                "testAllCloseScalars": [
                    "self"
                ],
                "testArrayNear": [
                    "self"
                ],
                "testForceGPU": [
                    "self"
                ],
                "testRandomSeed": [
                    "self"
                ]
            }
        },
        "tensorflow.python.framework.random_seed_test": {
            "RandomSeedTest": {
                "testRandomSeed": [
                    "self"
                ]
            }
        },
        "tensorflow.python.framework.tensor_shape": {
            "as_dimension": [
                "value"
            ],
            "as_shape": [
                "shape"
            ],
            "unknown_shape": [
                "ndims"
            ],
            "scalar": [],
            "vector": [
                "length"
            ],
            "matrix": [
                "rows",
                "cols"
            ],
            "Dimension": {
                "__init__": [
                    "self",
                    "value"
                ],
                "__repr__": [
                    "self"
                ],
                "__str__": [
                    "self"
                ],
                "__eq__": [
                    "self",
                    "other"
                ],
                "__ne__": [
                    "self",
                    "other"
                ],
                "__int__": [
                    "self"
                ],
                "__index__": [
                    "self"
                ],
                "value": [
                    "self"
                ],
                "is_compatible_with": [
                    "self",
                    "other"
                ],
                "assert_is_compatible_with": [
                    "self",
                    "other"
                ],
                "merge_with": [
                    "self",
                    "other"
                ],
                "__add__": [
                    "self",
                    "other"
                ],
                "__sub__": [
                    "self",
                    "other"
                ],
                "__mul__": [
                    "self",
                    "other"
                ],
                "__floordiv__": [
                    "self",
                    "other"
                ],
                "__div__": [
                    "self",
                    "other"
                ],
                "__mod__": [
                    "self",
                    "other"
                ],
                "__lt__": [
                    "self",
                    "other"
                ],
                "__le__": [
                    "self",
                    "other"
                ],
                "__gt__": [
                    "self",
                    "other"
                ],
                "__ge__": [
                    "self",
                    "other"
                ]
            },
            "TensorShape": {
                "__init__": [
                    "self",
                    "dims"
                ],
                "__repr__": [
                    "self"
                ],
                "__str__": [
                    "self"
                ],
                "dims": [
                    "self"
                ],
                "ndims": [
                    "self"
                ],
                "__len__": [
                    "self"
                ],
                "__bool__": [
                    "self"
                ],
                "__iter__": [
                    "self"
                ],
                "__getitem__": [
                    "self",
                    "key"
                ],
                "num_elements": [
                    "self"
                ],
                "merge_with": [
                    "self",
                    "other"
                ],
                "concatenate": [
                    "self",
                    "other"
                ],
                "assert_same_rank": [
                    "self",
                    "other"
                ],
                "assert_has_rank": [
                    "self",
                    "rank"
                ],
                "with_rank": [
                    "self",
                    "rank"
                ],
                "with_rank_at_least": [
                    "self",
                    "rank"
                ],
                "with_rank_at_most": [
                    "self",
                    "rank"
                ],
                "is_compatible_with": [
                    "self",
                    "other"
                ],
                "assert_is_compatible_with": [
                    "self",
                    "other"
                ],
                "is_fully_defined": [
                    "self"
                ],
                "assert_is_fully_defined": [
                    "self"
                ],
                "as_list": [
                    "self"
                ],
                "as_proto": [
                    "self"
                ],
                "__eq__": [
                    "self",
                    "other"
                ],
                "__ne__": [
                    "self",
                    "other"
                ]
            }
        },
        "tensorflow.python.framework.dtypes_test": {
            "_is_numeric_dtype_enum": [
                "datatype_enum"
            ],
            "TypesTest": {
                "testAllTypesConstructible": [
                    "self"
                ],
                "testAllTypesConvertibleToDType": [
                    "self"
                ],
                "testAllTypesConvertibleToNumpyDtype": [
                    "self"
                ],
                "testInvalid": [
                    "self"
                ],
                "testNumpyConversion": [
                    "self"
                ],
                "testRealDtype": [
                    "self"
                ],
                "testStringConversion": [
                    "self"
                ],
                "testDTypesHaveUniqueNames": [
                    "self"
                ],
                "testIsInteger": [
                    "self"
                ],
                "testIsFloating": [
                    "self"
                ],
                "testIsComplex": [
                    "self"
                ],
                "testIsUnsigned": [
                    "self"
                ],
                "testMinMax": [
                    "self"
                ],
                "testRepr": [
                    "self"
                ],
                "testEqWithNonTFTypes": [
                    "self"
                ]
            }
        },
        "tensorflow.python.framework.file_system_test": {
            "FileSystemTest": {
                "setUp": [
                    "self"
                ],
                "testBasic": [
                    "self"
                ]
            }
        },
        "tensorflow.python.framework.registry": {
            "Registry": {
                "__init__": [
                    "self",
                    "name"
                ],
                "register": [
                    "self",
                    "candidate",
                    "name"
                ],
                "list": [
                    "self"
                ],
                "lookup": [
                    "self",
                    "name"
                ]
            }
        },
        "tensorflow.python.framework.errors_test": {
            "ErrorsTest": {
                "testUniqueClassForEachErrorCode": [
                    "self"
                ],
                "testKnownErrorClassForEachErrorCodeInProto": [
                    "self"
                ],
                "testUnknownErrorCodeCausesWarning": [
                    "self"
                ]
            }
        },
        "tensorflow.python.framework.constant_op": {
            "constant": [
                "value",
                "dtype",
                "shape",
                "name",
                "verify_shape"
            ],
            "_constant_tensor_conversion_function": [
                "v",
                "dtype",
                "name",
                "as_ref"
            ],
            "_tensor_shape_tensor_conversion_function": [
                "s",
                "dtype",
                "name",
                "as_ref"
            ],
            "_dimension_tensor_conversion_function": [
                "d",
                "dtype",
                "name",
                "as_ref"
            ]
        },
        "tensorflow.python.framework.sparse_tensor_test": {
            "SparseTensorTest": {
                "testPythonConstruction": [
                    "self"
                ]
            }
        },
        "tensorflow.python.framework.load_library": {
            "load_op_library": [
                "library_filename"
            ],
            "load_file_system_library": [
                "library_filename"
            ]
        },
        "tensorflow.python.framework.registry_test": {
            "bar": [],
            "RegistryTest": {
                "testRegisterClass": [
                    "self"
                ],
                "testRegisterFunction": [
                    "self"
                ],
                "testDuplicate": [
                    "self"
                ]
            }
        },
        "tensorflow.python.framework.importer": {
            "_GetNodeAttr": [
                "node_def",
                "attr_name"
            ],
            "_ArgToTypesNoRef": [
                "node_def",
                "arg_def"
            ],
            "_SingleArgToTypes": [
                "node_def",
                "arg_def"
            ],
            "_ArgsToTypes": [
                "node_def",
                "arg_list"
            ],
            "_InputTypes": [
                "node_def",
                "op_dict"
            ],
            "_OutputTypes": [
                "node_def",
                "op_dict"
            ],
            "_IsControlInput": [
                "input_name"
            ],
            "_ParseTensorName": [
                "tensor_name"
            ],
            "_CanonicalInputName": [
                "input_name"
            ],
            "_InvalidNodeMessage": [
                "node",
                "message"
            ],
            "_MaybeDevice": [
                "device"
            ],
            "_FindAttrInOpDef": [
                "attr_name",
                "op_def"
            ],
            "import_graph_def": [
                "graph_def",
                "input_map",
                "return_elements",
                "name",
                "op_dict",
                "producer_op_list"
            ]
        },
        "tensorflow.python.framework": {},
        "tensorflow.python.framework.op_def_library": {
            "_Attr": [
                "op_def",
                "name"
            ],
            "_AttrValue": [
                "attr_protos",
                "name"
            ],
            "_SatisfiesTypeConstraint": [
                "dtype",
                "attr_def"
            ],
            "_IsListParameter": [
                "arg"
            ],
            "_NumTypeFields": [
                "arg"
            ],
            "_IsListValue": [
                "v"
            ],
            "_Flatten": [
                "l"
            ],
            "_Restructure": [
                "l",
                "structure"
            ],
            "_MakeFloat": [
                "v",
                "arg_name"
            ],
            "_MakeInt": [
                "v",
                "arg_name"
            ],
            "_MakeStr": [
                "v",
                "arg_name"
            ],
            "_MakeBool": [
                "v",
                "arg_name"
            ],
            "_MakeType": [
                "v",
                "attr_def"
            ],
            "_MakeShape": [
                "v",
                "arg_name"
            ],
            "_MakeTensor": [
                "v",
                "arg_name"
            ],
            "_MaybeColocateWith": [
                "inputs"
            ],
            "_OpInfo": {
                "__init__": [
                    "self",
                    "op_def"
                ]
            },
            "OpDefLibrary": {
                "__init__": [
                    "self"
                ],
                "add_op": [
                    "self",
                    "op_def"
                ],
                "add_op_list": [
                    "self",
                    "op_list"
                ],
                "apply_op": [
                    "self",
                    "op_type_name",
                    "name"
                ]
            }
        },
        "tensorflow.python.framework.versions": {},
        "tensorflow.python.framework.meta_graph_test": {
            "_TestDir": [
                "test_name"
            ],
            "SimpleMetaGraphTest": {
                "testNoVariables": [
                    "self"
                ],
                "testStrippedOpListNestedFunctions": [
                    "self"
                ],
                "testStrippedOpListRecursiveFunctions": [
                    "self"
                ]
            },
            "ScopedMetaGraphTest": {
                "_testScopedExport": [
                    "self",
                    "test_dir",
                    "exported_filenames"
                ],
                "_testScopedImport": [
                    "self",
                    "test_dir",
                    "exported_filenames"
                ],
                "testScopedExportAndImport": [
                    "self"
                ],
                "_testScopedExportWithQueue": [
                    "self",
                    "test_dir",
                    "exported_filename"
                ],
                "_testScopedImportWithQueue": [
                    "self",
                    "test_dir",
                    "exported_filename",
                    "new_exported_filename"
                ],
                "testScopedWithQueue": [
                    "self"
                ],
                "testExportNestedNames": [
                    "self"
                ],
                "testPotentialCycle": [
                    "self"
                ],
                "testClearDevices": [
                    "self"
                ]
            }
        },
        "tensorflow.python.framework.tensor_util_test": {
            "TensorUtilTest": {
                "testFloat": [
                    "self"
                ],
                "testFloatN": [
                    "self"
                ],
                "testFloatTyped": [
                    "self"
                ],
                "testFloatTypeCoerce": [
                    "self"
                ],
                "testFloatTypeCoerceNdarray": [
                    "self"
                ],
                "testFloatSizes": [
                    "self"
                ],
                "testFloatSizes2": [
                    "self"
                ],
                "testFloatSizesLessValues": [
                    "self"
                ],
                "testFloatNpArrayFloat64": [
                    "self"
                ],
                "testFloatTypesWithImplicitRepeat": [
                    "self"
                ],
                "testHalf": [
                    "self"
                ],
                "testInt": [
                    "self"
                ],
                "testLargeInt": [
                    "self"
                ],
                "testLargeNegativeInt": [
                    "self"
                ],
                "testIntNDefaultType": [
                    "self"
                ],
                "testIntTypes": [
                    "self"
                ],
                "testIntTypesWithImplicitRepeat": [
                    "self"
                ],
                "testLong": [
                    "self"
                ],
                "testLongN": [
                    "self"
                ],
                "testLongNpArray": [
                    "self"
                ],
                "testQuantizedTypes": [
                    "self"
                ],
                "testString": [
                    "self"
                ],
                "testStringWithImplicitRepeat": [
                    "self"
                ],
                "testStringN": [
                    "self"
                ],
                "testStringNpArray": [
                    "self"
                ],
                "testStringTuple": [
                    "self"
                ],
                "testStringNestedTuple": [
                    "self"
                ],
                "testComplex64": [
                    "self"
                ],
                "testComplex128": [
                    "self"
                ],
                "testComplexWithImplicitRepeat": [
                    "self"
                ],
                "testComplex64N": [
                    "self"
                ],
                "testComplex128N": [
                    "self"
                ],
                "testComplex64NpArray": [
                    "self"
                ],
                "testComplex128NpArray": [
                    "self"
                ],
                "testUnsupportedDTypes": [
                    "self"
                ],
                "testTensorShapeVerification": [
                    "self"
                ],
                "testShapeTooLarge": [
                    "self"
                ],
                "testLowRankSupported": [
                    "self"
                ],
                "testShapeEquals": [
                    "self"
                ]
            },
            "ConstantValueTest": {
                "testConstant": [
                    "self"
                ],
                "testUnknown": [
                    "self"
                ],
                "testShape": [
                    "self"
                ],
                "testSize": [
                    "self"
                ],
                "testSizeOfScalar": [
                    "self"
                ],
                "testRank": [
                    "self"
                ],
                "testCast": [
                    "self"
                ],
                "testConcat": [
                    "self"
                ],
                "testPack": [
                    "self"
                ]
            },
            "ConstantValueAsShapeTest": {
                "testConstant": [
                    "self"
                ],
                "testShape": [
                    "self"
                ],
                "testPack": [
                    "self"
                ],
                "testConcat": [
                    "self"
                ]
            }
        },
        "tensorflow.python.framework.graph_util": {},
        "tensorflow.python.framework.docs": {
            "collect_members": [
                "module_to_name",
                "exclude"
            ],
            "get_anchor": [
                "module_to_name",
                "fullname"
            ],
            "_stable_hash": [
                "s"
            ],
            "write_libraries": [
                "output_dir",
                "libraries"
            ],
            "Document": {
                "write_markdown_to_file": [
                    "self",
                    "f"
                ]
            },
            "Index": {
                "__init__": [
                    "self",
                    "module_to_name",
                    "members",
                    "filename_to_library_map",
                    "path_prefix"
                ],
                "write_markdown_to_file": [
                    "self",
                    "f"
                ]
            },
            "Library": {
                "__init__": [
                    "self",
                    "title",
                    "module",
                    "module_to_name",
                    "members",
                    "documented",
                    "exclude_symbols",
                    "prefix"
                ],
                "title": [
                    "self"
                ],
                "mentioned": [
                    "self"
                ],
                "exclude_symbols": [
                    "self"
                ],
                "_should_include_member": [
                    "self",
                    "name"
                ],
                "get_imported_modules": [
                    "self",
                    "module"
                ],
                "get_class_members": [
                    "self",
                    "cls_name",
                    "cls"
                ],
                "shard_dir": [
                    "self",
                    "name"
                ],
                "set_functions_and_classes_dir": [
                    "self",
                    "dirname"
                ],
                "_generate_signature_for_function": [
                    "self",
                    "func"
                ],
                "_remove_docstring_indent": [
                    "self",
                    "docstring"
                ],
                "_print_formatted_docstring": [
                    "self",
                    "docstring",
                    "f"
                ],
                "_print_function": [
                    "self",
                    "f",
                    "prefix",
                    "fullname",
                    "func"
                ],
                "_write_member_markdown_to_file": [
                    "self",
                    "f",
                    "prefix",
                    "name",
                    "member"
                ],
                "_write_docstring_markdown_to_file": [
                    "self",
                    "f",
                    "prefix",
                    "docstring",
                    "members",
                    "imports"
                ],
                "_write_class_markdown_to_file": [
                    "self",
                    "f",
                    "name",
                    "cls"
                ],
                "_write_module_markdown_to_file": [
                    "self",
                    "f",
                    "module"
                ],
                "write_markdown_to_file": [
                    "self",
                    "f"
                ],
                "write_other_members": [
                    "self",
                    "f",
                    "catch_all"
                ],
                "assert_no_leftovers": [
                    "self"
                ]
            }
        },
        "tensorflow.python.framework.op_def_registry": {
            "register_op_list": [
                "op_list"
            ],
            "get_registered_ops": []
        },
        "tensorflow.python.framework.versions_test": {
            "VersionTest": {
                "testVersion": [
                    "self"
                ],
                "testGraphDefVersion": [
                    "self"
                ],
                "testGitAndCompilerVersion": [
                    "self"
                ]
            }
        },
        "tensorflow.python.framework.tensor_shape_div_test": {
            "DimensionDivTest": {
                "testDivSucceeds": [
                    "self"
                ]
            }
        },
        "tensorflow.python.framework.tensor_util": {
            "ExtractBitsFromFloat16": [
                "x"
            ],
            "SlowAppendFloat16ArrayToTensorProto": [
                "tensor_proto",
                "proto_values"
            ],
            "GetFromNumpyDTypeDict": [
                "dtype_dict",
                "dtype"
            ],
            "GetNumpyAppendFn": [
                "dtype"
            ],
            "TensorShapeProtoToList": [
                "shape"
            ],
            "_GetDenseDimensions": [
                "list_of_lists"
            ],
            "_FlattenToStrings": [
                "nested_strings"
            ],
            "_FirstNotNone": [
                "l"
            ],
            "_NotNone": [
                "v"
            ],
            "_FilterTuple": [
                "v"
            ],
            "_FilterInt": [
                "v"
            ],
            "_FilterFloat": [
                "v"
            ],
            "_FilterComplex": [
                "v"
            ],
            "_FilterStr": [
                "v"
            ],
            "_FilterBool": [
                "v"
            ],
            "_FilterNotTensor": [
                "v"
            ],
            "_AssertCompatible": [
                "values",
                "dtype"
            ],
            "make_tensor_proto": [
                "values",
                "dtype",
                "shape",
                "verify_shape"
            ],
            "MakeNdarray": [
                "tensor"
            ],
            "ShapeEquals": [
                "tensor_proto",
                "shape"
            ],
            "_ConstantValue": [
                "tensor"
            ],
            "constant_value": [
                "tensor"
            ],
            "constant_value_as_shape": [
                "tensor"
            ],
            "_Message": {
                "__init__": [
                    "self",
                    "message"
                ],
                "__repr__": [
                    "self"
                ]
            }
        },
        "tensorflow.python.framework.subscribe": {
            "_recursive_apply": [
                "tensors",
                "apply_fn"
            ],
            "_subscribe": [
                "tensor",
                "side_effects",
                "control_cache"
            ],
            "subscribe": [
                "tensors",
                "side_effects"
            ],
            "_ControlOutputCache": {
                "__init__": [
                    "self"
                ],
                "calc_control_outputs": [
                    "self",
                    "graph"
                ],
                "get_control_outputs": [
                    "self",
                    "op"
                ]
            }
        },
        "tensorflow.python.framework.common_shapes_test": {
            "CommonShapesTest": {
                "testBroadcast_one_dimension": [
                    "self"
                ]
            }
        },
        "tensorflow.python.framework.errors": {},
        "tensorflow.python.framework.dtypes": {
            "as_dtype": [
                "type_value"
            ],
            "DType": {
                "__init__": [
                    "self",
                    "type_enum"
                ],
                "_is_ref_dtype": [
                    "self"
                ],
                "_as_ref": [
                    "self"
                ],
                "base_dtype": [
                    "self"
                ],
                "real_dtype": [
                    "self"
                ],
                "is_numpy_compatible": [
                    "self"
                ],
                "as_numpy_dtype": [
                    "self"
                ],
                "as_datatype_enum": [
                    "self"
                ],
                "is_integer": [
                    "self"
                ],
                "is_floating": [
                    "self"
                ],
                "is_complex": [
                    "self"
                ],
                "is_quantized": [
                    "self"
                ],
                "is_unsigned": [
                    "self"
                ],
                "min": [
                    "self"
                ],
                "max": [
                    "self"
                ],
                "limits": [
                    "self",
                    "clip_negative"
                ],
                "is_compatible_with": [
                    "self",
                    "other"
                ],
                "__eq__": [
                    "self",
                    "other"
                ],
                "__ne__": [
                    "self",
                    "other"
                ],
                "name": [
                    "self"
                ],
                "__str__": [
                    "self"
                ],
                "__repr__": [
                    "self"
                ],
                "__hash__": [
                    "self"
                ],
                "size": [
                    "self"
                ]
            }
        },
        "tensorflow.python.framework.graph_util_test": {
            "test_device_func_pin_variable_to_cpu": [
                "op"
            ],
            "DeviceFunctionsTest": {
                "testTwoDeviceFunctions": [
                    "self"
                ],
                "testNestedDeviceFunctions": [
                    "self"
                ],
                "testExplicitDevice": [
                    "self"
                ],
                "testDefaultDevice": [
                    "self"
                ],
                "testExtractSubGraph": [
                    "self"
                ],
                "testConvertVariablesToConsts": [
                    "self"
                ],
                "create_node_def": [
                    "self",
                    "op",
                    "name",
                    "inputs"
                ],
                "create_constant_node_def": [
                    "self",
                    "name",
                    "value",
                    "dtype",
                    "shape"
                ],
                "set_attr_dtype": [
                    "self",
                    "node",
                    "key",
                    "value"
                ],
                "set_attr_tensor": [
                    "self",
                    "node",
                    "key",
                    "value",
                    "dtype",
                    "shape"
                ],
                "testRemoveTrainingNodes": [
                    "self"
                ]
            }
        },
        "tensorflow.python.summary.event_file_inspector_test": {
            "EventFileInspectorTest": {
                "setUp": [
                    "self"
                ],
                "tearDown": [
                    "self"
                ],
                "_MakeDirectoryIfNotExists": [
                    "self",
                    "path"
                ],
                "_WriteScalarSummaries": [
                    "self",
                    "data",
                    "subdirs"
                ],
                "testEmptyLogdir": [
                    "self"
                ],
                "testGetAvailableTags": [
                    "self"
                ],
                "testInspectAll": [
                    "self"
                ],
                "testInspectTag": [
                    "self"
                ],
                "testSessionLogSummaries": [
                    "self"
                ],
                "testInspectAllWithNestedLogdirs": [
                    "self"
                ]
            }
        },
        "tensorflow.python.summary.event_multiplexer_test": {
            "_AddEvents": [
                "path"
            ],
            "_CreateCleanDirectory": [
                "path"
            ],
            "_GetFakeAccumulator": [
                "path",
                "size_guidance",
                "compression_bps",
                "purge_orphaned_data"
            ],
            "_FakeAccumulator": {
                "__init__": [
                    "self",
                    "path"
                ],
                "Tags": [
                    "self"
                ],
                "FirstEventTimestamp": [
                    "self"
                ],
                "Scalars": [
                    "self",
                    "tag_name"
                ],
                "Histograms": [
                    "self",
                    "tag_name"
                ],
                "CompressedHistograms": [
                    "self",
                    "tag_name"
                ],
                "Images": [
                    "self",
                    "tag_name"
                ],
                "Audio": [
                    "self",
                    "tag_name"
                ],
                "Reload": [
                    "self"
                ]
            },
            "EventMultiplexerTest": {
                "setUp": [
                    "self"
                ],
                "tearDown": [
                    "self"
                ],
                "testEmptyLoader": [
                    "self"
                ],
                "testRunNamesRespected": [
                    "self"
                ],
                "testReload": [
                    "self"
                ],
                "testScalars": [
                    "self"
                ],
                "testExceptions": [
                    "self"
                ],
                "testInitialization": [
                    "self"
                ],
                "testAddRunsFromDirectory": [
                    "self"
                ],
                "testAddRunsFromDirectoryThatContainsEvents": [
                    "self"
                ],
                "testAddRunsFromDirectoryWithRunNames": [
                    "self"
                ],
                "testAddRunsFromDirectoryWalksTree": [
                    "self"
                ],
                "testAddRunsFromDirectoryThrowsException": [
                    "self"
                ],
                "testAddRun": [
                    "self"
                ],
                "testAddRunMaintainsLoading": [
                    "self"
                ]
            },
            "EventMultiplexerWithRealAccumulatorTest": {
                "testDeletingDirectoryRemovesRun": [
                    "self"
                ]
            }
        },
        "tensorflow.python.summary.event_file_inspector": {
            "get_field_to_observations_map": [
                "generator",
                "query_for_tag"
            ],
            "get_unique_tags": [
                "field_to_obs"
            ],
            "print_dict": [
                "d",
                "show_missing"
            ],
            "get_dict_to_print": [
                "field_to_obs"
            ],
            "get_out_of_order": [
                "list_of_numbers"
            ],
            "generators_from_logdir": [
                "logdir"
            ],
            "generator_from_event_file": [
                "event_file"
            ],
            "get_inspection_units": [
                "logdir",
                "event_file",
                "tag"
            ],
            "inspect": [
                "logdir",
                "event_file",
                "tag"
            ]
        },
        "tensorflow.python.summary.summary_test": {
            "ScalarSummaryTest": {
                "testScalarSummary": [
                    "self"
                ],
                "testSummarizingVariable": [
                    "self"
                ],
                "testImageSummary": [
                    "self"
                ],
                "testHistogramSummary": [
                    "self"
                ],
                "testSummaryNameConversion": [
                    "self"
                ]
            }
        },
        "tensorflow.python.summary.event_multiplexer": {
            "GetLogdirSubdirectories": [
                "path"
            ],
            "EventMultiplexer": {
                "__init__": [
                    "self",
                    "run_path_map",
                    "size_guidance",
                    "purge_orphaned_data"
                ],
                "AddRun": [
                    "self",
                    "path",
                    "name"
                ],
                "AddRunsFromDirectory": [
                    "self",
                    "path",
                    "name"
                ],
                "Reload": [
                    "self"
                ],
                "FirstEventTimestamp": [
                    "self",
                    "run"
                ],
                "Scalars": [
                    "self",
                    "run",
                    "tag"
                ],
                "Graph": [
                    "self",
                    "run"
                ],
                "MetaGraph": [
                    "self",
                    "run"
                ],
                "RunMetadata": [
                    "self",
                    "run",
                    "tag"
                ],
                "Histograms": [
                    "self",
                    "run",
                    "tag"
                ],
                "CompressedHistograms": [
                    "self",
                    "run",
                    "tag"
                ],
                "Images": [
                    "self",
                    "run",
                    "tag"
                ],
                "Audio": [
                    "self",
                    "run",
                    "tag"
                ],
                "Runs": [
                    "self"
                ],
                "RunPaths": [
                    "self"
                ],
                "_GetAccumulator": [
                    "self",
                    "run"
                ]
            }
        },
        "tensorflow.python.summary.summary": {
            "_collect": [
                "val",
                "collections",
                "default_collections"
            ],
            "_clean_tag": [
                "name"
            ],
            "scalar": [
                "name",
                "tensor",
                "collections"
            ],
            "image": [
                "name",
                "tensor",
                "max_outputs",
                "collections"
            ],
            "histogram": [
                "name",
                "values",
                "collections"
            ],
            "audio": [
                "name",
                "tensor",
                "sample_rate",
                "max_outputs",
                "collections"
            ],
            "merge": [
                "inputs",
                "collections",
                "name"
            ],
            "merge_all": [
                "key"
            ],
            "get_summary_description": [
                "node_def"
            ]
        },
        "tensorflow.python.summary.event_accumulator_test": {
            "_EventGenerator": {
                "__init__": [
                    "self",
                    "zero_out_timestamps"
                ],
                "Load": [
                    "self"
                ],
                "AddScalar": [
                    "self",
                    "tag",
                    "wall_time",
                    "step",
                    "value"
                ],
                "AddHistogram": [
                    "self",
                    "tag",
                    "wall_time",
                    "step",
                    "hmin",
                    "hmax",
                    "hnum",
                    "hsum",
                    "hsum_squares",
                    "hbucket_limit",
                    "hbucket"
                ],
                "AddImage": [
                    "self",
                    "tag",
                    "wall_time",
                    "step",
                    "encoded_image_string",
                    "width",
                    "height"
                ],
                "AddAudio": [
                    "self",
                    "tag",
                    "wall_time",
                    "step",
                    "encoded_audio_string",
                    "content_type",
                    "sample_rate",
                    "length_frames"
                ],
                "AddEvent": [
                    "self",
                    "event"
                ],
                "add_event": [
                    "self",
                    "event"
                ]
            },
            "EventAccumulatorTest": {
                "assertTagsEqual": [
                    "self",
                    "tags1",
                    "tags2"
                ]
            },
            "MockingEventAccumulatorTest": {
                "setUp": [
                    "self"
                ],
                "tearDown": [
                    "self"
                ],
                "testEmptyAccumulator": [
                    "self"
                ],
                "testTags": [
                    "self"
                ],
                "testReload": [
                    "self"
                ],
                "testScalars": [
                    "self"
                ],
                "testHistograms": [
                    "self"
                ],
                "testCompressedHistograms": [
                    "self"
                ],
                "testCompressHistogram_uglyHistogram": [
                    "self"
                ],
                "testImages": [
                    "self"
                ],
                "testAudio": [
                    "self"
                ],
                "testKeyError": [
                    "self"
                ],
                "testNonValueEvents": [
                    "self"
                ],
                "testExpiredDataDiscardedAfterRestartForFileVersionLessThan2": [
                    "self"
                ],
                "testOrphanedDataNotDiscardedIfFlagUnset": [
                    "self"
                ],
                "testEventsDiscardedPerTagAfterRestartForFileVersionLessThan2": [
                    "self"
                ],
                "testOnlySummaryEventsTriggerDiscards": [
                    "self"
                ],
                "testSessionLogStartMessageDiscardsExpiredEvents": [
                    "self"
                ],
                "testFirstEventTimestamp": [
                    "self"
                ],
                "testReloadPopulatesFirstEventTimestamp": [
                    "self"
                ],
                "testFirstEventTimestampLoadsEvent": [
                    "self"
                ],
                "testTFSummaryScalar": [
                    "self"
                ],
                "testTFSummaryImage": [
                    "self"
                ]
            },
            "RealisticEventAccumulatorTest": {
                "setUp": [
                    "self"
                ],
                "testScalarsRealistically": [
                    "self"
                ],
                "testGraphFromMetaGraphBecomesAvailable": [
                    "self"
                ]
            }
        },
        "tensorflow.python.summary": {},
        "tensorflow.python.summary.event_accumulator": {
            "IsTensorFlowEventsFile": [
                "path"
            ],
            "_GetPurgeMessage": [
                "most_recent_step",
                "most_recent_wall_time",
                "event_step",
                "event_wall_time",
                "num_expired_scalars",
                "num_expired_histos",
                "num_expired_comp_histos",
                "num_expired_images",
                "num_expired_audio"
            ],
            "_GeneratorFromPath": [
                "path"
            ],
            "_ParseFileVersion": [
                "file_version"
            ],
            "_CompressHistogram": [
                "histo_ev",
                "bps"
            ],
            "_Remap": [
                "x",
                "x0",
                "x1",
                "y0",
                "y1"
            ],
            "EventAccumulator": {
                "__init__": [
                    "self",
                    "path",
                    "size_guidance",
                    "compression_bps",
                    "purge_orphaned_data"
                ],
                "Reload": [
                    "self"
                ],
                "FirstEventTimestamp": [
                    "self"
                ],
                "_ProcessEvent": [
                    "self",
                    "event"
                ],
                "_ProcessTensorSummary": [
                    "self",
                    "value",
                    "event"
                ],
                "_UpdateTensorSummaries": [
                    "self"
                ],
                "Tags": [
                    "self"
                ],
                "Scalars": [
                    "self",
                    "tag"
                ],
                "Graph": [
                    "self"
                ],
                "MetaGraph": [
                    "self"
                ],
                "RunMetadata": [
                    "self",
                    "tag"
                ],
                "Histograms": [
                    "self",
                    "tag"
                ],
                "CompressedHistograms": [
                    "self",
                    "tag"
                ],
                "Images": [
                    "self",
                    "tag"
                ],
                "Audio": [
                    "self",
                    "tag"
                ],
                "_MaybePurgeOrphanedData": [
                    "self",
                    "event"
                ],
                "_CheckForRestartAndMaybePurge": [
                    "self",
                    "event"
                ],
                "_CheckForOutOfOrderStepAndMaybePurge": [
                    "self",
                    "event"
                ],
                "_ConvertHistogramProtoToTuple": [
                    "self",
                    "histo"
                ],
                "_ProcessHistogram": [
                    "self",
                    "tag",
                    "wall_time",
                    "step",
                    "histo"
                ],
                "_ProcessImage": [
                    "self",
                    "tag",
                    "wall_time",
                    "step",
                    "image"
                ],
                "_ProcessAudio": [
                    "self",
                    "tag",
                    "wall_time",
                    "step",
                    "audio"
                ],
                "_ProcessScalar": [
                    "self",
                    "tag",
                    "wall_time",
                    "step",
                    "scalar"
                ],
                "_Purge": [
                    "self",
                    "event",
                    "by_tags"
                ]
            }
        },
        "tensorflow.python.summary.summary_iterator": {
            "summary_iterator": [
                "path"
            ],
            "SummaryWriter": {
                "__init__": [
                    "self",
                    "logdir",
                    "graph",
                    "max_queue",
                    "flush_secs",
                    "graph_def"
                ],
                "get_logdir": [
                    "self"
                ],
                "reopen": [
                    "self"
                ],
                "add_summary": [
                    "self",
                    "summary",
                    "global_step"
                ],
                "add_session_log": [
                    "self",
                    "session_log",
                    "global_step"
                ],
                "add_event": [
                    "self",
                    "event"
                ],
                "_add_graph_def": [
                    "self",
                    "graph_def",
                    "global_step"
                ],
                "add_graph": [
                    "self",
                    "graph",
                    "global_step",
                    "graph_def"
                ],
                "add_run_metadata": [
                    "self",
                    "run_metadata",
                    "tag",
                    "global_step"
                ],
                "flush": [
                    "self"
                ],
                "close": [
                    "self"
                ]
            },
            "_EventLoggerThread": {
                "__init__": [
                    "self",
                    "queue",
                    "ev_writer",
                    "flush_secs"
                ],
                "run": [
                    "self"
                ]
            },
            "SummaryWriterCache": {
                "clear": [],
                "get": [
                    "logdir"
                ]
            }
        },
        "tensorflow.python.summary.writer.event_file_writer": {
            "EventFileWriter": {
                "__init__": [
                    "self",
                    "logdir",
                    "max_queue",
                    "flush_secs"
                ],
                "get_logdir": [
                    "self"
                ],
                "reopen": [
                    "self"
                ],
                "add_event": [
                    "self",
                    "event"
                ],
                "flush": [
                    "self"
                ],
                "close": [
                    "self"
                ]
            },
            "_EventLoggerThread": {
                "__init__": [
                    "self",
                    "queue",
                    "ev_writer",
                    "flush_secs"
                ],
                "run": [
                    "self"
                ]
            }
        },
        "tensorflow.python.summary.writer.writer": {
            "SummaryToEventTransformer": {
                "__init__": [
                    "self",
                    "event_writer",
                    "graph",
                    "graph_def"
                ],
                "add_summary": [
                    "self",
                    "summary",
                    "global_step"
                ],
                "add_session_log": [
                    "self",
                    "session_log",
                    "global_step"
                ],
                "_add_graph_def": [
                    "self",
                    "graph_def",
                    "global_step"
                ],
                "add_graph": [
                    "self",
                    "graph",
                    "global_step",
                    "graph_def"
                ],
                "add_meta_graph": [
                    "self",
                    "meta_graph_def",
                    "global_step"
                ],
                "add_run_metadata": [
                    "self",
                    "run_metadata",
                    "tag",
                    "global_step"
                ],
                "_add_event": [
                    "self",
                    "event",
                    "step"
                ]
            },
            "FileWriter": {
                "__init__": [
                    "self",
                    "logdir",
                    "graph",
                    "max_queue",
                    "flush_secs",
                    "graph_def"
                ],
                "get_logdir": [
                    "self"
                ],
                "add_event": [
                    "self",
                    "event"
                ],
                "flush": [
                    "self"
                ],
                "close": [
                    "self"
                ],
                "reopen": [
                    "self"
                ]
            }
        },
        "tensorflow.python.summary.writer.writer_test": {
            "SummaryWriterTestCase": {
                "_TestDir": [
                    "self",
                    "test_name"
                ],
                "_CleanTestDir": [
                    "self",
                    "test_name"
                ],
                "_EventsReader": [
                    "self",
                    "test_dir"
                ],
                "_assertRecent": [
                    "self",
                    "t"
                ],
                "_assertEventsWithGraph": [
                    "self",
                    "test_dir",
                    "g",
                    "has_shapes"
                ],
                "testAddingSummaryGraphAndRunMetadata": [
                    "self"
                ],
                "testGraphAsNamed": [
                    "self"
                ],
                "testGraphAsPositional": [
                    "self"
                ],
                "testGraphDefAsNamed": [
                    "self"
                ],
                "testGraphDefAsPositional": [
                    "self"
                ],
                "testGraphAndGraphDef": [
                    "self"
                ],
                "testNeitherGraphNorGraphDef": [
                    "self"
                ],
                "testCloseAndReopen": [
                    "self"
                ],
                "testAddingSummariesFromSessionRunCalls": [
                    "self"
                ]
            },
            "SummaryWriterCacheTest": {
                "_test_dir": [
                    "self",
                    "test_name"
                ],
                "test_cache": [
                    "self"
                ],
                "test_clear": [
                    "self"
                ]
            }
        },
        "tensorflow.python.summary.writer.writer_cache": {
            "SummaryWriterCache": {
                "clear": [],
                "get": [
                    "logdir"
                ]
            }
        },
        "tensorflow.python.summary.writer": {},
        "tensorflow.python.summary.impl.reservoir": {
            "Reservoir": {
                "__init__": [
                    "self",
                    "size",
                    "seed",
                    "always_keep_last"
                ],
                "Keys": [
                    "self"
                ],
                "Items": [
                    "self",
                    "key"
                ],
                "AddItem": [
                    "self",
                    "key",
                    "item",
                    "f"
                ],
                "FilterItems": [
                    "self",
                    "filterFn",
                    "key"
                ]
            },
            "_ReservoirBucket": {
                "__init__": [
                    "self",
                    "_max_size",
                    "_random",
                    "always_keep_last"
                ],
                "AddItem": [
                    "self",
                    "item",
                    "f"
                ],
                "FilterItems": [
                    "self",
                    "filterFn"
                ],
                "Items": [
                    "self"
                ]
            }
        },
        "tensorflow.python.summary.impl.event_file_loader": {
            "main": [
                "argv"
            ],
            "EventFileLoader": {
                "__init__": [
                    "self",
                    "file_path"
                ],
                "Load": [
                    "self"
                ]
            }
        },
        "tensorflow.python.summary.impl.io_wrapper": {
            "IsGCSPath": [
                "path"
            ],
            "ListDirectoryAbsolute": [
                "directory"
            ],
            "ListRecursively": [
                "top"
            ]
        },
        "tensorflow.python.summary.impl.event_file_loader_test": {
            "EventFileLoaderTest": {
                "_WriteToFile": [
                    "self",
                    "filename",
                    "data"
                ],
                "_LoaderForTestFile": [
                    "self",
                    "filename"
                ],
                "testEmptyEventFile": [
                    "self"
                ],
                "testSingleWrite": [
                    "self"
                ],
                "testMultipleWrites": [
                    "self"
                ],
                "testMultipleLoads": [
                    "self"
                ],
                "testMultipleWritesAtOnce": [
                    "self"
                ]
            }
        },
        "tensorflow.python.summary.impl.directory_watcher": {
            "DirectoryWatcher": {
                "__init__": [
                    "self",
                    "directory",
                    "loader_factory",
                    "path_filter"
                ],
                "Load": [
                    "self"
                ],
                "_LoadInternal": [
                    "self"
                ],
                "OutOfOrderWritesDetected": [
                    "self"
                ],
                "_InitializeLoader": [
                    "self"
                ],
                "_SetPath": [
                    "self",
                    "path"
                ],
                "_GetNextPath": [
                    "self"
                ],
                "_HasOOOWrite": [
                    "self",
                    "path"
                ]
            },
            "DirectoryDeletedError": {}
        },
        "tensorflow.python.summary.impl": {},
        "tensorflow.python.summary.impl.directory_watcher_test": {
            "_ByteLoader": {
                "__init__": [
                    "self",
                    "path"
                ],
                "Load": [
                    "self"
                ]
            },
            "DirectoryWatcherTest": {
                "setUp": [
                    "self"
                ],
                "tearDown": [
                    "self"
                ],
                "_WriteToFile": [
                    "self",
                    "filename",
                    "data"
                ],
                "_LoadAllEvents": [
                    "self"
                ],
                "assertWatcherYields": [
                    "self",
                    "values"
                ],
                "testRaisesWithBadArguments": [
                    "self"
                ],
                "testEmptyDirectory": [
                    "self"
                ],
                "testSingleWrite": [
                    "self"
                ],
                "testMultipleWrites": [
                    "self"
                ],
                "testMultipleLoads": [
                    "self"
                ],
                "testMultipleFilesAtOnce": [
                    "self"
                ],
                "testFinishesLoadingFileWhenSwitchingToNewFile": [
                    "self"
                ],
                "testIntermediateEmptyFiles": [
                    "self"
                ],
                "testPathFilter": [
                    "self"
                ],
                "testDetectsNewOldFiles": [
                    "self"
                ],
                "testIgnoresNewerFiles": [
                    "self"
                ],
                "testDetectsChangingOldFiles": [
                    "self"
                ],
                "testDoesntCrashWhenFileIsDeleted": [
                    "self"
                ],
                "testRaisesRightErrorWhenDirectoryIsDeleted": [
                    "self"
                ],
                "testDoesntRaiseDirectoryDeletedErrorIfOutageIsTransient": [
                    "self"
                ]
            }
        },
        "tensorflow.python.summary.impl.reservoir_test": {
            "ReservoirTest": {
                "testEmptyReservoir": [
                    "self"
                ],
                "testRespectsSize": [
                    "self"
                ],
                "testItemsAndKeys": [
                    "self"
                ],
                "testExceptions": [
                    "self"
                ],
                "testDeterminism": [
                    "self"
                ],
                "testBucketDeterminism": [
                    "self"
                ],
                "testUsesSeed": [
                    "self"
                ],
                "testFilterItemsByKey": [
                    "self"
                ]
            },
            "ReservoirBucketTest": {
                "testEmptyBucket": [
                    "self"
                ],
                "testFillToSize": [
                    "self"
                ],
                "testDoesntOverfill": [
                    "self"
                ],
                "testMaintainsOrder": [
                    "self"
                ],
                "testKeepsLatestItem": [
                    "self"
                ],
                "testSizeOneBucket": [
                    "self"
                ],
                "testSizeZeroBucket": [
                    "self"
                ],
                "testSizeRequirement": [
                    "self"
                ],
                "testRemovesItems": [
                    "self"
                ],
                "testRemovesItemsWhenItemsAreReplaced": [
                    "self"
                ],
                "testLazyFunctionEvaluationAndAlwaysKeepLast": [
                    "self"
                ]
            },
            "ReservoirBucketStatisticalDistributionTest": {
                "setUp": [
                    "self"
                ],
                "AssertBinomialQuantity": [
                    "self",
                    "measured"
                ],
                "testBucketReservoirSamplingViaStatisticalProperties": [
                    "self"
                ]
            }
        },
        "tensorflow.tensorboard.__main__": {},
        "tensorflow.tensorboard": {},
        "tensorflow.tensorboard.tensorboard": {
            "main": [
                "unused_argv"
            ]
        },
        "tensorflow.tensorboard.plugins": {},
        "tensorflow.tensorboard.plugins.base_plugin": {
            "TBPlugin": {
                "get_plugin_handlers": [
                    "self",
                    "run_paths",
                    "logdir"
                ]
            }
        },
        "tensorflow.tensorboard.plugins.projector.plugin": {
            "_read_tensor_file": [
                "fpath"
            ],
            "_latest_checkpoints_changed": [
                "configs",
                "run_path_pairs"
            ],
            "_parse_positive_int_param": [
                "request",
                "query_params",
                "param_name"
            ],
            "ProjectorPlugin": {
                "__init__": [
                    "self"
                ],
                "get_plugin_handlers": [
                    "self",
                    "run_paths",
                    "logdir"
                ],
                "configs": [
                    "self"
                ],
                "_run_paths_changed": [
                    "self"
                ],
                "_augment_configs_with_checkpoint_info": [
                    "self"
                ],
                "_read_latest_config_files": [
                    "self",
                    "run_path_pairs"
                ],
                "_get_reader_for_run": [
                    "self",
                    "run"
                ],
                "_get_metadata_file_for_tensor": [
                    "self",
                    "tensor_name",
                    "config"
                ],
                "_get_bookmarks_file_for_tensor": [
                    "self",
                    "tensor_name",
                    "config"
                ],
                "_canonical_tensor_name": [
                    "self",
                    "tensor_name"
                ],
                "_get_embedding": [
                    "self",
                    "tensor_name",
                    "config"
                ],
                "_serve_runs": [
                    "self",
                    "request",
                    "query_params"
                ],
                "_serve_config": [
                    "self",
                    "request",
                    "query_params"
                ],
                "_serve_metadata": [
                    "self",
                    "request",
                    "query_params"
                ],
                "_serve_tensor": [
                    "self",
                    "request",
                    "query_params"
                ],
                "_serve_bookmarks": [
                    "self",
                    "request",
                    "query_params"
                ],
                "_serve_sprite_image": [
                    "self",
                    "request",
                    "query_params"
                ]
            }
        },
        "tensorflow.tensorboard.plugins.projector": {},
        "tensorflow.tensorboard.backend.process_graph": {
            "prepare_graph_for_ui": [
                "graph",
                "limit_attr_size",
                "large_attrs_key"
            ]
        },
        "tensorflow.tensorboard.backend.handler_test": {
            "UniformSampleTest": {
                "testNotEnoughValues": [
                    "self"
                ],
                "includesProperNumberOfValues": [
                    "self"
                ],
                "testIncludesBeginningAndEnd": [
                    "self"
                ],
                "testNonIntegerCountFails": [
                    "self"
                ]
            }
        },
        "tensorflow.tensorboard.backend.server_test": {
            "TensorboardServerTest": {
                "setUp": [
                    "self"
                ],
                "tearDown": [
                    "self"
                ],
                "_get": [
                    "self",
                    "path",
                    "headers"
                ],
                "_getJson": [
                    "self",
                    "path"
                ],
                "testBasicStartup": [
                    "self"
                ],
                "testRequestMainPage": [
                    "self"
                ],
                "testRequestNonexistentPage": [
                    "self"
                ],
                "testDirectoryTraversal": [
                    "self"
                ],
                "testLogdir": [
                    "self"
                ],
                "testRuns": [
                    "self"
                ],
                "testApplicationPaths_getCached": [
                    "self"
                ],
                "testDataPaths_disableAllCaching": [
                    "self"
                ],
                "testHistograms": [
                    "self"
                ],
                "testSampleScalars": [
                    "self"
                ],
                "testSampleScalarsWithLargeSampleCount": [
                    "self"
                ],
                "testImages": [
                    "self"
                ],
                "testAudio": [
                    "self"
                ],
                "testGraph": [
                    "self"
                ],
                "testProjectorRunsWithEmbeddings": [
                    "self"
                ],
                "testProjectorInfo": [
                    "self"
                ],
                "testProjectorTensor": [
                    "self"
                ],
                "testAcceptGzip_compressesResponse": [
                    "self"
                ],
                "testAcceptAnyEncoding_compressesResponse": [
                    "self"
                ],
                "testAcceptDoodleEncoding_doesNotCompressResponse": [
                    "self"
                ],
                "testAcceptGzip_doesNotCompressImage": [
                    "self"
                ],
                "testRunMetadata": [
                    "self"
                ],
                "_GenerateTestData": [
                    "self"
                ],
                "_GenerateProjectorTestData": [
                    "self",
                    "run_path"
                ]
            },
            "TensorboardServerUsingMetagraphOnlyTest": {},
            "ParseEventFilesSpecTest": {
                "testRunName": [
                    "self"
                ],
                "testPathWithColonThatComesAfterASlash_isNotConsideredARunName": [
                    "self"
                ],
                "testMultipleDirectories": [
                    "self"
                ],
                "testNormalizesPaths": [
                    "self"
                ],
                "testAbsolutifies": [
                    "self"
                ],
                "testRespectsGCSPath": [
                    "self"
                ],
                "testDoesNotExpandUserInGCSPath": [
                    "self"
                ],
                "testDoesNotNormalizeGCSPath": [
                    "self"
                ],
                "testRunNameWithGCSPath": [
                    "self"
                ]
            },
            "TensorBoardAssetsTest": {
                "testTagFound": [
                    "self"
                ]
            }
        },
        "tensorflow.tensorboard.backend": {},
        "tensorflow.tensorboard.backend.server": {
            "ParseEventFilesSpec": [
                "logdir"
            ],
            "ReloadMultiplexer": [
                "multiplexer",
                "path_to_run"
            ],
            "StartMultiplexerReloadingThread": [
                "multiplexer",
                "path_to_run",
                "load_interval"
            ],
            "BuildServer": [
                "multiplexer",
                "host",
                "port",
                "logdir"
            ],
            "ThreadedHTTPServer": {}
        },
        "tensorflow.tensorboard.backend.handler": {
            "_content_type_for_image": [
                "encoded_image_string"
            ],
            "_uniform_sample": [
                "values",
                "count"
            ],
            "_OutputFormat": {},
            "TensorboardHandler": {
                "__init__": [
                    "self",
                    "multiplexer",
                    "logdir"
                ],
                "_setup_data_handlers": [
                    "self"
                ],
                "respond": [
                    "self"
                ],
                "_image_response_for_run": [
                    "self",
                    "run_images",
                    "run",
                    "tag"
                ],
                "_audio_response_for_run": [
                    "self",
                    "run_audio",
                    "run",
                    "tag"
                ],
                "_path_is_safe": [
                    "self",
                    "path"
                ],
                "_serve_logdir": [
                    "self",
                    "unused_query_params"
                ],
                "_serve_scalars": [
                    "self",
                    "query_params"
                ],
                "_serve_graph": [
                    "self",
                    "query_params"
                ],
                "_serve_run_metadata": [
                    "self",
                    "query_params"
                ],
                "_serve_histograms": [
                    "self",
                    "query_params"
                ],
                "_serve_compressed_histograms": [
                    "self",
                    "query_params"
                ],
                "_serve_images": [
                    "self",
                    "query_params"
                ],
                "_serve_image": [
                    "self",
                    "query_params"
                ],
                "_query_for_individual_image": [
                    "self",
                    "run",
                    "tag",
                    "index"
                ],
                "_serve_audio": [
                    "self",
                    "query_params"
                ],
                "_serve_individual_audio": [
                    "self",
                    "query_params"
                ],
                "_query_for_individual_audio": [
                    "self",
                    "run",
                    "tag",
                    "index"
                ],
                "_serve_runs": [
                    "self",
                    "unused_query_params"
                ],
                "_serve_index": [
                    "self",
                    "unused_query_params"
                ],
                "_serve_js": [
                    "self",
                    "unused_query_params"
                ],
                "_serve_static_file": [
                    "self",
                    "path"
                ],
                "do_GET": [
                    "self"
                ],
                "log_message": [
                    "self"
                ],
                "log_request": [
                    "self"
                ]
            }
        },
        "tensorflow.tensorboard.lib.python.http": {
            "Respond": [
                "handler",
                "content",
                "content_type",
                "code",
                "expires",
                "content_encoding",
                "encoding"
            ]
        },
        "tensorflow.tensorboard.lib.python.http_test": {
            "_create_mocked_handler": [
                "path",
                "headers"
            ],
            "_gunzip": [
                "bs"
            ],
            "RespondTest": {
                "testHelloWorld": [
                    "self"
                ],
                "testHeadRequest_doesNotWrite": [
                    "self"
                ],
                "testPlainText_appendsUtf8ToContentType": [
                    "self"
                ],
                "testContentLength_isInBytes": [
                    "self"
                ],
                "testResponseCharsetTranscoding": [
                    "self"
                ],
                "testAcceptGzip_compressesResponse": [
                    "self"
                ],
                "testJson_getsAutoSerialized": [
                    "self"
                ],
                "testExpires_setsCruiseControl": [
                    "self"
                ]
            }
        },
        "tensorflow.tensorboard.lib.python": {},
        "tensorflow.tensorboard.lib.python.json_util_test": {
            "FloatWrapperTest": {
                "_assertWrapsAs": [
                    "self",
                    "to_wrap",
                    "expected"
                ],
                "testWrapsPrimitives": [
                    "self"
                ],
                "testWrapsObjectValues": [
                    "self"
                ],
                "testWrapsObjectKeys": [
                    "self"
                ],
                "testWrapsInListsAndTuples": [
                    "self"
                ],
                "testWrapsRecursively": [
                    "self"
                ],
                "testTuple_turnsIntoList": [
                    "self"
                ],
                "testSet_turnsIntoSortedList": [
                    "self"
                ],
                "testByteString_turnsIntoUnicodeString": [
                    "self"
                ]
            }
        },
        "tensorflow.tensorboard.lib.python.json_util": {
            "Cleanse": [
                "obj",
                "encoding"
            ]
        },
        "tensorflow.tensorboard.scripts.serialize_tensorboard": {
            "Url": [
                "route",
                "params"
            ],
            "Clean": [
                "s"
            ],
            "EnsureDirectoryExists": [
                "path"
            ],
            "PrintAndLog": [
                "msg",
                "lvl"
            ],
            "main": [
                "unused_argv"
            ],
            "TensorBoardStaticSerializer": {
                "__init__": [
                    "self",
                    "connection",
                    "target_path"
                ],
                "GetAndSave": [
                    "self",
                    "url",
                    "save_suffix"
                ],
                "GetRouteAndSave": [
                    "self",
                    "route",
                    "params"
                ],
                "Run": [
                    "self"
                ]
            }
        },
        "tensorflow.tensorboard.scripts": {},
        "tensorflow.tensorboard.scripts.generate_testdata": {
            "_MakeHistogramBuckets": [],
            "_MakeHistogram": [
                "values"
            ],
            "WriteScalarSeries": [
                "writer",
                "tag",
                "f",
                "n"
            ],
            "WriteHistogramSeries": [
                "writer",
                "tag",
                "mu_sigma_tuples",
                "n"
            ],
            "WriteImageSeries": [
                "writer",
                "tag",
                "n_images"
            ],
            "WriteAudioSeries": [
                "writer",
                "tag",
                "n_audio"
            ],
            "GenerateTestData": [
                "path"
            ],
            "main": [
                "unused_argv"
            ]
        },
        "tensorflow.core": {},
        "tensorflow.core.protobuf.worker_service_pb2": {},
        "tensorflow.core.protobuf.tensor_bundle_pb2": {},
        "tensorflow.core.protobuf.master_pb2": {},
        "tensorflow.core.protobuf.control_flow_pb2": {},
        "tensorflow.core.protobuf.meta_graph_pb2": {},
        "tensorflow.core.protobuf.worker_pb2": {},
        "tensorflow.core.protobuf.named_tensor_pb2": {},
        "tensorflow.core.protobuf.master_service_pb2": {},
        "tensorflow.core.protobuf": {},
        "tensorflow.core.protobuf.config_pb2": {},
        "tensorflow.core.protobuf.saved_model_pb2": {},
        "tensorflow.core.protobuf.queue_runner_pb2": {},
        "tensorflow.core.protobuf.tensorflow_server_pb2": {},
        "tensorflow.core.protobuf.saver_pb2": {},
        "tensorflow.core.util.memmapped_file_system_pb2": {},
        "tensorflow.core.util.event_pb2": {},
        "tensorflow.core.util": {},
        "tensorflow.core.util.test_log_pb2": {},
        "tensorflow.core.util.saved_tensor_slice_pb2": {},
        "tensorflow.core.lib": {},
        "tensorflow.core.lib.core.error_codes_pb2": {},
        "tensorflow.core.lib.core": {},
        "tensorflow.core.framework.step_stats_pb2": {},
        "tensorflow.core.framework.graph_pb2": {},
        "tensorflow.core.framework.op_def_pb2": {},
        "tensorflow.core.framework.node_def_pb2": {},
        "tensorflow.core.framework.function_pb2": {},
        "tensorflow.core.framework.types_pb2": {},
        "tensorflow.core.framework.variable_pb2": {},
        "tensorflow.core.framework.log_memory_pb2": {},
        "tensorflow.core.framework.allocation_description_pb2": {},
        "tensorflow.core.framework.tensor_description_pb2": {},
        "tensorflow.core.framework.tensor_slice_pb2": {},
        "tensorflow.core.framework.versions_pb2": {},
        "tensorflow.core.framework.kernel_def_pb2": {},
        "tensorflow.core.framework.tensor_shape_pb2": {},
        "tensorflow.core.framework.device_attributes_pb2": {},
        "tensorflow.core.framework.cost_graph_pb2": {},
        "tensorflow.core.framework.resource_handle_pb2": {},
        "tensorflow.core.framework.tensor_pb2": {},
        "tensorflow.core.framework.attr_value_pb2": {},
        "tensorflow.core.framework.summary_pb2": {},
        "tensorflow.core.framework": {},
        "tensorflow.core.example.feature_pb2": {},
        "tensorflow.core.example.example_pb2": {},
        "tensorflow.core.example.example_parser_configuration_pb2": {},
        "tensorflow.core.example": {}
    }
}